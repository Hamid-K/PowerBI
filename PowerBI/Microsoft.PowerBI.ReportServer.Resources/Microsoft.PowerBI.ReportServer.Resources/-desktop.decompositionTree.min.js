"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "decompositionTree" ], {
    51402: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            DecompositionTree: function() {
                return DecompositionTree;
            }
        });
        var tslib_es6 = __webpack_require__(81337), decompositionTree_capabilities = __webpack_require__(1409), conditional_formatting_util = __webpack_require__(29324), dataLabelViewModel1Consts = __webpack_require__(56707), objectEnumerationBuilder = __webpack_require__(28579), visualLocKeys = __webpack_require__(33024), pluginsCapabilities = __webpack_require__(13536), visualWarnings = __webpack_require__(45296), CssConstants = __webpack_require__(79154), debug = __webpack_require__(62458), build_control_util = __webpack_require__(56578), StandaloneUtility3 = __webpack_require__(43286), enums = __webpack_require__(46135), selector = __webpack_require__(32379), contracts_windowExpansionState = __webpack_require__(74711), dataViewObject2 = __webpack_require__(82755), dataViewWildcard = __webpack_require__(96915), windowExpansionStateBuilder = __webpack_require__(74981), common_colorHelper = __webpack_require__(90120), fontProperties = __webpack_require__(18664), units = __webpack_require__(32105), color = __webpack_require__(64067), fontUtils = __webpack_require__(38265), textMeasurementService = __webpack_require__(32041), tooltipUtils = __webpack_require__(38400), browserUtils = __webpack_require__(59107), TreeSelectors = function() {
            function TreeSelectors() {}
            return TreeSelectors.mainContainer = (0, CssConstants.CH)("mainContainer"), TreeSelectors.treeContainer = (0, 
            CssConstants.CH)("treeContainer"), TreeSelectors.treeButtonsContainer = (0, CssConstants.CH)("treeButtonsContainer"), 
            TreeSelectors.treeNode = (0, CssConstants.CH)("treeNode"), TreeSelectors.link = (0, 
            CssConstants.CH)("link"), TreeSelectors.expandButton = (0, CssConstants.CH)("expandButton"), 
            TreeSelectors.dataBar = (0, CssConstants.CH)("dataBar"), TreeSelectors.iconOverlay = (0, 
            CssConstants.CH)("iconOverlay"), TreeSelectors.nodeOverlay = (0, CssConstants.CH)("nodeOverlay"), 
            TreeSelectors.valueDataBar = (0, CssConstants.CH)("valueDataBar"), TreeSelectors.highlightDataBar = (0, 
            CssConstants.CH)("highlightDataBar"), TreeSelectors.dataBarBackground = (0, CssConstants.CH)("dataBarBackground"), 
            TreeSelectors.dataBarSeparator = (0, CssConstants.CH)("dataBarSeparator"), TreeSelectors.label = (0, 
            CssConstants.CH)("label"), TreeSelectors.value = (0, CssConstants.CH)("value"), 
            TreeSelectors.headerContainer = (0, CssConstants.CH)("headerContainer"), TreeSelectors.levelHeader = (0, 
            CssConstants.CH)("levelHeader"), TreeSelectors.headerBackground = (0, CssConstants.CH)("headerBackground"), 
            TreeSelectors.levelTitle = (0, CssConstants.CH)("levelTitle"), TreeSelectors.levelTitleUnderline = (0, 
            CssConstants.CH)("levelTitleUnderline"), TreeSelectors.levelSubtitle = (0, CssConstants.CH)("levelSubtitle"), 
            TreeSelectors.aiLevel = (0, CssConstants.CH)("aiLevel"), TreeSelectors.lockedLevel = (0, 
            CssConstants.CH)("lockedLevel"), TreeSelectors.removeLevel = (0, CssConstants.CH)("removeLevel"), 
            TreeSelectors.background = (0, CssConstants.CH)("background"), TreeSelectors.loadMore = (0, 
            CssConstants.CH)("loadMore"), TreeSelectors.recenterButton = (0, CssConstants.CH)("recenterButton"), 
            TreeSelectors.svgBackground = (0, CssConstants.CH)("svgBackground"), TreeSelectors.exiting = (0, 
            CssConstants.CH)("exiting"), TreeSelectors;
        }(), DecompositionTreeKeyboardNavigation = function() {
            function DecompositionTreeKeyboardNavigation(stringResourceProvider) {
                var _this = this;
                this.stringResourceProvider = stringResourceProvider;
                var self = this;
                this.registeredStates = [ {
                    selector: TreeSelectors.mainContainer,
                    onKeyDown: function(keyCode) {
                        return (38 === keyCode || 9 === keyCode) && _this.handleMainContainer();
                    },
                    onSelect: function() {
                        return _this.tryRender(TreeSelectors.treeNode, 0, 0);
                    },
                    getAriaLabel: function() {
                        return _this.stringResourceProvider.get("Visual_Plot");
                    }
                }, {
                    selector: TreeSelectors.headerContainer,
                    onKeyDown: function(keyCode) {
                        return (40 === keyCode || 9 === keyCode) && _this.tryRender(TreeSelectors.mainContainer);
                    },
                    onSelect: function() {
                        return _this.tryRender(TreeSelectors.levelHeader, 1);
                    },
                    getAriaLabel: function() {
                        return _this.stringResourceProvider.get("DecompositionTree_Screen_Reader_Level_Headers");
                    }
                }, {
                    selector: TreeSelectors.treeNode,
                    onKeyDown: function(keyCode, node, shiftKey) {
                        return _this.handleNode(keyCode, node);
                    },
                    onSelect: function(renderer, node) {
                        renderer.nodeClicked.emit({
                            node: node.data,
                            point: self.getCenter(this)
                        });
                    },
                    onCancel: function() {
                        return _this.tryRender(TreeSelectors.mainContainer);
                    },
                    getAriaLabel: function(node) {
                        return _this.getTreeNodeAriaLabel(node);
                    }
                }, {
                    selector: TreeSelectors.levelHeader,
                    onKeyDown: function(keyCode, level, shiftKey) {
                        return _this.handleLevelHeader(keyCode, level, shiftKey);
                    },
                    onSelect: function(renderer, level) {
                        return _this.tryRender(TreeSelectors.levelTitle, level.level);
                    },
                    onCancel: function() {
                        return _this.tryRender(TreeSelectors.headerContainer);
                    },
                    getAriaLabel: function(level) {
                        return _this.stringResourceProvider.format("DecompositionTree_Screen_Reader_Level_Header", level.level);
                    }
                }, {
                    selector: TreeSelectors.levelTitle,
                    onKeyDown: function(keyCode, level, shiftKey) {
                        return _this.handleLevelTitle(keyCode, level, shiftKey);
                    },
                    onSelect: function(renderer, level) {
                        renderer.levelClicked.emit({
                            element: this,
                            level
                        });
                    },
                    onCancel: function(level) {
                        return _this.tryRender(TreeSelectors.levelHeader, level.level);
                    }
                }, {
                    selector: TreeSelectors.removeLevel,
                    onKeyDown: function(keyCode, level, shiftKey) {
                        return _this.handleRemoveLevel(keyCode, level, shiftKey);
                    },
                    onSelect: function(renderer, level) {
                        return renderer.removeLevelButtonClicked.emit(level);
                    },
                    onCancel: function(level) {
                        return _this.tryRender(TreeSelectors.levelHeader, level.level);
                    },
                    getAriaLabel: function() {
                        return _this.stringResourceProvider.get("DecompositionTree_RemoveLevel_Tooltip");
                    }
                }, {
                    selector: TreeSelectors.iconOverlay,
                    onKeyDown: function(keyCode, level, shiftKey) {
                        return _this.handleIconOverlay(keyCode, level, shiftKey);
                    },
                    onSelect: function(renderer, level) {
                        return renderer.levelIconClicked.emit(level);
                    },
                    onCancel: function(level) {
                        return _this.tryRender(TreeSelectors.levelHeader, level.level);
                    },
                    getAriaLabel: function(data) {
                        return data.tooltipData;
                    }
                }, {
                    selector: TreeSelectors.expandButton,
                    onKeyDown: function(keyCode, node) {
                        return _this.handleExpandButton(keyCode, node);
                    },
                    onSelect: function(renderer, node) {
                        renderer.expandButtonClicked.emit({
                            node: node.data,
                            point: self.getCenter(this)
                        });
                    },
                    onCancel: function() {
                        return _this.tryRender(TreeSelectors.mainContainer);
                    },
                    getAriaLabel: function() {
                        return _this.stringResourceProvider.get("DecompositionTree_Screen_Reader_Expand_Level");
                    }
                }, {
                    selector: TreeSelectors.loadMore,
                    onKeyDown: function(keyCode, node) {
                        return _this.handleLoadMore(keyCode, node);
                    },
                    onSelect: function(renderer, node) {
                        renderer.loadMoreClicked.emit(node.data);
                    },
                    onCancel: function() {
                        return _this.tryRender(TreeSelectors.mainContainer);
                    },
                    getAriaLabel: function(node) {
                        return _this.stringResourceProvider.get(1 === node.data.restartKind ? "DecompositionTree_ScrollLevelUp_Tooltip" : "DecompositionTree_ScrollLevelDown_Tooltip");
                    }
                }, {
                    selector: TreeSelectors.recenterButton,
                    onKeyDown: function(keyCode, node) {
                        return _this.handleRecenterButton(keyCode, node);
                    },
                    onSelect: function(renderer, node) {
                        renderer.loadMoreClicked.emit(node.data);
                    },
                    onCancel: function() {
                        return _this.tryRender(TreeSelectors.mainContainer);
                    },
                    getAriaLabel: function() {
                        return _this.stringResourceProvider.get("DecompositionTree_RecenterButton_Tooltip");
                    }
                } ];
            }
            return DecompositionTreeKeyboardNavigation.prototype.bindEvents = function(rootSelection, renderer) {
                var _this = this;
                this.rootSelection = rootSelection, this.renderer = renderer, rootSelection.on("keydown", function() {
                    var d3Event = d3.event;
                    _this.onKeydown(d3Event.keyCode, renderer, !!d3Event.shiftKey);
                });
                for (var _loop_1 = function(state) {
                    var selection = rootSelection.selectAll(state.selector.selector).attr("tabindex", 0).attr("focusable", !0).classed("setFocusRing", !0);
                    state.getAriaLabel && selection.attr("aria-label", function(data) {
                        return state.getAriaLabel(data);
                    });
                }, _i = 0, _a = this.registeredStates; _i < _a.length; _i++) _loop_1(_a[_i]);
            }, DecompositionTreeKeyboardNavigation.prototype.getCenter = function(element) {
                var rect = element.getBoundingClientRect();
                return {
                    x: rect.left + rect.width / 2,
                    y: rect.top + rect.height / 2
                };
            }, DecompositionTreeKeyboardNavigation.prototype.onKeydown = function(keyCode, renderer, shiftKey) {
                var d3Event = d3.event, targetElement = d3.select(d3Event.target);
                if (targetElement && targetElement.node()) {
                    for (var matchingState, _i = 0, _a = this.registeredStates; _i < _a.length; _i++) {
                        var state = _a[_i];
                        if (targetElement.classed(state.selector.class)) {
                            matchingState = state;
                            break;
                        }
                    }
                    if (matchingState) {
                        var preventDefault = !1;
                        !matchingState.onSelect || 13 !== keyCode && 32 !== keyCode ? matchingState.onCancel && 27 === keyCode && (matchingState.onCancel(targetElement.datum()), 
                        preventDefault = !0) : (matchingState.onSelect.bind(targetElement.node())(renderer, targetElement.datum()), 
                        preventDefault = !0), matchingState.onKeyDown && (preventDefault = matchingState.onKeyDown(keyCode, targetElement.datum(), shiftKey)), 
                        preventDefault && (d3Event.preventDefault(), d3Event.stopPropagation());
                    }
                }
            }, DecompositionTreeKeyboardNavigation.prototype.tryRender = function(selector, level, nodePosition, restartKind) {
                void 0 === level && (level = 0), void 0 === nodePosition && (nodePosition = 0);
                var newElement = this.getSelectedElement(selector, level, nodePosition, restartKind);
                return !(!newElement || !newElement.node() || "none" === newElement.style("display") || (this.renderer.ensureElementVisible(newElement), 
                this.render(newElement), 0));
            }, DecompositionTreeKeyboardNavigation.prototype.handleUnhandledArrowKeys = function(keyCode) {
                return 37 === keyCode || 39 === keyCode || 38 === keyCode || 40 === keyCode;
            }, DecompositionTreeKeyboardNavigation.prototype.handleMainContainer = function() {
                return this.rootSelection.selectAll(TreeSelectors.levelHeader.selector).size() > 1 && this.tryRender(TreeSelectors.headerContainer), 
                !0;
            }, DecompositionTreeKeyboardNavigation.prototype.handleIconOverlay = function(keyCode, level, shiftKey) {
                return 37 === keyCode || 9 === keyCode && shiftKey ? (this.tryRender(TreeSelectors.removeLevel, level.level) || this.tryRender(TreeSelectors.levelTitle, level.level), 
                !0) : 39 === keyCode || 9 === keyCode ? (this.tryRender(TreeSelectors.levelTitle, level.level), 
                !0) : this.handleUnhandledArrowKeys(keyCode);
            }, DecompositionTreeKeyboardNavigation.prototype.handleExpandButton = function(keyCode, node) {
                return 37 === keyCode ? (this.tryRender(TreeSelectors.treeNode, node.data.level, node.data.position), 
                !0) : this.handleUnhandledArrowKeys(keyCode);
            }, DecompositionTreeKeyboardNavigation.prototype.handleRemoveLevel = function(keyCode, level, shiftKey) {
                return 37 === keyCode || 9 === keyCode && shiftKey ? (this.tryRender(TreeSelectors.levelTitle, level.level), 
                !0) : 39 === keyCode || 9 === keyCode ? (this.tryRender(TreeSelectors.iconOverlay, level.level), 
                !0) : this.handleUnhandledArrowKeys(keyCode);
            }, DecompositionTreeKeyboardNavigation.prototype.handleNode = function(keyCode, node) {
                switch (keyCode) {
                  case 39:
                    var expanded = _.find(node.children, function(child) {
                        return child.data.expanded;
                    });
                    return expanded && this.tryRender(TreeSelectors.treeNode, node.data.level + 1, expanded.data.position) || this.tryRender(TreeSelectors.treeNode, node.data.level + 1, 0) || this.tryRender(TreeSelectors.expandButton, node.data.level, node.data.position), 
                    !0;

                  case 37:
                    return node.parent && this.tryRender(TreeSelectors.treeNode, node.data.level - 1, node.parent.data.position) || this.tryRender(TreeSelectors.treeNode, node.data.level - 1, 0), 
                    !0;

                  case 38:
                    var recenterUpPosition = 1 === node.data.position ? 0 : node.parent && node.data.position === _.last(node.parent.children).data.position ? node.data.position : 1 / 0;
                    return this.tryRender(TreeSelectors.recenterButton, node.data.level, recenterUpPosition) || this.tryRender(TreeSelectors.treeNode, node.data.level, node.data.position - 1) || this.tryRender(TreeSelectors.loadMore, node.data.level, node.data.position, 1) || this.tryRender(TreeSelectors.levelHeader, node.data.level, node.data.position), 
                    !0;

                  case 40:
                    var recenterDownPosition = 0 === node.data.position ? 0 : node.parent && node.data.position === _.last(node.parent.children).data.position - 1 ? node.data.position + 1 : 1 / 0;
                    return this.tryRender(TreeSelectors.recenterButton, node.data.level, recenterDownPosition) || this.tryRender(TreeSelectors.treeNode, node.data.level, node.data.position + 1) || this.tryRender(TreeSelectors.loadMore, node.data.level, node.data.position, 2), 
                    !0;
                }
                return this.handleUnhandledArrowKeys(keyCode);
            }, DecompositionTreeKeyboardNavigation.prototype.handleLevelHeader = function(keyCode, level, shiftKey) {
                if (37 === keyCode || 9 === keyCode && shiftKey) {
                    if (!this.tryRender(TreeSelectors.levelHeader, level.level - 1)) {
                        var levelHeadersCount = this.rootSelection.selectAll(TreeSelectors.levelHeader.selector).size();
                        this.tryRender(TreeSelectors.levelHeader, levelHeadersCount - 1);
                    }
                    return !0;
                }
                return 39 === keyCode || 9 === keyCode ? (this.tryRender(TreeSelectors.levelHeader, level.level + 1) || this.tryRender(TreeSelectors.levelHeader, 1), 
                !0) : 40 === keyCode ? (this.tryRender(TreeSelectors.loadMore, level.level, 0, 1) || this.tryRender(TreeSelectors.treeNode, level.level, 0), 
                !0) : this.handleUnhandledArrowKeys(keyCode);
            }, DecompositionTreeKeyboardNavigation.prototype.handleLoadMore = function(keyCode, node) {
                return 40 === keyCode && 1 === node.data.restartKind ? (this.tryRender(TreeSelectors.treeNode, node.data.level, 0), 
                !0) : 38 === keyCode && 2 === node.data.restartKind ? (this.tryRender(TreeSelectors.treeNode, node.data.level, _.last(node.parent.children).data.position), 
                !0) : 38 === keyCode ? (this.tryRender(TreeSelectors.levelHeader, node.data.level), 
                !0) : this.handleUnhandledArrowKeys(keyCode);
            }, DecompositionTreeKeyboardNavigation.prototype.handleRecenterButton = function(keyCode, node) {
                switch (keyCode) {
                  case 40:
                    return this.tryRender(TreeSelectors.treeNode, node.data.level, Math.min(_.last(node.parent.children).data.position, node.data.position + 1)), 
                    !0;

                  case 38:
                    return this.tryRender(TreeSelectors.treeNode, node.data.level, Math.max(node.data.position - 1, 0)), 
                    !0;
                }
                return this.handleUnhandledArrowKeys(keyCode);
            }, DecompositionTreeKeyboardNavigation.prototype.handleLevelTitle = function(keyCode, level, shiftKey) {
                return 37 === keyCode || 9 === keyCode && shiftKey ? (this.tryRender(TreeSelectors.iconOverlay, level.level), 
                !0) : 39 === keyCode || 9 === keyCode ? (this.tryRender(TreeSelectors.removeLevel, level.level) || this.tryRender(TreeSelectors.iconOverlay, level.level), 
                !0) : this.handleUnhandledArrowKeys(keyCode);
            }, DecompositionTreeKeyboardNavigation.prototype.render = function(selectedElement) {
                browserUtils.M.focus(selectedElement.node());
            }, DecompositionTreeKeyboardNavigation.prototype.getSelectedElement = function(selector, level, nodePosition, restartKind) {
                if (selector) {
                    var selection = this.rootSelection.selectAll(selector.selector);
                    switch (selector.class) {
                      case TreeSelectors.expandButton.class:
                      case TreeSelectors.treeNode.class:
                      case TreeSelectors.recenterButton.class:
                        return selection.filter(function(e) {
                            return e.data.level === level && e.data.position === nodePosition;
                        });

                      case TreeSelectors.levelHeader.class:
                      case TreeSelectors.levelTitle.class:
                      case TreeSelectors.iconOverlay.class:
                      case TreeSelectors.removeLevel.class:
                        return selection.filter(function(e) {
                            return level > 0 && e.level === level;
                        });

                      case TreeSelectors.loadMore.class:
                        return selection.filter(function(e) {
                            return e.data.level === level && e.data.restartKind === restartKind;
                        });

                      case void 0:
                        break;

                      default:
                        return selection;
                    }
                }
            }, DecompositionTreeKeyboardNavigation.prototype.getTreeNodeAriaLabel = function(node) {
                return node.data.expanded ? this.stringResourceProvider.format("DecompositionTree_Screen_Reader_Expanded_Tree_Node", (0, 
                tooltipUtils.X)(node.data.tooltips)) : (0, tooltipUtils.X)(node.data.tooltips);
            }, DecompositionTreeKeyboardNavigation;
        }(), HLink = function() {
            function HLink() {
                var _this = this;
                this.p2Ratio = .5, this.p1Ratio = .5, this.path = function(d) {
                    var source = d.source, target = d.target, delta = d.target.x - d.source.x, p1 = {
                        x: source.x + delta * _this.p1Ratio,
                        y: source.y
                    }, p2 = {
                        x: target.x - delta * _this.p2Ratio,
                        y: target.y
                    };
                    return "M".concat(source.x, ",").concat(source.y, " C").concat(p1.x, ",").concat(p1.y, " ").concat(p2.x, ",").concat(p2.y, " ").concat(target.x, ",").concat(target.y);
                };
            }
            return HLink.prototype.p1 = function(ratio) {
                return this.p1Ratio = ratio, this;
            }, HLink.prototype.p2 = function(ratio) {
                return this.p2Ratio = ratio, this;
            }, HLink;
        }(), TreeTraversal = function() {
            function TreeTraversal() {}
            return TreeTraversal.visitSubTree = function(node, visitor, accumulator) {
                if (void 0 === accumulator && (accumulator = null), !node) return accumulator;
                if (accumulator = visitor(node, accumulator), !_.isEmpty(node.children)) for (var _i = 0, _a = node.children; _i < _a.length; _i++) TreeTraversal.visitSubTree(_a[_i], visitor, accumulator);
                return accumulator;
            }, TreeTraversal;
        }(), LayoutConstraints = function() {
            function LayoutConstraints() {}
            return LayoutConstraints.applyLayoutConstraints = function(nodes, maxDistance, keepNodeInView) {
                LayoutConstraints.recalculateLayout(nodes, maxDistance, 0, null, 0), keepNodeInView ? (LayoutConstraints.recalculateLayout(nodes, maxDistance, 1, keepNodeInView, 0), 
                LayoutConstraints.recalculateLayout(nodes, maxDistance, 0, keepNodeInView, 2)) : (LayoutConstraints.recalculateLayout(nodes, maxDistance, 0, null, 1), 
                LayoutConstraints.recalculateLayout(nodes, maxDistance, 0, null, 0));
            }, LayoutConstraints.recalculateLayout = function(nodes, distance, mode, shouldAlignNode, defaultAlignment) {
                debug.fF.assertValue(nodes, "Nodes should be defined");
                var dY = 0;
                nodes = nodes.sort(function(a, b) {
                    return a.depth === b.depth ? a.y - b.y : a.depth - b.depth;
                });
                var firstNodeOnEachLevel = _.chain(nodes).map(function(node, i) {
                    return nodes[i - 1] && node.depth === nodes[i - 1].depth ? void 0 : i;
                }).filter(function(i) {
                    return void 0 !== i;
                }).value();
                firstNodeOnEachLevel.push(nodes.length);
                for (var referenceNode = _.first(nodes), i = 0; i < firstNodeOnEachLevel.length - 1; i++) {
                    var nodeToAlign = nodes[firstNodeOnEachLevel[i]];
                    1 === defaultAlignment && (nodeToAlign = nodes[firstNodeOnEachLevel[i + 1] - 1]);
                    var nodeOfInterest = nodeToAlign;
                    if (shouldAlignNode) {
                        for (var j = firstNodeOnEachLevel[i]; j < firstNodeOnEachLevel[i + 1]; j++) if (shouldAlignNode(nodes[j])) {
                            nodeOfInterest = nodes[j];
                            break;
                        }
                        2 === defaultAlignment && (nodeToAlign = nodeOfInterest);
                    }
                    for ((2 === defaultAlignment || 0 === defaultAlignment) && nodeToAlign.y + dY < referenceNode.y - distance ? dY = referenceNode.y - distance - nodeToAlign.y : (2 === defaultAlignment || 1 === defaultAlignment) && nodeToAlign.y + dY > referenceNode.y + distance && (dY = referenceNode.y + distance - nodeToAlign.y), 
                    1 === mode && (referenceNode = nodeOfInterest), j = firstNodeOnEachLevel[i]; j < firstNodeOnEachLevel[i + 1]; j++) nodes[j].y = nodes[j].y + dY;
                }
            }, LayoutConstraints;
        }();
        function trimTextWithEllipsis() {
            var text = this.textContent;
            if (text && 0 !== text.length) {
                var width = parseFloat(this.getAttribute("width"));
                if (_.isFinite(width)) if (this.getComputedTextLength) for (;this.getComputedTextLength() > width && "\u2026" !== this.textContent; ) text = text.slice(0, -1), 
                this.textContent = text + "\u2026"; else debug.fF.assertFail("Element is not of type SVGTextContentElement");
            }
        }
        var TreeVisualConfig = function() {
            return function(visualStyle, showSubtitles) {
                this.dataBarDefaultWidth = 130, this.dataBarHeight = 10, this.dataBarSeparatorHeight = 14, 
                this.dataBarSeparatorThickness = 1, this.hoverOpacity = .75, this.highlightDataBarHeightRatio = .4, 
                this.highlightDataBarOpacity = .4, this.labelLeftMargin = 5, this.loadMoreYOffsetBefore = -20, 
                this.recenterButtonBeforeYOffset = -10, this.minZoom = .5, this.defaultZoom = 1, 
                this.maxZoom = 1, this.defaultLayoutDensityFactor = 1, this.denseLayoutDensityFactor = .8, 
                this.sparseLayoutDensityFactor = 1.2, this.minHorizontalLayoutDensityFactor = .9, 
                this.maxHorizontalLayoutDensityFactor = 1.5, this.treeLayoutFixedMargin = 40, this.panningHorizontalLimit = 25, 
                this.panningVerticalLimit = 25, this.linkCurvature = .5, this.linkHighlightedStrokeThickness = 1.5, 
                this.linkDefaultStrokeThickness = 1, this.expandFontFamily = "'Segoe UI','wf_segoe-ui_normal', helvetica, arial, sans-serif", 
                this.expandFontSize = "20px", this.expandLeftMargin = 5, this.expandTopMargin = 0, 
                this.marginTop = 25, this.marginLeft = 25, this.headerHeight = 55, this.underlineYOffset = 5, 
                this.underlineHeight = 2, this.removeLevelFontFamily = "'Segoe UI','wf_segoe-ui_normal', helvetica, arial, sans-serif", 
                this.removeLevelFontSize = "20px", this.removeLevelYOffset = 2, this.removeLevelWidth = 11, 
                this.glyphIconFamily = "PowrMDL2", this.iconFontSize = "14px", this.iconOverlayYOffset = -12, 
                this.iconOverlayWidth = 16, this.iconOverlayHeight = 36, this.aiIconYOffset = 3, 
                this.aiIconXOffset = -18, this.crossFilterOpacity = .4;
                var textYOffset = function(font) {
                    var properties = (0, fontProperties.qk)(font);
                    return textMeasurementService.b.estimateSvgTextHeight(properties) - textMeasurementService.b.estimateSvgTextBaselineDelta(properties);
                };
                this.subtitleHeight = textYOffset(visualStyle.levelSubtitleFont) + 9, this.headerHeight = (showSubtitles ? this.subtitleHeight : 5) + 35, 
                this.categoryLabelHeight = textYOffset(visualStyle.labelFont) + 1, this.valueLabelHeight = textYOffset(visualStyle.valueFont) + 1, 
                this.dataBarWidth = visualStyle.dataBarWidthPercent * this.dataBarDefaultWidth / 100, 
                this.layoutNodeHorizontalSpacing = this.dataBarWidth + 50, this.layoutNodeVerticalSpacing = this.dataBarHeight + this.categoryLabelHeight + this.valueLabelHeight + 22, 
                this.loadMoreYOffsetAfter = this.layoutNodeVerticalSpacing + 5, this.loadMoreXOffset = this.dataBarWidth / 2 - 10, 
                this.recenterButtonAfterYOffset = this.layoutNodeVerticalSpacing - 10;
            };
        }();
        function buildDecompositionTreeVisualStyle(visualStyle, objects) {
            void 0 === objects && (objects = {});
            var colorHelper = common_colorHelper.v.create(visualStyle), propertyId = function(object, name) {
                return {
                    objectName: object,
                    propertyName: name
                };
            }, accentColor = colorHelper.getColorForPropertyWithDefaultColor(objects, propertyId(decompositionTree_capabilities.I8.tree, decompositionTree_capabilities.hq.accentColor), visualStyle.colorPalette.dataColors.getColorByIndex(0).value), foregroundLight = (0, 
            color.ok)(visualStyle.colorPalette.foreground.value, .08, visualStyle.colorPalette.background.value);
            return {
                backgroundColor: visualStyle.colorPalette.background.value,
                headerBackgroundColor: colorHelper.getColorForPropertyWithDefaultColor(objects, propertyId(decompositionTree_capabilities.I8.levelHeader, decompositionTree_capabilities.hq.levelHeaderBackgroundColor), visualStyle.colorPalette.background.value),
                dataBarBackgroundColor: colorHelper.getColorForPropertyWithDefaultColor(objects, propertyId(decompositionTree_capabilities.I8.dataBars, decompositionTree_capabilities.hq.dataBarBackgroundColor), foregroundLight),
                dataBarHighlightedStrokeColor: visualStyle.colorPalette.backgroundNeutral.value,
                positiveBarColor: colorHelper.getColorForPropertyWithDefaultColor(objects, propertyId(decompositionTree_capabilities.I8.dataBars, decompositionTree_capabilities.hq.positiveBarColor), visualStyle.colorPalette.dataColors.getColorByIndex(0).value),
                negativeBarColor: colorHelper.getColorForPropertyWithDefaultColor(objects, propertyId(decompositionTree_capabilities.I8.dataBars, decompositionTree_capabilities.hq.negativeBarColor), visualStyle.colorPalette.dataColors.getColorByIndex(1).value),
                dataBarSeparatorFillColor: visualStyle.colorPalette.foregroundNeutralSecondaryAlt.value,
                linkStrokeColor: colorHelper.getColorForPropertyWithDefaultColor(objects, propertyId(decompositionTree_capabilities.I8.tree, decompositionTree_capabilities.hq.connectorDefaultColor), foregroundLight),
                linkHighlightedStrokeColor: accentColor,
                accentColor,
                disabledColor: d3.hsl(0, 0, d3.hsl(accentColor).l).toString(),
                hoverColor: visualStyle.colorPalette.foregroundNeutralSecondary.value,
                iconColor: visualStyle.colorPalette.foregroundNeutralTertiary.value,
                labelFont: (0, fontProperties.Zi)(objects.categoryLabels, {
                    family: decompositionTree_capabilities.hq.categoryLabelFontFamily,
                    size: decompositionTree_capabilities.hq.categoryLabelFontSize,
                    color: decompositionTree_capabilities.hq.categoryLabelFontColor,
                    bold: decompositionTree_capabilities.hq.categoryLabelBold,
                    italic: decompositionTree_capabilities.hq.categoryLabelItalic,
                    underline: decompositionTree_capabilities.hq.categoryLabelUnderline
                }, colorHelper, visualStyle, "foreground", "smallLabel", {
                    color: common_colorHelper.v.getThemeColor(visualStyle, "foreground"),
                    size: units.B.createFromPt(9),
                    family: fontUtils.Wn.regular.family,
                    weight: CssConstants.AI,
                    style: CssConstants.AI,
                    textDecoration: CssConstants.zu
                }),
                boldLabelFont: (0, fontProperties.Zi)(objects.categoryLabels, {
                    family: decompositionTree_capabilities.hq.categoryLabelFontFamily,
                    size: decompositionTree_capabilities.hq.categoryLabelFontSize,
                    color: decompositionTree_capabilities.hq.categoryLabelFontColor
                }, colorHelper, visualStyle, "foreground", "boldLabel", {
                    color: common_colorHelper.v.getThemeColor(visualStyle, "foreground"),
                    size: units.B.createFromPt(10),
                    weight: "700",
                    family: fontUtils.Wn.regular.family
                }),
                valueFont: (0, fontProperties.Zi)(objects.dataLabels, {
                    family: decompositionTree_capabilities.hq.dataLabelFontFamily,
                    size: decompositionTree_capabilities.hq.dataLabelFontSize,
                    color: decompositionTree_capabilities.hq.dataLabelFontColor,
                    bold: decompositionTree_capabilities.hq.dataLabelBold,
                    italic: decompositionTree_capabilities.hq.dataLabelItalic,
                    underline: decompositionTree_capabilities.hq.dataLabelUnderline
                }, colorHelper, visualStyle, "foreground", "smallLightLabel", {
                    color: common_colorHelper.v.getThemeColor(visualStyle, "foregroundNeutralSecondary"),
                    size: units.B.createFromPt(9),
                    family: fontUtils.Wn.regular.family,
                    weight: CssConstants.AI,
                    style: CssConstants.AI,
                    textDecoration: CssConstants.zu
                }),
                levelTitleFont: (0, fontProperties.Zi)(objects.levelHeader, {
                    family: decompositionTree_capabilities.hq.levelTitleFontFamily,
                    size: decompositionTree_capabilities.hq.levelTitleFontSize,
                    color: decompositionTree_capabilities.hq.levelTitleFontColor,
                    bold: decompositionTree_capabilities.hq.levelTitleBold,
                    italic: decompositionTree_capabilities.hq.levelTitleItalic,
                    underline: decompositionTree_capabilities.hq.levelTitleUnderline
                }, colorHelper, visualStyle, "foreground", "title", {
                    color: common_colorHelper.v.getThemeColor(visualStyle, "foreground"),
                    size: units.B.createFromPt(12),
                    family: fontUtils.Wn.regularSecondary.family,
                    weight: CssConstants.AI,
                    style: CssConstants.AI,
                    textDecoration: CssConstants.zu
                }),
                levelSubtitleFont: (0, fontProperties.Zi)(objects.levelHeader, {
                    family: decompositionTree_capabilities.hq.levelSubtitleFontFamily,
                    size: decompositionTree_capabilities.hq.levelSubtitleFontSize,
                    color: decompositionTree_capabilities.hq.levelSubtitleFontColor,
                    bold: decompositionTree_capabilities.hq.levelSubtitleBold,
                    italic: decompositionTree_capabilities.hq.levelSubtitleItalic,
                    underline: decompositionTree_capabilities.hq.levelSubtitleUnderline
                }, colorHelper, visualStyle, "foreground", "smallLightLabel", {
                    color: common_colorHelper.v.getThemeColor(visualStyle, "foregroundNeutralSecondary"),
                    size: units.B.createFromPt(9),
                    family: fontUtils.Wn.regular.family,
                    weight: CssConstants.AI,
                    style: CssConstants.AI,
                    textDecoration: CssConstants.zu
                }),
                dataBarWidthPercent: (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.dataBars,
                    propertyName: decompositionTree_capabilities.hq.dataBarWidthPercent
                }, 100),
                isHighContrast: visualStyle.isHighContrast
            };
        }
        var EventDispatcher = function() {
            function EventDispatcher() {}
            return EventDispatcher.prototype.subscribe = function(handler) {
                var _this = this;
                debug.fF.assert(function() {
                    return !_this.handler;
                }, "Only one subscriber allowed"), this.handler = handler;
            }, EventDispatcher.prototype.emit = function(arg) {
                this.handler && this.handler(arg);
            }, EventDispatcher;
        }(), DecompositionTreeRenderingService = function() {
            function DecompositionTreeRenderingService(stringResourceProvider, tooltipService, isTouchEvent) {
                this.stringResourceProvider = stringResourceProvider, this.tooltipService = tooltipService, 
                this.isTouchEvent = isTouchEvent, this.allowLocking = !0, this.showSubtitles = !0, 
                this.useLegacyLayout = !1, this.responsiveLayout = !1, this.isVisualReadOnly = !1, 
                this.nodeClicked = new EventDispatcher, this.nodeContextMenu = new EventDispatcher, 
                this.expandButtonClicked = new EventDispatcher, this.canvasClicked = new EventDispatcher, 
                this.levelClicked = new EventDispatcher, this.removeLevelButtonClicked = new EventDispatcher, 
                this.loadMoreClicked = new EventDispatcher, this.levelIconClicked = new EventDispatcher, 
                this.enableTransitions = !0, this.isPanning = !1, this.viewport = {
                    height: 0,
                    width: 0
                }, this.layoutDensityFactor = 1, this.density = "default", this.linkType = "curve", 
                debug.fF.assertAnyValue(tooltipService, "Tooltip service might be undefined on dashboard"), 
                this.keyboardNavigation = new DecompositionTreeKeyboardNavigation(stringResourceProvider);
            }
            return Object.defineProperty(DecompositionTreeRenderingService.prototype, "layoutDensity", {
                get: function() {
                    return this.density;
                },
                set: function(value) {
                    if (value !== this.density) {
                        switch (this.density = value, this.density) {
                          case "default":
                            this.layoutDensityFactor = this.treeVisualConfig.defaultLayoutDensityFactor;
                            break;

                          case "dense":
                            this.layoutDensityFactor = this.treeVisualConfig.denseLayoutDensityFactor;
                            break;

                          case "sparse":
                            this.layoutDensityFactor = this.treeVisualConfig.sparseLayoutDensityFactor;
                        }
                        this.levelPositionScale.rangeRound([ 0, this.treeVisualConfig.layoutNodeHorizontalSpacing * this.horizontalDensityFactor ]), 
                        this.applyLayoutTransform(!0), this.render(this.viewModel);
                    }
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DecompositionTreeRenderingService.prototype, "connectorType", {
                get: function() {
                    return this.linkType;
                },
                set: function(value) {
                    if (value !== this.linkType) {
                        switch (this.linkType = value, this.linkType) {
                          case "curve":
                            this.linkGenerator = (new HLink).p1(this.treeVisualConfig.linkCurvature).p2(this.treeVisualConfig.linkCurvature).path;
                            break;

                          case "round":
                            this.linkGenerator = (new HLink).p1(0).p2(this.treeVisualConfig.linkCurvature).path;
                        }
                        this.render(this.viewModel);
                    }
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DecompositionTreeRenderingService.prototype, "maxVisibleNodesPerLevel", {
                get: function() {
                    if (this.viewport) {
                        var nodes = Math.floor(this.usableViewportHeight / this.nodeVerticalSpacing);
                        return Math.max(decompositionTree_capabilities.bR.minValue, Math.min(decompositionTree_capabilities.bR.maxValue, nodes));
                    }
                },
                enumerable: !1,
                configurable: !0
            }), DecompositionTreeRenderingService.prototype.init = function(containerElement, visualStyle) {
                var _this = this;
                debug.fF.assertValue(containerElement, "A container element must be provided"), 
                debug.fF.assertValue(visualStyle, "Visual style must be defined"), this.visualStyle = visualStyle, 
                this.treeVisualConfig = new TreeVisualConfig(visualStyle, this.showSubtitles), this.treeLayoutGenerator = d3.tree().nodeSize([ this.treeVisualConfig.layoutNodeVerticalSpacing, this.treeVisualConfig.layoutNodeHorizontalSpacing ]), 
                this.dataBarScale = d3.scaleLinear().domain([ 0, 1 ]).range([ 0, this.treeVisualConfig.dataBarWidth ]).clamp(!0), 
                this.levelPositionScale = d3.scaleLinear().domain([ 0, 1 ]).rangeRound([ 0, this.treeVisualConfig.layoutNodeHorizontalSpacing * this.horizontalDensityFactor ]), 
                this.linkGenerator = (new HLink).p2(this.treeVisualConfig.linkCurvature).path, this.svgElement = d3.select(containerElement).append("svg").on("click", function() {
                    _this.isPanning ? d3.event.stopPropagation() : _this.canvasClicked.emit();
                }), this.svgBackground = this.svgElement.append("rect").attr("class", TreeSelectors.svgBackground.class).style("opacity", 0).attr("drag-resize-disabled", "true"), 
                this.svgRootGroup = this.svgElement.append("g").attr("class", TreeSelectors.mainContainer.class).attr("transform", "scale(".concat(this.treeVisualConfig.defaultZoom, ")")).attr("drag-resize-disabled", "true").on("mouseover", function() {
                    return _this.hideUnlockIcons();
                }), this.svgRootGroup.append("g").attr("class", TreeSelectors.treeContainer.class), 
                this.svgRootGroup.append("g").attr("class", TreeSelectors.treeButtonsContainer.class), 
                this.svgElement.append("rect").attr("class", TreeSelectors.headerBackground.class).style("fill", this.visualStyle.headerBackgroundColor).on("mouseout", function() {
                    return _this.hideUnlockIcons();
                }).on("mousedown", function() {
                    return d3.event.stopPropagation();
                }), this.svgHeaderGroup = this.svgElement.append("g").attr("class", TreeSelectors.headerContainer.class).attr("transform", "scale(".concat(this.treeVisualConfig.defaultZoom, ")")).on("mousedown", function() {
                    return d3.event.stopPropagation();
                }), this.enablePanAndZoom(this.svgElement), this.resetView();
            }, DecompositionTreeRenderingService.prototype.render = function(viewModel) {
                var _this = this;
                if (viewModel && viewModel.root) if (this.visualStyle) if (this.viewport) if (this.svgElement) {
                    this.viewModel = viewModel, this.treeVisualConfig = new TreeVisualConfig(this.visualStyle, this.showSubtitles), 
                    this.svgElement.select(TreeSelectors.headerBackground.selector).style("fill", this.visualStyle.headerBackgroundColor).attr("height", this.treeVisualConfig.headerHeight), 
                    this.treeLayoutGenerator.nodeSize([ this.treeVisualConfig.layoutNodeVerticalSpacing, this.treeVisualConfig.layoutNodeHorizontalSpacing ]), 
                    this.dataBarScale.range([ 0, this.treeVisualConfig.dataBarWidth ]), this.levelPositionScale.rangeRound([ 0, this.treeVisualConfig.layoutNodeHorizontalSpacing * this.horizontalDensityFactor ]);
                    var nodes = [];
                    if ((0, this.treeLayoutGenerator)(d3.hierarchy(viewModel.root)).each(function(node) {
                        var tmp = node.x;
                        node.x = node.y * _this.horizontalDensityFactor, node.y = tmp * _this.layoutDensityFactor + _this.baseline, 
                        nodes.push(node);
                    }), LayoutConstraints.applyLayoutConstraints(nodes, this.maxTreeHeight, this.useLegacyLayout ? function(node) {
                        return node && (_this.isHighlightedNode(node) || _this.lastClickedNode && node.data.key === _this.lastClickedNode.key);
                    } : null), this.treeBounds = this.getBounds(nodes), this.useLegacyLayout && this.lastClickedNode) {
                        var updatedNode = _.find(nodes, function(node) {
                            return node.data.key === _this.lastClickedNode.key;
                        });
                        updatedNode && this.ensureNodeVisible(updatedNode);
                    }
                    this.applyLayoutTransform(!1);
                    var treeContainer = this.svgRootGroup.select(TreeSelectors.treeContainer.selector);
                    this.renderNodes(treeContainer, nodes, viewModel), this.renderLinks(treeContainer, nodes);
                    var buttonsContainer = this.svgRootGroup.select(TreeSelectors.treeButtonsContainer.selector), maxDepth = viewModel.levels.length - 1, lastLevelNodes = this.isVisualReadOnly || _.isEmpty(viewModel.unpinnedDimensions) ? [] : nodes.filter(function(d) {
                        return d.data.level === maxDepth;
                    });
                    this.renderExpandButtons(buttonsContainer, lastLevelNodes);
                    var nodesWithMoreData = this.isVisualReadOnly ? [] : _.filter(nodes, function(node) {
                        return !!node.parent && (2 === node.parent.children.length ? 0 === node.data.position && 1 === node.data.restartKind || node.data.position === node.parent.children.length - 1 && 2 === node.data.restartKind : node.data.position <= 1 && 1 === node.data.restartKind || node.data.position >= node.parent.children.length - 2 && 2 === node.data.restartKind);
                    });
                    this.renderLoadMoreButtons(buttonsContainer, nodesWithMoreData);
                    var recenterableNodes = this.isVisualReadOnly ? [] : _.filter(nodes, function(node) {
                        return !(!node.data.expanded || !node.parent || (0 !== node.data.position || 2 !== node.data.restartKind && 3 !== node.data.restartKind) && (node.data.position !== node.parent.children.length - 1 || 1 !== node.data.restartKind && 3 !== node.data.restartKind));
                    });
                    this.renderRecenterButtons(buttonsContainer, recenterableNodes), this.renderLevels(this.svgHeaderGroup, viewModel.levels), 
                    this.keyboardNavigation.bindEvents(this.svgElement, this);
                } else debug.fF.assertFail("Cannot render visual before initialization"); else debug.fF.assertFail("Viewport must be set before rendering"); else debug.fF.assertFail("Visual style must be set before rendering");
            }, DecompositionTreeRenderingService.prototype.resetView = function() {
                this.setZoomTransform([ this.treeVisualConfig.marginLeft, 0 ], this.treeVisualConfig.defaultZoom), 
                this.svgHeaderGroup.attr("visibility", null), this.applyLayoutTransform(!0), this.viewModel && this.render(this.viewModel);
            }, DecompositionTreeRenderingService.prototype.resize = function(viewport) {
                debug.fF.assertValue(viewport, "Viewport must be defined"), this.viewport = viewport, 
                this.svgElement.attr("width", viewport.width).attr("height", viewport.height).attr("viewBox", "0 0 ".concat(viewport.width, " ").concat(viewport.height)), 
                this.svgBackground.attr("width", viewport.width).attr("height", viewport.height), 
                this.svgElement.select(TreeSelectors.headerBackground.selector).attr("width", viewport.width).attr("height", this.treeVisualConfig.headerHeight), 
                this.svgElement.select(TreeSelectors.background.selector).attr("width", viewport.width).attr("height", viewport.height), 
                this.applyLayoutTransform(!1);
            }, Object.defineProperty(DecompositionTreeRenderingService.prototype, "usableViewportHeight", {
                get: function() {
                    return Math.max(0, this.viewport.height - this.treeVisualConfig.headerHeight - 2 * this.treeVisualConfig.marginTop);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DecompositionTreeRenderingService.prototype, "maxTreeHeight", {
                get: function() {
                    return this.responsiveLayout ? (this.maxVisibleNodesPerLevel - 1) / 2 * this.nodeVerticalSpacing : Math.max(0, this.usableViewportHeight / 2 - this.treeVisualConfig.treeLayoutFixedMargin);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DecompositionTreeRenderingService.prototype, "baseline", {
                get: function() {
                    return this.responsiveLayout ? Math.max(decompositionTree_capabilities.bR.minValue / 2 * this.nodeVerticalSpacing + this.treeVisualConfig.marginTop + this.treeVisualConfig.headerHeight, (this.viewport.height + this.treeVisualConfig.headerHeight + this.treeVisualConfig.marginTop - this.treeVisualConfig.layoutNodeVerticalSpacing) / 2) : this.viewport.height / 2;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DecompositionTreeRenderingService.prototype, "nodeVerticalSpacing", {
                get: function() {
                    return this.treeVisualConfig.layoutNodeVerticalSpacing * this.layoutDensityFactor;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DecompositionTreeRenderingService.prototype, "canTreeFitViewport", {
                get: function() {
                    var scale = d3.zoomTransform(this.svgElement.node()).k;
                    return this.treeBounds && this.viewport && (this.treeBounds.y[1] - this.treeBounds.y[0]) * scale < this.usableViewportHeight;
                },
                enumerable: !1,
                configurable: !0
            }), DecompositionTreeRenderingService.prototype.applyLayoutTransform = function(transition) {
                var _a = this.getZoomTransform(), translate = _a.translate, scale = _a.scale;
                debug.fF.assertValue(translate, "applyLayoutTransform() missing translation value"), 
                debug.fF.assertValue(scale, "applyLayoutTransform() missing scale value");
                var horizontalPadding = this.treeVisualConfig.panningHorizontalLimit, verticalPadding = this.treeVisualConfig.panningVerticalLimit;
                if (this.treeBounds) {
                    var minX = horizontalPadding, maxTreeWidth = Math.max(this.treeBounds.x[1], this.levelPositionScale(_.size(this.viewModel.levels))), maxX = this.viewport.width - horizontalPadding - maxTreeWidth * scale;
                    translate[0] = Math.max(Math.min(minX, maxX), translate[0]), translate[0] = Math.min(Math.max(minX, maxX), translate[0]);
                    var minY = this.treeVisualConfig.headerHeight + this.treeVisualConfig.marginTop + verticalPadding - this.treeBounds.y[0] * scale, maxY = this.viewport.height - verticalPadding - this.treeBounds.y[1] * scale;
                    translate[1] = Math.max(Math.min(minY, maxY), translate[1]), translate[1] = Math.min(Math.max(minY, maxY), translate[1]), 
                    this.viewport.height < this.treeVisualConfig.headerHeight + verticalPadding && (translate[1] = Math.max(this.viewport.height - verticalPadding - this.treeBounds.y[0] * scale, translate[1]));
                }
                this.responsiveLayout ? (this.zoom.scaleExtent([ this.treeVisualConfig.defaultZoom, this.treeVisualConfig.defaultZoom ]), 
                scale = this.treeVisualConfig.defaultZoom, this.canTreeFitViewport && (translate[1] = 0)) : this.zoom.scaleExtent([ this.treeVisualConfig.minZoom, this.treeVisualConfig.maxZoom ]), 
                (transition ? this.svgRootGroup.transition() : this.svgRootGroup).attr("transform", "translate(".concat(translate, ")scale(").concat(scale, ")")), 
                (transition ? this.svgHeaderGroup.transition() : this.svgHeaderGroup).attr("transform", "translate(".concat(translate[0], ", 0)scale(").concat(scale, ")")), 
                transition && this.setZoomTransform(translate, scale);
            }, DecompositionTreeRenderingService.prototype.ensureNodeVisible = function(updatedNode) {
                var _a = this.getZoomTransform(), translate = _a.translate, scale = _a.scale, pos = [ (updatedNode.x + translate[0]) * scale, (updatedNode.y + translate[1]) * scale ];
                (pos[1] < 0 || pos[1] > this.viewport.height) && (this.setZoomTransform([ translate[0], 0 ], scale), 
                this.applyLayoutTransform(!0));
            }, DecompositionTreeRenderingService.prototype.ensureElementVisible = function(element) {
                element.classed(TreeSelectors.treeNode.class) || element.classed(TreeSelectors.loadMore.class) || element.classed(TreeSelectors.expandButton.class) || element.classed(TreeSelectors.recenterButton.class) ? this.moveElementToVisible(element, this.treeVisualConfig.headerHeight + this.treeVisualConfig.panningVerticalLimit) : (element.classed(TreeSelectors.levelHeader.class) || element.classed(TreeSelectors.levelTitle.class) || element.classed(TreeSelectors.iconOverlay.class) || element.classed(TreeSelectors.removeLevel.class)) && this.moveElementToVisible(element);
            }, DecompositionTreeRenderingService.prototype.moveElementToVisible = function(element, topBoundary) {
                var _a;
                void 0 === topBoundary && (topBoundary = 0);
                var node = element.node(), elementRect = node.getBBox();
                if (elementRect && element.attr("transform")) {
                    var elementTransformMatrix = null === (_a = node.transform) || void 0 === _a ? void 0 : _a.baseVal.consolidate().matrix;
                    if (elementTransformMatrix) {
                        var elementTranslate = [ elementTransformMatrix.e, elementTransformMatrix.f ];
                        if (elementTranslate) {
                            var rect_left = elementTranslate[0], rect_top = elementTranslate[1], rect_width = elementRect.width, rect_height = elementRect.height, _b = this.getZoomTransform(), translate = _b.translate, scale = _b.scale, translateX = translate[0];
                            rect_left * scale + translate[0] < 0 ? translateX = -rect_left * scale + this.treeVisualConfig.marginLeft : (rect_left + rect_width) * scale + translate[0] > this.viewport.width && (translateX = this.viewport.width - (rect_left + rect_width) * scale - this.treeVisualConfig.marginLeft);
                            var translateY = translate[1];
                            rect_top * scale + translate[1] < topBoundary ? translateY = -rect_top * scale + topBoundary + this.treeVisualConfig.marginTop : (rect_top + rect_height) * scale + translate[1] > this.viewport.height && (translateY = this.viewport.height - (rect_top + rect_height) * scale - this.treeVisualConfig.marginTop), 
                            translateX === translate[0] && translateY === translate[1] || (this.setZoomTransform([ translateX, translateY ], scale), 
                            this.applyLayoutTransform(!0));
                        }
                    }
                }
            }, DecompositionTreeRenderingService.prototype.getZoomTransform = function() {
                var transform = d3.zoomTransform(this.svgElement.node());
                return {
                    translate: [ transform.x, transform.y ],
                    scale: transform.k
                };
            }, DecompositionTreeRenderingService.prototype.setZoomTransform = function(translate, scale) {
                var _a;
                this.svgElement.call(this.zoom.transform, (_a = d3.zoomIdentity).translate.apply(_a, translate).scale(scale));
            }, DecompositionTreeRenderingService.prototype.renderNodes = function(root, nodes, viewModel) {
                var nodeSelection = root.selectAll("g" + TreeSelectors.treeNode.selector).filter(function() {
                    return !d3.select(this).classed(TreeSelectors.exiting.class);
                }).data(nodes, function(d) {
                    return d.data.key;
                }), nodeEnterUpdate = this.createNodes(nodeSelection.enter()).merge(nodeSelection);
                return this.updateNodes(nodeEnterUpdate, viewModel.levels), this.removeNodes(nodeSelection.exit()), 
                nodeEnterUpdate;
            }, DecompositionTreeRenderingService.prototype.createNodes = function(selection) {
                var _this = this, nodes = selection.append("g").attr("class", TreeSelectors.treeNode.class).attr("transform", function(d) {
                    return "translate(".concat(d.x, ", ").concat(d.y - _this.treeVisualConfig.dataBarHeight / 2, ")");
                }).attr("opacity", 0), dataBars = nodes.append("g").attr("class", TreeSelectors.dataBar.class);
                dataBars.append("rect").attr("class", TreeSelectors.dataBarBackground.class).attr("width", this.treeVisualConfig.dataBarWidth).attr("height", this.treeVisualConfig.dataBarHeight), 
                dataBars.append("rect").attr("class", TreeSelectors.valueDataBar.class).attr("width", 0).attr("height", this.treeVisualConfig.dataBarHeight), 
                dataBars.append("rect").attr("class", TreeSelectors.highlightDataBar.class).attr("width", 0).attr("height", this.treeVisualConfig.dataBarHeight), 
                dataBars.append("rect").attr("class", TreeSelectors.dataBarSeparator.class).attr("width", this.treeVisualConfig.dataBarSeparatorThickness).attr("height", this.treeVisualConfig.dataBarSeparatorHeight).attr("y", (this.treeVisualConfig.dataBarHeight - this.treeVisualConfig.dataBarSeparatorHeight) / 2).attr("x", this.treeVisualConfig.dataBarWidth / 2).attr("visibility", "hidden").attr("fill", this.visualStyle.dataBarSeparatorFillColor);
                var labels = nodes.append("text").attr("y", this.treeVisualConfig.dataBarHeight + this.treeVisualConfig.categoryLabelHeight);
                labels.append("tspan").attr("class", TreeSelectors.label.class).attr("width", this.treeVisualConfig.dataBarWidth).attr("x", this.treeVisualConfig.labelLeftMargin).text(function(d) {
                    return d.data.name;
                }).each(trimTextWithEllipsis), labels.append("tspan").filter(function(d) {
                    return !!d;
                }).attr("class", TreeSelectors.value.class).attr("width", this.treeVisualConfig.dataBarWidth).attr("x", this.treeVisualConfig.labelLeftMargin).attr("dy", this.treeVisualConfig.valueLabelHeight);
                var self = this;
                return nodes.append("rect").attr("class", TreeSelectors.nodeOverlay.class).attr("width", this.treeVisualConfig.dataBarWidth).attr("height", this.treeVisualConfig.dataBarHeight + this.treeVisualConfig.valueLabelHeight + this.treeVisualConfig.categoryLabelHeight).style("fill", "none").style("pointer-events", "visible").on("click", function(node) {
                    var d3Event = d3.event;
                    _this.isPanning || _this.nodeClicked.emit({
                        node: node.data,
                        point: {
                            x: d3Event.clientX,
                            y: d3Event.clientY
                        }
                    }), d3Event.stopPropagation();
                }).on("contextmenu", function(node) {
                    var d3Event = d3.event;
                    _this.nodeContextMenu.emit({
                        node: node.data,
                        point: {
                            x: d3Event.clientX,
                            y: d3Event.clientY
                        }
                    }), d3Event.preventDefault(), d3Event.stopPropagation();
                }).on("mousemove", function() {
                    var d = d3.select(this).datum().data, d3Event = d3.event;
                    self.tooltipService && self.tooltipService.show({
                        coordinates: [ d3Event.clientX, d3Event.clientY ],
                        identities: [ d.selector ],
                        dataItems: d.tooltips,
                        isTouchEvent: self.isTouchEvent
                    });
                }).on("mouseover", function() {
                    d3.select(this.parentElement).style("opacity", self.treeVisualConfig.hoverOpacity);
                }).on("mouseout", function() {
                    self.tooltipService && self.tooltipService.hide({
                        immediately: !0,
                        isTouchEvent: self.isTouchEvent
                    }), d3.select(this.parentElement).style("opacity", null);
                }), nodes;
            }, DecompositionTreeRenderingService.prototype.updateNodes = function(selection, levels) {
                var _this = this, transitionGroup = this.enableTransitions ? selection.transition() : selection;
                transitionGroup.attr("opacity", function(d) {
                    return !_this.selectedNode || _this.isSelectedNodeAncestor(d) || _this.isSelectedNode(d) ? 1 : _this.treeVisualConfig.crossFilterOpacity;
                }).attr("transform", function(d) {
                    return "translate(".concat(d.x, ", ").concat(d.y - _this.treeVisualConfig.dataBarHeight / 2, ")");
                }), selection.select("text").attr("y", this.treeVisualConfig.dataBarHeight + this.treeVisualConfig.categoryLabelHeight);
                var highlightType = function(node) {
                    return levels[node.data.level] && levels[node.data.level].highlight || 0;
                }, getOrigin = function(node) {
                    var level = levels[node.data.level];
                    return level && level.scale ? _this.dataBarScale(Math.abs(level.scale.range()[0])) : 0;
                }, scaleDataBars = function(dataBarSelector, highlights) {
                    var valueAccessor = function(node) {
                        var value = highlights ? node.data.highlight : node.value;
                        return _.isFinite(value) ? value : 0;
                    }, getHighlightHeightRatio = function(node) {
                        return 2 === highlightType(node) ? _this.treeVisualConfig.highlightDataBarHeightRatio : 1;
                    }, getDatabarScaledWidth = function(node) {
                        var level = levels[node.data.level];
                        return level && level.scale ? _this.dataBarScale(Math.abs(level.scale(valueAccessor(node)))) : 0;
                    }, dataBars = selection.select(dataBarSelector);
                    dataBars.filter(function(d) {
                        return !(d3.select(this).property("_previousValue_") * valueAccessor(d) >= 0);
                    }).attr("x", function(d) {
                        return getOrigin(d);
                    }).attr("width", 0), dataBars.style("display", "block").style("fill", function(d) {
                        return valueAccessor(node = d) >= 0 ? node.data.barColor ? node.data.barColor : _this.visualStyle.positiveBarColor : node.data.barColor ? node.data.barColor : _this.visualStyle.negativeBarColor;
                        var node;
                    }).property("_previousValue_", function(d) {
                        return valueAccessor(d);
                    }), transitionGroup.select(dataBarSelector).filter(function(node) {
                        return !highlights || 0 !== highlightType(node);
                    }).attr("x", function(d) {
                        return getOrigin(d) - (d.value < 0 ? getDatabarScaledWidth(d) : 0);
                    }).attr("width", function(d) {
                        return getDatabarScaledWidth(d);
                    }).attr("y", function(d) {
                        return highlights ? _this.treeVisualConfig.dataBarHeight * (1 - getHighlightHeightRatio(d)) / 2 : 0;
                    }).attr("height", function(d) {
                        return _this.treeVisualConfig.dataBarHeight * (highlights ? getHighlightHeightRatio(d) : 1);
                    }).attr("opacity", function(d) {
                        return highlights || 0 === highlightType(d) ? 1 : _this.treeVisualConfig.highlightDataBarOpacity;
                    }), highlights && dataBars.filter(function(node) {
                        return 0 === highlightType(node);
                    }).style("display", "none");
                };
                scaleDataBars(TreeSelectors.valueDataBar.selector, !1), scaleDataBars(TreeSelectors.highlightDataBar.selector, !0), 
                selection.select(TreeSelectors.dataBarSeparator.selector).attr("x", function(d) {
                    return getOrigin(d);
                }).attr("visibility", function(d) {
                    return getOrigin(d) > 0 ? null : "hidden";
                }), selection.select(TreeSelectors.dataBarBackground.selector).attr("width", this.treeVisualConfig.dataBarWidth).style("stroke", function(d) {
                    return _this.isHighlightedNode(d) ? _this.visualStyle.dataBarHighlightedStrokeColor : "";
                }).style("fill", this.visualStyle.dataBarBackgroundColor);
                var getLabelStyle = function(d) {
                    return _this.isHighlightedNode(d) ? _this.visualStyle.boldLabelFont : _this.visualStyle.labelFont;
                };
                selection.select(TreeSelectors.label.selector).classed("pathNode", function(d) {
                    return _this.isHighlightedNode(d);
                }).attr("width", this.treeVisualConfig.dataBarWidth).style("font-family", function(d) {
                    return getLabelStyle(d).family;
                }).style("font-size", this.visualStyle.labelFont.size.px + "px").style("font-style", this.visualStyle.labelFont.style).style("text-decoration", this.visualStyle.labelFont.textDecoration).style("font-weight", function(d) {
                    return getLabelStyle(d).weight;
                }).style("fill", function(d) {
                    return getLabelStyle(d).color;
                }).text(function(d) {
                    return d.data.name;
                }).each(trimTextWithEllipsis), selection.select(TreeSelectors.value.selector).styles((0, 
                fontProperties.E_)(this.visualStyle.valueFont)).attr("width", this.treeVisualConfig.dataBarWidth).attr("dy", this.treeVisualConfig.valueLabelHeight).text(function(node) {
                    return 0 === highlightType(node) ? node.data.formattedValue : node.data.formattedHighlightValue;
                }).each(trimTextWithEllipsis), selection.select(TreeSelectors.nodeOverlay.selector).attr("width", this.treeVisualConfig.dataBarWidth).attr("height", this.treeVisualConfig.dataBarHeight + this.treeVisualConfig.valueLabelHeight + this.treeVisualConfig.categoryLabelHeight);
            }, DecompositionTreeRenderingService.prototype.removeNodes = function(selection) {
                var _this = this;
                selection.classed(TreeSelectors.exiting.class, !0), (this.enableTransitions && !this.visualStyle.isHighContrast ? selection.transition() : selection).style("opacity", 0).attr("transform", function(d) {
                    return "translate(".concat(d.x, ", ").concat(_this.isCollapsing(d) ? d.parent.y : d.y - _this.treeVisualConfig.dataBarHeight / 2, ")");
                }).remove();
            }, DecompositionTreeRenderingService.prototype.isCollapsing = function(node) {
                return !this.viewModel.levels[node.data.level - 1] || node.parent && !this.viewModel.levels[node.data.level - 1].expandedNode;
            }, DecompositionTreeRenderingService.prototype.renderLinks = function(root, nodes) {
                var _a, _this = this, links = null === (_a = _.first(nodes)) || void 0 === _a ? void 0 : _a.links(), selection = root.selectAll("path" + TreeSelectors.link.selector).filter(function() {
                    return !d3.select(this).classed(TreeSelectors.exiting.class);
                }).data(links, function(d) {
                    return d.target.data.key;
                }), enterUpdateLinks = selection.enter().insert("path", "g").attr("class", TreeSelectors.link.class).style("fill", "none").style("vector-effect", "non-scaling-stroke").attr("d", function(d) {
                    return _this.linkGenerator({
                        source: {
                            x: d.source.x + _this.treeVisualConfig.dataBarWidth - 1,
                            y: d.source.y
                        },
                        target: d.target
                    });
                }).merge(selection);
                (this.enableTransitions ? enterUpdateLinks.transition() : enterUpdateLinks).attr("d", function(d) {
                    return _this.linkGenerator({
                        source: {
                            x: d.source.x + _this.treeVisualConfig.dataBarWidth - 1,
                            y: d.source.y
                        },
                        target: d.target
                    });
                }), enterUpdateLinks.attr("opacity", function(d) {
                    return !_this.selectedNode || _this.isSelectedNodeAncestor(d.target) || _this.isSelectedNode(d.target) ? 1 : _this.treeVisualConfig.crossFilterOpacity;
                }).style("stroke-dasharray", function(d) {
                    return d.target.data.isAIHighlighted ? 2 : void 0;
                }), enterUpdateLinks.filter(function(d) {
                    return _this.isHighlightedNode(d.target);
                }).style("stroke", this.visualStyle.linkHighlightedStrokeColor).style("stroke-width", function(d) {
                    return _this.treeVisualConfig.linkHighlightedStrokeThickness;
                }), enterUpdateLinks.filter(function(d) {
                    return !_this.isHighlightedNode(d.target);
                }).style("stroke", this.visualStyle.linkStrokeColor).style("stroke-width", function(d) {
                    return _this.treeVisualConfig.linkDefaultStrokeThickness;
                });
                var removeSelection = selection.exit();
                return removeSelection.classed(TreeSelectors.exiting.class, !0), (this.enableTransitions ? removeSelection.transition() : removeSelection).style("stroke", this.visualStyle.linkStrokeColor).style("opacity", 0).attr("d", function(d) {
                    return _this.linkGenerator({
                        source: {
                            x: d.source.x + _this.treeVisualConfig.dataBarWidth - 1,
                            y: d.source.y
                        },
                        target: {
                            x: d.target.x,
                            y: _this.isCollapsing(d.target) ? d.target.parent.y : d.target.y
                        }
                    });
                }).remove(), enterUpdateLinks;
            }, DecompositionTreeRenderingService.prototype.renderExpandButtons = function(root, nodes) {
                var _this = this, self = this, selection = root.selectAll("text" + TreeSelectors.expandButton.selector).data(nodes, function(d) {
                    return d.data.key;
                }), buttonEnter = selection.enter().append("text").attr("class", TreeSelectors.expandButton.class).style("font-family", this.treeVisualConfig.expandFontFamily).style("font-size", this.treeVisualConfig.expandFontSize).style("cursor", "pointer").attr("transform", function(d) {
                    return "translate(".concat(d.x + _this.treeVisualConfig.dataBarWidth + _this.treeVisualConfig.expandLeftMargin / 2, ", ").concat(d.y + _this.treeVisualConfig.dataBarHeight / 2 + _this.treeVisualConfig.expandTopMargin, ")");
                }).attr("opacity", 0).text("+").on("mouseover", function() {
                    d3.select(this).style("fill", self.visualStyle.hoverColor);
                }).on("mouseout", function() {
                    d3.select(this).style("fill", self.visualStyle.iconColor);
                });
                buttonEnter.append("title").text(this.stringResourceProvider.get("DecompositionTree_ExpandButton_Tooltip"));
                var enterUpdateButtons = buttonEnter.merge(selection), group = this.enableTransitions ? enterUpdateButtons.transition() : enterUpdateButtons;
                enterUpdateButtons.style("fill", this.visualStyle.iconColor).on("click", function(node) {
                    var d3Event = d3.event;
                    if (self.isPanning) d3Event.stopPropagation(); else {
                        var rect = this.getBoundingClientRect();
                        self.expandButtonClicked.emit({
                            point: {
                                x: rect.left + rect.width / 2,
                                y: rect.top + rect.height / 2
                            },
                            node: node.data
                        }), d3Event.stopPropagation();
                    }
                }), group.attr("opacity", 1).attr("transform", function(d) {
                    return "translate(".concat(d.x + _this.treeVisualConfig.dataBarWidth + _this.treeVisualConfig.expandLeftMargin, ", ").concat(d.y + _this.treeVisualConfig.dataBarHeight / 2 + _this.treeVisualConfig.expandTopMargin, ")");
                }), selection.exit().remove();
            }, DecompositionTreeRenderingService.prototype.renderLoadMoreButtons = function(root, nodesWithMoreData) {
                var _this = this, selection = root.selectAll("text" + TreeSelectors.loadMore.selector).data(nodesWithMoreData, function(d) {
                    return "".concat(d.data.level, "-").concat(d.data.restartKind);
                }), self = this, enterUpdateButtons = selection.enter().append("text").attr("class", TreeSelectors.loadMore.class).attr("transform", function(d) {
                    return "translate(".concat(d.x + _this.treeVisualConfig.loadMoreXOffset, ", ").concat(d.y, ")");
                }).attr("opacity", 0).style("font-family", this.treeVisualConfig.glyphIconFamily).style("font-size", this.treeVisualConfig.iconFontSize).style("font-weight", 900).style("cursor", "pointer").on("click", function(node) {
                    _this.isPanning || _this.loadMoreClicked.emit(node.data), d3.event.stopPropagation();
                }).on("mouseover", function() {
                    d3.select(this).style("fill", self.visualStyle.hoverColor);
                }).on("mouseout", function() {
                    d3.select(this).style("fill", self.visualStyle.iconColor);
                }).merge(selection);
                return enterUpdateButtons.style("fill", this.visualStyle.iconColor).text(function(d) {
                    return 1 === d.data.restartKind ? "\ue70e" : "\ue70d";
                }).append("title").text(function(d) {
                    return _this.stringResourceProvider.get(1 === d.data.restartKind ? "DecompositionTree_ScrollLevelUp_Tooltip" : "DecompositionTree_ScrollLevelDown_Tooltip");
                }), (this.enableTransitions && !this.responsiveLayout ? enterUpdateButtons.transition() : enterUpdateButtons).attr("opacity", 1).attr("transform", function(d) {
                    return "translate(".concat(d.x + _this.treeVisualConfig.loadMoreXOffset, ", ").concat(1 === (node = d).data.restartKind ? node.parent.children[0].y + _this.treeVisualConfig.loadMoreYOffsetBefore : _.last(node.parent.children).y + _this.treeVisualConfig.loadMoreYOffsetAfter, ")");
                    var node;
                }), selection.exit().remove(), enterUpdateButtons;
            }, DecompositionTreeRenderingService.prototype.renderRecenterButtons = function(root, recenterableNodes) {
                var _this = this, self = this, selection = root.selectAll("text" + TreeSelectors.recenterButton.selector).data(recenterableNodes, function(d) {
                    return "".concat(d.data.level, "-").concat(d.data.restartKind);
                }), enterUpdateButtons = selection.enter().append("text").attr("class", TreeSelectors.recenterButton.class).attr("transform", function(d) {
                    return "translate(".concat(d.x + _this.treeVisualConfig.loadMoreXOffset, ", ").concat(d.y, ")");
                }).attr("opacity", 0).style("font-family", this.treeVisualConfig.glyphIconFamily).style("font-size", this.treeVisualConfig.iconFontSize).style("font-weight", 900).style("cursor", "pointer").on("click", function(node) {
                    _this.isPanning || _this.loadMoreClicked.emit(node.data), d3.event.stopPropagation();
                }).on("mouseover", function() {
                    d3.select(this).style("fill", self.visualStyle.hoverColor);
                }).on("mouseout", function() {
                    d3.select(this).style("fill", self.visualStyle.iconColor);
                }).merge(selection);
                return enterUpdateButtons.style("fill", this.visualStyle.iconColor).attr("opacity", 1).text("\ue712").append("title").text(this.stringResourceProvider.get("DecompositionTree_RecenterButton_Tooltip")), 
                (this.enableTransitions && !this.responsiveLayout ? enterUpdateButtons.transition() : enterUpdateButtons).attr("transform", function(d) {
                    return "translate(".concat(d.x + _this.treeVisualConfig.loadMoreXOffset, ", ").concat((node = d).data.position > 0 ? node.y + _this.treeVisualConfig.recenterButtonBeforeYOffset * _this.layoutDensityFactor : node.y + _this.treeVisualConfig.recenterButtonAfterYOffset * _this.layoutDensityFactor, ")");
                    var node;
                }), selection.exit().remove(), enterUpdateButtons;
            }, DecompositionTreeRenderingService.prototype.showUnlockIcons = function(level) {
                level && level.isAILevel || !this.allowLocking || this.isVisualReadOnly || this.svgHeaderGroup.selectAll(TreeSelectors.lockedLevel.selector).filter(function(d) {
                    return !d.isAILevel && !d.isLocked && d.level <= level.level;
                }).text("\ue785").style("display", "block");
            }, DecompositionTreeRenderingService.prototype.hideUnlockIcons = function() {
                this.svgHeaderGroup.selectAll(TreeSelectors.lockedLevel.selector).filter(function(d) {
                    return !d.isLocked;
                }).style("display", "none");
            }, DecompositionTreeRenderingService.prototype.renderLevels = function(root, levels) {
                var levelSelection = root.selectAll("g" + TreeSelectors.levelHeader.selector).data(levels), levelEnterUpdate = this.createLevelHeaders(levelSelection.enter()).merge(levelSelection);
                return this.updateLevelHeaders(levelEnterUpdate), this.removeLevelHeaders(levelSelection.exit()), 
                levelEnterUpdate;
            }, DecompositionTreeRenderingService.prototype.createLevelHeaders = function(selection) {
                var _this = this, allGroups = selection.append("g").attr("class", TreeSelectors.levelHeader.class).attr("role", "heading").attr("aria-level", function(_, i) {
                    return i + 1;
                }).attr("transform", function(_, i) {
                    return "translate(".concat(_this.levelPositionScale(i), ", ").concat(_this.treeVisualConfig.marginTop, ")");
                }), group = allGroups.filter(function(d) {
                    return d.level > 0;
                }).on("focus", function(level) {
                    self.hideUnlockIcons(), self.showUnlockIcons(level);
                }), textGroup = group.append("text"), self = this;
                return textGroup.append("tspan").attr("class", TreeSelectors.aiLevel.class).attr("x", this.treeVisualConfig.aiIconXOffset).attr("y", this.treeVisualConfig.aiIconYOffset).style("font-family", this.treeVisualConfig.glyphIconFamily).style("font-size", this.treeVisualConfig.iconFontSize).style("display", "none").text("\uea80"), 
                textGroup.append("tspan").attr("class", TreeSelectors.lockedLevel.class).attr("x", this.treeVisualConfig.aiIconXOffset).attr("y", this.treeVisualConfig.aiIconYOffset).style("font-family", this.treeVisualConfig.glyphIconFamily).style("font-size", this.treeVisualConfig.iconFontSize).style("display", "none").text("\ue72e"), 
                group.append("rect").attr("class", TreeSelectors.iconOverlay.class).attr("x", this.treeVisualConfig.aiIconXOffset).attr("y", this.treeVisualConfig.iconOverlayYOffset).attr("width", this.treeVisualConfig.iconOverlayWidth).attr("height", this.treeVisualConfig.iconOverlayHeight).style("opacity", 0).append("title").text(function(d) {
                    return d.tooltipData;
                }), textGroup.append("tspan").attr("class", TreeSelectors.levelTitle.class).attr("width", this.treeVisualConfig.dataBarWidth - this.treeVisualConfig.removeLevelWidth).attr("x", 0).attr("y", 0).style("cursor", "pointer").on("click", function(data) {
                    var d3Event = d3.event;
                    if (self.isPanning) d3Event.stopPropagation(); else {
                        var element = this;
                        if (this.parentNode && this.parentNode.parentNode) {
                            var underline = d3.select(element.parentNode.parentElement).select(TreeSelectors.levelTitleUnderline.selector).node();
                            underline && (element = underline);
                        }
                        self.levelClicked.emit({
                            element,
                            level: data
                        }), d3Event.stopPropagation();
                    }
                }).on("mouseover", function(data) {
                    d3.select(this).style("fill", self.visualStyle.hoverColor), self.showUnlockIcons(data);
                }).on("mouseout", function() {
                    d3.select(this).style("fill", self.visualStyle.levelTitleFont.color);
                }), textGroup.filter(function(d) {
                    return 0 !== d.level && !_this.isVisualReadOnly;
                }).append("tspan").attr("class", TreeSelectors.removeLevel.class).attr("x", this.treeVisualConfig.dataBarWidth - this.treeVisualConfig.removeLevelWidth).attr("y", this.treeVisualConfig.removeLevelYOffset).style("font-family", this.treeVisualConfig.removeLevelFontFamily).style("font-size", this.treeVisualConfig.removeLevelFontSize).style("display", "block").style("cursor", "pointer").text("\xd7").on("click", function(d) {
                    self.isPanning || _this.removeLevelButtonClicked.emit(d), d3.event.stopPropagation();
                }).on("mouseover", function(data) {
                    d3.select(this).style("fill", self.visualStyle.hoverColor), self.showUnlockIcons(data);
                }).on("mouseout", function() {
                    d3.select(this).style("fill", self.visualStyle.iconColor);
                }).append("title").text(this.stringResourceProvider.get("DecompositionTree_RemoveLevel_Tooltip")), 
                textGroup.append("tspan").attr("class", TreeSelectors.levelSubtitle.class).attr("width", this.treeVisualConfig.dataBarWidth).style("display", this.showSubtitles ? null : "none").attr("x", 0).attr("y", this.treeVisualConfig.subtitleHeight).on("mouseover", function(level) {
                    return _this.showUnlockIcons(level);
                }), group.append("rect").attr("class", TreeSelectors.levelTitleUnderline.class).attr("y", this.treeVisualConfig.underlineYOffset).attr("height", this.treeVisualConfig.underlineHeight).attr("width", this.treeVisualConfig.dataBarWidth).style("fill", this.visualStyle.accentColor).on("mouseover", function(level) {
                    return _this.showUnlockIcons(level);
                }), allGroups;
            }, DecompositionTreeRenderingService.prototype.updateLevelHeaders = function(selection) {
                var _this = this, group = this.enableTransitions ? selection.transition() : selection, self = this, svgStyledLevelTitleFontProps = (0, 
                fontProperties.E_)(this.visualStyle.levelTitleFont);
                group.attr("transform", function(_, i) {
                    return "translate(".concat(_this.levelPositionScale(i), ", ").concat(_this.treeVisualConfig.marginTop, ")");
                }), selection.select("tspan" + TreeSelectors.lockedLevel.selector).style("fill", this.visualStyle.accentColor).style("display", function(d) {
                    return d.isLocked ? "block" : "none";
                }).text("\ue72e"), selection.select(TreeSelectors.aiLevel.selector).style("display", function(d) {
                    return d.isAILevel ? "block" : "none";
                }).style("fill", function(d) {
                    return d.isAILevel ? d.aiResult.disabled ? _this.visualStyle.disabledColor : _this.visualStyle.accentColor : null;
                }), selection.select("rect" + TreeSelectors.iconOverlay.selector).style("cursor", function(level) {
                    if ((_this.allowLocking || level.isAILevel) && !_this.isVisualReadOnly) return "pointer";
                }).on("mouseover", function(level) {
                    self.showUnlockIcons(level), selection.select("rect" + TreeSelectors.iconOverlay.selector).select("title").text(level.tooltipData);
                }).on("click", function(level) {
                    self.isPanning || _this.levelIconClicked.emit(level), d3.event.stopPropagation();
                }), selection.select(TreeSelectors.levelTitle.selector).styles(svgStyledLevelTitleFontProps).style("font-style", function(d) {
                    return d.isAILevel && d.isEmpty ? "italic" : svgStyledLevelTitleFontProps["font-style"];
                }).attr("width", this.treeVisualConfig.dataBarWidth - this.treeVisualConfig.removeLevelWidth).text(function(d) {
                    return d.displayName;
                }).each(trimTextWithEllipsis).append("title").text(function(d) {
                    return d.displayName;
                }), selection.select(TreeSelectors.removeLevel.selector).style("fill", this.visualStyle.iconColor).style("display", function(d) {
                    return d.isLocked ? "none" : "block";
                }).attr("x", this.treeVisualConfig.dataBarWidth - this.treeVisualConfig.removeLevelWidth), 
                selection.select(TreeSelectors.levelSubtitle.selector).styles((0, fontProperties.E_)(this.visualStyle.levelSubtitleFont)).style("display", this.showSubtitles ? null : "none").attr("width", this.treeVisualConfig.dataBarWidth).attr("y", this.treeVisualConfig.subtitleHeight).text(function(d) {
                    return d.pathNodeName ? d.pathNodeName : "";
                }).each(trimTextWithEllipsis).append("title").text(function(d) {
                    return d.pathNodeName;
                }), selection.select(TreeSelectors.levelTitleUnderline.selector).style("fill", this.visualStyle.accentColor).attr("width", this.treeVisualConfig.dataBarWidth);
            }, DecompositionTreeRenderingService.prototype.removeLevelHeaders = function(selection) {
                selection.remove();
            }, Object.defineProperty(DecompositionTreeRenderingService.prototype, "horizontalDensityFactor", {
                get: function() {
                    return Math.max(this.treeVisualConfig.minHorizontalLayoutDensityFactor, Math.min(this.treeVisualConfig.maxHorizontalLayoutDensityFactor, this.layoutDensityFactor));
                },
                enumerable: !1,
                configurable: !0
            }), DecompositionTreeRenderingService.prototype.isHighlightedNode = function(node) {
                return node.data.expanded || this.isSelectedNodeAncestor(node) || this.isSelectedNode(node) || node.data.isAIHighlighted;
            }, DecompositionTreeRenderingService.prototype.isSelectedNode = function(node) {
                return this.selectedNode && node.data.key === this.selectedNode.key;
            }, DecompositionTreeRenderingService.prototype.isSelectedNodeAncestor = function(node) {
                return this.selectedNode && node.data.expanded && node.data.level < this.selectedNode.level;
            }, DecompositionTreeRenderingService.prototype.enablePanAndZoom = function(element) {
                var startingTranslation, _this = this, self = this;
                this.zoom = d3.zoom().scaleExtent([ this.treeVisualConfig.minZoom, this.treeVisualConfig.maxZoom ]).on("start", function() {
                    var transform = d3.zoomTransform(this);
                    startingTranslation = [ transform.x, transform.y ];
                }).on("zoom", function() {
                    self.applyLayoutTransform(!1);
                    var newTransform = d3.zoomTransform(this);
                    startingTranslation && !_.isEqual(startingTranslation, [ newTransform.x, newTransform.y ]) && (self.isPanning = !0);
                }).on("end", function() {
                    setTimeout(function() {
                        return _this.isPanning = !1;
                    });
                }), debug.fF.assert(function() {
                    return 1 === element.size();
                }, "d3.zoom() only works to apply zoomBehavior on a single node)"), element.call(this.zoom).on("dblclick.zoom", null);
            }, DecompositionTreeRenderingService.prototype.getBounds = function(nodes) {
                var _this = this;
                return _.reduce(nodes, function(acc, node) {
                    return acc.x[0] = Math.min(acc.x[0], node.x), acc.x[1] = Math.max(acc.x[1], node.x + _this.treeVisualConfig.dataBarWidth), 
                    acc.y[0] = Math.min(acc.y[0], node.y), acc.y[1] = Math.max(acc.y[1], node.y + _this.nodeVerticalSpacing), 
                    acc;
                }, {
                    x: [ 1 / 0, -1 / 0 ],
                    y: [ 1 / 0, -1 / 0 ]
                });
            }, DecompositionTreeRenderingService;
        }(), dataRoleHelper = __webpack_require__(38958), valueFormatter = __webpack_require__(72489), DecompositionTreeViewModelService = function() {
            function DecompositionTreeViewModelService(stringResourceProvider) {
                this.stringResourceProvider = stringResourceProvider, this.rootLabel = this.stringResourceProvider.get("TableTotalLabel");
            }
            return DecompositionTreeViewModelService.prototype.buildViewModel = function(dataView, analysisType, scalingType, displayUnits, precision, allowLocking, excludeAIInformation, axisStart, axisEnd) {
                var _this = this;
                debug.fF.assertValue(dataView, "dataView must be defined");
                var matrix = dataView.matrix;
                debug.fF.assertValue(matrix, "dataView.matrix must be defined"), debug.fF.assertValue(matrix.rows, "dataView.matrix.rows must be defined");
                var rolesMap = this.getRolesMap(matrix.valueSources, displayUnits, precision);
                if (rolesMap.analyze) {
                    var valueCount = _.size(matrix.valueSources), root = TreeTraversal.visitSubTree(matrix.rows.root, function(node, parent) {
                        return _this.matrixNodeToDecompositionTreeNode(node, matrix, rolesMap, parent, valueCount);
                    });
                    debug.fF.assertValue(root, "invalid data view");
                    var levels = this.getLevels(root, matrix, allowLocking), expansionState = _.first(matrix.rows.expansionStates), viewModel = {
                        root,
                        levels,
                        unpinnedDimensions: this.getAvailableDimensions(levels, dataView.metadata.columns),
                        roleInfoMap: rolesMap
                    };
                    return this.updateLevelsScale(viewModel, scalingType, axisStart, axisEnd), this.updateAILevels(viewModel, expansionState, _.size(dataView.matrix.rows.levels) + 1, analysisType, excludeAIInformation), 
                    viewModel;
                }
            }, DecompositionTreeViewModelService.prototype.updateLevelsScale = function(viewModel, dataBarScalingType, axisStart, axisEnd) {
                debug.fF.assertValue(viewModel, "viewModel is not defined");
                for (var absRootValue = Math.abs(viewModel.root.value), _i = 0, _a = viewModel.levels; _i < _a.length; _i++) {
                    var level = _a[_i], domain = void 0;
                    if (0 === level.level) domain = viewModel.root.value > 0 ? [ 0, viewModel.root.value ] : [ viewModel.root.value, 0 ]; else switch (dataBarScalingType) {
                      case "topNode":
                        domain = level.minNodeValue < 0 ? [ -1 * absRootValue, absRootValue ] : [ 0, absRootValue ];
                        break;

                      case "parentNode":
                        var absParentValue = Math.abs(level.parentValue);
                        domain = level.minNodeValue < 0 ? [ -1 * absParentValue, absParentValue ] : [ 0, absParentValue ];
                        break;

                      case "levelMaximum":
                        var max = Math.max(Math.abs(level.maxNodeValue), Math.abs(level.minNodeValue));
                        domain = level.minNodeValue < 0 ? [ -max, max ] : [ 0, max ];
                        break;

                      default:
                        return void debug.fF.assertFail("Invalid data bar scaling type");
                    }
                    var start = null != axisStart ? axisStart : domain[0], end = null != axisEnd ? axisEnd : domain[1];
                    start < end && (domain = [ start, end ]);
                    var range = [ 0, 0 ];
                    if (domain[1] !== domain[0]) {
                        var extent = Math.max(domain[1], 0) - Math.min(domain[0], 0) || 1;
                        range = [ Math.min(domain[0], 0) / extent, Math.max(domain[1], 0) / extent ];
                    }
                    level.scale = d3.scaleLinear().domain(domain).range(range).clamp(!0);
                }
            }, DecompositionTreeViewModelService.prototype.matrixNodeToDecompositionTreeNode = function(matrixNode, dataViewMatrix, rolesMap, parent, valueCount) {
                if (void 0 === parent && (parent = null), matrixNode) {
                    var isRoot = !parent;
                    if (isRoot || matrixNode.identity && !matrixNode.isSubtotal) {
                        var name, value, highlight, nodeValue, nodeValues = this.getNodeValues(matrixNode, valueCount), target = rolesMap.analyze, targetDisplayName = target.metadataColumn.displayName, targetValueIndex = target.valueSourceIndex;
                        _.isEmpty(nodeValues) || (nodeValue = nodeValues[targetValueIndex], _.isNumber(nodeValue.value) && (value = nodeValue.value), 
                        null === nodeValue.highlight ? highlight = null : _.isNumber(nodeValue.highlight) && (highlight = nodeValue.highlight));
                        var levelMetadataColumn = isRoot ? void 0 : _.first(dataViewMatrix.rows.levels[matrixNode.level].sources);
                        if (isRoot) {
                            name = targetDisplayName || this.rootLabel;
                            var targetValue = dataViewMatrix.valueSources[targetValueIndex];
                            targetValue.aggregates && _.isNumber(targetValue.aggregates.subtotal) && (value = targetValue.aggregates.subtotal);
                        } else {
                            var levelValue = _.find(matrixNode.levelValues, function(c) {
                                return 0 === c.levelSourceIndex;
                            });
                            debug.fF.assertValue(levelValue, "Level value must be defined"), levelValue && (name = (0, 
                            valueFormatter.WU)(levelValue.value, null == levelMetadataColumn ? void 0 : levelMetadataColumn.format));
                        }
                        var formattedHighlightValue, formattedTargetValue = target.formatter.format(value, null == nodeValue ? void 0 : nodeValue.objects), tooltips = levelMetadataColumn ? [ {
                            displayName: levelMetadataColumn.displayName,
                            value: name
                        } ] : [];
                        tooltips.push({
                            displayName: targetDisplayName,
                            value: formattedTargetValue
                        }), void 0 !== highlight && (formattedHighlightValue = target.formatter.format(highlight, null == nodeValue ? void 0 : nodeValue.highlightObjects), 
                        tooltips.push({
                            displayName: this.stringResourceProvider.get("Tooltip_HighlightedValueDisplayName"),
                            value: formattedHighlightValue
                        }));
                        var tooltipsRole = rolesMap.tooltips;
                        if (!_.isEmpty(tooltipsRole)) for (var _i = 0, tooltipsRole_1 = tooltipsRole; _i < tooltipsRole_1.length; _i++) {
                            var tooltip = tooltipsRole_1[_i];
                            tooltips.push({
                                displayName: tooltip.metadataColumn.displayName,
                                value: tooltip.formatter.format(nodeValues[tooltip.valueSourceIndex].value, null == nodeValue ? void 0 : nodeValue.objects)
                            });
                        }
                        var level = isRoot ? 0 : matrixNode.level + 1, node = {
                            children: [],
                            expanded: !1,
                            formattedValue: formattedTargetValue,
                            isAIHighlighted: (0, dataViewObject2.NA)(matrixNode.objects, {
                                objectName: decompositionTree_capabilities.I8.insights,
                                propertyName: decompositionTree_capabilities.hq.isAINode
                            }, !1),
                            name,
                            level,
                            parent,
                            value,
                            highlight,
                            formattedHighlightValue,
                            key: isRoot ? DecompositionTreeViewModelService.RootKey : matrixNode.identity.key,
                            selector: this.getNodeSelector(matrixNode.identity, parent, levelMetadataColumn && levelMetadataColumn.queryName),
                            restartKind: matrixNode.restartKind ? matrixNode.restartKind : 0,
                            restartValues: matrixNode.restartValues,
                            tooltips,
                            position: parent ? _.size(parent.children) : 0,
                            barColor: this.getColorFromObjects(matrixNode, targetValueIndex)
                        };
                        return isRoot || (parent.children.push(node), parent.expanded = !0), node;
                    }
                }
            }, DecompositionTreeViewModelService.prototype.getRolesMap = function(valueSources, displayUnits, precision) {
                for (var analyzeRoleInfo, tooltipRoleInfo, uniqueValueSources = _.uniq(valueSources), formatStringPropId = {
                    objectName: "general",
                    propertyName: "formatString"
                }, i = 0; i < _.size(uniqueValueSources); i++) {
                    var column = uniqueValueSources[i];
                    (0, dataRoleHelper.nu)(column, decompositionTree_capabilities.Fw.analyze) && (analyzeRoleInfo = {
                        valueSourceIndex: i,
                        metadataColumn: column,
                        formatter: new valueFormatter.g({
                            column,
                            formatStringPropId,
                            nullsAreBlank: !1,
                            displayUnit: displayUnits,
                            precision,
                            trailingZeroes: !0
                        })
                    }), (0, dataRoleHelper.nu)(column, decompositionTree_capabilities.Fw.tooltips) && (tooltipRoleInfo || (tooltipRoleInfo = []), 
                    tooltipRoleInfo.push({
                        valueSourceIndex: i,
                        metadataColumn: column,
                        formatter: new valueFormatter.g({
                            column,
                            formatStringPropId,
                            nullsAreBlank: !1,
                            displayUnit: displayUnits,
                            precision,
                            trailingZeroes: !0
                        })
                    }));
                }
                return {
                    analyze: analyzeRoleInfo,
                    tooltips: tooltipRoleInfo
                };
            }, DecompositionTreeViewModelService.prototype.getLevels = function(root, dataViewMatrix, allowLocking) {
                debug.fF.assertValue(root, "node must be defined"), debug.fF.assertValue(dataViewMatrix, "dataViewMatrix must be defined");
                var dataViewHierarchyLevels = dataViewMatrix.rows.levels;
                debug.fF.assertValue(dataViewHierarchyLevels, "dataViewHierarchyLevels must be defined");
                var levels = [ {
                    level: 0,
                    maxNodeValue: -1 / 0,
                    minNodeValue: 1 / 0,
                    highlight: void 0 !== root.highlight ? 1 : 0
                } ], expansionState = _.first(dataViewMatrix.rows.expansionStates);
                if (!expansionState || !expansionState.levels) return levels;
                var lastPinned = _.findLastIndex(expansionState.levels, function(level) {
                    return level.isPinned;
                });
                debug.fF.assert(function() {
                    return lastPinned + 1 >= _.size(dataViewHierarchyLevels);
                }, "pinnedLevelsCount < levels");
                var pinnedLevelsCount = Math.max(lastPinned + 1, _.size(dataViewHierarchyLevels));
                debug.fF.assert(function() {
                    return pinnedLevelsCount <= expansionState.levels.length;
                }, "Count of pinned levels is greater than the number of dimensions");
                for (var dimensionCount = Math.min(pinnedLevelsCount, expansionState.levels.length), i = 0; i < dimensionCount; i++) {
                    var firstColumn = _.first(expansionState.levels[i].sources);
                    debug.fF.assertValue(firstColumn, "Expansion state level sources should not be empty.");
                    var isLocked = expansionState.levels[i].isLocked, tooltipData = void 0;
                    allowLocking && (tooltipData = this.stringResourceProvider.get(isLocked ? "DecompositionTree_LevelLocked_Tooltip" : "DecompositionTree_LockLevel_Tooltip")), 
                    levels.push({
                        queryRef: firstColumn.queryName,
                        displayName: firstColumn.displayName,
                        level: i + 1,
                        maxNodeValue: -1 / 0,
                        minNodeValue: 1 / 0,
                        isLocked,
                        highlight: 0,
                        tooltipData
                    });
                }
                var expansionPath = this.getExpansionPath(expansionState);
                debug.fF.assert(function() {
                    return expansionPath.length <= dimensionCount;
                }, "Expansion path length is greater than the count of pinned levels");
                for (var pathLength = Math.min(expansionPath.length, dimensionCount), l = (i = 0, 
                1); i < pathLength; i++, l++) {
                    var values = expansionPath[i];
                    levels[l] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, levels[l]), {
                        pathNodeName: (0, valueFormatter.WU)(_.first(values))
                    });
                }
                var depthExceedsPinLevelsCount = !1;
                return TreeTraversal.visitSubTree(root, function(node, levels) {
                    if (levels[node.level]) {
                        var level = levels[node.level];
                        return node.parent && (level.parentValue = node.parent.value), _.isFinite(node.value) && (level.maxNodeValue = Math.max(level.maxNodeValue, node.value), 
                        level.minNodeValue = Math.min(level.minNodeValue, node.value), node.value > 0 && node.highlight > node.value || node.value < 0 && node.highlight < node.value ? level.highlight = 2 : void 0 !== node.highlight && 2 !== level.highlight && (level.highlight = 1)), 
                        _.isFinite(node.highlight) && (level.maxNodeValue = Math.max(level.maxNodeValue, node.highlight), 
                        level.minNodeValue = Math.min(level.minNodeValue, node.highlight)), _.isEmpty(node.children) || (level.expandedNode = node), 
                        levels;
                    }
                    depthExceedsPinLevelsCount = !0;
                }, levels), debug.fF.assert(function() {
                    return !depthExceedsPinLevelsCount;
                }, "Tree depth is greater than the count of pinned levels"), this.populateScopeAggregates(dataViewMatrix, levels), 
                levels;
            }, DecompositionTreeViewModelService.prototype.getExpansionPath = function(expansionState) {
                var nodeValues = [];
                if (!expansionState || !expansionState.root || !expansionState.root.children) return nodeValues;
                for (var node = _.find(expansionState.root.children, function(d) {
                    return d.isExpanded;
                }); node; ) nodeValues.push(node.values), node = _.find(node.children, function(d) {
                    return d.isExpanded;
                });
                return nodeValues;
            }, DecompositionTreeViewModelService.prototype.populateScopeAggregates = function(dataViewMatrix, levels) {
                var _this = this;
                debug.fF.assertValue(dataViewMatrix, "dataViewMatrix"), debug.fF.assertNonEmpty(levels, "levels");
                var valueSources = dataViewMatrix.valueSources;
                if (_.size(valueSources) < 1) debug.fF.assertFail("Expected one value source"); else {
                    var topLevelScopeAggregates = valueSources[0].scopedAggregates;
                    topLevelScopeAggregates && (debug.fF.assert(function() {
                        return 1 === topLevelScopeAggregates.length;
                    }, "Decomposition tree expects only one global scope aggregate."), this.setScopeAggregateValueToLevel(topLevelScopeAggregates[0].values, levels[1])), 
                    TreeTraversal.visitSubTree(dataViewMatrix.rows.root, function(node, levels) {
                        if (node.isSubtotal) {
                            var scopedAggregates_1 = node.aggregateValues;
                            if (scopedAggregates_1) {
                                debug.fF.assert(function() {
                                    return 1 === scopedAggregates_1.length;
                                }, "Decomposition tree node expects only one scope aggregate");
                                var aggregate = scopedAggregates_1[0], level = levels[node.level + 1];
                                debug.fF.assertValue(level, "Tree depth is greater than the count of pinned levels"), 
                                _this.setScopeAggregateValueToLevel(aggregate.values, level), _this.setScopeAggregateValueToLevel(aggregate.highlight, level);
                            }
                        }
                        return levels;
                    }, levels);
                }
            }, DecompositionTreeViewModelService.prototype.setScopeAggregateValueToLevel = function(aggregateValue, level) {
                aggregateValue && level && (aggregateValue.max && _.isFinite(aggregateValue.max) && (level.maxNodeValue = Math.max(level.maxNodeValue, aggregateValue.max)), 
                aggregateValue.min && _.isFinite(aggregateValue.min) && (level.minNodeValue = Math.min(level.minNodeValue, aggregateValue.min)));
            }, DecompositionTreeViewModelService.prototype.updateAILevels = function(viewModel, expansionState, dataViewLevelsCount, analysisType, excludeAIInformation) {
                debug.fF.assertValue(viewModel, "View model must be defined");
                var levels = viewModel.levels, aiLevels = [];
                if (expansionState) {
                    var aiLevelsInformation = _.map(expansionState.levels, function(level) {
                        return level.AIInformation;
                    }), firstAILevel_1 = _.findIndex(aiLevelsInformation, function(aiInfo) {
                        return aiInfo;
                    }), lastAILevel = _.findLastIndex(aiLevelsInformation, function(aiInfo) {
                        return aiInfo;
                    });
                    aiLevels = _.slice(aiLevelsInformation, firstAILevel_1, lastAILevel + 1), _.forEach(aiLevels, function(aiLevel) {
                        return debug.fF.assertValue(aiLevel, "AI levels must be contiguous");
                    }), aiLevels = _.takeWhile(aiLevels, function(aiLevel) {
                        return aiLevel;
                    });
                }
                var aiLevelsCount = _.size(aiLevels);
                if (debug.fF.assert(function() {
                    return _.size(levels) > aiLevelsCount;
                }, "Count of AI levels > number of levels"), 0 === aiLevelsCount || excludeAIInformation) TreeTraversal.visitSubTree(viewModel.root, function(node) {
                    node.isAIHighlighted = !1;
                }); else {
                    var disabledAILevelsCount = _.findIndex(aiLevels, function(aiLevel) {
                        return !aiLevel.disabled;
                    });
                    disabledAILevelsCount = -1 === disabledAILevelsCount ? aiLevelsCount : disabledAILevelsCount;
                    for (var firstAILevel = Math.max(_.size(levels) - aiLevelsCount, 0), i = 0; i < aiLevelsCount; i++) (level = levels[firstAILevel + i]).isAILevel = !0, 
                    level.isEmpty = firstAILevel + i >= dataViewLevelsCount, level.aiResult = {
                        method: aiLevels[i].method,
                        disabled: i < disabledAILevelsCount
                    };
                    for (TreeTraversal.visitSubTree(viewModel.root, function(node) {
                        var level = levels[node.level];
                        node.isAIHighlighted = node.isAIHighlighted && !!level.aiResult && !level.aiResult.disabled, 
                        node.isAIHighlighted && (level.aiRecommendedNode = node);
                    }), i = 0; i < aiLevelsCount; i++) {
                        var level;
                        (level = levels[firstAILevel + i]).tooltipData = this.getAITTooltipDescription(level, viewModel.root.name, analysisType);
                    }
                }
            }, DecompositionTreeViewModelService.prototype.getAITTooltipDescription = function(level, rootName, analysisType) {
                if (level.isAILevel) {
                    if (!level.aiRecommendedNode) {
                        var recommendationType = "";
                        switch (level.aiResult.method) {
                          case "MaxSplit":
                            recommendationType = this.stringResourceProvider.get("DecompositionTree_AnalysisMethod_HighValue");
                            break;

                          case "MinSplit":
                            recommendationType = this.stringResourceProvider.get("DecompositionTree_AnalysisMethod_LowValue");
                            break;

                          case "BestSplit":
                            return void debug.fF.assertFail("".concat(level.aiResult.method, " is not supported"));

                          default:
                            debug.fF.assertNever(level.aiResult.method);
                        }
                        return this.stringResourceProvider.format(level.isEmpty ? "DecompositionTree_Recommendation_Unexpanded" : "DecompositionTree_Recommendation_Unselected", recommendationType.toLowerCase());
                    }
                    if ("absolute" === analysisType) switch (level.aiResult.method) {
                      case "MaxSplit":
                        return this.stringResourceProvider.format("DecompositionTree_AnalysisTooltipDescription_MaxSplit", rootName, level.displayName, level.aiRecommendedNode.name);

                      case "MinSplit":
                        return this.stringResourceProvider.format("DecompositionTree_AnalysisTooltipDescription_MinSplit", rootName, level.displayName, level.aiRecommendedNode.name);

                      case "BestSplit":
                        return void debug.fF.assertFail("".concat(level.aiResult.method, " is not supported"));

                      default:
                        debug.fF.assertNever(level.aiResult.method);
                    } else switch (level.aiResult.method) {
                      case "MaxSplit":
                        return this.stringResourceProvider.format("DecompositionTree_AnalysisTooltipDescription_RelativeMaxSplit", rootName, level.displayName, level.aiRecommendedNode.name);

                      case "MinSplit":
                        return this.stringResourceProvider.format("DecompositionTree_AnalysisTooltipDescription_RelativeMinSplit", rootName, level.displayName, level.aiRecommendedNode.name);

                      case "BestSplit":
                        return void debug.fF.assertFail("".concat(level.aiResult.method, " is not supported"));

                      default:
                        debug.fF.assertNever(level.aiResult.method);
                    }
                }
            }, DecompositionTreeViewModelService.prototype.getNodeValues = function(matrixNode, valueCount) {
                var valueNode = _.find(matrixNode.children, function(c) {
                    return c.isSubtotal;
                });
                valueNode || (valueNode = _.first(matrixNode.children)), valueNode || (valueNode = matrixNode);
                var nodeValues = [];
                if (_.isEmpty(valueNode.values)) return nodeValues;
                for (var i = 0; i < valueCount; i++) valueNode.values[i] && nodeValues.push(valueNode.values[i]);
                return nodeValues;
            }, DecompositionTreeViewModelService.prototype.getNodeSelector = function(identity, parent, queryRef) {
                if (!identity) return {
                    dataMap: {}
                };
                debug.fF.assertValue(parent, "Node parent must be defined");
                var selector = {
                    metadata: [ queryRef ],
                    dataMap: {}
                };
                if (parent.selector) for (var dataMap in parent.selector.dataMap) selector.dataMap[dataMap] = parent.selector.dataMap[dataMap];
                return selector.dataMap[queryRef] = [ identity ], selector;
            }, DecompositionTreeViewModelService.prototype.getAvailableDimensions = function(levels, columns) {
                var dimensions = _.filter(columns, function(column) {
                    return (0, dataRoleHelper.nu)(column, decompositionTree_capabilities.Fw.explainBy);
                });
                if (_.isEmpty(dimensions)) return [];
                var availableDimensions = _.filter(dimensions, function(dimension) {
                    return !_.some(levels, function(level) {
                        return level.queryRef === dimension.queryName;
                    });
                });
                return _.map(availableDimensions, function(dimension) {
                    return {
                        displayName: dimension.displayName,
                        queryRef: dimension.queryName
                    };
                });
            }, DecompositionTreeViewModelService.prototype.getColorFromObjects = function(matrixNode, targetValueIndex) {
                debug.fF.assertValue(matrixNode, "matrixNode"), debug.fF.assert(function() {
                    return targetValueIndex >= 0;
                }, "targetValueIndex should not be negative.");
                var valueNode = _.find(matrixNode.children, function(c) {
                    return c.isSubtotal;
                });
                if (_.some(matrixNode.values) && (valueNode = matrixNode), valueNode && !_.isEmpty(valueNode.values)) {
                    var value = (0, dataViewObject2.NA)(valueNode.values[targetValueIndex].objects, {
                        objectName: decompositionTree_capabilities.I8.dataBars,
                        propertyName: decompositionTree_capabilities.hq.dataBarColor
                    }, void 0);
                    if (value) return value && value.solid && value.solid.color;
                }
            }, DecompositionTreeViewModelService.RootKey = "root", DecompositionTreeViewModelService;
        }(), DecompositionTree = function() {
            function DecompositionTree(options) {
                void 0 === options && (options = {}), this.contextMenuYOffset = 2, this.aiMode = "absolute", 
                this.barsPerLevel = decompositionTree_capabilities.bR.defaultValue, this.dataLabelDisplayUnits = 0, 
                this.dataLabelPrecision = void 0, this.defaultClickAction = "select", this.isAIEnabled = !0, 
                this.scalingType = "levelMaximum", this.supportsDecompositionAnalysis = !0, this.isTouchEvent = !0 === options.isTouchEvent;
            }
            return DecompositionTree.prototype.init = function(options) {
                var _this = this;
                debug.fF.assertValue(options, "options"), this.featureSwitches = options.featureSwitches, 
                this.host = options.host, this.decompositionAuthoringService = this.host.decompositionService(), 
                this.stringResourceProvider = {
                    get: function(stringId) {
                        return _this.host.getLocalizedString(stringId);
                    },
                    getOptional: function(stringId) {
                        return _this.host.getLocalizedString(stringId);
                    },
                    format: function(stringId) {
                        for (var args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
                        return _this.host.getLocalizedString(stringId, args);
                    }
                }, this.viewModelService = new DecompositionTreeViewModelService(this.stringResourceProvider), 
                this.renderingService = new DecompositionTreeRenderingService(this.stringResourceProvider, this.host.tooltips(), this.isTouchEvent), 
                this.renderingService.isVisualReadOnly = !this.decompositionAuthoringService, this.visualStyle = options.style;
                var style = buildDecompositionTreeVisualStyle(this.visualStyle);
                this.renderingService.init(options.element.get(0), style), this.decompositionAuthoringService && (this.renderingService.nodeClicked.subscribe(function(event) {
                    return _this.nodeClicked(event.node, event.point);
                }), this.renderingService.nodeContextMenu.subscribe(function(event) {
                    return _this.onNodeContextMenu(event.node, event.point);
                }), this.renderingService.expandButtonClicked.subscribe(function(event) {
                    return _this.showExpandContextMenu(event.node, event.point);
                }), this.renderingService.canvasClicked.subscribe(function() {
                    return _this.clearSelection();
                }), this.renderingService.levelClicked.subscribe(function(event) {
                    return _this.showUpdateLevelContextMenu(event.element, event.level);
                }), this.renderingService.removeLevelButtonClicked.subscribe(function(level) {
                    _this.decompositionAuthoringService.removeLevel(level.queryRef), _this.clearSelection();
                }), this.renderingService.loadMoreClicked.subscribe(function(node) {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib_es6.__generator)(this, function(_a) {
                            switch (_a.label) {
                              case 0:
                                return [ 4, this.loadMoreClicked(node) ];

                              case 1:
                                return [ 2, _a.sent() ];
                            }
                        });
                    });
                }), this.renderingService.levelIconClicked.subscribe(function(level) {
                    level.isAILevel ? _this.decompositionAuthoringService.clearAILevels(level.queryRef) : _this.renderingService.allowLocking && _this.decompositionAuthoringService.toggleLockedLevels(level.queryRef);
                })), this.renderingService.resize(options.viewport);
            }, DecompositionTree.prototype.update = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataview, objects, _a, _b, _c, _d;
                    return (0, tslib_es6.__generator)(this, function(_e) {
                        switch (_e.label) {
                          case 0:
                            return this.renderingService.allowLocking = 1 === this.host.getViewMode(), ((0, 
                            StandaloneUtility3.yE)(options.type, enums.EP.Resize) || null != options.resizeMode) && (this.resize(options.viewport), 
                            2 === options.resizeMode && this.resized()), (dataview = _.first(options.dataViews)) ? (objects = dataview.metadata && dataview.metadata.objects, 
                            (0, StandaloneUtility3.yE)(options.type, enums.EP.Data) ? (_a = this, (_b = !!this.decompositionAuthoringService) ? [ 4, this.decompositionAuthoringService.isDecompositionAnalysisSupported() ] : [ 3, 2 ]) : [ 3, 5 ]) : [ 2 ];

                          case 1:
                            _b = _e.sent(), _e.label = 2;

                          case 2:
                            return _a.supportsDecompositionAnalysis = _b, this.renderingService.visualStyle = buildDecompositionTreeVisualStyle(this.visualStyle, objects), 
                            this.dataBarScalingType = this.getDataBarScalingType(objects), this.axisStart = this.getAxisStart(objects), 
                            this.axisEnd = this.getAxisEnd(objects), this.dataLabelDisplayUnits = this.getDataLabelDisplayUnits(objects), 
                            this.dataLabelPrecision = this.getDataLabelPrecision(objects), this.renderingService.connectorType = this.getConnectorType(objects), 
                            this.renderingService.layoutDensity = this.getVisualDensity(objects), this.renderingService.showSubtitles = this.getShowSubtitles(objects), 
                            this.isAIEnabled = this.supportsDecompositionAnalysis && this.getIsAIEnabled(objects), 
                            this.aiMode = this.getAIMode(objects), this.barsPerLevel = this.getBarsPerLevel(objects), 
                            this.defaultClickAction = this.getDefaultClickAction(objects), _c = this.renderingService, 
                            (_d = this.decompositionAuthoringService) ? [ 4, this.decompositionAuthoringService.isTopNPerLevelSupported() ] : [ 3, 4 ];

                          case 3:
                            _d = !_e.sent(), _e.label = 4;

                          case 4:
                            _c.useLegacyLayout = _d, this.renderingService.responsiveLayout = this.getResponsiveLayout(objects), 
                            this.windowExpansionState = (0, windowExpansionStateBuilder.x9)(dataview), this.render(dataview), 
                            _.some(this.pendingSelection) && !this.restoreSelection(this.pendingSelection) && this.host.setWarnings([ new visualWarnings.zC ]), 
                            this.pendingSelection = null, this.renderingService.responsiveLayout && this.updateNodesPerLevel(), 
                            _e.label = 5;

                          case 5:
                            return [ 2 ];
                        }
                    });
                });
            }, DecompositionTree.prototype.onClearSelection = function() {
                this.pendingSelection = null, this.renderingService.selectedNode = null, this.renderingService.render(this.viewModel);
            }, DecompositionTree.prototype.onRestoreSelection = function(options) {
                return this.pendingSelection = null, this.restoreSelection(options.selection) || (this.pendingSelection = options.selection), 
                !0;
            }, DecompositionTree.prototype.restoreSelection = function(items) {
                var selection = _.first(items);
                if (selection && this.viewModel) {
                    debug.fF.assert(function() {
                        return 1 === _.size(selection.metadata);
                    }, "Composite groups are not supported");
                    var queryRef = _.first(selection.metadata), identityMetadata_1 = _.first(selection.dataMap && selection.dataMap[queryRef]), node = this.findNode(this.viewModel.root, function(node) {
                        if (identityMetadata_1 && node.key !== identityMetadata_1.key) return !1;
                        var queryNames = _.keys(node.selector.dataMap);
                        if (_.size(queryNames) !== _.size(_.keys(selection.dataMap))) return !1;
                        var _loop_1 = function(queryName) {
                            var selectionSelectorForColumn = selection.dataMap[queryName], nodeSelectorForColumn = node.selector.dataMap[queryName];
                            if (_.size(selectionSelectorForColumn) !== _.size(nodeSelectorForColumn) || _.some(nodeSelectorForColumn, function(repetitionSelector, i) {
                                return repetitionSelector.key !== selectionSelectorForColumn[i].key;
                            })) return {
                                value: !1
                            };
                        };
                        for (var queryName in queryNames) {
                            var state_1 = _loop_1(queryName);
                            if ("object" == typeof state_1) return state_1.value;
                        }
                        return !0;
                    });
                    if (node) return this.renderingService.selectedNode = node, this.renderingService.render(this.viewModel), 
                    !0;
                }
                return this.onClearSelection(), !1;
            }, DecompositionTree.prototype.findNode = function(node, predicate) {
                if (predicate(node)) return node;
                if (node && node.children) for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                    var matchingNode = this.findNode(_a[_i], predicate);
                    if (matchingNode) return matchingNode;
                }
            }, DecompositionTree.prototype.render = function(dataview) {
                this.viewModel = this.viewModelService.buildViewModel(dataview, this.aiMode, this.scalingType, this.dataLabelDisplayUnits, this.dataLabelPrecision, this.renderingService.allowLocking, this.renderingService.isVisualReadOnly, this.axisStart, this.axisEnd), 
                this.renderingService.render(this.viewModel);
            }, DecompositionTree.prototype.resize = function(viewport) {
                this.renderingService.resize(viewport);
            }, DecompositionTree.prototype.resized = function() {
                this.updateNodesPerLevel(), this.renderingService.render(this.viewModel);
            }, DecompositionTree.prototype.updateNodesPerLevel = function() {
                var _a;
                this.renderingService.responsiveLayout && this.barsPerLevel !== this.renderingService.maxVisibleNodesPerLevel && !this.isUpdateReentrant ? (this.isUpdateReentrant = !0, 
                this.host.persistProperties({
                    merge: [ {
                        objectName: decompositionTree_capabilities.I8.tree,
                        properties: (_a = {}, _a[decompositionTree_capabilities.hq.effectiveBarsPerLevel] = this.renderingService.maxVisibleNodesPerLevel, 
                        _a),
                        selector: void 0
                    } ]
                }, !0)) : this.isUpdateReentrant = !1;
            }, DecompositionTree.prototype.enumerateObjectInstances = function(options) {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, enumeration = new objectEnumerationBuilder.G, renderingService = this.renderingService;
                switch (options.objectName) {
                  case decompositionTree_capabilities.I8.analysis:
                    this.supportsDecompositionAnalysis && enumeration.pushInstance({
                        selector: null,
                        objectName: options.objectName,
                        properties: (_a = {}, _a[decompositionTree_capabilities.hq.aiEnabled] = this.isAIEnabled, 
                        _a[decompositionTree_capabilities.hq.aiMode] = this.aiMode, _a)
                    });
                    break;

                  case decompositionTree_capabilities.I8.tree:
                    var treeObjects = {
                        selector: null,
                        objectName: options.objectName,
                        properties: (_b = {}, _b[decompositionTree_capabilities.hq.density] = renderingService.layoutDensity, 
                        _b[decompositionTree_capabilities.hq.accentColor] = renderingService.visualStyle.accentColor, 
                        _b[decompositionTree_capabilities.hq.connectorDefaultColor] = renderingService.visualStyle.linkStrokeColor, 
                        _b[decompositionTree_capabilities.hq.connectorType] = renderingService.connectorType, 
                        _b[decompositionTree_capabilities.hq.defaultClickAction] = this.defaultClickAction, 
                        _b)
                    };
                    this.renderingService.useLegacyLayout || (treeObjects.properties[decompositionTree_capabilities.hq.responsiveLayout] = this.renderingService.responsiveLayout, 
                    this.renderingService.responsiveLayout || (treeObjects.properties[decompositionTree_capabilities.hq.barsPerLevel] = this.barsPerLevel, 
                    treeObjects.validValues = ((_c = {})[decompositionTree_capabilities.hq.barsPerLevel] = {
                        numberRange: {
                            min: decompositionTree_capabilities.bR.minValue,
                            max: decompositionTree_capabilities.bR.maxValue
                        }
                    }, _c))), enumeration.pushInstance(treeObjects);
                    break;

                  case decompositionTree_capabilities.I8.dataBars:
                    var dataBarOptions = {
                        selector: null,
                        objectName: options.objectName,
                        properties: (_d = {}, _d[decompositionTree_capabilities.hq.positiveBarColor] = renderingService.visualStyle.positiveBarColor, 
                        _d[decompositionTree_capabilities.hq.negativeBarColor] = renderingService.visualStyle.negativeBarColor, 
                        _d[decompositionTree_capabilities.hq.dataBarBackgroundColor] = renderingService.visualStyle.dataBarBackgroundColor, 
                        _d[decompositionTree_capabilities.hq.dataBarWidthPercent] = renderingService.visualStyle.dataBarWidthPercent, 
                        _d[decompositionTree_capabilities.hq.dataBarScalingType] = this.scalingType, _d),
                        propertyTypes: {}
                    };
                    dataBarOptions.properties[decompositionTree_capabilities.hq.axisStart] = this.axisStart, 
                    dataBarOptions.properties[decompositionTree_capabilities.hq.axisEnd] = this.axisEnd, 
                    dataBarOptions.propertyTypes[decompositionTree_capabilities.hq.axisStart] = {
                        numeric: !0
                    }, dataBarOptions.propertyTypes[decompositionTree_capabilities.hq.axisEnd] = {
                        numeric: !0
                    }, enumeration.pushInstance(dataBarOptions);
                    break;

                  case decompositionTree_capabilities.I8.levelHeader:
                    enumeration.pushInstance({
                        selector: null,
                        objectName: options.objectName,
                        properties: (_e = {}, _e[decompositionTree_capabilities.hq.levelHeaderBackgroundColor] = renderingService.visualStyle.headerBackgroundColor, 
                        _e[decompositionTree_capabilities.hq.levelTitleFontFamily] = renderingService.visualStyle.levelTitleFont.family, 
                        _e[decompositionTree_capabilities.hq.levelTitleFontSize] = renderingService.visualStyle.levelTitleFont.size.pt, 
                        _e[decompositionTree_capabilities.hq.levelTitleBold] = renderingService.visualStyle.levelTitleFont.weight === CssConstants.en, 
                        _e[decompositionTree_capabilities.hq.levelTitleItalic] = renderingService.visualStyle.levelTitleFont.style === CssConstants.BF, 
                        _e[decompositionTree_capabilities.hq.levelTitleUnderline] = renderingService.visualStyle.levelTitleFont.textDecoration === CssConstants.f0, 
                        _e[decompositionTree_capabilities.hq.levelTitleFontColor] = renderingService.visualStyle.levelTitleFont.color, 
                        _e[decompositionTree_capabilities.hq.showSubtitles] = renderingService.showSubtitles, 
                        _e)
                    }), renderingService.showSubtitles && enumeration.pushInstance({
                        selector: null,
                        objectName: options.objectName,
                        properties: (_f = {}, _f[decompositionTree_capabilities.hq.levelSubtitleFontFamily] = renderingService.visualStyle.levelSubtitleFont.family, 
                        _f[decompositionTree_capabilities.hq.levelSubtitleFontSize] = renderingService.visualStyle.levelSubtitleFont.size.pt, 
                        _f[decompositionTree_capabilities.hq.levelSubtitleBold] = renderingService.visualStyle.levelSubtitleFont.weight === CssConstants.en, 
                        _f[decompositionTree_capabilities.hq.levelSubtitleItalic] = renderingService.visualStyle.levelSubtitleFont.style === CssConstants.BF, 
                        _f[decompositionTree_capabilities.hq.levelSubtitleUnderline] = renderingService.visualStyle.levelSubtitleFont.textDecoration === CssConstants.f0, 
                        _f[decompositionTree_capabilities.hq.levelSubtitleFontColor] = renderingService.visualStyle.levelSubtitleFont.color, 
                        _f)
                    });
                    break;

                  case decompositionTree_capabilities.I8.categoryLabels:
                    enumeration.pushInstance({
                        selector: null,
                        objectName: options.objectName,
                        properties: (_g = {}, _g[decompositionTree_capabilities.hq.categoryLabelFontFamily] = renderingService.visualStyle.labelFont.family, 
                        _g[decompositionTree_capabilities.hq.categoryLabelFontSize] = renderingService.visualStyle.labelFont.size.pt, 
                        _g[decompositionTree_capabilities.hq.categoryLabelBold] = renderingService.visualStyle.labelFont.weight === CssConstants.en, 
                        _g[decompositionTree_capabilities.hq.categoryLabelItalic] = renderingService.visualStyle.labelFont.style === CssConstants.BF, 
                        _g[decompositionTree_capabilities.hq.categoryLabelUnderline] = renderingService.visualStyle.labelFont.textDecoration === CssConstants.f0, 
                        _g[decompositionTree_capabilities.hq.categoryLabelFontColor] = renderingService.visualStyle.labelFont.color, 
                        _g)
                    });
                    break;

                  case decompositionTree_capabilities.I8.dataLabels:
                    enumeration.pushInstance({
                        selector: null,
                        objectName: options.objectName,
                        properties: (_h = {}, _h[decompositionTree_capabilities.hq.dataLabelFontFamily] = renderingService.visualStyle.valueFont.family, 
                        _h[decompositionTree_capabilities.hq.dataLabelFontSize] = renderingService.visualStyle.valueFont.size.pt, 
                        _h[decompositionTree_capabilities.hq.dataLabelBold] = renderingService.visualStyle.valueFont.weight === CssConstants.en, 
                        _h[decompositionTree_capabilities.hq.dataLabelItalic] = renderingService.visualStyle.valueFont.style === CssConstants.BF, 
                        _h[decompositionTree_capabilities.hq.dataLabelUnderline] = renderingService.visualStyle.valueFont.textDecoration === CssConstants.f0, 
                        _h[decompositionTree_capabilities.hq.dataLabelFontColor] = renderingService.visualStyle.valueFont.color, 
                        _h[decompositionTree_capabilities.hq.dataLabelDisplayUnits] = this.dataLabelDisplayUnits, 
                        _h[decompositionTree_capabilities.hq.dataLabelPrecision] = this.dataLabelPrecision, 
                        _h),
                        validValues: (_j = {}, _j[decompositionTree_capabilities.hq.dataLabelPrecision] = {
                            numberRange: {
                                min: 0,
                                max: dataLabelViewModel1Consts.vo
                            }
                        }, _j)
                    });
                }
                return enumeration.complete();
            }, DecompositionTree.prototype.enumerateObjectRepetition = function() {
                var _a, enumeration = [];
                if (!this.viewModel) return enumeration;
                var roleMap = this.viewModel.roleInfoMap;
                if (roleMap && roleMap.analyze && roleMap.analyze.metadataColumn) {
                    var analyzeColumn = roleMap.analyze.metadataColumn;
                    if (analyzeColumn.isMeasure && analyzeColumn.type.numeric) {
                        var barColorObjectRepetition = {
                            containerName: analyzeColumn.displayName,
                            selector: {
                                data: [ (0, dataViewWildcard.Ue)(0) ],
                                metadata: analyzeColumn.queryName
                            },
                            objects: (_a = {}, _a[decompositionTree_capabilities.I8.dataBars] = {
                                formattingProperties: [ decompositionTree_capabilities.hq.dataBarColor ]
                            }, _a),
                            allowOverrideSubtotalMatching: !0
                        };
                        enumeration.push(barColorObjectRepetition);
                    }
                }
                return enumeration;
            }, DecompositionTree.prototype.getFormattingModel = function() {
                var _this = this;
                return new build_control_util.Nq(function() {
                    return _this.buildAnalysisCard();
                }, function() {
                    return _this.buildTreeCard();
                }, function() {
                    return _this.buildDataBarsCard();
                }, function() {
                    return _this.buildCategoryLabelsCard();
                }, function() {
                    return _this.buildDataLabelsCard();
                }, function() {
                    return _this.buildTreeHeaderCard();
                }, function() {
                    return _this.buildConditionalFormattingCard(_this.host);
                }).build();
            }, DecompositionTree.prototype.buildAnalysisCard = function() {
                var _this = this, props = (0, build_control_util.wZ)(pluginsCapabilities.D.decompositionTree.objects), builder = new build_control_util.CQ(new build_control_util.lg("analysis"), "Analysis", [ props.analysis.aiEnabled, props.analysis.aiMode ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addGroup("analysis", function(group) {
                    group.addSimpleSlice("aiEnabled", new build_control_util.bd({
                        descriptor: props.analysis.aiEnabled,
                        value: _this.isAIEnabled
                    }).build()).addSimpleSlice("aiMode", new build_control_util.uY({
                        descriptor: props.analysis.aiMode,
                        value: _this.aiMode
                    }).build());
                }), builder.build();
            }, DecompositionTree.prototype.buildTreeCard = function() {
                var _this = this, localize = function(key) {
                    return _this.host.getLocalizedString(key);
                }, props = (0, build_control_util.wZ)(pluginsCapabilities.D.decompositionTree.objects), builder = new build_control_util.CQ(new build_control_util.lg("tree"), "DecompositionTree_Formatting_Tree", [ props.tree.density, props.tree.accentColor, props.tree.connectorDefaultColor, props.tree.connectorType, props.tree.defaultClickAction, props.tree.responsiveLayout, props.tree.barsPerLevel ], localize);
                return builder.addGroup("tree", function(group) {
                    group.withCollapsible(!0).withDisplayName("DecompositionTree_Formatting_Tree_Settings"), 
                    group.addSimpleSlice("density", new build_control_util.uY({
                        descriptor: props.tree.density,
                        value: _this.renderingService.layoutDensity
                    }).build()).addSimpleSlice("defaultClickAction", new build_control_util.uY({
                        descriptor: props.tree.defaultClickAction,
                        value: _this.defaultClickAction
                    }).build()), _this.renderingService.useLegacyLayout || (group.addSimpleSlice("responsiveLayout", new build_control_util.bd({
                        descriptor: props.tree.responsiveLayout,
                        value: _this.renderingService.responsiveLayout
                    }).build()), _this.renderingService.responsiveLayout || group.addSimpleSlice("barsPerLevel", new build_control_util.JN({
                        descriptor: props.tree.barsPerLevel,
                        localize,
                        options: {
                            maxValue: {
                                type: 1,
                                value: decompositionTree_capabilities.bR.maxValue
                            },
                            minValue: {
                                type: 0,
                                value: decompositionTree_capabilities.bR.minValue
                            }
                        },
                        value: _this.barsPerLevel
                    }).build()));
                }), builder.addGroup("Connectors", function(group) {
                    group.withCollapsible(!0).withDisplayName("DecompositionTree_Formatting_Connectors"), 
                    group.addSimpleSlice("connectorType", new build_control_util.uY({
                        descriptor: props.tree.connectorType,
                        value: _this.renderingService.connectorType
                    }).build()).addSimpleSlice("accentColor", new build_control_util.BT({
                        descriptor: props.tree.accentColor,
                        value: {
                            value: _this.renderingService.visualStyle.accentColor
                        }
                    }).build()).addSimpleSlice("connectorDefaultColor", new build_control_util.BT({
                        descriptor: props.tree.connectorDefaultColor,
                        value: {
                            value: _this.renderingService.visualStyle.linkStrokeColor
                        }
                    }).build());
                }), builder.build();
            }, DecompositionTree.prototype.buildDataBarsCard = function() {
                var _this = this, localize = function(key) {
                    return _this.host.getLocalizedString(key);
                }, props = (0, build_control_util.wZ)(pluginsCapabilities.D.decompositionTree.objects), builder = new build_control_util.CQ(new build_control_util.lg("dataBars"), "Visual_Bars_Title", [ props.dataBars.positiveBarColor, props.dataBars.negativeBarColor, props.dataBars.dataBarBackgroundColor, props.dataBars.dataBarWidthPercent, props.dataBars.dataBarScalingType, props.dataBars.axisStart, props.dataBars.axisEnd ], localize);
                return builder.addGroup("Options", function(group) {
                    group.withCollapsible(!0).withDisplayName("Desktop_FileMenu_Options"), group.addSimpleSlice("dataBarScalingType", new build_control_util.uY({
                        descriptor: props.dataBars.dataBarScalingType,
                        value: _this.scalingType
                    }).build()).addSimpleSlice("dataBarWidthPercent", new build_control_util.JN({
                        descriptor: props.dataBars.dataBarWidthPercent,
                        localize,
                        options: {
                            maxValue: {
                                type: 1,
                                value: 150
                            },
                            minValue: {
                                type: 0,
                                value: 50
                            },
                            unitSymbol: visualLocKeys.t2
                        },
                        value: _this.renderingService.visualStyle.dataBarWidthPercent
                    }).build()).addSimpleSlice("axisStart", new build_control_util.mu({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, props.dataBars.axisStart), {
                            propertyTypes: {
                                numeric: !0
                            }
                        }),
                        placeholderText: localize("Visual_Auto"),
                        value: _this.axisStart
                    }).build()).addSimpleSlice("axisEnd", new build_control_util.mu({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, props.dataBars.axisEnd), {
                            propertyTypes: {
                                numeric: !0
                            }
                        }),
                        placeholderText: localize("Visual_Auto"),
                        value: _this.axisEnd
                    }).build());
                }), builder.addGroup("Color", function(group) {
                    group.withCollapsible(!0).withDisplayName("Visual_Colors"), group.addSimpleSlice("positiveBarColor", new build_control_util.BT({
                        descriptor: props.dataBars.positiveBarColor,
                        value: {
                            value: _this.renderingService.visualStyle.positiveBarColor
                        }
                    }).build()).addSimpleSlice("negativeBarColor", new build_control_util.BT({
                        descriptor: props.dataBars.negativeBarColor,
                        value: {
                            value: _this.renderingService.visualStyle.negativeBarColor
                        }
                    }).build()).addSimpleSlice("dataBarBackgroundColor", new build_control_util.BT({
                        descriptor: props.dataBars.dataBarBackgroundColor,
                        value: {
                            value: _this.renderingService.visualStyle.dataBarBackgroundColor
                        }
                    }).build());
                }), builder.build();
            }, DecompositionTree.prototype.buildCategoryLabelsCard = function() {
                var _this = this, props = (0, build_control_util.wZ)(pluginsCapabilities.D.decompositionTree.objects), builder = new build_control_util.CQ(new build_control_util.lg("categoryLabels"), "Visual_CategoryLabels", [ props.categoryLabels.categoryLabelFontColor, props.categoryLabels.categoryLabelFontSize, props.categoryLabels.categoryLabelFontFamily, props.categoryLabels.categoryLabelBold, props.categoryLabels.categoryLabelItalic, props.categoryLabels.categoryLabelUnderline ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addGroup("categoryLabels", function(group) {
                    group.withDisplayName("Visual_Tablix_Values").withCollapsible(!1).addCompositeSlice("font", "Font", _this.getCategoryLabelsFontControl(props)).addSimpleSlice("categoryLabelFontColor", new build_control_util.BT({
                        descriptor: props.categoryLabels.categoryLabelFontColor,
                        value: {
                            value: _this.renderingService.visualStyle.labelFont.color
                        }
                    }).build());
                }), builder.build();
            }, DecompositionTree.prototype.buildDataLabelsCard = function() {
                var _this = this, localize = function(key) {
                    return _this.host.getLocalizedString(key);
                }, props = (0, build_control_util.wZ)(pluginsCapabilities.D.decompositionTree.objects), builder = new build_control_util.CQ(new build_control_util.lg("dataLabels"), "Visual_Tablix_Values", [ props.dataLabels.dataLabelFontFamily, props.dataLabels.dataLabelFontSize, props.dataLabels.dataLabelBold, props.dataLabels.dataLabelItalic, props.dataLabels.dataLabelUnderline, props.dataLabels.dataLabelFontColor, props.dataLabels.dataLabelDisplayUnits, props.dataLabels.dataLabelPrecision ], localize);
                return builder.addGroup("dataLabels", function(group) {
                    group.addCompositeSlice("font", "Font", _this.getDataLabelsFontControl(props)).addSimpleSlice("dataLabelFontColor", new build_control_util.BT({
                        descriptor: props.dataLabels.dataLabelFontColor,
                        value: {
                            value: _this.renderingService.visualStyle.valueFont.color
                        }
                    }).build()).addSimpleSlice("dataLabelDisplayUnits", new build_control_util.uY({
                        descriptor: props.dataLabels.dataLabelDisplayUnits,
                        value: _this.dataLabelDisplayUnits
                    }).build()).addSimpleSlice("dataLabelPrecision", new build_control_util.mu({
                        descriptor: props.dataLabels.dataLabelPrecision,
                        placeholderText: localize("Visual_Auto"),
                        value: _this.dataLabelPrecision
                    }).build());
                }), builder.build();
            }, DecompositionTree.prototype.buildTreeHeaderCard = function() {
                var _this = this, props = (0, build_control_util.wZ)(pluginsCapabilities.D.decompositionTree.objects), builder = new build_control_util.CQ(new build_control_util.lg("levelHeader"), "Header_Plural", [ props.levelHeader.levelHeaderBackgroundColor, props.levelHeader.levelTitleFontFamily, props.levelHeader.levelTitleFontSize, props.levelHeader.levelTitleBold, props.levelHeader.levelTitleItalic, props.levelHeader.levelTitleUnderline, props.levelHeader.levelTitleFontColor, props.levelHeader.showSubtitles, props.levelHeader.levelSubtitleFontFamily, props.levelHeader.levelSubtitleFontSize, props.levelHeader.levelSubtitleBold, props.levelHeader.levelSubtitleItalic, props.levelHeader.levelSubtitleUnderline, props.levelHeader.levelSubtitleFontColor ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addGroup("title", function(group) {
                    group.withCollapsible(!0).withDisplayName("Visual_Tablix_ColumnFormatting_Title").addCompositeSlice("title_font", "Font", _this.getLevelHeaderFontControl(props)).addSimpleSlice("levelTitleFontColor", new build_control_util.BT({
                        descriptor: props.levelHeader.levelTitleFontColor,
                        value: {
                            value: _this.renderingService.visualStyle.levelTitleFont.color
                        }
                    }).build());
                }), builder.addGroup("subtitles", function(group) {
                    group.addTopLevelToggle("Subtitles", function() {
                        return new build_control_util.bd({
                            descriptor: props.levelHeader.showSubtitles,
                            value: _this.renderingService.showSubtitles
                        }).build();
                    }).withCollapsible(!0).withDisplayName("Subtitles"), _this.renderingService.showSubtitles && group.addCompositeSlice("subtitle_font", "Font", _this.getLevelSubTitleFontControl(props)).addSimpleSlice("levelSubtitleFontColor", new build_control_util.BT({
                        descriptor: props.levelHeader.levelSubtitleFontColor,
                        value: {
                            value: _this.renderingService.visualStyle.levelSubtitleFont.color
                        }
                    }).build());
                }), builder.addGroup("background", function(group) {
                    group.withCollapsible(!0).withDisplayName("Visual_Background").addSimpleSlice("levelHeaderBackgroundColor", new build_control_util.BT({
                        descriptor: props.levelHeader.levelHeaderBackgroundColor,
                        value: {
                            value: _this.renderingService.visualStyle.headerBackgroundColor
                        }
                    }).build());
                }), builder.build();
            }, DecompositionTree.prototype.buildConditionalFormattingCard = function(hostServices) {
                var decompTreeCapabilities = (0, decompositionTree_capabilities.Sd)(), VisualObjectRepetitionArray = this.enumerateObjectRepetition();
                return (0, conditional_formatting_util.Z)(VisualObjectRepetitionArray, function(key) {
                    return hostServices.getLocalizedString(key);
                }, decompTreeCapabilities.objects, "FieldWell_ConditionalFormatting", "Visual_Matrix_CellElements_Description");
            }, DecompositionTree.prototype.nodeClicked = function(node, point) {
                if (this.viewModel && this.decompositionAuthoringService && (debug.fF.assertValue(node, "Node must be defined"), 
                !this.isDrillOrSeeRecordsEnabled(node, point))) {
                    this.renderingService.lastClickedNode = node;
                    var previousSelectedNode = this.clearSelection();
                    node.level > 0 && (node.level === this.viewModel.levels.length - 1 || node.expanded && "select" === this.defaultClickAction) ? previousSelectedNode && previousSelectedNode.key === node.key || this.setSelection(node) : node.level < this.viewModel.levels.length - 1 && this.decompositionAuthoringService.toggleNode(node.selector);
                }
            }, DecompositionTree.prototype.onNodeContextMenu = function(node, point) {
                this.viewModel && this.viewModel.roleInfoMap && (this.renderingService.selectedNode = node, 
                _.isEmpty(node.selector.dataMap) || this.host.onContextMenu({
                    data: [ this.getSelectorForDrill(node.selector) ],
                    position: point
                }));
            }, DecompositionTree.prototype.getSelectorForDrill = function(selector) {
                return debug.fF.assertValue(selector, "Selector must be defined"), debug.fF.assertValue(this.viewModel, "View model is not defined"), 
                {
                    dataMap: selector.dataMap,
                    metadata: [ this.viewModel.roleInfoMap.analyze.metadataColumn.queryName ]
                };
            }, DecompositionTree.prototype.loadMoreClicked = function(node) {
                var windowKind;
                switch (debug.fF.assertValue(node, "node is not defined"), debug.fF.assertValue(this.windowExpansionState, "Missing windowExpansion"), 
                node.restartKind) {
                  case 1:
                    windowKind = 3;
                    break;

                  case 2:
                    windowKind = 4;
                    break;

                  case 3:
                    windowKind = node.position > 0 ? 3 : 4;
                    break;

                  case 0:
                    debug.fF.assertFail("Invalid restart kind");
                    break;

                  default:
                    debug.fF.assertNever(node.restartKind);
                }
                var windowExpansionState = (0, contracts_windowExpansionState.tY)(this.windowExpansionState, (0, 
                selector.tV)(node.selector), windowKind, node.restartValues);
                this.host.loadWindow(windowExpansionState);
            }, DecompositionTree.prototype.populateAIMethodsMenuOptions = function(menu, actionParams, showIcon, currentAnalysisMethod) {
                var highSplitName = this.stringResourceProvider.get("DecompositionTree_AnalysisMethod_HighValue"), lowSplitName = this.stringResourceProvider.get("DecompositionTree_AnalysisMethod_LowValue"), highSplitDescription = this.stringResourceProvider.get("absolute" === this.aiMode ? "DecompositionTree_AnalysisDescription_HighValue" : "DecompositionTree_AnalysisDescription_RelativeHighValue"), lowSplitDescription = this.stringResourceProvider.get("absolute" === this.aiMode ? "DecompositionTree_AnalysisDescription_LowValue" : "DecompositionTree_AnalysisDescription_RelativeLowValue"), isChecked = function(method) {
                    return currentAnalysisMethod && currentAnalysisMethod === method;
                };
                menu.items.push({
                    type: 0,
                    key: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, actionParams), {
                        method: "MaxSplit"
                    }),
                    text: highSplitName,
                    tooltip: highSplitDescription,
                    showIcon,
                    checked: isChecked("MaxSplit"),
                    icon: "glyphicon pbi-glyph-insight glyph-small"
                }), menu.items.push({
                    type: 0,
                    key: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, actionParams), {
                        method: "MinSplit"
                    }),
                    text: lowSplitName,
                    tooltip: lowSplitDescription,
                    showIcon,
                    checked: isChecked("MinSplit"),
                    icon: "glyphicon pbi-glyph-insight glyph-small"
                });
            }, DecompositionTree.prototype.showExpandContextMenu = function(node, position) {
                if (debug.fF.assertValue(node, "Node must be defined"), debug.fF.assertValue(position, "Position must be defined"), 
                this.decompositionAuthoringService) if (this.viewModel) {
                    var availableDimensions = _.filter(this.viewModel.unpinnedDimensions, function(dimension) {
                        return dimension.displayName;
                    }), menu = {
                        items: []
                    };
                    if (!_.isEmpty(availableDimensions)) {
                        this.isAIEnabled && (this.populateAIMethodsMenuOptions(menu, {
                            action: "ExpandToAiLevel",
                            node
                        }, !0), menu.items.push({
                            type: 1
                        }));
                        for (var _i = 0, availableDimensions_1 = availableDimensions; _i < availableDimensions_1.length; _i++) {
                            var dimension = availableDimensions_1[_i];
                            menu.items.push({
                                type: 0,
                                key: {
                                    action: "ExpandToNewLevel",
                                    node,
                                    dimension
                                },
                                text: dimension.displayName,
                                tooltip: dimension.displayName
                            });
                        }
                        this.host.dropdown().showContextMenu(menu, position, this.contextMenuActions.bind(this));
                    }
                } else debug.fF.assertFail("View model must be defined");
            }, DecompositionTree.prototype.showUpdateLevelContextMenu = function(element, level) {
                if (debug.fF.assertValue(element, "Element must be defined"), debug.fF.assertValue(level, "Level must be defined"), 
                this.decompositionAuthoringService && !level.isLocked) if (this.viewModel) {
                    var menu = {
                        items: []
                    };
                    if (level.isAILevel) this.populateAIMethodsMenuOptions(menu, {
                        action: "UpdateAiMethod",
                        oldLevel: level
                    }, !1, level.aiResult.method); else for (var availableDimensions = _.filter(this.viewModel.unpinnedDimensions, function(dimension) {
                        return dimension.displayName;
                    }), _i = 0, availableDimensions_2 = availableDimensions; _i < availableDimensions_2.length; _i++) {
                        var dimension = availableDimensions_2[_i];
                        dimension.queryRef !== level.queryRef && menu.items.push({
                            type: 0,
                            key: {
                                action: "UpdateLevel",
                                oldLevel: level,
                                newLevel: dimension
                            },
                            text: dimension.displayName,
                            tooltip: dimension.displayName
                        });
                    }
                    if (!_.isEmpty(menu.items)) {
                        var rect = element.getClientRects()[0];
                        this.host.dropdown().showContextMenu(menu, {
                            x: rect.left,
                            y: rect.top + this.contextMenuYOffset
                        }, this.contextMenuActions.bind(this));
                    }
                } else debug.fF.assertFail("View model must be defined");
            }, DecompositionTree.prototype.contextMenuActions = function(action) {
                if (debug.fF.assertValue(action, "action must be defined"), debug.fF.assertValue(this.decompositionAuthoringService, "decomposition service must be defined"), 
                action) {
                    switch (action.action) {
                      case "ExpandToNewLevel":
                        this.decompositionAuthoringService.addLevelAndExpandNode(action.node.selector, action.dimension.queryRef), 
                        this.host.telemetry().trace(2, "DecompositionTreeFieldSplitClicked");
                        break;

                      case "ExpandToAiLevel":
                        this.decompositionAuthoringService.addAILevelAndExpandNode(action.node.selector, action.method, !action.node.isAIHighlighted), 
                        this.host.telemetry().trace(2, "DecompositionTreeAISplitClicked");
                        break;

                      case "UpdateLevel":
                        this.decompositionAuthoringService.updateLevel(action.oldLevel.queryRef, action.newLevel.queryRef), 
                        this.host.telemetry().trace(2, "DecompositionTreeUpdateLevel");
                        break;

                      case "UpdateAiMethod":
                        this.decompositionAuthoringService.updateAILevel(action.oldLevel.queryRef, action.method), 
                        this.host.telemetry().trace(2, "DecompositionTreeChangeAISplitClicked");
                        break;

                      default:
                        debug.fF.assertFail("No action mapped");
                    }
                    this.clearSelection();
                }
            }, DecompositionTree.prototype.isDrillOrSeeRecordsEnabled = function(node, point) {
                var selectingArgs = {
                    type: 0,
                    position: point,
                    visualObjects: [ {
                        objectName: "",
                        selectorsByColumn: this.getSelectorForDrill(node.selector)
                    } ]
                };
                return this.host.onSelecting(selectingArgs), 0 !== selectingArgs.action;
            }, DecompositionTree.prototype.setSelection = function(node) {
                this.renderingService.selectedNode = node, this.host.onSelect({
                    type: 0,
                    selectionMode: 0,
                    visualObjects: [ {
                        objectName: "",
                        selectorsByColumn: node.selector
                    } ]
                }), this.renderingService.render(this.viewModel);
            }, DecompositionTree.prototype.clearSelection = function() {
                var previousSelectedNode = this.renderingService.selectedNode;
                return this.renderingService.selectedNode && (this.renderingService.selectedNode = null, 
                this.host.onSelect({
                    type: 0,
                    selectionMode: 0,
                    visualObjects: []
                })), this.renderingService.render(this.viewModel), previousSelectedNode;
            }, Object.defineProperty(DecompositionTree.prototype, "dataBarScalingType", {
                set: function(value) {
                    value !== this.scalingType && (this.scalingType = value, this.viewModel && this.viewModelService.updateLevelsScale(this.viewModel, this.scalingType, this.axisStart, this.axisEnd));
                },
                enumerable: !1,
                configurable: !0
            }), DecompositionTree.prototype.getAIMode = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.analysis,
                    propertyName: decompositionTree_capabilities.hq.aiMode
                }, "absolute");
            }, DecompositionTree.prototype.getConnectorType = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.tree,
                    propertyName: decompositionTree_capabilities.hq.connectorType
                }, "curve");
            }, DecompositionTree.prototype.getDataBarScalingType = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.dataBars,
                    propertyName: decompositionTree_capabilities.hq.dataBarScalingType
                }, "levelMaximum");
            }, DecompositionTree.prototype.getAxisStart = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.dataBars,
                    propertyName: decompositionTree_capabilities.hq.axisStart
                }, void 0);
            }, DecompositionTree.prototype.getAxisEnd = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.dataBars,
                    propertyName: decompositionTree_capabilities.hq.axisEnd
                }, void 0);
            }, DecompositionTree.prototype.getIsAIEnabled = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.analysis,
                    propertyName: decompositionTree_capabilities.hq.aiEnabled
                }, !0);
            }, DecompositionTree.prototype.getShowSubtitles = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.levelHeader,
                    propertyName: decompositionTree_capabilities.hq.showSubtitles
                }, !0);
            }, DecompositionTree.prototype.getVisualDensity = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.tree,
                    propertyName: decompositionTree_capabilities.hq.density
                }, "default");
            }, DecompositionTree.prototype.getDataLabelDisplayUnits = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.dataLabels,
                    propertyName: decompositionTree_capabilities.hq.dataLabelDisplayUnits
                }, 0);
            }, DecompositionTree.prototype.getDataLabelPrecision = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.dataLabels,
                    propertyName: decompositionTree_capabilities.hq.dataLabelPrecision
                }, void 0);
            }, DecompositionTree.prototype.getBarsPerLevel = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.tree,
                    propertyName: decompositionTree_capabilities.hq.barsPerLevel
                }, 10);
            }, DecompositionTree.prototype.getResponsiveLayout = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.tree,
                    propertyName: decompositionTree_capabilities.hq.responsiveLayout
                }, !0);
            }, DecompositionTree.prototype.getDefaultClickAction = function(objects) {
                return (0, dataViewObject2.NA)(objects, {
                    objectName: decompositionTree_capabilities.I8.tree,
                    propertyName: decompositionTree_capabilities.hq.defaultClickAction
                }, "select");
            }, DecompositionTree.prototype.getCategoryLabelsFontControl = function(props) {
                return (new build_control_util.UN).withFontFamily({
                    descriptor: props.categoryLabels.categoryLabelFontFamily,
                    value: this.renderingService.visualStyle.labelFont.family
                }).withFontSizeProperties({
                    descriptor: props.categoryLabels.categoryLabelFontSize,
                    options: {
                        minValue: {
                            type: 0,
                            value: 8
                        },
                        maxValue: {
                            type: 1,
                            value: 60
                        }
                    },
                    value: this.renderingService.visualStyle.labelFont.size.pt
                }).withBold({
                    descriptor: props.categoryLabels.categoryLabelBold,
                    value: this.renderingService.visualStyle.labelFont.weight === CssConstants.en
                }).withItalic({
                    descriptor: props.categoryLabels.categoryLabelItalic,
                    value: this.renderingService.visualStyle.labelFont.style === CssConstants.BF
                }).withUnderline({
                    descriptor: props.categoryLabels.categoryLabelUnderline,
                    value: this.renderingService.visualStyle.labelFont.textDecoration === CssConstants.f0
                }).build();
            }, DecompositionTree.prototype.getLevelSubTitleFontControl = function(props) {
                return (new build_control_util.UN).withFontFamily({
                    descriptor: props.levelHeader.levelSubtitleFontFamily,
                    value: this.renderingService.visualStyle.levelSubtitleFont.family
                }).withFontSizeProperties({
                    descriptor: props.levelHeader.levelSubtitleFontSize,
                    options: {
                        minValue: {
                            type: 0,
                            value: 8
                        },
                        maxValue: {
                            type: 1,
                            value: 60
                        }
                    },
                    value: this.renderingService.visualStyle.levelSubtitleFont.size.pt
                }).withBold({
                    descriptor: props.levelHeader.levelSubtitleBold,
                    value: this.renderingService.visualStyle.levelSubtitleFont.weight === CssConstants.en
                }).withItalic({
                    descriptor: props.levelHeader.levelSubtitleItalic,
                    value: this.renderingService.visualStyle.levelSubtitleFont.style === CssConstants.BF
                }).withUnderline({
                    descriptor: props.levelHeader.levelSubtitleUnderline,
                    value: this.renderingService.visualStyle.levelSubtitleFont.textDecoration === CssConstants.f0
                }).build();
            }, DecompositionTree.prototype.getDataLabelsFontControl = function(props) {
                return (new build_control_util.UN).withFontFamily({
                    descriptor: props.dataLabels.dataLabelFontFamily,
                    value: this.renderingService.visualStyle.valueFont.family
                }).withFontSizeProperties({
                    descriptor: props.dataLabels.dataLabelFontSize,
                    options: {
                        minValue: {
                            type: 0,
                            value: 8
                        },
                        maxValue: {
                            type: 1,
                            value: 60
                        }
                    },
                    value: this.renderingService.visualStyle.valueFont.size.pt
                }).withBold({
                    descriptor: props.dataLabels.dataLabelBold,
                    value: this.renderingService.visualStyle.valueFont.weight === CssConstants.en
                }).withItalic({
                    descriptor: props.dataLabels.dataLabelItalic,
                    value: this.renderingService.visualStyle.valueFont.style === CssConstants.BF
                }).withUnderline({
                    descriptor: props.dataLabels.dataLabelUnderline,
                    value: this.renderingService.visualStyle.valueFont.textDecoration === CssConstants.f0
                }).build();
            }, DecompositionTree.prototype.getLevelHeaderFontControl = function(props) {
                return (new build_control_util.UN).withFontFamily({
                    descriptor: props.levelHeader.levelTitleFontFamily,
                    value: this.renderingService.visualStyle.levelTitleFont.family
                }).withFontSizeProperties({
                    descriptor: props.levelHeader.levelTitleFontSize,
                    options: {
                        minValue: {
                            type: 0,
                            value: 8
                        },
                        maxValue: {
                            type: 1,
                            value: 60
                        }
                    },
                    value: this.renderingService.visualStyle.levelTitleFont.size.pt
                }).withBold({
                    descriptor: props.levelHeader.levelTitleBold,
                    value: this.renderingService.visualStyle.levelTitleFont.weight === CssConstants.en
                }).withItalic({
                    descriptor: props.levelHeader.levelTitleItalic,
                    value: this.renderingService.visualStyle.levelTitleFont.style === CssConstants.BF
                }).withUnderline({
                    descriptor: props.levelHeader.levelTitleUnderline,
                    value: this.renderingService.visualStyle.levelTitleFont.textDecoration === CssConstants.f0
                }).build();
            }, DecompositionTree;
        }();
    }
} ]);