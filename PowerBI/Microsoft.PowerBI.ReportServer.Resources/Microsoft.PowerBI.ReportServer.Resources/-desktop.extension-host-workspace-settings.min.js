"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-workspace-settings" ], {
    98752: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExtensionHostWorkspaceSettingsModule: function() {
                return ExtensionHostWorkspaceSettingsModule;
            }
        });
        var common = __webpack_require__(77476), ngrx_effects = __webpack_require__(60756), of = __webpack_require__(11547), take = __webpack_require__(48787), mergeMap = __webpack_require__(42195), map = __webpack_require__(14172), index_core = __webpack_require__(73471), src = __webpack_require__(17899), host_message_broker_src = __webpack_require__(60397), manage_access_shared_src = __webpack_require__(8697), groupStore = __webpack_require__(1908), workspaceContext = __webpack_require__(35030), extension_host_workspace_settings_actions = __webpack_require__(29159), core = __webpack_require__(50423), telemetry_service = __webpack_require__(54323), ngrx_store = __webpack_require__(85732), ExtensionHostWorkspaceSettingsEffects = function() {
            function ExtensionHostWorkspaceSettingsEffects(actions$, telemetryService, messageBroker, store, groupStore, workspaceContext) {
                var _this = this;
                this.actions$ = actions$, this.telemetryService = telemetryService, this.messageBroker = messageBroker, 
                this.store = store, this.groupStore = groupStore, this.workspaceContext = workspaceContext, 
                this.onOpenWorkspaceSettingsReceived$ = (0, src.Av)(this.actions$, this.messageBroker, index_core.Vm.openWorkspaceSettings, function(_a) {
                    var workspaceObjectId = _a.workspaceObjectId, selectedSettingId = _a.selectedSettingId, selectedSettingGroupId = _a.selectedSettingGroupId;
                    return _this.workspaceContext.myFolderObjectId$.pipe((0, take.q)(1), (0, mergeMap.zg)(function(myFolderObjectId) {
                        return _this.groupStore.getGroupById(myFolderObjectId === workspaceObjectId ? "me" : workspaceObjectId).pipe((0, 
                        take.q)(1), (0, map.U)(function(workspace) {
                            var _a;
                            if (!workspace) return index_core.Vm.openWorkspaceSettings.resolve({
                                value: !1
                            });
                            var isAdmin = !!((null !== (_a = workspace.permissions) && void 0 !== _a ? _a : 0) & manage_access_shared_src.Pl.All);
                            return _this.store.dispatch(extension_host_workspace_settings_actions.Pj({
                                workspace,
                                isAdmin,
                                selectedSettingId,
                                selectedSettingGroupId
                            })), _this.telemetryService.logStandardFeatureEvent({
                                originatingService: "DataCloudUX",
                                activityName: "Open from extension",
                                featureName: "Fabric Workspace Settings"
                            }), index_core.Vm.openWorkspaceSettings.resolve({
                                value: !0
                            });
                        }));
                    }));
                }), this.openWorkspaceSettings$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, src.UF)(extension_host_workspace_settings_actions.Pj), (0, 
                    mergeMap.zg)(function(_a) {
                        var workspace = _a.workspace, isAdmin = _a.isAdmin, selectedSettingId = _a.selectedSettingId;
                        _this.telemetryService.logStandardFeatureEvent({
                            originatingService: "DataCloudUX",
                            activityName: "Detail settings",
                            featureName: "Fabric Workspace Settings",
                            activityAttributes: {
                                isAdmin: !!isAdmin,
                                selectedTab: selectedSettingId || "About"
                            }
                        });
                        var workspaceSettingsLoadEvent = {
                            name: "Load Workspace settings - start",
                            properties: {
                                operationEndTime: (new Date).toISOString(),
                                workspaceObjectId: workspace.objectId,
                                featureName: "Fabric Workspace Settings",
                                originatingService: "DataCloudUX",
                                isAdmin,
                                selectedSettingId
                            }
                        };
                        return _this.telemetryService.logEvent(workspaceSettingsLoadEvent), (0, of.of)(extension_host_workspace_settings_actions.iJ({
                            visible: !0
                        }));
                    }));
                });
            }
            return ExtensionHostWorkspaceSettingsEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostWorkspaceSettingsEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](telemetry_service.t), core["\u0275\u0275inject"](host_message_broker_src.u), core["\u0275\u0275inject"](ngrx_store.yh), core["\u0275\u0275inject"](groupStore.G), core["\u0275\u0275inject"](workspaceContext._));
            }, ExtensionHostWorkspaceSettingsEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostWorkspaceSettingsEffects,
                factory: ExtensionHostWorkspaceSettingsEffects.\u0275fac
            }), ExtensionHostWorkspaceSettingsEffects;
        }(), ExtensionHostWorkspaceSettingsModule = function() {
            function ExtensionHostWorkspaceSettingsModule() {}
            return ExtensionHostWorkspaceSettingsModule.\u0275fac = function(t) {
                return new (t || ExtensionHostWorkspaceSettingsModule);
            }, ExtensionHostWorkspaceSettingsModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostWorkspaceSettingsModule
            }), ExtensionHostWorkspaceSettingsModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostWorkspaceSettingsEffects ]) ]
            }), ExtensionHostWorkspaceSettingsModule;
        }();
    }
} ]);