"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "basicShape" ], {
    27960: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            BasicShape: function() {
                return BasicShape;
            }
        });
        var basicShape_capabilities = __webpack_require__(32169), common_colorHelper = __webpack_require__(90120), interactivityUtils = __webpack_require__(30237), visualLocKeys = __webpack_require__(33024), types_basicShapeType = __webpack_require__(83496), colorHelper = __webpack_require__(44783), debug = __webpack_require__(62458), browserUtils = __webpack_require__(59107), dataViewObject2 = __webpack_require__(82755);
        function createPathFromArray(data, points, selectedElement, viewportHeight, viewportWidth, degrees, translateData) {
            var attrs = {
                transform: "translate(" + (translateData ? translateData.translateX : 0) + "," + (translateData ? translateData.translateY : 0) + ")",
                d: d3.line().x(function(d) {
                    return d.x;
                }).y(function(d) {
                    return d.y;
                }).curve(d3.curveLinear)(points) + " Z"
            };
            createShape(data, createSvg(viewportHeight, viewportWidth, selectedElement, degrees, getScale(viewportWidth, viewportHeight, degrees)), "path", attrs);
        }
        function createSvg(viewportHeight, viewportWidth, selectedElement, degrees, scale) {
            return selectedElement.append("div").styles({
                transform: "rotate(" + degrees + "deg) scale(" + scale + ")",
                "transform-origin": "center",
                "-webkit-transform": "rotate(" + degrees + "deg) scale(" + scale + ")",
                "-webkit-transform-origin": "center",
                width: viewportWidth + "px",
                height: viewportHeight + "px"
            }).append("svg").attrs({
                width: viewportWidth,
                height: viewportHeight
            });
        }
        function createShape(data, svg, shapeType, shapeAttrs) {
            svg.append(shapeType).attrs(shapeAttrs).styles({
                "vector-effect": "non-scaling-stroke",
                "stroke-width": data.lineWeight + "px",
                stroke: data.lineColor,
                "stroke-opacity": (100 - data.lineTransparency) / 100,
                fill: data.fillColor,
                "fill-opacity": !0 === data.showFill ? (100 - data.shapeTransparency) / 100 : 0
            });
        }
        function getScale(width, height, degrees) {
            var originalWidth = width, originalHeight = height, offsetAngle = Math.atan2(height, width), originalFactor = Math.sqrt(Math.pow(height, 2) + Math.pow(width, 2)), radians = degrees / 180 * Math.PI;
            return width >= height ? (degrees < 90 ? radians += offsetAngle : degrees < 180 ? radians -= offsetAngle : degrees < 270 ? radians += offsetAngle : radians -= offsetAngle, 
            originalHeight / Math.abs(Math.sin(radians)) / originalFactor) : (degrees < 90 ? radians -= offsetAngle : degrees < 180 ? radians += offsetAngle : degrees < 270 ? radians -= offsetAngle : radians += offsetAngle, 
            originalWidth / Math.abs(Math.cos(radians)) / originalFactor);
        }
        function calculateArrowDeltas(viewportWidth, viewportHeight) {
            return {
                deltaX: .5 * viewportWidth - .05 * viewportWidth,
                deltaY: .42 * viewportHeight - .016 * viewportHeight
            };
        }
        var DefaultShape = types_basicShapeType.C9, BasicShape = function() {
            function BasicShape() {}
            return Object.defineProperty(BasicShape.prototype, "shapeType", {
                get: function() {
                    return this.data.shapeType;
                },
                set: function(shapeType) {
                    this.data.shapeType = shapeType;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(BasicShape.prototype, "lineColor", {
                get: function() {
                    return this.data ? this.data.lineColor : common_colorHelper.v.getDataColorByIndex(this.style, 0, colorHelper.fA);
                },
                set: function(color) {
                    this.data.lineColor = color;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(BasicShape.prototype, "lineTransparency", {
                get: function() {
                    return this.data ? this.data.lineTransparency : 0;
                },
                set: function(trans) {
                    this.data.lineTransparency = trans;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(BasicShape.prototype, "lineWeight", {
                get: function() {
                    return this.data ? this.data.lineWeight : 3;
                },
                set: function(weight) {
                    this.data.lineWeight = weight;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(BasicShape.prototype, "roundEdge", {
                get: function() {
                    return this.data ? this.data.roundEdge : 0;
                },
                set: function(roundEdge) {
                    this.data.roundEdge = roundEdge;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(BasicShape.prototype, "showFill", {
                get: function() {
                    return !this.data || this.data.showFill;
                },
                set: function(show) {
                    this.data.showFill = show;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(BasicShape.prototype, "fillColor", {
                get: function() {
                    return this.data ? this.data.fillColor : common_colorHelper.v.getThemeColor(this.style, "backgroundLight");
                },
                set: function(color) {
                    this.data.fillColor = color;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(BasicShape.prototype, "shapeTransparency", {
                get: function() {
                    return this.data ? this.data.shapeTransparency : 0;
                },
                set: function(trans) {
                    this.data.shapeTransparency = trans;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(BasicShape.prototype, "angle", {
                get: function() {
                    return this.data ? this.data.angle : 0;
                },
                set: function(angle) {
                    this.data.angle = this.scaleTo360Deg(angle);
                },
                enumerable: !1,
                configurable: !0
            }), BasicShape.prototype.init = function(options) {
                this.element = options.element, this.selection = d3.select(this.element[0]), this.currentViewport = options.viewport, 
                this.hostServices = options.host, this.style = options.style;
            }, BasicShape.prototype.update = function(options) {
                if (debug.fF.assertValue(options, "options"), this.currentViewport = options.viewport, 
                !_.isEmpty(options.dataViews)) {
                    var dataView = options.dataViews[0];
                    dataView.metadata && dataView.metadata.objects && (this.data = this.getDataFromDataView(options.dataViews[0].metadata.objects), 
                    this.render());
                }
            }, BasicShape.prototype.getDataFromDataView = function(dataViewObject) {
                if (dataViewObject) {
                    var shapeType = (0, dataViewObject2.NA)(dataViewObject, basicShape_capabilities.O.general.shapeType, DefaultShape), defaultsForShape = this.getDefaultsForShape(shapeType), colorHelper = common_colorHelper.v.create(this.style);
                    return {
                        shapeType,
                        lineColor: colorHelper.getColorForPropertyWithDefaultColor(dataViewObject, basicShape_capabilities.O.line.lineColor, defaultsForShape.lineColor),
                        lineTransparency: (0, dataViewObject2.NA)(dataViewObject, basicShape_capabilities.O.line.transparency, defaultsForShape.lineTransparency),
                        lineWeight: (0, dataViewObject2.NA)(dataViewObject, basicShape_capabilities.O.line.weight, defaultsForShape.lineWeight),
                        roundEdge: (0, dataViewObject2.NA)(dataViewObject, basicShape_capabilities.O.line.roundEdge, defaultsForShape.roundEdge),
                        shapeTransparency: (0, dataViewObject2.NA)(dataViewObject, basicShape_capabilities.O.fill.transparency, defaultsForShape.shapeTransparency),
                        fillColor: colorHelper.getColorForProperty(dataViewObject, basicShape_capabilities.O.fill.fillColor, "backgroundLight"),
                        showFill: (0, dataViewObject2.NA)(dataViewObject, basicShape_capabilities.O.fill.show, defaultsForShape.showFill),
                        angle: this.scaleTo360Deg((0, dataViewObject2.NA)(dataViewObject, basicShape_capabilities.O.rotation.angle, defaultsForShape.angle))
                    };
                }
                return null;
            }, BasicShape.prototype.scaleTo360Deg = function(angle) {
                return 0 !== angle && Math.abs(angle) % 360 == 0 ? angle : angle = (360 + (angle %= 360)) % 360;
            }, BasicShape.prototype.enumerateObjectInstances = function(options) {
                var objectInstances = [];
                if (!this.data) return objectInstances;
                switch (options.objectName) {
                  case "line":
                    var instance = {
                        selector: null,
                        properties: {
                            lineColor: this.lineColor,
                            transparency: this.lineTransparency,
                            weight: this.lineWeight
                        },
                        objectName: options.objectName
                    };
                    return this.shapeType === types_basicShapeType.C9 && (instance.properties.roundEdge = this.roundEdge, 
                    instance.validValues = {
                        roundEdge: {
                            unitSymbol: visualLocKeys.e_,
                            numberRange: {
                                min: 0,
                                max: 100
                            }
                        }
                    }), objectInstances.push(instance), objectInstances;

                  case "fill":
                    return this.shapeType !== types_basicShapeType.jv && objectInstances.push({
                        selector: null,
                        properties: {
                            show: this.showFill,
                            fillColor: this.fillColor,
                            transparency: this.shapeTransparency
                        },
                        objectName: options.objectName
                    }), objectInstances;

                  case "rotation":
                    return objectInstances.push({
                        selector: null,
                        properties: {
                            angle: this.angle
                        },
                        objectName: options.objectName
                    }), objectInstances;
                }
                return null;
            }, BasicShape.prototype.onViewModeChanged = function(viewMode) {
                this.updateVisualLinkProps();
            }, BasicShape.prototype.render = function() {
                var data, viewportHeight, viewportWidth, degrees, width, height, attrs, basicShapeType, visualHostServices, displayNameGetter, shapeInfo, _this = this;
                switch (this.selection.html(""), this.shapeType) {
                  case types_basicShapeType.C9:
                    attrs = {
                        x: .01 * (viewportWidth = this.currentViewport.width) + (data = this.data).lineWeight / 2,
                        y: .01 * (viewportHeight = this.currentViewport.height) + data.lineWeight / 2,
                        width: width = .98 * viewportWidth - data.lineWeight,
                        height: height = .98 * viewportHeight - data.lineWeight,
                        rx: data.roundEdge,
                        ry: data.roundEdge
                    }, createShape(data, createSvg(viewportHeight, viewportWidth, this.selection, degrees = this.angle, getScale(width, height, degrees)), "rect", attrs);
                    break;

                  case types_basicShapeType.BG:
                    !function(data, viewportHeight, viewportWidth, selectedElement, degrees) {
                        var attrs = {
                            cx: (viewportWidth / 2).toString(),
                            cy: (viewportHeight / 2).toString(),
                            rx: viewportWidth / 2.2 - data.lineWeight,
                            ry: viewportHeight / 2.2 - data.lineWeight
                        };
                        createShape(data, createSvg(viewportHeight, viewportWidth, selectedElement, degrees, getScale(viewportWidth, viewportHeight, degrees)), "ellipse", attrs);
                    }(this.data, this.currentViewport.height, this.currentViewport.width, this.selection, this.angle);
                    break;

                  case types_basicShapeType.jv:
                    !function(data, viewportHeight, viewportWidth, selectedElement, degrees) {
                        var x1, y1, x2, y2, ratio, width = viewportWidth - 10 - 10, height = viewportHeight - 10 - 10;
                        degrees <= 45 ? (x1 = viewportWidth / 2 + width * (ratio = degrees / 90), y1 = 10, 
                        x2 = viewportWidth / 2 - width * ratio, y2 = viewportHeight - 10) : degrees <= 135 ? (x1 = viewportWidth - 10, 
                        y1 = 10 + height * (ratio = (degrees - 45) / 90), x2 = 10, y2 = viewportHeight - 10 - height * ratio) : degrees <= 225 ? (x1 = viewportWidth - 10 - width * (ratio = (degrees - 135) / 90), 
                        y1 = viewportHeight - 10, x2 = 10 + width * ratio, y2 = 10) : degrees <= 315 ? (x1 = 10, 
                        y1 = viewportHeight - 10 - height * (ratio = (degrees - 225) / 90), x2 = viewportWidth - 10, 
                        y2 = 10 + height * ratio) : degrees <= 360 && (x1 = 10 + width * (ratio = (degrees - 315) / 90), 
                        y1 = 10, x2 = viewportWidth - 10 - width * ratio, y2 = viewportHeight - 10), selectedElement.append("svg").attrs({
                            width: viewportWidth,
                            height: viewportHeight
                        }).append("line").attrs({
                            x1,
                            y1,
                            x2,
                            y2
                        }).styles({
                            "vector-effect": "non-scaling-stroke",
                            "stroke-width": data.lineWeight + "px",
                            "stroke-opacity": (100 - data.lineTransparency) / 100,
                            stroke: data.lineColor
                        });
                    }(this.data, this.currentViewport.height, this.currentViewport.width, this.selection, this.angle);
                    break;

                  case types_basicShapeType.x7:
                    !function(data, viewportHeight, viewportWidth, selectedElement, degrees) {
                        var lineWeight = data.lineWeight, arrowGeometryXPadding = function(viewportWidth, viewportHeight, lineWeight) {
                            var _a = calculateArrowDeltas(viewportWidth, viewportHeight), arrowBaseAngle = Math.atan(_a.deltaY / _a.deltaX), bevelVertexAngle = Math.PI - arrowBaseAngle;
                            return Math.sin(bevelVertexAngle / 2) * lineWeight / Math.sin(arrowBaseAngle / 2);
                        }(viewportWidth, viewportHeight, lineWeight), arrowGeometryYPadding = function(viewportWidth, viewportHeight, lineWeight) {
                            var _a = calculateArrowDeltas(viewportWidth, viewportHeight), arrowVertexAngle = 2 * Math.atan(_a.deltaX / _a.deltaY), bevelVertexAngle = Math.PI - arrowVertexAngle, halfBevelBaseLength = Math.sin(bevelVertexAngle / 2) * lineWeight, bevelHeight = Math.cos(bevelVertexAngle / 2) * lineWeight;
                            return halfBevelBaseLength / Math.tan(arrowVertexAngle / 2) + bevelHeight + 5;
                        }(viewportWidth, viewportHeight, lineWeight), viewportWidthWeight = viewportWidth - arrowGeometryXPadding, viewportHeightWeight = viewportHeight - arrowGeometryYPadding;
                        createPathFromArray(data, [ {
                            x: .05 * viewportWidthWeight,
                            y: .42 * viewportHeightWeight
                        }, {
                            x: .5 * viewportWidthWeight,
                            y: .016 * viewportHeightWeight
                        }, {
                            x: .95 * viewportWidthWeight,
                            y: .42 * viewportHeightWeight
                        }, {
                            x: .764 * viewportWidthWeight,
                            y: .42 * viewportHeightWeight
                        }, {
                            x: .764 * viewportWidthWeight,
                            y: .993 * viewportHeightWeight
                        }, {
                            x: .246 * viewportWidthWeight,
                            y: .993 * viewportHeightWeight
                        }, {
                            x: .246 * viewportWidthWeight,
                            y: .42 * viewportHeightWeight
                        } ], selectedElement, viewportHeight, viewportWidth, degrees, {
                            translateX: arrowGeometryXPadding / 2,
                            translateY: arrowGeometryYPadding / 2
                        });
                    }(this.data, this.currentViewport.height, this.currentViewport.width, this.selection, this.angle);
                    break;

                  case types_basicShapeType.cP:
                    !function(data, viewportHeight, viewportWidth, selectedElement, degrees) {
                        var lineWeight = data.lineWeight;
                        lineWeight > 3 && (lineWeight -= 3);
                        var firstPointX = .15 * (viewportWidth - lineWeight), secondPointY = .15 * (viewportHeight - lineWeight), thirdPointX = .85 * (viewportWidth - lineWeight) < 0 ? .85 * viewportWidth : .85 * (viewportWidth - lineWeight), secondPointX = (firstPointX + thirdPointX) / 2;
                        firstPointX < 10 && (firstPointX = 10), secondPointY < 10 && (secondPointY = 10), 
                        createPathFromArray(data, [ {
                            x: firstPointX,
                            y: viewportHeight - 10 - lineWeight < 0 ? viewportHeight - 10 : viewportHeight - 10 - lineWeight
                        }, {
                            x: secondPointX,
                            y: secondPointY
                        }, {
                            x: thirdPointX,
                            y: viewportHeight - 10 - lineWeight < 0 ? viewportHeight - 10 : viewportHeight - lineWeight - 10
                        } ], selectedElement, viewportHeight, viewportWidth, degrees, {
                            translateX: lineWeight / 2,
                            translateY: lineWeight / 2
                        });
                    }(this.data, this.currentViewport.height, this.currentViewport.width, this.selection, this.angle);
                    break;

                  case types_basicShapeType.yX:
                    !function(data, viewportHeight, viewportWidth, selectedElement, degrees) {
                        var svg = createSvg(viewportHeight, viewportWidth, selectedElement, degrees, getScale(viewportWidth, viewportHeight, degrees));
                        svg.attr("viewBox", "5 5 26 26"), createShape(data, svg, "path", {
                            d: "M30,18.1c0,1.1-0.1,2.2-0.4,3.2s-0.7,2-1.2,2.9s-1.1,1.7-1.9,2.4S24.9,28,24,28.5s-1.8,0.9-2.9,1.2s-2.1,0.4-3.2,0.4 s-2.2-0.1-3.2-0.4s-2-0.7-2.9-1.2s-1.7-1.1-2.4-1.9s-1.4-1.5-1.9-2.4s-0.9-1.8-1.2-2.9S6,19.2,6,18.1s0.1-2.2,0.4-3.2 s0.7-2,1.2-2.9s1.1-1.7,1.9-2.4s1.5-1.4,2.4-1.9s1.8-0.9,2.9-1.2s2.1-0.4,3.2-0.4c1.1,0,2.2,0.1,3.2,0.4s2,0.7,2.9,1.2 s1.7,1.1,2.4,1.9s1.4,1.5,1.9,2.4s0.9,1.8,1.2,2.9S30,17,30,18.1z M7.5,18.1c0,1,0.1,1.9,0.4,2.8s0.6,1.7,1.1,2.5s1,1.5,1.6,2.1 s1.3,1.2,2.1,1.6s1.6,0.8,2.5,1.1s1.8,0.4,2.8,0.4c1,0,1.9-0.1,2.8-0.4s1.7-0.6,2.5-1.1s1.5-1,2.1-1.6s1.2-1.3,1.6-2.1 s0.8-1.6,1.1-2.5s0.4-1.8,0.4-2.8s-0.1-1.9-0.4-2.8s-0.6-1.7-1.1-2.5s-1-1.5-1.6-2.1S24,9.5,23.3,9S21.6,8.2,20.8,8 S18.9,7.6,18,7.6S16.1,7.7,15.2,8S13.5,8.6,12.7,9s-1.5,1-2.1,1.6S9.4,12,8.9,12.8s-0.8,1.6-1.1,2.5S7.5,17.1,7.5,18.1z M19.2,24.3 l-1.1,1.1l-7.3-7.3l7.3-7.3l1.1,1.1l-5.5,5.5l11.7,0v1.5l-11.7,0L19.2,24.3z"
                        });
                    }(this.data, this.currentViewport.height, this.currentViewport.width, this.selection, this.angle);
                }
                this.selection.on("click", function() {
                    var event = d3.event, selectingArgs = {
                        type: 0,
                        visualObjects: [ {
                            objectName: "basicShape",
                            selectorsByColumn: {}
                        } ],
                        isCtrlOrMetaKey: browserUtils.M.isCtrlOrMeta(event),
                        isShiftKey: event.shiftKey,
                        position: (0, interactivityUtils.bt)()
                    };
                    _this.hostServices.onSelecting(selectingArgs), 1 === selectingArgs.action && event.stopPropagation();
                }), this.updateVisualLinkProps(), basicShapeType = this.shapeType, visualHostServices = this.hostServices, 
                (shapeInfo = types_basicShapeType.dt.members().filter(function(x) {
                    return x.value === basicShapeType;
                })).length > 0 && (displayNameGetter = shapeInfo[0].displayName), visualHostServices.setAriaMetadata({
                    subtitleDisplayNameGetter: displayNameGetter
                });
            }, BasicShape.prototype.updateVisualLinkProps = function() {
                var visualLinkProps = this.hostServices.getVisualLinkProperties();
                visualLinkProps && this.selection.style("cursor", visualLinkProps.hasVisualLink ? "pointer" : "inherit");
            }, BasicShape.prototype.getDefaultsForShape = function(shapeType) {
                var defaultData = {
                    angle: 0,
                    fillColor: common_colorHelper.v.getThemeColor(this.style, "backgroundLight"),
                    lineColor: common_colorHelper.v.getDataColorByIndex(this.style, 0, colorHelper.fA),
                    lineTransparency: 0,
                    lineWeight: 3,
                    roundEdge: 0,
                    shapeTransparency: 0,
                    shapeType: DefaultShape,
                    showFill: !0
                };
                if (shapeType === types_basicShapeType.yX) {
                    var arrowButtonDefaults = _.clone(defaultData);
                    return arrowButtonDefaults.lineWeight = 0, arrowButtonDefaults;
                }
                return defaultData;
            }, BasicShape;
        }();
    }
} ]);