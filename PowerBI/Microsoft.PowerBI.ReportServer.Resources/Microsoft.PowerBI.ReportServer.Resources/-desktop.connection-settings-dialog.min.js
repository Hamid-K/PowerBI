"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "connection-settings-dialog" ], {
    53659: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ConnectionSettingsDialogModule: function() {
                return ConnectionSettingsDialogModule;
            }
        });
        var fesm2022_forms = __webpack_require__(17174), common = __webpack_require__(77476), localization_module = __webpack_require__(79061), dialogs_parts_module = __webpack_require__(96327), dialogs_module = __webpack_require__(76966), connection_settings = __webpack_require__(19645), tri_link = __webpack_require__(16149), tri_radio_button = __webpack_require__(95228), Telemetry = __webpack_require__(21617), template_dialog_payload_service = __webpack_require__(67489), telemetryHelpers = __webpack_require__(41114), ConnectSettingsDialogResult = telemetryHelpers.cx["PBI.ConnectionSettings.DialogResult"] = (0, 
        telemetryHelpers.b1)("PBI.ConnectionSettings.DialogResult"), core = __webpack_require__(50423), template_dialog_component = __webpack_require__(96777), tri_link_component = __webpack_require__(65e3), tri_radio_button_component = __webpack_require__(37350), tri_radio_group_component = __webpack_require__(89330), localize_pipe = __webpack_require__(85102);
        function ConnectionSettingsDialogComponent_p_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "p"), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](ctx_r0.description);
            }
        }
        function ConnectionSettingsDialogComponent_tri_radio_button_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-radio-button", 4), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var option_r3 = ctx.$implicit;
                core["\u0275\u0275property"]("disabled", !!option_r3.disabled)("value", option_r3.value), 
                core["\u0275\u0275attribute"]("role", "radio"), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](2, 4, option_r3.displayValueLocalizationKey), " ");
            }
        }
        function ConnectionSettingsDialogComponent_tri_link_4_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-link", 5), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var link_r4 = ctx.ngIf;
                core["\u0275\u0275property"]("href", link_r4.url)("external", !0)("title", link_r4.localizedText), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", link_r4.localizedText, " ");
            }
        }
        var ConnectionSettingsDialogComponent = function() {
            function ConnectionSettingsDialogComponent(templateDialogPayload, telemetryService) {
                this.templateDialogPayload = templateDialogPayload, this.telemetryService = telemetryService;
            }
            return ConnectionSettingsDialogComponent.prototype.ngOnInit = function() {
                var _a, _this = this;
                this.options = this.templateDialogPayload.input.options, this.radioValue = (null === (_a = this.options.find(function(option) {
                    return option.isSelected;
                })) || void 0 === _a ? void 0 : _a.value) || this.options[0].value, this.learnMoreLink = this.templateDialogPayload.input.learnMoreLink, 
                this.description = this.templateDialogPayload.input.description, this.templateDialogPayload.onOkButtonClick = function() {
                    return _this.ok();
                }, this.templateDialogPayload.onCancelButtonClick = function() {
                    return _this.cancel();
                };
            }, ConnectionSettingsDialogComponent.prototype.ok = function() {
                return this.telemetryService.logEvent(ConnectSettingsDialogResult, {
                    isCancelled: !1,
                    selection: this.radioValue
                }), Promise.resolve(this.radioValue);
            }, ConnectionSettingsDialogComponent.prototype.cancel = function() {
                return this.telemetryService.logEvent(ConnectSettingsDialogResult, {
                    isCancelled: !0,
                    selection: void 0
                }), Promise.resolve(void 0);
            }, ConnectionSettingsDialogComponent.prototype.onSelectionChanged = function(value) {
                this.radioValue = value;
            }, ConnectionSettingsDialogComponent.\u0275fac = function(t) {
                return new (t || ConnectionSettingsDialogComponent)(core["\u0275\u0275directiveInject"](template_dialog_payload_service.x), core["\u0275\u0275directiveInject"](Telemetry.y0));
            }, ConnectionSettingsDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ConnectionSettingsDialogComponent,
                selectors: [ [ "connection-settings-dialog" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x ]) ],
                decls: 5,
                vars: 5,
                consts: [ [ 4, "ngIf" ], [ "name", "connectionSettings", 3, "ngModel", "ngModelChange" ], [ "type", "radio", 3, "disabled", "value", 4, "ngFor", "ngForOf" ], [ "target", "_blank", 3, "href", "external", "title", 4, "ngIf" ], [ "type", "radio", 3, "disabled", "value" ], [ "target", "_blank", 3, "href", "external", "title" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog"), core["\u0275\u0275template"](1, ConnectionSettingsDialogComponent_p_1_Template, 2, 1, "p", 0), 
                    core["\u0275\u0275elementStart"](2, "tri-radio-group", 1), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                        return ctx.onSelectionChanged($event);
                    }), core["\u0275\u0275template"](3, ConnectionSettingsDialogComponent_tri_radio_button_3_Template, 3, 6, "tri-radio-button", 2), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](4, ConnectionSettingsDialogComponent_tri_link_4_Template, 2, 4, "tri-link", 3), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.description), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngModel", ctx.radioValue), 
                    core["\u0275\u0275attribute"]("role", "radiogroup"), core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275property"]("ngForOf", ctx.options), core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275property"]("ngIf", ctx.learnMoreLink));
                },
                dependencies: [ fesm2022_forms.JJ, fesm2022_forms.On, common.NgForOf, common.NgIf, template_dialog_component.J, tri_link_component.v, tri_radio_button_component.Y, tri_radio_group_component.Z, localize_pipe.F ],
                styles: [ "tri-link[_ngcontent-%COMP%]{display:block;margin-top:12px}" ]
            }), ConnectionSettingsDialogComponent;
        }(), ConnectionSettingsDialogModule = function() {
            function ConnectionSettingsDialogModule() {}
            return ConnectionSettingsDialogModule.\u0275fac = function(t) {
                return new (t || ConnectionSettingsDialogModule);
            }, ConnectionSettingsDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ConnectionSettingsDialogModule
            }), ConnectionSettingsDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ fesm2022_forms.u5, common.CommonModule, dialogs_parts_module.F, localization_module.v, dialogs_module.c.withManifest([ {
                    componentIdentifier: connection_settings.C,
                    componentType: ConnectionSettingsDialogComponent
                } ]), tri_link.m, tri_radio_button.W ]
            }), ConnectionSettingsDialogModule;
        }();
    }
} ]);