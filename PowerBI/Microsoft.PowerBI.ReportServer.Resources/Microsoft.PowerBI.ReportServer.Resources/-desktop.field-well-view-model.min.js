"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "field-well-view-model" ], {
    55201: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        function comparableSequenceEqual(array1, array2) {
            if (!array1 && !array2) return !0;
            if (!!array1 != !!array2 || array1.length !== array2.length) return !1;
            for (var i = 0, len = array1.length; i < len; i++) if (!array1[i].equals(array2[i])) return !1;
            return !0;
        }
        __webpack_require__.d(__webpack_exports__, {
            L: function() {
                return comparableSequenceEqual;
            }
        });
    },
    89839: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            l: function() {
                return updateSelectedMenuItems;
            }
        });
        var _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62458), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76001), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternToSQExprConverter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80366), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94419);
        function updateSelectedMenuItems(property, visual) {
            var propertyAggregate = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternToSQExprConverter__WEBPACK_IMPORTED_MODULE_0__._L)((0, 
            _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternBuilder__WEBPACK_IMPORTED_MODULE_1__.Q)(property.expr)), hasAggregate = void 0 !== propertyAggregate, menuItemCollection = property.interactivityOptions.dropDownItems;
            if (menuItemCollection) for (var _i = 0, _a = menuItemCollection.items; _i < _a.length; _i++) {
                var menuItem = _a[_i], fieldWellMenuItemOption = menuItem.key;
                if (fieldWellMenuItemOption) switch (fieldWellMenuItemOption.action) {
                  case 4:
                    menuItem.checked = hasAggregate && fieldWellMenuItemOption.aggregate === propertyAggregate;
                    break;

                  case 2:
                    menuItem.checked = !hasAggregate;
                    break;

                  case 8:
                    var propertyRole = visual.config.singleVisual.query.projections[property.role];
                    menuItem.checked = !(!propertyRole || !propertyRole.showAll);
                    break;

                  case 128:
                    menuItem.checked = isVariationChecked(property, menuItem.text);
                    break;

                  case 16:
                    for (var _b = 0, _c = menuItem.children; _b < _c.length; _b++) {
                        var child = _c[_b];
                        child.checked = isShowValueAsChecked(property, child.key.showValueAs);
                    }
                    break;

                  case 2048:
                    menuItem.checked = !1;
                    break;

                  default:
                    menuItem.checked = void 0;
                }
            }
        }
        function isVariationChecked(property, currentLabel) {
            var hierarchyExpr = function(property) {
                if (!_.isEmpty(property.hierarchyLevels)) {
                    var hierarchyLevelExpr_1 = property.hierarchyLevels[0].expr;
                    return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assert(function() {
                        return hierarchyLevelExpr_1.arg instanceof _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_3__.jE;
                    }, "hierarchyLevelExpr.arg should be instanceof powerbi.data.SQHierarchyExpr"), 
                    hierarchyLevelExpr_1.arg;
                }
            }(property);
            if (hierarchyExpr) return hierarchyExpr.hierarchy === currentLabel;
            var fieldExpr = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternBuilder__WEBPACK_IMPORTED_MODULE_1__.Q)(property.expr);
            return !!fieldExpr && (fieldExpr.columnAggr ? fieldExpr.columnAggr.name === currentLabel : fieldExpr.groupingColumnAggr ? fieldExpr.groupingColumnAggr.name === currentLabel : fieldExpr.column ? fieldExpr.column.name === currentLabel : !!fieldExpr.groupingColumn && fieldExpr.groupingColumn.name === currentLabel);
        }
        function isShowValueAsChecked(property, showValueAs) {
            var fieldExprPattern = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternBuilder__WEBPACK_IMPORTED_MODULE_1__.Q)(property.expr);
            if (!fieldExprPattern || !showValueAs) return !1;
            switch (showValueAs.kind) {
              case void 0:
                return !fieldExprPattern.percentOfGrandTotal && !fieldExprPattern.percentOfRoleTotal;

              case 0:
                return !!fieldExprPattern.percentOfGrandTotal;

              case 1:
                var percentRoleTotal_1 = showValueAs;
                return !(!fieldExprPattern.percentOfRoleTotal || !_.every(fieldExprPattern.percentOfRoleTotal.roles, function(role) {
                    return _.includes(percentRoleTotal_1.roles, role);
                }));

              default:
                return !1;
            }
        }
    },
    42611: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            FieldWellViewModelModule: function() {
                return FieldWellViewModelModule;
            }
        });
        var field_well_view_model = __webpack_require__(84431), filterUtils = __webpack_require__(42614), visualContainerUtils = __webpack_require__(60661), debug = __webpack_require__(62458), sqExprStaticMembers = __webpack_require__(74082), sqExprUtils = __webpack_require__(45334), errorDetailsUtility = __webpack_require__(18503), property_reference_parser = __webpack_require__(6911), dsrClientError = __webpack_require__(42649), core = __webpack_require__(50423), sq_aggregation_operations_service = __webpack_require__(28199), feature_switch_service = __webpack_require__(9380), visual_plugin_operations_service = __webpack_require__(66977), running_visual_service = __webpack_require__(8082), visual_calc_eager_service = __webpack_require__(88409), localization_service = __webpack_require__(65181), FieldWellPropertyViewModelService = function() {
            function FieldWellPropertyViewModelService(aggrOps, featureSwitchService, pluginOps, visualCalcEagerService, localizationService, runningVisualService) {
                this.aggrOps = aggrOps, this.featureSwitchService = featureSwitchService, this.pluginOps = pluginOps, 
                this.visualCalcEagerService = visualCalcEagerService, this.localizationService = localizationService, 
                this.runningVisualService = runningVisualService;
            }
            return FieldWellPropertyViewModelService.prototype.createProperty = function(args, visualPluginService) {
                var validity = this.computeValidity(args), capabilities = args.visual && (0, visualContainerUtils.cj)(args.visual, visualPluginService), children = this.createChildFieldWellProperties(args, capabilities), isFieldParameter = args.group.isFieldParameter, supportedOperations = this.computeSupportedOperations(args, capabilities), displayName = this.computeDisplayName(args, capabilities), pbiStyle = this.computePbiStyle(args);
                return new field_well_view_model._d(args.group.expr, args.roleName, args.group.selectQueryIndex, args.group.selectQueryIndex + (args.group.children ? args.group.children.length - 1 : 0), validity.valid, new field_well_view_model.DR(displayName, this.getTooltipTitleForFieldWellProperty(args.group.expr, args.schema, validity, capabilities, args.displayNameService), this.getTooltipDescriptionForFieldWellProperty(args.group.expr, args.schema, validity, args.displayNameService), this.getGlyphForFieldWellProperty(args.group.expr, validity), pbiStyle), new field_well_view_model.Ct(null, !1, _.isEmpty(children) && !isFieldParameter), children, args.objectRepetitions, args.visualContainerName, args.visualType, args.isHiddenInVisual, supportedOperations);
            }, FieldWellPropertyViewModelService.prototype.createChildFieldWellProperties = function(args, capabilities) {
                var children = [];
                if (args.group.children) for (var i = 0, len = args.group.children.length; i < len; i++) {
                    var errors = sqExprUtils.m.validate(args.group.children[i], args.schema, this.aggrOps), validity = {
                        valid: _.isEmpty(errors),
                        errorsText: this.localizationService.get("Invalid_FieldWellProperty_Tooltip")
                    }, expr = args.group.children[i], tooltipTitle = this.getTooltipTitleForFieldWellHierarchyLevel(expr, args.schema, validity, capabilities, args.displayNameService);
                    children.push(new field_well_view_model.aT(expr, args.displayNameService.getDisplayName(expr, args.schema, capabilities), tooltipTitle));
                }
                return children;
            }, FieldWellPropertyViewModelService.prototype.getTooltipTitleForFieldWellProperty = function(expr, schema, validity, capabilities, displayName) {
                var errorsText = validity.errorsText;
                return validity.valid ? displayName.getQualifiedDisplayName(expr, schema, capabilities, {
                    includeDefaultAggregate: !0
                }) : errorsText;
            }, FieldWellPropertyViewModelService.prototype.getTooltipTitleForFieldWellHierarchyLevel = function(expr, schema, validity, capabilities, displayName) {
                var errorsText = validity.errorsText;
                return validity.valid ? displayName.getQualifiedDisplayName(expr, schema, capabilities, {
                    includeDefaultAggregate: !0,
                    includeVariationSource: !0,
                    includeHierarchyName: !0
                }) : errorsText;
            }, FieldWellPropertyViewModelService.prototype.getTooltipDescriptionForFieldWellProperty = function(expr, schema, validity, displayName) {
                if (validity.valid) return displayName.getDescription(expr, schema);
            }, FieldWellPropertyViewModelService.prototype.getGlyphForFieldWellProperty = function(expr, validity) {
                if (validity.valid && (0, sqExprStaticMembers.tO)(expr)) return "pbi-glyph-trending";
            }, FieldWellPropertyViewModelService.prototype.computeSupportedOperations = function(args, capabilities) {
                var supportedOperations;
                if (args.group.isFieldParameter) supportedOperations = 50294779; else {
                    var schema = args.schema, expr = void 0;
                    (0, sqExprStaticMembers.iV)(args.group.expr) && (expr = args.group.expr.arg.getTargetColumnRef(schema)), 
                    expr || (expr = args.group.expr), supportedOperations = sqExprUtils.m.shouldUseAsFieldParameter(this.featureSwitchService.featureSwitches.fieldParametersAuthoring, schema, expr, this.featureSwitchService.featureSwitches.fieldParameterDynamicSlicer || !filterUtils.l.supportsFilterOutput(capabilities), this.pluginOps.isAnalysisVisual(args.visualType)) ? 58720255 : 41943039;
                }
                return supportedOperations;
            }, FieldWellPropertyViewModelService.prototype.computeDisplayName = function(args, capabilities) {
                var useNativeReferenceNames = args.useNativeReferenceNames, displayNameService = args.displayNameService, queryName = args.queryName, singleVisual = args.visual && args.visual.config.singleVisual;
                if (debug.fF.assert(function() {
                    return !!singleVisual;
                }, "single visual should be defined at this point when computing the display name"), 
                useNativeReferenceNames) {
                    var query = null == singleVisual ? void 0 : singleVisual.query;
                    if (!query) return void debug.fF.assertFail("query should be defined at this point when computing the display name");
                    var namedSQExpr_1 = query.defn.select().withName(queryName);
                    return debug.fF.assert(function() {
                        return !!namedSQExpr_1.nativeReferenceName;
                    }, "Native Reference Name should be defined when computing the display name"), namedSQExpr_1.nativeReferenceName;
                }
                return displayNameService.getDisplayName(args.group.expr, args.schema, capabilities, queryName, null == singleVisual ? void 0 : singleVisual.columnProperties);
            }, FieldWellPropertyViewModelService.prototype.computePbiStyle = function(args) {
                var _a, _b, currentQueryName = null === (_a = this.visualCalcEagerService.getCurrentEditingContext()) || void 0 === _a ? void 0 : _a.queryName;
                if (currentQueryName && args.queryName === currentQueryName && 16 === (null === (_b = args.visual) || void 0 === _b ? void 0 : _b.visibility)) return {
                    "font-style": "italic"
                };
            }, FieldWellPropertyViewModelService.prototype.computeValidity = function(args) {
                var _a, errors = sqExprUtils.m.validate(args.group.expr, args.schema, this.aggrOps), valid = _.isEmpty(errors);
                if (!valid) return {
                    valid: !1,
                    errorsText: this.localizationService.get("Invalid_FieldWellProperty_Tooltip")
                };
                if (args.group.children) for (var i = 0, len = args.group.children.length; valid && i < len; i++) {
                    var errors_1 = sqExprUtils.m.validate(args.group.children[i], args.schema, this.aggrOps);
                    if (!(valid = valid && _.isEmpty(errors_1))) return {
                        valid: !1,
                        errorsText: this.localizationService.get("Invalid_FieldWellProperty_Tooltip")
                    };
                }
                var runningVisual = this.runningVisualService.getVisual(args.visual), errorInfo = null == runningVisual ? void 0 : runningVisual.getErrorInfo();
                if (_.isEmpty(errorInfo) || _.isEmpty(null == errorInfo ? void 0 : errorInfo.additionalErrorMessages)) return {
                    valid: !0
                };
                for (var _i = 0, additionalErrorMessages_1 = errorInfo.additionalErrorMessages; _i < additionalErrorMessages_1.length; _i++) {
                    var additionalErrorMessage = additionalErrorMessages_1[_i], affectedItems = additionalErrorMessage.AffectedItems, errorCode = additionalErrorMessage.Code;
                    switch (errorCode) {
                      case dsrClientError.dd.NativeVisualCalculationError:
                      case dsrClientError.dd.NativeVisualCalculationUnexpectedEndOfUserInput:
                      case dsrClientError.dd.InvalidExtensionDax_UnclosedBracketIdentifier:
                      case dsrClientError.dd.InvalidExtensionDax_UnexpectedCloseParenthesis:
                      case dsrClientError.dd.QueryExtensionMeasureUnexpectedEndOfUserInput:
                      case dsrClientError.dd.QueryExtensionMeasureError:
                      case dsrClientError.dd.ExtensionMeasureEmptyExpression:
                      case dsrClientError.dd.ExtensionMeasureNameNotUniqueModel:
                      case dsrClientError.dd.ExtensionMeasureNameNotUnique:
                      case dsrClientError.dd.InvalidExtensionDax_UnclosedMultiLineComment:
                      case dsrClientError.dd.InvalidExtensionDax_UnclosedParenthesis:
                      case dsrClientError.dd.InvalidExtensionDax_UnclosedQuoteIdentifier:
                      case dsrClientError.dd.InvalidExtensionDax_UnclosedStringLiteral:
                        for (var _b = 0, affectedItems_1 = affectedItems; _b < affectedItems_1.length; _b++) {
                            var affectedItem = affectedItems_1[_b], parserResult = {};
                            if (property_reference_parser.O(affectedItem, parserResult)) {
                                var propertyName = parserResult.propertyName, conceptualProperty = args.group.expr.getConceptualProperty(args.schema);
                                if ((null == conceptualProperty ? void 0 : conceptualProperty.measure) && (null == conceptualProperty ? void 0 : conceptualProperty.name) === propertyName) return {
                                    valid: !1,
                                    errorsText: (0, errorDetailsUtility.UX)(errorInfo.details, "").message
                                };
                            }
                            var visualQuery = args.visual.config.singleVisual.query, nativeReferenceName = null === (_a = null == visualQuery ? void 0 : visualQuery.defn.select().withName(args.queryName)) || void 0 === _a ? void 0 : _a.nativeReferenceName;
                            if (!_.isEmpty(nativeReferenceName) && affectedItem === nativeReferenceName) return {
                                valid: !1,
                                errorsText: (0, errorDetailsUtility.UX)(errorInfo.details, "").message
                            };
                        }

                      case dsrClientError.dd.ComplexSlicerNotAllowedWithMeasures:
                      case dsrClientError.dd.ComplexHighlightsNotAllowed:
                      case dsrClientError.dd.ExclusivePercentileOutOfRange:
                      case dsrClientError.dd.InvalidDataShapeNoOutputData:
                      case dsrClientError.dd.InvalidFilterComparisonIncompatibleExpressions:
                      case dsrClientError.dd.InvalidFilterConditionIncompatibleDataType:
                      case dsrClientError.dd.InvalidUnconstrainedJoin:
                      case dsrClientError.dd.ModelUnavailable:
                      case dsrClientError.dd.OverlappingKeysOnOppositeHierarchies:
                      case dsrClientError.dd.rsQueryMemoryLimitExceeded:
                      case dsrClientError.dd.rsQueryTimeoutExceeded:
                      case dsrClientError.dd.CouldNotResolveModelReferencesInSemanticQuery:
                      case dsrClientError.dd.rsAccessDenied:
                      case dsrClientError.dd.NoUniqueKeyForDetailTable:
                      case dsrClientError.dd.IsRelatedToManyNotSupportedForDetailTable:
                      case dsrClientError.dd.ModelMeasuresNotSupportedForDetailTable:
                      case dsrClientError.dd.UnsupportedDateTimeLiteral:
                      case dsrClientError.dd.CouldNotResolveModelReferencesInQueryExtensionSchema:
                      case dsrClientError.dd.UnsupportedDataSourceVariables:
                      case dsrClientError.dd.DataExtensionMissingResultSet:
                      case dsrClientError.dd.ProxyModelChainLimitExceeded:
                      case dsrClientError.dd.AA_PowerBIScriptPayloadTooLargeError:
                      case dsrClientError.dd.AA_PowerBIScriptResultTooLargeError:
                      case dsrClientError.dd.AA_PowerBIScriptReturnedNoImageError:
                      case dsrClientError.dd.AA_PowerBIScriptRuntimeErrorError:
                      case dsrClientError.dd.AA_PowerBIScriptTimeoutError:
                      case dsrClientError.dd.AA_PowerBIRequestsQueueOverflowError:
                      case dsrClientError.dd.AA_PowerBIScriptRuntimeMaxMemoryError:
                      case dsrClientError.dd.AA_PowerBIScriptRuntimeMaxDiskIOError:
                      case dsrClientError.dd.AA_PowerBIScriptMissingDependencyError:
                      case dsrClientError.dd.AA_PowerBIScriptSpecificPackageWithMissingDependencyError:
                      case dsrClientError.dd.AA_PowerBIScriptSpecificPackageMissingSpecificDependencyError:
                      case dsrClientError.dd.AA_PowerBIScriptMissingSpecificPackageError:
                      case dsrClientError.dd.FabricThrottled:
                      case dsrClientError.dd.CannotUseMultiColumnFilteringWithMappedColumns:
                      case dsrClientError.dd.DifferentMappingsWithinSubqueries:
                      case dsrClientError.dd.FilterIncompatibleWithParameter:
                      case dsrClientError.dd.FoundMultipleTargetsWithAtLeastOneMapping:
                      case dsrClientError.dd.FoundParameterMappingOnUnsupportedFilter:
                      case dsrClientError.dd.InTableConditionNotSupportedWithMappedParameters:
                      case dsrClientError.dd.InvalidMappedParameterValueExpression:
                      case dsrClientError.dd.MappedTargetMustMatchMappedCondition:
                      case dsrClientError.dd.MixOfAssignedAndUnassignedColumnsWithinORExpression:
                      case dsrClientError.dd.MultipleParameterAssignmentsWithinORUnsupported:
                      case dsrClientError.dd.MultipleParameterMappingsUnsupported:
                      case dsrClientError.dd.ParameterMappingFilterConflict:
                      case dsrClientError.dd.ParameterMappingsFoundWithinFilteredEvalExpressionFilter:
                      case dsrClientError.dd.ParameterMappingsNotSupportedOnHighlights:
                      case dsrClientError.dd.SingleValueParameterWithMultipleValues:
                        continue;

                      default:
                        debug.fF.assertNever(errorCode);
                        continue;
                    }
                }
                return {
                    valid: !0
                };
            }, FieldWellPropertyViewModelService.\u0275fac = function(t) {
                return new (t || FieldWellPropertyViewModelService)(core["\u0275\u0275inject"](sq_aggregation_operations_service.C), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](visual_plugin_operations_service.f), core["\u0275\u0275inject"](visual_calc_eager_service.w), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](running_visual_service.s));
            }, FieldWellPropertyViewModelService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FieldWellPropertyViewModelService,
                factory: FieldWellPropertyViewModelService.\u0275fac
            }), FieldWellPropertyViewModelService;
        }(), tslib_es6 = __webpack_require__(81337), field_well_view_model_operations_util = __webpack_require__(89839), promiseFactory = __webpack_require__(14463), visualContainer1 = __webpack_require__(15580), drillUtils = __webpack_require__(44257), fieldWellMenuViewModelFactory = __webpack_require__(67290), viewModelFactoryEx = __webpack_require__(20590), visualObjectRepetition = __webpack_require__(40812), arrayExtensions = __webpack_require__(50550), enums = __webpack_require__(46135), sqExprGroupUtils = __webpack_require__(96653), geo_tagging_analyzer_service = __webpack_require__(77435), exploration_capabilities_service = __webpack_require__(48145), FieldWellViewModelService = function() {
            function FieldWellViewModelService(aggrOps, featureSwitch, geoTagging, localizationService, promiseFactory, fieldWellPropertyViewModelFactory, visualCalcEagerService, explorationCapabilitiesService) {
                this.aggrOps = aggrOps, this.featureSwitch = featureSwitch, this.geoTagging = geoTagging, 
                this.localizationService = localizationService, this.promiseFactory = promiseFactory, 
                this.fieldWellPropertyViewModelFactory = fieldWellPropertyViewModelFactory, this.visualCalcEagerService = visualCalcEagerService, 
                this.explorationCapabilitiesService = explorationCapabilitiesService;
            }
            return FieldWellViewModelService.prototype.createBuckets = function(runningVisual, visual, schema, groupingDesign, showValueAs, visualPluginService, displayNameService, extensions, disableHierarchyLevelGrouping, useNativeReferenceNames, allowReplaceInMultiItemMode, overrideSingleBucketForAutoVisual) {
                var _this = this;
                void 0 === allowReplaceInMultiItemMode && (allowReplaceInMultiItemMode = !1), void 0 === overrideSingleBucketForAutoVisual && (overrideSingleBucketForAutoVisual = !1);
                var defer = this.promiseFactory.defer(), dataRoles = (0, visualContainerUtils.d$)(visual, visualPluginService);
                return _.isEmpty(dataRoles) ? defer.resolve([]) : (null != dataRoles[0].displayOrder && (debug.fF.assert(function() {
                    return dataRoles.every(function(dataRole) {
                        return null != dataRole.displayOrder;
                    });
                }, "Not all data roles have `displayOrder`"), dataRoles = _.sortBy(dataRoles, function(dataRole) {
                    return dataRole.displayOrder;
                })), (0, visualContainer1.y5)(runningVisual, this.promiseFactory).then(function(objectRepetitions) {
                    return _this.createBucketsCore(visual, schema, dataRoles, objectRepetitions, defer, groupingDesign, showValueAs, visualPluginService, displayNameService, extensions, disableHierarchyLevelGrouping, useNativeReferenceNames, allowReplaceInMultiItemMode);
                }, function(reason) {
                    return _this.createBucketsCore(visual, schema, dataRoles, [], defer, groupingDesign, showValueAs, visualPluginService, displayNameService, extensions, disableHierarchyLevelGrouping, useNativeReferenceNames, allowReplaceInMultiItemMode);
                }).then(function(buckets) {
                    if ((0, visualContainerUtils.II)(visual) && !overrideSingleBucketForAutoVisual) {
                        var mergedBuckets = [ new field_well_view_model.OB(void 0, _this.localizationService.get("Data"), _.flatten(_.map(buckets, function(b) {
                            return b.properties.forEach(function(p) {
                                return p.isInsideAutoVisualBucket = !0;
                            }), b.properties;
                        })), !0) ];
                        defer.resolve(mergedBuckets);
                    } else defer.resolve(buckets);
                })), defer;
            }, FieldWellViewModelService.prototype.createEmptyBuckets = function(dataRoles, extensions) {
                if (!dataRoles) return [];
                for (var buckets = [], _i = 0, dataRoles_1 = dataRoles; _i < dataRoles_1.length; _i++) {
                    var dataRole = dataRoles_1[_i];
                    this.shouldCreateBucketForRole(dataRole) && this.shouldCreateBucketForRoleFromExtensions(dataRole, extensions) && buckets.push(new field_well_view_model.OB(dataRole.name, dataRole.displayName ? (0, 
                    viewModelFactoryEx.Gf)(dataRole.displayName, this.localizationService) : dataRole.name, [], !1, (0, 
                    viewModelFactoryEx.Gf)(dataRole.description, this.localizationService)));
                }
                return buckets;
            }, FieldWellViewModelService.prototype.createBucketsCore = function(visual, schema, dataRoles, objectRepetitions, defer, groupingDesign, showValueAs, visualPluginService, displayNameService, extensions, disableHierarchyLevelGrouping, useNativeReferenceNames, allowReplaceInMultiItemMode) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var buckets, _i, buckets_1, bucket, _a, extensions_1;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            if (buckets = this.createEmptyBuckets(dataRoles, extensions), objectRepetitions = objectRepetitions || [], 
                            !_.isEmpty(extensions)) for (_i = 0, buckets_1 = buckets; _i < buckets_1.length; _i++) for (bucket = buckets_1[_i], 
                            _a = 0, extensions_1 = extensions; _a < extensions_1.length; _a++) extensions_1[_a].onBucketCreated(bucket, visual, schema, groupingDesign, showValueAs, visualPluginService, this.localizationService);
                            return [ 4, this.populateBuckets(buckets, visual, objectRepetitions, schema, dataRoles, groupingDesign, showValueAs, visualPluginService, displayNameService, disableHierarchyLevelGrouping, useNativeReferenceNames, allowReplaceInMultiItemMode) ];

                          case 1:
                            return _b.sent(), [ 2, buckets ];
                        }
                    });
                });
            }, FieldWellViewModelService.prototype.shouldCreateBucketForRole = function(dataRole) {
                debug.fF.assertValue(dataRole, "dataRole");
                var kind = dataRole.kind;
                return kind === enums.DW.Measure || kind === enums.DW.Grouping || kind === enums.DW.GroupingOrMeasure;
            }, FieldWellViewModelService.prototype.shouldCreateBucketForRoleFromExtensions = function(dataRole, extensions) {
                if (!_.isEmpty(extensions)) for (var _i = 0, extensions_2 = extensions; _i < extensions_2.length; _i++) if (!extensions_2[_i].shouldCreateBucketForRole(dataRole)) return !1;
                return !0;
            }, FieldWellViewModelService.prototype.populateBuckets = function(buckets, visual, objectRepetitions, schema, dataRoles, groupingDesign, showValueAs, visualPluginService, displayNameService, disableHierarchyLevelGrouping, useNativeReferenceNames, allowReplaceInMultiItemMode) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var query, projections, roleNamesToBuckets, capabilities, repetitionsMetadata, roleName, bucket, exprs, groups, _loop_1, this_1, _i, groups_1;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        if (!(query = visual.config.singleVisual.query) || !query.defn) return [ 2 ];
                        for (roleName in projections = query.projections, roleNamesToBuckets = this.getRoleNamesToBuckets(buckets), 
                        capabilities = visualPluginService.capabilities(visual.config.singleVisual.visualType), 
                        repetitionsMetadata = (0, visualObjectRepetition.sd)(objectRepetitions, capabilities.objects), 
                        projections) if (bucket = roleNamesToBuckets[roleName]) for (exprs = this.featureSwitch.featureSwitches && this.featureSwitch.featureSwitches.fieldParameters ? query.tryGetFieldExprs(roleName) : query.tryGetExprs(roleName), 
                        groups = (0, sqExprGroupUtils.q)(schema, exprs, {
                            disableHierarchyLevelGrouping,
                            useNativeReferenceNames
                        }), _loop_1 = function(group) {
                            var queryName = visual.config.singleVisual.query.defn.selectNameOf(group.expr), matchedRepetitions = [], isHidden = this_1.featureSwitch.featureSwitches && this_1.featureSwitch.featureSwitches.fieldParameters ? null === (_a = _.find(exprs, function(expr) {
                                return expr.queryName === queryName;
                            })) || void 0 === _a ? void 0 : _a.isHidden : void 0, conditionalWebURLEnabled = this_1.featureSwitch.featureSwitches && this_1.featureSwitch.featureSwitches.conditionalTablixWebURL;
                            _.isEmpty(repetitionsMetadata) || _.isEmpty(queryName) || group.children || (matchedRepetitions = _.filter(repetitionsMetadata, function(repetition) {
                                var misc = repetition && repetition.propertyDescriptor && repetition.propertyDescriptor.type.misc, repetitionType = repetition && repetition.propertyDescriptor && repetition.propertyDescriptor.type;
                                return repetition && repetition.selector && repetition.selector.metadata === queryName && repetition.propertyDescriptor && repetitionType && (repetitionType.fill || repetitionType.dataBars || repetitionType.icon || misc && misc.webUrl && conditionalWebURLEnabled);
                            })), bucket.properties.push(this_1.fieldWellPropertyViewModelFactory.createProperty({
                                group,
                                schema,
                                displayNameService,
                                roleName,
                                visual,
                                objectRepetitions: matchedRepetitions,
                                queryName,
                                visualContainerName: visual.name,
                                visualType: visual.config.singleVisual.visualType,
                                useNativeReferenceNames,
                                isHiddenInVisual: isHidden
                            }, visualPluginService));
                        }, this_1 = this, _i = 0, groups_1 = groups; _i < groups_1.length; _i++) _loop_1(groups_1[_i]);
                        return this.updateBucketCardinality(buckets, visual, visualPluginService, allowReplaceInMultiItemMode), 
                        this.createDropDownItems(buckets, visual, schema, dataRoles, groupingDesign, showValueAs), 
                        [ 2 ];
                    });
                });
            }, FieldWellViewModelService.prototype.createDropDownItems = function(buckets, visual, schema, dataRoles, groupingDesign, showValueAs) {
                for (var isVisualTypeAuto = (0, visualContainerUtils.II)(visual), _i = 0, buckets_2 = buckets; _i < buckets_2.length; _i++) for (var bucket = buckets_2[_i], _a = 0, _b = bucket.properties; _a < _b.length; _a++) {
                    var property = _b[_a], interactivityOptions = property.interactivityOptions;
                    interactivityOptions.hasContextMenu && (interactivityOptions.dropDownItems = (0, 
                    fieldWellMenuViewModelFactory.op)(property, bucket, buckets, (0, arrayExtensions.rC)(dataRoles, bucket.role), isVisualTypeAuto, schema, this.aggrOps, visual.config.singleVisual, this.featureSwitch, groupingDesign, showValueAs, this.localizationService, visual, this.visualCalcEagerService, this.explorationCapabilitiesService), 
                    (0, field_well_view_model_operations_util.l)(property, visual));
                }
            }, FieldWellViewModelService.prototype.updateBucketCardinality = function(buckets, visual, visualPluginService, allowReplaceInMultiItemMode) {
                for (var capabilities = visualPluginService.capabilities(visual.config.singleVisual.visualType), query = (0, 
                visualContainerUtils.Xf)(visual), drillableRoles = (0, drillUtils.WO)(capabilities, !!(null == query ? void 0 : query.isDrillDisabled)), numberRangesForRoles = (0, 
                visualContainerUtils.ps)(visual, visualPluginService, this.geoTagging), _i = 0, buckets_3 = buckets; _i < buckets_3.length; _i++) {
                    var bucket = buckets_3[_i], numberRange = numberRangesForRoles && numberRangesForRoles[bucket.role];
                    bucket.supportsMultipleItems = _.includes(drillableRoles, bucket.role) || !numberRange || null == numberRange.max || numberRange.max > 1 || 16 === visual.visibility;
                    for (var isSingleValueMode = !bucket.supportsMultipleItems, _a = 0, _b = bucket.properties; _a < _b.length; _a++) {
                        var property = _b[_a];
                        property.interactivityOptions.isReplaceable = isSingleValueMode || !!allowReplaceInMultiItemMode, 
                        property.interactivityOptions.isReplaceOnly = isSingleValueMode;
                    }
                }
            }, FieldWellViewModelService.prototype.getRoleNamesToBuckets = function(buckets) {
                for (var result = {}, _i = 0, buckets_4 = buckets; _i < buckets_4.length; _i++) {
                    var bucket = buckets_4[_i];
                    result[bucket.role] = bucket;
                }
                return result;
            }, FieldWellViewModelService.\u0275fac = function(t) {
                return new (t || FieldWellViewModelService)(core["\u0275\u0275inject"](sq_aggregation_operations_service.C), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](geo_tagging_analyzer_service.q), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](promiseFactory.t), core["\u0275\u0275inject"](FieldWellPropertyViewModelService), core["\u0275\u0275inject"](visual_calc_eager_service.w), core["\u0275\u0275inject"](exploration_capabilities_service.U));
            }, FieldWellViewModelService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FieldWellViewModelService,
                factory: FieldWellViewModelService.\u0275fac
            }), FieldWellViewModelService;
        }(), FieldWellViewModelServiceLazyProvider = {
            provide: "fieldWellViewModelService",
            useFactory: function(fieldWellViewModelService) {
                return Promise.resolve(fieldWellViewModelService);
            },
            deps: [ FieldWellViewModelService ]
        }, FieldWellViewModelModule = function() {
            function FieldWellViewModelModule() {}
            return FieldWellViewModelModule.\u0275fac = function(t) {
                return new (t || FieldWellViewModelModule);
            }, FieldWellViewModelModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: FieldWellViewModelModule
            }), FieldWellViewModelModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ FieldWellViewModelService, FieldWellPropertyViewModelService, {
                    provide: "fieldWellPropertyViewModelService",
                    useExisting: FieldWellPropertyViewModelService
                }, FieldWellViewModelServiceLazyProvider ]
            }), FieldWellViewModelModule;
        }();
    },
    84431: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Ct: function() {
                return FieldWellPropertyInteractivityOptions;
            },
            DR: function() {
                return FieldWellPropertyDisplayOptions;
            },
            KT: function() {
                return FieldWellViewModel;
            },
            OB: function() {
                return FieldWellBucket;
            },
            _d: function() {
                return FieldWellProperty;
            },
            aT: function() {
                return FieldWellHierarchyLevel;
            },
            kh: function() {
                return FieldWellBucketWarning;
            }
        });
        var _powerbi_legacy_JsCommon_comparable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(55201), _powerbi_legacy_PowerBIVisuals_Visuals_common_visualObjectRepetition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40812), _powerbi_legacy_PowerBIVisuals_VisualsCommon_arrayExtensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50550), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprEqualityVisitor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45413), FieldWellProperty = function() {
            function FieldWellProperty(expr, role, startIndex, endIndex, valid, displayOptions, interactivityOptions, hierarchyLevels, conditionalFormattingRepetitions, visualContainerName, visualType, isHiddenInVisual, supportedOperations) {
                this.expr = expr, this.role = role, this.startIndex = startIndex, this.endIndex = endIndex, 
                this.valid = valid, this.displayOptions = displayOptions, this.interactivityOptions = interactivityOptions, 
                this.hierarchyLevels = hierarchyLevels, this.conditionalFormattingRepetitions = conditionalFormattingRepetitions, 
                this.supportedOperations = 67108863, this.visualContainerName = visualContainerName, 
                this.visualType = visualType, this.isHiddenInVisual = isHiddenInVisual, this.supportedOperations = supportedOperations;
            }
            return FieldWellProperty.prototype.equals = function(other) {
                return this.role === other.role && (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprEqualityVisitor__WEBPACK_IMPORTED_MODULE_0__.fS)(this.expr, other.expr) && this.startIndex === other.startIndex && this.endIndex === other.endIndex && this.isEditingLabel === other.isEditingLabel && this.valid === other.valid && (this.displayOptions === other.displayOptions || !!(this.displayOptions && other.displayOptions && this.displayOptions.equals && this.displayOptions.equals(other.displayOptions))) && (this.interactivityOptions === other.interactivityOptions || !!(this.interactivityOptions && other.interactivityOptions && this.interactivityOptions.equals && this.interactivityOptions.equals(other.interactivityOptions))) && (0, 
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_arrayExtensions__WEBPACK_IMPORTED_MODULE_1__.NF)(this.conditionalFormattingRepetitions, other.conditionalFormattingRepetitions, _powerbi_legacy_PowerBIVisuals_Visuals_common_visualObjectRepetition__WEBPACK_IMPORTED_MODULE_2__.u9) && (0, 
                _powerbi_legacy_JsCommon_comparable__WEBPACK_IMPORTED_MODULE_3__.L)(this.hierarchyLevels, other.hierarchyLevels) && this.visualContainerName === other.visualContainerName && this.visualType === other.visualType && this.isHiddenInVisual === other.isHiddenInVisual && this.supportedOperations === other.supportedOperations;
            }, FieldWellProperty;
        }(), FieldWellPropertyDisplayOptions = function() {
            function FieldWellPropertyDisplayOptions(displayName, tooltipTitle, tooltipDescription, glyph, pbiStyle) {
                this.displayName = displayName, this.tooltipTitle = tooltipTitle, this.tooltipDescription = tooltipDescription, 
                this.glyph = glyph, this.pbiStyle = pbiStyle;
            }
            return FieldWellPropertyDisplayOptions.prototype.equals = function(other) {
                return this.displayName === other.displayName && this.tooltipTitle === other.tooltipTitle && this.tooltipDescription === other.tooltipDescription && this.glyph === other.glyph && this.pbiStyle === other.pbiStyle;
            }, FieldWellPropertyDisplayOptions;
        }(), FieldWellPropertyInteractivityOptions = function() {
            function FieldWellPropertyInteractivityOptions(dropDownItems, isReplaceable, isEditableField) {
                this.dropDownItems = dropDownItems, this.isReplaceable = isReplaceable, this.isEditableField = isEditableField, 
                this.canAppend = !0, this.canPrepend = !0, this.hasContextMenu = !0, this.isDraggableField = !0, 
                this.isDroppableField = !0, this.isRemovableField = !0;
            }
            return FieldWellPropertyInteractivityOptions.prototype.disableInteractivity = function() {
                this.canAppend = !1, this.canPrepend = !1, this.hasContextMenu = !1, this.isDraggableField = !1, 
                this.isDroppableField = !1, this.isEditableField = !1, this.isRemovableField = !1;
            }, FieldWellPropertyInteractivityOptions.prototype.equals = function(other) {
                return this.canAppend === other.canAppend && this.canPrepend === other.canPrepend && _.isEqual(this.dropDownItems, other.dropDownItems) && this.hasContextMenu === other.hasContextMenu && this.isDraggableField === other.isDraggableField && this.isDroppableField === other.isDroppableField && this.isEditableField === other.isEditableField && this.isRemovableField === other.isRemovableField && this.isReplaceable === other.isReplaceable;
            }, FieldWellPropertyInteractivityOptions;
        }(), FieldWellHierarchyLevel = function() {
            function FieldWellHierarchyLevel(expr, displayName, tooltipTitle) {
                this.expr = expr, this.displayName = displayName, this.tooltipTitle = tooltipTitle;
            }
            return FieldWellHierarchyLevel.prototype.equals = function(other) {
                return (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprEqualityVisitor__WEBPACK_IMPORTED_MODULE_0__.fS)(this.expr, other.expr) && this.displayName === other.displayName && this.tooltipTitle === other.tooltipTitle;
            }, FieldWellHierarchyLevel;
        }(), FieldWellBucket = function() {
            function FieldWellBucket(role, displayName, properties, supportsMultipleItems, description) {
                this.role = role, this.displayName = displayName, this.properties = properties, 
                this.supportsMultipleItems = supportsMultipleItems, this.description = description;
            }
            return FieldWellBucket.prototype.equals = function(other) {
                return this.role === other.role && this.displayName === other.displayName && (0, 
                _powerbi_legacy_JsCommon_comparable__WEBPACK_IMPORTED_MODULE_3__.L)(this.properties, other.properties) && this.supportsMultipleItems === other.supportsMultipleItems && this.description === other.description && (this.warning === other.warning || !!(this.warning && other.warning && this.warning.equals && this.warning.equals(other.warning))) && this.disabled === other.disabled;
            }, FieldWellBucket;
        }(), FieldWellBucketWarning = function() {
            function FieldWellBucketWarning(glyph, title, description) {
                this.glyph = glyph, this.title = title, this.description = description;
            }
            return FieldWellBucketWarning.prototype.equals = function(other) {
                return this.glyph === other.glyph && this.title === other.title && this.description === other.description;
            }, FieldWellBucketWarning;
        }(), FieldWellViewModel = function() {
            return function(buckets) {
                this.buckets = buckets;
            };
        }();
    }
} ]);