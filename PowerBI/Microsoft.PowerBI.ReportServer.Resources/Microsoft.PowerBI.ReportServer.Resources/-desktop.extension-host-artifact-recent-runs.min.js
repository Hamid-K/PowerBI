"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-artifact-recent-runs" ], {
    70331: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            createExtensionHostArtifactRecentRunsModule: function() {
                return createExtensionHostArtifactRecentRunsModule;
            }
        });
        var common = __webpack_require__(77476), core = __webpack_require__(50423), ngrx_effects = __webpack_require__(60756), from = __webpack_require__(82762), of = __webpack_require__(11547), mergeMap = __webpack_require__(42195), map = __webpack_require__(14172), tap = __webpack_require__(17653), v4 = __webpack_require__(11105), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), registry_src = __webpack_require__(41838), lazy_provider_service = __webpack_require__(6814), extension_host_artifact_recent_runs_actions = __webpack_require__(20917), GetArtifactManifestInjectionToken = new core.InjectionToken("GetArtifactManifest"), OpenUIInjectionToken = new core.InjectionToken("OpenUI"), ExtensionHostArtifactRecentRunsEffects = function() {
            function ExtensionHostArtifactRecentRunsEffects(actions$, messageBroker, lazyProvider, getArtifactManifest, openUI) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.lazyProvider = lazyProvider, 
                this.getArtifactManifest = getArtifactManifest, this.openUI = openUI, this.onOpenArtifactRecentRunsReceived$ = (0, 
                host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.openArtifactRecentRuns, function(_a) {
                    var artifact = _a.artifact;
                    return (0, from.D)(_this.lazyProvider.get("@powerbi/TridentPortalArtifactActions", registry_src.E3.recentruns)).subscribe(function(artifactRecentRunsActionService) {
                        artifactRecentRunsActionService.onAction({
                            artifact,
                            scenario: "workspace"
                        });
                    }), (0, of.of)(index_core.Vm.openArtifactRecentRuns.resolve({
                        value: !0
                    }));
                }), this.onOpenArtifactRecentRuns$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.UF)(extension_host_artifact_recent_runs_actions.k), (0, 
                    mergeMap.zg)(function() {
                        return (0, of.of)(extension_host_artifact_recent_runs_actions.i({
                            visible: !0
                        }));
                    }));
                }), this.openArtifactRecentRunsPanel$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.UF)(extension_host_artifact_recent_runs_actions.k), (0, 
                    mergeMap.zg)(function(_a) {
                        var artifact = _a.artifact;
                        return (0, from.D)(_this.getArtifactManifest(artifact.artifactType)).pipe((0, map.U)(function(artifactManifest) {
                            var _a, recentRunConfig = null === (_a = artifactManifest.artifactSettings) || void 0 === _a ? void 0 : _a.recentRun;
                            if (recentRunConfig && "extension" in recentRunConfig) {
                                var path = [ recentRunConfig.path, artifact.objectId ].join("/").replace(/[/]{1,}/g, "/");
                                return {
                                    uiId: (0, v4.Z)(),
                                    uiType: "panel",
                                    extensionName: recentRunConfig.extension,
                                    path
                                };
                            }
                            throw new Error("Failed to find the recent runs action config for artifact: ".concat(artifact.artifactType));
                        }));
                    }), (0, tap.b)(function(params) {
                        return _this.openUI(params);
                    }));
                }, {
                    dispatch: !1
                });
            }
            return ExtensionHostArtifactRecentRunsEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostArtifactRecentRunsEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](lazy_provider_service.rn), core["\u0275\u0275inject"](GetArtifactManifestInjectionToken), core["\u0275\u0275inject"](OpenUIInjectionToken));
            }, ExtensionHostArtifactRecentRunsEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostArtifactRecentRunsEffects,
                factory: ExtensionHostArtifactRecentRunsEffects.\u0275fac
            }), ExtensionHostArtifactRecentRunsEffects;
        }();
        function createExtensionHostArtifactRecentRunsModule(config, parent) {
            return (0, core.createNgModule)(ExtensionHostArtifactRecentRunsModule, core.Injector.create({
                providers: [ {
                    provide: GetArtifactManifestInjectionToken,
                    useValue: config.getArtifactManifest
                }, {
                    provide: OpenUIInjectionToken,
                    useValue: config.openUI
                } ],
                parent
            }));
        }
        var ExtensionHostArtifactRecentRunsModule = function() {
            function ExtensionHostArtifactRecentRunsModule() {}
            return ExtensionHostArtifactRecentRunsModule.\u0275fac = function(t) {
                return new (t || ExtensionHostArtifactRecentRunsModule);
            }, ExtensionHostArtifactRecentRunsModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostArtifactRecentRunsModule
            }), ExtensionHostArtifactRecentRunsModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostArtifactRecentRunsEffects ]) ]
            }), ExtensionHostArtifactRecentRunsModule;
        }();
    }
} ]);