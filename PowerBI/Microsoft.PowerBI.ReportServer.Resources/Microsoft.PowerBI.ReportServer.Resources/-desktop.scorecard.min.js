"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "scorecard" ], {
    58105: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            Scorecard: function() {
                return Scorecard;
            }
        });
        var tslib_es6 = __webpack_require__(81337), scorecard_capabilities = __webpack_require__(85619), common_colorHelper = __webpack_require__(90120), fontProperties = __webpack_require__(18664), objectEnumerationBuilder = __webpack_require__(28579), units = __webpack_require__(32105), CssConstants = __webpack_require__(79154), debug = __webpack_require__(62458), DOMConstants = __webpack_require__(65195), fontUtils = __webpack_require__(38265), urlUtils = __webpack_require__(48066), Utility = __webpack_require__(38078), enums = __webpack_require__(46135), dataViewObject2 = __webpack_require__(82755), Constants = function() {
            function Constants() {}
            return Constants.tokenExpiryBufferInMs = 12e4, Constants.minTokenPollingIntervalInMs = 6e4, 
            Constants;
        }(), ScorecardMessageProxy = function() {
            function ScorecardMessageProxy() {}
            return ScorecardMessageProxy.extractData = function(iFrame, event) {
                if (event && event.originalEvent && event.originalEvent.source === iFrame.contentWindow && event.originalEvent.data) return event.originalEvent.data;
            }, ScorecardMessageProxy.postMessage = function(iFrame, message, embedUrl) {
                var _a, parsedUrl = (0, urlUtils.en)(embedUrl), origin = "".concat(parsedUrl.scheme, "://").concat(parsedUrl.host);
                debug.fF.assertValue(iFrame.contentWindow, "Missing content window"), null === (_a = iFrame.contentWindow) || void 0 === _a || _a.postMessage(message, origin);
            }, ScorecardMessageProxy;
        }(), ScorecardEmbed = function() {
            function ScorecardEmbed(container, host, visualStyle, handleEmbedEvent) {
                this.container = container, this.host = host, this.visualStyle = visualStyle, this.handleEmbedEvent = handleEmbedEvent, 
                debug.fF.assertValue(this.container, "container"), debug.fF.assertValue(this.host, "host"), 
                debug.fF.assertValue(this.visualStyle, "visualStyle"), this.iFrame = $("<iframe>").attr(DOMConstants.ZI, ScorecardEmbed.BlankPath), 
                this.iFrame.addClass(ScorecardEmbed.IFrame.class), $(this.container).empty().append(this.iFrame), 
                this.headers = {
                    uid: Utility.b$.generateGuid()
                };
            }
            return ScorecardEmbed.prototype.init = function(settings) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var authentication, _b, clusterInfo, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            null === (_a = this.iFrameIsLoaded) || void 0 === _a || _a.reject(), this.iFrameIsLoaded = this.host.promiseFactory().defer(), 
                            authentication = this.host.authenticationService(), _d.label = 1;

                          case 1:
                            return _d.trys.push([ 1, 4, , 5 ]), _b = this, [ 4, authentication.getSignedInAccessToken() ];

                          case 2:
                            return _b.accessToken = _d.sent(), [ 4, authentication.getClusterInfo() ];

                          case 3:
                            return clusterInfo = _d.sent(), this.baseUrl = clusterInfo.frontendUrl.replace(/\/$/, ""), 
                            this.clusterUrl = clusterInfo.backendUrl, [ 3, 5 ];

                          case 4:
                            return _d.sent(), [ 2 ];

                          case 5:
                            return this.configuration = this.generateEmbedConfiguration(this.accessToken, this.baseUrl, this.clusterUrl, settings), 
                            this.configuration ? (this.iFrame.attr(DOMConstants.ZI, this.configuration.embedUrl), 
                            this.onLoad = function() {
                                _this.iFrame.off(DOMConstants.A3, _this.onLoad), _this.iFrameIsLoaded.resolve(!0);
                            }, this.iFrame.on(DOMConstants.A3, this.onLoad), this.onMessage = function(message) {
                                var data = ScorecardMessageProxy.extractData(_this.iFrame.get(0), message);
                                if (null == data ? void 0 : data.url) {
                                    var messageEventPrefix = "/scorecards/".concat(_this.headers.uid, "/events");
                                    data.url === "".concat(messageEventPrefix, "/navigate") ? (_this.scorecardId = data.body.scorecardId, 
                                    _this.groupId = data.body.groupId, debug.fF.assertValue(_this.scorecardId, "Scorecard id missing from navigation event"), 
                                    _this.handleEmbedEvent(1)) : data.url === "".concat(messageEventPrefix, "/cancel") ? ("tile" === _this.configuration.settings.displayMode && (_this.scorecardId = void 0), 
                                    _this.handleEmbedEvent(0)) : data.url === "".concat(messageEventPrefix, "/replacescorecard") ? _this.handleEmbedEvent(2) : data.url === "".concat(messageEventPrefix, "/openlink") ? window.open(data.body, "_blank") : data.url === "".concat(messageEventPrefix, "/viewmodechanged") ? data.body && _this.host.onSwitchFocusModeState(!0) : data.url === "".concat(messageEventPrefix, "/updatefilters") ? _this.goalFilters = data.body.goalFilters : data.url === "".concat(messageEventPrefix, "/showgoals") ? (_this.goalIds = _.map(_this.goalFilters, function(filter) {
                                        return filter.goalId;
                                    }), _this.handleEmbedEvent(3)) : data.url === "".concat(messageEventPrefix, "/opengoalnotes") ? _this.handleEmbedEvent(4) : data.url === "".concat(messageEventPrefix, "/editgoal") ? _this.handleEmbedEvent(5) : data.url === "".concat(messageEventPrefix, "/clickembed") && _this.handleEmbedEvent(6);
                                }
                            }, $(window).on(DOMConstants.V, this.onMessage), [ 2 ]) : [ 2 ];
                        }
                    });
                });
            }, ScorecardEmbed.prototype.clickContainer = function() {
                1 !== this.host.getViewMode() || this.configuration.settings.isInFocus || this.container.get(0).click();
            }, ScorecardEmbed.prototype.getScorecardUrl = function() {
                var _a;
                if (this.scorecardId) {
                    var workspace = null !== (_a = this.groupId) && void 0 !== _a ? _a : "me";
                    return "".concat(this.baseUrl, "/groups/").concat(workspace, "/scorecards/").concat(this.scorecardId);
                }
                debug.fF.assertFail("Scorecard not loaded");
            }, ScorecardEmbed.prototype.destroy = function() {
                $(window).off(DOMConstants.V, this.onMessage), this.iFrame.off(DOMConstants.A3, this.onLoad);
            }, ScorecardEmbed.prototype.embedScorecard = function(scorecardId, settings) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var message;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isLoaded ];

                          case 1:
                            return _a.sent(), this.configuration = this.generateEmbedConfiguration(this.accessToken, this.baseUrl, this.clusterUrl, settings, scorecardId), 
                            this.configuration ? (message = {
                                body: this.configuration,
                                headers: this.headers,
                                method: ScorecardEmbed.MessagePost,
                                url: ScorecardEmbed.UrlPathForLoad
                            }, ScorecardMessageProxy.postMessage(this.iFrame.get(0), message, this.configuration.embedUrl), 
                            [ 2 ]) : [ 2 ];
                        }
                    });
                });
            }, ScorecardEmbed.prototype.generateEmbedConfiguration = function(accessToken, embedUrl, clusterUrl, settings, scorecardId) {
                if (debug.fF.assertValue(accessToken, "accessToken"), debug.fF.assertValue(embedUrl, "embedUrl"), 
                (0, urlUtils.HH)(embedUrl, !1)) {
                    var baseUrl = embedUrl;
                    return "/" !== baseUrl.slice(-1) && (baseUrl += "/"), {
                        accessToken,
                        embedUrl: "".concat(baseUrl).concat(ScorecardEmbed.UrlPathForEmbedScorecard).concat(scorecardId),
                        id: scorecardId,
                        settings,
                        tokenType: null,
                        type: ScorecardEmbed.ConfigurationType,
                        clusterUrl
                    };
                }
            }, ScorecardEmbed.prototype.createGoal = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var message;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isLoaded ];

                          case 1:
                            return _a.sent(), this.host.onSwitchFocusModeState(!0), this.configuration.id = void 0, 
                            message = {
                                body: this.configuration,
                                headers: this.headers,
                                method: ScorecardEmbed.MessagePost,
                                url: ScorecardEmbed.UrlPathForCreateGoal
                            }, ScorecardMessageProxy.postMessage(this.iFrame.get(0), message, this.configuration.embedUrl), 
                            [ 2 ];
                        }
                    });
                });
            }, ScorecardEmbed.prototype.createScorecard = function(draft) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var message;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isLoaded ];

                          case 1:
                            return _a.sent(), this.host.onSwitchFocusModeState(!0), this.configuration.id = void 0, 
                            message = {
                                body: this.configuration,
                                headers: this.headers,
                                method: ScorecardEmbed.MessagePost,
                                url: draft ? ScorecardEmbed.UrlPathForDraftScorecard : ScorecardEmbed.UrlPathForCreateScorecard
                            }, ScorecardMessageProxy.postMessage(this.iFrame.get(0), message, this.configuration.embedUrl), 
                            [ 2 ];
                        }
                    });
                });
            }, ScorecardEmbed.prototype.reset = function(focusMode) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var message;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isLoaded ];

                          case 1:
                            return _a.sent(), this.host.onSwitchFocusModeState(focusMode), message = {
                                body: void 0,
                                headers: this.headers,
                                method: ScorecardEmbed.MessagePost,
                                url: ScorecardEmbed.UrlPathForReset
                            }, ScorecardMessageProxy.postMessage(this.iFrame.get(0), message, this.configuration.embedUrl), 
                            [ 2 ];
                        }
                    });
                });
            }, ScorecardEmbed.prototype.restoreScorecard = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var message;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isLoaded ];

                          case 1:
                            return _a.sent(), message = {
                                body: void 0,
                                headers: this.headers,
                                method: ScorecardEmbed.MessagePost,
                                url: ScorecardEmbed.UrlPathForRestoreScorecard
                            }, ScorecardMessageProxy.postMessage(this.iFrame.get(0), message, this.configuration.embedUrl), 
                            [ 2 ];
                        }
                    });
                });
            }, ScorecardEmbed.prototype.showPicker = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var message;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isLoaded ];

                          case 1:
                            return _a.sent(), this.host.onSwitchFocusModeState(!0), this.configuration.id = void 0, 
                            message = {
                                body: this.configuration,
                                headers: this.headers,
                                method: ScorecardEmbed.MessagePost,
                                url: ScorecardEmbed.UrlPathForPicker
                            }, ScorecardMessageProxy.postMessage(this.iFrame.get(0), message, this.configuration.embedUrl), 
                            [ 2 ];
                        }
                    });
                });
            }, ScorecardEmbed.prototype.updateSettings = function(settings) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var message;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isLoaded ];

                          case 1:
                            return _a.sent(), debug.fF.assertValue(settings, "settings"), message = {
                                body: settings,
                                headers: this.headers,
                                method: ScorecardEmbed.MessagePatch,
                                url: ScorecardEmbed.UrlPathForSettings
                            }, ScorecardMessageProxy.postMessage(this.iFrame.get(0), message, this.configuration.embedUrl), 
                            this.configuration.settings = settings, [ 2 ];
                        }
                    });
                });
            }, ScorecardEmbed.prototype.setAccessToken = function(accessToken) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var message;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isLoaded ];

                          case 1:
                            return _a.sent(), debug.fF.assertValue(accessToken, "setAccessToken accessToken"), 
                            this.accessToken = accessToken, this.configuration.accessToken = this.accessToken, 
                            message = {
                                body: this.accessToken,
                                headers: this.headers,
                                method: ScorecardEmbed.MessagePost,
                                url: ScorecardEmbed.UrlPathForToken
                            }, ScorecardMessageProxy.postMessage(this.iFrame.get(0), message, this.configuration.embedUrl), 
                            [ 2 ];
                        }
                    });
                });
            }, ScorecardEmbed.prototype.showGoalVisual = function(settings) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var message;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isLoaded ];

                          case 1:
                            return _a.sent(), this.host.onSwitchFocusModeState(!1), this.configuration.settings = settings, 
                            message = {
                                body: this.configuration,
                                headers: this.headers,
                                method: ScorecardEmbed.MessagePost,
                                url: ScorecardEmbed.UrlPathForGoals
                            }, ScorecardMessageProxy.postMessage(this.iFrame.get(0), message, this.configuration.embedUrl), 
                            [ 2 ];
                        }
                    });
                });
            }, ScorecardEmbed.prototype.openGoalNotes = function(settings) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var message;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isLoaded ];

                          case 1:
                            return _a.sent(), "notes" === settings.openGoalDetailsType && (this.host.onSwitchFocusModeState(!0), 
                            settings.displayMode = "list"), this.configuration.settings = settings, message = {
                                body: this.configuration,
                                headers: this.headers,
                                method: ScorecardEmbed.MessagePost,
                                url: ScorecardEmbed.UrlPathForOpenGoalDetails
                            }, ScorecardMessageProxy.postMessage(this.iFrame.get(0), message, this.configuration.embedUrl), 
                            [ 2 ];
                        }
                    });
                });
            }, Object.defineProperty(ScorecardEmbed.prototype, "isLoaded", {
                get: function() {
                    return this.iFrameIsLoaded.promise;
                },
                enumerable: !1,
                configurable: !0
            }), ScorecardEmbed.IFrame = (0, CssConstants.CH)("scorecardFrame"), ScorecardEmbed.BlankPath = "about:blank", 
            ScorecardEmbed.ConfigurationType = "report", ScorecardEmbed.MessagePatch = "PATCH", 
            ScorecardEmbed.MessagePost = "POST", ScorecardEmbed.UrlPathForCreateGoal = "/scorecard/creategoal", 
            ScorecardEmbed.UrlPathForCreateScorecard = "/scorecard/createscorecard", ScorecardEmbed.UrlPathForDraftScorecard = "/scorecard/provisiondraft", 
            ScorecardEmbed.UrlPathForEmbedScorecard = "scorecardEmbed?useVisualTelemetry=1&scorecardId=", 
            ScorecardEmbed.UrlPathForGoals = "/scorecard/goals", ScorecardEmbed.UrlPathForLoad = "/report/load", 
            ScorecardEmbed.UrlPathForOpenGoalDetails = "/scorecard/opengoaldetails", ScorecardEmbed.UrlPathForPicker = "/scorecard/showpicker", 
            ScorecardEmbed.UrlPathForReset = "/scorecard/reset", ScorecardEmbed.UrlPathForRestoreScorecard = "/scorecard/restorescorecard", 
            ScorecardEmbed.UrlPathForSettings = "/scorecard/settings", ScorecardEmbed.UrlPathForToken = "/scorecard/token", 
            ScorecardEmbed;
        }(), build_control_util = __webpack_require__(56578), ScorecardFormattingModel = function() {
            function ScorecardFormattingModel(host, featureSwitches) {
                this.host = host, this.featureSwitches = featureSwitches;
            }
            return ScorecardFormattingModel.prototype.getFormattingModel = function(scorecardId, settings) {
                var _this = this;
                return settings ? ("tile" !== settings.displayMode ? new build_control_util.Nq(function() {
                    return _this.buildConnectionCard(scorecardId);
                }, function() {
                    return _this.buildScorecardCard(settings);
                }, function() {
                    return _this.buildHeaderCard(settings);
                }, function() {
                    return _this.buildColumnHeadersCard(settings);
                }, function() {
                    return _this.buildGoalsCard(settings);
                }, function() {
                    return _this.buildDetailsPaneCard(settings);
                }) : new build_control_util.Nq(function() {
                    return _this.buildConnectionCard(scorecardId);
                }, function() {
                    return _this.buildGoalTileCard(settings);
                }, function() {
                    return _this.buildVisualizationCard(settings);
                })).build() : new build_control_util.Nq(function() {
                    return _this.buildConnectionCard(scorecardId);
                }).build();
            }, ScorecardFormattingModel.prototype.buildConnectionCard = function(scorecardId) {
                var _this = this, builder = new build_control_util.CQ(new build_control_util.lg("connection"), "ScorecardVisual_ConnectedScorecard", [ scorecard_capabilities.A.scorecard.scorecardId ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addGroup("scorecard", function(group) {
                    group.addSimpleSlice("scorecardId", new build_control_util.fq({
                        descriptor: scorecard_capabilities.A.scorecard.scorecardId,
                        value: scorecardId,
                        placeholder: "Scorecard"
                    }).build());
                }), builder.build();
            }, ScorecardFormattingModel.prototype.buildScorecardCard = function(settings) {
                var _this = this, builder = new build_control_util.CQ(new build_control_util.lg("scorecard"), "Scorecard", [ scorecard_capabilities.A.scorecard.fontFamily, scorecard_capabilities.A.scorecard.tableBackgroundColor, scorecard_capabilities.A.scorecard.showCommandBar ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addGroup("style", function(group) {
                    group.addCompositeSlice("fontFamily", "Font", (new build_control_util.UN).withFontFamily({
                        descriptor: scorecard_capabilities.A.scorecard.fontFamily,
                        value: settings.theme.fontFamily
                    }).build()).addSimpleSlice("backgroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.scorecard.tableBackgroundColor,
                        value: {
                            value: settings.theme.tableBackgroundColor
                        }
                    }).build()).addSimpleSlice("showCommandBar", new build_control_util.bd({
                        descriptor: scorecard_capabilities.A.scorecard.showCommandBar,
                        value: !settings.hideCommandBar
                    }).build());
                }), builder.build();
            }, ScorecardFormattingModel.prototype.buildHeaderCard = function(settings) {
                var _this = this, builder = new build_control_util.CQ(new build_control_util.lg("header"), "ThemeDialog_SubSection_Header", [ scorecard_capabilities.A.header.show, scorecard_capabilities.A.header.showCards, scorecard_capabilities.A.header.showTitle, scorecard_capabilities.A.header.showToolbar, scorecard_capabilities.A.header.foregroundColor, scorecard_capabilities.A.header.backgroundColor ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addTopLevelToggle("show", function() {
                    return new build_control_util.bd({
                        descriptor: scorecard_capabilities.A.header.show,
                        value: !settings.hideScorecardHeader
                    }).build();
                }).addGroup("header", function(group) {
                    group.addSimpleSlice("showTitle", new build_control_util.bd({
                        descriptor: scorecard_capabilities.A.header.showTitle,
                        value: !settings.hideScorecardTitle
                    }).build()).addSimpleSlice("showToolbar", new build_control_util.bd({
                        descriptor: scorecard_capabilities.A.header.showToolbar,
                        value: !settings.hideScorecardToolbar
                    }).build()).addSimpleSlice("showCards", new build_control_util.bd({
                        descriptor: scorecard_capabilities.A.header.showCards,
                        value: !settings.hideGoalCards
                    }).build()).addSimpleSlice("foregroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.header.foregroundColor,
                        value: {
                            value: settings.theme.headerForegroundColor
                        }
                    }).build()).addSimpleSlice("backgroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.header.backgroundColor,
                        value: {
                            value: settings.theme.headerBackgroundColor
                        }
                    }).build());
                }), builder.build();
            }, ScorecardFormattingModel.prototype.buildColumnHeadersCard = function(settings) {
                var _this = this, builder = new build_control_util.CQ(new build_control_util.lg("columnHeaders"), "Visual_Tablix_ColumnHeaders", [ scorecard_capabilities.A.columnHeaders.show, scorecard_capabilities.A.columnHeaders.foregroundColor ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addTopLevelToggle("show", function() {
                    return new build_control_util.bd({
                        descriptor: scorecard_capabilities.A.columnHeaders.show,
                        value: !settings.hideColumnHeaders
                    }).build();
                }).addGroup("columnHeaders", function(group) {
                    group.addSimpleSlice("foregroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.columnHeaders.foregroundColor,
                        value: {
                            value: settings.theme.tableHeaderForegroundColor
                        }
                    }).build());
                }), builder.build();
            }, ScorecardFormattingModel.prototype.buildGoalsCard = function(settings) {
                var _this = this, builder = new build_control_util.CQ(new build_control_util.lg("goals"), "Metrics", [ scorecard_capabilities.A.goals.foregroundColor, scorecard_capabilities.A.goals.backgroundColor ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addGroup("goals", function(group) {
                    group.addSimpleSlice("backgroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.goals.backgroundColor,
                        value: {
                            value: settings.theme.tableRowBackgroundColor
                        }
                    }).build()).addSimpleSlice("foregroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.goals.foregroundColor,
                        value: {
                            value: settings.theme.tableRowForegroundColor
                        }
                    }).build());
                }), builder.build();
            }, ScorecardFormattingModel.prototype.buildDetailsPaneCard = function(settings) {
                var _this = this, builder = new build_control_util.CQ(new build_control_util.lg("detailsPane"), "DetailsPane", [ scorecard_capabilities.A.detailsPane.foregroundColor, scorecard_capabilities.A.detailsPane.backgroundColor, scorecard_capabilities.A.detailsPane.cardForegroundColor, scorecard_capabilities.A.detailsPane.cardBackgroundColor, scorecard_capabilities.A.detailsPane.chartForegroundColor, scorecard_capabilities.A.detailsPane.chartBackgroundColor ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addGroup("pane", function(group) {
                    group.withDisplayName("Pane").addSimpleSlice("backgroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.detailsPane.backgroundColor,
                        value: {
                            value: settings.theme.detailsPaneBackgroundColor
                        }
                    }).build()).addSimpleSlice("foregroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.detailsPane.foregroundColor,
                        value: {
                            value: settings.theme.detailsPaneForegroundColor
                        }
                    }).build());
                }).addGroup("chart", function(group) {
                    group.withDisplayName("Chart").addSimpleSlice("backgroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.detailsPane.chartBackgroundColor,
                        value: {
                            value: settings.theme.detailsPaneChartBackgroundColor
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Background_Color");
                    }).addSimpleSlice("foregroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.detailsPane.chartForegroundColor,
                        value: {
                            value: settings.theme.detailsPaneChartForegroundColor
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Visual_FontColor");
                    });
                }).addGroup("card", function(group) {
                    group.withDisplayName("Cards").addSimpleSlice("backgroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.detailsPane.cardBackgroundColor,
                        value: {
                            value: settings.theme.detailsPaneCardBackgroundColor
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Background_Color");
                    }).addSimpleSlice("foregroundColor", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.detailsPane.cardForegroundColor,
                        value: {
                            value: settings.theme.detailsPaneCardForegroundColor
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Visual_FontColor");
                    });
                }), builder.build();
            }, ScorecardFormattingModel.prototype.buildGoalTileCard = function(settings) {
                var _this = this, builder = new build_control_util.CQ(new build_control_util.lg("metric"), "MetricsName_New_Singular", [ scorecard_capabilities.A.visualization.showScorecardName, scorecard_capabilities.A.visualization.scorecardNameFontFamily, scorecard_capabilities.A.visualization.scorecardNameFontSize, scorecard_capabilities.A.visualization.scorecardNameFontColor, scorecard_capabilities.A.visualization.scorecardNameBold, scorecard_capabilities.A.visualization.scorecardNameItalic, scorecard_capabilities.A.visualization.scorecardNameUnderline, scorecard_capabilities.A.visualization.currentValueFontFamily, scorecard_capabilities.A.visualization.currentValueFontSize, scorecard_capabilities.A.visualization.currentValueFontColor, scorecard_capabilities.A.visualization.currentValueBold, scorecard_capabilities.A.visualization.currentValueItalic, scorecard_capabilities.A.visualization.currentValueUnderline, scorecard_capabilities.A.visualization.targetValueFontFamily, scorecard_capabilities.A.visualization.targetValueFontSize, scorecard_capabilities.A.visualization.targetValueFontColor, scorecard_capabilities.A.visualization.targetValueBold, scorecard_capabilities.A.visualization.targetValueItalic, scorecard_capabilities.A.visualization.targetValueUnderline, scorecard_capabilities.A.visualization.showGrowth, scorecard_capabilities.A.visualization.growthFontFamily, scorecard_capabilities.A.visualization.growthFontSize, scorecard_capabilities.A.visualization.growthFontColor, scorecard_capabilities.A.visualization.growthBold, scorecard_capabilities.A.visualization.growthItalic, scorecard_capabilities.A.visualization.growthUnderline, scorecard_capabilities.A.visualization.showOwner, scorecard_capabilities.A.visualization.ownerPhotoSize, scorecard_capabilities.A.visualization.showGoalName, scorecard_capabilities.A.visualization.goalNameFontFamily, scorecard_capabilities.A.visualization.goalNameFontSize, scorecard_capabilities.A.visualization.goalNameFontColor, scorecard_capabilities.A.visualization.goalNameBold, scorecard_capabilities.A.visualization.goalNameItalic, scorecard_capabilities.A.visualization.goalNameUnderline, scorecard_capabilities.A.visualization.showDueDate, scorecard_capabilities.A.visualization.dueDateFontFamily, scorecard_capabilities.A.visualization.dueDateFontSize, scorecard_capabilities.A.visualization.dueDateFontColor, scorecard_capabilities.A.visualization.dueDateBold, scorecard_capabilities.A.visualization.dueDateItalic, scorecard_capabilities.A.visualization.dueDateUnderline, scorecard_capabilities.A.visualization.showStatus, scorecard_capabilities.A.visualization.showNotes, scorecard_capabilities.A.visualization.notesFontSize, scorecard_capabilities.A.visualization.notesFontColor, scorecard_capabilities.A.visualization.backgroundColor ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addGroup("scorecard name", function(group) {
                    group.addTopLevelToggle("showScorecardName", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showScorecardName,
                            value: settings.showGoalVisualScorecardName
                        }).build();
                    }).withCollapsible(!0).withDisplayName("ScorecardDialog_Name"), group.addCompositeSlice("scorecardName_font", "Font", _this.getFontControl(scorecard_capabilities.A.visualization.scorecardNameFontFamily, scorecard_capabilities.A.visualization.scorecardNameFontSize, scorecard_capabilities.A.visualization.scorecardNameBold, scorecard_capabilities.A.visualization.scorecardNameItalic, scorecard_capabilities.A.visualization.scorecardNameUnderline, settings.theme.goalVisualScorecardName)), 
                    group.addSimpleSlice("scorecardName_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.scorecardNameFontColor,
                        value: {
                            value: settings.theme.goalVisualScorecardName.color
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Text");
                    });
                }), builder.addGroup("current value", function(group) {
                    group.withCollapsible(!0).withDisplayName("CurrentValue"), group.addCompositeSlice("currentValue_font", "Font", _this.getFontControl(scorecard_capabilities.A.visualization.currentValueFontFamily, scorecard_capabilities.A.visualization.currentValueFontSize, scorecard_capabilities.A.visualization.currentValueBold, scorecard_capabilities.A.visualization.currentValueItalic, scorecard_capabilities.A.visualization.currentValueUnderline, settings.theme.goalVisualCurrentValue)), 
                    group.addSimpleSlice("currentValue_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.currentValueFontColor,
                        value: {
                            value: settings.theme.goalVisualCurrentValue.color
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Text");
                    });
                }), builder.addGroup("target value", function(group) {
                    group.withCollapsible(!0).withDisplayName("Role_DisplayName_TargetValue"), group.addCompositeSlice("targetValue_font", "Font", _this.getFontControl(scorecard_capabilities.A.visualization.targetValueFontFamily, scorecard_capabilities.A.visualization.targetValueFontSize, scorecard_capabilities.A.visualization.targetValueBold, scorecard_capabilities.A.visualization.targetValueItalic, scorecard_capabilities.A.visualization.targetValueUnderline, settings.theme.goalVisualTargetValue)), 
                    group.addSimpleSlice("targetValue_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.targetValueFontColor,
                        value: {
                            value: settings.theme.goalVisualTargetValue.color
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Text");
                    });
                }), builder.addGroup("growth", function(group) {
                    group.addTopLevelToggle("showGrowth", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showGrowth,
                            value: settings.showGoalVisualGrowth
                        }).build();
                    }).withCollapsible(!0).withDisplayName("ScorecardVisual_Growth"), group.addCompositeSlice("growth_font", "Font", _this.getFontControl(scorecard_capabilities.A.visualization.growthFontFamily, scorecard_capabilities.A.visualization.growthFontSize, scorecard_capabilities.A.visualization.growthBold, scorecard_capabilities.A.visualization.growthItalic, scorecard_capabilities.A.visualization.growthUnderline, settings.theme.goalVisualGrowth)), 
                    group.addSimpleSlice("growth_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.growthFontColor,
                        value: {
                            value: settings.theme.goalVisualGrowth.color
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Text");
                    });
                }), builder.addGroup("owner", function(group) {
                    group.addTopLevelToggle("showOwner", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showOwner,
                            value: settings.showGoalVisualOwner
                        }).build();
                    }).withCollapsible(!0).withDisplayName("Owner_Lowercase"), group.addSimpleSlice("owner_photo_size", new build_control_util.mu({
                        descriptor: scorecard_capabilities.A.visualization.ownerPhotoSize,
                        value: settings.goalVisualOwnerPhotoSize,
                        options: {
                            minValue: {
                                type: 0,
                                value: 8
                            },
                            maxValue: {
                                type: 1,
                                value: 60
                            },
                            required: {
                                type: 2
                            }
                        }
                    }).build());
                }), builder.addGroup("goal name", function(group) {
                    group.addTopLevelToggle("showGoalName", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showGoalName,
                            value: settings.showGoalVisualGoalName
                        }).build();
                    }).withCollapsible(!0).withDisplayName("MetricName"), group.addCompositeSlice("goalName_font", "Font", _this.getFontControl(scorecard_capabilities.A.visualization.goalNameFontFamily, scorecard_capabilities.A.visualization.goalNameFontSize, scorecard_capabilities.A.visualization.goalNameBold, scorecard_capabilities.A.visualization.goalNameItalic, scorecard_capabilities.A.visualization.goalNameUnderline, settings.theme.goalVisualGoalName)), 
                    group.addSimpleSlice("currentValue_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.goalNameFontColor,
                        value: {
                            value: settings.theme.goalVisualGoalName.color
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Text");
                    });
                }), builder.addGroup("status", function(group) {
                    group.addTopLevelToggle("showStatus", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showStatus,
                            value: settings.showGoalVisualStatus
                        }).build();
                    }).withCollapsible(!1).withDisplayName("Status");
                }), builder.addGroup("due date", function(group) {
                    group.addTopLevelToggle("showDueDate", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showDueDate,
                            value: settings.showGoalVisualDueDate
                        }).build();
                    }).withCollapsible(!0).withDisplayName("DueDate"), group.addCompositeSlice("dueDate_font", "Font", _this.getFontControl(scorecard_capabilities.A.visualization.dueDateFontFamily, scorecard_capabilities.A.visualization.dueDateFontSize, scorecard_capabilities.A.visualization.dueDateBold, scorecard_capabilities.A.visualization.dueDateItalic, scorecard_capabilities.A.visualization.dueDateUnderline, settings.theme.goalVisualDueDate)), 
                    group.addSimpleSlice("dueDate_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.dueDateFontColor,
                        value: {
                            value: settings.theme.goalVisualDueDate.color
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Text");
                    });
                }), builder.addGroup("notes", function(group) {
                    group.addTopLevelToggle("showNotes", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showNotes,
                            value: settings.showGoalVisualNotes
                        }).build();
                    }).withCollapsible(!0).withDisplayName("Notes"), group.addSimpleSlice("notes_size", new build_control_util.mu({
                        descriptor: scorecard_capabilities.A.visualization.notesFontSize,
                        value: settings.theme.goalVisualNotes.size.pt,
                        options: {
                            minValue: {
                                type: 0,
                                value: 8
                            },
                            maxValue: {
                                type: 1,
                                value: 60
                            },
                            required: {
                                type: 2
                            }
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Role_DisplayName_Size");
                    }), group.addSimpleSlice("notes_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.notesFontColor,
                        value: {
                            value: settings.theme.goalVisualNotes.color
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Visual_FontColor");
                    });
                }), builder.addGroup("background", function(group) {
                    group.withCollapsible(!0).withDisplayName("Visual_Background"), group.addSimpleSlice("background_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.backgroundColor,
                        value: {
                            value: settings.theme.goalVisualBackgroundColor
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Generic_Color");
                    });
                }), builder.build();
            }, ScorecardFormattingModel.prototype.buildVisualizationCard = function(settings) {
                var _this = this, builder = new build_control_util.CQ(new build_control_util.lg("visualization"), "Visualization", [ scorecard_capabilities.A.visualization.showVisualization, scorecard_capabilities.A.visualization.showLegends, scorecard_capabilities.A.visualization.showTargetLine, scorecard_capabilities.A.visualization.targetLineColor, scorecard_capabilities.A.visualization.currentLineColor, scorecard_capabilities.A.visualization.currentAreaShaded, scorecard_capabilities.A.visualization.showXAxis, scorecard_capabilities.A.visualization.xAxisFontFamily, scorecard_capabilities.A.visualization.xAxisFontSize, scorecard_capabilities.A.visualization.xAxisFontColor, scorecard_capabilities.A.visualization.xAxisBold, scorecard_capabilities.A.visualization.xAxisItalic, scorecard_capabilities.A.visualization.xAxisUnderline, scorecard_capabilities.A.visualization.showYAxis, scorecard_capabilities.A.visualization.yAxisFontFamily, scorecard_capabilities.A.visualization.yAxisFontSize, scorecard_capabilities.A.visualization.yAxisFontColor, scorecard_capabilities.A.visualization.yAxisBold, scorecard_capabilities.A.visualization.yAxisItalic, scorecard_capabilities.A.visualization.yAxisUnderline ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addTopLevelToggle("show", function() {
                    var _a;
                    return new build_control_util.bd({
                        descriptor: scorecard_capabilities.A.visualization.showVisualization,
                        value: null === (_a = settings.showVisualization) || void 0 === _a || _a
                    }).build();
                }), builder.addGroup("legends", function(group) {
                    group.addTopLevelToggle("showLegends", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showLegends,
                            value: settings.showGoalVisualLegends
                        }).build();
                    }).withCollapsible(!1).withDisplayName("Visual_Legend");
                }), builder.addGroup("target line", function(group) {
                    group.addTopLevelToggle("showTargetLine", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showTargetLine,
                            value: settings.showGoalVisualTargetLine
                        }).build();
                    }).withCollapsible(!0).withDisplayName("ScorecardVisual_TargetLine"), group.addSimpleSlice("targetLine_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.targetLineColor,
                        value: {
                            value: settings.theme.goalVisualTargetLineColor
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Generic_Color");
                    });
                }), builder.addGroup("current line", function(group) {
                    group.withCollapsible(!0).withDisplayName("ScorecardVisual_CurrentLine"), group.addSimpleSlice("currentLine_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.currentLineColor,
                        value: {
                            value: settings.theme.goalVisualCurrentLineColor
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Generic_Color");
                    }), group.addSimpleSlice("shade current area", new build_control_util.bd({
                        descriptor: scorecard_capabilities.A.visualization.currentAreaShaded,
                        value: settings.currentAreaShaded
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Visual_Shapes_ShadeArea");
                    });
                }), builder.addGroup("x axis", function(group) {
                    group.addTopLevelToggle("showXAxis", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showXAxis,
                            value: settings.showGoalVisualXAxis
                        }).build();
                    }).withCollapsible(!0).withDisplayName("Visual_XAxis_Hyphen"), group.addCompositeSlice("xAxis_font", "Font", _this.getFontControl(scorecard_capabilities.A.visualization.xAxisFontFamily, scorecard_capabilities.A.visualization.xAxisFontSize, scorecard_capabilities.A.visualization.xAxisBold, scorecard_capabilities.A.visualization.xAxisItalic, scorecard_capabilities.A.visualization.xAxisUnderline, settings.theme.goalVisualXAxis)), 
                    group.addSimpleSlice("xAxis_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.xAxisFontColor,
                        value: {
                            value: settings.theme.goalVisualXAxis.color
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Text");
                    });
                }), builder.addGroup("y axis", function(group) {
                    group.addTopLevelToggle("showYAxis", function() {
                        return new build_control_util.bd({
                            descriptor: scorecard_capabilities.A.visualization.showYAxis,
                            value: settings.showGoalVisualYAxis
                        }).build();
                    }).withCollapsible(!0).withDisplayName("Visual_YAxis_Hyphen"), group.addCompositeSlice("yAxis_font", "Font", _this.getFontControl(scorecard_capabilities.A.visualization.yAxisFontFamily, scorecard_capabilities.A.visualization.yAxisFontSize, scorecard_capabilities.A.visualization.yAxisBold, scorecard_capabilities.A.visualization.yAxisItalic, scorecard_capabilities.A.visualization.yAxisUnderline, settings.theme.goalVisualYAxis)), 
                    group.addSimpleSlice("yAxis_color", new build_control_util.BT({
                        descriptor: scorecard_capabilities.A.visualization.yAxisFontColor,
                        value: {
                            value: settings.theme.goalVisualYAxis.color
                        }
                    }).build(), function(slice) {
                        return slice.withCustomDisplayName("Text");
                    });
                }), builder.build();
            }, ScorecardFormattingModel.prototype.getFontControl = function(fontFamilyDescriptor, fontSizeDescriptor, fontBoldDescriptor, fontItalicDescriptor, fontUnderlineDescriptor, font) {
                return (new build_control_util.UN).withFontFamily({
                    descriptor: fontFamilyDescriptor,
                    value: font.family
                }).withFontSizeProperties({
                    descriptor: fontSizeDescriptor,
                    options: {
                        minValue: {
                            type: 0,
                            value: 8
                        },
                        maxValue: {
                            type: 1,
                            value: 60
                        }
                    },
                    value: font.size.pt
                }).withBold({
                    descriptor: fontBoldDescriptor,
                    value: font.weight === CssConstants.en
                }).withItalic({
                    descriptor: fontItalicDescriptor,
                    value: font.style === CssConstants.BF
                }).withUnderline({
                    descriptor: fontUnderlineDescriptor,
                    value: font.textDecoration === CssConstants.f0
                }).build();
            }, ScorecardFormattingModel;
        }(), Scorecard = function() {
            function Scorecard(options) {
                options && (this.scorecardSettingsOverride = options.scorecardSettingsOverride);
            }
            return Object.defineProperty(Scorecard.prototype, "isSingleGoalVisual", {
                get: function() {
                    var _a, _b;
                    return "tile" === (null === (_a = this.settings) || void 0 === _a ? void 0 : _a.displayMode) || (null === (_b = this.settings) || void 0 === _b ? void 0 : _b.restoreGoalTile);
                },
                enumerable: !1,
                configurable: !0
            }), Scorecard.prototype.init = function(options) {
                debug.fF.assertValue(options, "options"), this.featureSwitches = options.featureSwitches, 
                this.container = $("<div>").addClass(Scorecard.ScorecardContainer.class), this.host = options.host, 
                this.authenticationService = this.host.authenticationService(), this.style = options.style, 
                this.subscriptions = [], options.element.append(this.container), this.scorecardEmbed = new ScorecardEmbed(this.container, options.host, options.style, this.handleEmbedEvent.bind(this)), 
                this.settings = this.generateScorecardSettings(void 0), this.scorecardEmbed.init(this.settings), 
                this.buildSignInOverlay(), this.featureSwitches.singleGoalVisual ? (this.buildEmptyStateOverlay(), 
                this.buildDisplayModePickerOverlay()) : this.buildAddScorecardOverlay(), this.getSignInReady();
            }, Scorecard.prototype.destroy = function() {
                for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) _a[_i].unsubscribe();
                this.scorecardEmbed.destroy(), clearTimeout(this.tokenRefreshTimeoutId);
            }, Scorecard.prototype.update = function(options) {
                switch (options.type) {
                  case enums.EP.ViewMode:
                    this.viewModeChanged(options.viewMode);
                    break;

                  case enums.EP.Data:
                    this.dataChanged(options), this.viewModeChanged(options.viewMode);
                    break;

                  case enums.EP.Resize:
                    this.isInFocus && !options.isInFocus && (this.scorecardEmbed.scorecardId ? _.isEmpty(this.scorecardEmbed.goalIds) ? "tile" === this.settings.displayMode ? this.showSplashScreen(options.isInFocus) : (this.scorecardEmbed.restoreScorecard(), 
                    this.setVisualState(1)) : this.isSingleGoalVisual && "notes" === this.settings.openGoalDetailsType && (this.updateSettings({
                        isEditingGoal: !1,
                        openGoalDetailsType: void 0
                    }, !0), this.scorecardEmbed.showGoalVisual(this.settings)) : this.showSplashScreen(options.isInFocus)), 
                    this.isInFocus = options.isInFocus, this.settings.isInFocus !== this.isInFocus && this.updateSettings({
                        isInFocus: this.isInFocus
                    }, !0), this.viewModeChanged(options.viewMode);
                }
            }, Scorecard.prototype.dataChanged = function(options) {
                var _a, _b;
                debug.fF.assertValue(options, "options");
                var dataview = _.first(options.dataViews);
                if (dataview) {
                    var objects = dataview.metadata && dataview.metadata.objects, scorecardLocation = (0, 
                    dataViewObject2.NA)(objects, scorecard_capabilities.A.scorecard.scorecardReference);
                    this.scorecardId = null === (_a = null == scorecardLocation ? void 0 : scorecardLocation.byReference) || void 0 === _a ? void 0 : _a.itemId;
                    var scorecardId = this.scorecardId;
                    this.settings = this.generateScorecardSettings(objects), this.scorecardEmbed.goalIds = _.map(this.settings.filters, function(filter) {
                        return filter.goalId;
                    }), scorecardId && _.isEmpty(this.scorecardEmbed.goalIds) && "list" !== this.settings.displayMode && (this.settings.displayMode = "list", 
                    this.persistDisplayMode("list")), this.displayMode = this.featureSwitches.singleGoalVisual ? null !== (_b = this.settings.displayMode) && void 0 !== _b ? _b : "tile" : "list", 
                    this.updateDisplayPickerOption(this.displayMode), scorecardId ? (scorecardId !== this.scorecardEmbed.scorecardId ? this.scorecardEmbed.embedScorecard(scorecardId, this.settings) : this.scorecardEmbed.updateSettings(this.settings), 
                    this.setVisualState(1)) : (this.scorecardEmbed.embedScorecard(void 0, this.settings), 
                    this.showSplashScreen(this.isInFocus)), this.scorecardEmbed.scorecardId = scorecardId;
                }
            }, Scorecard.prototype.viewModeChanged = function(viewMode) {
                var _a, _b;
                if (1 === viewMode ? (null === (_a = this.emptyStateOverlay) || void 0 === _a || _a.find(".overlayButton").removeAttr("disabled"), 
                this.splashScreenOverlay.find(".overlayButton").removeAttr("disabled")) : (null === (_b = this.emptyStateOverlay) || void 0 === _b || _b.find(".overlayButton").attr("disabled", 1), 
                this.splashScreenOverlay.find(".overlayButton").attr("disabled", 1)), this.settings) {
                    var settingsChanged = !1, showReplaceScorecard = 1 === viewMode;
                    this.isSingleGoalVisual || this.settings.showReplaceScorecard === showReplaceScorecard || (this.settings.showReplaceScorecard = showReplaceScorecard, 
                    settingsChanged = !0);
                    var disableEdit = 1 !== viewMode;
                    this.settings.disableEdit !== disableEdit && (this.settings.disableEdit = disableEdit, 
                    settingsChanged = !0), settingsChanged && this.scorecardEmbed.updateSettings(this.settings), 
                    this.isSingleGoalVisual || this.configureCommandBarForScorecardVisual(viewMode);
                }
            }, Scorecard.prototype.configureCommandBarForScorecardVisual = function(viewMode) {
                var shouldHideCommandBar = 1 !== viewMode && this.shouldHideCommandBarInReadModeObject;
                this.settings.hideCommandBar !== shouldHideCommandBar && this.scorecardEmbed.updateSettings((0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.settings), {
                    hideCommandBar: shouldHideCommandBar
                }));
            }, Scorecard.prototype.generateScorecardSettings = function(objects) {
                var colorHelper = common_colorHelper.v.create(this.style), defaultFont = (0, fontProperties.Zi)(null == objects ? void 0 : objects.scorecard, {
                    color: "foregroundColor",
                    family: "fontFamily",
                    size: "fontSize"
                }, colorHelper, this.style, "foreground", "label", {
                    color: common_colorHelper.v.getThemeColor(this.style, "foreground"),
                    size: units.B.createFromPt(9),
                    family: fontUtils.Wn.regular.family
                }), theme = {
                    backgroundColor: colorHelper.getColorForProperty(objects, scorecard_capabilities.A.scorecard.backgroundColor, "background"),
                    neutralPrimaryColor: defaultFont.color,
                    fontFamily: defaultFont.family,
                    tableBackgroundColor: colorHelper.getColorForProperty(objects, scorecard_capabilities.A.scorecard.tableBackgroundColor, "backgroundLight")
                };
                theme.headerForegroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.header.foregroundColor, theme.neutralPrimaryColor), 
                theme.headerBackgroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.header.backgroundColor, theme.backgroundColor), 
                theme.tableHeaderForegroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.columnHeaders.foregroundColor, theme.neutralPrimaryColor), 
                theme.tableRowBackgroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.goals.backgroundColor, theme.backgroundColor), 
                theme.tableRowForegroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.goals.foregroundColor, theme.neutralPrimaryColor), 
                theme.tableRowLinkColor = common_colorHelper.v.getThemeColor(this.style, "hyperlink"), 
                theme.detailsPaneBackgroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.detailsPane.backgroundColor, theme.backgroundColor), 
                theme.detailsPaneForegroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.detailsPane.foregroundColor, theme.neutralPrimaryColor), 
                theme.detailsPaneCardBackgroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.detailsPane.cardBackgroundColor, theme.backgroundColor), 
                theme.detailsPaneCardForegroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.detailsPane.cardForegroundColor, theme.neutralPrimaryColor), 
                theme.detailsPaneChartBackgroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.detailsPane.chartBackgroundColor, theme.backgroundColor), 
                theme.detailsPaneChartForegroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.detailsPane.chartForegroundColor, theme.neutralPrimaryColor), 
                theme.goalVisualBackgroundColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.visualization.backgroundColor, theme.backgroundColor), 
                theme.goalVisualTargetLineColor = colorHelper.getColorForPropertyWithDefaultColor(objects, scorecard_capabilities.A.visualization.targetLineColor, "#8A8886"), 
                theme.goalVisualCurrentLineColor = colorHelper.getColorForProperty(objects, scorecard_capabilities.A.visualization.currentLineColor, void 0);
                var viewMode = this.host.getViewMode(), goalIdsStr = (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.scorecard.goalIds, void 0), goalIds = goalIdsStr && _.split(goalIdsStr, ",");
                theme.goalVisualScorecardName = (0, fontProperties.Zi)(null == objects ? void 0 : objects.visualization, {
                    color: "scorecardNameFontColor",
                    family: "scorecardNameFontFamily",
                    size: "scorecardNameFontSize",
                    bold: "scorecardNameBold",
                    italic: "scorecardNameItalic",
                    underline: "scorecardNameUnderline"
                }, colorHelper, this.style, "foregroundNeutralSecondary", "smallLabel", {
                    family: defaultFont.family,
                    size: units.B.createFromPt(12)
                }, !0), theme.goalVisualScorecardName = (0, fontProperties.xH)(theme.goalVisualScorecardName);
                var goalVisualCurrentValue = (0, fontProperties.Zi)(null == objects ? void 0 : objects.visualization, {
                    color: "currentValueFontColor",
                    family: "currentValueFontFamily",
                    size: "currentValueFontSize",
                    bold: "currentValueBold",
                    italic: "currentValueItalic",
                    underline: "currentValueUnderline"
                }, colorHelper, this.style, "foreground", void 0, {
                    family: theme.fontFamily,
                    size: units.B.createFromPt(14),
                    weight: CssConstants.AI,
                    style: CssConstants.AI,
                    textDecoration: CssConstants.zu
                }, !0);
                goalVisualCurrentValue = (0, fontProperties.xH)(goalVisualCurrentValue);
                var currentValueBoldInObject = (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.currentValueBold, void 0);
                theme.goalVisualCurrentValue = _.isUndefined(currentValueBoldInObject) ? (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, goalVisualCurrentValue), {
                    weight: CssConstants.en
                }) : goalVisualCurrentValue, theme.goalVisualTargetValue = (0, fontProperties.Zi)(null == objects ? void 0 : objects.visualization, {
                    color: "targetValueFontColor",
                    family: "targetValueFontFamily",
                    size: "targetValueFontSize",
                    bold: "targetValueBold",
                    italic: "targetValueItalic",
                    underline: "targetValueUnderline"
                }, colorHelper, this.style, "foreground", void 0, {
                    family: theme.fontFamily,
                    size: units.B.createFromPt(11),
                    weight: CssConstants.AI,
                    style: CssConstants.AI,
                    textDecoration: CssConstants.zu
                }, !0), theme.goalVisualTargetValue = (0, fontProperties.xH)(theme.goalVisualTargetValue), 
                theme.goalVisualGrowth = (0, fontProperties.Zi)(null == objects ? void 0 : objects.visualization, {
                    color: "growthFontColor",
                    family: "growthFontFamily",
                    size: "growthFontSize",
                    bold: "growthBold",
                    italic: "growthItalic",
                    underline: "growthUnderline"
                }, colorHelper, this.style, "foreground", "smallLabel", {
                    family: defaultFont.family,
                    size: defaultFont.size
                }, !0), theme.goalVisualGrowth = (0, fontProperties.xH)(theme.goalVisualGrowth);
                var goalVisualGoalName = (0, fontProperties.Zi)(null == objects ? void 0 : objects.visualization, {
                    color: "goalNameFontColor",
                    family: "goalNameFontFamily",
                    size: "goalNameFontSize",
                    bold: "goalNameBold",
                    italic: "goalNameItalic",
                    underline: "goalNameUnderline"
                }, colorHelper, this.style, "foreground", "smallLabel", {
                    family: defaultFont.family,
                    size: defaultFont.size
                }, !0);
                goalVisualGoalName = (0, fontProperties.xH)(goalVisualGoalName);
                var goalNameBoldInObject = (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.goalNameBold, void 0);
                theme.goalVisualGoalName = _.isUndefined(goalNameBoldInObject) ? (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, goalVisualGoalName), {
                    weight: CssConstants.en
                }) : goalVisualGoalName, theme.goalVisualDueDate = (0, fontProperties.Zi)(null == objects ? void 0 : objects.visualization, {
                    color: "dueDateFontColor",
                    family: "dueDateFontFamily",
                    size: "dueDateFontSize",
                    bold: "dueDateBold",
                    italic: "dueDateItalic",
                    underline: "dueDateUnderline"
                }, colorHelper, this.style, "foreground", "smallLabel", {
                    family: defaultFont.family,
                    size: defaultFont.size
                }, !0), theme.goalVisualDueDate = (0, fontProperties.xH)(theme.goalVisualDueDate), 
                theme.goalVisualNotes = (0, fontProperties.Zi)(null == objects ? void 0 : objects.visualization, {
                    color: "notesFontColor",
                    size: "notesFontSize"
                }, colorHelper, this.style, "foreground", "largeLabel", {
                    size: units.B.createFromPt(12)
                }, !0), theme.goalVisualNotes = (0, fontProperties.xH)(theme.goalVisualNotes), theme.goalVisualXAxis = (0, 
                fontProperties.Zi)(null == objects ? void 0 : objects.visualization, {
                    color: "xAxisFontColor",
                    family: "xAxisFontFamily",
                    size: "xAxisFontSize",
                    bold: "xAxisBold",
                    italic: "xAxisItalic",
                    underline: "xAxisUnderline"
                }, colorHelper, this.style, "foreground", "smallLightLabel", {
                    family: defaultFont.family,
                    size: defaultFont.size
                }, !0), theme.goalVisualXAxis = (0, fontProperties.xH)(theme.goalVisualXAxis), theme.goalVisualYAxis = (0, 
                fontProperties.Zi)(null == objects ? void 0 : objects.visualization, {
                    color: "yAxisFontColor",
                    family: "yAxisFontFamily",
                    size: "yAxisFontSize",
                    bold: "yAxisBold",
                    italic: "yAxisItalic",
                    underline: "yAxisUnderline"
                }, colorHelper, this.style, "foreground", "smallLightLabel", {
                    family: defaultFont.family,
                    size: defaultFont.size
                }, !0), theme.goalVisualYAxis = (0, fontProperties.xH)(theme.goalVisualYAxis), this.shouldHideCommandBarInReadModeObject = !(0, 
                dataViewObject2.NA)(objects, scorecard_capabilities.A.scorecard.showCommandBar, !0);
                var defaultSettings = {
                    showReplaceScorecard: 1 === viewMode,
                    disableEdit: 1 !== viewMode,
                    dockCommandBarToBottom: !0,
                    allowMissingId: !0,
                    alwaysMaximize: !0,
                    autoHideCommandBar: !0,
                    handleExternalLinks: !0,
                    hideCommandBar: this.shouldHideCommandBarInReadModeObject,
                    hideChatInTeams: !0,
                    hideShare: !0,
                    hideAddFavorite: !0,
                    hideScorecardHeader: !(0, dataViewObject2.NA)(objects, scorecard_capabilities.A.header.show, !0),
                    hideGoalCards: !(0, dataViewObject2.NA)(objects, scorecard_capabilities.A.header.showCards, !0),
                    hideScorecardTitle: !(0, dataViewObject2.NA)(objects, scorecard_capabilities.A.header.showTitle, !0),
                    hideScorecardToolbar: !(0, dataViewObject2.NA)(objects, scorecard_capabilities.A.header.showToolbar, !0),
                    hideColumnHeaders: !(0, dataViewObject2.NA)(objects, scorecard_capabilities.A.columnHeaders.show, !0),
                    hidePowerAutomate: !1,
                    hideFileMenu: !0,
                    showOpenInService: !0,
                    showTutorialDialogs: !0,
                    theme,
                    displayMode: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.scorecard.displayMode),
                    filters: _.map(goalIds, function(goalId) {
                        return {
                            goalId
                        };
                    }),
                    showGoalVisualScorecardName: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showScorecardName, !1),
                    showGoalVisualGrowth: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showGrowth, !1),
                    showGoalVisualGoalName: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showGoalName, !0),
                    showGoalVisualOwner: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showOwner, !0),
                    goalVisualOwnerPhotoSize: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.ownerPhotoSize, 20),
                    showGoalVisualDueDate: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showDueDate, !0),
                    showGoalVisualStatus: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showStatus, !0),
                    showGoalVisualNotes: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showNotes, !0),
                    currentAreaShaded: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.currentAreaShaded, !0),
                    showVisualization: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showVisualization, !0),
                    showGoalVisualLegends: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showLegends, !1),
                    showGoalVisualTargetLine: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showTargetLine, !1),
                    showGoalVisualXAxis: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showXAxis, !0),
                    showGoalVisualYAxis: (0, dataViewObject2.NA)(objects, scorecard_capabilities.A.visualization.showYAxis, !0),
                    layoutTheme: null
                };
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, defaultSettings), this.scorecardSettingsOverride);
            }, Scorecard.prototype.enumerateObjectInstances = function(options) {
                if (this.settings) {
                    var enumeration = new objectEnumerationBuilder.G;
                    switch (options.objectName) {
                      case "scorecard":
                        enumeration.pushInstance({
                            objectName: "scorecard",
                            properties: {
                                scorecardId: this.scorecardId,
                                fontFamily: this.settings.theme.fontFamily,
                                tableBackgroundColor: this.settings.theme.tableBackgroundColor,
                                showCommandBar: !this.settings.hideCommandBar
                            },
                            selector: null
                        });
                        break;

                      case "header":
                        enumeration.pushInstance({
                            objectName: "header",
                            properties: {
                                show: !this.settings.hideScorecardHeader,
                                showTitle: !this.settings.hideScorecardTitle,
                                showToolbar: !this.settings.hideScorecardToolbar,
                                showCards: !this.settings.hideGoalCards,
                                backgroundColor: this.settings.theme.headerBackgroundColor,
                                foregroundColor: this.settings.theme.headerForegroundColor
                            },
                            selector: null
                        });
                        break;

                      case "columnHeaders":
                        enumeration.pushInstance({
                            objectName: "columnHeaders",
                            properties: {
                                show: !this.settings.hideColumnHeaders,
                                foregroundColor: this.settings.theme.tableHeaderForegroundColor
                            },
                            selector: null
                        });
                        break;

                      case "goals":
                        enumeration.pushInstance({
                            objectName: "goals",
                            properties: {
                                backgroundColor: this.settings.theme.tableRowBackgroundColor,
                                foregroundColor: this.settings.theme.tableRowForegroundColor
                            },
                            selector: null
                        });
                        break;

                      case "detailsPane":
                        enumeration.pushInstance({
                            objectName: "detailsPane",
                            properties: {
                                backgroundColor: this.settings.theme.detailsPaneBackgroundColor,
                                foregroundColor: this.settings.theme.detailsPaneForegroundColor,
                                chartBackgroundColor: this.settings.theme.detailsPaneChartBackgroundColor,
                                chartForegroundColor: this.settings.theme.detailsPaneChartForegroundColor,
                                cardBackgroundColor: this.settings.theme.detailsPaneCardBackgroundColor,
                                cardForegroundColor: this.settings.theme.detailsPaneCardForegroundColor
                            },
                            selector: null
                        });
                        break;

                      case "visualization":
                        enumeration.pushInstance({
                            objectName: "visualization",
                            properties: {
                                backgroundColor: this.settings.theme.goalVisualBackgroundColor,
                                showScorecardName: this.settings.showGoalVisualScorecardName,
                                scorecardNameFontFamily: this.settings.theme.goalVisualScorecardName.family,
                                scorecardNameFontSize: this.settings.theme.goalVisualScorecardName.size,
                                scorecardNameFontColor: this.settings.theme.goalVisualScorecardName.color,
                                scorecardNameBold: this.settings.theme.goalVisualScorecardName.weight === CssConstants.en,
                                scorecardNameItalic: this.settings.theme.goalVisualScorecardName.style === CssConstants.BF,
                                scorecardNameUnderline: this.settings.theme.goalVisualScorecardName.textDecoration === CssConstants.f0,
                                currentValueFontFamily: this.settings.theme.goalVisualCurrentValue.family,
                                currentValueFontSize: this.settings.theme.goalVisualCurrentValue.size,
                                currentValueFontColor: this.settings.theme.goalVisualCurrentValue.color,
                                currentValueBold: this.settings.theme.goalVisualCurrentValue.weight,
                                currentValueItalic: this.settings.theme.goalVisualCurrentValue.style === CssConstants.BF,
                                currentValueUnderline: this.settings.theme.goalVisualCurrentValue.textDecoration === CssConstants.f0,
                                targetValueFontFamily: this.settings.theme.goalVisualTargetValue.family,
                                targetValueFontSize: this.settings.theme.goalVisualTargetValue.size,
                                targetValueFontColor: this.settings.theme.goalVisualTargetValue.color,
                                targetValueBold: this.settings.theme.goalVisualTargetValue.weight === CssConstants.en,
                                targetValueItalic: this.settings.theme.goalVisualTargetValue.style === CssConstants.BF,
                                targetValueUnderline: this.settings.theme.goalVisualTargetValue.textDecoration === CssConstants.f0,
                                showGrowth: this.settings.showGoalVisualGrowth,
                                growthFontFamily: this.settings.theme.goalVisualGrowth.family,
                                growthFontSize: this.settings.theme.goalVisualGrowth.size,
                                growthFontColor: this.settings.theme.goalVisualGrowth.color,
                                growthBold: this.settings.theme.goalVisualGrowth.weight === CssConstants.en,
                                growthItalic: this.settings.theme.goalVisualGrowth.style === CssConstants.BF,
                                growthUnderline: this.settings.theme.goalVisualGrowth.textDecoration === CssConstants.f0,
                                showGoalName: this.settings.showGoalVisualGoalName,
                                goalNameFontFamily: this.settings.theme.goalVisualGoalName.family,
                                goalNameFontSize: this.settings.theme.goalVisualGoalName.size,
                                goalNameFontColor: this.settings.theme.goalVisualGoalName.color,
                                goalNameBold: this.settings.theme.goalVisualGoalName.weight === CssConstants.en,
                                goalNameItalic: this.settings.theme.goalVisualGoalName.style === CssConstants.BF,
                                goalNameUnderline: this.settings.theme.goalVisualGoalName.textDecoration === CssConstants.f0,
                                showOwner: this.settings.showGoalVisualOwner,
                                ownerPhotoSize: this.settings.goalVisualOwnerPhotoSize,
                                showDueDate: this.settings.showGoalVisualDueDate,
                                dueDateFontFamily: this.settings.theme.goalVisualDueDate.family,
                                dueDateFontSize: this.settings.theme.goalVisualDueDate.size,
                                dueDateFontColor: this.settings.theme.goalVisualDueDate.color,
                                dueDateBold: this.settings.theme.goalVisualDueDate.weight === CssConstants.en,
                                dueDateItalic: this.settings.theme.goalVisualDueDate.style === CssConstants.BF,
                                dueDateUnderline: this.settings.theme.goalVisualDueDate.textDecoration === CssConstants.f0,
                                showStatus: this.settings.showGoalVisualStatus,
                                showNotes: this.settings.showGoalVisualNotes,
                                notesFontSize: this.settings.theme.goalVisualNotes.size,
                                notesFontColor: this.settings.theme.goalVisualNotes.color,
                                showVisualization: this.settings.showVisualization,
                                showLegends: this.settings.showGoalVisualLegends,
                                showTargetLine: this.settings.showGoalVisualTargetLine,
                                targetLineColor: this.settings.theme.goalVisualTargetLineColor,
                                currentLineColor: this.settings.theme.goalVisualCurrentLineColor,
                                currentAreaShaded: this.settings.currentAreaShaded,
                                showXAxis: this.settings.showGoalVisualXAxis,
                                xAxisFontFamily: this.settings.theme.goalVisualXAxis.family,
                                xAxisFontSize: this.settings.theme.goalVisualXAxis.size,
                                xAxisFontColor: this.settings.theme.goalVisualXAxis.color,
                                xAxisBold: this.settings.theme.goalVisualXAxis.weight === CssConstants.en,
                                xAxisItalic: this.settings.theme.goalVisualXAxis.style === CssConstants.BF,
                                xAxisUnderline: this.settings.theme.goalVisualXAxis.textDecoration === CssConstants.f0,
                                showYAxis: this.settings.showGoalVisualYAxis,
                                yAxisFontFamily: this.settings.theme.goalVisualYAxis.family,
                                yAxisFontSize: this.settings.theme.goalVisualYAxis.size,
                                yAxisFontColor: this.settings.theme.goalVisualYAxis.color,
                                yAxisBold: this.settings.theme.goalVisualYAxis.weight === CssConstants.en,
                                yAxisItalic: this.settings.theme.goalVisualYAxis.style === CssConstants.BF,
                                yAxisUnderline: this.settings.theme.goalVisualYAxis.textDecoration === CssConstants.f0
                            },
                            selector: null
                        });
                    }
                    return enumeration.complete();
                }
            }, Scorecard.prototype.getFormattingModel = function() {
                return new ScorecardFormattingModel(this.host, this.featureSwitches).getFormattingModel(this.scorecardId, this.settings);
            }, Scorecard.prototype.onDataViewObjectChanged = function(propertySaveObjects, _sourceType) {
                return propertySaveObjects && 1 === propertySaveObjects.length && propertySaveObjects[0].objectName === scorecard_capabilities.A.scorecard.scorecardId.objectName && propertySaveObjects[0].propertyName === scorecard_capabilities.A.scorecard.scorecardId.propertyName ? [ {
                    objectName: scorecard_capabilities.A.scorecard.scorecardReference.objectName,
                    propertyName: scorecard_capabilities.A.scorecard.scorecardReference.propertyName,
                    propertyType: {
                        itemLocation: {}
                    },
                    propertyValue: {
                        byReference: {
                            itemId: processIdOrUrl(propertySaveObjects[0].propertyValue)
                        }
                    }
                } ] : propertySaveObjects;
            }, Scorecard.prototype.getSettings = function() {
                return this.settings;
            }, Object.defineProperty(Scorecard.prototype, "scorecardVisualType", {
                get: function() {
                    switch (this.settings.displayMode) {
                      case "list":
                        return "SingleMetricVisual";

                      case "tile":
                        return "MultipleMetricsVisual";

                      default:
                        return debug.fF.assertNever(this.settings.displayMode), "";
                    }
                },
                enumerable: !1,
                configurable: !0
            }), Scorecard.prototype.showSplashScreen = function(focusMode) {
                this.scorecardEmbed.reset(focusMode), this.setVisualState(this.featureSwitches.singleGoalVisual && !focusMode ? 2 : 0);
            }, Scorecard.prototype.buildSignInOverlay = function() {
                var options = {
                    actions: [],
                    description: this.host.getLocalizedString("ScorecardVisual_SignRequired_Info"),
                    title: this.host.getLocalizedString("Desktop_FileMenu_SignInDescription")
                };
                this.featureSwitches.singleGoalVisual && (options.description = void 0, options.title = this.host.getLocalizedString("ScorecardVisual_SignRequired_ForMetricVisual_Info")), 
                this.signInOverlay = this.buildOverlay(Scorecard.SignInOverlay, options);
            }, Scorecard.prototype.buildAddScorecardOverlay = function() {
                var _this = this, options = {
                    actions: [ {
                        action: function() {
                            _this.setVisualState(1), _this.scorecardEmbed.createScorecard(_this.featureSwitches.goalsDraftScorecards);
                        },
                        isPrimary: !0,
                        text: this.host.getLocalizedString("ScorecardVisual_CreateNewScorecard")
                    }, {
                        action: function() {
                            _this.setVisualState(1), _this.scorecardEmbed.showPicker();
                        },
                        isPrimary: !1,
                        text: this.host.getLocalizedString("ScorecardVisual_ConnectToScorecard")
                    } ],
                    description: this.host.getLocalizedString("ScorecardVisual_AddScorecard_Description"),
                    title: this.host.getLocalizedString("ScorecardVisual_AddScorecard")
                };
                this.splashScreenOverlay = this.buildOverlay(Scorecard.AddScorecardOverlay, options);
            }, Scorecard.prototype.buildDisplayModePickerOverlay = function() {
                var _this = this, options = {
                    actions: [ {
                        action: function() {
                            _this.setVisualState(1), _this.persistDisplayMode(_this.displayMode), _this.updateSettings({
                                displayMode: _this.displayMode,
                                showPickerToolbar: "tile" === _this.displayMode,
                                disableEdit: "tile" === _this.displayMode
                            }, !0), _this.host.telemetry().trace(2, "ScorecardBrowseFor".concat(_this.scorecardVisualType)), 
                            _this.scorecardEmbed.showPicker();
                        },
                        isPrimary: !1,
                        text: this.host.getLocalizedString("Scorecard_ViewMode_BrowseMetrics")
                    }, {
                        action: function() {
                            switch (_this.setVisualState(1), _this.persistDisplayMode(_this.displayMode), _this.updateSettings({
                                displayMode: _this.displayMode
                            }, !0), _this.host.telemetry().trace(2, "ScorecardCreate".concat(_this.scorecardVisualType)), 
                            _this.settings.displayMode) {
                              case "list":
                                _this.scorecardEmbed.createScorecard(_this.featureSwitches.goalsDraftScorecards);
                                break;

                              case "tile":
                                _this.scorecardEmbed.createGoal();
                                break;

                              default:
                                debug.fF.assertNever(_this.settings.displayMode);
                            }
                        },
                        isPrimary: !0,
                        text: this.host.getLocalizedString("Scorecard_ViewMode_CreateNew")
                    }, {
                        action: function() {
                            _this.host.telemetry().trace(2, "ScorecardDisplayModePickerCanceled"), _this.host.onSwitchFocusModeState(!1);
                        },
                        isPrimary: !1,
                        text: this.host.getLocalizedString("PBI_Button_Label_Cancel")
                    } ],
                    description: this.host.getLocalizedString("Scorecard_ViewMode_Description"),
                    title: this.host.getLocalizedString("Scorecard_ViewMode_Title")
                }, content = $("<div>").addClass("content"), singleGoalOption = $("<div>").addClass("display-mode-option").on("click", function() {
                    _this.displayMode = "tile";
                }), singleGoalOptionId = Utility.b$.generateGuid(), singleGoalInput = $('<input type="radio" name="displayMode" class="display-mode-option-radio" checked="true">').attr("id", singleGoalOptionId).attr("value", "tile");
                singleGoalOption.append(singleGoalInput);
                var singleGoalOptionLabel = $("<label>").addClass("display-mode-option-label").attr("for", singleGoalOptionId);
                singleGoalOption.append(singleGoalOptionLabel);
                var singleGoalOptionImageBackground = $("<div>").addClass("sample-visual-background-image sample-single-goal-background");
                singleGoalOptionLabel.append(singleGoalOptionImageBackground);
                var addMetricVisualString, singleGoalSampleImage = $("<div>").addClass("sample-image single-goal-sample-image");
                singleGoalOptionImageBackground.append(singleGoalSampleImage), addMetricVisualString = this.host.getLocalizedString(this.featureSwitches.multipleGoalTilesVisual ? "ScorecardVisual_DisplayModeOption_AddMetricVisual" : "ScorecardVisual_DisplayModeOption_AddSingleMetric");
                var singleGoalOptionLabelText = $('<p class="display-mode-option-label-text">').text(addMetricVisualString);
                singleGoalOptionLabel.append(singleGoalOptionLabelText), content.append(singleGoalOption);
                var multipleGoalsOption = $("<div>").addClass("display-mode-option").on("click", function() {
                    _this.displayMode = "list";
                }), multipleGoalsOptionId = Utility.b$.generateGuid(), multipleGoalsInput = $('<input type="radio" name="displayMode" class="display-mode-option-radio">').attr("id", multipleGoalsOptionId).attr("value", "list");
                multipleGoalsOption.append(multipleGoalsInput);
                var multipleGoalsOptionLabel = $("<label>").addClass("display-mode-option-label").attr("for", multipleGoalsOptionId);
                multipleGoalsOption.append(multipleGoalsOptionLabel);
                var multipleGoalsOptionImageBackground = $("<div>").addClass("sample-visual-background-image sample-multiple-goals-background");
                multipleGoalsOptionLabel.append(multipleGoalsOptionImageBackground);
                var mualtipleGoalsSampleImage = $("<div>").addClass("sample-image multiple-goals-sample-image");
                multipleGoalsOptionImageBackground.append(mualtipleGoalsSampleImage);
                var addMetricListString = this.host.getLocalizedString("ScorecardVisual_DisplayModeOption_AddMetricsList"), multipleGoalsOptionLabelText = $('<p class="display-mode-option-label-text">').text(addMetricListString);
                multipleGoalsOptionLabel.append(multipleGoalsOptionLabelText), content.append(multipleGoalsOption), 
                this.splashScreenOverlay = this.buildOverlay(Scorecard.DisplayModePickerOverlay, options, content), 
                this.featureSwitches.singleGoalVisual || (singleGoalOption.hide(), multipleGoalsInput.hide()), 
                this.updateDisplayPickerOption = function(displayMode) {
                    return "tile" === displayMode ? singleGoalInput.attr("checked", "true") : multipleGoalsInput.attr("checked", "true");
                };
            }, Scorecard.prototype.buildEmptyStateOverlay = function() {
                var _this = this, overlay = $("<div>").addClass(Scorecard.EmptyStateOverlay.class), sampleImageBackground = $("<div>").addClass("sample-visual-background-image");
                overlay.append(sampleImageBackground);
                var sampleImage = $("<div>").addClass("thumbnail-metric-image");
                sampleImageBackground.append(sampleImage);
                var content = $("<div>").addClass("content");
                overlay.append(content);
                var title = $("<div>").addClass("title").text(this.host.getLocalizedString("Scorecard_MetricVisual_TrackMetrics"));
                content.append(title);
                var description = $("<span>").addClass("description").text(this.host.getLocalizedString("ScorecardVisual_AddScorecard_Description"));
                content.append(description);
                var button = $("<button>").text(this.host.getLocalizedString("Scorecard_MetricVisual_AddMetrics")).addClass("pbi-fluent-button overlayButton primary").attr("disabled", 1).on(DOMConstants.G6, function() {
                    _this.host.telemetry().trace(2, "ScorecardVisualWorkflowStarted"), _this.showSplashScreen(!0);
                });
                content.append(button), overlay.hide(), this.container.append(overlay), this.emptyStateOverlay = overlay;
            }, Scorecard.prototype.getSignInReady = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var signinStatusSubscription, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.refreshToken() ];

                          case 1:
                            return _a.sent(), this.authenticationService.signInStatus$ && (signinStatusSubscription = this.authenticationService.signInStatus$.subscribe(function(event) {
                                return _this.onSignInChange(event);
                            }), this.subscriptions.push(signinStatusSubscription)), [ 2 ];
                        }
                    });
                });
            }, Scorecard.prototype.refreshToken = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var accessToken;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return _b.trys.push([ 0, 2, , 3 ]), [ 4, this.authenticationService.getSignedInAccessToken() ];

                          case 1:
                            return accessToken = _b.sent(), this.scorecardEmbed.setAccessToken(accessToken), 
                            this.setupTokenRefresh(accessToken), [ 3, 3 ];

                          case 2:
                            return _b.sent(), [ 3, 3 ];

                          case 3:
                            return (_.isUndefined(this.isSignedIn) || this.isSignedIn === !accessToken) && this.updateSignInVisualState(!!accessToken), 
                            [ 2 ];
                        }
                    });
                });
            }, Scorecard.prototype.setupTokenRefresh = function(accessToken) {
                var _this = this;
                if (null != accessToken) {
                    var parsedToken = this.getParsedJwt(accessToken);
                    if (void 0 !== parsedToken && null != parsedToken.exp) {
                        clearTimeout(this.tokenRefreshTimeoutId);
                        var timeoutInMs = 1e3 * parsedToken.exp - (new Date).getTime() - Constants.tokenExpiryBufferInMs;
                        this.tokenRefreshTimeoutId = setTimeout(function() {
                            _this.refreshToken();
                        }, Math.max(timeoutInMs, Constants.minTokenPollingIntervalInMs));
                    }
                }
            }, Scorecard.prototype.onSignInChange = function(event) {
                var accessToken = event.accessToken;
                event.isSignedIn ? (this.isSignedIn || this.scorecardEmbed.init(this.settings), 
                this.scorecardEmbed.setAccessToken(accessToken), this.setupTokenRefresh(accessToken)) : clearTimeout(this.tokenRefreshTimeoutId), 
                this.updateSignInVisualState(event.isSignedIn);
            }, Scorecard.prototype.getParsedJwt = function(token) {
                try {
                    return JSON.parse(atob(token.split(".")[1]));
                } catch (_a) {
                    return;
                }
            }, Scorecard.prototype.updateSignInVisualState = function(isSignedIn) {
                this.isSignedIn = isSignedIn, this.scorecardEmbed.scorecardId ? (this.scorecardEmbed.embedScorecard(this.scorecardEmbed.scorecardId, this.settings), 
                this.setVisualState(1)) : this.showSplashScreen(this.isInFocus);
            }, Scorecard.prototype.setVisualState = function(state) {
                var _a, _b, _c, _d;
                if (!this.isSignedIn) return this.signInOverlay.show(), this.splashScreenOverlay.hide(), 
                null === (_a = this.emptyStateOverlay) || void 0 === _a || _a.hide(), void this.scorecardEmbed.iFrame.hide();
                switch (state) {
                  case 0:
                    this.splashScreenOverlay.show(), this.scorecardEmbed.iFrame.hide(), this.signInOverlay.hide(), 
                    null === (_b = this.emptyStateOverlay) || void 0 === _b || _b.hide();
                    break;

                  case 1:
                    this.scorecardEmbed.iFrame.show(), this.splashScreenOverlay.hide(), this.signInOverlay.hide(), 
                    null === (_c = this.emptyStateOverlay) || void 0 === _c || _c.hide();
                    break;

                  case 2:
                    null === (_d = this.emptyStateOverlay) || void 0 === _d || _d.show(), this.scorecardEmbed.iFrame.hide(), 
                    this.splashScreenOverlay.hide(), this.signInOverlay.hide();
                }
            }, Scorecard.prototype.buildOverlay = function(selector, options, content) {
                var overlay = $("<div>").addClass(selector.class), title = $("<p>").addClass("title").text(options.title);
                overlay.append(title);
                var description = $("<p>").addClass("description").text(options.description);
                overlay.append(description);
                var link = $("<a>", {
                    text: this.host.getLocalizedString("Scorecard_Visual_LearnMore"),
                    target: "_blank",
                    href: "https://go.microsoft.com/fwlink/?linkid=2201389"
                });
                description.append(link);
                var overlayButtons = $("<div>").addClass("overlayButtons");
                content && (overlay.append(content), overlayButtons.addClass("with-top-border")), 
                overlay.append(overlayButtons);
                for (var _i = 0, _a = options.actions; _i < _a.length; _i++) {
                    var action = _a[_i], button = $("<button>").text(action.text).attr("disabled", 1).addClass("pbi-fluent-button overlayButton").on(DOMConstants.G6, action.action);
                    button.addClass(action.isPrimary ? "primary" : "nonPrimary"), overlayButtons.append(button);
                }
                return overlay.hide(), this.container.append(overlay), overlay;
            }, Scorecard.prototype.handleEmbedEvent = function(event) {
                var _a, _b;
                switch (event) {
                  case 0:
                    this.scorecardEmbed.scorecardId = void 0, this.host.onSwitchFocusModeState(!1), 
                    this.showSplashScreen(!1);
                    break;

                  case 1:
                    this.scorecardId = processIdOrUrl(this.scorecardEmbed.getScorecardUrl());
                    var changes = {
                        merge: [ {
                            objectName: scorecard_capabilities.A.scorecard.scorecardReference.objectName,
                            properties: (_a = {}, _a[scorecard_capabilities.A.scorecard.scorecardReference.propertyName] = {
                                byReference: {
                                    itemId: this.scorecardId
                                }
                            }, _a),
                            selector: null
                        } ]
                    };
                    this.host.persistProperties(changes);
                    break;

                  case 2:
                    this.scorecardEmbed.showPicker(), this.setVisualState(1);
                    break;

                  case 3:
                    var goalsChange = {
                        merge: [ {
                            objectName: scorecard_capabilities.A.scorecard.goalIds.objectName,
                            properties: (_b = {}, _b[scorecard_capabilities.A.scorecard.goalIds.propertyName] = this.scorecardEmbed.goalIds.toString(), 
                            _b),
                            selector: null
                        } ]
                    };
                    this.host.persistProperties(goalsChange), this.updateSettings({
                        filters: _.map(this.scorecardEmbed.goalIds, function(goalId) {
                            return {
                                goalId
                            };
                        }),
                        restoreGoalTile: !0
                    }, !0), this.scorecardEmbed.showGoalVisual(this.settings);
                    break;

                  case 4:
                    this.host.onSwitchFocusModeState(!0), this.updateSettings({
                        displayMode: "list",
                        openGoalDetailsType: "notes",
                        restoreGoalTile: !0,
                        hideCommandBar: !1,
                        showReplaceScorecard: !1,
                        hidePowerAutomate: !0,
                        showPickerToolbar: !0
                    }, !0), this.scorecardEmbed.openGoalNotes(this.settings);
                    break;

                  case 5:
                    this.host.onSwitchFocusModeState(!0), this.updateSettings({
                        isEditingGoal: !0,
                        displayMode: "list",
                        restoreGoalTile: !0,
                        hideCommandBar: !1,
                        showReplaceScorecard: !1,
                        hidePowerAutomate: !0,
                        showPickerToolbar: !0
                    }, !0), this.scorecardEmbed.restoreScorecard();
                    break;

                  case 6:
                    this.scorecardEmbed.clickContainer();
                }
            }, Scorecard.prototype.updateSettings = function(newSettings, merge) {
                void 0 === merge && (merge = !0), newSettings = newSettings || {}, this.settings = merge ? (0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.settings), newSettings) : newSettings, 
                this.scorecardEmbed.updateSettings(this.settings);
            }, Scorecard.prototype.persistDisplayMode = function(displayMode) {
                var _a, changes = {
                    merge: [ {
                        objectName: scorecard_capabilities.A.scorecard.displayMode.objectName,
                        properties: (_a = {}, _a[scorecard_capabilities.A.scorecard.displayMode.propertyName] = displayMode, 
                        _a),
                        selector: null
                    } ]
                };
                this.host.persistProperties(changes);
            }, Scorecard.ScorecardContainer = (0, CssConstants.CH)("scorecardContainer"), Scorecard.SignInOverlay = (0, 
            CssConstants.CH)("signInOverlay"), Scorecard.AddScorecardOverlay = (0, CssConstants.CH)("addScorecardOverlay"), 
            Scorecard.DisplayModePickerOverlay = (0, CssConstants.CH)("displayModePickerOverlay"), 
            Scorecard.EmptyStateOverlay = (0, CssConstants.CH)("emptyStateOverlay"), Scorecard;
        }();
        function processIdOrUrl(input) {
            var scorecardIdOrUrl = _.toLower(_.trim(input));
            return (0, urlUtils.HH)(scorecardIdOrUrl, !1) ? scorecardIdOrUrl.split("/scorecards/")[1] : scorecardIdOrUrl;
        }
    }
} ]);