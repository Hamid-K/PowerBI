using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.InfoNav.Explore.ExploreConverter.Internal
{
	// Token: 0x0200002A RID: 42
	internal class BaseRdlReportItemConverter : IRdlReportItemConverter
	{
		// Token: 0x0600013C RID: 316 RVA: 0x000064E2 File Offset: 0x000046E2
		public virtual bool SupportsTargetedScopeFilters(PVVisual visual)
		{
			return false;
		}

		// Token: 0x0600013D RID: 317 RVA: 0x000064E5 File Offset: 0x000046E5
		public virtual void Load(IReportDeserializationContext ctx, ReportItem reportItem, PVVisual visual)
		{
		}

		// Token: 0x0600013E RID: 318 RVA: 0x000064E7 File Offset: 0x000046E7
		public virtual void SetOutputValues(IReportDeserializationContext ctx, PVVisual visual, ReportItem reportItem)
		{
		}

		// Token: 0x0600013F RID: 319 RVA: 0x000064EC File Offset: 0x000046EC
		public virtual Dictionary<Formula, SortDirection> ToSorts(DataSet dataSet, List<SortExpression> sortExpressions)
		{
			Dictionary<Formula, SortDirection> dictionary = new Dictionary<Formula, SortDirection>();
			if (sortExpressions != null && sortExpressions.Count > 0)
			{
				foreach (SortExpression sortExpression in sortExpressions)
				{
					if (!sortExpression.AutoGenerated)
					{
						Formula formula = this.ExpressionToFormula(dataSet, sortExpression.Value);
						if (formula != null)
						{
							SortDirection direction = sortExpression.Direction;
							dictionary.Add(formula, direction);
						}
					}
				}
			}
			return dictionary;
		}

		// Token: 0x06000140 RID: 320 RVA: 0x00006570 File Offset: 0x00004770
		public void AppendUniqueSorts(Dictionary<Formula, SortDirection> target, Dictionary<Formula, SortDirection> source)
		{
			foreach (KeyValuePair<Formula, SortDirection> keyValuePair in source)
			{
				if (!target.Contains(keyValuePair))
				{
					target.Add(keyValuePair.Key, keyValuePair.Value);
				}
			}
		}

		// Token: 0x06000141 RID: 321 RVA: 0x000065D4 File Offset: 0x000047D4
		public Formula ExpressionToFormula(DataSet dataSet, Expression expression)
		{
			if (expression != null)
			{
				string fieldName = expression.FieldName;
				if (fieldName != null)
				{
					Field field = dataSet.FindField(fieldName);
					if (field != null)
					{
						return this.ParseFormula(field);
					}
				}
			}
			return null;
		}

		// Token: 0x06000142 RID: 322 RVA: 0x00006604 File Offset: 0x00004804
		public Formula ParseFormula(Field field)
		{
			IRdmQueryExpression expression = field.Expression;
			if (expression != null)
			{
				return QueryExpressionAnalyzer.CreateFormula(expression);
			}
			return null;
		}

		// Token: 0x06000143 RID: 323 RVA: 0x00006624 File Offset: 0x00004824
		public Formula ParseFormula(IReportDeserializationContext ctx, string fieldName)
		{
			Field field = ctx.FindDataSetField(fieldName);
			if (field != null)
			{
				return this.ParseFormula(field);
			}
			return null;
		}

		// Token: 0x06000144 RID: 324 RVA: 0x00006648 File Offset: 0x00004848
		public Bucket CreateAndAddBucket(DataContext dataContext, string bucketName)
		{
			Bucket bucket = new Bucket
			{
				Name = bucketName,
				BucketItems = new List<BucketItem>(),
				Properties = new List<BucketProperty>()
			};
			dataContext.Buckets.Add(bucket);
			return bucket;
		}

		// Token: 0x06000145 RID: 325 RVA: 0x00006688 File Offset: 0x00004888
		public void AddToBucketIfNotNull(Bucket bucket, DataSet dataSet, Expression expression)
		{
			if (expression != null)
			{
				string fieldName = expression.FieldName;
				if (fieldName != null)
				{
					this.AddExtractedFieldToBucketIfNotNull(bucket, dataSet, fieldName);
				}
			}
		}

		// Token: 0x06000146 RID: 326 RVA: 0x000066AC File Offset: 0x000048AC
		public void AddToBucketIfNotNull(IReportDeserializationContext ctx, ReportItem reportItem, Bucket bucket)
		{
			if ("Textbox" == reportItem.RdlTagName)
			{
				Expression firstValue = (reportItem as Textbox).FirstValue;
				this.AddToBucketIfNotNull(bucket, ctx.GetCurrentDataSet(), firstValue);
				return;
			}
			if ("Image" == reportItem.RdlTagName)
			{
				Image image = reportItem as Image;
				this.AddImageToBucketIfNotNull(ctx, image, bucket);
				return;
			}
			if ("GaugePanel" == reportItem.RdlTagName)
			{
				Expression firstValue2 = (reportItem as GaugePanel).FirstValue;
				this.AddToBucketIfNotNull(bucket, ctx.GetCurrentDataSet(), firstValue2);
				return;
			}
			throw new InvalidOperationException("Unsupported report item.");
		}

		// Token: 0x06000147 RID: 327 RVA: 0x00006740 File Offset: 0x00004940
		public void AddImageToBucketIfNotNull(IReportDeserializationContext ctx, Image image, Bucket valuesBucket)
		{
			Expression valueAsExpression = image.Source.ValueAsExpression;
			string dataSetName = image.DataSetName;
			DataSet dataSet = ((dataSetName == null) ? ctx.GetCurrentDataSet() : ctx.GetDataSetByName(dataSetName));
			this.AddToBucketIfNotNull(valuesBucket, dataSet, valueAsExpression);
		}

		// Token: 0x06000148 RID: 328 RVA: 0x0000677C File Offset: 0x0000497C
		public void AddExtractedFieldToBucketIfNotNull(Bucket bucket, DataSet dataSet, string fieldExpr)
		{
			Field field = dataSet.FindField(fieldExpr);
			if (field != null)
			{
				Formula formula = this.ParseFormula(field);
				Contract.Check(formula != null, "Invalid field reference");
				bool? outerJoin = field.OuterJoin;
				bucket.BucketItems.Add(new BucketItem
				{
					Formula = formula,
					ShowItemsWithNoData = outerJoin
				});
			}
		}

		// Token: 0x06000149 RID: 329 RVA: 0x000067CF File Offset: 0x000049CF
		public bool IsEnabled()
		{
			return true;
		}

		// Token: 0x0600014A RID: 330 RVA: 0x000067D4 File Offset: 0x000049D4
		public ReportItemState GetReportItemState(IReportDeserializationContext ctx, ReportItem reportItem)
		{
			ReportItemState reportItemState = null;
			ReportSectionState currentReportSectionState = ctx.GetCurrentReportSectionState();
			if (currentReportSectionState != null)
			{
				reportItemState = currentReportSectionState.FindReportItem(reportItem.Name);
			}
			return reportItemState;
		}

		// Token: 0x0600014B RID: 331 RVA: 0x000067FB File Offset: 0x000049FB
		public virtual void SetProperties(PVVisual visual)
		{
		}

		// Token: 0x0600014C RID: 332 RVA: 0x000067FD File Offset: 0x000049FD
		public virtual PVVisual GetParentForFilter(PVVisual visual, Filter filter)
		{
			return visual.Visuals.Where((PVVisual v) => v.Type == "FilterVisual").First<PVVisual>();
		}

		// Token: 0x0600014D RID: 333 RVA: 0x0000682E File Offset: 0x00004A2E
		protected virtual PVVisual ResolveVisualToSetDrillStateTo(PVVisual topLevelVisual)
		{
			return topLevelVisual;
		}

		// Token: 0x0600014E RID: 334 RVA: 0x00006834 File Offset: 0x00004A34
		public void SetDrill(PVVisual topLevelVisual, List<Filter> drillDownFilters)
		{
			PVVisual pvvisual = this.ResolveVisualToSetDrillStateTo(topLevelVisual);
			Contract.CheckValue<PVVisual>(pvvisual, "visualDefinition");
			DataContext dataContext = pvvisual.DataContext;
			if (dataContext == null)
			{
				return;
			}
			Dictionary<Filter, Formula> dictionary = new Dictionary<Filter, Formula>();
			foreach (Filter filter in drillDownFilters)
			{
				dictionary[filter] = QueryExpressionAnalyzer.CreateFormula(filter.Operand);
			}
			foreach (Bucket bucket in dataContext.Buckets)
			{
				DrillingManager drillingManager = DrillingManager.CreateDrillingManager(pvvisual.Type, bucket.Name);
				if (drillingManager.IsInDrillingMode(bucket))
				{
					BucketItem drillBucketItem = this.GetDrillBucketItem(bucket, drillDownFilters, dictionary);
					drillingManager.InitializeForDrilling(bucket, pvvisual, drillBucketItem);
				}
			}
		}

		// Token: 0x0600014F RID: 335 RVA: 0x00006928 File Offset: 0x00004B28
		public BucketItem GetDrillBucketItem(Bucket bucket, List<Filter> drillDownFilters, Dictionary<Filter, Formula> operandFormulaMap)
		{
			List<BucketItem> bucketItems = bucket.BucketItems;
			if (bucketItems.Count == 0)
			{
				return null;
			}
			BucketItem bucketItem = bucketItems.First<BucketItem>();
			if (drillDownFilters.Count == 0)
			{
				return bucketItem;
			}
			BucketItem bucketItem2 = null;
			foreach (BucketItem bucketItem3 in bucketItems.AsEnumerable<BucketItem>().Reverse<BucketItem>())
			{
				if (bucketItem2 != null)
				{
					foreach (Filter filter in drillDownFilters)
					{
						Formula formula;
						operandFormulaMap.TryGetValue(filter, out formula);
						if (formula != null && bucketItem3.Formula.Equals(formula))
						{
							return bucketItem2;
						}
					}
				}
				bucketItem2 = bucketItem3;
			}
			return bucketItem;
		}
	}
}
