using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using antlr;
using antlr.collections.impl;

namespace Microsoft.Mashup.ScriptDom
{
	// Token: 0x020000D4 RID: 212
	internal class TSql110ParserInternal : TSql110ParserBaseInternal
	{
		// Token: 0x06000A4A RID: 2634 RVA: 0x00020E76 File Offset: 0x0001F076
		public TSql110ParserInternal(bool initialQuotedIdentifiersOn)
			: base(initialQuotedIdentifiersOn)
		{
			this.initialize();
		}

		// Token: 0x06000A4B RID: 2635 RVA: 0x00020E85 File Offset: 0x0001F085
		protected void initialize()
		{
			this.tokenNames = TSql110ParserInternal.tokenNames_;
		}

		// Token: 0x06000A4C RID: 2636 RVA: 0x00020E92 File Offset: 0x0001F092
		protected TSql110ParserInternal(TokenBuffer tokenBuf, int k)
			: base(tokenBuf, k)
		{
			this.initialize();
		}

		// Token: 0x06000A4D RID: 2637 RVA: 0x00020EA2 File Offset: 0x0001F0A2
		public TSql110ParserInternal(TokenBuffer tokenBuf)
			: this(tokenBuf, 2)
		{
		}

		// Token: 0x06000A4E RID: 2638 RVA: 0x00020EAC File Offset: 0x0001F0AC
		protected TSql110ParserInternal(TokenStream lexer, int k)
			: base(lexer, k)
		{
			this.initialize();
		}

		// Token: 0x06000A4F RID: 2639 RVA: 0x00020EBC File Offset: 0x0001F0BC
		public TSql110ParserInternal(TokenStream lexer)
			: this(lexer, 2)
		{
		}

		// Token: 0x06000A50 RID: 2640 RVA: 0x00020EC6 File Offset: 0x0001F0C6
		public TSql110ParserInternal(ParserSharedInputState state)
			: base(state, 2)
		{
			this.initialize();
		}

		// Token: 0x06000A51 RID: 2641 RVA: 0x00020ED8 File Offset: 0x0001F0D8
		public ChildObjectName entryPointChildObjectName()
		{
			ChildObjectName childObjectName = this.childObjectNameWithThreePrefixes();
			this.match(1);
			return childObjectName;
		}

		// Token: 0x06000A52 RID: 2642 RVA: 0x00020EF8 File Offset: 0x0001F0F8
		public ChildObjectName childObjectNameWithThreePrefixes()
		{
			ChildObjectName childObjectName = base.FragmentFactory.CreateFragment<ChildObjectName>();
			List<Identifier> list = this.identifierList(4);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(childObjectName, childObjectName.Identifiers, list);
			}
			return childObjectName;
		}

		// Token: 0x06000A53 RID: 2643 RVA: 0x00020F34 File Offset: 0x0001F134
		public SchemaObjectName entryPointSchemaObjectName()
		{
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			this.match(1);
			return schemaObjectName;
		}

		// Token: 0x06000A54 RID: 2644 RVA: 0x00020F54 File Offset: 0x0001F154
		public SchemaObjectName schemaObjectFourPartName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			List<Identifier> list = this.identifierList(4);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, list);
			}
			return schemaObjectName;
		}

		// Token: 0x06000A55 RID: 2645 RVA: 0x00020F90 File Offset: 0x0001F190
		public DataTypeReference entryPointScalarDataType()
		{
			DataTypeReference dataTypeReference = this.scalarDataType();
			this.match(1);
			return dataTypeReference;
		}

		// Token: 0x06000A56 RID: 2646 RVA: 0x00020FB0 File Offset: 0x0001F1B0
		public DataTypeReference scalarDataType()
		{
			SqlDataTypeOption sqlDataTypeOption = SqlDataTypeOption.None;
			bool flag = false;
			int num = this.LA(1);
			DataTypeReference dataTypeReference;
			if (num != 53)
			{
				if (num != 96)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						SchemaObjectName schemaObjectName = this.dataTypeSchemaObjectName();
						if (this.inputState.guessing == 0 && (schemaObjectName.SchemaIdentifier == null || (schemaObjectName.SchemaIdentifier != null && TSql90ParserBaseInternal.IsSys(schemaObjectName.SchemaIdentifier))))
						{
							sqlDataTypeOption = TSql100ParserBaseInternal.ParseDataType100(schemaObjectName.BaseIdentifier.Value);
							flag = TSql90ParserBaseInternal.IsXml(schemaObjectName.BaseIdentifier);
						}
						if (TSql110ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_1_.member(this.LA(2)) && flag)
						{
							dataTypeReference = this.xmlDataType(schemaObjectName);
						}
						else if (TSql110ParserInternal.tokenSet_2_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_1_.member(this.LA(2)) && sqlDataTypeOption != SqlDataTypeOption.None)
						{
							dataTypeReference = this.sqlDataTypeWithoutNational(schemaObjectName, sqlDataTypeOption);
						}
						else
						{
							if (!TSql110ParserInternal.tokenSet_0_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_1_.member(this.LA(2)))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							dataTypeReference = this.userDataType(schemaObjectName);
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					dataTypeReference = this.sqlDataTypeWithNational();
				}
			}
			else
			{
				dataTypeReference = this.doubleDataType();
			}
			return dataTypeReference;
		}

		// Token: 0x06000A57 RID: 2647 RVA: 0x0002111C File Offset: 0x0001F31C
		public ScalarExpression entryPointExpression()
		{
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(1);
			return scalarExpression;
		}

		// Token: 0x06000A58 RID: 2648 RVA: 0x0002113C File Offset: 0x0001F33C
		public ScalarExpression expression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			return this.expressionBinaryPri2(expressionFlags);
		}

		// Token: 0x06000A59 RID: 2649 RVA: 0x00021154 File Offset: 0x0001F354
		public BooleanExpression entryPointBooleanExpression()
		{
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			this.match(1);
			return booleanExpression;
		}

		// Token: 0x06000A5A RID: 2650 RVA: 0x00021174 File Offset: 0x0001F374
		public BooleanExpression booleanExpression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			return this.booleanExpressionOr(expressionFlags);
		}

		// Token: 0x06000A5B RID: 2651 RVA: 0x0002118C File Offset: 0x0001F38C
		public StatementList entryPointStatementList()
		{
			bool flag = false;
			StatementList statementList = this.statementList(ref flag);
			if (this.inputState.guessing == 0 && flag)
			{
				statementList = null;
			}
			this.match(1);
			return statementList;
		}

		// Token: 0x06000A5C RID: 2652 RVA: 0x000211C0 File Offset: 0x0001F3C0
		public StatementList statementList(ref bool vParseErrorOccurred)
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			int num = 0;
			while (TSql110ParserInternal.tokenSet_3_.member(this.LA(1)))
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
					}
					else
					{
						vParseErrorOccurred = true;
					}
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return statementList;
		}

		// Token: 0x06000A5D RID: 2653 RVA: 0x00021238 File Offset: 0x0001F438
		public SelectStatement entryPointSubqueryExpressionWithOptionalCTE()
		{
			SelectStatement selectStatement = this.subqueryExpressionWithOptionalCTE();
			this.match(1);
			return selectStatement;
		}

		// Token: 0x06000A5E RID: 2654 RVA: 0x00021258 File Offset: 0x0001F458
		public SelectStatement subqueryExpressionWithOptionalCTE()
		{
			SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
			int num = this.LA(1);
			if (num != 140)
			{
				if (num != 171)
				{
					if (num != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
					if (this.inputState.guessing == 0)
					{
						selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
					}
				}
			}
			QueryExpression queryExpression = this.subqueryExpression(SubDmlFlags.SelectNotForInsert);
			if (this.inputState.guessing == 0)
			{
				selectStatement.QueryExpression = queryExpression;
			}
			return selectStatement;
		}

		// Token: 0x06000A5F RID: 2655 RVA: 0x000212E0 File Offset: 0x0001F4E0
		public IPv4 entryPointIPv4Address()
		{
			IPv4 pv = this.ipAddressV4();
			this.match(1);
			return pv;
		}

		// Token: 0x06000A60 RID: 2656 RVA: 0x00021300 File Offset: 0x0001F500
		public IPv4 ipAddressV4()
		{
			IPv4 pv = base.FragmentFactory.CreateFragment<IPv4>();
			switch (this.LA(1))
			{
			case 221:
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					pv.OctetOne = literal;
				}
				int num = this.LA(1);
				if (num != 200)
				{
					if (num != 222)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(222);
					if (this.inputState.guessing == 0)
					{
						pv.OctetTwo = base.GetIPv4FragmentFromDotNumberNumeric(token);
					}
					int num2 = this.LA(1);
					if (num2 != 200)
					{
						if (num2 != 222)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token2 = this.LT(1);
						this.match(222);
						this.ipV4DotNumberTail(pv);
						if (this.inputState.guessing == 0)
						{
							pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token2);
						}
					}
					else
					{
						this.ipV4DotLastTwoPartsTail(pv);
					}
				}
				else
				{
					this.match(200);
					switch (this.LA(1))
					{
					case 221:
					{
						Literal literal2 = this.integer();
						if (this.inputState.guessing == 0)
						{
							pv.OctetTwo = literal2;
						}
						int num3 = this.LA(1);
						if (num3 != 200)
						{
							if (num3 != 222)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							IToken token3 = this.LT(1);
							this.match(222);
							this.ipV4DotNumberTail(pv);
							if (this.inputState.guessing == 0)
							{
								pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token3);
							}
						}
						else
						{
							this.ipV4DotLastTwoPartsTail(pv);
						}
						break;
					}
					case 222:
					{
						IToken token4 = this.LT(1);
						this.match(222);
						int num4 = this.LA(1);
						if (num4 != 200)
						{
							switch (num4)
							{
							case 221:
							{
								Literal literal2 = this.integer();
								this.ipV4DotNumberTail(pv);
								if (this.inputState.guessing == 0)
								{
									pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token4);
									pv.OctetThree = literal2;
								}
								break;
							}
							case 222:
							{
								IToken token5 = this.LT(1);
								this.match(222);
								int num5 = this.LA(1);
								if (num5 <= 192)
								{
									if (num5 != 1 && num5 != 192)
									{
										goto IL_0657;
									}
								}
								else if (num5 != 202)
								{
									if (num5 != 221)
									{
										goto IL_0657;
									}
									Literal literal2 = this.integer();
									if (this.inputState.guessing == 0)
									{
										pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token4);
										pv.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token5);
										pv.OctetFour = literal2;
										break;
									}
									break;
								}
								if (this.inputState.guessing != 0)
								{
									break;
								}
								Literal literal3;
								Literal literal4;
								if (base.SplitNumericIntoIpParts(token4, out literal3, out literal4))
								{
									pv.OctetTwo = literal3;
									pv.OctetThree = literal4;
									pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token5);
									break;
								}
								base.GetIPv4FragmentsFromNumberDotNumberNumeric(token5, out literal3, out literal4);
								pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token4);
								pv.OctetThree = literal3;
								pv.OctetFour = literal4;
								break;
								IL_0657:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							default:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(200);
							Literal literal2 = this.integer();
							if (this.inputState.guessing == 0)
							{
								Literal literal3;
								Literal literal4;
								base.GetIPv4FragmentsFromNumberDotNumberNumeric(token4, out literal3, out literal4);
								pv.OctetTwo = literal3;
								pv.OctetThree = literal4;
								pv.OctetFour = literal2;
							}
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				break;
			}
			case 222:
			{
				IToken token6 = this.LT(1);
				this.match(222);
				int num6 = this.LA(1);
				if (num6 != 200)
				{
					switch (num6)
					{
					case 221:
					{
						Literal literal = this.integer();
						if (this.inputState.guessing == 0)
						{
							pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
							pv.OctetTwo = literal;
						}
						int num7 = this.LA(1);
						if (num7 != 200)
						{
							if (num7 != 222)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							IToken token7 = this.LT(1);
							this.match(222);
							this.ipV4DotNumberTail(pv);
							if (this.inputState.guessing == 0)
							{
								pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token7);
							}
						}
						else
						{
							this.ipV4DotLastTwoPartsTail(pv);
						}
						break;
					}
					case 222:
					{
						IToken token8 = this.LT(1);
						this.match(222);
						int num8 = this.LA(1);
						if (num8 != 200)
						{
							switch (num8)
							{
							case 221:
							{
								Literal literal = this.integer();
								this.ipV4DotNumberTail(pv);
								if (this.inputState.guessing == 0)
								{
									pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
									pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token8);
									pv.OctetThree = literal;
								}
								break;
							}
							case 222:
							{
								IToken token9 = this.LT(1);
								this.match(222);
								int num9 = this.LA(1);
								if (num9 <= 192)
								{
									if (num9 != 1 && num9 != 192)
									{
										goto IL_0226;
									}
								}
								else if (num9 != 202)
								{
									if (num9 != 221)
									{
										goto IL_0226;
									}
									Literal literal = this.integer();
									if (this.inputState.guessing == 0)
									{
										pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
										pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token8);
										pv.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token9);
										pv.OctetFour = literal;
										break;
									}
									break;
								}
								if (this.inputState.guessing != 0)
								{
									break;
								}
								Literal literal3;
								Literal literal4;
								if (base.SplitNumericIntoIpParts(token6, out literal3, out literal4))
								{
									pv.OctetOne = literal3;
									pv.OctetTwo = literal4;
									pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token8);
									pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token9);
									break;
								}
								if (base.SplitNumericIntoIpParts(token8, out literal3, out literal4))
								{
									pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
									pv.OctetTwo = literal3;
									pv.OctetThree = literal4;
									pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token9);
									break;
								}
								base.GetIPv4FragmentsFromNumberDotNumberNumeric(token9, out literal3, out literal4);
								pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
								pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token8);
								pv.OctetThree = literal3;
								pv.OctetFour = literal4;
								break;
								IL_0226:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							default:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(200);
							Literal literal = this.integer();
							if (this.inputState.guessing == 0)
							{
								Literal literal3;
								Literal literal4;
								if (base.SplitNumericIntoIpParts(token6, out literal3, out literal4))
								{
									pv.OctetOne = literal3;
									pv.OctetTwo = literal4;
									pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token8);
								}
								else
								{
									base.GetIPv4FragmentsFromNumberDotNumberNumeric(token8, out literal3, out literal4);
									pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
									pv.OctetTwo = literal3;
									pv.OctetThree = literal4;
								}
								pv.OctetFour = literal;
							}
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.ipV4DotLastTwoPartsTail(pv);
					if (this.inputState.guessing == 0)
					{
						Literal literal3;
						Literal literal4;
						base.GetIPv4FragmentsFromNumberDotNumberNumeric(token6, out literal3, out literal4);
						pv.OctetOne = literal3;
						pv.OctetTwo = literal4;
					}
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return pv;
		}

		// Token: 0x06000A61 RID: 2657 RVA: 0x00021AD8 File Offset: 0x0001FCD8
		public TSqlFragment entryPointConstantOrIdentifier()
		{
			TSqlFragment tsqlFragment = this.possibleNegativeConstantOrIdentifier();
			this.match(1);
			return tsqlFragment;
		}

		// Token: 0x06000A62 RID: 2658 RVA: 0x00021AF8 File Offset: 0x0001FCF8
		public ScalarExpression possibleNegativeConstantOrIdentifier()
		{
			int num = this.LA(1);
			if (num <= 193)
			{
				if (num != 100 && num != 193)
				{
					goto IL_007F;
				}
			}
			else if (num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_007F;
				case 232:
				case 233:
					return this.identifierLiteral();
				default:
					goto IL_007F;
				}
			}
			return this.possibleNegativeConstant();
			IL_007F:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000A63 RID: 2659 RVA: 0x00021B98 File Offset: 0x0001FD98
		public TSqlFragment entryPointConstantOrIdentifierWithDefault()
		{
			TSqlFragment tsqlFragment = this.possibleNegativeConstantOrIdentifierWithDefault();
			this.match(1);
			return tsqlFragment;
		}

		// Token: 0x06000A64 RID: 2660 RVA: 0x00021BB8 File Offset: 0x0001FDB8
		public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault()
		{
			int num = this.LA(1);
			if (num <= 100)
			{
				if (num == 47)
				{
					return this.defaultLiteral();
				}
				if (num != 100)
				{
					goto IL_0081;
				}
			}
			else if (num != 193 && num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_0081;
				default:
					goto IL_0081;
				}
			}
			return this.possibleNegativeConstantOrIdentifier();
			IL_0081:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000A65 RID: 2661 RVA: 0x00021C5C File Offset: 0x0001FE5C
		public TSqlScript script()
		{
			TSqlScript tsqlScript = base.FragmentFactory.CreateFragment<TSqlScript>();
			if (tsqlScript.ScriptTokenStream != null && tsqlScript.ScriptTokenStream.Count > 0)
			{
				tsqlScript.UpdateTokenInfo(0, tsqlScript.ScriptTokenStream.Count - 1);
			}
			TSqlBatch tsqlBatch = this.batch();
			if (this.inputState.guessing == 0 && tsqlBatch != null)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlBatch>(tsqlScript, tsqlScript.Batches, tsqlBatch);
			}
			while (this.LA(1) == 219)
			{
				this.match(219);
				if (this.inputState.guessing == 0)
				{
					base.ResetQuotedIdentifiersSettingToInitial();
					base.ThrowPartialAstIfPhaseOne(null);
				}
				tsqlBatch = this.batch();
				if (this.inputState.guessing == 0 && tsqlBatch != null)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlBatch>(tsqlScript, tsqlScript.Batches, tsqlBatch);
				}
			}
			IToken token = this.LT(1);
			this.match(1);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlScript, token);
			}
			return tsqlScript;
		}

		// Token: 0x06000A66 RID: 2662 RVA: 0x00021D44 File Offset: 0x0001FF44
		public TSqlBatch batch()
		{
			TSqlBatch tsqlBatch = null;
			try
			{
				while (this.LA(1) == 204)
				{
					this.LT(1);
					this.match(204);
				}
				bool flag = false;
				if ((this.LA(1) == 6 || this.LA(1) == 35 || this.LA(1) == 162) && TSql110ParserInternal.tokenSet_4_.member(this.LA(2)))
				{
					int num = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						int num2 = this.LA(1);
						if (num2 != 6)
						{
							if (num2 != 35)
							{
								if (num2 != 162)
								{
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
								this.match(162);
								if (!base.NextTokenMatches("FEDERATION") || this.LA(2) != 232)
								{
									throw new SemanticException("NextTokenMatches(CodeGenerationSupporter.Federation) && LA(2) == Identifier");
								}
							}
							else
							{
								this.match(35);
								int num3 = this.LA(1);
								if (num3 <= 121)
								{
									if (num3 == 47)
									{
										this.match(47);
										goto IL_028E;
									}
									if (num3 == 73)
									{
										this.match(73);
										goto IL_028E;
									}
									switch (num3)
									{
									case 120:
										this.match(120);
										goto IL_028E;
									case 121:
										this.match(121);
										goto IL_028E;
									}
								}
								else
								{
									switch (num3)
									{
									case 137:
										this.match(137);
										goto IL_028E;
									case 138:
										break;
									case 139:
										this.match(139);
										goto IL_028E;
									default:
										if (num3 == 155)
										{
											this.match(155);
											goto IL_028E;
										}
										if (num3 == 166)
										{
											this.match(166);
											goto IL_028E;
										}
										break;
									}
								}
								if (!base.NextTokenMatches("FEDERATION"))
								{
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
							}
						}
						else
						{
							this.match(6);
							int num4 = this.LA(1);
							if (num4 <= 121)
							{
								if (num4 == 73)
								{
									this.match(73);
									goto IL_028E;
								}
								switch (num4)
								{
								case 120:
									this.match(120);
									goto IL_028E;
								case 121:
									this.match(121);
									goto IL_028E;
								}
							}
							else
							{
								if (num4 == 155)
								{
									this.match(155);
									goto IL_028E;
								}
								if (num4 == 166)
								{
									this.match(166);
									goto IL_028E;
								}
							}
							if (!base.NextTokenMatches("FEDERATION"))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						IL_028E:;
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(num);
					this.inputState.guessing--;
				}
				if (flag)
				{
					TSqlStatement tsqlStatement = this.lastStatementOptSemi();
					if (this.inputState.guessing == 0 && tsqlStatement != null)
					{
						if (tsqlBatch == null)
						{
							tsqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
						}
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(tsqlBatch, tsqlBatch.Statements, tsqlStatement);
					}
				}
				else
				{
					if (!TSql110ParserInternal.tokenSet_5_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_6_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					TSqlStatement tsqlStatement = this.optSimpleExecute();
					if (this.inputState.guessing == 0 && tsqlStatement != null)
					{
						base.ThrowPartialAstIfPhaseOne(tsqlStatement);
						if (tsqlBatch == null)
						{
							tsqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
						}
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(tsqlBatch, tsqlBatch.Statements, tsqlStatement);
					}
					while (TSql110ParserInternal.tokenSet_3_.member(this.LA(1)))
					{
						tsqlStatement = this.statementOptSemi();
						if (this.inputState.guessing == 0 && tsqlStatement != null)
						{
							if (tsqlBatch == null)
							{
								tsqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
							}
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(tsqlBatch, tsqlBatch.Statements, tsqlStatement);
						}
					}
				}
			}
			catch (TSqlParseErrorException ex)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (!ex.DoNotLog)
				{
					base.AddParseError(ex.ParseError);
				}
				base.RecoverAtBatchLevel();
			}
			catch (NoViableAltException ex2)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex2.token, ex2, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError);
				base.RecoverAtBatchLevel();
			}
			catch (MismatchedTokenException ex3)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError2 = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex3.token, ex3, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError2);
				base.RecoverAtBatchLevel();
			}
			catch (RecognitionException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError unexpectedTokenError = base.GetUnexpectedTokenError();
				base.AddParseError(unexpectedTokenError);
				base.RecoverAtBatchLevel();
			}
			catch (TokenStreamRecognitionException ex4)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError parseError = TSql80ParserBaseInternal.ProcessTokenStreamRecognitionException(ex4, this._tokenSource.LastToken.Offset);
				base.AddParseError(parseError);
				base.RecoverAtBatchLevel();
			}
			catch (ANTLRException ex5)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				base.CreateInternalError("batch", ex5);
			}
			return tsqlBatch;
		}

		// Token: 0x06000A67 RID: 2663 RVA: 0x000222FC File Offset: 0x000204FC
		public TSqlStatement lastStatementOptSemi()
		{
			TSqlStatement tsqlStatement = this.lastStatement();
			this.optSemicolons(tsqlStatement);
			return tsqlStatement;
		}

		// Token: 0x06000A68 RID: 2664 RVA: 0x0002231C File Offset: 0x0002051C
		public ExecuteStatement optSimpleExecute()
		{
			ExecuteStatement executeStatement = null;
			if (TSql110ParserInternal.tokenSet_7_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_8_.member(this.LA(2)) && !base.NextTokenMatches("DISABLE") && !base.NextTokenMatches("ENABLE") && !base.NextTokenMatches("MOVE") && !base.NextTokenMatches("GET") && !base.NextTokenMatches("RECEIVE") && !base.NextTokenMatches("SEND") && !base.NextTokenMatches("THROW"))
			{
				ExecutableProcedureReference executableProcedureReference = this.execProc();
				if (this.inputState.guessing == 0)
				{
					executeStatement = base.FragmentFactory.CreateFragment<ExecuteStatement>();
					ExecuteSpecification executeSpecification = base.FragmentFactory.CreateFragment<ExecuteSpecification>();
					executeSpecification.ExecutableEntity = executableProcedureReference;
					executeStatement.ExecuteSpecification = executeSpecification;
				}
				this.optSemicolons(executeStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_9_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executeStatement;
		}

		// Token: 0x06000A69 RID: 2665 RVA: 0x00022438 File Offset: 0x00020638
		public TSqlStatement statementOptSemi()
		{
			TSqlStatement tsqlStatement = this.statement();
			this.optSemicolons(tsqlStatement);
			return tsqlStatement;
		}

		// Token: 0x06000A6A RID: 2666 RVA: 0x00022458 File Offset: 0x00020658
		public TSqlStatement statement()
		{
			TSqlStatement tsqlStatement = null;
			int line = this.LT(1).getLine();
			int column = this.LT(1).getColumn();
			try
			{
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 33)
					{
						if (num <= 17)
						{
							if (num == 4)
							{
								tsqlStatement = this.addSignatureStatement();
								goto IL_0646;
							}
							switch (num)
							{
							case 12:
								tsqlStatement = this.backupStatements();
								goto IL_0646;
							case 13:
								tsqlStatement = this.beginStatements();
								goto IL_0646;
							case 15:
								tsqlStatement = this.breakStatement();
								goto IL_0646;
							case 17:
								tsqlStatement = this.bulkInsertStatement();
								goto IL_0646;
							}
						}
						else
						{
							switch (num)
							{
							case 22:
								tsqlStatement = this.checkpointStatement();
								goto IL_0646;
							case 23:
								tsqlStatement = this.closeStatements();
								goto IL_0646;
							default:
								if (num == 28)
								{
									tsqlStatement = this.commitTransactionStatement();
									goto IL_0646;
								}
								if (num == 33)
								{
									tsqlStatement = this.continueStatement();
									goto IL_0646;
								}
								break;
							}
						}
					}
					else if (num <= 64)
					{
						switch (num)
						{
						case 44:
							tsqlStatement = this.dbccStatement();
							goto IL_0646;
						case 45:
							tsqlStatement = this.deallocateCursorStatement();
							goto IL_0646;
						case 46:
							tsqlStatement = this.declareStatements();
							goto IL_0646;
						case 47:
						case 48:
							break;
						case 49:
							tsqlStatement = this.denyStatement90();
							goto IL_0646;
						default:
							switch (num)
							{
							case 54:
								tsqlStatement = this.dropStatements();
								goto IL_0646;
							case 55:
								break;
							case 56:
								tsqlStatement = this.endConversationStatement();
								goto IL_0646;
							default:
								if (num == 64)
								{
									tsqlStatement = this.fetchCursorStatement();
									goto IL_0646;
								}
								break;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 74:
							tsqlStatement = this.gotoStatement();
							goto IL_0646;
						case 75:
							tsqlStatement = this.grantStatement90();
							goto IL_0646;
						default:
							if (num == 82)
							{
								tsqlStatement = this.ifStatement();
								goto IL_0646;
							}
							if (num == 92)
							{
								tsqlStatement = this.killStatements();
								goto IL_0646;
							}
							break;
						}
					}
				}
				else if (num <= 156)
				{
					if (num <= 119)
					{
						if (num == 95)
						{
							tsqlStatement = this.lineNoStatement();
							goto IL_0646;
						}
						if (num == 106)
						{
							tsqlStatement = this.openStatements();
							goto IL_0646;
						}
						if (num == 119)
						{
							tsqlStatement = this.printStatement();
							goto IL_0646;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
							tsqlStatement = this.raiseErrorStatement();
							goto IL_0646;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
							break;
						case 125:
							tsqlStatement = this.readTextStatement();
							goto IL_0646;
						case 126:
							tsqlStatement = this.reconfigureStatement();
							goto IL_0646;
						case 129:
							tsqlStatement = this.restoreStatements();
							goto IL_0646;
						case 131:
							tsqlStatement = this.returnStatement();
							goto IL_0646;
						case 132:
							tsqlStatement = this.revokeStatement90();
							goto IL_0646;
						case 134:
							tsqlStatement = this.rollbackTransactionStatement();
							goto IL_0646;
						default:
							switch (num)
							{
							case 138:
								tsqlStatement = this.saveTransactionStatement();
								goto IL_0646;
							case 139:
							case 140:
							case 141:
								break;
							case 142:
								tsqlStatement = this.setStatements();
								goto IL_0646;
							case 143:
								tsqlStatement = this.setUserStatement();
								goto IL_0646;
							case 144:
								tsqlStatement = this.shutdownStatement();
								goto IL_0646;
							default:
								if (num == 156)
								{
									tsqlStatement = this.truncateTableStatement();
									goto IL_0646;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 172)
				{
					switch (num)
					{
					case 161:
						tsqlStatement = this.updateTextStatement();
						goto IL_0646;
					case 162:
						tsqlStatement = this.useStatement();
						goto IL_0646;
					default:
						if (num == 167)
						{
							tsqlStatement = this.waitForStatement();
							goto IL_0646;
						}
						switch (num)
						{
						case 170:
							tsqlStatement = this.whileStatement();
							goto IL_0646;
						case 172:
							tsqlStatement = this.writeTextStatement();
							goto IL_0646;
						}
						break;
					}
				}
				else
				{
					if (num == 176)
					{
						tsqlStatement = this.revertStatement();
						goto IL_0646;
					}
					if (num == 220)
					{
						tsqlStatement = this.labelStatement();
						goto IL_0646;
					}
					if (num == 232)
					{
						tsqlStatement = this.identifierStatements();
						goto IL_0646;
					}
				}
				if (this.LA(1) == 35 && this.LA(2) == 148)
				{
					tsqlStatement = this.createTableStatement();
				}
				else if (this.LA(1) == 6 && this.LA(2) == 148)
				{
					tsqlStatement = this.alterTableStatement();
				}
				else if (this.LA(1) == 35 && TSql110ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					tsqlStatement = this.createIndexStatement();
				}
				else if (this.LA(1) == 35 && this.LA(2) == 146)
				{
					tsqlStatement = this.createStatisticsStatement();
				}
				else if (this.LA(1) == 160 && this.LA(2) == 146)
				{
					tsqlStatement = this.updateStatisticsStatement();
				}
				else if (this.LA(1) == 6 && this.LA(2) == 43)
				{
					tsqlStatement = this.alterDatabaseStatements();
				}
				else if ((this.LA(1) == 60 || this.LA(1) == 61) && TSql110ParserInternal.tokenSet_12_.member(this.LA(2)))
				{
					tsqlStatement = this.executeStatement();
				}
				else if (TSql110ParserInternal.tokenSet_13_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_14_.member(this.LA(2)))
				{
					tsqlStatement = this.withCommonTableExpressionsAndXmlNamespacesStatements();
				}
				else if (this.LA(1) == 6 && TSql110ParserInternal.tokenSet_15_.member(this.LA(2)))
				{
					tsqlStatement = this.alter2005Statements();
				}
				else if (this.LA(1) == 35 && (this.LA(2) == 118 || this.LA(2) == 163 || this.LA(2) == 232))
				{
					tsqlStatement = this.create2005Statements();
				}
				else if (this.LA(1) == 35 && this.LA(2) == 43)
				{
					tsqlStatement = this.createDatabaseStatements();
				}
				else if (this.LA(1) == 86 && this.LA(2) == 17)
				{
					tsqlStatement = this.insertBulkStatement();
				}
				else
				{
					if ((this.LA(1) != 60 && this.LA(1) != 61) || this.LA(2) != 9)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					tsqlStatement = this.executeAsStatement();
				}
				IL_0646:;
			}
			catch (TSqlParseErrorException ex)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (!ex.DoNotLog)
				{
					base.AddParseError(ex.ParseError);
				}
				base.RecoverAtStatementLevel(line, column);
			}
			catch (NoViableAltException ex2)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex2.token, ex2, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (MismatchedTokenException ex3)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError2 = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex3.token, ex3, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError2);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (RecognitionException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError unexpectedTokenError = base.GetUnexpectedTokenError();
				base.AddParseError(unexpectedTokenError);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (TokenStreamRecognitionException ex4)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError parseError = TSql80ParserBaseInternal.ProcessTokenStreamRecognitionException(ex4, this._tokenSource.LastToken.Offset);
				base.AddParseError(parseError);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (ANTLRException ex5)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				base.CreateInternalError("statement", ex5);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A6B RID: 2667 RVA: 0x00022C94 File Offset: 0x00020E94
		public void optSemicolons(TSqlStatement vParent)
		{
			int num = 0;
			while (this.LA(1) == 204 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				IToken token = this.LT(1);
				this.match(204);
				if (this.inputState.guessing == 0)
				{
					num++;
					if (vParent != null)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					}
				}
			}
		}

		// Token: 0x06000A6C RID: 2668 RVA: 0x00022CF8 File Offset: 0x00020EF8
		public TSqlStatement lastStatement()
		{
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 35 && (this.LA(2) == 120 || this.LA(2) == 121))
			{
				tsqlStatement = this.createProcedureStatement();
			}
			else if (this.LA(1) == 6 && (this.LA(2) == 120 || this.LA(2) == 121))
			{
				tsqlStatement = this.alterProcedureStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 155)
			{
				tsqlStatement = this.createTriggerStatement();
			}
			else if (this.LA(1) == 6 && this.LA(2) == 155)
			{
				tsqlStatement = this.alterTriggerStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 47)
			{
				tsqlStatement = this.createDefaultStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 137)
			{
				tsqlStatement = this.createRuleStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 166)
			{
				tsqlStatement = this.createViewStatement();
			}
			else if (this.LA(1) == 6 && this.LA(2) == 166)
			{
				tsqlStatement = this.alterViewStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 73)
			{
				tsqlStatement = this.createFunctionStatement();
			}
			else if (this.LA(1) == 6 && this.LA(2) == 73)
			{
				tsqlStatement = this.alterFunctionStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 139)
			{
				tsqlStatement = this.createSchemaStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 232)
			{
				tsqlStatement = this.createFederationStatement();
			}
			else if (this.LA(1) == 6 && this.LA(2) == 232)
			{
				tsqlStatement = this.alterFederationStatement();
			}
			else
			{
				if (this.LA(1) != 162)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.useFederationStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000A6D RID: 2669 RVA: 0x00022F0C File Offset: 0x0002110C
		public ExecutableProcedureReference execProc()
		{
			ExecutableProcedureReference executableProcedureReference = base.FragmentFactory.CreateFragment<ExecutableProcedureReference>();
			int num = this.LA(1);
			ProcedureReferenceName procedureReferenceName;
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
					procedureReferenceName = this.varObjectReference();
					goto IL_005B;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			procedureReferenceName = this.procObjectReference();
			IL_005B:
			if (this.inputState.guessing == 0)
			{
				executableProcedureReference.ProcedureReference = procedureReferenceName;
			}
			if (TSql110ParserInternal.tokenSet_17_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_18_.member(this.LA(2)))
			{
				this.setParamList(executableProcedureReference);
			}
			else if (!TSql110ParserInternal.tokenSet_19_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executableProcedureReference;
		}

		// Token: 0x06000A6E RID: 2670 RVA: 0x00022FF4 File Offset: 0x000211F4
		public CreateTableStatement createTableStatement()
		{
			CreateTableStatement createTableStatement = base.FragmentFactory.CreateFragment<CreateTableStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(148);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTableStatement, token);
				createTableStatement.SchemaObjectName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createTableStatement);
			}
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				TableDefinition tableDefinition = this.tableDefinitionCreateTable();
				if (this.inputState.guessing == 0)
				{
					createTableStatement.Definition = tableDefinition;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(createTableStatement, token2);
				}
			}
			else
			{
				this.match(9);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FILETABLE");
					createTableStatement.AsFileTable = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(createTableStatement, token3);
				}
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_03D7;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_03D7;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_03D7;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_03D7;
							default:
								if (num2 == 28)
								{
									goto IL_03D7;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 33:
					case 35:
						goto IL_03D7;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_03D7;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_03D7;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					goto IL_03D7;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 119)
				{
					if (num2 == 95)
					{
						goto IL_03D7;
					}
					switch (num2)
					{
					case 105:
					{
						this.match(105);
						FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
						if (this.inputState.guessing == 0)
						{
							createTableStatement.OnFileGroupOrPartitionScheme = fileGroupOrPartitionScheme;
							goto IL_03D7;
						}
						goto IL_03D7;
					}
					case 106:
						goto IL_03D7;
					default:
						if (num2 == 119)
						{
							goto IL_03D7;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_03D7;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_03D7;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_03D7;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176 || num2 == 182 || num2 == 191)
				{
					goto IL_03D7;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_03D7;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_03D7;
				default:
					switch (num2)
					{
					case 232:
					case 233:
						goto IL_03D7;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_03D7:
			if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 105 && base.NextTokenMatches("FEDERATED"))
			{
				FederationScheme federationScheme = this.federatedOn(createTableStatement);
				if (this.inputState.guessing == 0)
				{
					createTableStatement.FederationScheme = federationScheme;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.largeDataOnOpt(createTableStatement);
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.withTableOptions(createTableStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createTableStatement;
		}

		// Token: 0x06000A6F RID: 2671 RVA: 0x000234CC File Offset: 0x000216CC
		public AlterTableStatement alterTableStatement()
		{
			AlterTableStatement alterTableStatement = null;
			IToken token = null;
			SchemaObjectName schemaObjectName = null;
			ConstraintEnforcement constraintEnforcement = ConstraintEnforcement.NotSpecified;
			try
			{
				token = this.LT(1);
				this.match(6);
				this.match(148);
				schemaObjectName = this.schemaObjectThreePartName();
				int num = this.LA(1);
				if (num <= 54)
				{
					switch (num)
					{
					case 4:
						break;
					case 5:
						goto IL_013D;
					case 6:
						alterTableStatement = this.alterTableAlterColumnStatement();
						goto IL_0258;
					default:
						if (num != 21)
						{
							if (num != 54)
							{
								goto IL_013D;
							}
							alterTableStatement = this.alterTableDropTableElementStatement();
							goto IL_0258;
						}
						break;
					}
				}
				else if (num != 97)
				{
					if (num == 142)
					{
						alterTableStatement = this.alterTableSetStatement();
						goto IL_0258;
					}
					if (num != 171)
					{
						goto IL_013D;
					}
				}
				int num2 = this.LA(1);
				if (num2 <= 21)
				{
					if (num2 == 4 || num2 == 21)
					{
						goto IL_00E8;
					}
				}
				else
				{
					if (num2 == 97)
					{
						goto IL_00E8;
					}
					if (num2 == 171)
					{
						this.match(171);
						constraintEnforcement = this.constraintEnforcement();
						goto IL_00E8;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_00E8:
				int num3 = this.LA(1);
				if (num3 == 4)
				{
					alterTableStatement = this.alterTableAddTableElementStatement(constraintEnforcement);
					goto IL_0258;
				}
				if (num3 != 21 && num3 != 97)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				alterTableStatement = this.alterTableConstraintModificationStatement(constraintEnforcement);
				goto IL_0258;
				IL_013D:
				if (this.LA(1) == 232 && this.LA(2) == 155)
				{
					alterTableStatement = this.alterTableTriggerModificationStatement();
				}
				else if (this.LA(1) == 232 && (this.LA(2) == 151 || this.LA(2) == 232) && base.NextTokenMatches("SWITCH"))
				{
					alterTableStatement = this.alterTableSwitchStatement();
				}
				else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)) && base.NextTokenMatches("REBUILD"))
				{
					alterTableStatement = this.alterTableRebuildStatement();
				}
				else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CHANGE_TRACKING", 2))
				{
					alterTableStatement = this.alterTableChangeTrackingModificationStatement();
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 232 || !base.NextTokenMatches("FILETABLE_NAMESPACE", 2))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					alterTableStatement = this.alterTableFileTableNamespaceStatement();
				}
				IL_0258:
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableStatement, token);
					alterTableStatement.SchemaObjectName = schemaObjectName;
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					AlterTableStatement alterTableStatement2 = ex.Statement as AlterTableStatement;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableStatement2, token);
					alterTableStatement2.SchemaObjectName = schemaObjectName;
					throw;
				}
				throw;
			}
			return alterTableStatement;
		}

		// Token: 0x06000A70 RID: 2672 RVA: 0x0002379C File Offset: 0x0002199C
		public TSqlStatement createIndexStatement()
		{
			IToken token = null;
			bool? flag = default(bool?);
			IToken token2 = this.LT(1);
			this.match(35);
			int num = this.LA(1);
			if (num <= 84)
			{
				if (num == 24 || num == 84)
				{
					goto IL_0072;
				}
			}
			else
			{
				if (num == 98)
				{
					goto IL_0072;
				}
				if (num == 159)
				{
					token = this.LT(1);
					this.match(159);
					goto IL_0072;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0072:
			int num2 = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num2 != 24)
			{
				if (num2 == 84)
				{
					tsqlStatement = this.createRelationalIndexStatement(token, flag);
					goto IL_015C;
				}
				if (num2 != 98)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			int num3 = this.LA(1);
			if (num3 != 24)
			{
				if (num3 != 98)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(98);
				if (this.inputState.guessing == 0)
				{
					flag = new bool?(false);
				}
			}
			else
			{
				this.match(24);
				if (this.inputState.guessing == 0)
				{
					flag = new bool?(true);
				}
			}
			int num4 = this.LA(1);
			if (num4 != 84)
			{
				if (num4 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createColumnStoreIndexStatement(token, flag);
			}
			else
			{
				tsqlStatement = this.createRelationalIndexStatement(token, flag);
			}
			IL_015C:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token2);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A71 RID: 2673 RVA: 0x0002391C File Offset: 0x00021B1C
		public TSqlStatement declareStatements()
		{
			TSqlStatement tsqlStatement = null;
			IToken token = null;
			token = this.LT(1);
			this.match(46);
			bool flag = false;
			if (this.LA(1) == 234 && (this.LA(2) == 9 || this.LA(2) == 148))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(234);
					int num2 = this.LA(1);
					if (num2 != 9)
					{
						if (num2 != 148)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					this.match(148);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				DeclareTableVariableBody declareTableVariableBody = this.declareTableBody(IndexAffectingStatement.DeclareTableVariable);
				if (this.inputState.guessing == 0)
				{
					DeclareTableVariableStatement declareTableVariableStatement = base.FragmentFactory.CreateFragment<DeclareTableVariableStatement>();
					declareTableVariableStatement.Body = declareTableVariableBody;
					tsqlStatement = declareTableVariableStatement;
				}
			}
			else if (this.LA(1) == 234 && TSql110ParserInternal.tokenSet_20_.member(this.LA(2)))
			{
				tsqlStatement = this.declareVariableStatement();
			}
			else
			{
				if (this.LA(1) != 232 && this.LA(1) != 233)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.declareCursorStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A72 RID: 2674 RVA: 0x00023AB4 File Offset: 0x00021CB4
		public TSqlStatement setStatements()
		{
			IToken token = this.LT(1);
			this.match(142);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 135)
			{
				if (num <= 80)
				{
					if (num == 57)
					{
						tsqlStatement = this.setErrorLevelStatement();
						goto IL_016E;
					}
					if (num == 80)
					{
						tsqlStatement = this.setIdentityInsertStatement();
						goto IL_016E;
					}
				}
				else
				{
					if (num == 104)
					{
						tsqlStatement = this.setOffsetsStatement();
						goto IL_016E;
					}
					if (num == 135)
					{
						tsqlStatement = this.setRowcountStatement();
						goto IL_016E;
					}
				}
			}
			else if (num <= 149)
			{
				if (num == 146)
				{
					tsqlStatement = this.setStatisticsStatement();
					goto IL_016E;
				}
				if (num == 149)
				{
					tsqlStatement = this.setTextSizeStatement();
					goto IL_016E;
				}
			}
			else
			{
				switch (num)
				{
				case 153:
				case 154:
					tsqlStatement = this.setTransactionIsolationLevelStatement();
					goto IL_016E;
				default:
					if (num == 234)
					{
						tsqlStatement = this.setVariableStatement();
						goto IL_016E;
					}
					break;
				}
			}
			if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 105 || this.LA(2) == 198) && !base.NextTokenMatches("FIPS_FLAGGER"))
			{
				tsqlStatement = this.predicateSetStatement();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_21_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.setCommandStatement();
			}
			IL_016E:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A73 RID: 2675 RVA: 0x00023C44 File Offset: 0x00021E44
		public TSqlStatement beginStatements()
		{
			bool flag = false;
			if (this.LA(1) == 13 && (this.LA(2) == 52 || this.LA(2) == 153 || this.LA(2) == 154))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(13);
					int num2 = this.LA(1);
					if (num2 != 52)
					{
						switch (num2)
						{
						case 153:
						case 154:
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(52);
					}
					switch (this.LA(1))
					{
					case 153:
						this.match(153);
						break;
					case 154:
						this.match(154);
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			TSqlStatement tsqlStatement;
			if (flag)
			{
				tsqlStatement = this.beginTransactionStatement();
			}
			else if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("TRY", 2))
			{
				tsqlStatement = this.tryCatchStatement();
			}
			else if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("CONVERSATION", 2))
			{
				tsqlStatement = this.beginConversationTimerStatement();
			}
			else if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("DIALOG", 2))
			{
				tsqlStatement = this.beginDialogStatement();
			}
			else
			{
				if (this.LA(1) != 13 || !TSql110ParserInternal.tokenSet_22_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.beginEndBlockStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000A74 RID: 2676 RVA: 0x00023E4C File Offset: 0x0002204C
		public BreakStatement breakStatement()
		{
			BreakStatement breakStatement = base.FragmentFactory.CreateFragment<BreakStatement>();
			IToken token = this.LT(1);
			this.match(15);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(breakStatement, token);
			}
			return breakStatement;
		}

		// Token: 0x06000A75 RID: 2677 RVA: 0x00023E8C File Offset: 0x0002208C
		public ContinueStatement continueStatement()
		{
			ContinueStatement continueStatement = base.FragmentFactory.CreateFragment<ContinueStatement>();
			IToken token = this.LT(1);
			this.match(33);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(continueStatement, token);
			}
			return continueStatement;
		}

		// Token: 0x06000A76 RID: 2678 RVA: 0x00023ECC File Offset: 0x000220CC
		public IfStatement ifStatement()
		{
			IfStatement ifStatement = base.FragmentFactory.CreateFragment<IfStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(82);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(ifStatement, token);
			}
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				ifStatement.Predicate = booleanExpression;
			}
			TSqlStatement tsqlStatement = this.statementOptSemi();
			if (this.inputState.guessing == 0)
			{
				if (tsqlStatement == null)
				{
					flag = true;
				}
				else
				{
					ifStatement.ThenStatement = tsqlStatement;
				}
			}
			if (this.LA(1) == 55 && TSql110ParserInternal.tokenSet_3_.member(this.LA(2)))
			{
				this.match(55);
				tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement == null)
					{
						flag = true;
					}
					else
					{
						ifStatement.ElseStatement = tsqlStatement;
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0 && flag)
			{
				ifStatement = null;
			}
			return ifStatement;
		}

		// Token: 0x06000A77 RID: 2679 RVA: 0x00023FE8 File Offset: 0x000221E8
		public WhileStatement whileStatement()
		{
			WhileStatement whileStatement = base.FragmentFactory.CreateFragment<WhileStatement>();
			IToken token = this.LT(1);
			this.match(170);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(whileStatement, token);
			}
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				whileStatement.Predicate = booleanExpression;
			}
			TSqlStatement tsqlStatement = this.statementOptSemi();
			if (this.inputState.guessing == 0)
			{
				if (tsqlStatement == null)
				{
					whileStatement = null;
				}
				else
				{
					whileStatement.Statement = tsqlStatement;
				}
			}
			return whileStatement;
		}

		// Token: 0x06000A78 RID: 2680 RVA: 0x0002406C File Offset: 0x0002226C
		public LabelStatement labelStatement()
		{
			LabelStatement labelStatement = base.FragmentFactory.CreateFragment<LabelStatement>();
			IToken token = this.LT(1);
			this.match(220);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(labelStatement, token);
				labelStatement.Value = token.getText();
			}
			return labelStatement;
		}

		// Token: 0x06000A79 RID: 2681 RVA: 0x000240BC File Offset: 0x000222BC
		public TSqlStatement backupStatements()
		{
			IToken token = this.LT(1);
			this.match(12);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
			{
				tsqlStatement = this.backupCertificateStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.backupServiceMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				tsqlStatement = this.backupMasterKeyStatement();
			}
			else
			{
				if ((this.LA(1) != 43 && this.LA(1) != 232) || this.LA(2) < 232 || this.LA(2) > 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.backupStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A7A RID: 2682 RVA: 0x000241D8 File Offset: 0x000223D8
		public TSqlStatement restoreStatements()
		{
			IToken token = this.LT(1);
			this.match(129);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.restoreServiceMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				tsqlStatement = this.restoreMasterKeyStatement();
			}
			else
			{
				if ((this.LA(1) != 43 && this.LA(1) != 232) || !TSql110ParserInternal.tokenSet_23_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.restoreStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A7B RID: 2683 RVA: 0x000242AC File Offset: 0x000224AC
		public GoToStatement gotoStatement()
		{
			GoToStatement goToStatement = base.FragmentFactory.CreateFragment<GoToStatement>();
			IToken token = this.LT(1);
			this.match(74);
			Identifier identifier = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(goToStatement, token);
				goToStatement.LabelName = identifier;
			}
			return goToStatement;
		}

		// Token: 0x06000A7C RID: 2684 RVA: 0x000242FC File Offset: 0x000224FC
		public SaveTransactionStatement saveTransactionStatement()
		{
			SaveTransactionStatement saveTransactionStatement = base.FragmentFactory.CreateFragment<SaveTransactionStatement>();
			IToken token = this.LT(1);
			this.match(138);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(saveTransactionStatement, token);
			}
			switch (this.LA(1))
			{
			case 153:
				this.match(153);
				break;
			case 154:
				this.match(154);
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.transactionName(saveTransactionStatement);
			return saveTransactionStatement;
		}

		// Token: 0x06000A7D RID: 2685 RVA: 0x00024394 File Offset: 0x00022594
		public RollbackTransactionStatement rollbackTransactionStatement()
		{
			RollbackTransactionStatement rollbackTransactionStatement = base.FragmentFactory.CreateFragment<RollbackTransactionStatement>();
			IToken token = this.LT(1);
			this.match(134);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token);
			}
			bool flag = false;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(232);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "WORK");
				}
			}
			else if (this.LA(1) == 153 || this.LA(1) == 154)
			{
				switch (this.LA(1))
				{
				case 153:
				{
					IToken token3 = this.LT(1);
					this.match(153);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token3);
					}
					break;
				}
				case 154:
				{
					IToken token4 = this.LT(1);
					this.match(154);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token4);
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (TSql110ParserInternal.tokenSet_24_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_25_.member(this.LA(2)))
				{
					this.transactionName(rollbackTransactionStatement);
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return rollbackTransactionStatement;
		}

		// Token: 0x06000A7E RID: 2686 RVA: 0x000245DC File Offset: 0x000227DC
		public CommitTransactionStatement commitTransactionStatement()
		{
			CommitTransactionStatement commitTransactionStatement = base.FragmentFactory.CreateFragment<CommitTransactionStatement>();
			IToken token = this.LT(1);
			this.match(28);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token);
			}
			bool flag = false;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(232);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "WORK");
				}
			}
			else if (this.LA(1) == 153 || this.LA(1) == 154)
			{
				switch (this.LA(1))
				{
				case 153:
				{
					IToken token3 = this.LT(1);
					this.match(153);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token3);
					}
					break;
				}
				case 154:
				{
					IToken token4 = this.LT(1);
					this.match(154);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token4);
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (TSql110ParserInternal.tokenSet_24_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_25_.member(this.LA(2)))
				{
					this.transactionName(commitTransactionStatement);
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return commitTransactionStatement;
		}

		// Token: 0x06000A7F RID: 2687 RVA: 0x00024824 File Offset: 0x00022A24
		public CreateStatisticsStatement createStatisticsStatement()
		{
			CreateStatisticsStatement createStatisticsStatement = base.FragmentFactory.CreateFragment<CreateStatisticsStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			IToken token2 = this.LT(1);
			this.match(146);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createStatisticsStatement, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(createStatisticsStatement, token2);
				createStatisticsStatement.Name = identifier;
			}
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				createStatisticsStatement.OnName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createStatisticsStatement);
			}
			this.identifierColumnList(createStatisticsStatement, createStatisticsStatement.Columns);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0336;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0336;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0336;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								goto IL_0336;
							default:
								if (num == 28)
								{
									goto IL_0336;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						goto IL_0336;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_0336;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								goto IL_0336;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0336;
				}
			}
			else if (num <= 172)
			{
				if (num <= 106)
				{
					if (num == 95 || num == 106)
					{
						goto IL_0336;
					}
				}
				else
				{
					if (num == 119)
					{
						goto IL_0336;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0336;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_0336;
						case 169:
						{
							BooleanExpression booleanExpression = this.filterClause(false);
							if (this.inputState.guessing == 0)
							{
								createStatisticsStatement.FilterPredicate = booleanExpression;
								goto IL_0336;
							}
							goto IL_0336;
						}
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_0336;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0336;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0336;
				default:
					if (num == 232)
					{
						goto IL_0336;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0336:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				StatisticsOption statisticsOption = this.createStatisticsStatementWithOption(ref flag);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(createStatisticsStatement, createStatisticsStatement.StatisticsOptions, statisticsOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					statisticsOption = this.createStatisticsStatementWithOption(ref flag);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(createStatisticsStatement, createStatisticsStatement.StatisticsOptions, statisticsOption);
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createStatisticsStatement;
		}

		// Token: 0x06000A80 RID: 2688 RVA: 0x00024C30 File Offset: 0x00022E30
		public UpdateStatisticsStatement updateStatisticsStatement()
		{
			UpdateStatisticsStatement updateStatisticsStatement = base.FragmentFactory.CreateFragment<UpdateStatisticsStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(160);
			IToken token2 = this.LT(1);
			this.match(146);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateStatisticsStatement, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(updateStatisticsStatement, token2);
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				updateStatisticsStatement.SchemaObjectName = schemaObjectName;
			}
			bool flag2 = false;
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				int num = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.identifier();
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				this.columnNameList(updateStatisticsStatement, updateStatisticsStatement.SubElements);
			}
			else if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(updateStatisticsStatement, updateStatisticsStatement.SubElements, identifier);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && TSql110ParserInternal.tokenSet_26_.member(this.LA(2)))
			{
				this.match(171);
				StatisticsOption statisticsOption = this.updateStatisticsStatementWithOption(ref flag);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(updateStatisticsStatement, updateStatisticsStatement.StatisticsOptions, statisticsOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					statisticsOption = this.updateStatisticsStatementWithOption(ref flag);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(updateStatisticsStatement, updateStatisticsStatement.StatisticsOptions, statisticsOption);
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return updateStatisticsStatement;
		}

		// Token: 0x06000A81 RID: 2689 RVA: 0x00024EB0 File Offset: 0x000230B0
		public TSqlStatement alterDatabaseStatements()
		{
			IToken token = this.LT(1);
			this.match(6);
			this.match(43);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("AUDIT") && base.NextTokenMatches("SPECIFICATION", 2))
			{
				tsqlStatement = this.alterDatabaseAuditSpecification(token);
			}
			else if (TSql110ParserInternal.tokenSet_27_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_28_.member(this.LA(2)))
			{
				tsqlStatement = this.alterDatabase(token);
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 91)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterDatabaseEncryptionKey(token);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A82 RID: 2690 RVA: 0x00024F80 File Offset: 0x00023180
		public ExecuteStatement executeStatement()
		{
			ExecuteStatement executeStatement = base.FragmentFactory.CreateFragment<ExecuteStatement>();
			ExecuteSpecification executeSpecification = this.executeSpecification();
			if (this.inputState.guessing == 0)
			{
				executeStatement.ExecuteSpecification = executeSpecification;
				base.ThrowPartialAstIfPhaseOne(executeStatement);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				ExecuteOption executeOption = this.executeOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExecuteOption>(executeStatement, executeStatement.Options, executeOption);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executeStatement;
		}

		// Token: 0x06000A83 RID: 2691 RVA: 0x00025040 File Offset: 0x00023240
		public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements()
		{
			WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = null;
			int num = this.LA(1);
			if (num <= 140)
			{
				if (num == 48 || num == 86 || num == 140)
				{
					goto IL_0070;
				}
			}
			else if (num <= 171)
			{
				if (num == 160)
				{
					goto IL_0070;
				}
				if (num == 171)
				{
					withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
					goto IL_0070;
				}
			}
			else if (num == 182 || num == 191)
			{
				goto IL_0070;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0070:
			int num2 = this.LA(1);
			StatementWithCtesAndXmlNamespaces statementWithCtesAndXmlNamespaces;
			if (num2 <= 140)
			{
				if (num2 == 48)
				{
					statementWithCtesAndXmlNamespaces = this.deleteStatement(SubDmlFlags.None);
					goto IL_0124;
				}
				if (num2 == 86)
				{
					statementWithCtesAndXmlNamespaces = this.insertStatement(SubDmlFlags.None);
					goto IL_0124;
				}
				if (num2 != 140)
				{
					goto IL_0111;
				}
			}
			else
			{
				if (num2 == 160)
				{
					statementWithCtesAndXmlNamespaces = this.updateStatement(SubDmlFlags.None);
					goto IL_0124;
				}
				if (num2 == 182)
				{
					statementWithCtesAndXmlNamespaces = this.mergeStatement(SubDmlFlags.None);
					goto IL_0124;
				}
				if (num2 != 191)
				{
					goto IL_0111;
				}
			}
			statementWithCtesAndXmlNamespaces = this.select(SubDmlFlags.SelectNotForInsert);
			if (this.inputState.guessing == 0 && withCtesAndXmlNamespaces != null && withCtesAndXmlNamespaces.ChangeTrackingContext != null)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46072", withCtesAndXmlNamespaces.ChangeTrackingContext, TSqlParserResource.SQL46072Message, new string[0]);
				goto IL_0124;
			}
			goto IL_0124;
			IL_0111:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0124:
			if (this.inputState.guessing == 0)
			{
				statementWithCtesAndXmlNamespaces.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
			}
			return statementWithCtesAndXmlNamespaces;
		}

		// Token: 0x06000A84 RID: 2692 RVA: 0x00025188 File Offset: 0x00023388
		public RaiseErrorStatement raiseErrorStatement()
		{
			RaiseErrorStatement raiseErrorStatement = base.FragmentFactory.CreateFragment<RaiseErrorStatement>();
			IToken token = this.LT(1);
			this.match(123);
			IToken token2 = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token2);
			}
			ScalarExpression scalarExpression = this.signedIntegerOrStringOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorStatement.FirstParameter = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorStatement.SecondParameter = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorStatement.ThirdParameter = scalarExpression;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.possibleNegativeConstant();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(raiseErrorStatement, raiseErrorStatement.OptionalParameters, scalarExpression);
				}
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token3);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token4);
					raiseErrorStatement.RaiseErrorOptions |= RaiseErrorOptionsHelper.Instance.ParseOption(token4);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					IToken token5 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token5);
						raiseErrorStatement.RaiseErrorOptions |= RaiseErrorOptionsHelper.Instance.ParseOption(token5);
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return raiseErrorStatement;
		}

		// Token: 0x06000A85 RID: 2693 RVA: 0x000253C8 File Offset: 0x000235C8
		public TSqlStatement alter2005Statements()
		{
			IToken token = this.LT(1);
			this.match(6);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 84)
			{
				if (num == 11)
				{
					tsqlStatement = this.alterAuthorizationStatement();
					goto IL_06CA;
				}
				if (num == 84)
				{
					tsqlStatement = this.alterIndexStatement();
					goto IL_06CA;
				}
			}
			else
			{
				if (num == 139)
				{
					tsqlStatement = this.alterSchemaStatement();
					goto IL_06CA;
				}
				if (num == 163)
				{
					tsqlStatement = this.alterUserStatement();
					goto IL_06CA;
				}
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION"))
			{
				tsqlStatement = this.alterApplicationRoleStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY"))
			{
				tsqlStatement = this.alterAssemblyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC"))
			{
				tsqlStatement = this.alterAsymmetricKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("AVAILABILITY"))
			{
				tsqlStatement = this.alterAvailabilityGroupStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("BROKER"))
			{
				tsqlStatement = this.alterBrokerPriorityStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CRYPTOGRAPHIC"))
			{
				tsqlStatement = this.alterCryptographicProviderStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("EVENT"))
			{
				tsqlStatement = this.alterEventSessionStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE"))
			{
				tsqlStatement = this.alterRemoteServiceBindingStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("RESOURCE"))
			{
				tsqlStatement = this.alterResourceStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("WORKLOAD"))
			{
				tsqlStatement = this.alterWorkloadGroupStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
			{
				tsqlStatement = this.alterCertificateStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL"))
			{
				tsqlStatement = this.alterCredentialStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT"))
			{
				tsqlStatement = this.alterEndpointStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 183 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT"))
			{
				tsqlStatement = this.alterFulltextStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN"))
			{
				tsqlStatement = this.alterLoginStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.alterMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
			{
				tsqlStatement = this.alterMessageTypeStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION"))
			{
				tsqlStatement = this.alterPartitionStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
			{
				tsqlStatement = this.alterQueueStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE"))
			{
				tsqlStatement = this.alterRoleStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE"))
			{
				tsqlStatement = this.alterRouteStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SEARCH"))
			{
				tsqlStatement = this.alterSearchPropertyListStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SEQUENCE"))
			{
				tsqlStatement = this.alterSequenceStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.alterServiceStatements();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
			{
				tsqlStatement = this.alterSymmetricKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVER"))
			{
				tsqlStatement = this.alterServerStatements();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 139 || !base.NextTokenMatches("XML"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterXmlSchemaCollectionStatement();
			}
			IL_06CA:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
				base.ThrowPartialAstIfPhaseOne(tsqlStatement);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A86 RID: 2694 RVA: 0x00025ABC File Offset: 0x00023CBC
		public TSqlStatement create2005Statements()
		{
			TSqlStatement tsqlStatement = null;
			IToken token = null;
			try
			{
				token = this.LT(1);
				this.match(35);
				int num = this.LA(1);
				if (num != 118)
				{
					if (num != 163)
					{
						if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AGGREGATE"))
						{
							tsqlStatement = this.createAggregateStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION"))
						{
							tsqlStatement = this.createApplicationRoleStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY"))
						{
							tsqlStatement = this.createAssemblyStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC"))
						{
							tsqlStatement = this.createAsymmetricKeyStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("AVAILABILITY"))
						{
							tsqlStatement = this.createAvailabilityGroupStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("BROKER"))
						{
							tsqlStatement = this.createBrokerPriorityStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
						{
							tsqlStatement = this.createCertificateStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 84 && base.NextTokenMatches("COLUMNSTORE"))
						{
							tsqlStatement = this.createColumnStoreIndexStatement(null, default(bool?));
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CONTRACT"))
						{
							tsqlStatement = this.createContractStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL"))
						{
							tsqlStatement = this.createCredentialStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CRYPTOGRAPHIC"))
						{
							tsqlStatement = this.createCryptographicProviderStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT"))
						{
							tsqlStatement = this.createEndpointStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("EVENT"))
						{
							tsqlStatement = this.createEventStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 183 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT"))
						{
							tsqlStatement = this.createFulltextStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 139) && base.NextTokenMatches("XML"))
						{
							tsqlStatement = this.createXmlStatements();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN"))
						{
							tsqlStatement = this.createLoginStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
						{
							tsqlStatement = this.createMessageTypeStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
						{
							tsqlStatement = this.createMasterKeyStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION"))
						{
							tsqlStatement = this.createPartitionStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
						{
							tsqlStatement = this.createQueueStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE"))
						{
							tsqlStatement = this.createRemoteServiceBindingStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("RESOURCE"))
						{
							tsqlStatement = this.createResourcePoolStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE"))
						{
							tsqlStatement = this.createRoleStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE"))
						{
							tsqlStatement = this.createRouteStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SEARCH"))
						{
							tsqlStatement = this.createSearchPropertyListStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE"))
						{
							tsqlStatement = this.createServiceStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 84 && base.NextTokenMatches("SPATIAL"))
						{
							tsqlStatement = this.createSpatialIndexStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
						{
							tsqlStatement = this.createSymmetricKeyStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SYNONYM"))
						{
							tsqlStatement = this.createSynonymStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("TYPE"))
						{
							tsqlStatement = this.createTypeStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVER"))
						{
							tsqlStatement = this.createServerStatements();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("WORKLOAD"))
						{
							tsqlStatement = this.createWorkloadGroupStatement();
						}
						else
						{
							if (this.LA(1) != 232 || (this.LA(2) != 200 && this.LA(2) != 232 && this.LA(2) != 233) || !base.NextTokenMatches("SEQUENCE"))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							tsqlStatement = this.createSequenceStatement();
						}
					}
					else
					{
						tsqlStatement = this.createUserStatement();
					}
				}
				else
				{
					tsqlStatement = this.createPrimaryXmlIndexStatement();
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
					base.ThrowPartialAstIfPhaseOne(tsqlStatement);
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(ex.Statement, token);
					throw;
				}
				throw;
			}
			return tsqlStatement;
		}

		// Token: 0x06000A87 RID: 2695 RVA: 0x00026378 File Offset: 0x00024578
		public TSqlStatement createDatabaseStatements()
		{
			IToken token = this.LT(1);
			this.match(35);
			this.match(43);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("AUDIT") && base.NextTokenMatches("SPECIFICATION", 2))
			{
				tsqlStatement = this.createDatabaseAuditSpecification();
			}
			else if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_29_.member(this.LA(2)))
			{
				tsqlStatement = this.createDatabase();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 91)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createDatabaseEncryptionKey();
			}
			if (this.inputState.guessing == 0 && tsqlStatement != null)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A88 RID: 2696 RVA: 0x00026468 File Offset: 0x00024668
		public AddSignatureStatement addSignatureStatement()
		{
			AddSignatureStatement addSignatureStatement = base.FragmentFactory.CreateFragment<AddSignatureStatement>();
			IToken token = this.LT(1);
			this.match(4);
			this.signatureType(addSignatureStatement);
			this.match(151);
			this.signableElement(addSignatureStatement);
			this.match(18);
			this.cryptoListWithOptionalPasswordSignature(addSignatureStatement);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(addSignatureStatement, token);
			}
			return addSignatureStatement;
		}

		// Token: 0x06000A89 RID: 2697 RVA: 0x000264D0 File Offset: 0x000246D0
		public TSqlStatement identifierStatements()
		{
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 155 && base.NextTokenMatches("DISABLE"))
			{
				tsqlStatement = this.disableTriggerStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 155 && base.NextTokenMatches("ENABLE"))
			{
				tsqlStatement = this.enableTriggerStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MOVE"))
			{
				tsqlStatement = this.moveConversationStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("GET"))
			{
				tsqlStatement = this.getConversationGroupStatement();
			}
			else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_30_.member(this.LA(2)) && base.NextTokenMatches("RECEIVE"))
			{
				tsqlStatement = this.receiveStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 105 && base.NextTokenMatches("SEND"))
			{
				tsqlStatement = this.sendStatement();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_31_.member(this.LA(2)) || !base.NextTokenMatches("THROW"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.throwStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000A8A RID: 2698 RVA: 0x00026664 File Offset: 0x00024864
		public PrintStatement printStatement()
		{
			PrintStatement printStatement = base.FragmentFactory.CreateFragment<PrintStatement>();
			IToken token = this.LT(1);
			this.match(119);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(printStatement, token);
				printStatement.Expression = scalarExpression;
			}
			return printStatement;
		}

		// Token: 0x06000A8B RID: 2699 RVA: 0x000266B4 File Offset: 0x000248B4
		public WaitForStatement waitForStatement()
		{
			WaitForStatement waitForStatement = base.FragmentFactory.CreateFragment<WaitForStatement>();
			IToken token = this.LT(1);
			this.match(167);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(waitForStatement, token);
			}
			int num = this.LA(1);
			if (num == 191)
			{
				this.match(191);
				WaitForSupportedStatement waitForSupportedStatement = this.waitforInnerStatement();
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					waitForStatement.Statement = waitForSupportedStatement;
					waitForStatement.WaitForOption = WaitForOption.Statement;
					TSql80ParserBaseInternal.UpdateTokenInfo(waitForStatement, token2);
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								return waitForStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return waitForStatement;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									return waitForStatement;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								return waitForStatement;
							default:
								if (num2 == 28)
								{
									return waitForStatement;
								}
								switch (num2)
								{
								case 33:
								case 35:
									return waitForStatement;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return waitForStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return waitForStatement;
							default:
								if (num2 == 82)
								{
									return waitForStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						return waitForStatement;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 == 106 || num2 == 119)
						{
							return waitForStatement;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return waitForStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return waitForStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return waitForStatement;
							case 168:
							case 169:
								break;
							default:
								if (num2 == 176)
								{
									return waitForStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					if (num2 == 182 || num2 == 191)
					{
						return waitForStatement;
					}
					if (num2 == 198)
					{
						this.match(198);
						IToken token3 = this.LT(1);
						this.match(232);
						ScalarExpression scalarExpression = this.signedIntegerOrVariable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token3, "TIMEOUT");
							waitForStatement.Timeout = scalarExpression;
							return waitForStatement;
						}
						return waitForStatement;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return waitForStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return waitForStatement;
					default:
						if (num2 == 232)
						{
							return waitForStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token4 = this.LT(1);
			this.match(232);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				waitForStatement.WaitForOption = WaitForOptionHelper.Instance.ParseOption(token4);
				waitForStatement.Parameter = valueExpression;
			}
			return waitForStatement;
		}

		// Token: 0x06000A8C RID: 2700 RVA: 0x00026AA4 File Offset: 0x00024CA4
		public ReadTextStatement readTextStatement()
		{
			ReadTextStatement readTextStatement = base.FragmentFactory.CreateFragment<ReadTextStatement>();
			IToken token = this.LT(1);
			this.match(125);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(readTextStatement, token);
			}
			ColumnReferenceExpression columnReferenceExpression = this.column();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, true);
				readTextStatement.Column = columnReferenceExpression;
			}
			ValueExpression valueExpression = this.binaryOrVariable();
			if (this.inputState.guessing == 0)
			{
				readTextStatement.TextPointer = valueExpression;
			}
			valueExpression = this.integerOrVariable();
			if (this.inputState.guessing == 0)
			{
				readTextStatement.Offset = valueExpression;
			}
			valueExpression = this.integerOrVariable();
			if (this.inputState.guessing == 0)
			{
				readTextStatement.Size = valueExpression;
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return readTextStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return readTextStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return readTextStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return readTextStatement;
							default:
								if (num == 28)
								{
									return readTextStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 78)
				{
					switch (num)
					{
					case 33:
					case 35:
						return readTextStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return readTextStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return readTextStatement;
							case 78:
							{
								IToken token2 = this.LT(1);
								this.match(78);
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.UpdateTokenInfo(readTextStatement, token2);
									readTextStatement.HoldLock = true;
									return readTextStatement;
								}
								return readTextStatement;
							}
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return readTextStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return readTextStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return readTextStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return readTextStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return readTextStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return readTextStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return readTextStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return readTextStatement;
				default:
					if (num == 232)
					{
						return readTextStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000A8D RID: 2701 RVA: 0x00026E14 File Offset: 0x00025014
		public UpdateTextStatement updateTextStatement()
		{
			UpdateTextStatement updateTextStatement = base.FragmentFactory.CreateFragment<UpdateTextStatement>();
			IToken token = this.LT(1);
			this.match(161);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateTextStatement, token);
			}
			this.modificationTextStatement(updateTextStatement);
			ScalarExpression scalarExpression = this.signedIntegerOrVariableOrNull();
			if (this.inputState.guessing == 0)
			{
				updateTextStatement.InsertOffset = scalarExpression;
			}
			scalarExpression = this.signedIntegerOrVariableOrNull();
			if (this.inputState.guessing == 0)
			{
				updateTextStatement.DeleteLength = scalarExpression;
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.modificationTextStatementWithLog(updateTextStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_32_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (TSql110ParserInternal.tokenSet_33_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_34_.member(this.LA(2)))
			{
				ColumnReferenceExpression columnReferenceExpression = this.column();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, true);
					updateTextStatement.SourceColumn = columnReferenceExpression;
				}
				ValueExpression valueExpression = this.binaryOrVariable();
				if (this.inputState.guessing == 0)
				{
					updateTextStatement.SourceParameter = valueExpression;
				}
			}
			else if (TSql110ParserInternal.tokenSet_35_.member(this.LA(1)))
			{
				ValueExpression valueExpression = this.writeString();
				if (this.inputState.guessing == 0)
				{
					updateTextStatement.SourceParameter = valueExpression;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return updateTextStatement;
		}

		// Token: 0x06000A8E RID: 2702 RVA: 0x00026FC4 File Offset: 0x000251C4
		public WriteTextStatement writeTextStatement()
		{
			WriteTextStatement writeTextStatement = base.FragmentFactory.CreateFragment<WriteTextStatement>();
			IToken token = this.LT(1);
			this.match(172);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(writeTextStatement, token);
			}
			this.modificationTextStatement(writeTextStatement);
			int num = this.LA(1);
			if (num <= 171)
			{
				if (num == 100)
				{
					goto IL_00A1;
				}
				if (num == 171)
				{
					this.modificationTextStatementWithLog(writeTextStatement);
					goto IL_00A1;
				}
			}
			else
			{
				if (num == 224)
				{
					goto IL_00A1;
				}
				switch (num)
				{
				case 230:
				case 231:
				case 234:
					goto IL_00A1;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00A1:
			ValueExpression valueExpression = this.writeString();
			if (this.inputState.guessing == 0)
			{
				writeTextStatement.SourceParameter = valueExpression;
			}
			return writeTextStatement;
		}

		// Token: 0x06000A8F RID: 2703 RVA: 0x00027090 File Offset: 0x00025290
		public LineNoStatement lineNoStatement()
		{
			LineNoStatement lineNoStatement = base.FragmentFactory.CreateFragment<LineNoStatement>();
			IToken token = this.LT(1);
			this.match(95);
			IntegerLiteral integerLiteral = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(lineNoStatement, token);
				lineNoStatement.LineNo = integerLiteral;
			}
			return lineNoStatement;
		}

		// Token: 0x06000A90 RID: 2704 RVA: 0x000270E0 File Offset: 0x000252E0
		public UseStatement useStatement()
		{
			UseStatement useStatement = base.FragmentFactory.CreateFragment<UseStatement>();
			IToken token = this.LT(1);
			this.match(162);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(useStatement, token);
				useStatement.DatabaseName = identifier;
			}
			return useStatement;
		}

		// Token: 0x06000A91 RID: 2705 RVA: 0x00027134 File Offset: 0x00025334
		public TSqlStatement killStatements()
		{
			IToken token = this.LT(1);
			this.match(92);
			TSqlStatement tsqlStatement;
			if (TSql110ParserInternal.tokenSet_36_.member(this.LA(1)))
			{
				tsqlStatement = this.killStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("QUERY"))
			{
				tsqlStatement = this.killQueryNotificationSubscriptionStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.killStatsJobStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A92 RID: 2706 RVA: 0x000271F0 File Offset: 0x000253F0
		public BulkInsertStatement bulkInsertStatement()
		{
			BulkInsertStatement bulkInsertStatement = base.FragmentFactory.CreateFragment<BulkInsertStatement>();
			IToken token = this.LT(1);
			this.match(17);
			this.match(86);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertStatement, token);
				bulkInsertStatement.To = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(bulkInsertStatement);
			}
			this.match(71);
			IdentifierOrValueExpression identifierOrValueExpression = this.bulkInsertFrom();
			if (this.inputState.guessing == 0)
			{
				bulkInsertStatement.From = identifierOrValueExpression;
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.bulkInsertOptions(bulkInsertStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return bulkInsertStatement;
		}

		// Token: 0x06000A93 RID: 2707 RVA: 0x000272D0 File Offset: 0x000254D0
		public InsertBulkStatement insertBulkStatement()
		{
			InsertBulkStatement insertBulkStatement = base.FragmentFactory.CreateFragment<InsertBulkStatement>();
			IToken token = this.LT(1);
			this.match(86);
			this.match(17);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				insertBulkStatement.To = schemaObjectName;
				TSql80ParserBaseInternal.UpdateTokenInfo(insertBulkStatement, token);
				base.ThrowPartialAstIfPhaseOne(insertBulkStatement);
			}
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.coldefList(insertBulkStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.insertBulkOptions(insertBulkStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return insertBulkStatement;
		}

		// Token: 0x06000A94 RID: 2708 RVA: 0x000273F8 File Offset: 0x000255F8
		public CheckpointStatement checkpointStatement()
		{
			CheckpointStatement checkpointStatement = base.FragmentFactory.CreateFragment<CheckpointStatement>();
			IToken token = this.LT(1);
			this.match(22);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(checkpointStatement, token);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return checkpointStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return checkpointStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return checkpointStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return checkpointStatement;
							default:
								if (num == 28)
								{
									return checkpointStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return checkpointStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return checkpointStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return checkpointStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return checkpointStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return checkpointStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return checkpointStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return checkpointStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return checkpointStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return checkpointStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return checkpointStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return checkpointStatement;
				case 221:
				{
					Literal literal = this.integer();
					if (this.inputState.guessing == 0)
					{
						checkpointStatement.Duration = literal;
						return checkpointStatement;
					}
					return checkpointStatement;
				}
				default:
					if (num == 232)
					{
						return checkpointStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000A95 RID: 2709 RVA: 0x000276B8 File Offset: 0x000258B8
		public ReconfigureStatement reconfigureStatement()
		{
			ReconfigureStatement reconfigureStatement = base.FragmentFactory.CreateFragment<ReconfigureStatement>();
			IToken token = this.LT(1);
			this.match(126);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(reconfigureStatement, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "OVERRIDE");
					reconfigureStatement.WithOverride = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(reconfigureStatement, token2);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return reconfigureStatement;
		}

		// Token: 0x06000A96 RID: 2710 RVA: 0x00027798 File Offset: 0x00025998
		public ShutdownStatement shutdownStatement()
		{
			ShutdownStatement shutdownStatement = base.FragmentFactory.CreateFragment<ShutdownStatement>();
			IToken token = this.LT(1);
			this.match(144);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(shutdownStatement, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NOWAIT");
					shutdownStatement.WithNoWait = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(shutdownStatement, token2);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return shutdownStatement;
		}

		// Token: 0x06000A97 RID: 2711 RVA: 0x00027878 File Offset: 0x00025A78
		public SetUserStatement setUserStatement()
		{
			SetUserStatement setUserStatement = base.FragmentFactory.CreateFragment<SetUserStatement>();
			IToken token = this.LT(1);
			this.match(143);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(setUserStatement, token);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return setUserStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return setUserStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return setUserStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return setUserStatement;
							default:
								if (num == 28)
								{
									return setUserStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return setUserStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return setUserStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return setUserStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return setUserStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return setUserStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return setUserStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return setUserStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return setUserStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return setUserStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return setUserStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return setUserStatement;
				default:
					switch (num)
					{
					case 230:
					case 231:
					case 234:
					{
						ValueExpression valueExpression = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							setUserStatement.UserName = valueExpression;
						}
						if (this.LA(1) == 171 && this.LA(2) == 232)
						{
							this.match(171);
							IToken token2 = this.LT(1);
							this.match(232);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token2, "NORESET");
								setUserStatement.WithNoReset = true;
								TSql80ParserBaseInternal.UpdateTokenInfo(setUserStatement, token2);
								return setUserStatement;
							}
							return setUserStatement;
						}
						else
						{
							if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							return setUserStatement;
						}
						break;
					}
					case 232:
						return setUserStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000A98 RID: 2712 RVA: 0x00027C1C File Offset: 0x00025E1C
		public TruncateTableStatement truncateTableStatement()
		{
			TruncateTableStatement truncateTableStatement = base.FragmentFactory.CreateFragment<TruncateTableStatement>();
			IToken token = this.LT(1);
			this.match(156);
			this.match(148);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(truncateTableStatement, token);
				truncateTableStatement.TableName = schemaObjectName;
			}
			return truncateTableStatement;
		}

		// Token: 0x06000A99 RID: 2713 RVA: 0x00027C78 File Offset: 0x00025E78
		public GrantStatement grantStatement90()
		{
			GrantStatement grantStatement = base.FragmentFactory.CreateFragment<GrantStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(75);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(grantStatement, token);
			}
			this.permissionsList(grantStatement, ref flag);
			this.securityStatementTargetObjectOpt(grantStatement, flag);
			this.match(151);
			this.securityStatementPrincipalList(grantStatement);
			if (this.LA(1) == 171 && this.LA(2) == 75)
			{
				this.match(171);
				this.match(75);
				IToken token2 = this.LT(1);
				this.match(111);
				if (this.inputState.guessing == 0)
				{
					grantStatement.WithGrantOption = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(grantStatement, token2);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_37_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.securityStatementAsClauseOpt(grantStatement);
			return grantStatement;
		}

		// Token: 0x06000A9A RID: 2714 RVA: 0x00027D78 File Offset: 0x00025F78
		public DenyStatement denyStatement90()
		{
			DenyStatement denyStatement = base.FragmentFactory.CreateFragment<DenyStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(49);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(denyStatement, token);
			}
			this.permissionsList(denyStatement, ref flag);
			this.securityStatementTargetObjectOpt(denyStatement, flag);
			this.match(151);
			this.securityStatementPrincipalList(denyStatement);
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0313;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0313;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_0313;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 20:
						case 21:
							break;
						case 19:
						{
							IToken token2 = this.LT(1);
							this.match(19);
							if (this.inputState.guessing == 0)
							{
								denyStatement.CascadeOption = true;
								TSql80ParserBaseInternal.UpdateTokenInfo(denyStatement, token2);
								goto IL_0313;
							}
							goto IL_0313;
						}
						default:
							if (num == 28)
							{
								goto IL_0313;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0313;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0313;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0313;
						default:
							if (num == 82)
							{
								goto IL_0313;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_0313;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 119)
					{
						goto IL_0313;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0313;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0313;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0313;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_0313;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0313;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0313;
				default:
					if (num == 232)
					{
						goto IL_0313;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0313:
			this.securityStatementAsClauseOpt(denyStatement);
			return denyStatement;
		}

		// Token: 0x06000A9B RID: 2715 RVA: 0x000280A0 File Offset: 0x000262A0
		public RevokeStatement revokeStatement90()
		{
			RevokeStatement revokeStatement = base.FragmentFactory.CreateFragment<RevokeStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(132);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(revokeStatement, token);
			}
			if (this.LA(1) == 75)
			{
				this.match(75);
				this.match(111);
				this.match(67);
				if (this.inputState.guessing == 0)
				{
					revokeStatement.GrantOptionFor = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_38_.member(this.LA(1)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.permissionsList(revokeStatement, ref flag);
			this.securityStatementTargetObjectOpt(revokeStatement, flag);
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 151)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(151);
			}
			else
			{
				this.match(71);
			}
			this.securityStatementPrincipalList(revokeStatement);
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 35)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_03AC;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_03AC;
						}
					}
					else
					{
						switch (num2)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_03AC;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 20:
						case 21:
							break;
						case 19:
						{
							IToken token2 = this.LT(1);
							this.match(19);
							if (this.inputState.guessing == 0)
							{
								revokeStatement.CascadeOption = true;
								TSql80ParserBaseInternal.UpdateTokenInfo(revokeStatement, token2);
								goto IL_03AC;
							}
							goto IL_03AC;
						}
						default:
							if (num2 == 28)
							{
								goto IL_03AC;
							}
							switch (num2)
							{
							case 33:
							case 35:
								goto IL_03AC;
							}
							break;
						}
					}
				}
				else if (num2 <= 82)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_03AC;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num2)
						{
						case 74:
						case 75:
							goto IL_03AC;
						default:
							if (num2 == 82)
							{
								goto IL_03AC;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 86 || num2 == 92 || num2 == 95)
				{
					goto IL_03AC;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 119)
				{
					if (num2 == 106 || num2 == 119)
					{
						goto IL_03AC;
					}
				}
				else
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_03AC;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_03AC;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_03AC;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176 || num2 == 182 || num2 == 191)
				{
					goto IL_03AC;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_03AC;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_03AC;
				default:
					if (num2 == 232)
					{
						goto IL_03AC;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_03AC:
			this.securityStatementAsClauseOpt(revokeStatement);
			return revokeStatement;
		}

		// Token: 0x06000A9C RID: 2716 RVA: 0x00028464 File Offset: 0x00026664
		public ReturnStatement returnStatement()
		{
			ReturnStatement returnStatement = base.FragmentFactory.CreateFragment<ReturnStatement>();
			IToken token = this.LT(1);
			this.match(131);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(returnStatement, token);
			}
			bool flag = false;
			if (TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_40_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.expression(ExpressionFlags.None);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					returnStatement.Expression = scalarExpression;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return returnStatement;
		}

		// Token: 0x06000A9D RID: 2717 RVA: 0x00028580 File Offset: 0x00026780
		public TSqlStatement openStatements()
		{
			IToken token = this.LT(1);
			this.match(106);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.openMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
			{
				tsqlStatement = this.openSymmetricKeyStatement();
			}
			else
			{
				if (this.LA(1) < 232 || this.LA(1) > 234 || !TSql110ParserInternal.tokenSet_41_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.openCursorStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A9E RID: 2718 RVA: 0x00028660 File Offset: 0x00026860
		public TSqlStatement closeStatements()
		{
			IToken token = this.LT(1);
			this.match(23);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.closeMasterKeyStatement();
			}
			else if ((this.LA(1) == 5 || this.LA(1) == 232) && (this.LA(2) == 91 || this.LA(2) == 232) && (base.NextTokenMatches("SYMMETRIC") || this.LA(1) == 5))
			{
				tsqlStatement = this.closeSymmetricKeyStatement();
			}
			else
			{
				if (this.LA(1) < 232 || this.LA(1) > 234 || !TSql110ParserInternal.tokenSet_41_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.closeCursorStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06000A9F RID: 2719 RVA: 0x00028764 File Offset: 0x00026964
		public DeallocateCursorStatement deallocateCursorStatement()
		{
			DeallocateCursorStatement deallocateCursorStatement = base.FragmentFactory.CreateFragment<DeallocateCursorStatement>();
			IToken token = this.LT(1);
			this.match(45);
			CursorId cursorId = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(deallocateCursorStatement, token);
				deallocateCursorStatement.Cursor = cursorId;
			}
			return deallocateCursorStatement;
		}

		// Token: 0x06000AA0 RID: 2720 RVA: 0x000287B4 File Offset: 0x000269B4
		public FetchCursorStatement fetchCursorStatement()
		{
			IToken token = this.LT(1);
			this.match(64);
			FetchCursorStatement fetchCursorStatement = this.rowSelector();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fetchCursorStatement, token);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return fetchCursorStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return fetchCursorStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return fetchCursorStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return fetchCursorStatement;
							default:
								if (num == 28)
								{
									return fetchCursorStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return fetchCursorStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return fetchCursorStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return fetchCursorStatement;
							}
							break;
						}
						break;
					}
				}
				else
				{
					if (num == 82)
					{
						return fetchCursorStatement;
					}
					switch (num)
					{
					case 86:
						return fetchCursorStatement;
					case 87:
						break;
					case 88:
					{
						this.match(88);
						VariableReference variableReference = this.variable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableReference>(fetchCursorStatement, fetchCursorStatement.IntoVariables, variableReference);
						}
						while (this.LA(1) == 198)
						{
							this.match(198);
							variableReference = this.variable();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableReference>(fetchCursorStatement, fetchCursorStatement.IntoVariables, variableReference);
							}
						}
						return fetchCursorStatement;
					}
					default:
						if (num == 92)
						{
							return fetchCursorStatement;
						}
						break;
					}
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return fetchCursorStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return fetchCursorStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return fetchCursorStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return fetchCursorStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return fetchCursorStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return fetchCursorStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return fetchCursorStatement;
				default:
					if (num == 232)
					{
						return fetchCursorStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AA1 RID: 2721 RVA: 0x00028AD0 File Offset: 0x00026CD0
		public TSqlStatement dropStatements()
		{
			IToken token = this.LT(1);
			this.match(54);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 121)
			{
				if (num <= 47)
				{
					if (num == 43)
					{
						tsqlStatement = this.dropDatabaseStatements();
						goto IL_0974;
					}
					if (num == 47)
					{
						tsqlStatement = this.dropDefaultStatement();
						goto IL_0974;
					}
				}
				else
				{
					if (num == 73)
					{
						tsqlStatement = this.dropFunctionStatement();
						goto IL_0974;
					}
					if (num == 84)
					{
						tsqlStatement = this.dropIndexStatement();
						goto IL_0974;
					}
					switch (num)
					{
					case 120:
					case 121:
						tsqlStatement = this.dropProcedureStatement();
						goto IL_0974;
					}
				}
			}
			else if (num <= 148)
			{
				switch (num)
				{
				case 137:
					tsqlStatement = this.dropRuleStatement();
					goto IL_0974;
				case 138:
					break;
				case 139:
					tsqlStatement = this.dropSchemaStatement();
					goto IL_0974;
				default:
					switch (num)
					{
					case 146:
						tsqlStatement = this.dropStatisticsStatement();
						goto IL_0974;
					case 148:
						tsqlStatement = this.dropTableStatement();
						goto IL_0974;
					}
					break;
				}
			}
			else
			{
				if (num == 155)
				{
					tsqlStatement = this.dropTriggerStatement();
					goto IL_0974;
				}
				if (num == 163)
				{
					tsqlStatement = this.dropUserStatement();
					goto IL_0974;
				}
				if (num == 166)
				{
					tsqlStatement = this.dropViewStatement();
					goto IL_0974;
				}
			}
			if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AGGREGATE"))
			{
				tsqlStatement = this.dropAggregateStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY"))
			{
				tsqlStatement = this.dropAssemblyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("AVAILABILITY"))
			{
				tsqlStatement = this.dropAvailabilityGroupStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION"))
			{
				tsqlStatement = this.dropPartitionStatements();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SYNONYM"))
			{
				tsqlStatement = this.dropSynonymStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION"))
			{
				tsqlStatement = this.dropApplicationRoleStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("BROKER"))
			{
				tsqlStatement = this.dropBrokerPriorityStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CRYPTOGRAPHIC"))
			{
				tsqlStatement = this.dropCryptographicProviderStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 183 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT"))
			{
				tsqlStatement = this.dropFulltextStatements();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN"))
			{
				tsqlStatement = this.dropLoginStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("RESOURCE"))
			{
				tsqlStatement = this.dropResourcePoolStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("WORKLOAD"))
			{
				tsqlStatement = this.dropWorkloadGroupStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE"))
			{
				tsqlStatement = this.dropRoleStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.dropMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
			{
				tsqlStatement = this.dropSymmetricKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC"))
			{
				tsqlStatement = this.dropAsymmetricKeyStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
			{
				tsqlStatement = this.dropCertificateStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL"))
			{
				tsqlStatement = this.dropCredentialStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("TYPE"))
			{
				tsqlStatement = this.dropTypeStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 139 && base.NextTokenMatches("XML"))
			{
				tsqlStatement = this.dropXmlSchemaCollectionStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CONTRACT"))
			{
				tsqlStatement = this.dropContractStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
			{
				tsqlStatement = this.dropQueueStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.dropServiceStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE"))
			{
				tsqlStatement = this.dropRouteStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
			{
				tsqlStatement = this.dropMessageTypeStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE"))
			{
				tsqlStatement = this.dropRemoteServiceBindingStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT"))
			{
				tsqlStatement = this.dropEndpointStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 71 || this.LA(2) == 232) && (base.NextTokenMatches("SIGNATURE") || base.NextTokenMatches("COUNTER")))
			{
				tsqlStatement = this.dropSignatureStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("EVENT"))
			{
				tsqlStatement = this.dropEventStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SEARCH"))
			{
				tsqlStatement = this.dropSearchPropertyListStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SEQUENCE"))
			{
				tsqlStatement = this.dropSequenceStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("FEDERATION"))
			{
				tsqlStatement = this.dropFederationStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.dropServerStatements();
			}
			IL_0974:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06000AA2 RID: 2722 RVA: 0x00029468 File Offset: 0x00027668
		public DbccStatement dbccStatement()
		{
			DbccStatement dbccStatement = base.FragmentFactory.CreateFragment<DbccStatement>();
			IToken token = this.LT(1);
			this.match(44);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				DbccCommand dbccCommand;
				if (DbccCommandsHelper.Instance.TryParseOption(token2, out dbccCommand))
				{
					if (dbccCommand == DbccCommand.ConcurrencyViolation || dbccCommand == DbccCommand.MemObjList || dbccCommand == DbccCommand.MemoryMap)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
					}
					dbccStatement.Command = dbccCommand;
				}
				else
				{
					dbccStatement.Command = DbccCommand.Free;
					dbccStatement.DllName = token2.getText();
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccStatement, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccStatement, token2);
			}
			if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_42_.member(this.LA(2)))
			{
				this.dbccNamedLiteralList(dbccStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.dbccOptions(dbccStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return dbccStatement;
		}

		// Token: 0x06000AA3 RID: 2723 RVA: 0x000295C8 File Offset: 0x000277C8
		public RevertStatement revertStatement()
		{
			RevertStatement revertStatement = base.FragmentFactory.CreateFragment<RevertStatement>();
			IToken token = this.LT(1);
			this.match(176);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(revertStatement, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "COOKIE");
					revertStatement.Cookie = scalarExpression;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return revertStatement;
		}

		// Token: 0x06000AA4 RID: 2724 RVA: 0x000296B4 File Offset: 0x000278B4
		public ExecuteAsStatement executeAsStatement()
		{
			ExecuteAsStatement executeAsStatement = base.FragmentFactory.CreateFragment<ExecuteAsStatement>();
			this.execStart(executeAsStatement);
			this.match(9);
			ExecuteContext executeContext = this.executeAsStatementContext();
			if (this.inputState.guessing == 0)
			{
				executeAsStatement.ExecuteContext = executeContext;
			}
			this.executeContextStatementOptionsOpt(executeAsStatement);
			return executeAsStatement;
		}

		// Token: 0x06000AA5 RID: 2725 RVA: 0x00029700 File Offset: 0x00027900
		public EndConversationStatement endConversationStatement()
		{
			EndConversationStatement endConversationStatement = base.FragmentFactory.CreateFragment<EndConversationStatement>();
			this.match(56);
			IToken token = this.LT(1);
			this.match(232);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONVERSATION");
				endConversationStatement.Conversation = scalarExpression;
			}
			this.endConversationArgumentsOpt(endConversationStatement);
			return endConversationStatement;
		}

		// Token: 0x06000AA6 RID: 2726 RVA: 0x00029768 File Offset: 0x00027968
		public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces()
		{
			WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = base.FragmentFactory.CreateFragment<WithCtesAndXmlNamespaces>();
			IToken token = this.LT(1);
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(withCtesAndXmlNamespaces, token);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("XMLNAMESPACES"))
			{
				XmlNamespaces xmlNamespaces = this.xmlNamespaces();
				if (this.inputState.guessing == 0)
				{
					withCtesAndXmlNamespaces.XmlNamespaces = xmlNamespaces;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CHANGE_TRACKING_CONTEXT"))
			{
				this.ctContext(withCtesAndXmlNamespaces);
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 9 && this.LA(2) != 191))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				CommonTableExpression commonTableExpression = this.commonTableExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CommonTableExpression>(withCtesAndXmlNamespaces, withCtesAndXmlNamespaces.CommonTableExpressions, commonTableExpression);
				}
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				CommonTableExpression commonTableExpression = this.commonTableExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CommonTableExpression>(withCtesAndXmlNamespaces, withCtesAndXmlNamespaces.CommonTableExpressions, commonTableExpression);
				}
			}
			return withCtesAndXmlNamespaces;
		}

		// Token: 0x06000AA7 RID: 2727 RVA: 0x000298D0 File Offset: 0x00027AD0
		public SelectStatement select(SubDmlFlags subDmlFlags)
		{
			SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
			QueryExpression queryExpression = this.queryExpression(subDmlFlags, selectStatement);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_0368;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0368;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_0368;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_0368;
						default:
							if (num == 28)
							{
								goto IL_0368;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0368;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0368;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num == 67)
						{
							goto IL_0368;
						}
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0368;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0368;
				}
			}
			else if (num <= 162)
			{
				if (num <= 113)
				{
					if (num == 95 || num == 106)
					{
						goto IL_0368;
					}
					switch (num)
					{
					case 111:
						goto IL_0368;
					case 113:
					{
						OrderByClause orderByClause = this.orderByClause();
						if (this.inputState.guessing == 0)
						{
							queryExpression.OrderByClause = orderByClause;
						}
						if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_39_.member(this.LA(2)))
						{
							OffsetClause offsetClause = this.offsetClause();
							if (this.inputState.guessing == 0)
							{
								queryExpression.OffsetClause = offsetClause;
								goto IL_0368;
							}
							goto IL_0368;
						}
						else
						{
							if (!TSql110ParserInternal.tokenSet_43_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							goto IL_0368;
						}
						break;
					}
					}
				}
				else
				{
					if (num == 119)
					{
						goto IL_0368;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0368;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0368;
						}
						break;
					}
				}
			}
			else if (num <= 182)
			{
				switch (num)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					goto IL_0368;
				case 168:
				case 169:
					break;
				default:
					if (num == 176 || num == 182)
					{
						goto IL_0368;
					}
					break;
				}
			}
			else if (num <= 204)
			{
				if (num == 191 || num == 204)
				{
					goto IL_0368;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0368;
				default:
					if (num == 232)
					{
						goto IL_0368;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0368:
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							goto IL_0623;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_0623;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_0623;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							goto IL_0623;
						default:
							if (num2 == 28)
							{
								goto IL_0623;
							}
							switch (num2)
							{
							case 33:
							case 35:
								goto IL_0623;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0623;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num2 != 67)
						{
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_0623;
							}
						}
						else
						{
							ForClause forClause = this.forClause();
							if (this.inputState.guessing == 0)
							{
								queryExpression.ForClause = forClause;
								goto IL_0623;
							}
							goto IL_0623;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					goto IL_0623;
				}
			}
			else if (num2 <= 162)
			{
				if (num2 <= 111)
				{
					if (num2 == 95 || num2 == 106 || num2 == 111)
					{
						goto IL_0623;
					}
				}
				else
				{
					if (num2 == 119)
					{
						goto IL_0623;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0623;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0623;
						}
						break;
					}
				}
			}
			else if (num2 <= 182)
			{
				switch (num2)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					goto IL_0623;
				case 168:
				case 169:
					break;
				default:
					if (num2 == 176 || num2 == 182)
					{
						goto IL_0623;
					}
					break;
				}
			}
			else if (num2 <= 204)
			{
				if (num2 == 191 || num2 == 204)
				{
					goto IL_0623;
				}
			}
			else
			{
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_0623;
				default:
					if (num2 == 232)
					{
						goto IL_0623;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0623:
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 35)
				{
					if (num3 <= 17)
					{
						if (num3 == 1)
						{
							goto IL_08B7;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_08B7;
						case 5:
							break;
						default:
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_08B7;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 22:
						case 23:
							goto IL_08B7;
						default:
							if (num3 == 28)
							{
								goto IL_08B7;
							}
							switch (num3)
							{
							case 33:
							case 35:
								goto IL_08B7;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_08B7;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							goto IL_08B7;
						default:
							if (num3 == 82)
							{
								goto IL_08B7;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					goto IL_08B7;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 119)
				{
					if (num3 == 106)
					{
						goto IL_08B7;
					}
					if (num3 == 111)
					{
						this.optimizerHints(selectStatement, selectStatement.OptimizerHints);
						goto IL_08B7;
					}
					if (num3 == 119)
					{
						goto IL_08B7;
					}
				}
				else
				{
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_08B7;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_08B7;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num3)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_08B7;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176 || num3 == 182 || num3 == 191)
				{
					goto IL_08B7;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_08B7;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_08B7;
				default:
					if (num3 == 232)
					{
						goto IL_08B7;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_08B7:
			if (this.inputState.guessing == 0)
			{
				selectStatement.QueryExpression = queryExpression;
			}
			return selectStatement;
		}

		// Token: 0x06000AA8 RID: 2728 RVA: 0x0002A1AC File Offset: 0x000283AC
		public DeleteStatement deleteStatement(SubDmlFlags subDmlFlags)
		{
			DeleteStatement deleteStatement = base.FragmentFactory.CreateFragment<DeleteStatement>();
			DeleteSpecification deleteSpecification = this.deleteSpecification(subDmlFlags);
			if (this.inputState.guessing == 0)
			{
				deleteStatement.DeleteSpecification = deleteSpecification;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return deleteStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return deleteStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return deleteStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return deleteStatement;
						default:
							if (num == 28)
							{
								return deleteStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return deleteStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return deleteStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return deleteStatement;
						default:
							if (num == 82)
							{
								return deleteStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return deleteStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						return deleteStatement;
					}
					if (num == 111)
					{
						this.optimizerHints(deleteStatement, deleteStatement.OptimizerHints);
						return deleteStatement;
					}
					if (num == 119)
					{
						return deleteStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return deleteStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return deleteStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return deleteStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return deleteStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return deleteStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return deleteStatement;
				default:
					if (num == 232)
					{
						return deleteStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AA9 RID: 2729 RVA: 0x0002A454 File Offset: 0x00028654
		public InsertStatement insertStatement(SubDmlFlags subDmlFlags)
		{
			InsertStatement insertStatement = base.FragmentFactory.CreateFragment<InsertStatement>();
			InsertSpecification insertSpecification = this.insertSpecification(subDmlFlags);
			if (this.inputState.guessing == 0)
			{
				insertStatement.InsertSpecification = insertSpecification;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return insertStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return insertStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return insertStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return insertStatement;
						default:
							if (num == 28)
							{
								return insertStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return insertStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return insertStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return insertStatement;
						default:
							if (num == 82)
							{
								return insertStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return insertStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						return insertStatement;
					}
					if (num == 111)
					{
						this.optimizerHints(insertStatement, insertStatement.OptimizerHints);
						return insertStatement;
					}
					if (num == 119)
					{
						return insertStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return insertStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return insertStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return insertStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return insertStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return insertStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return insertStatement;
				default:
					if (num == 232)
					{
						return insertStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AAA RID: 2730 RVA: 0x0002A6FC File Offset: 0x000288FC
		public UpdateStatement updateStatement(SubDmlFlags subDmlFlags)
		{
			UpdateStatement updateStatement = base.FragmentFactory.CreateFragment<UpdateStatement>();
			UpdateSpecification updateSpecification = this.updateSpecification(subDmlFlags);
			if (this.inputState.guessing == 0)
			{
				updateStatement.UpdateSpecification = updateSpecification;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return updateStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return updateStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return updateStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return updateStatement;
						default:
							if (num == 28)
							{
								return updateStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return updateStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return updateStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return updateStatement;
						default:
							if (num == 82)
							{
								return updateStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return updateStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						return updateStatement;
					}
					if (num == 111)
					{
						this.optimizerHints(updateStatement, updateStatement.OptimizerHints);
						return updateStatement;
					}
					if (num == 119)
					{
						return updateStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return updateStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return updateStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return updateStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return updateStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return updateStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return updateStatement;
				default:
					if (num == 232)
					{
						return updateStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AAB RID: 2731 RVA: 0x0002A9A4 File Offset: 0x00028BA4
		public MergeStatement mergeStatement(SubDmlFlags subDmlFlags)
		{
			MergeStatement mergeStatement = this.mergeStatementWithoutSemicolon(subDmlFlags);
			this.requiredSemicolon(mergeStatement, "MERGE");
			return mergeStatement;
		}

		// Token: 0x06000AAC RID: 2732 RVA: 0x0002A9C8 File Offset: 0x00028BC8
		public CreateProcedureStatement createProcedureStatement()
		{
			CreateProcedureStatement createProcedureStatement = base.FragmentFactory.CreateFragment<CreateProcedureStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createProcedureStatement, token);
			}
			this.procedureStatementBody(createProcedureStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				createProcedureStatement = null;
			}
			return createProcedureStatement;
		}

		// Token: 0x06000AAD RID: 2733 RVA: 0x0002AA28 File Offset: 0x00028C28
		public AlterProcedureStatement alterProcedureStatement()
		{
			AlterProcedureStatement alterProcedureStatement = base.FragmentFactory.CreateFragment<AlterProcedureStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterProcedureStatement, token);
			}
			this.procedureStatementBody(alterProcedureStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				alterProcedureStatement = null;
			}
			return alterProcedureStatement;
		}

		// Token: 0x06000AAE RID: 2734 RVA: 0x0002AA84 File Offset: 0x00028C84
		public CreateTriggerStatement createTriggerStatement()
		{
			CreateTriggerStatement createTriggerStatement = base.FragmentFactory.CreateFragment<CreateTriggerStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTriggerStatement, token);
			}
			this.triggerStatementBody(createTriggerStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				createTriggerStatement = null;
			}
			return createTriggerStatement;
		}

		// Token: 0x06000AAF RID: 2735 RVA: 0x0002AAE4 File Offset: 0x00028CE4
		public AlterTriggerStatement alterTriggerStatement()
		{
			AlterTriggerStatement alterTriggerStatement = base.FragmentFactory.CreateFragment<AlterTriggerStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterTriggerStatement, token);
			}
			this.triggerStatementBody(alterTriggerStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				alterTriggerStatement = null;
			}
			return alterTriggerStatement;
		}

		// Token: 0x06000AB0 RID: 2736 RVA: 0x0002AB40 File Offset: 0x00028D40
		public CreateDefaultStatement createDefaultStatement()
		{
			CreateDefaultStatement createDefaultStatement = base.FragmentFactory.CreateFragment<CreateDefaultStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(47);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createDefaultStatement, token);
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "DEFAULT");
				createDefaultStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createDefaultStatement);
			}
			this.match(9);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				createDefaultStatement.Expression = scalarExpression;
			}
			return createDefaultStatement;
		}

		// Token: 0x06000AB1 RID: 2737 RVA: 0x0002ABCC File Offset: 0x00028DCC
		public CreateRuleStatement createRuleStatement()
		{
			CreateRuleStatement createRuleStatement = base.FragmentFactory.CreateFragment<CreateRuleStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(137);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createRuleStatement, token);
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "RULE");
				createRuleStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createRuleStatement);
			}
			this.match(9);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				createRuleStatement.Expression = booleanExpression;
			}
			return createRuleStatement;
		}

		// Token: 0x06000AB2 RID: 2738 RVA: 0x0002AC68 File Offset: 0x00028E68
		public CreateViewStatement createViewStatement()
		{
			CreateViewStatement createViewStatement = base.FragmentFactory.CreateFragment<CreateViewStatement>();
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createViewStatement, token);
			}
			this.viewStatementBody(createViewStatement);
			return createViewStatement;
		}

		// Token: 0x06000AB3 RID: 2739 RVA: 0x0002ACB0 File Offset: 0x00028EB0
		public AlterViewStatement alterViewStatement()
		{
			AlterViewStatement alterViewStatement = base.FragmentFactory.CreateFragment<AlterViewStatement>();
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterViewStatement, token);
			}
			this.viewStatementBody(alterViewStatement);
			return alterViewStatement;
		}

		// Token: 0x06000AB4 RID: 2740 RVA: 0x0002ACF8 File Offset: 0x00028EF8
		public CreateFunctionStatement createFunctionStatement()
		{
			CreateFunctionStatement createFunctionStatement = base.FragmentFactory.CreateFragment<CreateFunctionStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createFunctionStatement, token);
			}
			this.functionStatementBody(createFunctionStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				createFunctionStatement = null;
			}
			return createFunctionStatement;
		}

		// Token: 0x06000AB5 RID: 2741 RVA: 0x0002AD58 File Offset: 0x00028F58
		public AlterFunctionStatement alterFunctionStatement()
		{
			AlterFunctionStatement alterFunctionStatement = base.FragmentFactory.CreateFragment<AlterFunctionStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterFunctionStatement, token);
			}
			this.functionStatementBody(alterFunctionStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				alterFunctionStatement = null;
			}
			return alterFunctionStatement;
		}

		// Token: 0x06000AB6 RID: 2742 RVA: 0x0002ADB4 File Offset: 0x00028FB4
		public CreateSchemaStatement createSchemaStatement()
		{
			CreateSchemaStatement createSchemaStatement = base.FragmentFactory.CreateFragment<CreateSchemaStatement>();
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createSchemaStatement, token);
			}
			this.match(139);
			int num = this.LA(1);
			if (num != 11)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						createSchemaStatement.Name = identifier;
					}
					this.authorizationOpt(createSchemaStatement);
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.authorization(createSchemaStatement);
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(createSchemaStatement);
			}
			StatementList statementList = this.createSchemaElementList();
			if (this.inputState.guessing == 0)
			{
				createSchemaStatement.StatementList = statementList;
			}
			return createSchemaStatement;
		}

		// Token: 0x06000AB7 RID: 2743 RVA: 0x0002AE94 File Offset: 0x00029094
		public CreateFederationStatement createFederationStatement()
		{
			CreateFederationStatement createFederationStatement = base.FragmentFactory.CreateFragment<CreateFederationStatement>();
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createFederationStatement, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "FEDERATION");
				createFederationStatement.Name = identifier;
			}
			this.match(191);
			Identifier identifier2 = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createFederationStatement.DistributionName = identifier2;
			}
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				createFederationStatement.DataType = dataTypeReference;
			}
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "RANGE");
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createFederationStatement, token4);
			}
			return createFederationStatement;
		}

		// Token: 0x06000AB8 RID: 2744 RVA: 0x0002AFB0 File Offset: 0x000291B0
		public AlterFederationStatement alterFederationStatement()
		{
			AlterFederationStatement alterFederationStatement = base.FragmentFactory.CreateFragment<AlterFederationStatement>();
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterFederationStatement, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "FEDERATION");
				alterFederationStatement.Name = identifier;
			}
			int num = this.LA(1);
			if (num != 54)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				IToken token4 = this.LT(1);
				this.match(232);
				this.match(191);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "SPLIT");
					TSql80ParserBaseInternal.Match(token4, "AT");
					alterFederationStatement.Kind = AlterFederationKind.Split;
				}
			}
			else
			{
				this.LT(1);
				this.match(54);
				IToken token5 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token5, "AT");
				}
				this.match(191);
				IToken token6 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token6, "LOW"))
					{
						alterFederationStatement.Kind = AlterFederationKind.DropLow;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token6, "HIGH");
						alterFederationStatement.Kind = AlterFederationKind.DropHigh;
					}
				}
			}
			Identifier identifier2 = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterFederationStatement.DistributionName = identifier2;
			}
			this.match(206);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				alterFederationStatement.Boundary = scalarExpression;
			}
			IToken token7 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterFederationStatement, token7);
			}
			return alterFederationStatement;
		}

		// Token: 0x06000AB9 RID: 2745 RVA: 0x0002B1D4 File Offset: 0x000293D4
		public UseFederationStatement useFederationStatement()
		{
			UseFederationStatement useFederationStatement = base.FragmentFactory.CreateFragment<UseFederationStatement>();
			IToken token = this.LT(1);
			this.match(162);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(useFederationStatement, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "FEDERATION");
			}
			if (this.LA(1) == 232 && this.LA(2) == 171 && base.NextTokenMatches("ROOT"))
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "ROOT");
				}
				this.match(171);
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || this.LA(2) != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					useFederationStatement.FederationName = identifier;
				}
				this.match(191);
				Identifier identifier2 = this.identifier();
				if (this.inputState.guessing == 0)
				{
					useFederationStatement.DistributionName = identifier2;
				}
				this.match(206);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					useFederationStatement.Value = scalarExpression;
				}
				this.match(192);
				this.match(171);
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "FILTERING");
				}
				this.match(206);
				switch (this.LA(1))
				{
				case 103:
					this.match(103);
					goto IL_0216;
				case 105:
					this.match(105);
					if (this.inputState.guessing == 0)
					{
						useFederationStatement.Filtering = true;
						goto IL_0216;
					}
					goto IL_0216;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0216:
				this.match(198);
			}
			IToken token5 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token5, "RESET");
				TSql80ParserBaseInternal.UpdateTokenInfo(useFederationStatement, token5);
			}
			return useFederationStatement;
		}

		// Token: 0x06000ABA RID: 2746 RVA: 0x0002B450 File Offset: 0x00029650
		public EnableDisableTriggerStatement disableTriggerStatement()
		{
			EnableDisableTriggerStatement enableDisableTriggerStatement = base.FragmentFactory.CreateFragment<EnableDisableTriggerStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "DISABLE");
				TSql80ParserBaseInternal.UpdateTokenInfo(enableDisableTriggerStatement, token);
				enableDisableTriggerStatement.TriggerEnforcement = TriggerEnforcement.Disable;
			}
			this.enableDisableTriggerBody(enableDisableTriggerStatement);
			return enableDisableTriggerStatement;
		}

		// Token: 0x06000ABB RID: 2747 RVA: 0x0002B4AC File Offset: 0x000296AC
		public EnableDisableTriggerStatement enableTriggerStatement()
		{
			EnableDisableTriggerStatement enableDisableTriggerStatement = base.FragmentFactory.CreateFragment<EnableDisableTriggerStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENABLE");
				TSql80ParserBaseInternal.UpdateTokenInfo(enableDisableTriggerStatement, token);
				enableDisableTriggerStatement.TriggerEnforcement = TriggerEnforcement.Enable;
			}
			this.enableDisableTriggerBody(enableDisableTriggerStatement);
			return enableDisableTriggerStatement;
		}

		// Token: 0x06000ABC RID: 2748 RVA: 0x0002B508 File Offset: 0x00029708
		public MoveConversationStatement moveConversationStatement()
		{
			MoveConversationStatement moveConversationStatement = base.FragmentFactory.CreateFragment<MoveConversationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(151);
			ScalarExpression scalarExpression2 = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MOVE");
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(moveConversationStatement, token);
				moveConversationStatement.Conversation = scalarExpression;
				moveConversationStatement.Group = scalarExpression2;
			}
			return moveConversationStatement;
		}

		// Token: 0x06000ABD RID: 2749 RVA: 0x0002B5A4 File Offset: 0x000297A4
		public GetConversationGroupStatement getConversationGroupStatement()
		{
			GetConversationGroupStatement getConversationGroupStatement = base.FragmentFactory.CreateFragment<GetConversationGroupStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(76);
			VariableReference variableReference = this.variable();
			this.match(71);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "GET");
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(getConversationGroupStatement, token);
				getConversationGroupStatement.GroupId = variableReference;
				getConversationGroupStatement.Queue = schemaObjectName;
			}
			return getConversationGroupStatement;
		}

		// Token: 0x06000ABE RID: 2750 RVA: 0x0002B640 File Offset: 0x00029840
		public ReceiveStatement receiveStatement()
		{
			ReceiveStatement receiveStatement = base.FragmentFactory.CreateFragment<ReceiveStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RECEIVE");
				TSql80ParserBaseInternal.UpdateTokenInfo(receiveStatement, token);
			}
			int num = this.LA(1);
			if (num <= 133)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num == 20 || num == 25)
						{
							goto IL_0246;
						}
					}
					else
					{
						if (num == 34)
						{
							goto IL_0246;
						}
						switch (num)
						{
						case 40:
						case 41:
							goto IL_0246;
						}
					}
				}
				else if (num <= 93)
				{
					if (num == 81 || num == 93)
					{
						goto IL_0246;
					}
				}
				else
				{
					switch (num)
					{
					case 100:
					case 101:
						goto IL_0246;
					default:
						if (num == 133)
						{
							goto IL_0246;
						}
						break;
					}
				}
			}
			else if (num <= 152)
			{
				if (num <= 141)
				{
					if (num == 136 || num == 141)
					{
						goto IL_0246;
					}
				}
				else
				{
					if (num == 147)
					{
						goto IL_0246;
					}
					if (num == 152)
					{
						this.match(152);
						this.match(191);
						ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
						this.match(192);
						if (this.inputState.guessing == 0)
						{
							receiveStatement.Top = scalarExpression;
							goto IL_0246;
						}
						goto IL_0246;
					}
				}
			}
			else if (num <= 187)
			{
				if (num == 163 || num == 187)
				{
					goto IL_0246;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_0246;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_0246;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0246:
			SelectElement selectElement = this.receiveSelectExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(receiveStatement, receiveStatement.SelectElements, selectElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				selectElement = this.receiveSelectExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(receiveStatement, receiveStatement.SelectElements, selectElement);
				}
			}
			this.match(71);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				receiveStatement.Queue = schemaObjectName;
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_0590;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_0590;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0590;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_0590;
							default:
								if (num2 == 28)
								{
									goto IL_0590;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 33:
					case 35:
						goto IL_0590;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_0590;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_0590;
							}
							break;
						}
						break;
					}
				}
				else
				{
					if (num2 == 82)
					{
						goto IL_0590;
					}
					switch (num2)
					{
					case 86:
						goto IL_0590;
					case 87:
						break;
					case 88:
					{
						this.match(88);
						VariableTableReference variableTableReference = this.variableDmlTarget();
						if (this.inputState.guessing == 0)
						{
							receiveStatement.Into = variableTableReference;
							goto IL_0590;
						}
						goto IL_0590;
					}
					default:
						if (num2 == 92)
						{
							goto IL_0590;
						}
						break;
					}
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 106)
				{
					if (num2 == 95 || num2 == 106)
					{
						goto IL_0590;
					}
				}
				else
				{
					if (num2 == 119)
					{
						goto IL_0590;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0590;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 169:
						case 170:
						case 171:
						case 172:
							goto IL_0590;
						}
						break;
					}
				}
			}
			else if (num2 <= 192)
			{
				if (num2 == 176 || num2 == 182)
				{
					goto IL_0590;
				}
				switch (num2)
				{
				case 191:
				case 192:
					goto IL_0590;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_0590;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_0590;
				default:
					if (num2 == 232)
					{
						goto IL_0590;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0590:
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 28)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							return receiveStatement;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return receiveStatement;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return receiveStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								return receiveStatement;
							default:
								if (num3 == 28)
								{
									return receiveStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 75)
				{
					switch (num3)
					{
					case 33:
					case 35:
						return receiveStatement;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return receiveStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num3)
							{
							case 74:
							case 75:
								return receiveStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					return receiveStatement;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 106)
				{
					if (num3 == 95 || num3 == 106)
					{
						return receiveStatement;
					}
				}
				else
				{
					if (num3 == 119)
					{
						return receiveStatement;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return receiveStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return receiveStatement;
						case 169:
						{
							this.match(169);
							IToken token2 = this.LT(1);
							this.match(232);
							this.match(206);
							ValueExpression valueExpression = this.stringOrVariable();
							if (this.inputState.guessing == 0)
							{
								if (TSql80ParserBaseInternal.TryMatch(token2, "CONVERSATION_GROUP_ID"))
								{
									receiveStatement.IsConversationGroupIdWhere = true;
								}
								else
								{
									TSql80ParserBaseInternal.Match(token2, "CONVERSATION_HANDLE");
									receiveStatement.IsConversationGroupIdWhere = false;
								}
								receiveStatement.Where = valueExpression;
								return receiveStatement;
							}
							return receiveStatement;
						}
						}
						break;
					}
				}
			}
			else if (num3 <= 192)
			{
				if (num3 == 176 || num3 == 182)
				{
					return receiveStatement;
				}
				switch (num3)
				{
				case 191:
				case 192:
					return receiveStatement;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return receiveStatement;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return receiveStatement;
				default:
					if (num3 == 232)
					{
						return receiveStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000ABF RID: 2751 RVA: 0x0002BEEC File Offset: 0x0002A0EC
		public SendStatement sendStatement()
		{
			SendStatement sendStatement = base.FragmentFactory.CreateFragment<SendStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(105);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SEND");
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(sendStatement, token);
			}
			if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_39_.member(this.LA(2)) && this.LA(1) == 191)
			{
				this.match(191);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(sendStatement, sendStatement.ConversationHandles, scalarExpression);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					scalarExpression = this.expression(ExpressionFlags.None);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(sendStatement, sendStatement.ConversationHandles, scalarExpression);
					}
				}
				this.match(192);
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_40_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(sendStatement, sendStatement.ConversationHandles, scalarExpression);
				}
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
			{
				IToken token3 = this.LT(1);
				this.match(232);
				IToken token4 = this.LT(1);
				this.match(232);
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "MESSAGE");
					TSql80ParserBaseInternal.Match(token4, "TYPE");
					sendStatement.MessageTypeName = identifierOrValueExpression;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_39_.member(this.LA(2)))
			{
				this.match(191);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				IToken token5 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					sendStatement.MessageBody = scalarExpression;
					TSql80ParserBaseInternal.UpdateTokenInfo(sendStatement, token5);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return sendStatement;
		}

		// Token: 0x06000AC0 RID: 2752 RVA: 0x0002C1DC File Offset: 0x0002A3DC
		public ThrowStatement throwStatement()
		{
			ThrowStatement throwStatement = base.FragmentFactory.CreateFragment<ThrowStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "THROW");
				TSql80ParserBaseInternal.UpdateTokenInfo(throwStatement, token);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return throwStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return throwStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return throwStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return throwStatement;
							default:
								if (num == 28)
								{
									return throwStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return throwStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return throwStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return throwStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return throwStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return throwStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return throwStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return throwStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return throwStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return throwStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return throwStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return throwStatement;
				case 221:
					break;
				default:
					switch (num)
					{
					case 232:
						return throwStatement;
					case 233:
						goto IL_031F;
					case 234:
						break;
					default:
						goto IL_031F;
					}
					break;
				}
				ValueExpression valueExpression = this.integerOrVariable();
				this.match(198);
				ValueExpression valueExpression2 = this.stringOrVariable();
				this.match(198);
				ValueExpression valueExpression3 = this.integerOrVariable();
				if (this.inputState.guessing == 0)
				{
					throwStatement.ErrorNumber = valueExpression;
					throwStatement.Message = valueExpression2;
					throwStatement.State = valueExpression3;
					return throwStatement;
				}
				return throwStatement;
			}
			IL_031F:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AC1 RID: 2753 RVA: 0x0002C51C File Offset: 0x0002A71C
		public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent)
		{
			this.match(155);
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.TriggerNames, schemaObjectName);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					schemaObjectName = this.schemaObjectThreePartName();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.TriggerNames, schemaObjectName);
					}
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					vParent.All = true;
				}
			}
			this.match(105);
			TriggerObject triggerObject = this.triggerObject();
			if (this.inputState.guessing == 0)
			{
				vParent.TriggerObject = triggerObject;
			}
		}

		// Token: 0x06000AC2 RID: 2754 RVA: 0x0002C610 File Offset: 0x0002A810
		public SchemaObjectName schemaObjectThreePartName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			List<Identifier> list = this.identifierList(3);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, list);
			}
			return schemaObjectName;
		}

		// Token: 0x06000AC3 RID: 2755 RVA: 0x0002C64C File Offset: 0x0002A84C
		public TriggerObject triggerObject()
		{
			TriggerObject triggerObject = base.FragmentFactory.CreateFragment<TriggerObject>();
			int num = this.LA(1);
			if (num <= 43)
			{
				if (num == 5 || num == 43)
				{
					TriggerScope triggerScope = this.triggerScope(triggerObject);
					if (this.inputState.guessing == 0)
					{
						triggerObject.TriggerScope = triggerScope;
						return triggerObject;
					}
					return triggerObject;
				}
			}
			else
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_0084;
					}
				}
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					triggerObject.Name = schemaObjectName;
					triggerObject.TriggerScope = TriggerScope.Normal;
					return triggerObject;
				}
				return triggerObject;
			}
			IL_0084:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AC4 RID: 2756 RVA: 0x0002C6F4 File Offset: 0x0002A8F4
		public CreateAggregateStatement createAggregateStatement()
		{
			CreateAggregateStatement createAggregateStatement = base.FragmentFactory.CreateFragment<CreateAggregateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AGGREGATE");
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "AGGREGATE");
				createAggregateStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createAggregateStatement);
			}
			this.match(191);
			ProcedureParameter procedureParameter = this.aggregateParameter();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(createAggregateStatement, createAggregateStatement.Parameters, procedureParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				procedureParameter = this.aggregateParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(createAggregateStatement, createAggregateStatement.Parameters, procedureParameter);
				}
			}
			this.match(192);
			IToken token2 = this.LT(1);
			this.match(232);
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "RETURNS");
				createAggregateStatement.ReturnType = dataTypeReference;
			}
			this.match(175);
			AssemblyName assemblyName = this.assemblyName();
			if (this.inputState.guessing == 0)
			{
				createAggregateStatement.AssemblyName = assemblyName;
			}
			return createAggregateStatement;
		}

		// Token: 0x06000AC5 RID: 2757 RVA: 0x0002C838 File Offset: 0x0002AA38
		public CreateApplicationRoleStatement createApplicationRoleStatement()
		{
			CreateApplicationRoleStatement createApplicationRoleStatement = base.FragmentFactory.CreateFragment<CreateApplicationRoleStatement>();
			this.applicationRoleStatement(createApplicationRoleStatement, true);
			return createApplicationRoleStatement;
		}

		// Token: 0x06000AC6 RID: 2758 RVA: 0x0002C85C File Offset: 0x0002AA5C
		public CreateAssemblyStatement createAssemblyStatement()
		{
			CreateAssemblyStatement createAssemblyStatement = base.FragmentFactory.CreateFragment<CreateAssemblyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
				createAssemblyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createAssemblyStatement);
			}
			this.authorizationOpt(createAssemblyStatement);
			this.match(71);
			this.expressionList(createAssemblyStatement, createAssemblyStatement.Parameters);
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				AssemblyOption assemblyOption = this.assemblyPermissionSetOption(token2);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AssemblyOption>(createAssemblyStatement, createAssemblyStatement.Options, assemblyOption);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createAssemblyStatement;
		}

		// Token: 0x06000AC7 RID: 2759 RVA: 0x0002C97C File Offset: 0x0002AB7C
		public CreateAsymmetricKeyStatement createAsymmetricKeyStatement()
		{
			CreateAsymmetricKeyStatement createAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<CreateAsymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				createAsymmetricKeyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createAsymmetricKeyStatement);
			}
			this.authorizationOpt(createAsymmetricKeyStatement);
			this.createAsymmetricKeyParams(createAsymmetricKeyStatement);
			if (this.LA(1) == 232 && this.LA(2) == 18)
			{
				Literal literal = this.encryptClause();
				if (this.inputState.guessing == 0)
				{
					createAsymmetricKeyStatement.Password = literal;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createAsymmetricKeyStatement;
		}

		// Token: 0x06000AC8 RID: 2760 RVA: 0x0002CA60 File Offset: 0x0002AC60
		public CreateAvailabilityGroupStatement createAvailabilityGroupStatement()
		{
			CreateAvailabilityGroupStatement createAvailabilityGroupStatement = base.FragmentFactory.CreateFragment<CreateAvailabilityGroupStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(76);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AVAILABILITY");
				createAvailabilityGroupStatement.Name = identifier;
			}
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.LT(1);
				this.match(171);
				this.match(191);
				AvailabilityGroupOption availabilityGroupOption = this.availabilityGroupOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityGroupOption>(createAvailabilityGroupStatement, createAvailabilityGroupStatement.Options, availabilityGroupOption);
				}
				this.match(192);
			}
			this.match(67);
			int num2 = this.LA(1);
			if (num2 != 43)
			{
				if (num2 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(43);
				Identifier identifier2 = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(createAvailabilityGroupStatement, createAvailabilityGroupStatement.Databases, identifier2);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					identifier2 = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(createAvailabilityGroupStatement, createAvailabilityGroupStatement.Databases, identifier2);
					}
				}
			}
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(105);
			AvailabilityReplica availabilityReplica = this.availabilityReplica();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "REPLICA");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityReplica>(createAvailabilityGroupStatement, createAvailabilityGroupStatement.Replicas, availabilityReplica);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				availabilityReplica = this.availabilityReplica();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityReplica>(createAvailabilityGroupStatement, createAvailabilityGroupStatement.Replicas, availabilityReplica);
				}
			}
			return createAvailabilityGroupStatement;
		}

		// Token: 0x06000AC9 RID: 2761 RVA: 0x0002CC60 File Offset: 0x0002AE60
		public CreateBrokerPriorityStatement createBrokerPriorityStatement()
		{
			CreateBrokerPriorityStatement createBrokerPriorityStatement = base.FragmentFactory.CreateFragment<CreateBrokerPriorityStatement>();
			this.brokerPriorityStatementBody(createBrokerPriorityStatement);
			return createBrokerPriorityStatement;
		}

		// Token: 0x06000ACA RID: 2762 RVA: 0x0002CC84 File Offset: 0x0002AE84
		public CreateCertificateStatement createCertificateStatement()
		{
			CreateCertificateStatement createCertificateStatement = base.FragmentFactory.CreateFragment<CreateCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				createCertificateStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createCertificateStatement);
			}
			this.authorizationOpt(createCertificateStatement);
			this.createCertificateParams(createCertificateStatement);
			if (this.LA(1) == 232 && this.LA(2) == 67)
			{
				this.createCertificateActivityFlag(createCertificateStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createCertificateStatement;
		}

		// Token: 0x06000ACB RID: 2763 RVA: 0x0002CD4C File Offset: 0x0002AF4C
		public CreateColumnStoreIndexStatement createColumnStoreIndexStatement(IToken tUnique, bool? isClustered)
		{
			CreateColumnStoreIndexStatement createColumnStoreIndexStatement = base.FragmentFactory.CreateFragment<CreateColumnStoreIndexStatement>();
			if (tUnique != null)
			{
				TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(tUnique);
			}
			createColumnStoreIndexStatement.Clustered = isClustered;
			IToken token = this.LT(1);
			this.match(232);
			this.LT(1);
			this.match(84);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "COLUMNSTORE");
				createColumnStoreIndexStatement.Name = identifier;
			}
			this.LT(1);
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				createColumnStoreIndexStatement.OnName = schemaObjectName;
			}
			if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.identifierColumnList(createColumnStoreIndexStatement, createColumnStoreIndexStatement.Columns);
				if (this.inputState.guessing == 0 && isClustered != null && isClustered == true && createColumnStoreIndexStatement.Columns.Count > 0)
				{
					TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(createColumnStoreIndexStatement.Columns[0]);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_44_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0 && (isClustered == null || isClustered == false) && createColumnStoreIndexStatement.Columns.Count == 0)
			{
				TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(createColumnStoreIndexStatement.OnName);
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.indexOptionList(IndexAffectingStatement.CreateColumnStoreIndex, createColumnStoreIndexStatement.IndexOptions, createColumnStoreIndexStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_44_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return createColumnStoreIndexStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createColumnStoreIndexStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return createColumnStoreIndexStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return createColumnStoreIndexStatement;
							default:
								if (num == 28)
								{
									return createColumnStoreIndexStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return createColumnStoreIndexStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createColumnStoreIndexStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return createColumnStoreIndexStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return createColumnStoreIndexStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return createColumnStoreIndexStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
						if (this.inputState.guessing == 0)
						{
							createColumnStoreIndexStatement.OnFileGroupOrPartitionScheme = fileGroupOrPartitionScheme;
							return createColumnStoreIndexStatement;
						}
						return createColumnStoreIndexStatement;
					}
					case 106:
						return createColumnStoreIndexStatement;
					default:
						if (num == 119)
						{
							return createColumnStoreIndexStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createColumnStoreIndexStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createColumnStoreIndexStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createColumnStoreIndexStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return createColumnStoreIndexStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return createColumnStoreIndexStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createColumnStoreIndexStatement;
				default:
					if (num == 232)
					{
						return createColumnStoreIndexStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000ACC RID: 2764 RVA: 0x0002D220 File Offset: 0x0002B420
		public CreateContractStatement createContractStatement()
		{
			CreateContractStatement createContractStatement = base.FragmentFactory.CreateFragment<CreateContractStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONTRACT");
				createContractStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createContractStatement);
			}
			this.authorizationOpt(createContractStatement);
			this.match(191);
			ContractMessage contractMessage = this.contractMessage();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ContractMessage>(createContractStatement, createContractStatement.Messages, contractMessage);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				contractMessage = this.contractMessage();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ContractMessage>(createContractStatement, createContractStatement.Messages, contractMessage);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createContractStatement, token2);
			}
			return createContractStatement;
		}

		// Token: 0x06000ACD RID: 2765 RVA: 0x0002D318 File Offset: 0x0002B518
		public CreateCredentialStatement createCredentialStatement()
		{
			CreateCredentialStatement createCredentialStatement = base.FragmentFactory.CreateFragment<CreateCredentialStatement>();
			this.credentialStatementBody(createCredentialStatement);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return createCredentialStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createCredentialStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return createCredentialStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return createCredentialStatement;
						default:
							if (num == 28)
							{
								return createCredentialStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return createCredentialStatement;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return createCredentialStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num != 67)
						{
							switch (num)
							{
							case 74:
							case 75:
								return createCredentialStatement;
							}
						}
						else
						{
							this.match(67);
							IToken token = this.LT(1);
							this.match(232);
							IToken token2 = this.LT(1);
							this.match(232);
							Identifier identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token, "CRYPTOGRAPHIC");
								TSql80ParserBaseInternal.Match(token2, "PROVIDER");
								createCredentialStatement.CryptographicProviderName = identifier;
								return createCredentialStatement;
							}
							return createCredentialStatement;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return createCredentialStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return createCredentialStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createCredentialStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createCredentialStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createCredentialStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return createCredentialStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return createCredentialStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createCredentialStatement;
				default:
					if (num == 232)
					{
						return createCredentialStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000ACE RID: 2766 RVA: 0x0002D638 File Offset: 0x0002B838
		public CreateCryptographicProviderStatement createCryptographicProviderStatement()
		{
			CreateCryptographicProviderStatement createCryptographicProviderStatement = base.FragmentFactory.CreateFragment<CreateCryptographicProviderStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CRYPTOGRAPHIC");
				TSql80ParserBaseInternal.Match(token2, "PROVIDER");
				createCryptographicProviderStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createCryptographicProviderStatement);
			}
			Literal literal = this.cryptographicProviderFile();
			if (this.inputState.guessing == 0)
			{
				createCryptographicProviderStatement.File = literal;
			}
			return createCryptographicProviderStatement;
		}

		// Token: 0x06000ACF RID: 2767 RVA: 0x0002D6D4 File Offset: 0x0002B8D4
		public CreateEndpointStatement createEndpointStatement()
		{
			CreateEndpointStatement createEndpointStatement = base.FragmentFactory.CreateFragment<CreateEndpointStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENDPOINT");
				createEndpointStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createEndpointStatement);
			}
			this.authorizationOpt(createEndpointStatement);
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.endpointOptions(createEndpointStatement);
			}
			this.protocolInfo(createEndpointStatement);
			this.payloadInfo(createEndpointStatement);
			return createEndpointStatement;
		}

		// Token: 0x06000AD0 RID: 2768 RVA: 0x0002D778 File Offset: 0x0002B978
		public TSqlStatement createEventStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EVENT");
			}
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("NOTIFICATION"))
			{
				tsqlStatement = this.createEventNotificationStatement();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233) || !base.NextTokenMatches("SESSION"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createEventSessionStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000AD1 RID: 2769 RVA: 0x0002D848 File Offset: 0x0002BA48
		public TSqlStatement createFulltextStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FULLTEXT");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 84)
			{
				if (num != 183)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					tsqlStatement = this.createFulltextCatalogStatement();
				}
				else
				{
					tsqlStatement = this.createFulltextStoplistStatement();
				}
			}
			else
			{
				tsqlStatement = this.createFulltextIndexStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000AD2 RID: 2770 RVA: 0x0002D8D0 File Offset: 0x0002BAD0
		public CreateXmlIndexStatement createPrimaryXmlIndexStatement()
		{
			this.match(118);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
			}
			return this.createXmlIndexStatement(true);
		}

		// Token: 0x06000AD3 RID: 2771 RVA: 0x0002D920 File Offset: 0x0002BB20
		public TSqlStatement createXmlStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 84)
			{
				if (num != 139)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createXmlSchemaCollectionStatement();
			}
			else
			{
				tsqlStatement = this.createXmlIndexStatement(false);
			}
			return tsqlStatement;
		}

		// Token: 0x06000AD4 RID: 2772 RVA: 0x0002D99C File Offset: 0x0002BB9C
		public CreateLoginStatement createLoginStatement()
		{
			CreateLoginStatement createLoginStatement = base.FragmentFactory.CreateFragment<CreateLoginStatement>();
			this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createLoginStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createLoginStatement);
			}
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				CreateLoginSource createLoginSource = this.passwordLoginSource();
				if (this.inputState.guessing == 0)
				{
					createLoginStatement.Source = createLoginSource;
				}
			}
			else
			{
				this.match(71);
				CreateLoginSource createLoginSource;
				if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)) && base.NextTokenMatches("WINDOWS"))
				{
					createLoginSource = this.windowsLoginSource();
				}
				else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
				{
					createLoginSource = this.certificateLoginSource();
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 91)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					createLoginSource = this.asymmetricKeyLoginSource();
				}
				if (this.inputState.guessing == 0)
				{
					createLoginStatement.Source = createLoginSource;
				}
			}
			return createLoginStatement;
		}

		// Token: 0x06000AD5 RID: 2773 RVA: 0x0002DAF8 File Offset: 0x0002BCF8
		public CreateMessageTypeStatement createMessageTypeStatement()
		{
			CreateMessageTypeStatement createMessageTypeStatement = base.FragmentFactory.CreateFragment<CreateMessageTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MESSAGE");
				TSql80ParserBaseInternal.Match(token2, "TYPE");
				createMessageTypeStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createMessageTypeStatement);
			}
			this.authorizationOpt(createMessageTypeStatement);
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				this.messageTypeValidation(createMessageTypeStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createMessageTypeStatement;
		}

		// Token: 0x06000AD6 RID: 2774 RVA: 0x0002DBDC File Offset: 0x0002BDDC
		public CreateMasterKeyStatement createMasterKeyStatement()
		{
			CreateMasterKeyStatement createMasterKeyStatement = base.FragmentFactory.CreateFragment<CreateMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			this.match(91);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "ENCRYPTION");
			}
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
			}
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				createMasterKeyStatement.Password = literal;
			}
			return createMasterKeyStatement;
		}

		// Token: 0x06000AD7 RID: 2775 RVA: 0x0002DCB8 File Offset: 0x0002BEB8
		public TSqlStatement createPartitionStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 73)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createPartitionScheme();
			}
			else
			{
				tsqlStatement = this.createPartitionFunction();
			}
			return tsqlStatement;
		}

		// Token: 0x06000AD8 RID: 2776 RVA: 0x0002DD34 File Offset: 0x0002BF34
		public CreateQueueStatement createQueueStatement()
		{
			CreateQueueStatement createQueueStatement = base.FragmentFactory.CreateFragment<CreateQueueStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				createQueueStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createQueueStatement);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.queueOptionList(createQueueStatement, false);
			}
			else if (!TSql110ParserInternal.tokenSet_44_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return createQueueStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createQueueStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return createQueueStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return createQueueStatement;
							default:
								if (num == 28)
								{
									return createQueueStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return createQueueStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createQueueStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return createQueueStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return createQueueStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return createQueueStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
						if (this.inputState.guessing == 0)
						{
							createQueueStatement.OnFileGroup = identifierOrValueExpression;
							return createQueueStatement;
						}
						return createQueueStatement;
					}
					case 106:
						return createQueueStatement;
					default:
						if (num == 119)
						{
							return createQueueStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createQueueStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createQueueStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createQueueStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return createQueueStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return createQueueStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createQueueStatement;
				default:
					if (num == 232)
					{
						return createQueueStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AD9 RID: 2777 RVA: 0x0002E098 File Offset: 0x0002C298
		public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement()
		{
			CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<CreateRemoteServiceBindingStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOTE");
				TSql80ParserBaseInternal.Match(token2, "SERVICE");
				TSql80ParserBaseInternal.Match(token3, "BINDING");
				createRemoteServiceBindingStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createRemoteServiceBindingStatement);
			}
			this.authorizationOpt(createRemoteServiceBindingStatement);
			this.match(151);
			IToken token4 = this.LT(1);
			this.match(232);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "SERVICE");
				createRemoteServiceBindingStatement.Service = literal;
			}
			this.match(171);
			int num = this.LA(1);
			RemoteServiceBindingOption remoteServiceBindingOption;
			if (num == 163)
			{
				remoteServiceBindingOption = this.bindingUserOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								return createRemoteServiceBindingStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return createRemoteServiceBindingStatement;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									return createRemoteServiceBindingStatement;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								return createRemoteServiceBindingStatement;
							default:
								if (num2 == 28)
								{
									return createRemoteServiceBindingStatement;
								}
								switch (num2)
								{
								case 33:
								case 35:
									return createRemoteServiceBindingStatement;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createRemoteServiceBindingStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return createRemoteServiceBindingStatement;
							default:
								if (num2 == 82)
								{
									return createRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						return createRemoteServiceBindingStatement;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 == 106 || num2 == 119)
						{
							return createRemoteServiceBindingStatement;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return createRemoteServiceBindingStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createRemoteServiceBindingStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createRemoteServiceBindingStatement;
							case 168:
							case 169:
								break;
							default:
								if (num2 == 176)
								{
									return createRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					if (num2 == 182 || num2 == 191)
					{
						return createRemoteServiceBindingStatement;
					}
					if (num2 == 198)
					{
						this.match(198);
						remoteServiceBindingOption = this.bindingAnonymousOption();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
							return createRemoteServiceBindingStatement;
						}
						return createRemoteServiceBindingStatement;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return createRemoteServiceBindingStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return createRemoteServiceBindingStatement;
					default:
						if (num2 == 232)
						{
							return createRemoteServiceBindingStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			remoteServiceBindingOption = this.bindingAnonymousOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
			}
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 35)
				{
					if (num3 <= 17)
					{
						if (num3 == 1)
						{
							return createRemoteServiceBindingStatement;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return createRemoteServiceBindingStatement;
						case 5:
							break;
						default:
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return createRemoteServiceBindingStatement;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 22:
						case 23:
							return createRemoteServiceBindingStatement;
						default:
							if (num3 == 28)
							{
								return createRemoteServiceBindingStatement;
							}
							switch (num3)
							{
							case 33:
							case 35:
								return createRemoteServiceBindingStatement;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return createRemoteServiceBindingStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							return createRemoteServiceBindingStatement;
						default:
							if (num3 == 82)
							{
								return createRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					return createRemoteServiceBindingStatement;
				}
			}
			else if (num3 <= 176)
			{
				if (num3 <= 144)
				{
					if (num3 == 106 || num3 == 119)
					{
						return createRemoteServiceBindingStatement;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createRemoteServiceBindingStatement;
					}
				}
				else
				{
					switch (num3)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return createRemoteServiceBindingStatement;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num3)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return createRemoteServiceBindingStatement;
						case 168:
						case 169:
							break;
						default:
							if (num3 == 176)
							{
								return createRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 198)
			{
				if (num3 == 182 || num3 == 191)
				{
					return createRemoteServiceBindingStatement;
				}
				if (num3 == 198)
				{
					this.match(198);
					remoteServiceBindingOption = this.bindingUserOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
						return createRemoteServiceBindingStatement;
					}
					return createRemoteServiceBindingStatement;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return createRemoteServiceBindingStatement;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return createRemoteServiceBindingStatement;
				default:
					if (num3 == 232)
					{
						return createRemoteServiceBindingStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000ADA RID: 2778 RVA: 0x0002E7A4 File Offset: 0x0002C9A4
		public CreateResourcePoolStatement createResourcePoolStatement()
		{
			CreateResourcePoolStatement createResourcePoolStatement = base.FragmentFactory.CreateFragment<CreateResourcePoolStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RESOURCE");
				TSql80ParserBaseInternal.Match(token2, "POOL");
				createResourcePoolStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createResourcePoolStatement);
			}
			this.resourcePoolStatementBody(createResourcePoolStatement);
			return createResourcePoolStatement;
		}

		// Token: 0x06000ADB RID: 2779 RVA: 0x0002E828 File Offset: 0x0002CA28
		public CreateRoleStatement createRoleStatement()
		{
			CreateRoleStatement createRoleStatement = base.FragmentFactory.CreateFragment<CreateRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				createRoleStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createRoleStatement);
			}
			this.authorizationOpt(createRoleStatement);
			return createRoleStatement;
		}

		// Token: 0x06000ADC RID: 2780 RVA: 0x0002E88C File Offset: 0x0002CA8C
		public CreateRouteStatement createRouteStatement()
		{
			CreateRouteStatement createRouteStatement = base.FragmentFactory.CreateFragment<CreateRouteStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROUTE");
				createRouteStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createRouteStatement);
			}
			this.authorizationOpt(createRouteStatement);
			this.routeOptionList(createRouteStatement);
			return createRouteStatement;
		}

		// Token: 0x06000ADD RID: 2781 RVA: 0x0002E8F8 File Offset: 0x0002CAF8
		public CreateSearchPropertyListStatement createSearchPropertyListStatement()
		{
			CreateSearchPropertyListStatement createSearchPropertyListStatement = base.FragmentFactory.CreateFragment<CreateSearchPropertyListStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SEARCH");
				TSql80ParserBaseInternal.Match(token2, "PROPERTY");
				TSql80ParserBaseInternal.Match(token3, "LIST");
				createSearchPropertyListStatement.Name = identifier;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0353;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0353;
						}
					}
					else
					{
						switch (num)
						{
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_0353;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
						case 21:
							break;
						default:
							if (num == 28)
							{
								goto IL_0353;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0353;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0353;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 71:
						{
							this.LT(1);
							this.match(71);
							MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(2);
							if (this.inputState.guessing == 0)
							{
								createSearchPropertyListStatement.SourceSearchPropertyList = multiPartIdentifier;
								goto IL_0353;
							}
							goto IL_0353;
						}
						case 72:
						case 73:
							break;
						case 74:
						case 75:
							goto IL_0353;
						default:
							if (num == 82)
							{
								goto IL_0353;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_0353;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 119)
					{
						goto IL_0353;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0353;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0353;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0353;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_0353;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0353;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0353;
				default:
					if (num == 232)
					{
						goto IL_0353;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0353:
			this.authorizationOpt(createSearchPropertyListStatement);
			this.requiredSemicolon(createSearchPropertyListStatement, "Search Property List");
			return createSearchPropertyListStatement;
		}

		// Token: 0x06000ADE RID: 2782 RVA: 0x0002EC6C File Offset: 0x0002CE6C
		public CreateServiceStatement createServiceStatement()
		{
			CreateServiceStatement createServiceStatement = base.FragmentFactory.CreateFragment<CreateServiceStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
				createServiceStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createServiceStatement);
			}
			this.authorizationOpt(createServiceStatement);
			this.onQueueClause(createServiceStatement);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.match(191);
				ServiceContract serviceContract = this.serviceContract();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(createServiceStatement, createServiceStatement.ServiceContracts, serviceContract);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					serviceContract = this.serviceContract();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(createServiceStatement, createServiceStatement.ServiceContracts, serviceContract);
					}
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(createServiceStatement, token2);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createServiceStatement;
		}

		// Token: 0x06000ADF RID: 2783 RVA: 0x0002EDD8 File Offset: 0x0002CFD8
		public CreateSpatialIndexStatement createSpatialIndexStatement()
		{
			CreateSpatialIndexStatement createSpatialIndexStatement = base.FragmentFactory.CreateFragment<CreateSpatialIndexStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.LT(1);
			this.match(84);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SPATIAL");
				createSpatialIndexStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createSpatialIndexStatement);
			}
			this.LT(1);
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				createSpatialIndexStatement.Object = schemaObjectName;
			}
			this.LT(1);
			this.match(191);
			Identifier identifier2 = this.identifier();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				createSpatialIndexStatement.SpatialColumnName = identifier2;
				TSql80ParserBaseInternal.UpdateTokenInfo(createSpatialIndexStatement, token2);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				this.spatialIndexingScheme(createSpatialIndexStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_44_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.LT(1);
				this.match(171);
				this.spatialIndexOptionsList(createSpatialIndexStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_44_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return createSpatialIndexStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createSpatialIndexStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return createSpatialIndexStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return createSpatialIndexStatement;
							default:
								if (num == 28)
								{
									return createSpatialIndexStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return createSpatialIndexStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createSpatialIndexStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return createSpatialIndexStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return createSpatialIndexStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return createSpatialIndexStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
						if (this.inputState.guessing == 0)
						{
							createSpatialIndexStatement.OnFileGroup = identifierOrValueExpression;
							return createSpatialIndexStatement;
						}
						return createSpatialIndexStatement;
					}
					case 106:
						return createSpatialIndexStatement;
					default:
						if (num == 119)
						{
							return createSpatialIndexStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createSpatialIndexStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createSpatialIndexStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createSpatialIndexStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return createSpatialIndexStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return createSpatialIndexStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createSpatialIndexStatement;
				default:
					if (num == 232)
					{
						return createSpatialIndexStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AE0 RID: 2784 RVA: 0x0002F238 File Offset: 0x0002D438
		public CreateSymmetricKeyStatement createSymmetricKeyStatement()
		{
			CreateSymmetricKeyStatement createSymmetricKeyStatement = base.FragmentFactory.CreateFragment<CreateSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				createSymmetricKeyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createSymmetricKeyStatement);
			}
			this.authorizationOpt(createSymmetricKeyStatement);
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				this.keySpecList(createSymmetricKeyStatement);
				this.encryptorListWithNoPassword(createSymmetricKeyStatement);
			}
			else
			{
				this.match(71);
				IToken token2 = this.LT(1);
				this.match(232);
				Identifier identifier2 = this.identifier();
				this.providerKeySourceOptionsOpt(createSymmetricKeyStatement.KeyOptions, createSymmetricKeyStatement);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "PROVIDER");
					createSymmetricKeyStatement.Provider = identifier2;
				}
				if (this.LA(1) == 232 && this.LA(2) == 18)
				{
					this.encryptorListWithNoPassword(createSymmetricKeyStatement);
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return createSymmetricKeyStatement;
		}

		// Token: 0x06000AE1 RID: 2785 RVA: 0x0002F39C File Offset: 0x0002D59C
		public CreateSynonymStatement createSynonymStatement()
		{
			CreateSynonymStatement createSynonymStatement = base.FragmentFactory.CreateFragment<CreateSynonymStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYNONYM");
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "SYNONYM");
				createSynonymStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createSynonymStatement);
			}
			this.match(67);
			schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				createSynonymStatement.ForName = schemaObjectName;
			}
			return createSynonymStatement;
		}

		// Token: 0x06000AE2 RID: 2786 RVA: 0x0002F434 File Offset: 0x0002D634
		public CreateTypeStatement createTypeStatement()
		{
			CreateTypeStatement createTypeStatement = null;
			SchemaObjectName schemaObjectName = null;
			try
			{
				IToken token = this.LT(1);
				this.match(232);
				schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "TYPE");
					TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "TYPE");
				}
				int num = this.LA(1);
				if (num != 9)
				{
					if (num != 71)
					{
						if (num != 175)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						createTypeStatement = this.createTypeUdtStatement();
					}
					else
					{
						createTypeStatement = this.createTypeUddtStatement();
					}
				}
				else
				{
					createTypeStatement = this.createTypeTableStatement();
				}
				if (this.inputState.guessing == 0)
				{
					createTypeStatement.Name = schemaObjectName;
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					CreateTypeStatement createTypeStatement2 = ex.Statement as CreateTypeStatement;
					createTypeStatement2.Name = schemaObjectName;
					throw;
				}
				throw;
			}
			return createTypeStatement;
		}

		// Token: 0x06000AE3 RID: 2787 RVA: 0x0002F520 File Offset: 0x0002D720
		public TSqlStatement createServerStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVER");
			}
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AUDIT"))
			{
				tsqlStatement = this.createServerAuditStatements();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233) || !base.NextTokenMatches("ROLE"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createServerRoleStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000AE4 RID: 2788 RVA: 0x0002F5F0 File Offset: 0x0002D7F0
		public CreateWorkloadGroupStatement createWorkloadGroupStatement()
		{
			CreateWorkloadGroupStatement createWorkloadGroupStatement = base.FragmentFactory.CreateFragment<CreateWorkloadGroupStatement>();
			this.workloadGroupStatementBody(createWorkloadGroupStatement);
			return createWorkloadGroupStatement;
		}

		// Token: 0x06000AE5 RID: 2789 RVA: 0x0002F614 File Offset: 0x0002D814
		public CreateSequenceStatement createSequenceStatement()
		{
			CreateSequenceStatement createSequenceStatement = base.FragmentFactory.CreateFragment<CreateSequenceStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SEQUENCE");
				createSequenceStatement.Name = schemaObjectName;
			}
			if ((this.LA(1) == 9 || this.LA(1) == 232) && TSql110ParserInternal.tokenSet_45_.member(this.LA(2)))
			{
				this.createSequenceOptionList(createSequenceStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createSequenceStatement;
		}

		// Token: 0x06000AE6 RID: 2790 RVA: 0x0002F6DC File Offset: 0x0002D8DC
		public CreateUserStatement createUserStatement()
		{
			CreateUserStatement createUserStatement = base.FragmentFactory.CreateFragment<CreateUserStatement>();
			bool flag = false;
			this.match(163);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createUserStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createUserStatement);
			}
			if ((this.LA(1) == 67 || this.LA(1) == 71 || this.LA(1) == 232) && this.LA(2) == 232)
			{
				UserLoginOption userLoginOption = this.userLoginOption();
				if (this.inputState.guessing == 0)
				{
					createUserStatement.UserLoginOption = userLoginOption;
					flag = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.LT(1);
				this.match(171);
				PrincipalOption principalOption = this.createUserOption(flag);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(createUserStatement, createUserStatement.UserOptions, principalOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					principalOption = this.createUserOption(flag);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(createUserStatement, createUserStatement.UserOptions, principalOption);
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createUserStatement;
		}

		// Token: 0x06000AE7 RID: 2791 RVA: 0x0002F880 File Offset: 0x0002DA80
		public ProcedureParameter aggregateParameter()
		{
			ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
			Identifier identifier = this.identifierVariable();
			int num = this.LA(1);
			if (num <= 53)
			{
				if (num == 9)
				{
					this.match(9);
					goto IL_0064;
				}
				if (num == 53)
				{
					goto IL_0064;
				}
			}
			else
			{
				if (num == 96)
				{
					goto IL_0064;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_0064;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0064:
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				procedureParameter.VariableName = identifier;
				procedureParameter.DataType = dataTypeReference;
			}
			return procedureParameter;
		}

		// Token: 0x06000AE8 RID: 2792 RVA: 0x0002F914 File Offset: 0x0002DB14
		public AssemblyName assemblyName()
		{
			AssemblyName assemblyName = base.FragmentFactory.CreateFragment<AssemblyName>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NAME");
			}
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				assemblyName.Name = identifier;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return assemblyName;
						}
						switch (num)
						{
						case 4:
						case 6:
							return assemblyName;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return assemblyName;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return assemblyName;
						default:
							if (num == 28)
							{
								return assemblyName;
							}
							switch (num)
							{
							case 33:
							case 35:
								return assemblyName;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return assemblyName;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return assemblyName;
						default:
							if (num == 82)
							{
								return assemblyName;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return assemblyName;
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						return assemblyName;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return assemblyName;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return assemblyName;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return assemblyName;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return assemblyName;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 200)
			{
				if (num == 182 || num == 191)
				{
					return assemblyName;
				}
				if (num == 200)
				{
					this.match(200);
					identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						assemblyName.ClassName = identifier;
						return assemblyName;
					}
					return assemblyName;
				}
			}
			else
			{
				if (num == 204)
				{
					return assemblyName;
				}
				switch (num)
				{
				case 219:
				case 220:
					return assemblyName;
				default:
					if (num == 232)
					{
						return assemblyName;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AE9 RID: 2793 RVA: 0x0002FC08 File Offset: 0x0002DE08
		public Identifier identifierVariable()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			IToken token = this.LT(1);
			this.match(234);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
				identifier.SetIdentifier(token.getText());
			}
			return identifier;
		}

		// Token: 0x06000AEA RID: 2794 RVA: 0x0002FC58 File Offset: 0x0002DE58
		public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly)
		{
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "APPLICATION");
				TSql80ParserBaseInternal.Match(token2, "ROLE");
				vParent.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(vParent);
			}
			this.match(171);
			ApplicationRoleOption applicationRoleOption = this.applicationRoleOption(defaultSchemaAndPasswordOnly);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ApplicationRoleOption>(vParent, vParent.ApplicationRoleOptions, applicationRoleOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				applicationRoleOption = this.applicationRoleOption(defaultSchemaAndPasswordOnly);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ApplicationRoleOption>(vParent, vParent.ApplicationRoleOptions, applicationRoleOption);
				}
			}
		}

		// Token: 0x06000AEB RID: 2795 RVA: 0x0002FD34 File Offset: 0x0002DF34
		public Identifier identifier()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
					identifier.SetUnquotedIdentifier(token.getText());
					TSql80ParserBaseInternal.CheckIdentifierLength(identifier);
				}
				break;
			}
			case 233:
			{
				IToken token2 = this.LT(1);
				this.match(233);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token2);
					identifier.SetIdentifier(token2.getText());
					TSql80ParserBaseInternal.CheckIdentifierLength(identifier);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifier;
		}

		// Token: 0x06000AEC RID: 2796 RVA: 0x0002FDFC File Offset: 0x0002DFFC
		public void authorizationOpt(IAuthorization vParent)
		{
			int num = this.LA(1);
			if (num <= 106)
			{
				if (num <= 64)
				{
					if (num <= 23)
					{
						switch (num)
						{
						case 1:
						case 4:
						case 6:
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
							return;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						case 11:
							this.authorization(vParent);
							return;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return;
							}
							break;
						}
					}
					else
					{
						if (num == 28)
						{
							return;
						}
						switch (num)
						{
						case 33:
						case 35:
							return;
						case 34:
							break;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								return;
							}
							break;
						}
					}
				}
				else if (num <= 86)
				{
					switch (num)
					{
					case 71:
					case 74:
					case 75:
						return;
					case 72:
					case 73:
						break;
					default:
						if (num == 82 || num == 86)
						{
							return;
						}
						break;
					}
				}
				else
				{
					if (num == 92 || num == 95)
					{
						return;
					}
					switch (num)
					{
					case 105:
					case 106:
						return;
					}
				}
			}
			else if (num <= 172)
			{
				if (num <= 144)
				{
					if (num == 119)
					{
						return;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					}
				}
				else
				{
					if (num == 151)
					{
						return;
					}
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return;
				}
			}
			else
			{
				if (num == 204)
				{
					return;
				}
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AED RID: 2797 RVA: 0x000300A4 File Offset: 0x0002E2A4
		public void expressionList(TSqlFragment vParent, IList<ScalarExpression> expressions)
		{
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, scalarExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, scalarExpression);
				}
			}
		}

		// Token: 0x06000AEE RID: 2798 RVA: 0x00030108 File Offset: 0x0002E308
		public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility)
		{
			PermissionSetAssemblyOption permissionSetAssemblyOption = base.FragmentFactory.CreateFragment<PermissionSetAssemblyOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tPermissionSetVisibility, "PERMISSION_SET");
				TSql80ParserBaseInternal.UpdateTokenInfo(permissionSetAssemblyOption, tPermissionSetVisibility);
				permissionSetAssemblyOption.OptionKind = AssemblyOptionKind.PermissionSet;
				TSql80ParserBaseInternal.UpdateTokenInfo(permissionSetAssemblyOption, token);
				permissionSetAssemblyOption.PermissionSetOption = PermissionSetOptionHelper.Instance.ParseOption(token);
			}
			return permissionSetAssemblyOption;
		}

		// Token: 0x06000AEF RID: 2799 RVA: 0x00030178 File Offset: 0x0002E378
		public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent)
		{
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				this.asymKeySpec(vParent);
				return;
			}
			else
			{
				this.match(71);
				EncryptionSource encryptionSource = this.asymKeySource();
				if (this.inputState.guessing == 0)
				{
					vParent.KeySource = encryptionSource;
					return;
				}
				return;
			}
		}

		// Token: 0x06000AF0 RID: 2800 RVA: 0x000301E8 File Offset: 0x0002E3E8
		public Literal encryptClause()
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token2, "PASSWORD");
			}
			return literal;
		}

		// Token: 0x06000AF1 RID: 2801 RVA: 0x00030260 File Offset: 0x0002E460
		public EncryptionSource asymKeySource()
		{
			EncryptionSource encryptionSource;
			if ((this.LA(1) == 65 || this.LA(1) == 232) && (this.LA(2) == 65 || this.LA(2) == 206))
			{
				encryptionSource = this.fileEncryptionSource();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY"))
			{
				encryptionSource = this.assemblyEncryptionSource();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				encryptionSource = this.providerEncryptionSource();
			}
			return encryptionSource;
		}

		// Token: 0x06000AF2 RID: 2802 RVA: 0x00030334 File Offset: 0x0002E534
		public void asymKeySpec(CreateAsymmetricKeyStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ALGORITHM");
				vParent.EncryptionAlgorithm = EncryptionAlgorithmsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000AF3 RID: 2803 RVA: 0x000303A8 File Offset: 0x0002E5A8
		public FileEncryptionSource fileEncryptionSource()
		{
			FileEncryptionSource fileEncryptionSource = base.FragmentFactory.CreateFragment<FileEncryptionSource>();
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "EXECUTABLE");
					fileEncryptionSource.IsExecutable = true;
				}
			}
			this.match(65);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				fileEncryptionSource.File = literal;
			}
			return fileEncryptionSource;
		}

		// Token: 0x06000AF4 RID: 2804 RVA: 0x00030450 File Offset: 0x0002E650
		public AssemblyEncryptionSource assemblyEncryptionSource()
		{
			AssemblyEncryptionSource assemblyEncryptionSource = base.FragmentFactory.CreateFragment<AssemblyEncryptionSource>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
				assemblyEncryptionSource.Assembly = identifier;
			}
			return assemblyEncryptionSource;
		}

		// Token: 0x06000AF5 RID: 2805 RVA: 0x000304A8 File Offset: 0x0002E6A8
		public ProviderEncryptionSource providerEncryptionSource()
		{
			ProviderEncryptionSource providerEncryptionSource = base.FragmentFactory.CreateFragment<ProviderEncryptionSource>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PROVIDER");
				providerEncryptionSource.Name = identifier;
			}
			this.providerKeySourceOptions(providerEncryptionSource.KeyOptions, providerEncryptionSource);
			return providerEncryptionSource;
		}

		// Token: 0x06000AF6 RID: 2806 RVA: 0x0003050C File Offset: 0x0002E70C
		public void providerKeySourceOptions(IList<KeyOption> optionsList, TSqlFragment vParent)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			this.match(171);
			KeyOption keyOption = this.providerKeySourceOption(ref flag, ref flag2, ref flag3);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<KeyOption>(vParent, optionsList, keyOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				keyOption = this.providerKeySourceOption(ref flag, ref flag2, ref flag3);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<KeyOption>(vParent, optionsList, keyOption);
				}
			}
		}

		// Token: 0x06000AF7 RID: 2807 RVA: 0x0003058C File Offset: 0x0002E78C
		public StringLiteral stringLiteral()
		{
			StringLiteral stringLiteral = base.FragmentFactory.CreateFragment<StringLiteral>();
			switch (this.LA(1))
			{
			case 230:
			{
				IToken token = this.LT(1);
				this.match(230);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(stringLiteral, token);
					stringLiteral.Value = TSql80ParserBaseInternal.DecodeAsciiStringLiteral(token.getText());
					stringLiteral.IsLargeObject = TSql80ParserBaseInternal.IsAsciiStringLob(stringLiteral.Value);
				}
				break;
			}
			case 231:
			{
				IToken token2 = this.LT(1);
				this.match(231);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(stringLiteral, token2);
					stringLiteral.IsNational = true;
					stringLiteral.Value = TSql80ParserBaseInternal.DecodeUnicodeStringLiteral(token2.getText());
					stringLiteral.IsLargeObject = TSql80ParserBaseInternal.IsUnicodeStringLob(stringLiteral.Value);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return stringLiteral;
		}

		// Token: 0x06000AF8 RID: 2808 RVA: 0x00030680 File Offset: 0x0002E880
		public void createCertificateParams(CreateCertificateStatement vParent)
		{
			CertificateOptionKinds certificateOptionKinds = CertificateOptionKinds.None;
			int num = this.LA(1);
			if (num == 71)
			{
				this.match(71);
				this.certificateSource(vParent);
				return;
			}
			if (num != 171 && num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num2 = this.LA(1);
			if (num2 != 171)
			{
				if (num2 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Literal literal = this.encryptClause();
				if (this.inputState.guessing == 0)
				{
					vParent.EncryptionPassword = literal;
				}
			}
			this.match(171);
			CertificateOption certificateOption = this.certificateOption(certificateOptionKinds);
			if (this.inputState.guessing == 0)
			{
				certificateOptionKinds |= certificateOption.Kind;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CertificateOption>(vParent, vParent.CertificateOptions, certificateOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				certificateOption = this.certificateOption(certificateOptionKinds);
				if (this.inputState.guessing == 0)
				{
					certificateOptionKinds |= certificateOption.Kind;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CertificateOption>(vParent, vParent.CertificateOptions, certificateOption);
				}
			}
		}

		// Token: 0x06000AF9 RID: 2809 RVA: 0x0003079C File Offset: 0x0002E99C
		public void createCertificateActivityFlag(CertificateStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(67);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(vParent);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ACTIVE");
				TSql80ParserBaseInternal.Match(token2, "BEGIN_DIALOG");
				vParent.ActiveForBeginDialog = optionState;
			}
		}

		// Token: 0x06000AFA RID: 2810 RVA: 0x00030818 File Offset: 0x0002EA18
		public void certificateSource(CreateCertificateStatement vParent)
		{
			EncryptionSource encryptionSource;
			if ((this.LA(1) == 65 || this.LA(1) == 232) && (this.LA(2) == 65 || this.LA(2) == 206))
			{
				encryptionSource = this.fileEncryptionSource();
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					this.match(171);
					this.privateKeySpec(vParent);
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				encryptionSource = this.assemblyEncryptionSource();
			}
			if (this.inputState.guessing == 0)
			{
				vParent.CertificateSource = encryptionSource;
			}
		}

		// Token: 0x06000AFB RID: 2811 RVA: 0x00030924 File Offset: 0x0002EB24
		public CertificateOption certificateOption(CertificateOptionKinds encountered)
		{
			CertificateOption certificateOption = base.FragmentFactory.CreateFragment<CertificateOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				certificateOption.Kind = CertificateOptionKindsHelper.Instance.ParseOption(token);
				certificateOption.Value = literal;
				TSql90ParserBaseInternal.CheckCertificateOptionDupication(encountered, certificateOption.Kind, token);
			}
			return certificateOption;
		}

		// Token: 0x06000AFC RID: 2812 RVA: 0x00030998 File Offset: 0x0002EB98
		public OptionState optionOnOff(TSqlFragment vParent)
		{
			OptionState optionState = OptionState.NotSet;
			switch (this.LA(1))
			{
			case 103:
			{
				IToken token = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					optionState = OptionState.Off;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return optionState;
				}
				return optionState;
			}
			case 105:
			{
				IToken token2 = this.LT(1);
				this.match(105);
				if (this.inputState.guessing == 0)
				{
					optionState = OptionState.On;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return optionState;
				}
				return optionState;
			}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000AFD RID: 2813 RVA: 0x00030A30 File Offset: 0x0002EC30
		public void privateKeySpec(CertificateStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			this.match(191);
			this.certificatePrivateKeySpec(vParent);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.certificatePrivateKeySpec(vParent);
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PRIVATE");
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000AFE RID: 2814 RVA: 0x00030AC4 File Offset: 0x0002ECC4
		public void certificatePrivateKeySpec(CertificateStatementBase vParent)
		{
			int num = this.LA(1);
			if (num != 65)
			{
				if (num == 232)
				{
					this.passwordChangeOption(vParent);
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				IToken token = this.LT(1);
				this.match(65);
				this.match(206);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing != 0)
				{
					return;
				}
				if (vParent.PrivateKeyPath != null)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				vParent.PrivateKeyPath = literal;
				return;
			}
		}

		// Token: 0x06000AFF RID: 2815 RVA: 0x00030B4C File Offset: 0x0002ED4C
		public void passwordChangeOption(IPasswordChangeOption vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "ENCRYPTION"))
				{
					if (vParent.EncryptionPassword != null)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.EncryptionPassword = literal;
					return;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "DECRYPTION");
					if (vParent.DecryptionPassword != null)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.DecryptionPassword = literal;
				}
			}
		}

		// Token: 0x06000B00 RID: 2816 RVA: 0x00030BF0 File Offset: 0x0002EDF0
		public ContractMessage contractMessage()
		{
			ContractMessage contractMessage = base.FragmentFactory.CreateFragment<ContractMessage>();
			Identifier identifier = this.identifier();
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SENT");
				contractMessage.Name = identifier;
			}
			int num = this.LA(1);
			if (num != 8)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "INITIATOR"))
					{
						contractMessage.SentBy = MessageSender.Initiator;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "TARGET");
						contractMessage.SentBy = MessageSender.Target;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(contractMessage, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(8);
				if (this.inputState.guessing == 0)
				{
					contractMessage.SentBy = MessageSender.Any;
					TSql80ParserBaseInternal.UpdateTokenInfo(contractMessage, token3);
				}
			}
			return contractMessage;
		}

		// Token: 0x06000B01 RID: 2817 RVA: 0x00030CFC File Offset: 0x0002EEFC
		public void credentialStatementBody(CredentialStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
				vParent.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(vParent);
			}
			this.match(171);
			this.match(79);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				vParent.Identity = literal;
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return;
						}
						switch (num)
						{
						case 4:
						case 6:
							return;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return;
						default:
							if (num == 28)
							{
								return;
							}
							switch (num)
							{
							case 33:
							case 35:
								return;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num == 67)
						{
							return;
						}
						switch (num)
						{
						case 74:
						case 75:
							return;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return;
				}
			}
			else if (num <= 204)
			{
				if (num != 198)
				{
					if (num == 204)
					{
						return;
					}
				}
				else
				{
					this.match(198);
					IToken token2 = this.LT(1);
					this.match(232);
					this.match(206);
					literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "SECRET");
						vParent.Secret = literal;
						return;
					}
					return;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B02 RID: 2818 RVA: 0x00031084 File Offset: 0x0002F284
		public TSqlStatement createServerAuditStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AUDIT");
			}
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				tsqlStatement = this.createServerAuditSpecificationStatement();
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || this.LA(2) != 151)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createServerAuditStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000B03 RID: 2819 RVA: 0x00031138 File Offset: 0x0002F338
		public CreateServerRoleStatement createServerRoleStatement()
		{
			CreateServerRoleStatement createServerRoleStatement = base.FragmentFactory.CreateFragment<CreateServerRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				createServerRoleStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createServerRoleStatement);
			}
			this.authorizationOpt(createServerRoleStatement);
			return createServerRoleStatement;
		}

		// Token: 0x06000B04 RID: 2820 RVA: 0x0003119C File Offset: 0x0002F39C
		public CreateServerAuditSpecificationStatement createServerAuditSpecificationStatement()
		{
			CreateServerAuditSpecificationStatement createServerAuditSpecificationStatement = base.FragmentFactory.CreateFragment<CreateServerAuditSpecificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SPECIFICATION");
				createServerAuditSpecificationStatement.SpecificationName = identifier;
				base.ThrowPartialAstIfPhaseOne(createServerAuditSpecificationStatement);
			}
			this.auditSpecificationForClause(createServerAuditSpecificationStatement);
			bool flag = false;
			if (this.LA(1) == 4 && this.LA(2) == 191)
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(4);
					this.match(191);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				AuditSpecificationPart auditSpecificationPart = this.createAuditSpecificationDetail();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditSpecificationPart>(createServerAuditSpecificationStatement, createServerAuditSpecificationStatement.Parts, auditSpecificationPart);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					auditSpecificationPart = this.createAuditSpecificationDetail();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditSpecificationPart>(createServerAuditSpecificationStatement, createServerAuditSpecificationStatement.Parts, auditSpecificationPart);
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.auditSpecificationStateOpt(createServerAuditSpecificationStatement);
			return createServerAuditSpecificationStatement;
		}

		// Token: 0x06000B05 RID: 2821 RVA: 0x00031320 File Offset: 0x0002F520
		public CreateServerAuditStatement createServerAuditStatement()
		{
			CreateServerAuditStatement createServerAuditStatement = base.FragmentFactory.CreateFragment<CreateServerAuditStatement>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createServerAuditStatement.AuditName = identifier;
				base.ThrowPartialAstIfPhaseOne(createServerAuditStatement);
			}
			AuditTarget auditTarget = this.auditTargetClause(true);
			if (this.inputState.guessing == 0)
			{
				createServerAuditStatement.AuditTarget = auditTarget;
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.auditCreateWithClause(createServerAuditStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_46_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return createServerAuditStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createServerAuditStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return createServerAuditStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return createServerAuditStatement;
							default:
								if (num == 28)
								{
									return createServerAuditStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return createServerAuditStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createServerAuditStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return createServerAuditStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return createServerAuditStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 106)
				{
					if (num == 95 || num == 106)
					{
						return createServerAuditStatement;
					}
				}
				else
				{
					if (num == 119)
					{
						return createServerAuditStatement;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createServerAuditStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return createServerAuditStatement;
						case 169:
						{
							this.match(169);
							BooleanExpression booleanExpression = this.eventBooleanExpression();
							if (this.inputState.guessing == 0)
							{
								createServerAuditStatement.PredicateExpression = booleanExpression;
								return createServerAuditStatement;
							}
							return createServerAuditStatement;
						}
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return createServerAuditStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return createServerAuditStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createServerAuditStatement;
				default:
					if (num == 232)
					{
						return createServerAuditStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B06 RID: 2822 RVA: 0x0003167C File Offset: 0x0002F87C
		public AuditTarget auditTargetClause(bool filePathRequired)
		{
			AuditTarget auditTarget = base.FragmentFactory.CreateFragment<AuditTarget>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(151);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(auditTarget, token);
			}
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "APPLICATION_LOG"))
					{
						auditTarget.TargetKind = AuditTargetKind.ApplicationLog;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "SECURITY_LOG");
						auditTarget.TargetKind = AuditTargetKind.SecurityLog;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(auditTarget, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(65);
				this.match(191);
				AuditTargetOption auditTargetOption = this.auditFileOption();
				if (this.inputState.guessing == 0)
				{
					auditTarget.TargetKind = AuditTargetKind.File;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditTargetOption>(auditTarget, auditTarget.TargetOptions, auditTargetOption);
					flag |= auditTargetOption.OptionKind == AuditTargetOptionKind.FilePath;
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					auditTargetOption = this.auditFileOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditTargetOption>(auditTarget, auditTarget.TargetOptions, auditTargetOption);
						flag |= auditTargetOption.OptionKind == AuditTargetOptionKind.FilePath;
					}
				}
				IToken token4 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(auditTarget, token4);
					if (filePathRequired && !flag)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46056", token3, TSqlParserResource.SQL46056Message, new string[0]);
					}
				}
			}
			return auditTarget;
		}

		// Token: 0x06000B07 RID: 2823 RVA: 0x00031844 File Offset: 0x0002FA44
		public void auditCreateWithClause(ServerAuditStatement vParent)
		{
			this.match(171);
			this.match(191);
			AuditOption auditOption = this.auditCreateOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditOption>(vParent, vParent.Options, auditOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				auditOption = this.auditCreateOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditOption>(vParent, vParent.Options, auditOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000B08 RID: 2824 RVA: 0x000318F0 File Offset: 0x0002FAF0
		public BooleanExpression eventBooleanExpression()
		{
			return this.eventBooleanExpressionOr();
		}

		// Token: 0x06000B09 RID: 2825 RVA: 0x00031908 File Offset: 0x0002FB08
		public AuditTargetOption auditFileOption()
		{
			AuditTargetOption auditTargetOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXSIZE"))
			{
				auditTargetOption = this.maxSizeAuditFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_ROLLOVER_FILES"))
			{
				auditTargetOption = this.maxRolloverFilesAuditFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("RESERVE_DISK_SPACE"))
			{
				auditTargetOption = this.reserveDiskSpaceAuditFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_FILES"))
			{
				auditTargetOption = this.maxFilesAuditFileOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				auditTargetOption = this.filePathAuditFileOption();
			}
			return auditTargetOption;
		}

		// Token: 0x06000B0A RID: 2826 RVA: 0x00031A20 File Offset: 0x0002FC20
		public MaxSizeAuditTargetOption maxSizeAuditFileOption()
		{
			MaxSizeAuditTargetOption maxSizeAuditTargetOption = base.FragmentFactory.CreateFragment<MaxSizeAuditTargetOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MAXSIZE");
				maxSizeAuditTargetOption.OptionKind = AuditTargetOptionKind.MaxSize;
				TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeAuditTargetOption, token);
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "UNLIMITED");
					maxSizeAuditTargetOption.IsUnlimited = true;
					maxSizeAuditTargetOption.Size = null;
					maxSizeAuditTargetOption.Unit = MemoryUnit.Unspecified;
				}
			}
			else
			{
				Literal literal = this.integer();
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					maxSizeAuditTargetOption.Size = literal;
					if (TSql80ParserBaseInternal.TryMatch(token3, "GB"))
					{
						maxSizeAuditTargetOption.Unit = MemoryUnit.GB;
						TSql100ParserBaseInternal.ThrowIfTooLargeAuditFileSize(literal, 10);
					}
					else if (TSql80ParserBaseInternal.TryMatch(token3, "TB"))
					{
						maxSizeAuditTargetOption.Unit = MemoryUnit.TB;
						TSql100ParserBaseInternal.ThrowIfTooLargeAuditFileSize(literal, 20);
					}
					else
					{
						TSql80ParserBaseInternal.Match(token3, "MB");
						maxSizeAuditTargetOption.Unit = MemoryUnit.MB;
						TSql100ParserBaseInternal.ThrowIfTooLargeAuditFileSize(literal, 0);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeAuditTargetOption, token3);
				}
			}
			return maxSizeAuditTargetOption;
		}

		// Token: 0x06000B0B RID: 2827 RVA: 0x00031B90 File Offset: 0x0002FD90
		public MaxRolloverFilesAuditTargetOption maxRolloverFilesAuditFileOption()
		{
			MaxRolloverFilesAuditTargetOption maxRolloverFilesAuditTargetOption = base.FragmentFactory.CreateFragment<MaxRolloverFilesAuditTargetOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MAX_ROLLOVER_FILES");
				maxRolloverFilesAuditTargetOption.OptionKind = AuditTargetOptionKind.MaxRolloverFiles;
				TSql80ParserBaseInternal.UpdateTokenInfo(maxRolloverFilesAuditTargetOption, token);
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "UNLIMITED");
					maxRolloverFilesAuditTargetOption.IsUnlimited = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(maxRolloverFilesAuditTargetOption, token2);
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					maxRolloverFilesAuditTargetOption.Value = literal;
				}
			}
			return maxRolloverFilesAuditTargetOption;
		}

		// Token: 0x06000B0C RID: 2828 RVA: 0x00031C7C File Offset: 0x0002FE7C
		public OnOffAuditTargetOption reserveDiskSpaceAuditFileOption()
		{
			OnOffAuditTargetOption onOffAuditTargetOption = base.FragmentFactory.CreateFragment<OnOffAuditTargetOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(onOffAuditTargetOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RESERVE_DISK_SPACE");
				onOffAuditTargetOption.OptionKind = AuditTargetOptionKind.ReserveDiskSpace;
				TSql80ParserBaseInternal.UpdateTokenInfo(onOffAuditTargetOption, token);
				onOffAuditTargetOption.Value = optionState;
			}
			return onOffAuditTargetOption;
		}

		// Token: 0x06000B0D RID: 2829 RVA: 0x00031CEC File Offset: 0x0002FEEC
		public LiteralAuditTargetOption maxFilesAuditFileOption()
		{
			LiteralAuditTargetOption literalAuditTargetOption = base.FragmentFactory.CreateFragment<LiteralAuditTargetOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MAX_FILES");
				literalAuditTargetOption.OptionKind = AuditTargetOptionKind.MaxFiles;
				TSql80ParserBaseInternal.UpdateTokenInfo(literalAuditTargetOption, token);
				literalAuditTargetOption.Value = literal;
			}
			return literalAuditTargetOption;
		}

		// Token: 0x06000B0E RID: 2830 RVA: 0x00031D5C File Offset: 0x0002FF5C
		public LiteralAuditTargetOption filePathAuditFileOption()
		{
			LiteralAuditTargetOption literalAuditTargetOption = base.FragmentFactory.CreateFragment<LiteralAuditTargetOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEPATH");
				literalAuditTargetOption.OptionKind = AuditTargetOptionKind.FilePath;
				TSql80ParserBaseInternal.UpdateTokenInfo(literalAuditTargetOption, token);
				literalAuditTargetOption.Value = literal;
			}
			return literalAuditTargetOption;
		}

		// Token: 0x06000B0F RID: 2831 RVA: 0x00031DCC File Offset: 0x0002FFCC
		public IntegerLiteral integer()
		{
			IntegerLiteral integerLiteral = base.FragmentFactory.CreateFragment<IntegerLiteral>();
			IToken token = this.LT(1);
			this.match(221);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(integerLiteral, token);
				integerLiteral.Value = token.getText();
			}
			return integerLiteral;
		}

		// Token: 0x06000B10 RID: 2832 RVA: 0x00031E1C File Offset: 0x0003001C
		public AuditOption auditCreateOption()
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			if (num <= 144)
			{
				if (num != 33 && num != 144)
				{
					goto IL_007F;
				}
			}
			else
			{
				if (num == 221)
				{
					return this.queueDelayAuditOption(token);
				}
				switch (num)
				{
				case 230:
				case 231:
					return this.auditGuidAuditOption(token);
				case 232:
					break;
				default:
					goto IL_007F;
				}
			}
			return this.onFailureAuditOption(token);
			IL_007F:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B11 RID: 2833 RVA: 0x00031EBC File Offset: 0x000300BC
		public void auditWithClause(ServerAuditStatement vParent)
		{
			this.match(171);
			this.match(191);
			AuditOption auditOption = this.auditOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditOption>(vParent, vParent.Options, auditOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				auditOption = this.auditOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditOption>(vParent, vParent.Options, auditOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000B12 RID: 2834 RVA: 0x00031F68 File Offset: 0x00030168
		public AuditOption auditOption()
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			if (num <= 105)
			{
				if (num != 33)
				{
					switch (num)
					{
					case 103:
					case 105:
						return this.stateAuditOption(token);
					case 104:
						goto IL_0081;
					default:
						goto IL_0081;
					}
				}
			}
			else if (num != 144)
			{
				if (num == 221)
				{
					return this.queueDelayAuditOption(token);
				}
				if (num != 232)
				{
					goto IL_0081;
				}
			}
			return this.onFailureAuditOption(token);
			IL_0081:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B13 RID: 2835 RVA: 0x0003200C File Offset: 0x0003020C
		public QueueDelayAuditOption queueDelayAuditOption(IToken tOption)
		{
			QueueDelayAuditOption queueDelayAuditOption = base.FragmentFactory.CreateFragment<QueueDelayAuditOption>();
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tOption, "QUEUE_DELAY");
				queueDelayAuditOption.OptionKind = AuditOptionKind.QueueDelay;
				TSql80ParserBaseInternal.UpdateTokenInfo(queueDelayAuditOption, tOption);
				queueDelayAuditOption.Delay = literal;
			}
			return queueDelayAuditOption;
		}

		// Token: 0x06000B14 RID: 2836 RVA: 0x0003205C File Offset: 0x0003025C
		public OnFailureAuditOption onFailureAuditOption(IToken tOption)
		{
			OnFailureAuditOption onFailureAuditOption = base.FragmentFactory.CreateFragment<OnFailureAuditOption>();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tOption, "ON_FAILURE");
				TSql80ParserBaseInternal.UpdateTokenInfo(onFailureAuditOption, tOption);
				onFailureAuditOption.OptionKind = AuditOptionKind.OnFailure;
			}
			int num = this.LA(1);
			if (num != 33)
			{
				if (num != 144)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "FAIL_OPERATION");
						TSql80ParserBaseInternal.UpdateTokenInfo(onFailureAuditOption, token);
						onFailureAuditOption.OnFailureAction = AuditFailureActionType.FailOperation;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(144);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(onFailureAuditOption, token2);
						onFailureAuditOption.OnFailureAction = AuditFailureActionType.Shutdown;
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(33);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(onFailureAuditOption, token3);
					onFailureAuditOption.OnFailureAction = AuditFailureActionType.Continue;
				}
			}
			return onFailureAuditOption;
		}

		// Token: 0x06000B15 RID: 2837 RVA: 0x00032178 File Offset: 0x00030378
		public AuditGuidAuditOption auditGuidAuditOption(IToken tOption)
		{
			AuditGuidAuditOption auditGuidAuditOption = base.FragmentFactory.CreateFragment<AuditGuidAuditOption>();
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tOption, "AUDIT_GUID");
				TSql100ParserBaseInternal.ThrowIfWrongGuidFormat(literal);
				auditGuidAuditOption.OptionKind = AuditOptionKind.AuditGuid;
				TSql80ParserBaseInternal.UpdateTokenInfo(auditGuidAuditOption, tOption);
				auditGuidAuditOption.Guid = literal;
			}
			return auditGuidAuditOption;
		}

		// Token: 0x06000B16 RID: 2838 RVA: 0x000321CC File Offset: 0x000303CC
		public StateAuditOption stateAuditOption(IToken tOption)
		{
			StateAuditOption stateAuditOption = base.FragmentFactory.CreateFragment<StateAuditOption>();
			OptionState optionState = this.optionOnOff(stateAuditOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tOption, "STATE");
				stateAuditOption.OptionKind = AuditOptionKind.State;
				TSql80ParserBaseInternal.UpdateTokenInfo(stateAuditOption, tOption);
				stateAuditOption.Value = optionState;
			}
			return stateAuditOption;
		}

		// Token: 0x06000B17 RID: 2839 RVA: 0x0003221C File Offset: 0x0003041C
		public void auditSpecificationForClause(AuditSpecificationStatement vParent)
		{
			this.match(67);
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVER");
				TSql80ParserBaseInternal.Match(token2, "AUDIT");
				vParent.AuditName = identifier;
			}
		}

		// Token: 0x06000B18 RID: 2840 RVA: 0x0003228C File Offset: 0x0003048C
		public AuditSpecificationPart createAuditSpecificationDetail()
		{
			AuditSpecificationPart auditSpecificationPart = base.FragmentFactory.CreateFragment<AuditSpecificationPart>();
			IToken token = this.LT(1);
			this.match(4);
			this.match(191);
			AuditSpecificationDetail auditSpecificationDetail = this.serverAuditActionGroup();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				auditSpecificationPart.Details = auditSpecificationDetail;
				auditSpecificationPart.IsDrop = false;
				TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token2);
			}
			return auditSpecificationPart;
		}

		// Token: 0x06000B19 RID: 2841 RVA: 0x00032308 File Offset: 0x00030508
		public void auditSpecificationStateOpt(AuditSpecificationStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.match(191);
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				OptionState optionState = this.optionOnOff(vParent);
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "STATE");
					vParent.AuditState = optionState;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
				return;
			}
			else
			{
				if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000B1A RID: 2842 RVA: 0x000323E8 File Offset: 0x000305E8
		public TSqlStatement alterServerStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVER");
			}
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AUDIT"))
			{
				tsqlStatement = this.alterServerAuditStatements();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 142 && base.NextTokenMatches("CONFIGURATION"))
			{
				tsqlStatement = this.alterServerConfigurationStatement();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233) || !base.NextTokenMatches("ROLE"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterServerRoleStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000B1B RID: 2843 RVA: 0x000324EC File Offset: 0x000306EC
		public TSqlStatement alterServerAuditStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AUDIT");
			}
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SPECIFICATION"))
			{
				tsqlStatement = this.alterServerAuditSpecificationStatement();
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || !TSql110ParserInternal.tokenSet_47_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterServerAuditStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000B1C RID: 2844 RVA: 0x000325B4 File Offset: 0x000307B4
		public AlterServerConfigurationStatement alterServerConfigurationStatement()
		{
			AlterServerConfigurationStatement alterServerConfigurationStatement = base.FragmentFactory.CreateFragment<AlterServerConfigurationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(142);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONFIGURATION");
				TSql80ParserBaseInternal.Match(token2, "PROCESS");
				TSql80ParserBaseInternal.Match(token3, "AFFINITY");
			}
			IToken token4 = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token5 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "CPU");
					TSql80ParserBaseInternal.Match(token5, "AUTO");
					alterServerConfigurationStatement.ProcessAffinity = ProcessAffinityType.CpuAuto;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterServerConfigurationStatement, token5);
				}
			}
			else
			{
				this.affinityRangeList(alterServerConfigurationStatement);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token4, "CPU"))
					{
						alterServerConfigurationStatement.ProcessAffinity = ProcessAffinityType.Cpu;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token4, "NUMANODE");
						alterServerConfigurationStatement.ProcessAffinity = ProcessAffinityType.NumaNode;
					}
				}
			}
			return alterServerConfigurationStatement;
		}

		// Token: 0x06000B1D RID: 2845 RVA: 0x0003272C File Offset: 0x0003092C
		public AlterServerRoleStatement alterServerRoleStatement()
		{
			AlterServerRoleStatement alterServerRoleStatement = base.FragmentFactory.CreateFragment<AlterServerRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				alterServerRoleStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterServerRoleStatement);
			}
			AlterRoleAction alterRoleAction = this.alterRoleAction();
			if (this.inputState.guessing == 0)
			{
				alterServerRoleStatement.Action = alterRoleAction;
			}
			return alterServerRoleStatement;
		}

		// Token: 0x06000B1E RID: 2846 RVA: 0x000327A4 File Offset: 0x000309A4
		public AlterServerAuditSpecificationStatement alterServerAuditSpecificationStatement()
		{
			AlterServerAuditSpecificationStatement alterServerAuditSpecificationStatement = base.FragmentFactory.CreateFragment<AlterServerAuditSpecificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SPECIFICATION");
				alterServerAuditSpecificationStatement.SpecificationName = identifier;
				base.ThrowPartialAstIfPhaseOne(alterServerAuditSpecificationStatement);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_02DC;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_02DC;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_02DC;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_02DC;
						default:
							if (num == 28)
							{
								goto IL_02DC;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_02DC;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_02DC;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num == 67)
						{
							this.auditSpecificationForClause(alterServerAuditSpecificationStatement);
							goto IL_02DC;
						}
						switch (num)
						{
						case 74:
						case 75:
							goto IL_02DC;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_02DC;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						goto IL_02DC;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_02DC;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_02DC;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_02DC;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_02DC;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_02DC;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_02DC;
				default:
					if (num == 232)
					{
						goto IL_02DC;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_02DC:
			bool flag = false;
			if ((this.LA(1) == 4 || this.LA(1) == 54) && this.LA(2) == 191)
			{
				int num2 = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					int num3 = this.LA(1);
					if (num3 != 4)
					{
						if (num3 != 54)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(54);
					}
					else
					{
						this.match(4);
					}
					this.match(191);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num2);
				this.inputState.guessing--;
			}
			if (flag)
			{
				AuditSpecificationPart auditSpecificationPart = this.auditSpecificationDetail();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditSpecificationPart>(alterServerAuditSpecificationStatement, alterServerAuditSpecificationStatement.Parts, auditSpecificationPart);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					auditSpecificationPart = this.auditSpecificationDetail();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditSpecificationPart>(alterServerAuditSpecificationStatement, alterServerAuditSpecificationStatement.Parts, auditSpecificationPart);
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.auditSpecificationStateOpt(alterServerAuditSpecificationStatement);
			return alterServerAuditSpecificationStatement;
		}

		// Token: 0x06000B1F RID: 2847 RVA: 0x00032BF4 File Offset: 0x00030DF4
		public AlterServerAuditStatement alterServerAuditStatement()
		{
			AlterServerAuditStatement alterServerAuditStatement = base.FragmentFactory.CreateFragment<AlterServerAuditStatement>();
			AuditTarget auditTarget = null;
			BooleanExpression booleanExpression = null;
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterServerAuditStatement.AuditName = identifier;
				base.ThrowPartialAstIfPhaseOne(alterServerAuditStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MODIFY"))
			{
				IToken token = this.LT(1);
				this.match(232);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier identifier2 = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "MODIFY");
					TSql80ParserBaseInternal.Match(token2, "NAME");
					alterServerAuditStatement.NewName = identifier2;
				}
			}
			else if (TSql110ParserInternal.tokenSet_47_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 28)
					{
						if (num <= 6)
						{
							if (num == 1)
							{
								goto IL_03AD;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_03AD;
							}
						}
						else
						{
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_03AD;
							case 14:
							case 16:
								break;
							default:
								switch (num)
								{
								case 22:
								case 23:
									goto IL_03AD;
								default:
									if (num == 28)
									{
										goto IL_03AD;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num <= 75)
					{
						switch (num)
						{
						case 33:
						case 35:
							goto IL_03AD;
						case 34:
							break;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_03AD;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								break;
							default:
								switch (num)
								{
								case 74:
								case 75:
									goto IL_03AD;
								}
								break;
							}
							break;
						}
					}
					else if (num == 82 || num == 86 || num == 92)
					{
						goto IL_03AD;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num == 95 || num == 106 || num == 119)
						{
							goto IL_03AD;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_03AD;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							if (num != 151)
							{
								switch (num)
								{
								case 156:
								case 160:
								case 161:
								case 162:
								case 167:
								case 169:
								case 170:
								case 171:
								case 172:
									goto IL_03AD;
								}
							}
							else
							{
								auditTarget = this.auditTargetClause(false);
								if (this.inputState.guessing == 0)
								{
									alterServerAuditStatement.AuditTarget = auditTarget;
									goto IL_03AD;
								}
								goto IL_03AD;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num == 176 || num == 182 || num == 191)
					{
						goto IL_03AD;
					}
				}
				else
				{
					if (num == 204)
					{
						goto IL_03AD;
					}
					switch (num)
					{
					case 219:
					case 220:
						goto IL_03AD;
					default:
						if (num == 232)
						{
							goto IL_03AD;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_03AD:
				if (this.LA(1) == 171 && this.LA(2) == 191)
				{
					this.auditWithClause(alterServerAuditStatement);
				}
				else if (!TSql110ParserInternal.tokenSet_46_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				int num2 = this.LA(1);
				if (num2 <= 92)
				{
					if (num2 <= 28)
					{
						if (num2 <= 6)
						{
							if (num2 == 1)
							{
								goto IL_06B3;
							}
							switch (num2)
							{
							case 4:
							case 6:
								goto IL_06B3;
							}
						}
						else
						{
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_06B3;
							case 14:
							case 16:
								break;
							default:
								switch (num2)
								{
								case 22:
								case 23:
									goto IL_06B3;
								default:
									if (num2 == 28)
									{
										goto IL_06B3;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num2 <= 75)
					{
						switch (num2)
						{
						case 33:
						case 35:
							goto IL_06B3;
						case 34:
							break;
						default:
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_06B3;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								break;
							default:
								switch (num2)
								{
								case 74:
								case 75:
									goto IL_06B3;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 82 || num2 == 86 || num2 == 92)
					{
						goto IL_06B3;
					}
				}
				else if (num2 <= 172)
				{
					if (num2 <= 106)
					{
						if (num2 == 95 || num2 == 106)
						{
							goto IL_06B3;
						}
					}
					else
					{
						if (num2 == 119)
						{
							goto IL_06B3;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_06B3;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num2)
							{
							case 156:
							case 160:
							case 161:
							case 162:
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_06B3;
							case 169:
								this.match(169);
								booleanExpression = this.eventBooleanExpression();
								if (this.inputState.guessing == 0)
								{
									alterServerAuditStatement.PredicateExpression = booleanExpression;
									goto IL_06B3;
								}
								goto IL_06B3;
							}
							break;
						}
					}
				}
				else if (num2 <= 191)
				{
					if (num2 == 176 || num2 == 182 || num2 == 191)
					{
						goto IL_06B3;
					}
				}
				else
				{
					if (num2 == 204)
					{
						goto IL_06B3;
					}
					switch (num2)
					{
					case 219:
					case 220:
						goto IL_06B3;
					default:
						if (num2 == 232)
						{
							goto IL_06B3;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_06B3:
				if (this.inputState.guessing == 0 && auditTarget == null && (alterServerAuditStatement.Options == null || alterServerAuditStatement.Options.Count == 0) && booleanExpression == null)
				{
					TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(identifier);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 169)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				IToken token4 = this.LT(1);
				this.match(169);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "REMOVE");
					TSql80ParserBaseInternal.UpdateTokenInfo(alterServerAuditStatement, token4);
					alterServerAuditStatement.RemoveWhere = true;
				}
			}
			return alterServerAuditStatement;
		}

		// Token: 0x06000B20 RID: 2848 RVA: 0x00033374 File Offset: 0x00031574
		public AuditSpecificationPart auditSpecificationDetail()
		{
			AuditSpecificationPart auditSpecificationPart = base.FragmentFactory.CreateFragment<AuditSpecificationPart>();
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(54);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token);
					auditSpecificationPart.IsDrop = true;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token2);
					auditSpecificationPart.IsDrop = false;
				}
			}
			this.match(191);
			AuditSpecificationDetail auditSpecificationDetail = this.serverAuditActionGroup();
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				auditSpecificationPart.Details = auditSpecificationDetail;
				TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token3);
			}
			return auditSpecificationPart;
		}

		// Token: 0x06000B21 RID: 2849 RVA: 0x00033458 File Offset: 0x00031658
		public void affinityRangeList(AlterServerConfigurationStatement vParent)
		{
			ProcessAffinityRange processAffinityRange = this.affinityRange();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcessAffinityRange>(vParent, vParent.ProcessAffinityRanges, processAffinityRange);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				processAffinityRange = this.affinityRange();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcessAffinityRange>(vParent, vParent.ProcessAffinityRanges, processAffinityRange);
				}
			}
		}

		// Token: 0x06000B22 RID: 2850 RVA: 0x000334C4 File Offset: 0x000316C4
		public ProcessAffinityRange affinityRange()
		{
			ProcessAffinityRange processAffinityRange = base.FragmentFactory.CreateFragment<ProcessAffinityRange>();
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				processAffinityRange.From = literal;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return processAffinityRange;
						}
						switch (num)
						{
						case 4:
						case 6:
							return processAffinityRange;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return processAffinityRange;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return processAffinityRange;
						default:
							if (num == 28)
							{
								return processAffinityRange;
							}
							switch (num)
							{
							case 33:
							case 35:
								return processAffinityRange;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return processAffinityRange;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return processAffinityRange;
						default:
							if (num == 82)
							{
								return processAffinityRange;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return processAffinityRange;
				}
			}
			else if (num <= 172)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						return processAffinityRange;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return processAffinityRange;
					}
				}
				else if (num != 151)
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return processAffinityRange;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return processAffinityRange;
						}
						break;
					}
				}
				else
				{
					this.match(151);
					literal = this.integer();
					if (this.inputState.guessing == 0)
					{
						processAffinityRange.To = literal;
						return processAffinityRange;
					}
					return processAffinityRange;
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return processAffinityRange;
				}
			}
			else if (num <= 204)
			{
				if (num == 198 || num == 204)
				{
					return processAffinityRange;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					return processAffinityRange;
				default:
					if (num == 232)
					{
						return processAffinityRange;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B23 RID: 2851 RVA: 0x000337A4 File Offset: 0x000319A4
		public AlterDatabaseAuditSpecificationStatement alterDatabaseAuditSpecification(IToken tAlter)
		{
			AlterDatabaseAuditSpecificationStatement alterDatabaseAuditSpecificationStatement = base.FragmentFactory.CreateFragment<AlterDatabaseAuditSpecificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseAuditSpecificationStatement, tAlter);
				TSql80ParserBaseInternal.Match(token, "AUDIT");
				TSql80ParserBaseInternal.Match(token2, "SPECIFICATION");
				alterDatabaseAuditSpecificationStatement.SpecificationName = identifier;
				base.ThrowPartialAstIfPhaseOne(alterDatabaseAuditSpecificationStatement);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_0303;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0303;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_0303;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_0303;
						default:
							if (num == 28)
							{
								goto IL_0303;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0303;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0303;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num == 67)
						{
							this.auditSpecificationForClause(alterDatabaseAuditSpecificationStatement);
							goto IL_0303;
						}
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0303;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0303;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						goto IL_0303;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0303;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0303;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0303;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_0303;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0303;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0303;
				default:
					if (num == 232)
					{
						goto IL_0303;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0303:
			bool flag = false;
			if ((this.LA(1) == 4 || this.LA(1) == 54) && this.LA(2) == 191)
			{
				int num2 = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					int num3 = this.LA(1);
					if (num3 != 4)
					{
						if (num3 != 54)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(54);
					}
					else
					{
						this.match(4);
					}
					this.match(191);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num2);
				this.inputState.guessing--;
			}
			if (flag)
			{
				AuditSpecificationPart auditSpecificationPart = this.auditSpecificationDetailDb();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditSpecificationPart>(alterDatabaseAuditSpecificationStatement, alterDatabaseAuditSpecificationStatement.Parts, auditSpecificationPart);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					auditSpecificationPart = this.auditSpecificationDetailDb();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditSpecificationPart>(alterDatabaseAuditSpecificationStatement, alterDatabaseAuditSpecificationStatement.Parts, auditSpecificationPart);
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.auditSpecificationStateOpt(alterDatabaseAuditSpecificationStatement);
			return alterDatabaseAuditSpecificationStatement;
		}

		// Token: 0x06000B24 RID: 2852 RVA: 0x00033C20 File Offset: 0x00031E20
		public AlterDatabaseStatement alterDatabase(IToken tAlter)
		{
			AlterDatabaseStatement alterDatabaseStatement = null;
			IToken token = null;
			Identifier identifier = null;
			bool flag = false;
			try
			{
				int num = this.LA(1);
				if (num != 37)
				{
					if (num != 226)
					{
						switch (num)
						{
						case 232:
						case 233:
							identifier = this.identifier();
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						identifier = this.sqlCommandIdentifier();
					}
				}
				else
				{
					token = this.LT(1);
					this.match(37);
					if (this.inputState.guessing == 0)
					{
						flag = true;
					}
				}
				int num2 = this.LA(1);
				if (num2 != 4)
				{
					if (num2 != 26)
					{
						if (num2 != 142)
						{
							if (this.LA(1) == 232 && (this.LA(2) == 65 || this.LA(2) == 232) && base.NextTokenMatches("REMOVE"))
							{
								alterDatabaseStatement = this.alterDbRemove();
							}
							else if (this.LA(1) == 232 && (this.LA(2) == 65 || this.LA(2) == 191 || this.LA(2) == 232) && base.NextTokenMatches("MODIFY"))
							{
								alterDatabaseStatement = this.alterDbModify();
							}
							else
							{
								if (this.LA(1) != 232 || this.LA(2) != 232)
								{
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
								alterDatabaseStatement = this.alterDbRebuild();
							}
						}
						else
						{
							alterDatabaseStatement = this.alterDbSet();
						}
					}
					else
					{
						alterDatabaseStatement = this.alterDbCollate();
					}
				}
				else
				{
					alterDatabaseStatement = this.alterDbAdd();
				}
				if (this.inputState.guessing == 0)
				{
					if (flag)
					{
						alterDatabaseStatement.UseCurrent = true;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseStatement, token);
					}
					else
					{
						alterDatabaseStatement.DatabaseName = identifier;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseStatement, tAlter);
					base.ThrowPartialAstIfPhaseOne(alterDatabaseStatement);
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(ex.Statement, tAlter);
					(ex.Statement as AlterDatabaseStatement).DatabaseName = identifier;
					throw;
				}
				throw;
			}
			return alterDatabaseStatement;
		}

		// Token: 0x06000B25 RID: 2853 RVA: 0x00033E38 File Offset: 0x00032038
		public AlterDatabaseEncryptionKeyStatement alterDatabaseEncryptionKey(IToken tAlter)
		{
			AlterDatabaseEncryptionKeyStatement alterDatabaseEncryptionKeyStatement = base.FragmentFactory.CreateFragment<AlterDatabaseEncryptionKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseEncryptionKeyStatement, tAlter);
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
			}
			if (this.LA(1) == 232 && this.LA(2) == 171)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(171);
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(206);
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "REGENERATE");
					TSql80ParserBaseInternal.Match(token3, "ALGORITHM");
					alterDatabaseEncryptionKeyStatement.Regenerate = true;
					alterDatabaseEncryptionKeyStatement.Algorithm = DatabaseEncryptionKeyAlgorithmHelper.Instance.ParseOption(token4);
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseEncryptionKeyStatement, token4);
				}
				if (this.LA(1) == 232 && this.LA(2) == 18 && base.NextTokenMatches("ENCRYPTION") && this.LA(2) == 18)
				{
					IToken token5 = this.LT(1);
					this.match(232);
					this.match(18);
					CryptoMechanism cryptoMechanism = this.dekEncryptor();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "ENCRYPTION");
						alterDatabaseEncryptionKeyStatement.Encryptor = cryptoMechanism;
					}
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 18)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token6 = this.LT(1);
				this.match(232);
				this.match(18);
				CryptoMechanism cryptoMechanism = this.dekEncryptor();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token6, "ENCRYPTION");
					alterDatabaseEncryptionKeyStatement.Encryptor = cryptoMechanism;
				}
			}
			return alterDatabaseEncryptionKeyStatement;
		}

		// Token: 0x06000B26 RID: 2854 RVA: 0x00034080 File Offset: 0x00032280
		public SqlCommandIdentifier sqlCommandIdentifier()
		{
			SqlCommandIdentifier sqlCommandIdentifier = base.FragmentFactory.CreateFragment<SqlCommandIdentifier>();
			IToken token = this.LT(1);
			this.match(226);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(sqlCommandIdentifier, token);
				sqlCommandIdentifier.SetUnquotedIdentifier(token.getText());
			}
			return sqlCommandIdentifier;
		}

		// Token: 0x06000B27 RID: 2855 RVA: 0x000340D0 File Offset: 0x000322D0
		public AlterDatabaseStatement alterDbAdd()
		{
			this.match(4);
			AlterDatabaseStatement alterDatabaseStatement;
			if ((this.LA(1) == 65 || this.LA(1) == 232) && (this.LA(2) == 65 || this.LA(2) == 191))
			{
				alterDatabaseStatement = this.alterDbAddFile();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				alterDatabaseStatement = this.alterDbAddFilegroup();
			}
			return alterDatabaseStatement;
		}

		// Token: 0x06000B28 RID: 2856 RVA: 0x00034168 File Offset: 0x00032368
		public AlterDatabaseStatement alterDbRemove()
		{
			AlterDatabaseStatement alterDatabaseStatement = null;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOVE");
			}
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FILEGROUP");
					AlterDatabaseRemoveFileGroupStatement alterDatabaseRemoveFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRemoveFileGroupStatement>();
					alterDatabaseRemoveFileGroupStatement.FileGroup = identifier;
					alterDatabaseStatement = alterDatabaseRemoveFileGroupStatement;
				}
			}
			else
			{
				this.match(65);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					AlterDatabaseRemoveFileStatement alterDatabaseRemoveFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRemoveFileStatement>();
					alterDatabaseRemoveFileStatement.File = identifier;
					alterDatabaseStatement = alterDatabaseRemoveFileStatement;
				}
			}
			return alterDatabaseStatement;
		}

		// Token: 0x06000B29 RID: 2857 RVA: 0x0003425C File Offset: 0x0003245C
		public AlterDatabaseStatement alterDbModify()
		{
			AlterDatabaseStatement alterDatabaseStatement = null;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MODIFY");
			}
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 191)
				{
					if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAME"))
					{
						IToken token2 = this.LT(1);
						this.match(232);
						this.match(206);
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "NAME");
							AlterDatabaseModifyNameStatement alterDatabaseModifyNameStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyNameStatement>();
							alterDatabaseModifyNameStatement.NewDatabaseName = identifier;
							alterDatabaseStatement = alterDatabaseModifyNameStatement;
						}
					}
					else
					{
						if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token3 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token3, "FILEGROUP");
						}
						alterDatabaseStatement = this.alterDbModifyFilegroup();
					}
				}
				else
				{
					alterDatabaseStatement = this.alterDbModifyAzureOptions();
				}
			}
			else
			{
				alterDatabaseStatement = this.alterDbModifyFile();
			}
			return alterDatabaseStatement;
		}

		// Token: 0x06000B2A RID: 2858 RVA: 0x000343C8 File Offset: 0x000325C8
		public AlterDatabaseSetStatement alterDbSet()
		{
			this.match(142);
			AlterDatabaseSetStatement alterDatabaseSetStatement = this.dbOptionStateList();
			if (this.LA(1) == 171 && (this.LA(2) == 134 || this.LA(2) == 232))
			{
				AlterDatabaseTermination alterDatabaseTermination = this.xactTermination();
				if (this.inputState.guessing == 0)
				{
					alterDatabaseSetStatement.Termination = alterDatabaseTermination;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterDatabaseSetStatement;
		}

		// Token: 0x06000B2B RID: 2859 RVA: 0x00034468 File Offset: 0x00032668
		public AlterDatabaseCollateStatement alterDbCollate()
		{
			AlterDatabaseCollateStatement alterDatabaseCollateStatement = base.FragmentFactory.CreateFragment<AlterDatabaseCollateStatement>();
			this.collation(alterDatabaseCollateStatement);
			return alterDatabaseCollateStatement;
		}

		// Token: 0x06000B2C RID: 2860 RVA: 0x0003448C File Offset: 0x0003268C
		public AlterDatabaseRebuildLogStatement alterDbRebuild()
		{
			AlterDatabaseRebuildLogStatement alterDatabaseRebuildLogStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRebuildLogStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REBUILD");
				TSql80ParserBaseInternal.Match(token2, "LOG");
				TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseRebuildLogStatement, token2);
				base.ThrowPartialAstIfPhaseOne(alterDatabaseRebuildLogStatement);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return alterDatabaseRebuildLogStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return alterDatabaseRebuildLogStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return alterDatabaseRebuildLogStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return alterDatabaseRebuildLogStatement;
							default:
								if (num == 28)
								{
									return alterDatabaseRebuildLogStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return alterDatabaseRebuildLogStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return alterDatabaseRebuildLogStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return alterDatabaseRebuildLogStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return alterDatabaseRebuildLogStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return alterDatabaseRebuildLogStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						FileDeclaration fileDeclaration = this.fileDecl(false);
						if (this.inputState.guessing == 0)
						{
							alterDatabaseRebuildLogStatement.FileDeclaration = fileDeclaration;
							return alterDatabaseRebuildLogStatement;
						}
						return alterDatabaseRebuildLogStatement;
					}
					case 106:
						return alterDatabaseRebuildLogStatement;
					default:
						if (num == 119)
						{
							return alterDatabaseRebuildLogStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterDatabaseRebuildLogStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterDatabaseRebuildLogStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterDatabaseRebuildLogStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return alterDatabaseRebuildLogStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return alterDatabaseRebuildLogStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return alterDatabaseRebuildLogStatement;
				default:
					if (num == 232)
					{
						return alterDatabaseRebuildLogStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B2D RID: 2861 RVA: 0x000347AC File Offset: 0x000329AC
		public void collation(ICollationSetter vParent)
		{
			this.match(26);
			Identifier identifier = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				vParent.Collation = identifier;
			}
		}

		// Token: 0x06000B2E RID: 2862 RVA: 0x000347DC File Offset: 0x000329DC
		public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement)
		{
			int num = this.LA(1);
			FileDeclaration fileDeclaration;
			if (num != 118)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				fileDeclaration = this.fileDeclBody(isAlterDbModifyFileStatement);
			}
			else
			{
				IToken token = this.LT(1);
				this.match(118);
				fileDeclaration = this.fileDeclBody(isAlterDbModifyFileStatement);
				if (this.inputState.guessing == 0)
				{
					fileDeclaration.IsPrimary = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token);
				}
			}
			return fileDeclaration;
		}

		// Token: 0x06000B2F RID: 2863 RVA: 0x00034858 File Offset: 0x00032A58
		public AlterDatabaseAddFileStatement alterDbAddFile()
		{
			AlterDatabaseAddFileStatement alterDatabaseAddFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseAddFileStatement>();
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOG");
					alterDatabaseAddFileStatement.IsLog = true;
				}
			}
			this.match(65);
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterDatabaseAddFileStatement);
			}
			this.fileDeclBodyList(alterDatabaseAddFileStatement, alterDatabaseAddFileStatement.FileDeclarations);
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							return alterDatabaseAddFileStatement;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return alterDatabaseAddFileStatement;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterDatabaseAddFileStatement;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							return alterDatabaseAddFileStatement;
						default:
							if (num2 == 28)
							{
								return alterDatabaseAddFileStatement;
							}
							switch (num2)
							{
							case 33:
							case 35:
								return alterDatabaseAddFileStatement;
							}
							break;
						}
					}
				}
				else if (num2 <= 82)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterDatabaseAddFileStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num2)
						{
						case 74:
						case 75:
							return alterDatabaseAddFileStatement;
						default:
							if (num2 == 82)
							{
								return alterDatabaseAddFileStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 86 || num2 == 92 || num2 == 95)
				{
					return alterDatabaseAddFileStatement;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 144)
				{
					if (num2 == 106 || num2 == 119)
					{
						return alterDatabaseAddFileStatement;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterDatabaseAddFileStatement;
					}
				}
				else if (num2 != 151)
				{
					switch (num2)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return alterDatabaseAddFileStatement;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num2)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return alterDatabaseAddFileStatement;
						}
						break;
					}
				}
				else
				{
					Identifier identifier = this.toFilegroup();
					if (this.inputState.guessing == 0)
					{
						alterDatabaseAddFileStatement.FileGroup = identifier;
						return alterDatabaseAddFileStatement;
					}
					return alterDatabaseAddFileStatement;
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176 || num2 == 182 || num2 == 191)
				{
					return alterDatabaseAddFileStatement;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return alterDatabaseAddFileStatement;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return alterDatabaseAddFileStatement;
				default:
					if (num2 == 232)
					{
						return alterDatabaseAddFileStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B30 RID: 2864 RVA: 0x00034BA4 File Offset: 0x00032DA4
		public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup()
		{
			AlterDatabaseAddFileGroupStatement alterDatabaseAddFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseAddFileGroupStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROUP");
				alterDatabaseAddFileGroupStatement.FileGroup = identifier;
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return alterDatabaseAddFileGroupStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return alterDatabaseAddFileGroupStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return alterDatabaseAddFileGroupStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return alterDatabaseAddFileGroupStatement;
							default:
								if (num == 28)
								{
									return alterDatabaseAddFileGroupStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 31:
					{
						this.match(31);
						IToken token2 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "FILESTREAM");
							TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseAddFileGroupStatement, token2);
							alterDatabaseAddFileGroupStatement.ContainsFileStream = true;
							return alterDatabaseAddFileGroupStatement;
						}
						return alterDatabaseAddFileGroupStatement;
					}
					case 32:
					case 34:
						break;
					case 33:
					case 35:
						return alterDatabaseAddFileGroupStatement;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return alterDatabaseAddFileGroupStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return alterDatabaseAddFileGroupStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return alterDatabaseAddFileGroupStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return alterDatabaseAddFileGroupStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterDatabaseAddFileGroupStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterDatabaseAddFileGroupStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterDatabaseAddFileGroupStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return alterDatabaseAddFileGroupStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return alterDatabaseAddFileGroupStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return alterDatabaseAddFileGroupStatement;
				default:
					if (num == 232)
					{
						return alterDatabaseAddFileGroupStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B31 RID: 2865 RVA: 0x00034ED0 File Offset: 0x000330D0
		public void fileDeclBodyList(TSqlFragment vParent, IList<FileDeclaration> fileDeclarations)
		{
			FileDeclaration fileDeclaration = this.fileDeclBody(false);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclaration>(vParent, fileDeclarations, fileDeclaration);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				fileDeclaration = this.fileDeclBody(false);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclaration>(vParent, fileDeclarations, fileDeclaration);
				}
			}
		}

		// Token: 0x06000B32 RID: 2866 RVA: 0x00034F34 File Offset: 0x00033134
		public Identifier toFilegroup()
		{
			this.match(151);
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROUP");
			}
			return identifier;
		}

		// Token: 0x06000B33 RID: 2867 RVA: 0x00034F84 File Offset: 0x00033184
		public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup()
		{
			AlterDatabaseModifyFileGroupStatement alterDatabaseModifyFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyFileGroupStatement>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterDatabaseModifyFileGroupStatement.FileGroup = identifier;
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier identifier2 = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "NAME");
					alterDatabaseModifyFileGroupStatement.NewFileGroupName = identifier2;
					base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileGroupStatement);
				}
			}
			else if (this.LA(1) == 47)
			{
				IToken token2 = this.LT(1);
				this.match(47);
				if (this.inputState.guessing == 0)
				{
					alterDatabaseModifyFileGroupStatement.MakeDefault = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseModifyFileGroupStatement, token2);
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileGroupStatement);
					alterDatabaseModifyFileGroupStatement.UpdatabilityOption = ModifyFilegroupOptionsHelper.Instance.ParseOption(token3);
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseModifyFileGroupStatement, token3);
				}
				if (this.LA(1) == 171 && (this.LA(2) == 134 || this.LA(2) == 232))
				{
					AlterDatabaseTermination alterDatabaseTermination = this.xactTermination();
					if (this.inputState.guessing == 0)
					{
						alterDatabaseModifyFileGroupStatement.Termination = alterDatabaseTermination;
					}
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return alterDatabaseModifyFileGroupStatement;
		}

		// Token: 0x06000B34 RID: 2868 RVA: 0x0003516C File Offset: 0x0003336C
		public AlterDatabaseModifyFileStatement alterDbModifyFile()
		{
			AlterDatabaseModifyFileStatement alterDatabaseModifyFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyFileStatement>();
			this.match(65);
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileStatement);
			}
			FileDeclaration fileDeclaration = this.fileDecl(true);
			if (this.inputState.guessing == 0)
			{
				alterDatabaseModifyFileStatement.FileDeclaration = fileDeclaration;
			}
			return alterDatabaseModifyFileStatement;
		}

		// Token: 0x06000B35 RID: 2869 RVA: 0x000351C0 File Offset: 0x000333C0
		public AlterDatabaseSetStatement alterDbModifyAzureOptions()
		{
			AlterDatabaseSetStatement alterDatabaseSetStatement = base.FragmentFactory.CreateFragment<AlterDatabaseSetStatement>();
			this.azureOptions(alterDatabaseSetStatement, alterDatabaseSetStatement.Options);
			return alterDatabaseSetStatement;
		}

		// Token: 0x06000B36 RID: 2870 RVA: 0x000351E8 File Offset: 0x000333E8
		public void azureOptions(TSqlFragment vParent, IList<DatabaseOption> vOptions)
		{
			int num = 0;
			this.match(191);
			DatabaseOption databaseOption = this.azureOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)databaseOption.OptionKind, databaseOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(vParent, vOptions, databaseOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				databaseOption = this.azureOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)databaseOption.OptionKind, databaseOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(vParent, vOptions, databaseOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000B37 RID: 2871 RVA: 0x0003529C File Offset: 0x0003349C
		public AlterDatabaseTermination xactTermination()
		{
			AlterDatabaseTermination alterDatabaseTermination = base.FragmentFactory.CreateFragment<AlterDatabaseTermination>();
			IToken token = this.LT(1);
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token);
			}
			int num = this.LA(1);
			if (num != 134)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NO_WAIT");
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token2);
					alterDatabaseTermination.NoWait = true;
				}
			}
			else
			{
				this.match(134);
				if (this.LA(1) == 232 && this.LA(2) == 221)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					Literal literal = this.integer();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "AFTER");
						alterDatabaseTermination.RollbackAfter = literal;
					}
					if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
					{
						IToken token4 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token4, "SECONDS");
							TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token4);
						}
					}
					else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token5 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "IMMEDIATE");
						TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token5);
						alterDatabaseTermination.ImmediateRollback = true;
					}
				}
			}
			return alterDatabaseTermination;
		}

		// Token: 0x06000B38 RID: 2872 RVA: 0x000354D4 File Offset: 0x000336D4
		public AlterDatabaseSetStatement dbOptionStateList()
		{
			AlterDatabaseSetStatement alterDatabaseSetStatement = base.FragmentFactory.CreateFragment<AlterDatabaseSetStatement>();
			ulong num = 0UL;
			DatabaseOption databaseOption = this.dbOptionStateItem(ref num);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(alterDatabaseSetStatement, alterDatabaseSetStatement.Options, databaseOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				databaseOption = this.dbOptionStateItem(ref num);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(alterDatabaseSetStatement, alterDatabaseSetStatement.Options, databaseOption);
				}
			}
			return alterDatabaseSetStatement;
		}

		// Token: 0x06000B39 RID: 2873 RVA: 0x00035554 File Offset: 0x00033754
		public DatabaseOption dbOptionStateItem(ref ulong encounteredOptions)
		{
			DatabaseOption databaseOption;
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CURSOR_DEFAULT"))
			{
				databaseOption = this.cursorDefaultDbOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 232) && base.NextTokenMatches("RECOVERY"))
			{
				databaseOption = this.recoveryDbOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("TARGET_RECOVERY_TIME"))
			{
				databaseOption = this.targetRecoveryTimeDbOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("PAGE_VERIFY"))
			{
				databaseOption = this.pageVerifyDbOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206 || this.LA(2) == 232) && base.NextTokenMatches("PARTNER"))
			{
				databaseOption = this.partnerOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206) && base.NextTokenMatches("WITNESS"))
			{
				databaseOption = this.witnessOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("PARAMETERIZATION"))
			{
				databaseOption = this.parameterizationOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("COMPATIBILITY_LEVEL"))
			{
				databaseOption = this.compatibilityLevelDbOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 191 || this.LA(2) == 206) && base.NextTokenMatches("CHANGE_TRACKING"))
			{
				databaseOption = this.changeTrackingDbOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CONTAINMENT"))
			{
				databaseOption = this.dbContainmentOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 232) && base.NextTokenMatches("HADR"))
			{
				databaseOption = this.hadrDbOption();
			}
			else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_48_.member(this.LA(2)) && base.NextTokenMatchesOneOf(base.OptionValidForCreateDatabase()))
			{
				databaseOption = this.createAlterDbOption(ref encounteredOptions);
			}
			else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
			{
				databaseOption = this.dbSingleIdentOption();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 103 && this.LA(2) != 105))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				databaseOption = this.alterDbOnOffOption();
			}
			return databaseOption;
		}

		// Token: 0x06000B3A RID: 2874 RVA: 0x00035898 File Offset: 0x00033A98
		public CursorDefaultDatabaseOption cursorDefaultDbOption()
		{
			CursorDefaultDatabaseOption cursorDefaultDatabaseOption = base.FragmentFactory.CreateFragment<CursorDefaultDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CURSOR_DEFAULT");
				cursorDefaultDatabaseOption.OptionKind = DatabaseOptionKind.CursorDefault;
				if (TSql80ParserBaseInternal.TryMatch(token2, "LOCAL"))
				{
					cursorDefaultDatabaseOption.IsLocal = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "GLOBAL");
					cursorDefaultDatabaseOption.IsLocal = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(cursorDefaultDatabaseOption, token2);
			}
			return cursorDefaultDatabaseOption;
		}

		// Token: 0x06000B3B RID: 2875 RVA: 0x0003592C File Offset: 0x00033B2C
		public RecoveryDatabaseOption recoveryDbOption()
		{
			RecoveryDatabaseOption recoveryDatabaseOption = base.FragmentFactory.CreateFragment<RecoveryDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RECOVERY");
				recoveryDatabaseOption.OptionKind = DatabaseOptionKind.Recovery;
			}
			int num = this.LA(1);
			if (num != 72)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					recoveryDatabaseOption.Value = RecoveryDbOptionsHelper.Instance.ParseOption(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(recoveryDatabaseOption, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(72);
				if (this.inputState.guessing == 0)
				{
					recoveryDatabaseOption.Value = RecoveryDatabaseOptionKind.Full;
					TSql80ParserBaseInternal.UpdateTokenInfo(recoveryDatabaseOption, token3);
				}
			}
			return recoveryDatabaseOption;
		}

		// Token: 0x06000B3C RID: 2876 RVA: 0x00035A14 File Offset: 0x00033C14
		public TargetRecoveryTimeDatabaseOption targetRecoveryTimeDbOption()
		{
			TargetRecoveryTimeDatabaseOption targetRecoveryTimeDatabaseOption = base.FragmentFactory.CreateFragment<TargetRecoveryTimeDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TARGET_RECOVERY_TIME");
				targetRecoveryTimeDatabaseOption.OptionKind = DatabaseOptionKind.TargetRecoveryTime;
				targetRecoveryTimeDatabaseOption.RecoveryTime = literal;
				targetRecoveryTimeDatabaseOption.Unit = TargetRecoveryTimeUnitHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(targetRecoveryTimeDatabaseOption, token2);
			}
			return targetRecoveryTimeDatabaseOption;
		}

		// Token: 0x06000B3D RID: 2877 RVA: 0x00035AAC File Offset: 0x00033CAC
		public PageVerifyDatabaseOption pageVerifyDbOption()
		{
			PageVerifyDatabaseOption pageVerifyDatabaseOption = base.FragmentFactory.CreateFragment<PageVerifyDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PAGE_VERIFY");
				pageVerifyDatabaseOption.OptionKind = DatabaseOptionKind.PageVerify;
				pageVerifyDatabaseOption.Value = PageVerifyDbOptionsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(pageVerifyDatabaseOption, token2);
			}
			return pageVerifyDatabaseOption;
		}

		// Token: 0x06000B3E RID: 2878 RVA: 0x00035B28 File Offset: 0x00033D28
		public PartnerDatabaseOption partnerOption()
		{
			PartnerDatabaseOption partnerDatabaseOption = base.FragmentFactory.CreateFragment<PartnerDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTNER");
				partnerDatabaseOption.OptionKind = DatabaseOptionKind.Partner;
			}
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 206)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.LA(1) == 232 && this.LA(2) == 221 && base.NextTokenMatches("TIMEOUT"))
					{
						IToken token2 = this.LT(1);
						this.match(232);
						Literal literal = this.integer();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "TIMEOUT");
							partnerDatabaseOption.Timeout = literal;
							partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.Timeout;
						}
					}
					else if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 103) && base.NextTokenMatches("SAFETY"))
					{
						IToken token3 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token3, "SAFETY");
						}
						int num2 = this.LA(1);
						if (num2 != 72)
						{
							if (num2 != 103)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							IToken token4 = this.LT(1);
							this.match(103);
							if (this.inputState.guessing == 0)
							{
								partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.SafetyOff;
								TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token4);
							}
						}
						else
						{
							IToken token5 = this.LT(1);
							this.match(72);
							if (this.inputState.guessing == 0)
							{
								partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.SafetyFull;
								TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token5);
							}
						}
					}
					else
					{
						if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token6 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							partnerDatabaseOption.PartnerOption = PartnerDbOptionsHelper.Instance.ParseOption(token6);
							TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token6);
						}
					}
				}
				else
				{
					this.match(206);
					Literal literal2 = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						partnerDatabaseOption.PartnerServer = literal2;
						partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.PartnerServer;
					}
				}
			}
			else
			{
				IToken token7 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.Off;
					TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token7);
				}
			}
			return partnerDatabaseOption;
		}

		// Token: 0x06000B3F RID: 2879 RVA: 0x00035E08 File Offset: 0x00034008
		public WitnessDatabaseOption witnessOption()
		{
			WitnessDatabaseOption witnessDatabaseOption = base.FragmentFactory.CreateFragment<WitnessDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "WITNESS");
				witnessDatabaseOption.OptionKind = DatabaseOptionKind.Witness;
			}
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					witnessDatabaseOption.WitnessServer = literal;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					witnessDatabaseOption.IsOff = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(witnessDatabaseOption, token2);
				}
			}
			return witnessDatabaseOption;
		}

		// Token: 0x06000B40 RID: 2880 RVA: 0x00035EDC File Offset: 0x000340DC
		public ParameterizationDatabaseOption parameterizationOption()
		{
			ParameterizationDatabaseOption parameterizationDatabaseOption = base.FragmentFactory.CreateFragment<ParameterizationDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARAMETERIZATION");
				parameterizationDatabaseOption.OptionKind = DatabaseOptionKind.Parameterization;
				if (TSql80ParserBaseInternal.TryMatch(token2, "SIMPLE"))
				{
					parameterizationDatabaseOption.IsSimple = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "FORCED");
					parameterizationDatabaseOption.IsSimple = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(parameterizationDatabaseOption, token2);
			}
			return parameterizationDatabaseOption;
		}

		// Token: 0x06000B41 RID: 2881 RVA: 0x00035F70 File Offset: 0x00034170
		public LiteralDatabaseOption compatibilityLevelDbOption()
		{
			LiteralDatabaseOption literalDatabaseOption = base.FragmentFactory.CreateFragment<LiteralDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "COMPATIBILITY_LEVEL");
				literalDatabaseOption.OptionKind = DatabaseOptionKind.CompatibilityLevel;
				TSql80ParserBaseInternal.UpdateTokenInfo(literalDatabaseOption, token);
				literalDatabaseOption.Value = literal;
			}
			return literalDatabaseOption;
		}

		// Token: 0x06000B42 RID: 2882 RVA: 0x00035FE0 File Offset: 0x000341E0
		public ChangeTrackingDatabaseOption changeTrackingDbOption()
		{
			ChangeTrackingDatabaseOption changeTrackingDatabaseOption = base.FragmentFactory.CreateFragment<ChangeTrackingDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING");
				changeTrackingDatabaseOption.OptionKind = DatabaseOptionKind.ChangeTracking;
				TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingDatabaseOption, token);
			}
			if (this.LA(1) == 206 && this.LA(2) == 103)
			{
				this.match(206);
				IToken token2 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					changeTrackingDatabaseOption.OptionState = OptionState.Off;
					TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingDatabaseOption, token2);
				}
			}
			else if (this.LA(1) == 206 && this.LA(2) == 105)
			{
				this.match(206);
				IToken token3 = this.LT(1);
				this.match(105);
				if (this.inputState.guessing == 0)
				{
					changeTrackingDatabaseOption.OptionState = OptionState.On;
					TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingDatabaseOption, token3);
				}
				if (this.LA(1) == 191 && this.LA(2) == 232)
				{
					this.changeTrackingOnOptions(changeTrackingDatabaseOption);
				}
				else if (!TSql110ParserInternal.tokenSet_49_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.changeTrackingOnOptions(changeTrackingDatabaseOption);
			}
			return changeTrackingDatabaseOption;
		}

		// Token: 0x06000B43 RID: 2883 RVA: 0x00036170 File Offset: 0x00034370
		public ContainmentDatabaseOption dbContainmentOption()
		{
			ContainmentDatabaseOption containmentDatabaseOption = base.FragmentFactory.CreateFragment<ContainmentDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONTAINMENT");
				TSql80ParserBaseInternal.UpdateTokenInfo(containmentDatabaseOption, token);
				containmentDatabaseOption.OptionKind = DatabaseOptionKind.Containment;
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				containmentDatabaseOption.Value = ContainmentOptionKindHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(containmentDatabaseOption, token2);
			}
			return containmentDatabaseOption;
		}

		// Token: 0x06000B44 RID: 2884 RVA: 0x0003620C File Offset: 0x0003440C
		public DatabaseOption hadrDbOption()
		{
			IToken token = this.LT(1);
			this.match(232);
			DatabaseOption databaseOption;
			if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("AVAILABILITY"))
			{
				databaseOption = this.hadrAvailabilityDbOption();
			}
			else
			{
				if ((this.LA(1) != 103 && this.LA(1) != 232) || !TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				databaseOption = this.simpleHadrDbOption();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "HADR");
				databaseOption.OptionKind = DatabaseOptionKind.Hadr;
				TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
			}
			return databaseOption;
		}

		// Token: 0x06000B45 RID: 2885 RVA: 0x000362D0 File Offset: 0x000344D0
		public DatabaseOption createAlterDbOption(ref ulong encounteredOptions)
		{
			DatabaseOption databaseOption;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_49_.member(this.LA(2)) && base.NextTokenMatches("RESTRICTED_USER"))
			{
				databaseOption = this.restrictedUserCreateDbOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 105) && (base.NextTokenMatches("DB_CHAINING") || base.NextTokenMatches("TRUSTWORTHY")))
			{
				databaseOption = this.createDbOnOffOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("FILESTREAM"))
			{
				databaseOption = this.fileStreamCreateAlterDbOption();
			}
			else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
			{
				databaseOption = this.createDbServiceBrokerOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				databaseOption = this.createAlterDbEqualsSignOption();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)databaseOption.OptionKind, databaseOption);
			}
			return databaseOption;
		}

		// Token: 0x06000B46 RID: 2886 RVA: 0x00036410 File Offset: 0x00034610
		public DatabaseOption dbSingleIdentOption()
		{
			DatabaseOption databaseOption = base.FragmentFactory.CreateFragment<DatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				databaseOption.OptionKind = SimpleDbOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
				TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
			}
			return databaseOption;
		}

		// Token: 0x06000B47 RID: 2887 RVA: 0x00036468 File Offset: 0x00034668
		public OnOffDatabaseOption alterDbOnOffOption()
		{
			OnOffDatabaseOption onOffDatabaseOption = base.FragmentFactory.CreateFragment<OnOffDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			OptionState optionState = this.optionOnOff(onOffDatabaseOption);
			if (this.inputState.guessing == 0)
			{
				onOffDatabaseOption.OptionKind = OnOffSimpleDbOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
				onOffDatabaseOption.OptionState = optionState;
			}
			return onOffDatabaseOption;
		}

		// Token: 0x06000B48 RID: 2888 RVA: 0x000364C8 File Offset: 0x000346C8
		public void changeTrackingOnOptions(ChangeTrackingDatabaseOption vParent)
		{
			bool flag = false;
			bool flag2 = false;
			this.match(191);
			ChangeTrackingOptionDetail changeTrackingOptionDetail = this.changeTrackingOneOption(ref flag, ref flag2);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ChangeTrackingOptionDetail>(vParent, vParent.Details, changeTrackingOptionDetail);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				changeTrackingOptionDetail = this.changeTrackingOneOption(ref flag, ref flag2);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ChangeTrackingOptionDetail>(vParent, vParent.Details, changeTrackingOptionDetail);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000B49 RID: 2889 RVA: 0x00036574 File Offset: 0x00034774
		public ChangeTrackingOptionDetail changeTrackingOneOption(ref bool autoCleanupEncountered, ref bool changeRetentionEncountered)
		{
			ChangeTrackingOptionDetail changeTrackingOptionDetail = null;
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 103:
			{
				IToken token2 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					return base.CreateAutoCleanupDetail(token, token2, ref autoCleanupEncountered);
				}
				return changeTrackingOptionDetail;
			}
			case 104:
				break;
			case 105:
			{
				IToken token3 = this.LT(1);
				this.match(105);
				if (this.inputState.guessing == 0)
				{
					return base.CreateAutoCleanupDetail(token, token3, ref autoCleanupEncountered);
				}
				return changeTrackingOptionDetail;
			}
			default:
				if (num == 221)
				{
					Literal literal = this.integer();
					IToken token4 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "CHANGE_RETENTION");
						if (changeRetentionEncountered)
						{
							TSql80ParserBaseInternal.ThrowParseErrorException("SQL46050", token, TSqlParserResource.SQL46050Message, new string[] { token.getText() });
						}
						changeRetentionEncountered = true;
						ChangeRetentionChangeTrackingOptionDetail changeRetentionChangeTrackingOptionDetail = base.FragmentFactory.CreateFragment<ChangeRetentionChangeTrackingOptionDetail>();
						changeRetentionChangeTrackingOptionDetail.Unit = RetentionUnitHelper.Instance.ParseOption(token4);
						changeRetentionChangeTrackingOptionDetail.RetentionPeriod = literal;
						TSql80ParserBaseInternal.UpdateTokenInfo(changeRetentionChangeTrackingOptionDetail, token);
						TSql80ParserBaseInternal.UpdateTokenInfo(changeRetentionChangeTrackingOptionDetail, token4);
						return changeRetentionChangeTrackingOptionDetail;
					}
					return changeTrackingOptionDetail;
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B4A RID: 2890 RVA: 0x000366EC File Offset: 0x000348EC
		public HadrAvailabilityGroupDatabaseOption hadrAvailabilityDbOption()
		{
			HadrAvailabilityGroupDatabaseOption hadrAvailabilityGroupDatabaseOption = base.FragmentFactory.CreateFragment<HadrAvailabilityGroupDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(76);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AVAILABILITY");
				hadrAvailabilityGroupDatabaseOption.GroupName = identifier;
				hadrAvailabilityGroupDatabaseOption.HadrOption = HadrDatabaseOptionKind.AvailabilityGroup;
			}
			return hadrAvailabilityGroupDatabaseOption;
		}

		// Token: 0x06000B4B RID: 2891 RVA: 0x0003675C File Offset: 0x0003495C
		public HadrDatabaseOption simpleHadrDbOption()
		{
			HadrDatabaseOption hadrDatabaseOption = base.FragmentFactory.CreateFragment<HadrDatabaseOption>();
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token, "RESUME"))
					{
						hadrDatabaseOption.HadrOption = HadrDatabaseOptionKind.Resume;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "SUSPEND");
						hadrDatabaseOption.HadrOption = HadrDatabaseOptionKind.Suspend;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(hadrDatabaseOption, token);
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					hadrDatabaseOption.HadrOption = HadrDatabaseOptionKind.Off;
					TSql80ParserBaseInternal.UpdateTokenInfo(hadrDatabaseOption, token2);
				}
			}
			return hadrDatabaseOption;
		}

		// Token: 0x06000B4C RID: 2892 RVA: 0x00036820 File Offset: 0x00034A20
		public AuditSpecificationPart auditSpecificationDetailDb()
		{
			AuditSpecificationPart auditSpecificationPart = base.FragmentFactory.CreateFragment<AuditSpecificationPart>();
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(54);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token);
					auditSpecificationPart.IsDrop = true;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token2);
					auditSpecificationPart.IsDrop = false;
				}
			}
			this.match(191);
			AuditSpecificationDetail auditSpecificationDetail;
			if (TSql110ParserInternal.tokenSet_50_.member(this.LA(1)) && (this.LA(2) == 105 || this.LA(2) == 198))
			{
				auditSpecificationDetail = this.auditActionSpecification();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 192)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				auditSpecificationDetail = this.databaseAuditActionGroup();
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				auditSpecificationPart.Details = auditSpecificationDetail;
				TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token3);
			}
			return auditSpecificationPart;
		}

		// Token: 0x06000B4D RID: 2893 RVA: 0x0003696C File Offset: 0x00034B6C
		public CryptoMechanism dekEncryptor()
		{
			CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVER");
			}
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "CERTIFICATE");
					cryptoMechanism.CryptoMechanismType = CryptoMechanismType.Certificate;
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 91)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "ASYMMETRIC");
					cryptoMechanism.CryptoMechanismType = CryptoMechanismType.AsymmetricKey;
				}
			}
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				cryptoMechanism.Identifier = identifier;
			}
			return cryptoMechanism;
		}

		// Token: 0x06000B4E RID: 2894 RVA: 0x00036A9C File Offset: 0x00034C9C
		public CreateDatabaseAuditSpecificationStatement createDatabaseAuditSpecification()
		{
			CreateDatabaseAuditSpecificationStatement createDatabaseAuditSpecificationStatement = base.FragmentFactory.CreateFragment<CreateDatabaseAuditSpecificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AUDIT");
				TSql80ParserBaseInternal.Match(token2, "SPECIFICATION");
				createDatabaseAuditSpecificationStatement.SpecificationName = identifier;
				base.ThrowPartialAstIfPhaseOne(createDatabaseAuditSpecificationStatement);
			}
			this.auditSpecificationForClause(createDatabaseAuditSpecificationStatement);
			bool flag = false;
			if (this.LA(1) == 4 && this.LA(2) == 191)
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(4);
					this.match(191);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				AuditSpecificationPart auditSpecificationPart = this.createAuditSpecificationDetailDb();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditSpecificationPart>(createDatabaseAuditSpecificationStatement, createDatabaseAuditSpecificationStatement.Parts, auditSpecificationPart);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					auditSpecificationPart = this.createAuditSpecificationDetailDb();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AuditSpecificationPart>(createDatabaseAuditSpecificationStatement, createDatabaseAuditSpecificationStatement.Parts, auditSpecificationPart);
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.auditSpecificationStateOpt(createDatabaseAuditSpecificationStatement);
			return createDatabaseAuditSpecificationStatement;
		}

		// Token: 0x06000B4F RID: 2895 RVA: 0x00036C44 File Offset: 0x00034E44
		public CreateDatabaseStatement createDatabase()
		{
			CreateDatabaseStatement createDatabaseStatement = base.FragmentFactory.CreateFragment<CreateDatabaseStatement>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createDatabaseStatement.DatabaseName = identifier;
				base.ThrowPartialAstIfPhaseOne(createDatabaseStatement);
			}
			if (this.LA(1) == 191 && this.LA(2) == 232 && (base.NextTokenMatches("MAXSIZE", 2) || base.NextTokenMatches("EDITION", 2)))
			{
				this.azureOptions(createDatabaseStatement, createDatabaseStatement.Options);
			}
			else if (this.LA(1) == 9 && this.LA(2) == 232 && base.NextTokenMatches("COPY", 2))
			{
				this.azureAsCopyOf(createDatabaseStatement);
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_29_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_51_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (this.LA(1) == 232 && this.LA(2) == 206)
				{
					ContainmentDatabaseOption containmentDatabaseOption = this.dbContainmentOption();
					if (this.inputState.guessing == 0)
					{
						createDatabaseStatement.Containment = containmentDatabaseOption;
					}
				}
				else if (!TSql110ParserInternal.tokenSet_29_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.recoveryUnitList(createDatabaseStatement);
				this.collationOpt(createDatabaseStatement);
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 35)
					{
						if (num <= 17)
						{
							if (num == 1)
							{
								goto IL_03D1;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_03D1;
							case 5:
								goto IL_03BE;
							default:
								switch (num)
								{
								case 9:
									break;
								case 10:
								case 11:
								case 14:
								case 16:
									goto IL_03BE;
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_03D1;
								default:
									goto IL_03BE;
								}
								break;
							}
						}
						else
						{
							switch (num)
							{
							case 22:
							case 23:
								goto IL_03D1;
							default:
								if (num == 28)
								{
									goto IL_03D1;
								}
								switch (num)
								{
								case 33:
								case 35:
									goto IL_03D1;
								case 34:
									goto IL_03BE;
								default:
									goto IL_03BE;
								}
								break;
							}
						}
					}
					else if (num <= 75)
					{
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_03D1;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							goto IL_03BE;
						default:
							if (num != 67)
							{
								switch (num)
								{
								case 74:
								case 75:
									goto IL_03D1;
								default:
									goto IL_03BE;
								}
							}
							break;
						}
					}
					else
					{
						if (num != 82 && num != 86 && num != 92)
						{
							goto IL_03BE;
						}
						goto IL_03D1;
					}
					this.dbAddendums(createDatabaseStatement);
					goto IL_03D1;
				}
				if (num <= 172)
				{
					if (num <= 119)
					{
						if (num == 95 || num == 106 || num == 119)
						{
							goto IL_03D1;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_03D1;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_03D1;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_03D1;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num == 176 || num == 182 || num == 191)
					{
						goto IL_03D1;
					}
				}
				else
				{
					if (num == 204)
					{
						goto IL_03D1;
					}
					switch (num)
					{
					case 219:
					case 220:
						goto IL_03D1;
					default:
						if (num == 232)
						{
							goto IL_03D1;
						}
						break;
					}
				}
				IL_03BE:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_03D1:
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					this.withCreateDbOptions(createDatabaseStatement);
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return createDatabaseStatement;
		}

		// Token: 0x06000B50 RID: 2896 RVA: 0x00037094 File Offset: 0x00035294
		public CreateDatabaseEncryptionKeyStatement createDatabaseEncryptionKey()
		{
			CreateDatabaseEncryptionKeyStatement createDatabaseEncryptionKeyStatement = base.FragmentFactory.CreateFragment<CreateDatabaseEncryptionKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			this.match(171);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token3 = this.LT(1);
			this.match(232);
			IToken token4 = this.LT(1);
			this.match(232);
			this.match(18);
			CryptoMechanism cryptoMechanism = this.dekEncryptor();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token4, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token2, "ALGORITHM");
				createDatabaseEncryptionKeyStatement.Algorithm = DatabaseEncryptionKeyAlgorithmHelper.Instance.ParseOption(token3);
				createDatabaseEncryptionKeyStatement.Encryptor = cryptoMechanism;
			}
			return createDatabaseEncryptionKeyStatement;
		}

		// Token: 0x06000B51 RID: 2897 RVA: 0x0003717C File Offset: 0x0003537C
		public void azureAsCopyOf(CreateDatabaseStatement vParent)
		{
			this.match(9);
			IToken token = this.LT(1);
			this.match(232);
			this.match(102);
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(2);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "COPY");
				vParent.CopyOf = multiPartIdentifier;
			}
		}

		// Token: 0x06000B52 RID: 2898 RVA: 0x000371D8 File Offset: 0x000353D8
		public void recoveryUnitList(CreateDatabaseStatement vParent)
		{
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0290;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0290;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0290;
						case 10:
						case 11:
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
							case 26:
							case 28:
								goto IL_0290;
							case 24:
							case 25:
							case 27:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_0290;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0290;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num == 67)
						{
							goto IL_0290;
						}
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0290;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0290;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						goto IL_0290;
					}
					switch (num)
					{
					case 105:
						this.onDisk(vParent);
						goto IL_0290;
					case 106:
						goto IL_0290;
					default:
						if (num == 119)
						{
							goto IL_0290;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0290;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0290;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0290;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_0290;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0290;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0290;
				default:
					if (num == 232)
					{
						goto IL_0290;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0290:
			if (this.LA(1) == 232 && this.LA(2) == 105 && base.NextTokenMatches("LOG"))
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(105);
				this.fileDeclBodyList(vParent, vParent.LogOn);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOG");
					return;
				}
				return;
			}
			else
			{
				if (TSql110ParserInternal.tokenSet_52_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000B53 RID: 2899 RVA: 0x00037518 File Offset: 0x00035718
		public void collationOpt(ICollationSetter vParent)
		{
			switch (this.LA(1))
			{
			case 1:
			case 4:
			case 6:
			case 7:
			case 9:
			case 10:
			case 12:
			case 13:
			case 14:
			case 15:
			case 17:
			case 21:
			case 22:
			case 23:
			case 28:
			case 30:
			case 33:
			case 35:
			case 36:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case 49:
			case 50:
			case 54:
			case 55:
			case 56:
			case 58:
			case 59:
			case 60:
			case 61:
			case 64:
			case 67:
			case 68:
			case 71:
			case 72:
			case 74:
			case 75:
			case 76:
			case 77:
			case 79:
			case 82:
			case 83:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 92:
			case 93:
			case 94:
			case 95:
			case 99:
			case 100:
			case 105:
			case 106:
			case 111:
			case 112:
			case 113:
			case 114:
			case 116:
			case 118:
			case 119:
			case 123:
			case 125:
			case 126:
			case 127:
			case 129:
			case 131:
			case 132:
			case 133:
			case 134:
			case 136:
			case 138:
			case 140:
			case 142:
			case 143:
			case 144:
			case 150:
			case 151:
			case 156:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 164:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 176:
			case 177:
			case 178:
			case 182:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 204:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 219:
			case 220:
			case 230:
			case 231:
			case 232:
			case 233:
			case 234:
				return;
			case 26:
				this.collation(vParent);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B54 RID: 2900 RVA: 0x000378FC File Offset: 0x00035AFC
		public void dbAddendums(CreateDatabaseStatement vParent)
		{
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 67)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(67);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					vParent.AttachMode = AttachModeHelper.Instance.ParseOption(token);
					if (vParent.AttachMode == AttachMode.Load)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
			}
			else
			{
				this.match(9);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(102);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SNAPSHOT");
					vParent.DatabaseSnapshot = identifier;
					return;
				}
			}
		}

		// Token: 0x06000B55 RID: 2901 RVA: 0x000379D4 File Offset: 0x00035BD4
		public void withCreateDbOptions(CreateDatabaseStatement vParent)
		{
			ulong num = 0UL;
			this.match(171);
			DatabaseOption databaseOption = this.createAlterDbOption(ref num);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(vParent, vParent.Options, databaseOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				databaseOption = this.createAlterDbOption(ref num);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(vParent, vParent.Options, databaseOption);
				}
			}
		}

		// Token: 0x06000B56 RID: 2902 RVA: 0x00037A50 File Offset: 0x00035C50
		public DatabaseOption azureOption()
		{
			DatabaseOption databaseOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXSIZE"))
			{
				databaseOption = this.azureMaxSizeDatabaseOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				databaseOption = this.azureEditionDatabaseOption();
			}
			return databaseOption;
		}

		// Token: 0x06000B57 RID: 2903 RVA: 0x00037AC8 File Offset: 0x00035CC8
		public MaxSizeDatabaseOption azureMaxSizeDatabaseOption()
		{
			MaxSizeDatabaseOption maxSizeDatabaseOption = base.FragmentFactory.CreateFragment<MaxSizeDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MAXSIZE");
				maxSizeDatabaseOption.OptionKind = DatabaseOptionKind.MaxSize;
				TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeDatabaseOption, token);
				maxSizeDatabaseOption.MaxSize = literal;
				TSql80ParserBaseInternal.Match(token2, "GB");
				maxSizeDatabaseOption.Units = MemoryUnit.GB;
				TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeDatabaseOption, token2);
			}
			return maxSizeDatabaseOption;
		}

		// Token: 0x06000B58 RID: 2904 RVA: 0x00037B68 File Offset: 0x00035D68
		public LiteralDatabaseOption azureEditionDatabaseOption()
		{
			LiteralDatabaseOption literalDatabaseOption = base.FragmentFactory.CreateFragment<LiteralDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EDITION");
				TSql80ParserBaseInternal.UpdateTokenInfo(literalDatabaseOption, token);
				literalDatabaseOption.OptionKind = DatabaseOptionKind.Edition;
				literalDatabaseOption.Value = literal;
			}
			return literalDatabaseOption;
		}

		// Token: 0x06000B59 RID: 2905 RVA: 0x00037BD8 File Offset: 0x00035DD8
		public MultiPartIdentifier multiPartIdentifier(int vMaxNumber)
		{
			MultiPartIdentifier multiPartIdentifier = base.FragmentFactory.CreateFragment<MultiPartIdentifier>();
			List<Identifier> list = this.identifierList(vMaxNumber);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(multiPartIdentifier, multiPartIdentifier.Identifiers, list);
			}
			return multiPartIdentifier;
		}

		// Token: 0x06000B5A RID: 2906 RVA: 0x00037C14 File Offset: 0x00035E14
		public void onDisk(CreateDatabaseStatement vParent)
		{
			FileGroupDefinition fileGroupDefinition = base.FragmentFactory.CreateFragment<FileGroupDefinition>();
			vParent.FileGroups.Add(fileGroupDefinition);
			this.match(105);
			FileDeclaration fileDeclaration = this.fileDecl(false);
			if (this.inputState.guessing == 0)
			{
				fileGroupDefinition.FileDeclarations.Add(fileDeclaration);
				vParent.UpdateTokenInfo(fileDeclaration);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				int num = this.LA(1);
				if (num != 118 && num != 191)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					FileGroupDefinition fileGroupDefinition2 = this.fileGroupDecl();
					if (this.inputState.guessing == 0)
					{
						fileGroupDefinition = fileGroupDefinition2;
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileGroupDefinition>(vParent, vParent.FileGroups, fileGroupDefinition);
					}
				}
				else
				{
					fileDeclaration = this.fileDecl(false);
					if (this.inputState.guessing == 0)
					{
						fileGroupDefinition.FileDeclarations.Add(fileDeclaration);
						vParent.UpdateTokenInfo(fileDeclaration);
					}
				}
			}
		}

		// Token: 0x06000B5B RID: 2907 RVA: 0x00037D0C File Offset: 0x00035F0C
		public FileGroupDefinition fileGroupDecl()
		{
			FileGroupDefinition fileGroupDefinition = base.FragmentFactory.CreateFragment<FileGroupDefinition>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROUP");
				TSql80ParserBaseInternal.UpdateTokenInfo(fileGroupDefinition, token);
				fileGroupDefinition.Name = identifier;
			}
			int num = this.LA(1);
			if (num != 31)
			{
				if (num != 47 && num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(31);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FILESTREAM");
					TSql80ParserBaseInternal.UpdateTokenInfo(fileGroupDefinition, token2);
					fileGroupDefinition.ContainsFileStream = true;
				}
			}
			int num2 = this.LA(1);
			if (num2 != 47)
			{
				if (num2 != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(47);
				if (this.inputState.guessing == 0)
				{
					fileGroupDefinition.IsDefault = true;
				}
			}
			FileDeclaration fileDeclaration = this.fileDeclBody(false);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclaration>(fileGroupDefinition, fileGroupDefinition.FileDeclarations, fileDeclaration);
			}
			return fileGroupDefinition;
		}

		// Token: 0x06000B5C RID: 2908 RVA: 0x00037E50 File Offset: 0x00036050
		public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement)
		{
			FileDeclaration fileDeclaration = base.FragmentFactory.CreateFragment<FileDeclaration>();
			int num = 0;
			IToken token = this.LT(1);
			this.match(191);
			FileDeclarationOption fileDeclarationOption = this.fileOption(isAlterDbModifyFileStatement);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fileDeclarationOption.OptionKind, fileDeclarationOption);
				TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclarationOption>(fileDeclaration, fileDeclaration.Options, fileDeclarationOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				fileDeclarationOption = this.fileOption(isAlterDbModifyFileStatement);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fileDeclarationOption.OptionKind, fileDeclarationOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclarationOption>(fileDeclaration, fileDeclaration.Options, fileDeclarationOption);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token2);
				if (!isAlterDbModifyFileStatement && (num & 8) == 0)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46065", fileDeclaration, TSqlParserResource.SQL46065Message, new string[0]);
				}
			}
			return fileDeclaration;
		}

		// Token: 0x06000B5D RID: 2909 RVA: 0x00037F4C File Offset: 0x0003614C
		public FileDeclarationOption fileOption(bool newNameAllowed)
		{
			FileDeclarationOption fileDeclarationOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAME"))
			{
				fileDeclarationOption = this.nameFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILENAME"))
			{
				fileDeclarationOption = this.fileNameFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SIZE"))
			{
				fileDeclarationOption = this.sizeFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXSIZE"))
			{
				fileDeclarationOption = this.maxSizeFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILEGROWTH"))
			{
				fileDeclarationOption = this.fileGrowthFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NEWNAME"))
			{
				fileDeclarationOption = this.newNameFileOption();
				if (this.inputState.guessing == 0 && !newNameAllowed)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46062", fileDeclarationOption, TSqlParserResource.SQL46062Message, new string[0]);
				}
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 192 && this.LA(2) != 198) || !base.NextTokenMatches("OFFLINE"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				fileDeclarationOption = this.offlineFileOption();
			}
			return fileDeclarationOption;
		}

		// Token: 0x06000B5E RID: 2910 RVA: 0x00038110 File Offset: 0x00036310
		public NameFileDeclarationOption nameFileOption()
		{
			NameFileDeclarationOption nameFileDeclarationOption = base.FragmentFactory.CreateFragment<NameFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IdentifierOrValueExpression identifierOrValueExpression = this.nonEmptyStringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NAME");
				nameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.Name;
				TSql80ParserBaseInternal.UpdateTokenInfo(nameFileDeclarationOption, token);
				nameFileDeclarationOption.LogicalFileName = identifierOrValueExpression;
				nameFileDeclarationOption.IsNewName = false;
			}
			return nameFileDeclarationOption;
		}

		// Token: 0x06000B5F RID: 2911 RVA: 0x00038188 File Offset: 0x00036388
		public FileNameFileDeclarationOption fileNameFileOption()
		{
			FileNameFileDeclarationOption fileNameFileDeclarationOption = base.FragmentFactory.CreateFragment<FileNameFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.nonEmptyString();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILENAME");
				fileNameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.FileName;
				TSql80ParserBaseInternal.UpdateTokenInfo(fileNameFileDeclarationOption, token);
				fileNameFileDeclarationOption.OSFileName = literal;
			}
			return fileNameFileDeclarationOption;
		}

		// Token: 0x06000B60 RID: 2912 RVA: 0x000381F8 File Offset: 0x000363F8
		public SizeFileDeclarationOption sizeFileOption()
		{
			SizeFileDeclarationOption sizeFileDeclarationOption = base.FragmentFactory.CreateFragment<SizeFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SIZE");
				sizeFileDeclarationOption.OptionKind = FileDeclarationOptionKind.Size;
				TSql80ParserBaseInternal.UpdateTokenInfo(sizeFileDeclarationOption, token);
				sizeFileDeclarationOption.Size = literal;
			}
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				MemoryUnit memoryUnit = this.memUnit();
				if (this.inputState.guessing == 0)
				{
					sizeFileDeclarationOption.Units = memoryUnit;
				}
			}
			return sizeFileDeclarationOption;
		}

		// Token: 0x06000B61 RID: 2913 RVA: 0x000382BC File Offset: 0x000364BC
		public MaxSizeFileDeclarationOption maxSizeFileOption()
		{
			MaxSizeFileDeclarationOption maxSizeFileDeclarationOption = base.FragmentFactory.CreateFragment<MaxSizeFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MAXSIZE");
				TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeFileDeclarationOption, token);
				maxSizeFileDeclarationOption.OptionKind = FileDeclarationOptionKind.MaxSize;
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "UNLIMITED");
					maxSizeFileDeclarationOption.Unlimited = true;
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					maxSizeFileDeclarationOption.MaxSize = literal;
				}
				int num2 = this.LA(1);
				if (num2 != 192 && num2 != 198)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					MemoryUnit memoryUnit = this.memUnit();
					if (this.inputState.guessing == 0)
					{
						maxSizeFileDeclarationOption.Units = memoryUnit;
					}
				}
			}
			return maxSizeFileDeclarationOption;
		}

		// Token: 0x06000B62 RID: 2914 RVA: 0x000383FC File Offset: 0x000365FC
		public FileGrowthFileDeclarationOption fileGrowthFileOption()
		{
			FileGrowthFileDeclarationOption fileGrowthFileDeclarationOption = base.FragmentFactory.CreateFragment<FileGrowthFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROWTH");
				TSql80ParserBaseInternal.UpdateTokenInfo(fileGrowthFileDeclarationOption, token);
				fileGrowthFileDeclarationOption.OptionKind = FileDeclarationOptionKind.FileGrowth;
			}
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				fileGrowthFileDeclarationOption.GrowthIncrement = literal;
			}
			int num = this.LA(1);
			if (num <= 192)
			{
				if (num != 189)
				{
					if (num == 192)
					{
						return fileGrowthFileDeclarationOption;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(189);
					if (this.inputState.guessing == 0)
					{
						fileGrowthFileDeclarationOption.Units = MemoryUnit.Percent;
						TSql80ParserBaseInternal.UpdateTokenInfo(fileGrowthFileDeclarationOption, token2);
						return fileGrowthFileDeclarationOption;
					}
					return fileGrowthFileDeclarationOption;
				}
			}
			else
			{
				if (num == 198)
				{
					return fileGrowthFileDeclarationOption;
				}
				if (num == 232)
				{
					MemoryUnit memoryUnit = this.memUnit();
					if (this.inputState.guessing == 0)
					{
						fileGrowthFileDeclarationOption.Units = memoryUnit;
						return fileGrowthFileDeclarationOption;
					}
					return fileGrowthFileDeclarationOption;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B63 RID: 2915 RVA: 0x00038514 File Offset: 0x00036714
		public NameFileDeclarationOption newNameFileOption()
		{
			NameFileDeclarationOption nameFileDeclarationOption = base.FragmentFactory.CreateFragment<NameFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IdentifierOrValueExpression identifierOrValueExpression = this.nonEmptyStringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NEWNAME");
				nameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.NewName;
				TSql80ParserBaseInternal.UpdateTokenInfo(nameFileDeclarationOption, token);
				nameFileDeclarationOption.LogicalFileName = identifierOrValueExpression;
				nameFileDeclarationOption.IsNewName = true;
			}
			return nameFileDeclarationOption;
		}

		// Token: 0x06000B64 RID: 2916 RVA: 0x0003858C File Offset: 0x0003678C
		public FileDeclarationOption offlineFileOption()
		{
			FileDeclarationOption fileDeclarationOption = base.FragmentFactory.CreateFragment<FileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OFFLINE");
				fileDeclarationOption.OptionKind = FileDeclarationOptionKind.Offline;
				TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclarationOption, token);
			}
			return fileDeclarationOption;
		}

		// Token: 0x06000B65 RID: 2917 RVA: 0x000385E4 File Offset: 0x000367E4
		public IdentifierOrValueExpression nonEmptyStringOrIdentifier()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.nonEmptyString();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = literal;
				}
				break;
			}
			case 232:
			case 233:
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.Identifier = identifier;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierOrValueExpression;
		}

		// Token: 0x06000B66 RID: 2918 RVA: 0x00038674 File Offset: 0x00036874
		public StringLiteral nonEmptyString()
		{
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0 && (stringLiteral.Value == null || stringLiteral.Value.Length == 0))
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46063", stringLiteral, TSqlParserResource.SQL46063Message, new string[0]);
			}
			return stringLiteral;
		}

		// Token: 0x06000B67 RID: 2919 RVA: 0x000386C4 File Offset: 0x000368C4
		public MemoryUnit memUnit()
		{
			MemoryUnit memoryUnit = MemoryUnit.Unspecified;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				memoryUnit = MemoryUnitsHelper.Instance.ParseOption(token);
			}
			return memoryUnit;
		}

		// Token: 0x06000B68 RID: 2920 RVA: 0x00038704 File Offset: 0x00036904
		public DatabaseOption createDbServiceBrokerOption()
		{
			DatabaseOption databaseOption = base.FragmentFactory.CreateFragment<DatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				switch (ServiceBrokerOptionsHelper.Instance.ParseOption(token))
				{
				case ServiceBrokerOption.EnableBroker:
					databaseOption.OptionKind = DatabaseOptionKind.EnableBroker;
					break;
				case ServiceBrokerOption.NewBroker:
					databaseOption.OptionKind = DatabaseOptionKind.NewBroker;
					break;
				case ServiceBrokerOption.ErrorBrokerConversations:
					databaseOption.OptionKind = DatabaseOptionKind.ErrorBrokerConversations;
					break;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
			}
			return databaseOption;
		}

		// Token: 0x06000B69 RID: 2921 RVA: 0x00038788 File Offset: 0x00036988
		public DatabaseOption restrictedUserCreateDbOption()
		{
			DatabaseOption databaseOption = base.FragmentFactory.CreateFragment<DatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RESTRICTED_USER");
				databaseOption.OptionKind = DatabaseOptionKind.RestrictedUser;
				TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
			}
			return databaseOption;
		}

		// Token: 0x06000B6A RID: 2922 RVA: 0x000387E0 File Offset: 0x000369E0
		public OnOffDatabaseOption createDbOnOffOption()
		{
			OnOffDatabaseOption onOffDatabaseOption = base.FragmentFactory.CreateFragment<OnOffDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			OptionState optionState = this.optionOnOff(onOffDatabaseOption);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "DB_CHAINING"))
				{
					onOffDatabaseOption.OptionKind = DatabaseOptionKind.DBChaining;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "TRUSTWORTHY");
					onOffDatabaseOption.OptionKind = DatabaseOptionKind.Trustworthy;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(onOffDatabaseOption, token);
				onOffDatabaseOption.OptionState = optionState;
			}
			return onOffDatabaseOption;
		}

		// Token: 0x06000B6B RID: 2923 RVA: 0x0003885C File Offset: 0x00036A5C
		public FileStreamDatabaseOption fileStreamCreateAlterDbOption()
		{
			FileStreamDatabaseOption fileStreamDatabaseOption = base.FragmentFactory.CreateFragment<FileStreamDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILESTREAM");
				fileStreamDatabaseOption.OptionKind = DatabaseOptionKind.FileStream;
				TSql80ParserBaseInternal.UpdateTokenInfo(fileStreamDatabaseOption, token);
			}
			this.fileStreamOption(fileStreamDatabaseOption);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.fileStreamOption(fileStreamDatabaseOption);
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fileStreamDatabaseOption, token2);
			}
			return fileStreamDatabaseOption;
		}

		// Token: 0x06000B6C RID: 2924 RVA: 0x00038910 File Offset: 0x00036B10
		public DatabaseOption createAlterDbEqualsSignOption()
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 103:
			case 105:
				return this.createAlterDbOnOffOption(token);
			case 104:
				break;
			default:
				if (num == 221)
				{
					return this.createAlterDbLiteralOption(token);
				}
				switch (num)
				{
				case 232:
				case 233:
					return this.createAlterDbIdentifierOption(token);
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B6D RID: 2925 RVA: 0x000389AC File Offset: 0x00036BAC
		public LiteralDatabaseOption createAlterDbLiteralOption(IToken tOption)
		{
			LiteralDatabaseOption literalDatabaseOption = base.FragmentFactory.CreateFragment<LiteralDatabaseOption>();
			IntegerLiteral integerLiteral = this.integer();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(tOption, "DEFAULT_LANGUAGE"))
				{
					literalDatabaseOption.OptionKind = DatabaseOptionKind.DefaultLanguage;
					TSql80ParserBaseInternal.CheckIfValidLanguageInteger(integerLiteral);
				}
				else if (TSql80ParserBaseInternal.TryMatch(tOption, "DEFAULT_FULLTEXT_LANGUAGE"))
				{
					literalDatabaseOption.OptionKind = DatabaseOptionKind.DefaultFullTextLanguage;
					TSql80ParserBaseInternal.CheckIfValidLanguageInteger(integerLiteral);
				}
				else
				{
					TSql80ParserBaseInternal.Match(tOption, "TWO_DIGIT_YEAR_CUTOFF");
					literalDatabaseOption.OptionKind = DatabaseOptionKind.TwoDigitYearCutoff;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(literalDatabaseOption, tOption);
				literalDatabaseOption.Value = integerLiteral;
			}
			return literalDatabaseOption;
		}

		// Token: 0x06000B6E RID: 2926 RVA: 0x00038A38 File Offset: 0x00036C38
		public IdentifierDatabaseOption createAlterDbIdentifierOption(IToken tOption)
		{
			IdentifierDatabaseOption identifierDatabaseOption = base.FragmentFactory.CreateFragment<IdentifierDatabaseOption>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(tOption, "DEFAULT_LANGUAGE"))
				{
					identifierDatabaseOption.OptionKind = DatabaseOptionKind.DefaultLanguage;
					TSql80ParserBaseInternal.CheckIfValidLanguageIdentifier(identifier);
				}
				else
				{
					TSql80ParserBaseInternal.Match(tOption, "DEFAULT_FULLTEXT_LANGUAGE");
					identifierDatabaseOption.OptionKind = DatabaseOptionKind.DefaultFullTextLanguage;
					TSql80ParserBaseInternal.CheckIfValidLanguageIdentifier(identifier);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(identifierDatabaseOption, tOption);
				identifierDatabaseOption.Value = identifier;
			}
			return identifierDatabaseOption;
		}

		// Token: 0x06000B6F RID: 2927 RVA: 0x00038AAC File Offset: 0x00036CAC
		public OnOffDatabaseOption createAlterDbOnOffOption(IToken tOption)
		{
			OnOffDatabaseOption onOffDatabaseOption = base.FragmentFactory.CreateFragment<OnOffDatabaseOption>();
			OptionState optionState = this.optionOnOff(onOffDatabaseOption);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(tOption, "NESTED_TRIGGERS"))
				{
					onOffDatabaseOption.OptionKind = DatabaseOptionKind.NestedTriggers;
				}
				else
				{
					TSql80ParserBaseInternal.Match(tOption, "TRANSFORM_NOISE_WORDS");
					onOffDatabaseOption.OptionKind = DatabaseOptionKind.TransformNoiseWords;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(onOffDatabaseOption, tOption);
				onOffDatabaseOption.OptionState = optionState;
			}
			return onOffDatabaseOption;
		}

		// Token: 0x06000B70 RID: 2928 RVA: 0x00038B14 File Offset: 0x00036D14
		public void fileStreamOption(FileStreamDatabaseOption vParent)
		{
			NonTransactedFileStreamAccess? nonTransactedFileStreamAccess = default(NonTransactedFileStreamAccess?);
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			if (num <= 100)
			{
				if (num != 72)
				{
					if (num != 100)
					{
						goto IL_01CD;
					}
					goto IL_017A;
				}
			}
			else if (num != 103)
			{
				switch (num)
				{
				case 230:
				case 231:
					goto IL_017A;
				case 232:
					break;
				default:
					goto IL_01CD;
				}
			}
			int num2 = this.LA(1);
			if (num2 != 72)
			{
				if (num2 != 103)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "READ_ONLY");
						nonTransactedFileStreamAccess = new NonTransactedFileStreamAccess?(NonTransactedFileStreamAccess.ReadOnly);
					}
				}
				else
				{
					this.match(103);
					if (this.inputState.guessing == 0)
					{
						nonTransactedFileStreamAccess = new NonTransactedFileStreamAccess?(NonTransactedFileStreamAccess.Off);
					}
				}
			}
			else
			{
				this.match(72);
				if (this.inputState.guessing == 0)
				{
					nonTransactedFileStreamAccess = new NonTransactedFileStreamAccess?(NonTransactedFileStreamAccess.Full);
				}
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NON_TRANSACTED_ACCESS");
				if (vParent.NonTransactedAccess != null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46049", token, TSqlParserResource.SQL46049Message, new string[] { token.getText() });
				}
				vParent.NonTransactedAccess = new NonTransactedFileStreamAccess?(nonTransactedFileStreamAccess.Value);
				return;
			}
			return;
			IL_017A:
			Literal literal = this.stringLiteralOrNull();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "DIRECTORY_NAME");
				if (vParent.DirectoryName != null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46049", token, TSqlParserResource.SQL46049Message, new string[] { token.getText() });
				}
				vParent.DirectoryName = literal;
				return;
			}
			return;
			IL_01CD:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B71 RID: 2929 RVA: 0x00038D04 File Offset: 0x00036F04
		public Literal stringLiteralOrNull()
		{
			int num = this.LA(1);
			Literal literal;
			if (num != 100)
			{
				switch (num)
				{
				case 230:
				case 231:
					literal = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				literal = this.nullLiteral();
			}
			return literal;
		}

		// Token: 0x06000B72 RID: 2930 RVA: 0x00038D5C File Offset: 0x00036F5C
		public AuditSpecificationPart createAuditSpecificationDetailDb()
		{
			AuditSpecificationPart auditSpecificationPart = base.FragmentFactory.CreateFragment<AuditSpecificationPart>();
			IToken token = this.LT(1);
			this.match(4);
			this.match(191);
			AuditSpecificationDetail auditSpecificationDetail;
			if (TSql110ParserInternal.tokenSet_50_.member(this.LA(1)) && (this.LA(2) == 105 || this.LA(2) == 198))
			{
				auditSpecificationDetail = this.auditActionSpecification();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 192)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				auditSpecificationDetail = this.databaseAuditActionGroup();
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				auditSpecificationPart.Details = auditSpecificationDetail;
				auditSpecificationPart.IsDrop = false;
				TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token2);
			}
			return auditSpecificationPart;
		}

		// Token: 0x06000B73 RID: 2931 RVA: 0x00038E40 File Offset: 0x00037040
		public AuditActionSpecification auditActionSpecification()
		{
			AuditActionSpecification auditActionSpecification = base.FragmentFactory.CreateFragment<AuditActionSpecification>();
			DatabaseAuditAction databaseAuditAction = this.actionWithQual();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseAuditAction>(auditActionSpecification, auditActionSpecification.Actions, databaseAuditAction);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				databaseAuditAction = this.actionWithQual();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseAuditAction>(auditActionSpecification, auditActionSpecification.Actions, databaseAuditAction);
				}
			}
			SecurityTargetObject securityTargetObject = this.securityTargetObject(true);
			if (this.inputState.guessing == 0)
			{
				auditActionSpecification.TargetObject = securityTargetObject;
			}
			this.match(18);
			SecurityPrincipal securityPrincipal = this.principal();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SecurityPrincipal>(auditActionSpecification, auditActionSpecification.Principals, securityPrincipal);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				securityPrincipal = this.principal();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SecurityPrincipal>(auditActionSpecification, auditActionSpecification.Principals, securityPrincipal);
				}
			}
			return auditActionSpecification;
		}

		// Token: 0x06000B74 RID: 2932 RVA: 0x00038F38 File Offset: 0x00037138
		public AuditActionGroupReference databaseAuditActionGroup()
		{
			AuditActionGroupReference auditActionGroupReference = base.FragmentFactory.CreateFragment<AuditActionGroupReference>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				auditActionGroupReference.Group = DatabaseAuditActionGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
				TSql80ParserBaseInternal.UpdateTokenInfo(auditActionGroupReference, token);
			}
			return auditActionGroupReference;
		}

		// Token: 0x06000B75 RID: 2933 RVA: 0x00038F90 File Offset: 0x00037190
		public AuditActionGroupReference serverAuditActionGroup()
		{
			AuditActionGroupReference auditActionGroupReference = base.FragmentFactory.CreateFragment<AuditActionGroupReference>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				auditActionGroupReference.Group = ServerAuditActionGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
				TSql80ParserBaseInternal.UpdateTokenInfo(auditActionGroupReference, token);
			}
			return auditActionGroupReference;
		}

		// Token: 0x06000B76 RID: 2934 RVA: 0x00038FE8 File Offset: 0x000371E8
		public DatabaseAuditAction actionWithQual()
		{
			DatabaseAuditAction databaseAuditAction = base.FragmentFactory.CreateFragment<DatabaseAuditAction>();
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num != 48)
				{
					if (num != 61)
					{
						if (num == 86)
						{
							IToken token = this.LT(1);
							this.match(86);
							if (this.inputState.guessing == 0)
							{
								databaseAuditAction.ActionKind = DatabaseAuditActionKind.Insert;
								TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token);
								return databaseAuditAction;
							}
							return databaseAuditAction;
						}
					}
					else
					{
						IToken token2 = this.LT(1);
						this.match(61);
						if (this.inputState.guessing == 0)
						{
							databaseAuditAction.ActionKind = DatabaseAuditActionKind.Execute;
							TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token2);
							return databaseAuditAction;
						}
						return databaseAuditAction;
					}
				}
				else
				{
					IToken token3 = this.LT(1);
					this.match(48);
					if (this.inputState.guessing == 0)
					{
						databaseAuditAction.ActionKind = DatabaseAuditActionKind.Delete;
						TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token3);
						return databaseAuditAction;
					}
					return databaseAuditAction;
				}
			}
			else if (num <= 140)
			{
				if (num != 127)
				{
					if (num == 140)
					{
						IToken token4 = this.LT(1);
						this.match(140);
						if (this.inputState.guessing == 0)
						{
							databaseAuditAction.ActionKind = DatabaseAuditActionKind.Select;
							TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token4);
							return databaseAuditAction;
						}
						return databaseAuditAction;
					}
				}
				else
				{
					IToken token5 = this.LT(1);
					this.match(127);
					if (this.inputState.guessing == 0)
					{
						databaseAuditAction.ActionKind = DatabaseAuditActionKind.References;
						TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token5);
						return databaseAuditAction;
					}
					return databaseAuditAction;
				}
			}
			else if (num != 160)
			{
				if (num == 232)
				{
					IToken token6 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token6, "RECEIVE");
						databaseAuditAction.ActionKind = DatabaseAuditActionKind.Receive;
						TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token6);
						return databaseAuditAction;
					}
					return databaseAuditAction;
				}
			}
			else
			{
				IToken token7 = this.LT(1);
				this.match(160);
				if (this.inputState.guessing == 0)
				{
					databaseAuditAction.ActionKind = DatabaseAuditActionKind.Update;
					TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token7);
					return databaseAuditAction;
				}
				return databaseAuditAction;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B77 RID: 2935 RVA: 0x00039208 File Offset: 0x00037408
		public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed)
		{
			SecurityTargetObject securityTargetObject = base.FragmentFactory.CreateFragment<SecurityTargetObject>();
			this.securityTargetObjectCommon(securityTargetObject);
			int num = this.LA(1);
			if (num <= 71)
			{
				if (num == 18 || num == 71)
				{
					return securityTargetObject;
				}
			}
			else
			{
				if (num == 151)
				{
					return securityTargetObject;
				}
				if (num == 191)
				{
					this.columnNameList(securityTargetObject, securityTargetObject.Columns);
					if (this.inputState.guessing == 0 && vColumnsDisallowed)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(securityTargetObject.Columns[0]);
						return securityTargetObject;
					}
					return securityTargetObject;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B78 RID: 2936 RVA: 0x00039298 File Offset: 0x00037498
		public SecurityPrincipal principal()
		{
			SecurityPrincipal securityPrincipal = base.FragmentFactory.CreateFragment<SecurityPrincipal>();
			int num = this.LA(1);
			if (num != 100)
			{
				if (num != 122)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							securityPrincipal.PrincipalType = PrincipalType.Identifier;
							securityPrincipal.Identifier = identifier;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					IToken token = this.LT(1);
					this.match(122);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(securityPrincipal, token);
						securityPrincipal.PrincipalType = PrincipalType.Public;
					}
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(100);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(securityPrincipal, token2);
					securityPrincipal.PrincipalType = PrincipalType.Null;
				}
			}
			return securityPrincipal;
		}

		// Token: 0x06000B79 RID: 2937 RVA: 0x00039374 File Offset: 0x00037574
		public BackupCertificateStatement backupCertificateStatement()
		{
			BackupCertificateStatement backupCertificateStatement = base.FragmentFactory.CreateFragment<BackupCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			this.match(151);
			this.match(65);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				backupCertificateStatement.Name = identifier;
				backupCertificateStatement.File = literal;
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				this.privateKeySpec(backupCertificateStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return backupCertificateStatement;
		}

		// Token: 0x06000B7A RID: 2938 RVA: 0x00039460 File Offset: 0x00037660
		public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement()
		{
			BackupServiceMasterKeyStatement backupServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<BackupServiceMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
			}
			this.backupMasterKeyBody(backupServiceMasterKeyStatement);
			return backupServiceMasterKeyStatement;
		}

		// Token: 0x06000B7B RID: 2939 RVA: 0x000394B0 File Offset: 0x000376B0
		public BackupMasterKeyStatement backupMasterKeyStatement()
		{
			BackupMasterKeyStatement backupMasterKeyStatement = base.FragmentFactory.CreateFragment<BackupMasterKeyStatement>();
			this.backupMasterKeyBody(backupMasterKeyStatement);
			return backupMasterKeyStatement;
		}

		// Token: 0x06000B7C RID: 2940 RVA: 0x000394D4 File Offset: 0x000376D4
		public BackupStatement backupStatement()
		{
			BackupStatement backupStatement = this.backupMain();
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_0278;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0278;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_0278;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_0278;
						default:
							if (num == 28)
							{
								goto IL_0278;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0278;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0278;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0278;
						default:
							if (num == 82)
							{
								goto IL_0278;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_0278;
				}
			}
			else if (num <= 172)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						goto IL_0278;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0278;
					}
				}
				else
				{
					if (num == 151)
					{
						this.backupDevices(backupStatement);
						goto IL_0278;
					}
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_0278;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_0278;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_0278;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0278;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0278;
				default:
					if (num == 232)
					{
						goto IL_0278;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0278:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.backupOptions(backupStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return backupStatement;
		}

		// Token: 0x06000B7D RID: 2941 RVA: 0x000397B8 File Offset: 0x000379B8
		public BackupStatement backupMain()
		{
			int num = this.LA(1);
			BackupStatement backupStatement;
			if (num != 43)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				backupStatement = this.backupTransactionLog();
			}
			else
			{
				backupStatement = this.backupDatabase();
			}
			return backupStatement;
		}

		// Token: 0x06000B7E RID: 2942 RVA: 0x00039804 File Offset: 0x00037A04
		public void backupDevices(BackupStatement vParent)
		{
			this.match(151);
			this.devList(vParent, vParent.Devices);
			while (this.LA(1) == 232 && this.LA(2) == 151)
			{
				MirrorToClause mirrorToClause = this.mirrorTo();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<MirrorToClause>(vParent, vParent.MirrorToClauses, mirrorToClause);
				}
			}
		}

		// Token: 0x06000B7F RID: 2943 RVA: 0x00039868 File Offset: 0x00037A68
		public void backupOptions(BackupStatement vParent)
		{
			this.match(171);
			BackupOption backupOption = this.backupOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupOption>(vParent, vParent.Options, backupOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				backupOption = this.backupOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupOption>(vParent, vParent.Options, backupOption);
				}
			}
		}

		// Token: 0x06000B80 RID: 2944 RVA: 0x000398E0 File Offset: 0x00037AE0
		public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement()
		{
			RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<RestoreServiceMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
			}
			this.restoreMasterKeyBody(restoreServiceMasterKeyStatement);
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FORCE");
					restoreServiceMasterKeyStatement.IsForce = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(restoreServiceMasterKeyStatement, token2);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return restoreServiceMasterKeyStatement;
		}

		// Token: 0x06000B81 RID: 2945 RVA: 0x000399C8 File Offset: 0x00037BC8
		public RestoreMasterKeyStatement restoreMasterKeyStatement()
		{
			RestoreMasterKeyStatement restoreMasterKeyStatement = base.FragmentFactory.CreateFragment<RestoreMasterKeyStatement>();
			this.restoreMasterKeyBody(restoreMasterKeyStatement);
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token2, "PASSWORD");
				restoreMasterKeyStatement.EncryptionPassword = literal;
			}
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FORCE");
					restoreMasterKeyStatement.IsForce = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(restoreMasterKeyStatement, token3);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return restoreMasterKeyStatement;
		}

		// Token: 0x06000B82 RID: 2946 RVA: 0x00039AF0 File Offset: 0x00037CF0
		public RestoreStatement restoreStatement()
		{
			RestoreStatement restoreStatement = base.FragmentFactory.CreateFragment<RestoreStatement>();
			if ((this.LA(1) == 43 || this.LA(1) == 232) && this.LA(2) >= 232 && this.LA(2) <= 234)
			{
				this.restoreMain(restoreStatement);
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 28)
					{
						if (num <= 6)
						{
							if (num == 1)
							{
								goto IL_0358;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_0358;
							}
						}
						else
						{
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_0358;
							case 14:
							case 16:
								break;
							default:
								switch (num)
								{
								case 22:
								case 23:
									goto IL_0358;
								default:
									if (num == 28)
									{
										goto IL_0358;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num <= 75)
					{
						switch (num)
						{
						case 33:
						case 35:
							goto IL_0358;
						case 34:
							break;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_0358;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								break;
							default:
								switch (num)
								{
								case 71:
									this.match(71);
									this.devList(restoreStatement, restoreStatement.Devices);
									goto IL_0358;
								case 74:
								case 75:
									goto IL_0358;
								}
								break;
							}
							break;
						}
					}
					else if (num == 82 || num == 86 || num == 92)
					{
						goto IL_0358;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num == 95 || num == 106 || num == 119)
						{
							goto IL_0358;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_0358;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_0358;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_0358;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num == 176 || num == 182 || num == 191)
					{
						goto IL_0358;
					}
				}
				else
				{
					if (num == 204)
					{
						goto IL_0358;
					}
					switch (num)
					{
					case 219:
					case 220:
						goto IL_0358;
					default:
						if (num == 232)
						{
							goto IL_0358;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) != 232 || this.LA(2) != 71)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token = this.LT(1);
			this.match(232);
			this.match(71);
			this.devList(restoreStatement, restoreStatement.Devices);
			if (this.inputState.guessing == 0)
			{
				restoreStatement.Kind = RestoreStatementKindsHelper.Instance.ParseOption(token);
			}
			IL_0358:
			if (this.LA(1) == 171 && (this.LA(2) == 65 || this.LA(2) == 232))
			{
				this.restoreOptions(restoreStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return restoreStatement;
		}

		// Token: 0x06000B83 RID: 2947 RVA: 0x00039EC0 File Offset: 0x000380C0
		public void restoreMain(RestoreStatement vParent)
		{
			int num = this.LA(1);
			IdentifierOrValueExpression identifierOrValueExpression;
			if (num == 43)
			{
				this.match(43);
				identifierOrValueExpression = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					vParent.DatabaseName = identifierOrValueExpression;
					vParent.Kind = RestoreStatementKind.Database;
					base.ThrowPartialAstIfPhaseOne(vParent);
				}
				this.restoreFileListOpt(vParent);
				return;
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token = this.LT(1);
			this.match(232);
			identifierOrValueExpression = this.identifierOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOG");
				vParent.DatabaseName = identifierOrValueExpression;
				vParent.Kind = RestoreStatementKind.TransactionLog;
				base.ThrowPartialAstIfPhaseOne(vParent);
			}
			this.restoreFileListOpt(vParent);
		}

		// Token: 0x06000B84 RID: 2948 RVA: 0x00039F84 File Offset: 0x00038184
		public void devList(TSqlFragment vParent, IList<DeviceInfo> deviceInfos)
		{
			DeviceInfo deviceInfo = this.deviceInfo();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeviceInfo>(vParent, deviceInfos, deviceInfo);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				deviceInfo = this.deviceInfo();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeviceInfo>(vParent, deviceInfos, deviceInfo);
				}
			}
		}

		// Token: 0x06000B85 RID: 2949 RVA: 0x00039FE4 File Offset: 0x000381E4
		public void restoreOptions(RestoreStatement vParent)
		{
			this.match(171);
			this.restoreOptionsList(vParent);
		}

		// Token: 0x06000B86 RID: 2950 RVA: 0x00039FF8 File Offset: 0x000381F8
		public BackupDatabaseStatement backupDatabase()
		{
			BackupDatabaseStatement backupDatabaseStatement = base.FragmentFactory.CreateFragment<BackupDatabaseStatement>();
			this.match(43);
			IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
			if (this.inputState.guessing == 0)
			{
				backupDatabaseStatement.DatabaseName = identifierOrValueExpression;
				base.ThrowPartialAstIfPhaseOne(backupDatabaseStatement);
			}
			this.backupFileListOpt(backupDatabaseStatement);
			return backupDatabaseStatement;
		}

		// Token: 0x06000B87 RID: 2951 RVA: 0x0003A044 File Offset: 0x00038244
		public BackupTransactionLogStatement backupTransactionLog()
		{
			BackupTransactionLogStatement backupTransactionLogStatement = base.FragmentFactory.CreateFragment<BackupTransactionLogStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOG");
				backupTransactionLogStatement.DatabaseName = identifierOrValueExpression;
				base.ThrowPartialAstIfPhaseOne(backupTransactionLogStatement);
			}
			return backupTransactionLogStatement;
		}

		// Token: 0x06000B88 RID: 2952 RVA: 0x0003A0A0 File Offset: 0x000382A0
		public IdentifierOrValueExpression identifierOrVariable()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			switch (this.LA(1))
			{
			case 232:
			case 233:
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.Identifier = identifier;
				}
				break;
			}
			case 234:
			{
				ValueExpression valueExpression = this.variable();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = valueExpression;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierOrValueExpression;
		}

		// Token: 0x06000B89 RID: 2953 RVA: 0x0003A12C File Offset: 0x0003832C
		public void backupFileListOpt(BackupDatabaseStatement vParent)
		{
			if ((this.LA(1) == 65 || this.LA(1) == 232) && TSql110ParserInternal.tokenSet_53_.member(this.LA(2)))
			{
				BackupRestoreFileInfo backupRestoreFileInfo = this.backupRestoreFile();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, backupRestoreFileInfo);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					backupRestoreFileInfo = this.backupRestoreFile();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, backupRestoreFileInfo);
					}
				}
				return;
			}
			if (TSql110ParserInternal.tokenSet_54_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B8A RID: 2954 RVA: 0x0003A1FC File Offset: 0x000383FC
		public BackupRestoreFileInfo backupRestoreFile()
		{
			BackupRestoreFileInfo backupRestoreFileInfo = base.FragmentFactory.CreateFragment<BackupRestoreFileInfo>();
			if (this.LA(1) == 65)
			{
				this.LT(1);
				this.match(65);
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.Files;
				}
				int num = this.LA(1);
				if (num != 191)
				{
					switch (num)
					{
					case 230:
					case 231:
					case 234:
					{
						ValueExpression valueExpression = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(backupRestoreFileInfo, backupRestoreFileInfo.Items, valueExpression);
							return backupRestoreFileInfo;
						}
						return backupRestoreFileInfo;
					}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.backupRestoreFileNameList(backupRestoreFileInfo);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				int num2 = this.LA(1);
				if (num2 != 191)
				{
					switch (num2)
					{
					case 230:
					case 231:
					case 234:
					{
						ValueExpression valueExpression = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							if (TSql80ParserBaseInternal.TryMatch(token, "PAGE"))
							{
								backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.Page;
							}
							else
							{
								TSql80ParserBaseInternal.Match(token, "FILEGROUP");
								backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.FileGroups;
							}
							TSql80ParserBaseInternal.UpdateTokenInfo(backupRestoreFileInfo, token);
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(backupRestoreFileInfo, backupRestoreFileInfo.Items, valueExpression);
							return backupRestoreFileInfo;
						}
						return backupRestoreFileInfo;
					}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.backupRestoreFileNameList(backupRestoreFileInfo);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "FILEGROUP");
					backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.FileGroups;
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_55_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "READ_WRITE_FILEGROUPS");
					backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.ReadWriteFileGroups;
					TSql80ParserBaseInternal.UpdateTokenInfo(backupRestoreFileInfo, token2);
				}
			}
			return backupRestoreFileInfo;
		}

		// Token: 0x06000B8B RID: 2955 RVA: 0x0003A454 File Offset: 0x00038654
		public void restoreFileListOpt(RestoreStatement vParent)
		{
			if ((this.LA(1) == 65 || this.LA(1) == 232) && TSql110ParserInternal.tokenSet_56_.member(this.LA(2)))
			{
				BackupRestoreFileInfo backupRestoreFileInfo = this.backupRestoreFile();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, backupRestoreFileInfo);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					backupRestoreFileInfo = this.backupRestoreFile();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, backupRestoreFileInfo);
					}
				}
				return;
			}
			if (TSql110ParserInternal.tokenSet_57_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B8C RID: 2956 RVA: 0x0003A524 File Offset: 0x00038724
		public ValueExpression stringOrVariable()
		{
			switch (this.LA(1))
			{
			case 230:
			case 231:
				return this.stringLiteral();
			case 234:
				return this.variable();
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000B8D RID: 2957 RVA: 0x0003A584 File Offset: 0x00038784
		public void backupRestoreFileNameList(BackupRestoreFileInfo vParent)
		{
			this.LT(1);
			this.match(191);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(vParent, vParent.Items, valueExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				valueExpression = this.stringOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(vParent, vParent.Items, valueExpression);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000B8E RID: 2958 RVA: 0x0003A62C File Offset: 0x0003882C
		public MirrorToClause mirrorTo()
		{
			MirrorToClause mirrorToClause = base.FragmentFactory.CreateFragment<MirrorToClause>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(151);
			this.devList(mirrorToClause, mirrorToClause.Devices);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MIRROR");
			}
			return mirrorToClause;
		}

		// Token: 0x06000B8F RID: 2959 RVA: 0x0003A68C File Offset: 0x0003888C
		public DeviceInfo deviceInfo()
		{
			DeviceInfo deviceInfo = base.FragmentFactory.CreateFragment<DeviceInfo>();
			if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
			{
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					deviceInfo.LogicalDevice = identifierOrValueExpression;
				}
			}
			else
			{
				if ((this.LA(1) != 173 && this.LA(1) != 232) || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				int num = this.LA(1);
				if (num != 173)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						deviceInfo.DeviceType = DeviceTypesHelper.Instance.ParseOption(token);
					}
				}
				else
				{
					this.match(173);
					if (this.inputState.guessing == 0)
					{
						deviceInfo.DeviceType = DeviceType.Disk;
					}
				}
				this.match(206);
				ValueExpression valueExpression = this.stringOrVariable();
				if (this.inputState.guessing == 0)
				{
					deviceInfo.PhysicalDevice = valueExpression;
				}
			}
			return deviceInfo;
		}

		// Token: 0x06000B90 RID: 2960 RVA: 0x0003A7E8 File Offset: 0x000389E8
		public BackupOption backupOption()
		{
			BackupOption backupOption = base.FragmentFactory.CreateFragment<BackupOption>();
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					backupOption.OptionKind = BackupOptionsNoValueHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
					TSql80ParserBaseInternal.UpdateTokenInfo(backupOption, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				int num = this.LA(1);
				ScalarExpression scalarExpression;
				if (num != 199 && num != 221)
				{
					switch (num)
					{
					case 230:
					case 231:
						scalarExpression = this.stringLiteral();
						goto IL_0115;
					case 234:
						goto IL_00F0;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IL_00F0:
				scalarExpression = this.signedIntegerOrVariable();
				IL_0115:
				if (this.inputState.guessing == 0)
				{
					backupOption.OptionKind = BackupOptionsWithValueHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql110);
					backupOption.Value = scalarExpression;
				}
			}
			return backupOption;
		}

		// Token: 0x06000B91 RID: 2961 RVA: 0x0003A948 File Offset: 0x00038B48
		public ScalarExpression signedIntegerOrVariable()
		{
			int num = this.LA(1);
			ScalarExpression scalarExpression;
			if (num != 199 && num != 221)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				scalarExpression = this.variable();
			}
			else
			{
				scalarExpression = this.signedInteger();
			}
			return scalarExpression;
		}

		// Token: 0x06000B92 RID: 2962 RVA: 0x0003A9A0 File Offset: 0x00038BA0
		public void restoreOptionsList(RestoreStatement vParent)
		{
			RestoreOption restoreOption = this.restoreOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RestoreOption>(vParent, vParent.Options, restoreOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				restoreOption = this.restoreOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RestoreOption>(vParent, vParent.Options, restoreOption);
				}
			}
		}

		// Token: 0x06000B93 RID: 2963 RVA: 0x0003AA0C File Offset: 0x00038C0C
		public RestoreOption restoreOption()
		{
			RestoreOption restoreOption = null;
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("FILESTREAM"))
			{
				restoreOption = this.fileStreamRestoreOption();
			}
			else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
			{
				restoreOption = this.simpleRestoreOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				if ((this.LA(1) == 230 || this.LA(1) == 231 || this.LA(1) == 234) && this.LA(2) == 232 && TSql80ParserBaseInternal.IsStopAtBeforeMarkRestoreOption(token))
				{
					ValueExpression valueExpression = this.stringOrVariable();
					ValueExpression valueExpression2 = this.afterClause();
					if (this.inputState.guessing == 0)
					{
						restoreOption = base.CreateStopRestoreOption(token, valueExpression, valueExpression2);
					}
				}
				else if (this.LA(1) == 199 || this.LA(1) == 221)
				{
					ScalarExpression scalarExpression = this.signedInteger();
					if (this.inputState.guessing == 0)
					{
						restoreOption = base.CreateSimpleRestoreOptionWithValue(token, scalarExpression);
					}
				}
				else
				{
					if ((this.LA(1) != 230 && this.LA(1) != 231 && this.LA(1) != 234) || !TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					ValueExpression valueExpression = this.stringOrVariable();
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.IsStopAtBeforeMarkRestoreOption(token))
						{
							restoreOption = base.CreateStopRestoreOption(token, valueExpression, null);
						}
						else
						{
							restoreOption = base.CreateSimpleRestoreOptionWithValue(token, valueExpression);
						}
					}
				}
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 230 || this.LA(2) == 231 || this.LA(2) == 234))
			{
				restoreOption = this.moveRestoreOption();
			}
			else
			{
				if (this.LA(1) != 65)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				restoreOption = this.fileRestoreOption();
			}
			return restoreOption;
		}

		// Token: 0x06000B94 RID: 2964 RVA: 0x0003AC64 File Offset: 0x00038E64
		public FileStreamRestoreOption fileStreamRestoreOption()
		{
			FileStreamRestoreOption fileStreamRestoreOption = base.FragmentFactory.CreateFragment<FileStreamRestoreOption>();
			FileStreamDatabaseOption fileStreamDatabaseOption = this.fileStreamCreateAlterDbOption();
			if (this.inputState.guessing == 0)
			{
				fileStreamRestoreOption.OptionKind = RestoreOptionKind.FileStream;
				fileStreamRestoreOption.FileStreamOption = fileStreamDatabaseOption;
			}
			return fileStreamRestoreOption;
		}

		// Token: 0x06000B95 RID: 2965 RVA: 0x0003ACA4 File Offset: 0x00038EA4
		public RestoreOption simpleRestoreOption()
		{
			RestoreOption restoreOption = base.FragmentFactory.CreateFragment<RestoreOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				restoreOption.OptionKind = RestoreOptionNoValueHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
				TSql80ParserBaseInternal.UpdateTokenInfo(restoreOption, token);
			}
			return restoreOption;
		}

		// Token: 0x06000B96 RID: 2966 RVA: 0x0003ACFC File Offset: 0x00038EFC
		public ValueExpression afterClause()
		{
			IToken token = this.LT(1);
			this.match(232);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AFTER");
			}
			return valueExpression;
		}

		// Token: 0x06000B97 RID: 2967 RVA: 0x0003AD40 File Offset: 0x00038F40
		public ScalarExpression signedInteger()
		{
			ScalarExpression scalarExpression = null;
			UnaryExpression unaryExpression = null;
			int num = this.LA(1);
			if (num != 199)
			{
				if (num != 221)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(199);
				if (this.inputState.guessing == 0)
				{
					unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
				}
			}
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				if (unaryExpression == null)
				{
					scalarExpression = literal;
				}
				else
				{
					unaryExpression.Expression = literal;
					scalarExpression = unaryExpression;
				}
			}
			return scalarExpression;
		}

		// Token: 0x06000B98 RID: 2968 RVA: 0x0003ADE4 File Offset: 0x00038FE4
		public MoveRestoreOption moveRestoreOption()
		{
			MoveRestoreOption moveRestoreOption = base.FragmentFactory.CreateFragment<MoveRestoreOption>();
			IToken token = this.LT(1);
			this.match(232);
			ValueExpression valueExpression = this.stringOrVariable();
			this.match(151);
			ValueExpression valueExpression2 = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MOVE");
				moveRestoreOption.OptionKind = RestoreOptionKind.Move;
				moveRestoreOption.LogicalFileName = valueExpression;
				moveRestoreOption.OSFileName = valueExpression2;
			}
			return moveRestoreOption;
		}

		// Token: 0x06000B99 RID: 2969 RVA: 0x0003AE5C File Offset: 0x0003905C
		public ScalarExpressionRestoreOption fileRestoreOption()
		{
			ScalarExpressionRestoreOption scalarExpressionRestoreOption = base.FragmentFactory.CreateFragment<ScalarExpressionRestoreOption>();
			this.match(65);
			this.match(206);
			ScalarExpression scalarExpression = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				scalarExpressionRestoreOption.OptionKind = RestoreOptionKind.File;
				scalarExpressionRestoreOption.Value = scalarExpression;
			}
			return scalarExpressionRestoreOption;
		}

		// Token: 0x06000B9A RID: 2970 RVA: 0x0003AEAC File Offset: 0x000390AC
		public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			this.match(151);
			this.match(65);
			this.match(206);
			Literal literal = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal2 = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				vParent.File = literal;
				TSql80ParserBaseInternal.Match(token2, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
				vParent.Password = literal2;
			}
		}

		// Token: 0x06000B9B RID: 2971 RVA: 0x0003AF80 File Offset: 0x00039180
		public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			this.match(71);
			this.match(65);
			this.match(206);
			Literal literal = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal2 = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				vParent.File = literal;
				TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
				vParent.Password = literal2;
			}
		}

		// Token: 0x06000B9C RID: 2972 RVA: 0x0003B050 File Offset: 0x00039250
		public IdentifierOrValueExpression bulkInsertFrom()
		{
			IdentifierOrValueExpression identifierOrValueExpression = null;
			int num = this.LA(1);
			if (num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
				case 232:
				case 233:
					identifierOrValueExpression = this.stringOrIdentifier();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression = base.IdentifierOrValueExpression(literal);
				}
			}
			return identifierOrValueExpression;
		}

		// Token: 0x06000B9D RID: 2973 RVA: 0x0003B0C8 File Offset: 0x000392C8
		public void bulkInsertOptions(BulkInsertStatement vParent)
		{
			int num = 0;
			this.match(171);
			this.match(191);
			BulkInsertOption bulkInsertOption = this.bulkInsertOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				bulkInsertOption = this.bulkInsertOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000B9E RID: 2974 RVA: 0x0003B190 File Offset: 0x00039390
		public IdentifierOrValueExpression stringOrIdentifier()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = literal;
				}
				break;
			}
			case 232:
			case 233:
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.Identifier = identifier;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierOrValueExpression;
		}

		// Token: 0x06000B9F RID: 2975 RVA: 0x0003B220 File Offset: 0x00039420
		public BulkInsertOption bulkInsertOption()
		{
			BulkInsertOption bulkInsertOption;
			if (this.LA(1) == 113)
			{
				bulkInsertOption = this.bulkInsertSortOrderOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				bulkInsertOption = this.simpleBulkInsertOptionWithValue();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 192 && this.LA(2) != 198))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				bulkInsertOption = this.simpleBulkInsertOptionNoValue();
			}
			return bulkInsertOption;
		}

		// Token: 0x06000BA0 RID: 2976 RVA: 0x0003B2B0 File Offset: 0x000394B0
		public OrderBulkInsertOption bulkInsertSortOrderOption()
		{
			OrderBulkInsertOption orderBulkInsertOption = base.FragmentFactory.CreateFragment<OrderBulkInsertOption>();
			IToken token = this.LT(1);
			this.match(113);
			this.match(191);
			ColumnWithSortOrder columnWithSortOrder = this.columnWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				orderBulkInsertOption.OptionKind = BulkInsertOptionKind.Order;
				TSql80ParserBaseInternal.UpdateTokenInfo(orderBulkInsertOption, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(orderBulkInsertOption, orderBulkInsertOption.Columns, columnWithSortOrder);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnWithSortOrder = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(orderBulkInsertOption, orderBulkInsertOption.Columns, columnWithSortOrder);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(orderBulkInsertOption, token2);
			}
			return orderBulkInsertOption;
		}

		// Token: 0x06000BA1 RID: 2977 RVA: 0x0003B37C File Offset: 0x0003957C
		public LiteralBulkInsertOption simpleBulkInsertOptionWithValue()
		{
			LiteralBulkInsertOption literalBulkInsertOption = base.FragmentFactory.CreateFragment<LiteralBulkInsertOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 221:
			case 222:
			{
				Literal literal = this.integerOrNumeric();
				if (this.inputState.guessing == 0)
				{
					literalBulkInsertOption.OptionKind = BulkInsertIntOptionsHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
					literalBulkInsertOption.Value = literal;
				}
				break;
			}
			default:
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						literalBulkInsertOption.OptionKind = BulkInsertStringOptionsHelper.Instance.ParseOption(token);
						TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
						if (literalBulkInsertOption.OptionKind == BulkInsertOptionKind.CodePage)
						{
							TSql80ParserBaseInternal.MatchString(literal, new string[] { "ACP", "OEM", "RAW" });
						}
						else if (literalBulkInsertOption.OptionKind == BulkInsertOptionKind.DataFileType)
						{
							TSql80ParserBaseInternal.MatchString(literal, new string[] { "CHAR", "NATIVE", "WIDECHAR", "WIDENATIVE", "WIDECHAR_ANSI", "DTS_BUFFERS" });
						}
						literalBulkInsertOption.Value = literal;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				break;
			}
			return literalBulkInsertOption;
		}

		// Token: 0x06000BA2 RID: 2978 RVA: 0x0003B4F8 File Offset: 0x000396F8
		public BulkInsertOption simpleBulkInsertOptionNoValue()
		{
			BulkInsertOption bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				bulkInsertOption.OptionKind = BulkInsertFlagOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
			}
			return bulkInsertOption;
		}

		// Token: 0x06000BA3 RID: 2979 RVA: 0x0003B54C File Offset: 0x0003974C
		public BulkInsertOption insertBulkOption()
		{
			int num = this.LA(1);
			BulkInsertOption bulkInsertOption;
			if (num != 113)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				bulkInsertOption = this.simpleInsertBulkOption();
			}
			else
			{
				bulkInsertOption = this.bulkInsertSortOrderOption();
			}
			return bulkInsertOption;
		}

		// Token: 0x06000BA4 RID: 2980 RVA: 0x0003B598 File Offset: 0x00039798
		public BulkInsertOption simpleInsertBulkOption()
		{
			BulkInsertOption bulkInsertOption = null;
			IToken token = this.LT(1);
			this.match(232);
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				Literal literal = this.integerOrNumeric();
				if (this.inputState.guessing == 0)
				{
					LiteralBulkInsertOption literalBulkInsertOption = base.FragmentFactory.CreateFragment<LiteralBulkInsertOption>();
					TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
					if (TSql80ParserBaseInternal.TryMatch(token, "ROWS_PER_BATCH"))
					{
						literalBulkInsertOption.OptionKind = BulkInsertOptionKind.RowsPerBatch;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "KILOBYTES_PER_BATCH");
						literalBulkInsertOption.OptionKind = BulkInsertOptionKind.KilobytesPerBatch;
					}
					literalBulkInsertOption.Value = literal;
					bulkInsertOption = literalBulkInsertOption;
				}
			}
			else if (this.inputState.guessing == 0)
			{
				bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
				bulkInsertOption.OptionKind = BulkInsertFlagOptionsHelper.Instance.ParseOption(token);
				if (bulkInsertOption.OptionKind == BulkInsertOptionKind.KeepIdentity)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
			}
			return bulkInsertOption;
		}

		// Token: 0x06000BA5 RID: 2981 RVA: 0x0003B6A4 File Offset: 0x000398A4
		public Literal integerOrNumeric()
		{
			Literal literal;
			switch (this.LA(1))
			{
			case 221:
				literal = this.integer();
				break;
			case 222:
				literal = this.numeric();
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literal;
		}

		// Token: 0x06000BA6 RID: 2982 RVA: 0x0003B6F8 File Offset: 0x000398F8
		public void coldefList(InsertBulkStatement vParent)
		{
			this.match(191);
			InsertBulkColumnDefinition insertBulkColumnDefinition = this.coldefItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<InsertBulkColumnDefinition>(vParent, vParent.ColumnDefinitions, insertBulkColumnDefinition);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				insertBulkColumnDefinition = this.coldefItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<InsertBulkColumnDefinition>(vParent, vParent.ColumnDefinitions, insertBulkColumnDefinition);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000BA7 RID: 2983 RVA: 0x0003B798 File Offset: 0x00039998
		public void insertBulkOptions(InsertBulkStatement vParent)
		{
			int num = 0;
			this.match(171);
			this.match(191);
			BulkInsertOption bulkInsertOption = this.insertBulkOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				bulkInsertOption = this.insertBulkOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000BA8 RID: 2984 RVA: 0x0003B860 File Offset: 0x00039A60
		public InsertBulkColumnDefinition coldefItem()
		{
			InsertBulkColumnDefinition insertBulkColumnDefinition = base.FragmentFactory.CreateFragment<InsertBulkColumnDefinition>();
			ColumnDefinitionBase columnDefinitionBase = this.columnDefinitionEx();
			if (this.inputState.guessing == 0)
			{
				insertBulkColumnDefinition.Column = columnDefinitionBase;
			}
			int num = this.LA(1);
			switch (num)
			{
			case 99:
			case 100:
			{
				bool flag = this.nullNotNull(insertBulkColumnDefinition);
				if (this.inputState.guessing == 0)
				{
					insertBulkColumnDefinition.NullNotNull = (flag ? NullNotNull.Null : NullNotNull.NotNull);
				}
				break;
			}
			default:
				if (num != 192 && num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				break;
			}
			return insertBulkColumnDefinition;
		}

		// Token: 0x06000BA9 RID: 2985 RVA: 0x0003B8F8 File Offset: 0x00039AF8
		public ColumnDefinitionBase columnDefinitionEx()
		{
			ColumnDefinitionBase columnDefinitionBase = null;
			if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_58_.member(this.LA(2)))
			{
				columnDefinitionBase = this.columnDefinitionBasic();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_59_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "TIMESTAMP");
					columnDefinitionBase = base.FragmentFactory.CreateFragment<ColumnDefinitionBase>();
					Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
					identifier.SetUnquotedIdentifier("TIMESTAMP");
					columnDefinitionBase.ColumnIdentifier = identifier;
				}
			}
			return columnDefinitionBase;
		}

		// Token: 0x06000BAA RID: 2986 RVA: 0x0003B9D8 File Offset: 0x00039BD8
		public bool nullNotNull(TSqlFragment vParent)
		{
			bool flag = true;
			switch (this.LA(1))
			{
			case 99:
			{
				IToken token = this.LT(1);
				this.match(99);
				if (this.inputState.guessing == 0)
				{
					flag = false;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				}
				break;
			}
			case 100:
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(100);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			return flag;
		}

		// Token: 0x06000BAB RID: 2987 RVA: 0x0003BA68 File Offset: 0x00039C68
		public ColumnWithSortOrder columnWithSortOrder()
		{
			ColumnWithSortOrder columnWithSortOrder = base.FragmentFactory.CreateFragment<ColumnWithSortOrder>();
			ColumnReferenceExpression columnReferenceExpression = this.identifierColumnReferenceExpression();
			if (this.inputState.guessing == 0)
			{
				columnWithSortOrder.Column = columnReferenceExpression;
			}
			int num = this.LA(1);
			if (num <= 50)
			{
				if (num == 10 || num == 50)
				{
					SortOrder sortOrder = this.orderByOption(columnWithSortOrder);
					if (this.inputState.guessing == 0)
					{
						columnWithSortOrder.SortOrder = sortOrder;
						return columnWithSortOrder;
					}
					return columnWithSortOrder;
				}
			}
			else if (num == 192 || num == 198)
			{
				return columnWithSortOrder;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000BAC RID: 2988 RVA: 0x0003BAFC File Offset: 0x00039CFC
		public OrderBulkInsertOption openRowsetBulkOrderHint()
		{
			OrderBulkInsertOption orderBulkInsertOption = this.bulkInsertSortOrderOption();
			int num = this.LA(1);
			if (num != 159)
			{
				if (num != 192 && num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.LT(1);
				this.match(159);
				if (this.inputState.guessing == 0)
				{
					orderBulkInsertOption.IsUnique = true;
				}
			}
			return orderBulkInsertOption;
		}

		// Token: 0x06000BAD RID: 2989 RVA: 0x0003BB70 File Offset: 0x00039D70
		public void dbccNamedLiteralList(DbccStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			int num = this.LA(1);
			if (num <= 193)
			{
				if (num != 100)
				{
					switch (num)
					{
					case 192:
						if (this.inputState.guessing == 0)
						{
							vParent.ParenthesisRequired = true;
							goto IL_012D;
						}
						goto IL_012D;
					case 193:
						break;
					default:
						goto IL_011A;
					}
				}
			}
			else if (num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_011A;
				default:
					goto IL_011A;
				}
			}
			DbccNamedLiteral dbccNamedLiteral = this.dbccNamedLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccNamedLiteral>(vParent, vParent.Literals, dbccNamedLiteral);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				dbccNamedLiteral = this.dbccNamedLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccNamedLiteral>(vParent, vParent.Literals, dbccNamedLiteral);
				}
			}
			goto IL_012D;
			IL_011A:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_012D:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000BAE RID: 2990 RVA: 0x0003BCD1 File Offset: 0x00039ED1
		public void dbccOptions(DbccStatement vParent)
		{
			this.match(171);
			this.dbccOptionsList(vParent);
		}

		// Token: 0x06000BAF RID: 2991 RVA: 0x0003BCE8 File Offset: 0x00039EE8
		public void dbccOptionsList(DbccStatement vParent)
		{
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
			{
				this.dbccOptionsListItems(vParent);
				return;
			}
			if (this.LA(1) == 232 && this.LA(2) == 90)
			{
				this.dbccOptionsJoin(vParent);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000BB0 RID: 2992 RVA: 0x0003BD54 File Offset: 0x00039F54
		public void dbccOptionsListItems(DbccStatement vParent)
		{
			DbccOption dbccOption = this.dbccOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, dbccOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				dbccOption = this.dbccOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, dbccOption);
				}
			}
		}

		// Token: 0x06000BB1 RID: 2993 RVA: 0x0003BDC0 File Offset: 0x00039FC0
		public void dbccOptionsJoin(DbccStatement vParent)
		{
			DbccOption dbccOption = this.dbccJoinOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, dbccOption);
			}
			int num = 0;
			while (this.LA(1) == 90)
			{
				this.match(90);
				dbccOption = this.dbccJoinOption();
				if (this.inputState.guessing == 0)
				{
					vParent.OptionsUseJoin = true;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, dbccOption);
				}
				num++;
			}
			if (num >= 1)
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000BB2 RID: 2994 RVA: 0x0003BE4C File Offset: 0x0003A04C
		public DbccOption dbccOption()
		{
			DbccOption dbccOption = base.FragmentFactory.CreateFragment<DbccOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				dbccOption.OptionKind = DbccOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccOption, token);
			}
			return dbccOption;
		}

		// Token: 0x06000BB3 RID: 2995 RVA: 0x0003BEA4 File Offset: 0x0003A0A4
		public DbccOption dbccJoinOption()
		{
			DbccOption dbccOption = base.FragmentFactory.CreateFragment<DbccOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				dbccOption.OptionKind = DbccJoinOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccOption, token);
			}
			return dbccOption;
		}

		// Token: 0x06000BB4 RID: 2996 RVA: 0x0003BEF8 File Offset: 0x0003A0F8
		public DbccNamedLiteral dbccNamedLiteral()
		{
			DbccNamedLiteral dbccNamedLiteral = base.FragmentFactory.CreateFragment<DbccNamedLiteral>();
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					dbccNamedLiteral.Name = token.getText();
					TSql80ParserBaseInternal.UpdateTokenInfo(dbccNamedLiteral, token);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_60_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_61_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			ScalarExpression scalarExpression = this.possibleNegativeConstantOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				dbccNamedLiteral.Value = scalarExpression;
			}
			return dbccNamedLiteral;
		}

		// Token: 0x06000BB5 RID: 2997 RVA: 0x0003BFC4 File Offset: 0x0003A1C4
		public void endpointOptions(AlterCreateEndpointStatementBase vParent)
		{
			this.endpointOption(vParent);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.endpointOption(vParent);
			}
		}

		// Token: 0x06000BB6 RID: 2998 RVA: 0x0003BFF0 File Offset: 0x0003A1F0
		public void protocolInfo(AlterCreateEndpointStatementBase vParent)
		{
			EndpointProtocolOptions endpointProtocolOptions = EndpointProtocolOptions.None;
			this.match(9);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				vParent.Protocol = EndpointProtocolsHelper.Instance.ParseOption(token);
			}
			this.match(191);
			EndpointProtocolOption endpointProtocolOption = this.protocolOptionsItem(vParent.Protocol, endpointProtocolOptions);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EndpointProtocolOption>(vParent, vParent.ProtocolOptions, endpointProtocolOption);
				endpointProtocolOptions = endpointProtocolOption.Kind;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				endpointProtocolOption = this.protocolOptionsItem(vParent.Protocol, endpointProtocolOptions);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EndpointProtocolOption>(vParent, vParent.ProtocolOptions, endpointProtocolOption);
					endpointProtocolOptions |= endpointProtocolOption.Kind;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000BB7 RID: 2999 RVA: 0x0003C0EC File Offset: 0x0003A2EC
		public void payloadInfo(AlterCreateEndpointStatementBase vParent)
		{
			PayloadOptionKinds payloadOptionKinds = PayloadOptionKinds.None;
			this.match(67);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "DATA_MIRRORING"))
				{
					vParent.EndpointType = EndpointType.DatabaseMirroring;
				}
				else
				{
					vParent.EndpointType = EndpointTypesHelper.Instance.ParseOption(token);
				}
			}
			this.match(191);
			int num = this.LA(1);
			if (num <= 54)
			{
				switch (num)
				{
				case 4:
				case 6:
					break;
				case 5:
					goto IL_012E;
				default:
					if (num != 43 && num != 54)
					{
						goto IL_012E;
					}
					break;
				}
			}
			else if (num != 139)
			{
				if (num == 192)
				{
					goto IL_0141;
				}
				if (num != 232)
				{
					goto IL_012E;
				}
			}
			PayloadOption payloadOption = this.payloadOption(vParent.EndpointType, payloadOptionKinds);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PayloadOption>(vParent, vParent.PayloadOptions, payloadOption);
				payloadOptionKinds = payloadOption.Kind;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				payloadOption = this.payloadOption(vParent.EndpointType, payloadOptionKinds);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PayloadOption>(vParent, vParent.PayloadOptions, payloadOption);
					payloadOptionKinds |= payloadOption.Kind;
				}
			}
			goto IL_0141;
			IL_012E:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0141:
			if (this.inputState.guessing == 0 && vParent.EndpointType == EndpointType.DatabaseMirroring && (payloadOptionKinds & PayloadOptionKinds.Role) != PayloadOptionKinds.Role)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46080", token, TSqlParserResource.SQL46080Message, new string[0]);
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000BB8 RID: 3000 RVA: 0x0003C29C File Offset: 0x0003A49C
		public void endpointOption(AlterCreateEndpointStatementBase vParent)
		{
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("STATE"))
			{
				this.endpointState(vParent);
				return;
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				this.endpointAffinity(vParent);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000BB9 RID: 3001 RVA: 0x0003C310 File Offset: 0x0003A510
		public void endpointState(AlterCreateEndpointStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (vParent.State != EndpointState.NotSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				vParent.State = EndpointStateHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000BBA RID: 3002 RVA: 0x0003C388 File Offset: 0x0003A588
		public void endpointAffinity(AlterCreateEndpointStatementBase vParent)
		{
			EndpointAffinity endpointAffinity = base.FragmentFactory.CreateFragment<EndpointAffinity>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AFFINITY");
				if (vParent.Affinity != null)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(endpointAffinity, token);
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "NONE"))
					{
						endpointAffinity.Kind = AffinityKind.None;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "ADMIN");
						endpointAffinity.Kind = AffinityKind.Admin;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(endpointAffinity, token2);
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					endpointAffinity.Kind = AffinityKind.Integer;
					endpointAffinity.Value = literal;
				}
			}
			if (this.inputState.guessing == 0)
			{
				vParent.Affinity = endpointAffinity;
			}
		}

		// Token: 0x06000BBB RID: 3003 RVA: 0x0003C4A8 File Offset: 0x0003A6A8
		public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			EndpointProtocolOption endpointProtocolOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LISTENER_IP"))
			{
				endpointProtocolOption = this.listenerIpProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LISTENER_PORT"))
			{
				endpointProtocolOption = this.listenerPortProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PATH"))
			{
				endpointProtocolOption = this.pathProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SITE"))
			{
				endpointProtocolOption = this.siteProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CLEAR_PORT"))
			{
				endpointProtocolOption = this.clearPortProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SSL_PORT"))
			{
				endpointProtocolOption = this.sslPortProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTHENTICATION"))
			{
				endpointProtocolOption = this.authenticationProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PORTS"))
			{
				endpointProtocolOption = this.portsProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTH_REALM"))
			{
				endpointProtocolOption = this.authenticationRealmProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DEFAULT_LOGON_DOMAIN"))
			{
				endpointProtocolOption = this.defaultLogonDomainProtocolOption(protocol, encountered);
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				endpointProtocolOption = this.compressionProtocolOption(protocol, encountered);
			}
			return endpointProtocolOption;
		}

		// Token: 0x06000BBC RID: 3004 RVA: 0x0003C714 File Offset: 0x0003A914
		public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			ListenerIPEndpointProtocolOption listenerIPEndpointProtocolOption = base.FragmentFactory.CreateFragment<ListenerIPEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				listenerIPEndpointProtocolOption.Kind = EndpointProtocolOptions.TcpListenerIP;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, listenerIPEndpointProtocolOption.Kind, protocol, token);
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				int num2 = this.LA(1);
				switch (num2)
				{
				case 221:
				case 222:
				{
					IPv4 pv = this.ipAddressV4();
					if (this.inputState.guessing == 0)
					{
						listenerIPEndpointProtocolOption.IPv4PartOne = pv;
					}
					int num3 = this.LA(1);
					if (num3 != 192)
					{
						if (num3 != 202)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(202);
						pv = this.ipAddressV4();
						if (this.inputState.guessing == 0)
						{
							listenerIPEndpointProtocolOption.IPv4PartTwo = pv;
						}
					}
					break;
				}
				default:
					switch (num2)
					{
					case 230:
					case 231:
					{
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							listenerIPEndpointProtocolOption.IPv6 = literal;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					break;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(listenerIPEndpointProtocolOption, token2);
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					listenerIPEndpointProtocolOption.IsAll = true;
				}
			}
			return listenerIPEndpointProtocolOption;
		}

		// Token: 0x06000BBD RID: 3005 RVA: 0x0003C8D4 File Offset: 0x0003AAD4
		public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.TcpListenerPort;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				TSql90ParserBaseInternal.ThrowIfInvalidListenerPortValue(literal);
				literalEndpointProtocolOption.Value = literal;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x06000BBE RID: 3006 RVA: 0x0003C948 File Offset: 0x0003AB48
		public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpPath;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = literal;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x06000BBF RID: 3007 RVA: 0x0003C9B4 File Offset: 0x0003ABB4
		public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpSite;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = literal;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x06000BC0 RID: 3008 RVA: 0x0003CA24 File Offset: 0x0003AC24
		public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpClearPort;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = literal;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x06000BC1 RID: 3009 RVA: 0x0003CA90 File Offset: 0x0003AC90
		public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpSslPort;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = literal;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x06000BC2 RID: 3010 RVA: 0x0003CB00 File Offset: 0x0003AD00
		public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			AuthenticationEndpointProtocolOption authenticationEndpointProtocolOption = base.FragmentFactory.CreateFragment<AuthenticationEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				authenticationEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpAuthentication;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, authenticationEndpointProtocolOption.Kind, protocol, token);
			}
			this.match(191);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				authenticationEndpointProtocolOption.AuthenticationTypes = AuthenticationTypesHelper.Instance.ParseOption(token2);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					authenticationEndpointProtocolOption.AuthenticationTypes = TSql90ParserBaseInternal.AggregateAuthenticationType(authenticationEndpointProtocolOption.AuthenticationTypes, AuthenticationTypesHelper.Instance.ParseOption(token3), token3);
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(authenticationEndpointProtocolOption, token4);
			}
			return authenticationEndpointProtocolOption;
		}

		// Token: 0x06000BC3 RID: 3011 RVA: 0x0003CC20 File Offset: 0x0003AE20
		public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			PortsEndpointProtocolOption portsEndpointProtocolOption = base.FragmentFactory.CreateFragment<PortsEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				portsEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpPorts;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, portsEndpointProtocolOption.Kind, protocol, token);
			}
			this.match(191);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				portsEndpointProtocolOption.PortTypes = PortTypesHelper.Instance.ParseOption(token2);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					portsEndpointProtocolOption.PortTypes = TSql90ParserBaseInternal.AggregatePortType(portsEndpointProtocolOption.PortTypes, PortTypesHelper.Instance.ParseOption(token3), token3);
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(portsEndpointProtocolOption, token4);
			}
			return portsEndpointProtocolOption;
		}

		// Token: 0x06000BC4 RID: 3012 RVA: 0x0003CD44 File Offset: 0x0003AF44
		public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpAuthenticationRealm;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
			}
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.nonEmptyString();
				if (this.inputState.guessing == 0)
				{
					literalEndpointProtocolOption.Value = literal;
				}
				break;
			}
			case 232:
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NONE");
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x06000BC5 RID: 3013 RVA: 0x0003CE24 File Offset: 0x0003B024
		public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpDefaultLogonDomain;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
			}
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.nonEmptyString();
				if (this.inputState.guessing == 0)
				{
					literalEndpointProtocolOption.Value = literal;
				}
				break;
			}
			case 232:
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NONE");
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x06000BC6 RID: 3014 RVA: 0x0003CF04 File Offset: 0x0003B104
		public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			CompressionEndpointProtocolOption compressionEndpointProtocolOption = base.FragmentFactory.CreateFragment<CompressionEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				compressionEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpCompression;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, compressionEndpointProtocolOption.Kind, protocol, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "ENABLED"))
				{
					compressionEndpointProtocolOption.IsEnabled = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "DISABLED");
					compressionEndpointProtocolOption.IsEnabled = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(compressionEndpointProtocolOption, token2);
			}
			return compressionEndpointProtocolOption;
		}

		// Token: 0x06000BC7 RID: 3015 RVA: 0x0003CFA4 File Offset: 0x0003B1A4
		public void ipV4DotNumberTail(IPv4 vParent)
		{
			int num = this.LA(1);
			if (num != 200)
			{
				if (num != 222)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(222);
				if (this.inputState.guessing == 0)
				{
					vParent.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token);
					return;
				}
			}
			else
			{
				this.match(200);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					vParent.OctetFour = literal;
					return;
				}
			}
		}

		// Token: 0x06000BC8 RID: 3016 RVA: 0x0003D034 File Offset: 0x0003B234
		public void ipV4DotLastTwoPartsTail(IPv4 vParent)
		{
			this.match(200);
			switch (this.LA(1))
			{
			case 221:
			{
				Literal literal = this.integer();
				this.ipV4DotNumberTail(vParent);
				if (this.inputState.guessing == 0)
				{
					vParent.OctetThree = literal;
					return;
				}
				return;
			}
			case 222:
				this.ipV4NumericOrNumericIntegerTail(vParent);
				return;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000BC9 RID: 3017 RVA: 0x0003D0A8 File Offset: 0x0003B2A8
		public void ipV4NumericOrNumericIntegerTail(IPv4 vParent)
		{
			IToken token = this.LT(1);
			this.match(222);
			int num = this.LA(1);
			if (num <= 192)
			{
				if (num != 1 && num != 192)
				{
					goto IL_0099;
				}
			}
			else if (num != 202)
			{
				if (num != 221)
				{
					goto IL_0099;
				}
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					vParent.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token);
					vParent.OctetFour = literal;
					return;
				}
				return;
			}
			if (this.inputState.guessing == 0)
			{
				Literal literal2;
				Literal literal3;
				base.GetIPv4FragmentsFromNumberDotNumberNumeric(token, out literal2, out literal3);
				vParent.OctetThree = literal2;
				vParent.OctetFour = literal3;
				return;
			}
			return;
			IL_0099:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000BCA RID: 3018 RVA: 0x0003D164 File Offset: 0x0003B364
		public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			int num = this.LA(1);
			PayloadOption payloadOption;
			if (num != 43)
			{
				if (num != 139)
				{
					if (TSql110ParserInternal.tokenSet_62_.member(this.LA(1)) && this.LA(2) >= 230 && this.LA(2) <= 232)
					{
						payloadOption = this.soapMethod(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("BATCHES"))
					{
						payloadOption = this.batchesPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("WSDL"))
					{
						payloadOption = this.wsdlPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SESSIONS"))
					{
						payloadOption = this.sessionsPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LOGIN_TYPE"))
					{
						payloadOption = this.loginTypePayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SESSION_TIMEOUT"))
					{
						payloadOption = this.sessionTimeoutPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAMESPACE"))
					{
						payloadOption = this.namespacePayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CHARACTER_SET"))
					{
						payloadOption = this.characterSetPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("HEADER_LIMIT"))
					{
						payloadOption = this.headerLimitPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTHENTICATION"))
					{
						payloadOption = this.authenticationPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ENCRYPTION"))
					{
						payloadOption = this.encryptionPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MESSAGE_FORWARDING"))
					{
						payloadOption = this.messageForwardingPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MESSAGE_FORWARD_SIZE"))
					{
						payloadOption = this.messageForwardSizePayloadOption(type, encountered);
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 206)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						payloadOption = this.rolePayloadOption(type, encountered);
					}
				}
				else
				{
					payloadOption = this.schemaPayloadOption(type, encountered);
				}
			}
			else
			{
				payloadOption = this.databasePayloadOption(type, encountered);
			}
			return payloadOption;
		}

		// Token: 0x06000BCB RID: 3019 RVA: 0x0003D4AC File Offset: 0x0003B6AC
		public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered)
		{
			SoapMethod soapMethod = base.FragmentFactory.CreateFragment<SoapMethod>();
			int num = this.LA(1);
			switch (num)
			{
			case 4:
			case 6:
				break;
			case 5:
				goto IL_01A2;
			default:
				if (num != 54)
				{
					if (num != 232)
					{
						goto IL_01A2;
					}
				}
				else
				{
					this.match(54);
					IToken token = this.LT(1);
					this.match(232);
					this.soapMethodAlias(soapMethod);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "WEBMETHOD");
						soapMethod.Action = SoapMethodAction.Drop;
						return soapMethod;
					}
					return soapMethod;
				}
				break;
			}
			int num2 = this.LA(1);
			switch (num2)
			{
			case 4:
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					soapMethod.Action = SoapMethodAction.Add;
					goto IL_00BB;
				}
				goto IL_00BB;
			case 5:
				break;
			case 6:
				this.match(6);
				if (this.inputState.guessing == 0)
				{
					soapMethod.Action = SoapMethodAction.Alter;
					goto IL_00BB;
				}
				goto IL_00BB;
			default:
				if (num2 == 232)
				{
					goto IL_00BB;
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00BB:
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "WEBMETHOD");
				soapMethod.Kind = PayloadOptionKinds.WebMethod;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, soapMethod.Kind, type, token2);
			}
			this.soapMethodAlias(soapMethod);
			this.match(191);
			this.soapMethodOption(soapMethod);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.soapMethodOption(soapMethod);
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(soapMethod, token3);
				return soapMethod;
			}
			return soapMethod;
			IL_01A2:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000BCC RID: 3020 RVA: 0x0003D670 File Offset: 0x0003B870
		public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			this.enabledDisabled(enabledDisabledPayloadOption);
			if (this.inputState.guessing == 0)
			{
				enabledDisabledPayloadOption.Kind = PayloadOptionKinds.Batches;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
			}
			return enabledDisabledPayloadOption;
		}

		// Token: 0x06000BCD RID: 3021 RVA: 0x0003D6D4 File Offset: 0x0003B8D4
		public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			WsdlPayloadOption wsdlPayloadOption = base.FragmentFactory.CreateFragment<WsdlPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				wsdlPayloadOption.Kind = PayloadOptionKinds.Wsdl;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, wsdlPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						wsdlPayloadOption.Value = literal;
					}
					break;
				}
				case 232:
				{
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "NONE");
						wsdlPayloadOption.IsNone = true;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Literal literal = this.defaultLiteral();
				if (this.inputState.guessing == 0)
				{
					wsdlPayloadOption.Value = literal;
				}
			}
			return wsdlPayloadOption;
		}

		// Token: 0x06000BCE RID: 3022 RVA: 0x0003D7E0 File Offset: 0x0003B9E0
		public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			this.enabledDisabled(enabledDisabledPayloadOption);
			if (this.inputState.guessing == 0)
			{
				enabledDisabledPayloadOption.Kind = PayloadOptionKinds.Sessions;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
			}
			return enabledDisabledPayloadOption;
		}

		// Token: 0x06000BCF RID: 3023 RVA: 0x0003D844 File Offset: 0x0003BA44
		public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LoginTypePayloadOption loginTypePayloadOption = base.FragmentFactory.CreateFragment<LoginTypePayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				loginTypePayloadOption.Kind = PayloadOptionKinds.LoginType;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, loginTypePayloadOption.Kind, type, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "WINDOWS"))
				{
					loginTypePayloadOption.IsWindows = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "MIXED");
					loginTypePayloadOption.IsWindows = false;
				}
			}
			return loginTypePayloadOption;
		}

		// Token: 0x06000BD0 RID: 3024 RVA: 0x0003D8E0 File Offset: 0x0003BAE0
		public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			SessionTimeoutPayloadOption sessionTimeoutPayloadOption = base.FragmentFactory.CreateFragment<SessionTimeoutPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				sessionTimeoutPayloadOption.Kind = PayloadOptionKinds.SessionTimeout;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, sessionTimeoutPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NEVER");
					sessionTimeoutPayloadOption.IsNever = true;
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					sessionTimeoutPayloadOption.Timeout = literal;
				}
			}
			return sessionTimeoutPayloadOption;
		}

		// Token: 0x06000BD1 RID: 3025 RVA: 0x0003D9C0 File Offset: 0x0003BBC0
		public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(43);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.Database;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			Literal literal;
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
					literal = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				literal = this.defaultLiteral();
			}
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Value = literal;
			}
			return literalPayloadOption;
		}

		// Token: 0x06000BD2 RID: 3026 RVA: 0x0003DA78 File Offset: 0x0003BC78
		public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.Namespace;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			Literal literal;
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
					literal = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				literal = this.defaultLiteral();
			}
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Value = literal;
			}
			return literalPayloadOption;
		}

		// Token: 0x06000BD3 RID: 3027 RVA: 0x0003DB34 File Offset: 0x0003BD34
		public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			SchemaPayloadOption schemaPayloadOption = base.FragmentFactory.CreateFragment<SchemaPayloadOption>();
			IToken token = this.LT(1);
			this.match(139);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				schemaPayloadOption.Kind = PayloadOptionKinds.Schema;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, schemaPayloadOption.Kind, type, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "STANDARD"))
				{
					schemaPayloadOption.IsStandard = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "NONE");
					schemaPayloadOption.IsStandard = false;
				}
			}
			return schemaPayloadOption;
		}

		// Token: 0x06000BD4 RID: 3028 RVA: 0x0003DBD4 File Offset: 0x0003BDD4
		public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			CharacterSetPayloadOption characterSetPayloadOption = base.FragmentFactory.CreateFragment<CharacterSetPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				characterSetPayloadOption.Kind = PayloadOptionKinds.CharacterSet;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, characterSetPayloadOption.Kind, type, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "SQL"))
				{
					characterSetPayloadOption.IsSql = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "XML");
					characterSetPayloadOption.IsSql = false;
				}
			}
			return characterSetPayloadOption;
		}

		// Token: 0x06000BD5 RID: 3029 RVA: 0x0003DC74 File Offset: 0x0003BE74
		public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.HeaderLimit;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
				literalPayloadOption.Value = literal;
			}
			return literalPayloadOption;
		}

		// Token: 0x06000BD6 RID: 3030 RVA: 0x0003DCE4 File Offset: 0x0003BEE4
		public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			AuthenticationPayloadOption authenticationPayloadOption = base.FragmentFactory.CreateFragment<AuthenticationPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				authenticationPayloadOption.Kind = PayloadOptionKinds.Authentication;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, authenticationPayloadOption.Kind, type, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.LA(1) == 192 || this.LA(1) == 198)
			{
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "WINDOWS");
					authenticationPayloadOption.Protocol = AuthenticationProtocol.Windows;
				}
			}
			else if ((this.LA(1) == 232 || this.LA(1) == 233) && (this.LA(2) == 192 || this.LA(2) == 198))
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE"))
					{
						authenticationPayloadOption.Certificate = identifier;
						authenticationPayloadOption.TryCertificateFirst = true;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "WINDOWS");
						authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier, token2);
					}
				}
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Identifier identifier = this.identifier();
				Identifier identifier2 = this.identifier();
				int num = this.LA(1);
				if (num != 192 && num != 198)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						Identifier identifier3 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE"))
							{
								authenticationPayloadOption.Certificate = identifier;
								TSql80ParserBaseInternal.Match(identifier2, "WINDOWS", token2);
								authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier3, token2);
								authenticationPayloadOption.TryCertificateFirst = true;
							}
							else
							{
								TSql80ParserBaseInternal.Match(token2, "WINDOWS");
								authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier, token2);
								TSql80ParserBaseInternal.Match(identifier2, "CERTIFICATE", token2);
								authenticationPayloadOption.Certificate = identifier3;
							}
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE"))
					{
						authenticationPayloadOption.Certificate = identifier;
						TSql80ParserBaseInternal.Match(identifier2, "WINDOWS", token2);
						authenticationPayloadOption.TryCertificateFirst = true;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "WINDOWS");
						TSql80ParserBaseInternal.Match(identifier, "CERTIFICATE", token2);
						authenticationPayloadOption.Certificate = identifier2;
					}
					authenticationPayloadOption.Protocol = AuthenticationProtocol.Windows;
				}
			}
			return authenticationPayloadOption;
		}

		// Token: 0x06000BD7 RID: 3031 RVA: 0x0003DFB4 File Offset: 0x0003C1B4
		public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EncryptionPayloadOption encryptionPayloadOption = base.FragmentFactory.CreateFragment<EncryptionPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				encryptionPayloadOption.Kind = PayloadOptionKinds.Encryption;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, encryptionPayloadOption.Kind, type, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				encryptionPayloadOption.EncryptionSupport = EndpointEncryptionSupportHelper.Instance.ParseOption(token2);
			}
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0 && (encryptionPayloadOption.EncryptionSupport == EndpointEncryptionSupport.Disabled || !string.Equals(TSql90ParserBaseInternal.Unquote(identifier.Value), "ALGORITHM", 5)))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
					}
					if ((this.LA(1) == 232 || this.LA(1) == 233) && (this.LA(2) == 192 || this.LA(2) == 198))
					{
						Identifier identifier2 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							encryptionPayloadOption.AlgorithmPartOne = TSql90ParserBaseInternal.RecognizeAesOrRc4(identifier2, token2);
						}
					}
					else
					{
						if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 232 && this.LA(2) != 233))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						Identifier identifier2 = this.identifier();
						Identifier identifier3 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							encryptionPayloadOption.AlgorithmPartOne = TSql90ParserBaseInternal.RecognizeAesOrRc4(identifier2, token2);
							encryptionPayloadOption.AlgorithmPartTwo = TSql90ParserBaseInternal.RecognizeAesOrRc4(identifier3, token2);
							if (encryptionPayloadOption.AlgorithmPartOne == encryptionPayloadOption.AlgorithmPartTwo)
							{
								throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
							}
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return encryptionPayloadOption;
		}

		// Token: 0x06000BD8 RID: 3032 RVA: 0x0003E1D0 File Offset: 0x0003C3D0
		public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			this.enabledDisabled(enabledDisabledPayloadOption);
			if (this.inputState.guessing == 0)
			{
				enabledDisabledPayloadOption.Kind = PayloadOptionKinds.MessageForwarding;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
			}
			return enabledDisabledPayloadOption;
		}

		// Token: 0x06000BD9 RID: 3033 RVA: 0x0003E238 File Offset: 0x0003C438
		public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.MessageForwardSize;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
				literalPayloadOption.Value = literal;
			}
			return literalPayloadOption;
		}

		// Token: 0x06000BDA RID: 3034 RVA: 0x0003E2A8 File Offset: 0x0003C4A8
		public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			RolePayloadOption rolePayloadOption = base.FragmentFactory.CreateFragment<RolePayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				rolePayloadOption.Kind = PayloadOptionKinds.Role;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, rolePayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "WITNESS"))
					{
						rolePayloadOption.Role = DatabaseMirroringEndpointRole.Witness;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "PARTNER");
						rolePayloadOption.Role = DatabaseMirroringEndpointRole.Partner;
					}
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					rolePayloadOption.Role = DatabaseMirroringEndpointRole.All;
				}
			}
			return rolePayloadOption;
		}

		// Token: 0x06000BDB RID: 3035 RVA: 0x0003E3A4 File Offset: 0x0003C5A4
		public void enabledDisabled(EnabledDisabledPayloadOption vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "ENABLED"))
				{
					vParent.IsEnabled = true;
					return;
				}
				TSql80ParserBaseInternal.Match(token, "DISABLED");
				vParent.IsEnabled = false;
			}
		}

		// Token: 0x06000BDC RID: 3036 RVA: 0x0003E3FC File Offset: 0x0003C5FC
		public DefaultLiteral defaultLiteral()
		{
			DefaultLiteral defaultLiteral = base.FragmentFactory.CreateFragment<DefaultLiteral>();
			IToken token = this.LT(1);
			this.match(47);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(defaultLiteral, token);
				defaultLiteral.Value = token.getText();
			}
			return defaultLiteral;
		}

		// Token: 0x06000BDD RID: 3037 RVA: 0x0003E448 File Offset: 0x0003C648
		public void soapMethodAlias(SoapMethod vParent)
		{
			if ((this.LA(1) == 230 || this.LA(1) == 231) && (this.LA(2) == 191 || this.LA(2) == 192 || this.LA(2) == 198))
			{
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					vParent.Alias = literal;
					return;
				}
			}
			else
			{
				if ((this.LA(1) != 230 && this.LA(1) != 231) || this.LA(2) != 200)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Literal literal2 = this.stringLiteral();
				this.match(200);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					vParent.Alias = literal;
					vParent.Namespace = literal2;
					return;
				}
			}
		}

		// Token: 0x06000BDE RID: 3038 RVA: 0x0003E52C File Offset: 0x0003C72C
		public void soapMethodOption(SoapMethod vParent)
		{
			int num = this.LA(1);
			if (num != 139)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				switch (this.LA(1))
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "NAME");
						if (vParent.Name != null)
						{
							throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
						}
						vParent.Name = literal;
						return;
					}
					break;
				}
				case 232:
				{
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						if (vParent.Format != SoapMethodFormat.NotSpecified)
						{
							throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
						}
						TSql80ParserBaseInternal.Match(token, "FORMAT");
						vParent.Format = SoapMethodFormatsHelper.Instance.ParseOption(token2);
						return;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(139);
				this.match(206);
				if (this.inputState.guessing == 0 && vParent.Schema != SoapMethodSchemas.NotSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
				}
				int num2 = this.LA(1);
				if (num2 != 47)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token4 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.TryMatch(token4, "NONE"))
						{
							vParent.Schema = SoapMethodSchemas.None;
							return;
						}
						TSql80ParserBaseInternal.Match(token4, "STANDARD");
						vParent.Schema = SoapMethodSchemas.Standard;
						return;
					}
				}
				else
				{
					this.match(47);
					if (this.inputState.guessing == 0)
					{
						vParent.Schema = SoapMethodSchemas.Default;
						return;
					}
				}
			}
		}

		// Token: 0x06000BDF RID: 3039 RVA: 0x0003E728 File Offset: 0x0003C928
		public CreateEventNotificationStatement createEventNotificationStatement()
		{
			CreateEventNotificationStatement createEventNotificationStatement = base.FragmentFactory.CreateFragment<CreateEventNotificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NOTIFICATION");
				createEventNotificationStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createEventNotificationStatement);
			}
			EventNotificationObjectScope eventNotificationObjectScope = this.eventNotificationObjectScope();
			if (this.inputState.guessing == 0)
			{
				createEventNotificationStatement.Scope = eventNotificationObjectScope;
			}
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FAN_IN");
					createEventNotificationStatement.WithFanIn = true;
				}
			}
			this.match(67);
			EventTypeGroupContainer eventTypeGroupContainer = this.eventTypeGroupContainer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventTypeGroupContainer>(createEventNotificationStatement, createEventNotificationStatement.EventTypeGroups, eventTypeGroupContainer);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				eventTypeGroupContainer = this.eventTypeGroupContainer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventTypeGroupContainer>(createEventNotificationStatement, createEventNotificationStatement.EventTypeGroups, eventTypeGroupContainer);
				}
			}
			this.match(151);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "SERVICE");
			}
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				createEventNotificationStatement.BrokerService = literal;
			}
			this.match(198);
			literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				createEventNotificationStatement.BrokerInstanceSpecifier = literal;
			}
			return createEventNotificationStatement;
		}

		// Token: 0x06000BE0 RID: 3040 RVA: 0x0003E8F8 File Offset: 0x0003CAF8
		public CreateEventSessionStatement createEventSessionStatement()
		{
			CreateEventSessionStatement createEventSessionStatement = base.FragmentFactory.CreateFragment<CreateEventSessionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SESSION");
				createEventSessionStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createEventSessionStatement);
			}
			this.match(105);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "SERVER");
			}
			this.eventDeclarationList(createEventSessionStatement);
			if (this.LA(1) == 4 && this.LA(2) == 232)
			{
				this.targetDeclarationList(createEventSessionStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.optSessionOptionList(createEventSessionStatement);
			return createEventSessionStatement;
		}

		// Token: 0x06000BE1 RID: 3041 RVA: 0x0003E9F4 File Offset: 0x0003CBF4
		public EventNotificationObjectScope eventNotificationObjectScope()
		{
			EventNotificationObjectScope eventNotificationObjectScope = base.FragmentFactory.CreateFragment<EventNotificationObjectScope>();
			this.match(105);
			if (this.LA(1) == 43)
			{
				IToken token = this.LT(1);
				this.match(43);
				if (this.inputState.guessing == 0)
				{
					eventNotificationObjectScope.Target = EventNotificationTarget.Database;
					TSql80ParserBaseInternal.UpdateTokenInfo(eventNotificationObjectScope, token);
				}
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
			{
				this.LT(1);
				this.match(232);
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					eventNotificationObjectScope.Target = EventNotificationTarget.Queue;
					eventNotificationObjectScope.QueueName = schemaObjectName;
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_63_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SERVER");
					eventNotificationObjectScope.Target = EventNotificationTarget.Server;
					TSql80ParserBaseInternal.UpdateTokenInfo(eventNotificationObjectScope, token2);
				}
			}
			return eventNotificationObjectScope;
		}

		// Token: 0x06000BE2 RID: 3042 RVA: 0x0003EB44 File Offset: 0x0003CD44
		public EventTypeGroupContainer eventTypeGroupContainer()
		{
			EventTypeGroupContainer eventTypeGroupContainer = null;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				EventNotificationEventType eventNotificationEventType;
				EventNotificationEventGroup eventNotificationEventGroup;
				if (TriggerEventTypeHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql110, out eventNotificationEventType))
				{
					eventTypeGroupContainer = base.CreateEventTypeContainer(eventNotificationEventType, token);
				}
				else if (AuditEventTypeHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql110, out eventNotificationEventType))
				{
					eventTypeGroupContainer = base.CreateEventTypeContainer(eventNotificationEventType, token);
				}
				else if (TriggerEventGroupHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql110, out eventNotificationEventGroup))
				{
					eventTypeGroupContainer = base.CreateEventGroupContainer(eventNotificationEventGroup, token);
				}
				else
				{
					eventNotificationEventGroup = AuditEventGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
					eventTypeGroupContainer = base.CreateEventGroupContainer(eventNotificationEventGroup, token);
				}
			}
			return eventTypeGroupContainer;
		}

		// Token: 0x06000BE3 RID: 3043 RVA: 0x0003EBE0 File Offset: 0x0003CDE0
		public void eventDeclarationList(EventSessionStatement vParent)
		{
			this.match(4);
			IToken token = this.LT(1);
			this.match(232);
			EventDeclaration eventDeclaration = this.eventDeclaration();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EVENT");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventDeclaration>(vParent, vParent.EventDeclarations, eventDeclaration);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.match(4);
				IToken token2 = this.LT(1);
				this.match(232);
				eventDeclaration = this.eventDeclaration();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "EVENT");
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventDeclaration>(vParent, vParent.EventDeclarations, eventDeclaration);
				}
			}
		}

		// Token: 0x06000BE4 RID: 3044 RVA: 0x0003EC98 File Offset: 0x0003CE98
		public void targetDeclarationList(EventSessionStatement vParent)
		{
			this.match(4);
			IToken token = this.LT(1);
			this.match(232);
			TargetDeclaration targetDeclaration = this.targetDeclaration();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TARGET");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TargetDeclaration>(vParent, vParent.TargetDeclarations, targetDeclaration);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.match(4);
				IToken token2 = this.LT(1);
				this.match(232);
				targetDeclaration = this.targetDeclaration();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "TARGET");
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TargetDeclaration>(vParent, vParent.TargetDeclarations, targetDeclaration);
				}
			}
		}

		// Token: 0x06000BE5 RID: 3045 RVA: 0x0003ED50 File Offset: 0x0003CF50
		public void optSessionOptionList(EventSessionStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.sessionOptionList(vParent);
				return;
			}
			if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000BE6 RID: 3046 RVA: 0x0003EDBC File Offset: 0x0003CFBC
		public AlterEventSessionStatement alterEventSessionStatement()
		{
			AlterEventSessionStatement alterEventSessionStatement = base.FragmentFactory.CreateFragment<AlterEventSessionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EVENT");
				TSql80ParserBaseInternal.Match(token2, "SESSION");
				alterEventSessionStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterEventSessionStatement);
			}
			this.match(105);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "SERVER");
			}
			int num = this.LA(1);
			if (num <= 54)
			{
				if (num == 4)
				{
					if (this.LA(1) == 4 && this.LA(2) == 232 && base.NextTokenMatches("ADD") && base.NextTokenMatches("EVENT", 2))
					{
						this.eventDeclarationList(alterEventSessionStatement);
						if (this.inputState.guessing == 0)
						{
							alterEventSessionStatement.StatementType = AlterEventSessionStatementType.AddEventDeclarationOptionalSessionOptions;
						}
					}
					else
					{
						if (this.LA(1) != 4 || this.LA(2) != 232 || !base.NextTokenMatches("ADD") || !base.NextTokenMatches("TARGET", 2))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.targetDeclarationList(alterEventSessionStatement);
						if (this.inputState.guessing == 0)
						{
							alterEventSessionStatement.StatementType = AlterEventSessionStatementType.AddTargetDeclarationOptionalSessionOptions;
						}
					}
					this.optSessionOptionList(alterEventSessionStatement);
					return alterEventSessionStatement;
				}
				if (num == 54)
				{
					if (this.LA(1) == 54 && this.LA(2) == 232 && base.NextTokenMatches("DROP") && base.NextTokenMatches("EVENT", 2))
					{
						this.dropEventDeclarationList(alterEventSessionStatement);
						if (this.inputState.guessing == 0)
						{
							alterEventSessionStatement.StatementType = AlterEventSessionStatementType.DropEventSpecificationOptionalSessionOptions;
						}
					}
					else
					{
						if (this.LA(1) != 54 || this.LA(2) != 232 || !base.NextTokenMatches("DROP") || !base.NextTokenMatches("TARGET", 2))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.dropTargetDeclarationList(alterEventSessionStatement);
						if (this.inputState.guessing == 0)
						{
							alterEventSessionStatement.StatementType = AlterEventSessionStatementType.DropTargetSpecificationOptionalSessionOptions;
						}
					}
					this.optSessionOptionList(alterEventSessionStatement);
					return alterEventSessionStatement;
				}
			}
			else if (num != 171)
			{
				if (num == 232)
				{
					IToken token4 = this.LT(1);
					this.match(232);
					this.match(206);
					IToken token5 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing != 0)
					{
						return alterEventSessionStatement;
					}
					TSql80ParserBaseInternal.Match(token4, "STATE");
					if (TSql80ParserBaseInternal.TryMatch(token5, "START"))
					{
						alterEventSessionStatement.StatementType = AlterEventSessionStatementType.AlterStateIsStart;
						return alterEventSessionStatement;
					}
					if (TSql80ParserBaseInternal.TryMatch(token5, "STOP"))
					{
						alterEventSessionStatement.StatementType = AlterEventSessionStatementType.AlterStateIsStop;
						return alterEventSessionStatement;
					}
					TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token5);
					return alterEventSessionStatement;
				}
			}
			else
			{
				this.sessionOptionList(alterEventSessionStatement);
				if (this.inputState.guessing == 0)
				{
					alterEventSessionStatement.StatementType = AlterEventSessionStatementType.RequiredSessionOptions;
					return alterEventSessionStatement;
				}
				return alterEventSessionStatement;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000BE7 RID: 3047 RVA: 0x0003F0F0 File Offset: 0x0003D2F0
		public void dropEventDeclarationList(AlterEventSessionStatement vParent)
		{
			this.match(54);
			IToken token = this.LT(1);
			this.match(232);
			EventSessionObjectName eventSessionObjectName = this.eventSessionNonEmptyThreePartObjectName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EVENT");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventSessionObjectName>(vParent, vParent.DropEventDeclarations, eventSessionObjectName);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.match(54);
				IToken token2 = this.LT(1);
				this.match(232);
				eventSessionObjectName = this.eventSessionNonEmptyThreePartObjectName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "EVENT");
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventSessionObjectName>(vParent, vParent.DropEventDeclarations, eventSessionObjectName);
				}
			}
		}

		// Token: 0x06000BE8 RID: 3048 RVA: 0x0003F1AC File Offset: 0x0003D3AC
		public void dropTargetDeclarationList(AlterEventSessionStatement vParent)
		{
			this.match(54);
			IToken token = this.LT(1);
			this.match(232);
			EventSessionObjectName eventSessionObjectName = this.eventSessionNonEmptyThreePartObjectName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TARGET");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventSessionObjectName>(vParent, vParent.DropTargetDeclarations, eventSessionObjectName);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.match(54);
				IToken token2 = this.LT(1);
				this.match(232);
				eventSessionObjectName = this.eventSessionNonEmptyThreePartObjectName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "TARGET");
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventSessionObjectName>(vParent, vParent.DropTargetDeclarations, eventSessionObjectName);
				}
			}
		}

		// Token: 0x06000BE9 RID: 3049 RVA: 0x0003F268 File Offset: 0x0003D468
		public void sessionOptionList(EventSessionStatement vParent)
		{
			this.match(171);
			this.match(191);
			SessionOption sessionOption = this.sessionOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SessionOption>(vParent, vParent.SessionOptions, sessionOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				sessionOption = this.sessionOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SessionOption>(vParent, vParent.SessionOptions, sessionOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000BEA RID: 3050 RVA: 0x0003F314 File Offset: 0x0003D514
		public EventDeclaration eventDeclaration()
		{
			EventDeclaration eventDeclaration = base.FragmentFactory.CreateFragment<EventDeclaration>();
			EventSessionObjectName eventSessionObjectName = this.eventSessionNonEmptyThreePartObjectName();
			if (this.inputState.guessing == 0)
			{
				eventDeclaration.ObjectName = eventSessionObjectName;
			}
			if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_64_.member(this.LA(2)))
			{
				this.LT(1);
				this.match(191);
				int num = this.LA(1);
				if (num <= 169)
				{
					if (num == 142)
					{
						this.eventDeclarationSetParameters(eventDeclaration);
						goto IL_00B9;
					}
					if (num == 169)
					{
						goto IL_00B9;
					}
				}
				else if (num == 192 || num == 232)
				{
					goto IL_00B9;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_00B9:
				int num2 = this.LA(1);
				if (num2 != 169 && num2 != 192)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.eventDeclarationActionParameters(eventDeclaration);
				}
				int num3 = this.LA(1);
				if (num3 != 169)
				{
					if (num3 != 192)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(169);
					BooleanExpression booleanExpression = this.eventBooleanExpression();
					if (this.inputState.guessing == 0)
					{
						eventDeclaration.EventDeclarationPredicateParameter = booleanExpression;
					}
				}
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(eventDeclaration, token);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_49_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return eventDeclaration;
		}

		// Token: 0x06000BEB RID: 3051 RVA: 0x0003F4D8 File Offset: 0x0003D6D8
		public TargetDeclaration targetDeclaration()
		{
			TargetDeclaration targetDeclaration = base.FragmentFactory.CreateFragment<TargetDeclaration>();
			EventSessionObjectName eventSessionObjectName = this.eventSessionNonEmptyThreePartObjectName();
			if (this.inputState.guessing == 0)
			{
				targetDeclaration.ObjectName = eventSessionObjectName;
			}
			if (this.LA(1) == 191 && this.LA(2) == 142)
			{
				this.match(191);
				this.match(142);
				EventDeclarationSetParameter eventDeclarationSetParameter = this.eventDeclarationSetParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventDeclarationSetParameter>(targetDeclaration, targetDeclaration.TargetDeclarationParameters, eventDeclarationSetParameter);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					eventDeclarationSetParameter = this.eventDeclarationSetParameter();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventDeclarationSetParameter>(targetDeclaration, targetDeclaration.TargetDeclarationParameters, eventDeclarationSetParameter);
					}
				}
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(targetDeclaration, token);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_49_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return targetDeclaration;
		}

		// Token: 0x06000BEC RID: 3052 RVA: 0x0003F608 File Offset: 0x0003D808
		public SessionOption sessionOption()
		{
			SessionOption sessionOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_MEMORY"))
			{
				sessionOption = this.maxMemorySessionOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_EVENT_SIZE"))
			{
				sessionOption = this.maxEventSizeSessionOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("TRACK_CAUSALITY"))
			{
				sessionOption = this.trackCausalitySessionOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("STARTUP_STATE"))
			{
				sessionOption = this.startupStateSessionOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("EVENT_RETENTION_MODE"))
			{
				sessionOption = this.eventRetentionSessionOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MEMORY_PARTITION_MODE"))
			{
				sessionOption = this.memoryPartitionSessionOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206 || !base.NextTokenMatches("MAX_DISPATCH_LATENCY"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				sessionOption = this.maxDispatchLatencySessionOption();
			}
			return sessionOption;
		}

		// Token: 0x06000BED RID: 3053 RVA: 0x0003F798 File Offset: 0x0003D998
		public EventSessionObjectName eventSessionNonEmptyThreePartObjectName()
		{
			EventSessionObjectName eventSessionObjectName = base.FragmentFactory.CreateFragment<EventSessionObjectName>();
			MultiPartIdentifier multiPartIdentifier = this.nonEmptyThreePartObjectName();
			if (this.inputState.guessing == 0)
			{
				eventSessionObjectName.MultiPartIdentifier = multiPartIdentifier;
			}
			return eventSessionObjectName;
		}

		// Token: 0x06000BEE RID: 3054 RVA: 0x0003F7D0 File Offset: 0x0003D9D0
		public void eventDeclarationSetParameters(EventDeclaration vParent)
		{
			this.match(142);
			EventDeclarationSetParameter eventDeclarationSetParameter = this.eventDeclarationSetParameter();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventDeclarationSetParameter>(vParent, vParent.EventDeclarationSetParameters, eventDeclarationSetParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				eventDeclarationSetParameter = this.eventDeclarationSetParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventDeclarationSetParameter>(vParent, vParent.EventDeclarationSetParameters, eventDeclarationSetParameter);
				}
			}
		}

		// Token: 0x06000BEF RID: 3055 RVA: 0x0003F848 File Offset: 0x0003DA48
		public void eventDeclarationActionParameters(EventDeclaration vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ACTION");
			}
			this.match(191);
			EventSessionObjectName eventSessionObjectName = this.eventSessionNonEmptyThreePartObjectName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventSessionObjectName>(vParent, vParent.EventDeclarationActionParameters, eventSessionObjectName);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				eventSessionObjectName = this.eventSessionNonEmptyThreePartObjectName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventSessionObjectName>(vParent, vParent.EventDeclarationActionParameters, eventSessionObjectName);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000BF0 RID: 3056 RVA: 0x0003F914 File Offset: 0x0003DB14
		public EventDeclarationSetParameter eventDeclarationSetParameter()
		{
			EventDeclarationSetParameter eventDeclarationSetParameter = base.FragmentFactory.CreateFragment<EventDeclarationSetParameter>();
			Identifier identifier = this.identifier();
			this.match(206);
			ScalarExpression scalarExpression = this.eventDeclarationValue();
			if (this.inputState.guessing == 0)
			{
				eventDeclarationSetParameter.EventField = identifier;
				eventDeclarationSetParameter.EventValue = scalarExpression;
			}
			return eventDeclarationSetParameter;
		}

		// Token: 0x06000BF1 RID: 3057 RVA: 0x0003F964 File Offset: 0x0003DB64
		public LiteralSessionOption maxMemorySessionOption()
		{
			LiteralSessionOption literalSessionOption = base.FragmentFactory.CreateFragment<LiteralSessionOption>();
			this.LT(1);
			this.match(232);
			this.integerSessionOptionValue(literalSessionOption);
			if (this.inputState.guessing == 0)
			{
				literalSessionOption.OptionKind = SessionOptionKind.MaxMemory;
			}
			return literalSessionOption;
		}

		// Token: 0x06000BF2 RID: 3058 RVA: 0x0003F9AC File Offset: 0x0003DBAC
		public LiteralSessionOption maxEventSizeSessionOption()
		{
			LiteralSessionOption literalSessionOption = base.FragmentFactory.CreateFragment<LiteralSessionOption>();
			this.LT(1);
			this.match(232);
			this.integerSessionOptionValue(literalSessionOption);
			if (this.inputState.guessing == 0)
			{
				literalSessionOption.OptionKind = SessionOptionKind.MaxEventSize;
			}
			return literalSessionOption;
		}

		// Token: 0x06000BF3 RID: 3059 RVA: 0x0003F9F4 File Offset: 0x0003DBF4
		public OnOffSessionOption trackCausalitySessionOption()
		{
			OnOffSessionOption onOffSessionOption = base.FragmentFactory.CreateFragment<OnOffSessionOption>();
			this.LT(1);
			this.match(232);
			this.onOffSessionOption(onOffSessionOption);
			if (this.inputState.guessing == 0)
			{
				onOffSessionOption.OptionKind = SessionOptionKind.TrackCausality;
			}
			return onOffSessionOption;
		}

		// Token: 0x06000BF4 RID: 3060 RVA: 0x0003FA3C File Offset: 0x0003DC3C
		public OnOffSessionOption startupStateSessionOption()
		{
			OnOffSessionOption onOffSessionOption = base.FragmentFactory.CreateFragment<OnOffSessionOption>();
			this.LT(1);
			this.match(232);
			this.onOffSessionOption(onOffSessionOption);
			if (this.inputState.guessing == 0)
			{
				onOffSessionOption.OptionKind = SessionOptionKind.StartUpState;
			}
			return onOffSessionOption;
		}

		// Token: 0x06000BF5 RID: 3061 RVA: 0x0003FA84 File Offset: 0x0003DC84
		public EventRetentionSessionOption eventRetentionSessionOption()
		{
			EventRetentionSessionOption eventRetentionSessionOption = base.FragmentFactory.CreateFragment<EventRetentionSessionOption>();
			this.LT(1);
			this.match(232);
			this.match(206);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				eventRetentionSessionOption.OptionKind = SessionOptionKind.EventRetention;
				eventRetentionSessionOption.Value = EventSessionEventRetentionModeTypeHelper.Instance.ParseOption(token);
			}
			return eventRetentionSessionOption;
		}

		// Token: 0x06000BF6 RID: 3062 RVA: 0x0003FAF8 File Offset: 0x0003DCF8
		public MemoryPartitionSessionOption memoryPartitionSessionOption()
		{
			MemoryPartitionSessionOption memoryPartitionSessionOption = base.FragmentFactory.CreateFragment<MemoryPartitionSessionOption>();
			this.LT(1);
			this.match(232);
			this.match(206);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				memoryPartitionSessionOption.OptionKind = SessionOptionKind.MemoryPartition;
				memoryPartitionSessionOption.Value = EventSessionMemoryPartitionModeTypeHelper.Instance.ParseOption(token);
			}
			return memoryPartitionSessionOption;
		}

		// Token: 0x06000BF7 RID: 3063 RVA: 0x0003FB6C File Offset: 0x0003DD6C
		public MaxDispatchLatencySessionOption maxDispatchLatencySessionOption()
		{
			MaxDispatchLatencySessionOption maxDispatchLatencySessionOption = base.FragmentFactory.CreateFragment<MaxDispatchLatencySessionOption>();
			this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				maxDispatchLatencySessionOption.OptionKind = SessionOptionKind.MaxDispatchLatency;
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "INFINITE");
					maxDispatchLatencySessionOption.IsInfinite = true;
				}
			}
			else
			{
				Literal literal = this.integer();
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SECONDS");
					maxDispatchLatencySessionOption.IsInfinite = false;
					maxDispatchLatencySessionOption.Value = literal;
				}
			}
			return maxDispatchLatencySessionOption;
		}

		// Token: 0x06000BF8 RID: 3064 RVA: 0x0003FC60 File Offset: 0x0003DE60
		public void integerSessionOptionValue(LiteralSessionOption vParent)
		{
			this.match(206);
			Literal literal = this.integer();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				vParent.Value = literal;
				vParent.Unit = SessionOptionUnitHelper.Instance.ParseOption(token);
			}
		}

		// Token: 0x06000BF9 RID: 3065 RVA: 0x0003FCBC File Offset: 0x0003DEBC
		public void onOffSessionOption(OnOffSessionOption vParent)
		{
			this.match(206);
			OptionState optionState = this.optionOnOff(vParent);
			if (this.inputState.guessing == 0)
			{
				vParent.OptionState = optionState;
			}
		}

		// Token: 0x06000BFA RID: 3066 RVA: 0x0003FCF0 File Offset: 0x0003DEF0
		public ScalarExpression eventDeclarationValue()
		{
			ScalarExpression scalarExpression = null;
			int num = this.LA(1);
			if (num > 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
					break;
				default:
					switch (num)
					{
					case 230:
					case 231:
						break;
					default:
						goto IL_00C2;
					}
					break;
				}
				return this.eventSessionLiteral();
			}
			if (num == 191)
			{
				return this.eventSessionExpressionParenthesis();
			}
			if (num == 199)
			{
				IToken token = this.LT(1);
				this.match(199);
				ScalarExpression scalarExpression2 = this.integerOrRealOrNumeric();
				if (this.inputState.guessing == 0)
				{
					UnaryExpression unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
					unaryExpression.Expression = scalarExpression2;
					return unaryExpression;
				}
				return scalarExpression;
			}
			IL_00C2:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000BFB RID: 3067 RVA: 0x0003FDD4 File Offset: 0x0003DFD4
		public Literal integerOrRealOrNumeric()
		{
			Literal literal;
			switch (this.LA(1))
			{
			case 221:
				literal = this.integer();
				break;
			case 222:
				literal = this.numeric();
				break;
			case 223:
				literal = this.real();
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literal;
		}

		// Token: 0x06000BFC RID: 3068 RVA: 0x0003FE34 File Offset: 0x0003E034
		public ParenthesisExpression eventSessionExpressionParenthesis()
		{
			ParenthesisExpression parenthesisExpression = base.FragmentFactory.CreateFragment<ParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			ScalarExpression scalarExpression = this.eventDeclarationValue();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token);
				parenthesisExpression.Expression = scalarExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token2);
			}
			return parenthesisExpression;
		}

		// Token: 0x06000BFD RID: 3069 RVA: 0x0003FEA4 File Offset: 0x0003E0A4
		public Literal eventSessionLiteral()
		{
			int num = this.LA(1);
			Literal literal;
			switch (num)
			{
			case 221:
				literal = this.integer();
				break;
			case 222:
				literal = this.numeric();
				break;
			case 223:
				literal = this.real();
				break;
			default:
				switch (num)
				{
				case 230:
				case 231:
					literal = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				break;
			}
			return literal;
		}

		// Token: 0x06000BFE RID: 3070 RVA: 0x0003FF20 File Offset: 0x0003E120
		public NumericLiteral numeric()
		{
			NumericLiteral numericLiteral = base.FragmentFactory.CreateFragment<NumericLiteral>();
			IToken token = this.LT(1);
			this.match(222);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(numericLiteral, token);
				numericLiteral.Value = token.getText();
			}
			return numericLiteral;
		}

		// Token: 0x06000BFF RID: 3071 RVA: 0x0003FF70 File Offset: 0x0003E170
		public RealLiteral real()
		{
			RealLiteral realLiteral = base.FragmentFactory.CreateFragment<RealLiteral>();
			IToken token = this.LT(1);
			this.match(223);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(realLiteral, token);
				realLiteral.Value = token.getText();
			}
			return realLiteral;
		}

		// Token: 0x06000C00 RID: 3072 RVA: 0x0003FFC0 File Offset: 0x0003E1C0
		public BooleanExpression eventBooleanExpressionOr()
		{
			BooleanExpression booleanExpression = null;
			booleanExpression = this.eventBooleanExpressionAnd();
			while (this.LA(1) == 112)
			{
				this.match(112);
				BooleanExpression booleanExpression2 = this.eventBooleanExpressionAnd();
				if (this.inputState.guessing == 0)
				{
					base.AddBinaryExpression(ref booleanExpression, booleanExpression2, BooleanBinaryExpressionType.Or);
				}
			}
			return booleanExpression;
		}

		// Token: 0x06000C01 RID: 3073 RVA: 0x0004000C File Offset: 0x0003E20C
		public BooleanExpression eventBooleanExpressionAnd()
		{
			BooleanExpression booleanExpression = null;
			booleanExpression = this.eventBooleanExpressionUnary();
			while (this.LA(1) == 7)
			{
				this.match(7);
				BooleanExpression booleanExpression2 = this.eventBooleanExpressionUnary();
				if (this.inputState.guessing == 0)
				{
					base.AddBinaryExpression(ref booleanExpression, booleanExpression2, BooleanBinaryExpressionType.And);
				}
			}
			return booleanExpression;
		}

		// Token: 0x06000C02 RID: 3074 RVA: 0x00040054 File Offset: 0x0003E254
		public BooleanExpression eventBooleanExpressionUnary()
		{
			BooleanExpression booleanExpression = null;
			int num = this.LA(1);
			if (num != 99)
			{
				if (num != 191)
				{
					switch (num)
					{
					case 232:
					case 233:
						booleanExpression = this.eventDeclarationPredicateParameter();
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					booleanExpression = this.eventBooleanExpressionParenthesis();
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(99);
				BooleanExpression booleanExpression2 = this.eventBooleanExpressionUnary();
				if (this.inputState.guessing == 0)
				{
					BooleanNotExpression booleanNotExpression = base.FragmentFactory.CreateFragment<BooleanNotExpression>();
					booleanExpression = booleanNotExpression;
					TSql80ParserBaseInternal.UpdateTokenInfo(booleanNotExpression, token);
					booleanNotExpression.Expression = booleanExpression2;
				}
			}
			return booleanExpression;
		}

		// Token: 0x06000C03 RID: 3075 RVA: 0x000400FC File Offset: 0x0003E2FC
		public BooleanParenthesisExpression eventBooleanExpressionParenthesis()
		{
			BooleanParenthesisExpression booleanParenthesisExpression = base.FragmentFactory.CreateFragment<BooleanParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			BooleanExpression booleanExpression = this.eventBooleanExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token);
				booleanParenthesisExpression.Expression = booleanExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token2);
			}
			return booleanParenthesisExpression;
		}

		// Token: 0x06000C04 RID: 3076 RVA: 0x0004016C File Offset: 0x0003E36C
		public BooleanExpression eventDeclarationPredicateParameter()
		{
			BooleanExpression booleanExpression = null;
			SourceDeclaration sourceDeclaration = base.FragmentFactory.CreateFragment<SourceDeclaration>();
			EventDeclarationCompareFunctionParameter eventDeclarationCompareFunctionParameter = base.FragmentFactory.CreateFragment<EventDeclarationCompareFunctionParameter>();
			BooleanComparisonExpression booleanComparisonExpression = base.FragmentFactory.CreateFragment<BooleanComparisonExpression>();
			EventSessionObjectName eventSessionObjectName = this.eventSessionOneOrTwoOrThreePartObjectName();
			int num = this.LA(1);
			if (num != 188)
			{
				if (num != 191)
				{
					switch (num)
					{
					case 205:
					case 206:
					case 208:
						goto IL_00F9;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(191);
				if (this.inputState.guessing == 0)
				{
					if (eventSessionObjectName.MultiPartIdentifier.Count < 2)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
					}
					sourceDeclaration.Value = eventSessionObjectName;
					eventDeclarationCompareFunctionParameter.Name = eventSessionObjectName;
				}
				this.eventDeclarationCompareFunction(eventDeclarationCompareFunctionParameter);
				if (this.inputState.guessing == 0)
				{
					booleanExpression = eventDeclarationCompareFunctionParameter;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(booleanExpression, token2);
					return booleanExpression;
				}
				return booleanExpression;
			}
			IL_00F9:
			this.eventDeclarationComparisonPredicate(booleanComparisonExpression, eventSessionObjectName);
			if (this.inputState.guessing == 0)
			{
				booleanExpression = booleanComparisonExpression;
			}
			return booleanExpression;
		}

		// Token: 0x06000C05 RID: 3077 RVA: 0x000402A4 File Offset: 0x0003E4A4
		public EventSessionObjectName eventSessionOneOrTwoOrThreePartObjectName()
		{
			EventSessionObjectName eventSessionObjectName = base.FragmentFactory.CreateFragment<EventSessionObjectName>();
			MultiPartIdentifier multiPartIdentifier = this.oneOrTwoOrThreePartObjectName();
			if (this.inputState.guessing == 0)
			{
				eventSessionObjectName.MultiPartIdentifier = multiPartIdentifier;
			}
			return eventSessionObjectName;
		}

		// Token: 0x06000C06 RID: 3078 RVA: 0x000402DC File Offset: 0x0003E4DC
		public void eventDeclarationCompareFunction(EventDeclarationCompareFunctionParameter vParent)
		{
			SourceDeclaration sourceDeclaration = base.FragmentFactory.CreateFragment<SourceDeclaration>();
			EventSessionObjectName eventSessionObjectName = this.eventSessionOneOrTwoOrThreePartObjectName();
			this.match(198);
			ScalarExpression scalarExpression = this.eventDeclarationValue();
			if (this.inputState.guessing == 0)
			{
				sourceDeclaration.Value = eventSessionObjectName;
				vParent.SourceDeclaration = sourceDeclaration;
				vParent.EventValue = scalarExpression;
			}
		}

		// Token: 0x06000C07 RID: 3079 RVA: 0x00040330 File Offset: 0x0003E530
		public void eventDeclarationComparisonPredicate(BooleanComparisonExpression vParent, EventSessionObjectName vSource)
		{
			SourceDeclaration sourceDeclaration = base.FragmentFactory.CreateFragment<SourceDeclaration>();
			BooleanComparisonType booleanComparisonType = this.comparisonOperator();
			ScalarExpression scalarExpression = this.eventDeclarationValue();
			if (this.inputState.guessing == 0)
			{
				sourceDeclaration.Value = vSource;
				vParent.FirstExpression = sourceDeclaration;
				vParent.ComparisonType = booleanComparisonType;
				vParent.SecondExpression = scalarExpression;
			}
		}

		// Token: 0x06000C08 RID: 3080 RVA: 0x00040384 File Offset: 0x0003E584
		public BooleanComparisonType comparisonOperator()
		{
			BooleanComparisonType booleanComparisonType = BooleanComparisonType.Equals;
			int num = this.LA(1);
			if (num != 188)
			{
				switch (num)
				{
				case 205:
				{
					this.match(205);
					if (this.inputState.guessing == 0)
					{
						booleanComparisonType = BooleanComparisonType.LessThan;
					}
					int num2 = this.LA(1);
					if (num2 <= 101)
					{
						if (num2 <= 25)
						{
							if (num2 <= 8)
							{
								if (num2 == 5 || num2 == 8)
								{
									return booleanComparisonType;
								}
							}
							else if (num2 == 20 || num2 == 25)
							{
								return booleanComparisonType;
							}
						}
						else if (num2 <= 41)
						{
							if (num2 == 34)
							{
								return booleanComparisonType;
							}
							switch (num2)
							{
							case 40:
							case 41:
								return booleanComparisonType;
							}
						}
						else
						{
							if (num2 == 81 || num2 == 93)
							{
								return booleanComparisonType;
							}
							switch (num2)
							{
							case 100:
							case 101:
								return booleanComparisonType;
							}
						}
					}
					else if (num2 <= 147)
					{
						if (num2 <= 136)
						{
							if (num2 == 133 || num2 == 136)
							{
								return booleanComparisonType;
							}
						}
						else
						{
							if (num2 == 141)
							{
								return booleanComparisonType;
							}
							switch (num2)
							{
							case 145:
							case 147:
								return booleanComparisonType;
							}
						}
					}
					else if (num2 <= 187)
					{
						if (num2 == 163 || num2 == 187)
						{
							return booleanComparisonType;
						}
					}
					else
					{
						switch (num2)
						{
						case 191:
						case 193:
							return booleanComparisonType;
						case 192:
							break;
						default:
							switch (num2)
							{
							case 197:
							case 199:
							case 200:
								return booleanComparisonType;
							case 198:
								break;
							default:
								switch (num2)
								{
								case 206:
									this.match(206);
									if (this.inputState.guessing == 0)
									{
										return BooleanComparisonType.LessThanOrEqualTo;
									}
									return booleanComparisonType;
								case 208:
									this.match(208);
									if (this.inputState.guessing == 0)
									{
										return BooleanComparisonType.NotEqualToBrackets;
									}
									return booleanComparisonType;
								case 211:
								case 221:
								case 222:
								case 223:
								case 224:
								case 225:
								case 227:
								case 228:
								case 230:
								case 231:
								case 232:
								case 233:
								case 234:
								case 235:
									return booleanComparisonType;
								}
								break;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				case 206:
					this.match(206);
					if (this.inputState.guessing == 0)
					{
						return BooleanComparisonType.Equals;
					}
					return booleanComparisonType;
				case 208:
				{
					this.match(208);
					if (this.inputState.guessing == 0)
					{
						booleanComparisonType = BooleanComparisonType.GreaterThan;
					}
					int num3 = this.LA(1);
					if (num3 <= 101)
					{
						if (num3 <= 25)
						{
							if (num3 <= 8)
							{
								if (num3 == 5 || num3 == 8)
								{
									return booleanComparisonType;
								}
							}
							else if (num3 == 20 || num3 == 25)
							{
								return booleanComparisonType;
							}
						}
						else if (num3 <= 41)
						{
							if (num3 == 34)
							{
								return booleanComparisonType;
							}
							switch (num3)
							{
							case 40:
							case 41:
								return booleanComparisonType;
							}
						}
						else
						{
							if (num3 == 81 || num3 == 93)
							{
								return booleanComparisonType;
							}
							switch (num3)
							{
							case 100:
							case 101:
								return booleanComparisonType;
							}
						}
					}
					else if (num3 <= 163)
					{
						if (num3 <= 136)
						{
							if (num3 == 133 || num3 == 136)
							{
								return booleanComparisonType;
							}
						}
						else
						{
							if (num3 == 141)
							{
								return booleanComparisonType;
							}
							switch (num3)
							{
							case 145:
							case 147:
								return booleanComparisonType;
							case 146:
								break;
							default:
								if (num3 == 163)
								{
									return booleanComparisonType;
								}
								break;
							}
						}
					}
					else if (num3 <= 193)
					{
						if (num3 == 187)
						{
							return booleanComparisonType;
						}
						switch (num3)
						{
						case 191:
						case 193:
							return booleanComparisonType;
						}
					}
					else
					{
						switch (num3)
						{
						case 197:
						case 199:
						case 200:
							return booleanComparisonType;
						case 198:
							break;
						default:
							if (num3 != 206)
							{
								switch (num3)
								{
								case 211:
								case 221:
								case 222:
								case 223:
								case 224:
								case 225:
								case 227:
								case 228:
								case 230:
								case 231:
								case 232:
								case 233:
								case 234:
								case 235:
									return booleanComparisonType;
								}
							}
							else
							{
								this.match(206);
								if (this.inputState.guessing == 0)
								{
									return BooleanComparisonType.GreaterThanOrEqualTo;
								}
								return booleanComparisonType;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.match(188);
			switch (this.LA(1))
			{
			case 205:
				this.match(205);
				if (this.inputState.guessing == 0)
				{
					return BooleanComparisonType.NotLessThan;
				}
				return booleanComparisonType;
			case 206:
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					return BooleanComparisonType.NotEqualToExclamation;
				}
				return booleanComparisonType;
			case 208:
				this.match(208);
				if (this.inputState.guessing == 0)
				{
					return BooleanComparisonType.NotGreaterThan;
				}
				return booleanComparisonType;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C09 RID: 3081 RVA: 0x000408BC File Offset: 0x0003EABC
		public CreateFullTextCatalogStatement createFulltextCatalogStatement()
		{
			CreateFullTextCatalogStatement createFullTextCatalogStatement = base.FragmentFactory.CreateFragment<CreateFullTextCatalogStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CATALOG");
				createFullTextCatalogStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createFullTextCatalogStatement);
			}
			int num = this.LA(1);
			if (num <= 106)
			{
				if (num <= 64)
				{
					if (num <= 23)
					{
						switch (num)
						{
						case 1:
						case 4:
						case 6:
						case 9:
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_034A;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								goto IL_034A;
							}
							break;
						}
					}
					else
					{
						if (num == 28)
						{
							goto IL_034A;
						}
						switch (num)
						{
						case 33:
						case 35:
							goto IL_034A;
						case 34:
							break;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_034A;
							}
							break;
						}
					}
				}
				else if (num <= 86)
				{
					switch (num)
					{
					case 74:
					case 75:
						goto IL_034A;
					default:
						switch (num)
						{
						case 82:
						case 83:
						case 86:
							goto IL_034A;
						}
						break;
					}
				}
				else
				{
					if (num == 92 || num == 95)
					{
						goto IL_034A;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						IToken token2 = this.LT(1);
						this.match(232);
						Identifier identifier2 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "FILEGROUP");
							createFullTextCatalogStatement.FileGroup = identifier2;
							goto IL_034A;
						}
						goto IL_034A;
					}
					case 106:
						goto IL_034A;
					}
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 119)
					{
						goto IL_034A;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_034A;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_034A;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_034A;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								goto IL_034A;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 182 || num == 191)
				{
					goto IL_034A;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_034A;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_034A;
				default:
					if (num == 232)
					{
						goto IL_034A;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_034A:
			int num2 = this.LA(1);
			if (num2 <= 106)
			{
				if (num2 <= 64)
				{
					if (num2 <= 23)
					{
						switch (num2)
						{
						case 1:
						case 4:
						case 6:
						case 9:
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0634;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_0634;
							}
							break;
						}
					}
					else
					{
						if (num2 == 28)
						{
							goto IL_0634;
						}
						switch (num2)
						{
						case 33:
						case 35:
							goto IL_0634;
						case 34:
							break;
						default:
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_0634;
							}
							break;
						}
					}
				}
				else if (num2 <= 86)
				{
					switch (num2)
					{
					case 74:
					case 75:
						goto IL_0634;
					default:
						switch (num2)
						{
						case 82:
						case 86:
							goto IL_0634;
						case 83:
						{
							this.match(83);
							IToken token3 = this.LT(1);
							this.match(232);
							Literal literal = this.stringLiteral();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token3, "PATH");
								createFullTextCatalogStatement.Path = literal;
								goto IL_0634;
							}
							goto IL_0634;
						}
						}
						break;
					}
				}
				else if (num2 == 92 || num2 == 95 || num2 == 106)
				{
					goto IL_0634;
				}
			}
			else if (num2 <= 176)
			{
				if (num2 <= 144)
				{
					if (num2 == 119)
					{
						goto IL_0634;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0634;
					}
				}
				else
				{
					switch (num2)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_0634;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num2)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_0634;
						case 168:
						case 169:
							break;
						default:
							if (num2 == 176)
							{
								goto IL_0634;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 182 || num2 == 191)
				{
					goto IL_0634;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_0634;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_0634;
				default:
					if (num2 == 232)
					{
						goto IL_0634;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0634:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				FullTextCatalogOption fullTextCatalogOption = this.accentSensitivity();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextCatalogOption>(createFullTextCatalogStatement, createFullTextCatalogStatement.Options, fullTextCatalogOption);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_65_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 64)
				{
					if (num3 <= 23)
					{
						switch (num3)
						{
						case 1:
						case 4:
						case 6:
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0980;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						case 9:
						{
							this.match(9);
							IToken token4 = this.LT(1);
							this.match(47);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.UpdateTokenInfo(createFullTextCatalogStatement, token4);
								createFullTextCatalogStatement.IsDefault = true;
								goto IL_0980;
							}
							goto IL_0980;
						}
						default:
							switch (num3)
							{
							case 22:
							case 23:
								goto IL_0980;
							}
							break;
						}
					}
					else
					{
						if (num3 == 28)
						{
							goto IL_0980;
						}
						switch (num3)
						{
						case 33:
						case 35:
							goto IL_0980;
						case 34:
							break;
						default:
							switch (num3)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_0980;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 74:
					case 75:
						goto IL_0980;
					default:
						if (num3 == 82)
						{
							goto IL_0980;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					goto IL_0980;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 119)
				{
					if (num3 == 106 || num3 == 119)
					{
						goto IL_0980;
					}
				}
				else
				{
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0980;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0980;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num3)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0980;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176 || num3 == 182 || num3 == 191)
				{
					goto IL_0980;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_0980;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_0980;
				default:
					if (num3 == 232)
					{
						goto IL_0980;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0980:
			this.authorizationOpt(createFullTextCatalogStatement);
			return createFullTextCatalogStatement;
		}

		// Token: 0x06000C0A RID: 3082 RVA: 0x00041254 File Offset: 0x0003F454
		public CreateFullTextIndexStatement createFulltextIndexStatement()
		{
			CreateFullTextIndexStatement createFullTextIndexStatement = base.FragmentFactory.CreateFragment<CreateFullTextIndexStatement>();
			this.match(84);
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				createFullTextIndexStatement.OnName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createFullTextIndexStatement);
			}
			int num = this.LA(1);
			if (num != 91)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				FullTextIndexColumn fullTextIndexColumn = this.fulltextIndexColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(createFullTextIndexStatement, createFullTextIndexStatement.FullTextIndexColumns, fullTextIndexColumn);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					fullTextIndexColumn = this.fulltextIndexColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(createFullTextIndexStatement, createFullTextIndexStatement.FullTextIndexColumns, fullTextIndexColumn);
					}
				}
				this.match(192);
			}
			this.match(91);
			this.match(84);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createFullTextIndexStatement.KeyIndexName = identifier;
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_03AF;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_03AF;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_03AF;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_03AF;
							default:
								if (num2 == 28)
								{
									goto IL_03AF;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 33:
					case 35:
						goto IL_03AF;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_03AF;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_03AF;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					goto IL_03AF;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 119)
				{
					if (num2 == 95)
					{
						goto IL_03AF;
					}
					switch (num2)
					{
					case 105:
					{
						FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup = this.fullTextCatalogAndFileGroup();
						if (this.inputState.guessing == 0)
						{
							createFullTextIndexStatement.CatalogAndFileGroup = fullTextCatalogAndFileGroup;
							goto IL_03AF;
						}
						goto IL_03AF;
					}
					case 106:
						goto IL_03AF;
					default:
						if (num2 == 119)
						{
							goto IL_03AF;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_03AF;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_03AF;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_03AF;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176 || num2 == 182 || num2 == 191)
				{
					goto IL_03AF;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_03AF;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_03AF;
				default:
					if (num2 == 232)
					{
						goto IL_03AF;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_03AF:
			this.createFulltextOptions(createFullTextIndexStatement);
			return createFullTextIndexStatement;
		}

		// Token: 0x06000C0B RID: 3083 RVA: 0x00041618 File Offset: 0x0003F818
		public CreateFullTextStopListStatement createFulltextStoplistStatement()
		{
			CreateFullTextStopListStatement createFullTextStopListStatement = base.FragmentFactory.CreateFragment<CreateFullTextStopListStatement>();
			this.match(183);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createFullTextStopListStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createFullTextStopListStatement);
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0459;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0459;
						}
					}
					else
					{
						switch (num)
						{
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_0459;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
						case 21:
							break;
						default:
							if (num == 28)
							{
								goto IL_0459;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0459;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0459;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 71:
							this.match(71);
							if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_66_.member(this.LA(2)))
							{
								if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 200)
								{
									Identifier identifier2 = this.identifier();
									this.match(200);
									if (this.inputState.guessing == 0)
									{
										createFullTextStopListStatement.DatabaseName = identifier2;
									}
								}
								else if ((this.LA(1) != 232 && this.LA(1) != 233) || !TSql110ParserInternal.tokenSet_67_.member(this.LA(2)))
								{
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
								Identifier identifier3 = this.identifier();
								if (this.inputState.guessing == 0)
								{
									createFullTextStopListStatement.SourceStopListName = identifier3;
									createFullTextStopListStatement.IsSystemStopList = false;
									goto IL_0459;
								}
								goto IL_0459;
							}
							else
							{
								if (this.LA(1) != 232 || this.LA(2) != 183)
								{
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
								IToken token = this.LT(1);
								this.match(232);
								this.match(183);
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.Match(token, "SYSTEM");
									createFullTextStopListStatement.IsSystemStopList = true;
									createFullTextStopListStatement.SourceStopListName = null;
									goto IL_0459;
								}
								goto IL_0459;
							}
							break;
						case 72:
						case 73:
							break;
						case 74:
						case 75:
							goto IL_0459;
						default:
							if (num == 82)
							{
								goto IL_0459;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_0459;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 119)
					{
						goto IL_0459;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0459;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0459;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0459;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_0459;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0459;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0459;
				default:
					if (num == 232)
					{
						goto IL_0459;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0459:
			this.authorizationOpt(createFullTextStopListStatement);
			this.requiredSemicolon(createFullTextStopListStatement, "FullText Stoplist");
			return createFullTextStopListStatement;
		}

		// Token: 0x06000C0C RID: 3084 RVA: 0x00041A94 File Offset: 0x0003FC94
		public OnOffFullTextCatalogOption accentSensitivity()
		{
			OnOffFullTextCatalogOption onOffFullTextCatalogOption = base.FragmentFactory.CreateFragment<OnOffFullTextCatalogOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(onOffFullTextCatalogOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ACCENT_SENSITIVITY");
				onOffFullTextCatalogOption.OptionKind = FullTextCatalogOptionKind.AccentSensitivity;
				onOffFullTextCatalogOption.OptionState = optionState;
			}
			return onOffFullTextCatalogOption;
		}

		// Token: 0x06000C0D RID: 3085 RVA: 0x00041AFC File Offset: 0x0003FCFC
		public FullTextIndexColumn fulltextIndexColumn()
		{
			FullTextIndexColumn fullTextIndexColumn = base.FragmentFactory.CreateFragment<FullTextIndexColumn>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				fullTextIndexColumn.Name = identifier;
			}
			if (this.LA(1) == 232 && this.LA(2) == 27 && base.NextTokenMatches("TYPE"))
			{
				this.match(232);
				this.match(27);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					fullTextIndexColumn.TypeColumn = identifier;
				}
			}
			else if ((this.LA(1) != 192 && this.LA(1) != 198 && this.LA(1) != 232) || !TSql110ParserInternal.tokenSet_68_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_69_.member(this.LA(2)) && base.NextTokenMatches("LANGUAGE"))
			{
				IdentifierOrValueExpression identifierOrValueExpression = this.languageTerm();
				if (this.inputState.guessing == 0)
				{
					fullTextIndexColumn.LanguageTerm = identifierOrValueExpression;
				}
			}
			else if ((this.LA(1) != 192 && this.LA(1) != 198 && this.LA(1) != 232) || !TSql110ParserInternal.tokenSet_70_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 232 && base.NextTokenMatches("STATISTICAL_SEMANTICS"))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "STATISTICAL_SEMANTICS");
					fullTextIndexColumn.StatisticalSemantics = true;
				}
			}
			else if (this.LA(1) != 192 && this.LA(1) != 198)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return fullTextIndexColumn;
		}

		// Token: 0x06000C0E RID: 3086 RVA: 0x00041CF4 File Offset: 0x0003FEF4
		public IdentifierOrValueExpression languageTerm()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LANGUAGE");
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
					{
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.CheckIfValidLanguageString(literal);
							identifierOrValueExpression.ValueExpression = literal;
						}
						break;
					}
					case 232:
					case 233:
					{
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.CheckIfValidLanguageIdentifier(identifier);
							identifierOrValueExpression.Identifier = identifier;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					Literal literal = this.binary();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.CheckIfValidLanguageHex(literal);
						identifierOrValueExpression.ValueExpression = literal;
					}
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckIfValidLanguageInteger(literal);
					identifierOrValueExpression.ValueExpression = literal;
				}
			}
			return identifierOrValueExpression;
		}

		// Token: 0x06000C0F RID: 3087 RVA: 0x00041E20 File Offset: 0x00040020
		public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup()
		{
			FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup = base.FragmentFactory.CreateFragment<FullTextCatalogAndFileGroup>();
			IToken token = this.LT(1);
			this.match(105);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fullTextCatalogAndFileGroup, token);
			}
			int num = this.LA(1);
			if (num != 191)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						fullTextCatalogAndFileGroup.CatalogName = identifier;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(191);
				if ((this.LA(1) == 232 || this.LA(1) == 233) && (this.LA(2) == 192 || this.LA(2) == 198))
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						fullTextCatalogAndFileGroup.CatalogName = identifier;
						fullTextCatalogAndFileGroup.FileGroupIsFirst = false;
					}
					int num2 = this.LA(1);
					if (num2 != 192)
					{
						if (num2 != 198)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(198);
						IToken token2 = this.LT(1);
						this.match(232);
						Identifier identifier2 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "FILEGROUP");
							fullTextCatalogAndFileGroup.FileGroupName = identifier2;
						}
					}
				}
				else
				{
					if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token3 = this.LT(1);
					this.match(232);
					Identifier identifier2 = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "FILEGROUP");
						fullTextCatalogAndFileGroup.FileGroupName = identifier2;
						fullTextCatalogAndFileGroup.FileGroupIsFirst = true;
					}
					int num3 = this.LA(1);
					if (num3 != 192)
					{
						if (num3 != 198)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(198);
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							fullTextCatalogAndFileGroup.CatalogName = identifier;
						}
					}
				}
				IToken token4 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(fullTextCatalogAndFileGroup, token4);
				}
			}
			return fullTextCatalogAndFileGroup;
		}

		// Token: 0x06000C10 RID: 3088 RVA: 0x000420C0 File Offset: 0x000402C0
		public void createFulltextOptions(CreateFullTextIndexStatement vParent)
		{
			if (this.LA(1) == 171 && (this.LA(2) == 183 || this.LA(2) == 191 || this.LA(2) == 232))
			{
				this.match(171);
				int num = this.LA(1);
				if (num != 183)
				{
					if (num != 191)
					{
						if (num != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(191);
						this.createFulltextOptionsList(vParent);
						IToken token = this.LT(1);
						this.match(192);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
							return;
						}
						return;
					}
				}
				this.createFulltextOptionsList(vParent);
				return;
			}
			if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C11 RID: 3089 RVA: 0x000421C8 File Offset: 0x000403C8
		public void createFulltextOptionsList(CreateFullTextIndexStatement vParent)
		{
			int num = 0;
			FullTextIndexOption fullTextIndexOption = this.fullTextIndexOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fullTextIndexOption.OptionKind, fullTextIndexOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexOption>(vParent, vParent.Options, fullTextIndexOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				fullTextIndexOption = this.fullTextIndexOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fullTextIndexOption.OptionKind, fullTextIndexOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexOption>(vParent, vParent.Options, fullTextIndexOption);
				}
			}
		}

		// Token: 0x06000C12 RID: 3090 RVA: 0x00042250 File Offset: 0x00040450
		public FullTextIndexOption fullTextIndexOption()
		{
			FullTextIndexOption fullTextIndexOption;
			if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206 || this.LA(2) == 232) && base.NextTokenMatches("CHANGE_TRACKING"))
			{
				fullTextIndexOption = this.changeTrackingFulltextIndexOption();
			}
			else if (this.LA(1) == 183)
			{
				fullTextIndexOption = this.stoplistFulltextIndexOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				fullTextIndexOption = this.searchPropertyListFullTextIndexOption();
			}
			return fullTextIndexOption;
		}

		// Token: 0x06000C13 RID: 3091 RVA: 0x000422F8 File Offset: 0x000404F8
		public ChangeTrackingFullTextIndexOption changeTrackingFulltextIndexOption()
		{
			ChangeTrackingFullTextIndexOption changeTrackingFullTextIndexOption = base.FragmentFactory.CreateFragment<ChangeTrackingFullTextIndexOption>();
			IToken token = this.LT(1);
			this.match(232);
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 206)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(206);
				}
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING");
				changeTrackingFullTextIndexOption.OptionKind = FullTextIndexOptionKind.ChangeTracking;
				TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token);
			}
			int num2 = this.LA(1);
			if (num2 != 103)
			{
				if (num2 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "MANUAL"))
					{
						changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Manual;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "AUTO");
						changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Auto;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token3);
					changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Off;
				}
				if (this.LA(1) == 198 && this.LA(2) == 232)
				{
					this.match(198);
					IToken token4 = this.LT(1);
					this.match(232);
					IToken token5 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token4, "NO");
						TSql80ParserBaseInternal.Match(token5, "POPULATION");
						TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token5);
						changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.OffNoPopulation;
					}
				}
				else if (!TSql110ParserInternal.tokenSet_71_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return changeTrackingFullTextIndexOption;
		}

		// Token: 0x06000C14 RID: 3092 RVA: 0x00042510 File Offset: 0x00040710
		public StopListFullTextIndexOption stoplistFulltextIndexOption()
		{
			StopListFullTextIndexOption stopListFullTextIndexOption = base.FragmentFactory.CreateFragment<StopListFullTextIndexOption>();
			IToken token = this.LT(1);
			this.match(183);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(stopListFullTextIndexOption, token);
				stopListFullTextIndexOption.OptionKind = FullTextIndexOptionKind.StopList;
			}
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 206)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(206);
				}
			}
			int num2 = this.LA(1);
			if (num2 != 103)
			{
				switch (num2)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						stopListFullTextIndexOption.StopListName = identifier;
						stopListFullTextIndexOption.IsOff = false;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					stopListFullTextIndexOption.IsOff = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(stopListFullTextIndexOption, token2);
				}
			}
			return stopListFullTextIndexOption;
		}

		// Token: 0x06000C15 RID: 3093 RVA: 0x00042638 File Offset: 0x00040838
		public SearchPropertyListFullTextIndexOption searchPropertyListFullTextIndexOption()
		{
			SearchPropertyListFullTextIndexOption searchPropertyListFullTextIndexOption = base.FragmentFactory.CreateFragment<SearchPropertyListFullTextIndexOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SEARCH");
				TSql80ParserBaseInternal.Match(token2, "PROPERTY");
				TSql80ParserBaseInternal.Match(token3, "LIST");
				searchPropertyListFullTextIndexOption.OptionKind = FullTextIndexOptionKind.SearchPropertyList;
			}
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 206)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(206);
				}
			}
			int num2 = this.LA(1);
			if (num2 != 103)
			{
				switch (num2)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						searchPropertyListFullTextIndexOption.PropertyListName = identifier;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token4 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					searchPropertyListFullTextIndexOption.IsOff = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(searchPropertyListFullTextIndexOption, token4);
				}
			}
			return searchPropertyListFullTextIndexOption;
		}

		// Token: 0x06000C16 RID: 3094 RVA: 0x000427A0 File Offset: 0x000409A0
		public void requiredSemicolon(TSqlFragment vParent, string vStatement)
		{
			IToken token = null;
			if (this.LA(1) == 204 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				token = this.LT(1);
				this.match(204);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0 && token == null)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46097", vParent, TSqlParserResource.SQL46097Message, new string[] { vStatement });
			}
		}

		// Token: 0x06000C17 RID: 3095 RVA: 0x00042860 File Offset: 0x00040A60
		public AlterFullTextStopListStatement alterFulltextStoplistStatement()
		{
			AlterFullTextStopListStatement alterFullTextStopListStatement = base.FragmentFactory.CreateFragment<AlterFullTextStopListStatement>();
			this.match(183);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterFullTextStopListStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterFullTextStopListStatement);
			}
			FullTextStopListAction fullTextStopListAction = this.fulltextStoplistAction();
			if (this.inputState.guessing == 0)
			{
				alterFullTextStopListStatement.Action = fullTextStopListAction;
			}
			this.requiredSemicolon(alterFullTextStopListStatement, "FullText Stoplist");
			return alterFullTextStopListStatement;
		}

		// Token: 0x06000C18 RID: 3096 RVA: 0x000428D0 File Offset: 0x00040AD0
		public FullTextStopListAction fulltextStoplistAction()
		{
			int num = this.LA(1);
			FullTextStopListAction fullTextStopListAction;
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				fullTextStopListAction = this.dropFulltextStoplistAction();
			}
			else
			{
				fullTextStopListAction = this.addFulltextStoplistAction();
			}
			return fullTextStopListAction;
		}

		// Token: 0x06000C19 RID: 3097 RVA: 0x00042918 File Offset: 0x00040B18
		public FullTextStopListAction addFulltextStoplistAction()
		{
			FullTextStopListAction fullTextStopListAction = base.FragmentFactory.CreateFragment<FullTextStopListAction>();
			this.match(4);
			if (this.inputState.guessing == 0)
			{
				fullTextStopListAction.IsAdd = true;
			}
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				fullTextStopListAction.StopWord = literal;
			}
			IdentifierOrValueExpression identifierOrValueExpression = this.languageTerm();
			if (this.inputState.guessing == 0)
			{
				fullTextStopListAction.LanguageTerm = identifierOrValueExpression;
			}
			return fullTextStopListAction;
		}

		// Token: 0x06000C1A RID: 3098 RVA: 0x00042984 File Offset: 0x00040B84
		public FullTextStopListAction dropFulltextStoplistAction()
		{
			FullTextStopListAction fullTextStopListAction = base.FragmentFactory.CreateFragment<FullTextStopListAction>();
			this.match(54);
			if (this.inputState.guessing == 0)
			{
				fullTextStopListAction.IsAdd = false;
			}
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						fullTextStopListAction.StopWord = literal;
					}
					IdentifierOrValueExpression identifierOrValueExpression = this.languageTerm();
					if (this.inputState.guessing == 0)
					{
						fullTextStopListAction.LanguageTerm = identifierOrValueExpression;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					fullTextStopListAction.IsAll = true;
				}
				if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_69_.member(this.LA(2)))
				{
					IdentifierOrValueExpression identifierOrValueExpression = this.languageTerm();
					if (this.inputState.guessing == 0)
					{
						fullTextStopListAction.LanguageTerm = identifierOrValueExpression;
					}
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return fullTextStopListAction;
		}

		// Token: 0x06000C1B RID: 3099 RVA: 0x00042AC4 File Offset: 0x00040CC4
		public BinaryLiteral binary()
		{
			BinaryLiteral binaryLiteral = base.FragmentFactory.CreateFragment<BinaryLiteral>();
			IToken token = this.LT(1);
			this.match(224);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(binaryLiteral, token);
				binaryLiteral.Value = token.getText();
				binaryLiteral.IsLargeObject = TSql80ParserBaseInternal.IsBinaryLiteralLob(binaryLiteral.Value);
			}
			return binaryLiteral;
		}

		// Token: 0x06000C1C RID: 3100 RVA: 0x00042B24 File Offset: 0x00040D24
		public DropFullTextStopListStatement dropFulltextStoplistStatement()
		{
			DropFullTextStopListStatement dropFullTextStopListStatement = base.FragmentFactory.CreateFragment<DropFullTextStopListStatement>();
			this.match(183);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				dropFullTextStopListStatement.Name = identifier;
			}
			this.requiredSemicolon(dropFullTextStopListStatement, "FullText Stoplist");
			return dropFullTextStopListStatement;
		}

		// Token: 0x06000C1D RID: 3101 RVA: 0x00042B70 File Offset: 0x00040D70
		public AlterSearchPropertyListStatement alterSearchPropertyListStatement()
		{
			AlterSearchPropertyListStatement alterSearchPropertyListStatement = base.FragmentFactory.CreateFragment<AlterSearchPropertyListStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SEARCH");
				TSql80ParserBaseInternal.Match(token2, "PROPERTY");
				TSql80ParserBaseInternal.Match(token3, "LIST");
				alterSearchPropertyListStatement.Name = identifier;
			}
			SearchPropertyListAction searchPropertyListAction = this.searchPropertyListAction();
			if (this.inputState.guessing == 0)
			{
				alterSearchPropertyListStatement.Action = searchPropertyListAction;
			}
			this.requiredSemicolon(alterSearchPropertyListStatement, "Search Property List");
			return alterSearchPropertyListStatement;
		}

		// Token: 0x06000C1E RID: 3102 RVA: 0x00042C30 File Offset: 0x00040E30
		public SearchPropertyListAction searchPropertyListAction()
		{
			int num = this.LA(1);
			SearchPropertyListAction searchPropertyListAction;
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				searchPropertyListAction = this.dropSearchPropertyListAction();
			}
			else
			{
				searchPropertyListAction = this.addSearchPropertyListAction();
			}
			return searchPropertyListAction;
		}

		// Token: 0x06000C1F RID: 3103 RVA: 0x00042C78 File Offset: 0x00040E78
		public AddSearchPropertyListAction addSearchPropertyListAction()
		{
			AddSearchPropertyListAction addSearchPropertyListAction = base.FragmentFactory.CreateFragment<AddSearchPropertyListAction>();
			IToken token = this.LT(1);
			this.match(4);
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				addSearchPropertyListAction.PropertyName = stringLiteral;
				TSql80ParserBaseInternal.UpdateTokenInfo(addSearchPropertyListAction, token);
			}
			this.match(171);
			this.match(191);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			StringLiteral stringLiteral2 = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "PROPERTY_SET_GUID");
				addSearchPropertyListAction.Guid = stringLiteral2;
			}
			this.match(198);
			IToken token3 = this.LT(1);
			this.match(232);
			this.match(206);
			IntegerLiteral integerLiteral = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "PROPERTY_INT_ID");
				addSearchPropertyListAction.Id = integerLiteral;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				this.LT(1);
				this.match(232);
				this.match(206);
				StringLiteral stringLiteral3 = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					addSearchPropertyListAction.Description = stringLiteral3;
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(addSearchPropertyListAction, token4);
			}
			return addSearchPropertyListAction;
		}

		// Token: 0x06000C20 RID: 3104 RVA: 0x00042E1C File Offset: 0x0004101C
		public DropSearchPropertyListAction dropSearchPropertyListAction()
		{
			DropSearchPropertyListAction dropSearchPropertyListAction = base.FragmentFactory.CreateFragment<DropSearchPropertyListAction>();
			IToken token = this.LT(1);
			this.match(54);
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(dropSearchPropertyListAction, token);
				dropSearchPropertyListAction.PropertyName = stringLiteral;
			}
			return dropSearchPropertyListAction;
		}

		// Token: 0x06000C21 RID: 3105 RVA: 0x00042E6C File Offset: 0x0004106C
		public DropSearchPropertyListStatement dropSearchPropertyListStatement()
		{
			DropSearchPropertyListStatement dropSearchPropertyListStatement = base.FragmentFactory.CreateFragment<DropSearchPropertyListStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SEARCH");
				TSql80ParserBaseInternal.Match(token2, "PROPERTY");
				TSql80ParserBaseInternal.Match(token3, "LIST");
				dropSearchPropertyListStatement.Name = identifier;
			}
			this.requiredSemicolon(dropSearchPropertyListStatement, "Search Property List");
			return dropSearchPropertyListStatement;
		}

		// Token: 0x06000C22 RID: 3106 RVA: 0x00042F10 File Offset: 0x00041110
		public CreateXmlIndexStatement createXmlIndexStatement(bool vPrimary)
		{
			CreateXmlIndexStatement createXmlIndexStatement = base.FragmentFactory.CreateFragment<CreateXmlIndexStatement>();
			createXmlIndexStatement.Primary = vPrimary;
			this.match(84);
			Identifier identifier = this.identifier();
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				createXmlIndexStatement.Name = identifier;
				createXmlIndexStatement.OnName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createXmlIndexStatement);
			}
			this.match(191);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createXmlIndexStatement.XmlColumn = identifier;
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createXmlIndexStatement, token);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("USING"))
			{
				this.LT(1);
				this.match(232);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(84);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "XML");
				}
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					createXmlIndexStatement.SecondaryXmlIndexName = identifier;
				}
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 35)
					{
						if (num <= 17)
						{
							if (num == 1)
							{
								goto IL_0453;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_0453;
							case 5:
								break;
							default:
								switch (num)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_0453;
								}
								break;
							}
						}
						else
						{
							switch (num)
							{
							case 22:
							case 23:
								goto IL_0453;
							default:
								if (num == 28)
								{
									goto IL_0453;
								}
								switch (num)
								{
								case 33:
								case 35:
									goto IL_0453;
								}
								break;
							}
						}
					}
					else if (num <= 75)
					{
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_0453;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							if (num != 67)
							{
								switch (num)
								{
								case 74:
								case 75:
									goto IL_0453;
								}
							}
							else
							{
								this.match(67);
								IToken token3 = this.LT(1);
								this.match(232);
								if (this.inputState.guessing == 0)
								{
									createXmlIndexStatement.SecondaryXmlIndexType = SecondaryXmlIndexTypeHelper.Instance.ParseOption(token3);
									TSql80ParserBaseInternal.UpdateTokenInfo(createXmlIndexStatement, token3);
									goto IL_0453;
								}
								goto IL_0453;
							}
							break;
						}
					}
					else if (num == 82 || num == 86 || num == 92)
					{
						goto IL_0453;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num == 95 || num == 106 || num == 119)
						{
							goto IL_0453;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_0453;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_0453;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_0453;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num == 176 || num == 182 || num == 191)
					{
						goto IL_0453;
					}
				}
				else
				{
					if (num == 204)
					{
						goto IL_0453;
					}
					switch (num)
					{
					case 219:
					case 220:
						goto IL_0453;
					default:
						if (num == 232)
						{
							goto IL_0453;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IL_0453:
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.indexOptionList(IndexAffectingStatement.CreateXmlIndex, createXmlIndexStatement.IndexOptions, createXmlIndexStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createXmlIndexStatement;
		}

		// Token: 0x06000C23 RID: 3107 RVA: 0x000433E4 File Offset: 0x000415E4
		public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement()
		{
			CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<CreateXmlSchemaCollectionStatement>();
			this.match(139);
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "COLLECTION");
				createXmlSchemaCollectionStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createXmlSchemaCollectionStatement);
			}
			this.match(9);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				createXmlSchemaCollectionStatement.Expression = scalarExpression;
			}
			return createXmlSchemaCollectionStatement;
		}

		// Token: 0x06000C24 RID: 3108 RVA: 0x00043470 File Offset: 0x00041670
		public SchemaObjectName schemaObjectNonEmptyTwoPartName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return schemaObjectName;
						}
						switch (num)
						{
						case 4:
						case 6:
							return schemaObjectName;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
							return schemaObjectName;
						case 10:
						case 11:
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return schemaObjectName;
							default:
								if (num == 28)
								{
									return schemaObjectName;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return schemaObjectName;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return schemaObjectName;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return schemaObjectName;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return schemaObjectName;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return schemaObjectName;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return schemaObjectName;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return schemaObjectName;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return schemaObjectName;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 192)
			{
				if (num == 176 || num == 182)
				{
					return schemaObjectName;
				}
				switch (num)
				{
				case 191:
				case 192:
					return schemaObjectName;
				}
			}
			else
			{
				switch (num)
				{
				case 200:
					this.match(200);
					identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
						return schemaObjectName;
					}
					return schemaObjectName;
				case 201:
				case 202:
					break;
				case 203:
				case 204:
					return schemaObjectName;
				default:
					switch (num)
					{
					case 219:
					case 220:
						return schemaObjectName;
					default:
						if (num == 232)
						{
							return schemaObjectName;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C25 RID: 3109 RVA: 0x00043770 File Offset: 0x00041970
		public void indexOptionList(IndexAffectingStatement statement, IList<IndexOption> optionsList, TSqlFragment vParent)
		{
			this.match(191);
			IndexOption indexOption = this.indexOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.VerifyAllowedIndexOption(statement, indexOption);
				optionsList.Add(indexOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				indexOption = this.indexOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.VerifyAllowedIndexOption(statement, indexOption);
					optionsList.Add(indexOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000C26 RID: 3110 RVA: 0x00043810 File Offset: 0x00041A10
		public PasswordCreateLoginSource passwordLoginSource()
		{
			PasswordCreateLoginSource passwordCreateLoginSource = base.FragmentFactory.CreateFragment<PasswordCreateLoginSource>();
			int num = 0;
			this.match(171);
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.loginPassword();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PASSWORD");
				passwordCreateLoginSource.Password = literal;
			}
			while (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
			{
				this.createLoginPasswordOption(passwordCreateLoginSource);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				PrincipalOption principalOption = this.createLoginParam();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(passwordCreateLoginSource, passwordCreateLoginSource.Options, principalOption);
				}
			}
			return passwordCreateLoginSource;
		}

		// Token: 0x06000C27 RID: 3111 RVA: 0x000438F4 File Offset: 0x00041AF4
		public WindowsCreateLoginSource windowsLoginSource()
		{
			WindowsCreateLoginSource windowsCreateLoginSource = base.FragmentFactory.CreateFragment<WindowsCreateLoginSource>();
			int num = 0;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "WINDOWS");
				TSql80ParserBaseInternal.UpdateTokenInfo(windowsCreateLoginSource, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IdentifierPrincipalOption identifierPrincipalOption = this.createLoginParamWin();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(windowsCreateLoginSource, windowsCreateLoginSource.Options, identifierPrincipalOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)identifierPrincipalOption.OptionKind, identifierPrincipalOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					identifierPrincipalOption = this.createLoginParamWin();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(windowsCreateLoginSource, windowsCreateLoginSource.Options, identifierPrincipalOption);
						TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)identifierPrincipalOption.OptionKind, identifierPrincipalOption);
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return windowsCreateLoginSource;
		}

		// Token: 0x06000C28 RID: 3112 RVA: 0x00043A24 File Offset: 0x00041C24
		public CertificateCreateLoginSource certificateLoginSource()
		{
			CertificateCreateLoginSource certificateCreateLoginSource = base.FragmentFactory.CreateFragment<CertificateCreateLoginSource>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			Identifier identifier2 = this.createLoginParamCertOpt();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				certificateCreateLoginSource.Certificate = identifier;
				if (identifier2 != null)
				{
					certificateCreateLoginSource.Credential = identifier2;
				}
			}
			return certificateCreateLoginSource;
		}

		// Token: 0x06000C29 RID: 3113 RVA: 0x00043A8C File Offset: 0x00041C8C
		public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource()
		{
			AsymmetricKeyCreateLoginSource asymmetricKeyCreateLoginSource = base.FragmentFactory.CreateFragment<AsymmetricKeyCreateLoginSource>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			Identifier identifier2 = this.createLoginParamCertOpt();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				asymmetricKeyCreateLoginSource.Key = identifier;
				if (identifier2 != null)
				{
					asymmetricKeyCreateLoginSource.Credential = identifier2;
				}
			}
			return asymmetricKeyCreateLoginSource;
		}

		// Token: 0x06000C2A RID: 3114 RVA: 0x00043AFC File Offset: 0x00041CFC
		public Literal loginPassword()
		{
			int num = this.LA(1);
			Literal literal;
			if (num != 224)
			{
				switch (num)
				{
				case 230:
				case 231:
					literal = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				literal = this.binary();
			}
			return literal;
		}

		// Token: 0x06000C2B RID: 3115 RVA: 0x00043B58 File Offset: 0x00041D58
		public void createLoginPasswordOption(PasswordCreateLoginSource vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "HASHED"))
				{
					if (vParent.Hashed)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.Hashed = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "MUST_CHANGE");
					if (vParent.MustChange)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.MustChange = true;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000C2C RID: 3116 RVA: 0x00043BD4 File Offset: 0x00041DD4
		public PrincipalOption createLoginParam()
		{
			PrincipalOption principalOption = null;
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 103:
			case 105:
				principalOption = this.onOffPrincipalOption(token);
				goto IL_0108;
			case 104:
				break;
			default:
				if (num != 224)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
							identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
							identifierPrincipalOption.Identifier = identifier;
							principalOption = identifierPrincipalOption;
							goto IL_0108;
						}
						goto IL_0108;
					}
					}
				}
				else
				{
					Literal literal = this.binary();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "SID");
						LiteralPrincipalOption literalPrincipalOption = base.FragmentFactory.CreateFragment<LiteralPrincipalOption>();
						literalPrincipalOption.OptionKind = PrincipalOptionKind.Sid;
						literalPrincipalOption.Value = literal;
						principalOption = literalPrincipalOption;
						goto IL_0108;
					}
					goto IL_0108;
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0108:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(principalOption, token);
			}
			return principalOption;
		}

		// Token: 0x06000C2D RID: 3117 RVA: 0x00043D00 File Offset: 0x00041F00
		public OnOffPrincipalOption onOffPrincipalOption(IToken tOption)
		{
			OnOffPrincipalOption onOffPrincipalOption = base.FragmentFactory.CreateFragment<OnOffPrincipalOption>();
			OptionState optionState = this.optionOnOff(onOffPrincipalOption);
			if (this.inputState.guessing == 0)
			{
				onOffPrincipalOption.OptionKind = SecurityLoginOptionsHelper.Instance.ParseOption(tOption);
				onOffPrincipalOption.OptionState = optionState;
			}
			return onOffPrincipalOption;
		}

		// Token: 0x06000C2E RID: 3118 RVA: 0x00043D48 File Offset: 0x00041F48
		public IdentifierPrincipalOption createLoginParamWin()
		{
			IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
				if (identifierPrincipalOption.OptionKind == PrincipalOptionKind.Credential)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				identifierPrincipalOption.Identifier = identifier;
			}
			return identifierPrincipalOption;
		}

		// Token: 0x06000C2F RID: 3119 RVA: 0x00043DC0 File Offset: 0x00041FC0
		public Identifier createLoginParamCertOpt()
		{
			Identifier identifier = null;
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifier;
		}

		// Token: 0x06000C30 RID: 3120 RVA: 0x00043E74 File Offset: 0x00042074
		public void messageTypeValidation(MessageTypeStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "VALIDATION");
				vParent.ValidationMethod = MessageValidationMethodsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			if (this.LA(1) == 171 && this.LA(2) == 139)
			{
				IToken token3 = this.LT(1);
				this.match(171);
				this.match(139);
				IToken token4 = this.LT(1);
				this.match(232);
				SchemaObjectName schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
				if (this.inputState.guessing == 0)
				{
					if (vParent.ValidationMethod != MessageValidationMethod.ValidXml)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
					}
					TSql80ParserBaseInternal.Match(token4, "COLLECTION");
					vParent.XmlSchemaCollectionName = schemaObjectName;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0 && vParent.ValidationMethod == MessageValidationMethod.ValidXml && vParent.XmlSchemaCollectionName == null)
			{
				TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
			}
		}

		// Token: 0x06000C31 RID: 3121 RVA: 0x00043FD0 File Offset: 0x000421D0
		public LiteralAvailabilityGroupOption availabilityGroupOption()
		{
			LiteralAvailabilityGroupOption literalAvailabilityGroupOption = base.FragmentFactory.CreateFragment<LiteralAvailabilityGroupOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REQUIRED_COPIES_TO_COMMIT");
				literalAvailabilityGroupOption.Value = literal;
			}
			return literalAvailabilityGroupOption;
		}

		// Token: 0x06000C32 RID: 3122 RVA: 0x00044030 File Offset: 0x00042230
		public AvailabilityReplica availabilityReplica()
		{
			AvailabilityReplica availabilityReplica = base.FragmentFactory.CreateFragment<AvailabilityReplica>();
			int num = 0;
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				availabilityReplica.ServerName = stringLiteral;
			}
			this.match(171);
			this.match(191);
			AvailabilityReplicaOption availabilityReplicaOption = this.availabilityReplicaOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)availabilityReplicaOption.OptionKind, availabilityReplicaOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityReplicaOption>(availabilityReplica, availabilityReplica.Options, availabilityReplicaOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				availabilityReplicaOption = this.availabilityReplicaOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)availabilityReplicaOption.OptionKind, availabilityReplicaOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityReplicaOption>(availabilityReplica, availabilityReplica.Options, availabilityReplicaOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(availabilityReplica, token);
			}
			return availabilityReplica;
		}

		// Token: 0x06000C33 RID: 3123 RVA: 0x00044120 File Offset: 0x00042320
		public AlterAvailabilityGroupStatement alterAvailabilityGroupStatement()
		{
			AlterAvailabilityGroupStatement alterAvailabilityGroupStatement = base.FragmentFactory.CreateFragment<AlterAvailabilityGroupStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(76);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AVAILABILITY");
				alterAvailabilityGroupStatement.Name = identifier;
			}
			if (this.LA(1) == 4 && this.LA(2) == 43)
			{
				this.alterAvailabilityGroupAddDatabase(alterAvailabilityGroupStatement);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 43)
			{
				this.alterAvailabilityGroupRemoveDatabase(alterAvailabilityGroupStatement);
			}
			else if (this.LA(1) == 4 && this.LA(2) == 232)
			{
				this.alterAvailabilityGroupAddReplica(alterAvailabilityGroupStatement);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MODIFY"))
			{
				this.alterAvailabilityGroupModifyReplica(alterAvailabilityGroupStatement);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOVE"))
			{
				this.alterAvailabilityGroupRemoveReplica(alterAvailabilityGroupStatement);
			}
			else if (this.LA(1) == 142)
			{
				this.alterAvailabilityGroupSetOption(alterAvailabilityGroupStatement);
			}
			else
			{
				if ((this.LA(1) != 90 && this.LA(1) != 232) || !TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.alterAvailabilityGroupTakeAction(alterAvailabilityGroupStatement);
			}
			return alterAvailabilityGroupStatement;
		}

		// Token: 0x06000C34 RID: 3124 RVA: 0x000442B0 File Offset: 0x000424B0
		public void alterAvailabilityGroupAddDatabase(AlterAvailabilityGroupStatement vResult)
		{
			this.match(4);
			this.match(43);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(vResult, vResult.Databases, identifier);
				vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.AddDatabase;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(vResult, vResult.Databases, identifier);
				}
			}
		}

		// Token: 0x06000C35 RID: 3125 RVA: 0x00044330 File Offset: 0x00042530
		public void alterAvailabilityGroupRemoveDatabase(AlterAvailabilityGroupStatement vResult)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(43);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOVE");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(vResult, vResult.Databases, identifier);
				vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.RemoveDatabase;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(vResult, vResult.Databases, identifier);
				}
			}
		}

		// Token: 0x06000C36 RID: 3126 RVA: 0x000443CC File Offset: 0x000425CC
		public void alterAvailabilityGroupAddReplica(AlterAvailabilityGroupStatement vResult)
		{
			this.match(4);
			IToken token = this.LT(1);
			this.match(232);
			this.match(105);
			AvailabilityReplica availabilityReplica = this.availabilityReplica();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REPLICA");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityReplica>(vResult, vResult.Replicas, availabilityReplica);
				vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.AddReplica;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				availabilityReplica = this.availabilityReplica();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityReplica>(vResult, vResult.Replicas, availabilityReplica);
				}
			}
		}

		// Token: 0x06000C37 RID: 3127 RVA: 0x0004446C File Offset: 0x0004266C
		public void alterAvailabilityGroupModifyReplica(AlterAvailabilityGroupStatement vResult)
		{
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(105);
			AvailabilityReplica availabilityReplica = this.availabilityReplica();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MODIFY");
				TSql80ParserBaseInternal.Match(token2, "REPLICA");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityReplica>(vResult, vResult.Replicas, availabilityReplica);
				vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.ModifyReplica;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				availabilityReplica = this.availabilityReplica();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityReplica>(vResult, vResult.Replicas, availabilityReplica);
				}
			}
		}

		// Token: 0x06000C38 RID: 3128 RVA: 0x00044528 File Offset: 0x00042728
		public void alterAvailabilityGroupRemoveReplica(AlterAvailabilityGroupStatement vResult)
		{
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(105);
			AvailabilityReplica availabilityReplica = this.availabilityReplicaName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOVE");
				TSql80ParserBaseInternal.Match(token2, "REPLICA");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityReplica>(vResult, vResult.Replicas, availabilityReplica);
				vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.RemoveReplica;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				availabilityReplica = this.availabilityReplicaName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityReplica>(vResult, vResult.Replicas, availabilityReplica);
				}
			}
		}

		// Token: 0x06000C39 RID: 3129 RVA: 0x000445E4 File Offset: 0x000427E4
		public void alterAvailabilityGroupSetOption(AlterAvailabilityGroupStatement vResult)
		{
			this.match(142);
			this.match(191);
			AvailabilityGroupOption availabilityGroupOption = this.availabilityGroupOption();
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.Set;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AvailabilityGroupOption>(vResult, vResult.Options, availabilityGroupOption);
				TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
			}
		}

		// Token: 0x06000C3A RID: 3130 RVA: 0x0004464C File Offset: 0x0004284C
		public void alterAvailabilityGroupTakeAction(AlterAvailabilityGroupStatement vResult)
		{
			AlterAvailabilityGroupAction alterAvailabilityGroupAction;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)) && base.NextTokenMatches("FAILOVER"))
			{
				alterAvailabilityGroupAction = this.alterAvailabilityGroupFailoverAction();
			}
			else
			{
				if ((this.LA(1) != 90 && this.LA(1) != 232) || !TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				alterAvailabilityGroupAction = this.alterAvailabilityGroupAction();
			}
			if (this.inputState.guessing == 0)
			{
				vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.Action;
				vResult.Action = alterAvailabilityGroupAction;
			}
		}

		// Token: 0x06000C3B RID: 3131 RVA: 0x000446F4 File Offset: 0x000428F4
		public AvailabilityReplica availabilityReplicaName()
		{
			AvailabilityReplica availabilityReplica = base.FragmentFactory.CreateFragment<AvailabilityReplica>();
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				availabilityReplica.ServerName = stringLiteral;
			}
			return availabilityReplica;
		}

		// Token: 0x06000C3C RID: 3132 RVA: 0x0004472C File Offset: 0x0004292C
		public AlterAvailabilityGroupFailoverAction alterAvailabilityGroupFailoverAction()
		{
			AlterAvailabilityGroupFailoverAction alterAvailabilityGroupFailoverAction = base.FragmentFactory.CreateFragment<AlterAvailabilityGroupFailoverAction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FAILOVER");
				alterAvailabilityGroupFailoverAction.ActionType = AlterAvailabilityGroupActionType.Failover;
				TSql80ParserBaseInternal.UpdateTokenInfo(alterAvailabilityGroupFailoverAction, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.match(191);
				AlterAvailabilityGroupFailoverOption alterAvailabilityGroupFailoverOption = this.alterAvailabilityGroupFailoverOption();
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AlterAvailabilityGroupFailoverOption>(alterAvailabilityGroupFailoverAction, alterAvailabilityGroupFailoverAction.Options, alterAvailabilityGroupFailoverOption);
					TSql80ParserBaseInternal.UpdateTokenInfo(alterAvailabilityGroupFailoverAction, token2);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterAvailabilityGroupFailoverAction;
		}

		// Token: 0x06000C3D RID: 3133 RVA: 0x0004482C File Offset: 0x00042A2C
		public AlterAvailabilityGroupAction alterAvailabilityGroupAction()
		{
			AlterAvailabilityGroupAction alterAvailabilityGroupAction = base.FragmentFactory.CreateFragment<AlterAvailabilityGroupAction>();
			int num = this.LA(1);
			if (num != 90)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					alterAvailabilityGroupAction.ActionType = AlterAvailabilityGroupActionTypeHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(alterAvailabilityGroupAction, token);
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(90);
				if (this.inputState.guessing == 0)
				{
					alterAvailabilityGroupAction.ActionType = AlterAvailabilityGroupActionType.Join;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterAvailabilityGroupAction, token2);
				}
			}
			return alterAvailabilityGroupAction;
		}

		// Token: 0x06000C3E RID: 3134 RVA: 0x000448DC File Offset: 0x00042ADC
		public AlterAvailabilityGroupFailoverOption alterAvailabilityGroupFailoverOption()
		{
			AlterAvailabilityGroupFailoverOption alterAvailabilityGroupFailoverOption = base.FragmentFactory.CreateFragment<AlterAvailabilityGroupFailoverOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TARGET");
				alterAvailabilityGroupFailoverOption.OptionKind = FailoverActionOptionKind.Target;
				alterAvailabilityGroupFailoverOption.Value = literal;
			}
			return alterAvailabilityGroupFailoverOption;
		}

		// Token: 0x06000C3F RID: 3135 RVA: 0x00044944 File Offset: 0x00042B44
		public AvailabilityReplicaOption availabilityReplicaOption()
		{
			AvailabilityReplicaOption availabilityReplicaOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AVAILABILITY_MODE"))
			{
				availabilityReplicaOption = this.availabilityModeReplicaOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FAILOVER_MODE"))
			{
				availabilityReplicaOption = this.failoverModeReplicaOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("SECONDARY_ROLE"))
			{
				availabilityReplicaOption = this.secondaryRoleReplicaOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("PRIMARY_ROLE"))
			{
				availabilityReplicaOption = this.primaryRoleReplicaOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				availabilityReplicaOption = this.literalReplicaOption();
			}
			return availabilityReplicaOption;
		}

		// Token: 0x06000C40 RID: 3136 RVA: 0x00044A58 File Offset: 0x00042C58
		public AvailabilityModeReplicaOption availabilityModeReplicaOption()
		{
			AvailabilityModeReplicaOption availabilityModeReplicaOption = base.FragmentFactory.CreateFragment<AvailabilityModeReplicaOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AVAILABILITY_MODE");
				availabilityModeReplicaOption.OptionKind = AvailabilityReplicaOptionKind.AvailabilityMode;
				if (TSql80ParserBaseInternal.TryMatch(token2, "SYNCHRONOUS_COMMIT"))
				{
					availabilityModeReplicaOption.Value = AvailabilityModeOptionKind.SynchronousCommit;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "ASYNCHRONOUS_COMMIT");
					availabilityModeReplicaOption.Value = AvailabilityModeOptionKind.AsynchronousCommit;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(availabilityModeReplicaOption, token2);
			}
			return availabilityModeReplicaOption;
		}

		// Token: 0x06000C41 RID: 3137 RVA: 0x00044AF8 File Offset: 0x00042CF8
		public FailoverModeReplicaOption failoverModeReplicaOption()
		{
			FailoverModeReplicaOption failoverModeReplicaOption = base.FragmentFactory.CreateFragment<FailoverModeReplicaOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FAILOVER_MODE");
				failoverModeReplicaOption.OptionKind = AvailabilityReplicaOptionKind.FailoverMode;
				if (TSql80ParserBaseInternal.TryMatch(token2, "AUTOMATIC"))
				{
					failoverModeReplicaOption.Value = FailoverModeOptionKind.Automatic;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "MANUAL");
					failoverModeReplicaOption.Value = FailoverModeOptionKind.Manual;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(failoverModeReplicaOption, token2);
			}
			return failoverModeReplicaOption;
		}

		// Token: 0x06000C42 RID: 3138 RVA: 0x00044B98 File Offset: 0x00042D98
		public SecondaryRoleReplicaOption secondaryRoleReplicaOption()
		{
			SecondaryRoleReplicaOption secondaryRoleReplicaOption = base.FragmentFactory.CreateFragment<SecondaryRoleReplicaOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SECONDARY_ROLE");
				TSql80ParserBaseInternal.Match(token2, "ALLOW_CONNECTIONS");
				secondaryRoleReplicaOption.OptionKind = AvailabilityReplicaOptionKind.SecondaryRole;
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token3, "NO"))
					{
						secondaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.No;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token3, "READ_ONLY");
						secondaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.ReadOnly;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(secondaryRoleReplicaOption, token3);
				}
			}
			else
			{
				IToken token4 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					secondaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.All;
					TSql80ParserBaseInternal.UpdateTokenInfo(secondaryRoleReplicaOption, token4);
				}
			}
			IToken token5 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(secondaryRoleReplicaOption, token5);
			}
			return secondaryRoleReplicaOption;
		}

		// Token: 0x06000C43 RID: 3139 RVA: 0x00044CF8 File Offset: 0x00042EF8
		public PrimaryRoleReplicaOption primaryRoleReplicaOption()
		{
			PrimaryRoleReplicaOption primaryRoleReplicaOption = base.FragmentFactory.CreateFragment<PrimaryRoleReplicaOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PRIMARY_ROLE");
				TSql80ParserBaseInternal.Match(token2, "ALLOW_CONNECTIONS");
				primaryRoleReplicaOption.OptionKind = AvailabilityReplicaOptionKind.PrimaryRole;
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token3, "NO"))
					{
						primaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.No;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token3, "READ_WRITE");
						primaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.ReadWrite;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(primaryRoleReplicaOption, token3);
				}
			}
			else
			{
				IToken token4 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					primaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.All;
					TSql80ParserBaseInternal.UpdateTokenInfo(primaryRoleReplicaOption, token4);
				}
			}
			IToken token5 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(primaryRoleReplicaOption, token5);
			}
			return primaryRoleReplicaOption;
		}

		// Token: 0x06000C44 RID: 3140 RVA: 0x00044E58 File Offset: 0x00043058
		public LiteralReplicaOption literalReplicaOption()
		{
			LiteralReplicaOption literalReplicaOption = base.FragmentFactory.CreateFragment<LiteralReplicaOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			if (num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "ENDPOINT_URL");
						literalReplicaOption.OptionKind = AvailabilityReplicaOptionKind.EndpointUrl;
						literalReplicaOption.Value = literal;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token, "SESSION_TIMEOUT"))
					{
						literalReplicaOption.OptionKind = AvailabilityReplicaOptionKind.SessionTimeout;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "APPLY_DELAY");
						literalReplicaOption.OptionKind = AvailabilityReplicaOptionKind.ApplyDelay;
					}
					literalReplicaOption.Value = literal;
				}
			}
			return literalReplicaOption;
		}

		// Token: 0x06000C45 RID: 3141 RVA: 0x00044F40 File Offset: 0x00043140
		public CreatePartitionFunctionStatement createPartitionFunction()
		{
			CreatePartitionFunctionStatement createPartitionFunctionStatement = base.FragmentFactory.CreateFragment<CreatePartitionFunctionStatement>();
			this.match(73);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createPartitionFunctionStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createPartitionFunctionStatement);
			}
			this.match(191);
			PartitionParameterType partitionParameterType = this.partitionParameterType();
			if (this.inputState.guessing == 0)
			{
				createPartitionFunctionStatement.ParameterType = partitionParameterType;
			}
			this.match(192);
			this.match(9);
			this.partitionFunctionTypes(createPartitionFunctionStatement);
			return createPartitionFunctionStatement;
		}

		// Token: 0x06000C46 RID: 3142 RVA: 0x00044FC4 File Offset: 0x000431C4
		public CreatePartitionSchemeStatement createPartitionScheme()
		{
			CreatePartitionSchemeStatement createPartitionSchemeStatement = base.FragmentFactory.CreateFragment<CreatePartitionSchemeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SCHEME");
				createPartitionSchemeStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createPartitionSchemeStatement);
			}
			this.match(9);
			IToken token2 = this.LT(1);
			this.match(232);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "PARTITION");
				createPartitionSchemeStatement.PartitionFunction = identifier;
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 151)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					createPartitionSchemeStatement.IsAll = true;
				}
			}
			this.match(151);
			this.match(191);
			IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(createPartitionSchemeStatement, createPartitionSchemeStatement.FileGroups, identifierOrValueExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifierOrValueExpression = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(createPartitionSchemeStatement, createPartitionSchemeStatement.FileGroups, identifierOrValueExpression);
				}
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createPartitionSchemeStatement, token3);
			}
			return createPartitionSchemeStatement;
		}

		// Token: 0x06000C47 RID: 3143 RVA: 0x00045150 File Offset: 0x00043350
		public PartitionParameterType partitionParameterType()
		{
			PartitionParameterType partitionParameterType = base.FragmentFactory.CreateFragment<PartitionParameterType>();
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				partitionParameterType.DataType = dataTypeReference;
			}
			this.collationOpt(partitionParameterType);
			return partitionParameterType;
		}

		// Token: 0x06000C48 RID: 3144 RVA: 0x0004518C File Offset: 0x0004338C
		public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.partitionFunctionRange(vParent);
			this.match(67);
			this.match(164);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RANGE");
			}
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_0237;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_0237;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_0237;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_0237;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_0237;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 187:
					case 191:
					case 193:
						break;
					case 188:
					case 189:
					case 190:
						goto IL_0237;
					case 192:
						goto IL_024A;
					default:
						goto IL_0237;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_0237;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_0237;
					default:
						goto IL_0237;
					}
					break;
				}
			}
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.BoundaryValues, scalarExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.BoundaryValues, scalarExpression);
				}
			}
			goto IL_024A;
			IL_0237:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_024A:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000C49 RID: 3145 RVA: 0x0004540C File Offset: 0x0004360C
		public void partitionFunctionRange(CreatePartitionFunctionStatement vParent)
		{
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 93)
				{
					if (num != 133)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(133);
					if (this.inputState.guessing == 0)
					{
						vParent.Range = PartitionFunctionRange.Right;
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
						return;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(93);
					if (this.inputState.guessing == 0)
					{
						vParent.Range = PartitionFunctionRange.Left;
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
						return;
					}
				}
			}
		}

		// Token: 0x06000C4A RID: 3146 RVA: 0x000454A7 File Offset: 0x000436A7
		public void queueOptionList(QueueStatement vParent, bool vDropAccepted)
		{
			this.match(171);
			this.queueOption(vParent, vDropAccepted);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.queueOption(vParent, vDropAccepted);
			}
		}

		// Token: 0x06000C4B RID: 3147 RVA: 0x000454E0 File Offset: 0x000436E0
		public UserRemoteServiceBindingOption bindingUserOption()
		{
			UserRemoteServiceBindingOption userRemoteServiceBindingOption = base.FragmentFactory.CreateFragment<UserRemoteServiceBindingOption>();
			this.match(163);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				userRemoteServiceBindingOption.OptionKind = RemoteServiceBindingOptionKind.User;
				userRemoteServiceBindingOption.User = identifier;
			}
			return userRemoteServiceBindingOption;
		}

		// Token: 0x06000C4C RID: 3148 RVA: 0x00045534 File Offset: 0x00043734
		public OnOffRemoteServiceBindingOption bindingAnonymousOption()
		{
			OnOffRemoteServiceBindingOption onOffRemoteServiceBindingOption = base.FragmentFactory.CreateFragment<OnOffRemoteServiceBindingOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(onOffRemoteServiceBindingOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ANONYMOUS");
				onOffRemoteServiceBindingOption.OptionKind = RemoteServiceBindingOptionKind.Anonymous;
				onOffRemoteServiceBindingOption.OptionState = optionState;
			}
			return onOffRemoteServiceBindingOption;
		}

		// Token: 0x06000C4D RID: 3149 RVA: 0x0004559C File Offset: 0x0004379C
		public void routeOptionList(RouteStatement vParent)
		{
			int num = 0;
			this.match(171);
			RouteOption routeOption = this.routeOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)routeOption.OptionKind, routeOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RouteOption>(vParent, vParent.RouteOptions, routeOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				routeOption = this.routeOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)routeOption.OptionKind, routeOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RouteOption>(vParent, vParent.RouteOptions, routeOption);
				}
			}
		}

		// Token: 0x06000C4E RID: 3150 RVA: 0x00045630 File Offset: 0x00043830
		public void onQueueClause(AlterCreateServiceStatementBase vParent)
		{
			this.match(105);
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "QUEUE");
				vParent.QueueName = schemaObjectName;
			}
		}

		// Token: 0x06000C4F RID: 3151 RVA: 0x0004568C File Offset: 0x0004388C
		public ServiceContract serviceContract()
		{
			ServiceContract serviceContract = base.FragmentFactory.CreateFragment<ServiceContract>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				serviceContract.Name = identifier;
			}
			return serviceContract;
		}

		// Token: 0x06000C50 RID: 3152 RVA: 0x000456C4 File Offset: 0x000438C4
		public AlterServiceStatement alterServiceStatement()
		{
			AlterServiceStatement alterServiceStatement = base.FragmentFactory.CreateFragment<AlterServiceStatement>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterServiceStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterServiceStatement);
			}
			int num = this.LA(1);
			if (num != 105)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.addDropServiceContractList(alterServiceStatement);
			}
			else
			{
				this.onQueueClause(alterServiceStatement);
				if (this.LA(1) == 191 && (this.LA(2) == 4 || this.LA(2) == 54))
				{
					this.addDropServiceContractList(alterServiceStatement);
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return alterServiceStatement;
		}

		// Token: 0x06000C51 RID: 3153 RVA: 0x000457A0 File Offset: 0x000439A0
		public void addDropServiceContractList(AlterServiceStatement vParent)
		{
			this.match(191);
			ServiceContract serviceContract = this.addDropServiceContract();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(vParent, vParent.ServiceContracts, serviceContract);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				serviceContract = this.addDropServiceContract();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(vParent, vParent.ServiceContracts, serviceContract);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000C52 RID: 3154 RVA: 0x00045840 File Offset: 0x00043A40
		public ServiceContract addDropServiceContract()
		{
			ServiceContract serviceContract = base.FragmentFactory.CreateFragment<ServiceContract>();
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(54);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(serviceContract, token);
					serviceContract.Action = AlterAction.Drop;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(serviceContract, token2);
					serviceContract.Action = AlterAction.Add;
				}
			}
			this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				serviceContract.Name = identifier;
			}
			return serviceContract;
		}

		// Token: 0x06000C53 RID: 3155 RVA: 0x0004590C File Offset: 0x00043B0C
		public void keySpecList(CreateSymmetricKeyStatement vParent)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			KeyOption keyOption = this.keySpec(ref flag, ref flag2, ref flag3);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<KeyOption>(vParent, vParent.KeyOptions, keyOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				keyOption = this.keySpec(ref flag, ref flag2, ref flag3);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<KeyOption>(vParent, vParent.KeyOptions, keyOption);
				}
			}
		}

		// Token: 0x06000C54 RID: 3156 RVA: 0x00045988 File Offset: 0x00043B88
		public void encryptorListWithNoPassword(SymmetricKeyStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			CryptoMechanism cryptoMechanism = this.cryptoWithNoPasswordOrJustPassword();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.EncryptingMechanisms, cryptoMechanism);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				cryptoMechanism = this.cryptoWithNoPasswordOrJustPassword();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.EncryptingMechanisms, cryptoMechanism);
				}
			}
		}

		// Token: 0x06000C55 RID: 3157 RVA: 0x00045A1C File Offset: 0x00043C1C
		public void providerKeySourceOptionsOpt(IList<KeyOption> optionsList, TSqlFragment vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.providerKeySourceOptions(optionsList, vParent);
				return;
			}
			if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C56 RID: 3158 RVA: 0x00045A88 File Offset: 0x00043C88
		public KeyOption keySpec(ref bool keySourceSpecified, ref bool algorithmSpecified, ref bool identityValueSpecified)
		{
			KeyOption keyOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("KEY_SOURCE"))
			{
				keyOption = this.keySourceKeySpec(ref keySourceSpecified);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ALGORITHM"))
			{
				keyOption = this.algorithmKeySpec(ref algorithmSpecified);
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				keyOption = this.identityValueKeySpec(ref identityValueSpecified);
			}
			return keyOption;
		}

		// Token: 0x06000C57 RID: 3159 RVA: 0x00045B38 File Offset: 0x00043D38
		public KeySourceKeyOption keySourceKeySpec(ref bool keySourceSpecified)
		{
			KeySourceKeyOption keySourceKeyOption = base.FragmentFactory.CreateFragment<KeySourceKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "KEY_SOURCE");
				keySourceKeyOption.OptionKind = KeyOptionKind.KeySource;
				if (keySourceSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				keySourceSpecified = true;
				TSql80ParserBaseInternal.UpdateTokenInfo(keySourceKeyOption, token);
				keySourceKeyOption.PassPhrase = literal;
			}
			return keySourceKeyOption;
		}

		// Token: 0x06000C58 RID: 3160 RVA: 0x00045BB4 File Offset: 0x00043DB4
		public AlgorithmKeyOption algorithmKeySpec(ref bool algorithmSpecified)
		{
			AlgorithmKeyOption algorithmKeyOption = base.FragmentFactory.CreateFragment<AlgorithmKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ALGORITHM");
				algorithmKeyOption.OptionKind = KeyOptionKind.Algorithm;
				if (algorithmSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				algorithmSpecified = true;
				algorithmKeyOption.Algorithm = EncryptionAlgorithmsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(algorithmKeyOption, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(algorithmKeyOption, token2);
			}
			return algorithmKeyOption;
		}

		// Token: 0x06000C59 RID: 3161 RVA: 0x00045C50 File Offset: 0x00043E50
		public IdentityValueKeyOption identityValueKeySpec(ref bool identityValueSpecified)
		{
			IdentityValueKeyOption identityValueKeyOption = base.FragmentFactory.CreateFragment<IdentityValueKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "IDENTITY_VALUE");
				identityValueKeyOption.OptionKind = KeyOptionKind.IdentityValue;
				if (identityValueSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				identityValueSpecified = true;
				TSql80ParserBaseInternal.UpdateTokenInfo(identityValueKeyOption, token);
				identityValueKeyOption.IdentityPhrase = literal;
			}
			return identityValueKeyOption;
		}

		// Token: 0x06000C5A RID: 3162 RVA: 0x00045CCC File Offset: 0x00043ECC
		public ProviderKeyNameKeyOption providerKeyNameSourceOption(ref bool providerKeyNameSpecified)
		{
			ProviderKeyNameKeyOption providerKeyNameKeyOption = base.FragmentFactory.CreateFragment<ProviderKeyNameKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				providerKeyNameKeyOption.OptionKind = KeyOptionKind.ProviderKeyName;
				TSql80ParserBaseInternal.Match(token, "PROVIDER_KEY_NAME");
				if (providerKeyNameSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				providerKeyNameSpecified = true;
				providerKeyNameKeyOption.KeyName = literal;
				TSql80ParserBaseInternal.UpdateTokenInfo(providerKeyNameKeyOption, token);
			}
			return providerKeyNameKeyOption;
		}

		// Token: 0x06000C5B RID: 3163 RVA: 0x00045D48 File Offset: 0x00043F48
		public CreationDispositionKeyOption creationDispositionSourceOption(ref bool creationDispositionSpecified)
		{
			CreationDispositionKeyOption creationDispositionKeyOption = base.FragmentFactory.CreateFragment<CreationDispositionKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CREATION_DISPOSITION");
				creationDispositionKeyOption.OptionKind = KeyOptionKind.CreationDisposition;
				if (creationDispositionSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				creationDispositionSpecified = true;
				if (TSql80ParserBaseInternal.TryMatch(token2, "CREATE_NEW"))
				{
					creationDispositionKeyOption.IsCreateNew = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "OPEN_EXISTING");
					creationDispositionKeyOption.IsCreateNew = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(creationDispositionKeyOption, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(creationDispositionKeyOption, token2);
			}
			return creationDispositionKeyOption;
		}

		// Token: 0x06000C5C RID: 3164 RVA: 0x00045DFC File Offset: 0x00043FFC
		public CryptoMechanism cryptoWithNoPasswordOrJustPassword()
		{
			CryptoMechanism cryptoMechanism;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				cryptoMechanism = this.certificateCrypto();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				cryptoMechanism = this.keyCrypto();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				cryptoMechanism = this.passwordCrypto();
			}
			return cryptoMechanism;
		}

		// Token: 0x06000C5D RID: 3165 RVA: 0x00045E9C File Offset: 0x0004409C
		public CryptoMechanism certificateCrypto()
		{
			CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				cryptoMechanism.Identifier = identifier;
				cryptoMechanism.CryptoMechanismType = CryptoMechanismType.Certificate;
			}
			return cryptoMechanism;
		}

		// Token: 0x06000C5E RID: 3166 RVA: 0x00045EF8 File Offset: 0x000440F8
		public CryptoMechanism keyCrypto()
		{
			CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "SYMMETRIC"))
				{
					cryptoMechanism.CryptoMechanismType = CryptoMechanismType.SymmetricKey;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
					cryptoMechanism.CryptoMechanismType = CryptoMechanismType.AsymmetricKey;
				}
				cryptoMechanism.Identifier = identifier;
			}
			return cryptoMechanism;
		}

		// Token: 0x06000C5F RID: 3167 RVA: 0x00045F74 File Offset: 0x00044174
		public CryptoMechanism passwordCrypto()
		{
			CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PASSWORD");
				cryptoMechanism.PasswordOrSignature = literal;
				cryptoMechanism.CryptoMechanismType = CryptoMechanismType.Password;
			}
			return cryptoMechanism;
		}

		// Token: 0x06000C60 RID: 3168 RVA: 0x00045FDC File Offset: 0x000441DC
		public KeyOption providerKeySourceOption(ref bool algorithmSpecified, ref bool providerKeyNameSpecified, ref bool creationDispositionSpecified)
		{
			KeyOption keyOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ALGORITHM"))
			{
				keyOption = this.algorithmKeySpec(ref algorithmSpecified);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PROVIDER_KEY_NAME"))
			{
				keyOption = this.providerKeyNameSourceOption(ref providerKeyNameSpecified);
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				keyOption = this.creationDispositionSourceOption(ref creationDispositionSpecified);
			}
			return keyOption;
		}

		// Token: 0x06000C61 RID: 3169 RVA: 0x0004608C File Offset: 0x0004428C
		public AlterSymmetricKeyStatement alterSymmetricKeyStatement()
		{
			AlterSymmetricKeyStatement alterSymmetricKeyStatement = base.FragmentFactory.CreateFragment<AlterSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				alterSymmetricKeyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterSymmetricKeyStatement);
			}
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(54);
				if (this.inputState.guessing == 0)
				{
					alterSymmetricKeyStatement.IsAdd = false;
				}
			}
			else
			{
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					alterSymmetricKeyStatement.IsAdd = true;
				}
			}
			this.encryptorListWithNoPassword(alterSymmetricKeyStatement);
			return alterSymmetricKeyStatement;
		}

		// Token: 0x06000C62 RID: 3170 RVA: 0x00046158 File Offset: 0x00044358
		public CreateTypeUddtStatement createTypeUddtStatement()
		{
			CreateTypeUddtStatement createTypeUddtStatement = base.FragmentFactory.CreateFragment<CreateTypeUddtStatement>();
			IToken token = this.LT(1);
			this.match(71);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTypeUddtStatement, token);
				base.ThrowPartialAstIfPhaseOne(createTypeUddtStatement);
			}
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				createTypeUddtStatement.DataType = dataTypeReference;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return createTypeUddtStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createTypeUddtStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return createTypeUddtStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return createTypeUddtStatement;
						default:
							if (num == 28)
							{
								return createTypeUddtStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return createTypeUddtStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return createTypeUddtStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return createTypeUddtStatement;
						default:
							if (num == 82)
							{
								return createTypeUddtStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return createTypeUddtStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					switch (num)
					{
					case 99:
					case 100:
					{
						NullableConstraintDefinition nullableConstraintDefinition = this.nullableConstraint();
						if (this.inputState.guessing == 0)
						{
							createTypeUddtStatement.NullableConstraint = nullableConstraintDefinition;
							return createTypeUddtStatement;
						}
						return createTypeUddtStatement;
					}
					default:
						if (num == 106 || num == 119)
						{
							return createTypeUddtStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createTypeUddtStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createTypeUddtStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createTypeUddtStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return createTypeUddtStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return createTypeUddtStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createTypeUddtStatement;
				default:
					if (num == 232)
					{
						return createTypeUddtStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C63 RID: 3171 RVA: 0x00046468 File Offset: 0x00044668
		public CreateTypeUdtStatement createTypeUdtStatement()
		{
			CreateTypeUdtStatement createTypeUdtStatement = base.FragmentFactory.CreateFragment<CreateTypeUdtStatement>();
			IToken token = this.LT(1);
			this.match(175);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTypeUdtStatement, token);
				base.ThrowPartialAstIfPhaseOne(createTypeUdtStatement);
			}
			AssemblyName assemblyName = this.assemblyName();
			if (this.inputState.guessing == 0)
			{
				createTypeUdtStatement.AssemblyName = assemblyName;
			}
			return createTypeUdtStatement;
		}

		// Token: 0x06000C64 RID: 3172 RVA: 0x000464D0 File Offset: 0x000446D0
		public CreateTypeTableStatement createTypeTableStatement()
		{
			CreateTypeTableStatement createTypeTableStatement = base.FragmentFactory.CreateFragment<CreateTypeTableStatement>();
			this.match(9);
			this.match(148);
			this.match(191);
			TableDefinition tableDefinition = this.tableDefinition(IndexAffectingStatement.CreateType, null);
			if (this.inputState.guessing == 0)
			{
				createTypeTableStatement.Definition = tableDefinition;
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTypeTableStatement, token);
			}
			return createTypeTableStatement;
		}

		// Token: 0x06000C65 RID: 3173 RVA: 0x00046550 File Offset: 0x00044750
		public NullableConstraintDefinition nullableConstraint()
		{
			NullableConstraintDefinition nullableConstraintDefinition = base.FragmentFactory.CreateFragment<NullableConstraintDefinition>();
			bool flag = this.nullNotNull(nullableConstraintDefinition);
			if (this.inputState.guessing == 0)
			{
				nullableConstraintDefinition.Nullable = flag;
			}
			return nullableConstraintDefinition;
		}

		// Token: 0x06000C66 RID: 3174 RVA: 0x00046588 File Offset: 0x00044788
		public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement)
		{
			TableDefinition tableDefinition = base.FragmentFactory.CreateFragment<TableDefinition>();
			if (base.PhaseOne && vStatement != null)
			{
				vStatement.Definition = tableDefinition;
			}
			this.tableElement(statementType, tableDefinition, vStatement);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.tableElement(statementType, tableDefinition, vStatement);
			}
			return tableDefinition;
		}

		// Token: 0x06000C67 RID: 3175 RVA: 0x000465E4 File Offset: 0x000447E4
		public UserLoginOption userLoginOption()
		{
			UserLoginOption userLoginOption = base.FragmentFactory.CreateFragment<UserLoginOption>();
			int num = this.LA(1);
			if (num != 67 && num != 71)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "WITHOUT");
					TSql80ParserBaseInternal.Match(token2, "LOGIN");
					TSql80ParserBaseInternal.UpdateTokenInfo(userLoginOption, token2);
					userLoginOption.UserLoginOptionType = UserLoginOptionType.WithoutLogin;
				}
			}
			else
			{
				int num2 = this.LA(1);
				if (num2 != 67)
				{
					if (num2 != 71)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(71);
				}
				else
				{
					this.match(67);
				}
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "ASYMMETRIC");
						userLoginOption.UserLoginOptionType = UserLoginOptionType.AsymmetricKey;
					}
				}
				else
				{
					if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token4 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						userLoginOption.UserLoginOptionType = UserLoginOptionHelper.Instance.ParseOption(token4);
					}
				}
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					userLoginOption.Identifier = identifier;
				}
			}
			return userLoginOption;
		}

		// Token: 0x06000C68 RID: 3176 RVA: 0x000467C4 File Offset: 0x000449C4
		public PrincipalOption createUserOption(bool vHasUserLoginOption)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			PrincipalOption principalOption;
			if (num <= 221)
			{
				if (num != 100 && num != 221)
				{
					goto IL_007B;
				}
			}
			else if (num != 224)
			{
				switch (num)
				{
				case 230:
				case 231:
					break;
				case 232:
				case 233:
					principalOption = this.identifierCreateUserOption(token, vHasUserLoginOption);
					goto IL_008E;
				default:
					goto IL_007B;
				}
			}
			principalOption = this.literalCreateUserOption(token, vHasUserLoginOption);
			goto IL_008E;
			IL_007B:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_008E:
			if (this.inputState.guessing == 0 && vHasUserLoginOption && principalOption.OptionKind != PrincipalOptionKind.DefaultSchema)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46096", token, TSqlParserResource.SQL46096Message, new string[] { token.getText() });
			}
			return principalOption;
		}

		// Token: 0x06000C69 RID: 3177 RVA: 0x0004689C File Offset: 0x00044A9C
		public IdentifierPrincipalOption identifierCreateUserOption(IToken tOption, bool vHasUserLoginOption)
		{
			IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(tOption, "DEFAULT_SCHEMA"))
				{
					identifierPrincipalOption.OptionKind = PrincipalOptionKind.DefaultSchema;
				}
				else
				{
					TSql80ParserBaseInternal.Match(tOption, "DEFAULT_LANGUAGE");
					identifierPrincipalOption.OptionKind = PrincipalOptionKind.DefaultLanguage;
				}
				identifierPrincipalOption.Identifier = identifier;
			}
			return identifierPrincipalOption;
		}

		// Token: 0x06000C6A RID: 3178 RVA: 0x000468FC File Offset: 0x00044AFC
		public LiteralPrincipalOption literalCreateUserOption(IToken tOption, bool vHasUserLoginOption)
		{
			LiteralPrincipalOption literalPrincipalOption = base.FragmentFactory.CreateFragment<LiteralPrincipalOption>();
			TSql80ParserBaseInternal.UpdateTokenInfo(literalPrincipalOption, tOption);
			int num = this.LA(1);
			if (num <= 221)
			{
				if (num != 100)
				{
					if (num == 221)
					{
						Literal literal = this.integer();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(tOption, "DEFAULT_LANGUAGE");
							literalPrincipalOption.OptionKind = PrincipalOptionKind.DefaultLanguage;
							literalPrincipalOption.Value = literal;
							return literalPrincipalOption;
						}
						return literalPrincipalOption;
					}
				}
				else
				{
					Literal literal = this.nullLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(tOption, "DEFAULT_SCHEMA");
						literalPrincipalOption.OptionKind = PrincipalOptionKind.DefaultSchema;
						literalPrincipalOption.Value = literal;
						return literalPrincipalOption;
					}
					return literalPrincipalOption;
				}
			}
			else if (num != 224)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(tOption, "PASSWORD");
						literalPrincipalOption.OptionKind = PrincipalOptionKind.Password;
						literalPrincipalOption.Value = literal;
						return literalPrincipalOption;
					}
					return literalPrincipalOption;
				}
				}
			}
			else
			{
				Literal literal = this.binary();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(tOption, "SID");
					literalPrincipalOption.OptionKind = PrincipalOptionKind.Sid;
					literalPrincipalOption.Value = literal;
					return literalPrincipalOption;
				}
				return literalPrincipalOption;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C6B RID: 3179 RVA: 0x00046A40 File Offset: 0x00044C40
		public NullLiteral nullLiteral()
		{
			NullLiteral nullLiteral = base.FragmentFactory.CreateFragment<NullLiteral>();
			IToken token = this.LT(1);
			this.match(100);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(nullLiteral, token);
				nullLiteral.Value = token.getText();
			}
			return nullLiteral;
		}

		// Token: 0x06000C6C RID: 3180 RVA: 0x00046A8C File Offset: 0x00044C8C
		public AlterApplicationRoleStatement alterApplicationRoleStatement()
		{
			AlterApplicationRoleStatement alterApplicationRoleStatement = base.FragmentFactory.CreateFragment<AlterApplicationRoleStatement>();
			this.applicationRoleStatement(alterApplicationRoleStatement, false);
			return alterApplicationRoleStatement;
		}

		// Token: 0x06000C6D RID: 3181 RVA: 0x00046AB0 File Offset: 0x00044CB0
		public AlterAssemblyStatement alterAssemblyStatement()
		{
			AlterAssemblyStatement alterAssemblyStatement = base.FragmentFactory.CreateFragment<AlterAssemblyStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
				alterAssemblyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterAssemblyStatement);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_02FE;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_02FE;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_02FE;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								goto IL_02FE;
							default:
								if (num == 28)
								{
									goto IL_02FE;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						goto IL_02FE;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_02FE;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 71:
							{
								ScalarExpression scalarExpression = this.alterAssemblyFromClause();
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(alterAssemblyStatement, alterAssemblyStatement.Parameters, scalarExpression);
									flag = true;
									goto IL_02FE;
								}
								goto IL_02FE;
							}
							case 74:
							case 75:
								goto IL_02FE;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_02FE;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						goto IL_02FE;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_02FE;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_02FE;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_02FE;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_02FE;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_02FE;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_02FE;
				default:
					if (num == 232)
					{
						goto IL_02FE;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_02FE:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.alterAssemblyWith(alterAssemblyStatement);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			bool flag2 = false;
			if (this.LA(1) == 54 && this.LA(2) == 65)
			{
				int num2 = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(54);
					this.match(65);
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(num2);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				this.alterAssemblyDropFile(alterAssemblyStatement);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 4 && this.LA(2) == 65)
			{
				this.alterAssemblyAddFile(alterAssemblyStatement);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0 && !flag)
			{
				throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(identifier);
			}
			return alterAssemblyStatement;
		}

		// Token: 0x06000C6E RID: 3182 RVA: 0x00046F7C File Offset: 0x0004517C
		public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement()
		{
			AlterAsymmetricKeyStatement alterAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<AlterAsymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				alterAsymmetricKeyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterAsymmetricKeyStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "REMOVE");
				}
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					IToken token4 = this.LT(1);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "PRIVATE");
						alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.RemovePrivateKey;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token4);
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 111)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token5 = this.LT(1);
					this.match(232);
					IToken token6 = this.LT(1);
					this.match(111);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "ATTESTED");
						alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.RemoveAttestedOption;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token6);
					}
				}
			}
			else if (this.LA(1) == 171)
			{
				this.match(171);
				IToken token7 = this.LT(1);
				this.match(232);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token7, "PRIVATE");
					alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.WithPrivateKey;
				}
				this.match(191);
				this.passwordChangeOption(alterAsymmetricKeyStatement);
				while (this.LA(1) == 198)
				{
					this.match(198);
					this.passwordChangeOption(alterAsymmetricKeyStatement);
				}
				IToken token8 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token8);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 18)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.LT(1);
				this.match(232);
				this.match(18);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					alterAsymmetricKeyStatement.AttestedBy = literal;
					alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.AttestedBy;
				}
			}
			return alterAsymmetricKeyStatement;
		}

		// Token: 0x06000C6F RID: 3183 RVA: 0x00047254 File Offset: 0x00045454
		public AlterAuthorizationStatement alterAuthorizationStatement()
		{
			AlterAuthorizationStatement alterAuthorizationStatement = base.FragmentFactory.CreateFragment<AlterAuthorizationStatement>();
			this.match(11);
			SecurityTargetObject securityTargetObject = this.authorizationTargetObject();
			if (this.inputState.guessing == 0)
			{
				alterAuthorizationStatement.SecurityTargetObject = securityTargetObject;
			}
			this.match(151);
			int num = this.LA(1);
			if (num != 139)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						alterAuthorizationStatement.PrincipalName = identifier;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(139);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "OWNER");
					TSql80ParserBaseInternal.UpdateTokenInfo(alterAuthorizationStatement, token);
					alterAuthorizationStatement.ToSchemaOwner = true;
				}
			}
			return alterAuthorizationStatement;
		}

		// Token: 0x06000C70 RID: 3184 RVA: 0x00047340 File Offset: 0x00045540
		public AlterBrokerPriorityStatement alterBrokerPriorityStatement()
		{
			AlterBrokerPriorityStatement alterBrokerPriorityStatement = base.FragmentFactory.CreateFragment<AlterBrokerPriorityStatement>();
			this.brokerPriorityStatementBody(alterBrokerPriorityStatement);
			return alterBrokerPriorityStatement;
		}

		// Token: 0x06000C71 RID: 3185 RVA: 0x00047364 File Offset: 0x00045564
		public AlterCryptographicProviderStatement alterCryptographicProviderStatement()
		{
			AlterCryptographicProviderStatement alterCryptographicProviderStatement = base.FragmentFactory.CreateFragment<AlterCryptographicProviderStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CRYPTOGRAPHIC");
				TSql80ParserBaseInternal.Match(token2, "PROVIDER");
				alterCryptographicProviderStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterCryptographicProviderStatement);
			}
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					alterCryptographicProviderStatement.Option = EnableDisableOptionTypeHelper.Instance.ParseOption(token3);
				}
			}
			else
			{
				Literal literal = this.cryptographicProviderFile();
				if (this.inputState.guessing == 0)
				{
					alterCryptographicProviderStatement.File = literal;
				}
			}
			return alterCryptographicProviderStatement;
		}

		// Token: 0x06000C72 RID: 3186 RVA: 0x00047464 File Offset: 0x00045664
		public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement()
		{
			AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<AlterRemoteServiceBindingStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOTE");
				TSql80ParserBaseInternal.Match(token2, "SERVICE");
				TSql80ParserBaseInternal.Match(token3, "BINDING");
				alterRemoteServiceBindingStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterRemoteServiceBindingStatement);
			}
			this.match(171);
			int num = this.LA(1);
			RemoteServiceBindingOption remoteServiceBindingOption;
			if (num == 163)
			{
				remoteServiceBindingOption = this.bindingUserOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								return alterRemoteServiceBindingStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return alterRemoteServiceBindingStatement;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								return alterRemoteServiceBindingStatement;
							default:
								if (num2 == 28)
								{
									return alterRemoteServiceBindingStatement;
								}
								switch (num2)
								{
								case 33:
								case 35:
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return alterRemoteServiceBindingStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return alterRemoteServiceBindingStatement;
							default:
								if (num2 == 82)
								{
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						return alterRemoteServiceBindingStatement;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 == 106 || num2 == 119)
						{
							return alterRemoteServiceBindingStatement;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return alterRemoteServiceBindingStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterRemoteServiceBindingStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterRemoteServiceBindingStatement;
							case 168:
							case 169:
								break;
							default:
								if (num2 == 176)
								{
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					if (num2 == 182 || num2 == 191)
					{
						return alterRemoteServiceBindingStatement;
					}
					if (num2 == 198)
					{
						this.match(198);
						remoteServiceBindingOption = this.bindingAnonymousOption();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
							return alterRemoteServiceBindingStatement;
						}
						return alterRemoteServiceBindingStatement;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return alterRemoteServiceBindingStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return alterRemoteServiceBindingStatement;
					default:
						if (num2 == 232)
						{
							return alterRemoteServiceBindingStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			remoteServiceBindingOption = this.bindingAnonymousOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
			}
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 35)
				{
					if (num3 <= 17)
					{
						if (num3 == 1)
						{
							return alterRemoteServiceBindingStatement;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return alterRemoteServiceBindingStatement;
						case 5:
							break;
						default:
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 22:
						case 23:
							return alterRemoteServiceBindingStatement;
						default:
							if (num3 == 28)
							{
								return alterRemoteServiceBindingStatement;
							}
							switch (num3)
							{
							case 33:
							case 35:
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterRemoteServiceBindingStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							return alterRemoteServiceBindingStatement;
						default:
							if (num3 == 82)
							{
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					return alterRemoteServiceBindingStatement;
				}
			}
			else if (num3 <= 176)
			{
				if (num3 <= 144)
				{
					if (num3 == 106 || num3 == 119)
					{
						return alterRemoteServiceBindingStatement;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterRemoteServiceBindingStatement;
					}
				}
				else
				{
					switch (num3)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return alterRemoteServiceBindingStatement;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num3)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return alterRemoteServiceBindingStatement;
						case 168:
						case 169:
							break;
						default:
							if (num3 == 176)
							{
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 198)
			{
				if (num3 == 182 || num3 == 191)
				{
					return alterRemoteServiceBindingStatement;
				}
				if (num3 == 198)
				{
					this.match(198);
					remoteServiceBindingOption = this.bindingUserOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
						return alterRemoteServiceBindingStatement;
					}
					return alterRemoteServiceBindingStatement;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return alterRemoteServiceBindingStatement;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return alterRemoteServiceBindingStatement;
				default:
					if (num3 == 232)
					{
						return alterRemoteServiceBindingStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C73 RID: 3187 RVA: 0x00047B20 File Offset: 0x00045D20
		public TSqlStatement alterResourceStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RESOURCE");
			}
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("POOL"))
			{
				tsqlStatement = this.alterResourcePoolStatement();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 126 && this.LA(2) != 171 && this.LA(2) != 232) || !base.NextTokenMatches("GOVERNOR"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterResourceGovernorStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000C74 RID: 3188 RVA: 0x00047BFC File Offset: 0x00045DFC
		public AlterWorkloadGroupStatement alterWorkloadGroupStatement()
		{
			AlterWorkloadGroupStatement alterWorkloadGroupStatement = base.FragmentFactory.CreateFragment<AlterWorkloadGroupStatement>();
			this.workloadGroupStatementBody(alterWorkloadGroupStatement);
			return alterWorkloadGroupStatement;
		}

		// Token: 0x06000C75 RID: 3189 RVA: 0x00047C20 File Offset: 0x00045E20
		public AlterCertificateStatement alterCertificateStatement()
		{
			AlterCertificateStatement alterCertificateStatement = base.FragmentFactory.CreateFragment<AlterCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				alterCertificateStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterCertificateStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "REMOVE");
				}
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					IToken token4 = this.LT(1);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "PRIVATE");
						alterCertificateStatement.Kind = AlterCertificateStatementKind.RemovePrivateKey;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterCertificateStatement, token4);
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 111)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token5 = this.LT(1);
					this.match(232);
					IToken token6 = this.LT(1);
					this.match(111);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "ATTESTED");
						alterCertificateStatement.Kind = AlterCertificateStatementKind.RemoveAttestedOption;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterCertificateStatement, token6);
					}
				}
			}
			else if (this.LA(1) == 171)
			{
				this.match(171);
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					this.privateKeySpec(alterCertificateStatement);
					if (this.inputState.guessing == 0)
					{
						alterCertificateStatement.Kind = AlterCertificateStatementKind.WithPrivateKey;
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 67)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.createCertificateActivityFlag(alterCertificateStatement);
					if (this.inputState.guessing == 0)
					{
						alterCertificateStatement.Kind = AlterCertificateStatementKind.WithActiveForBeginDialog;
					}
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 18)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token7 = this.LT(1);
				this.match(232);
				this.match(18);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token7, "ATTESTED");
					alterCertificateStatement.Kind = AlterCertificateStatementKind.AttestedBy;
					alterCertificateStatement.AttestedBy = literal;
				}
			}
			return alterCertificateStatement;
		}

		// Token: 0x06000C76 RID: 3190 RVA: 0x00047EEC File Offset: 0x000460EC
		public AlterCredentialStatement alterCredentialStatement()
		{
			AlterCredentialStatement alterCredentialStatement = base.FragmentFactory.CreateFragment<AlterCredentialStatement>();
			this.credentialStatementBody(alterCredentialStatement);
			return alterCredentialStatement;
		}

		// Token: 0x06000C77 RID: 3191 RVA: 0x00047F10 File Offset: 0x00046110
		public AlterEndpointStatement alterEndpointStatement()
		{
			AlterEndpointStatement alterEndpointStatement = base.FragmentFactory.CreateFragment<AlterEndpointStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENDPOINT");
				alterEndpointStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterEndpointStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				this.endpointOptions(alterEndpointStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_72_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_0326;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0326;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
								this.protocolInfo(alterEndpointStatement);
								goto IL_0326;
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_0326;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_0326;
						default:
							if (num == 28)
							{
								goto IL_0326;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0326;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0326;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num == 67)
						{
							goto IL_0326;
						}
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0326;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0326;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						goto IL_0326;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0326;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0326;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0326;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_0326;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0326;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0326;
				default:
					if (num == 232)
					{
						goto IL_0326;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0326:
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							return alterEndpointStatement;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return alterEndpointStatement;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterEndpointStatement;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							return alterEndpointStatement;
						default:
							if (num2 == 28)
							{
								return alterEndpointStatement;
							}
							switch (num2)
							{
							case 33:
							case 35:
								return alterEndpointStatement;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterEndpointStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num2 == 67)
						{
							this.payloadInfo(alterEndpointStatement);
							return alterEndpointStatement;
						}
						switch (num2)
						{
						case 74:
						case 75:
							return alterEndpointStatement;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					return alterEndpointStatement;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 119)
				{
					if (num2 == 95 || num2 == 106 || num2 == 119)
					{
						return alterEndpointStatement;
					}
				}
				else
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterEndpointStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterEndpointStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterEndpointStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176 || num2 == 182 || num2 == 191)
				{
					return alterEndpointStatement;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return alterEndpointStatement;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return alterEndpointStatement;
				default:
					if (num2 == 232)
					{
						return alterEndpointStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C78 RID: 3192 RVA: 0x000484D4 File Offset: 0x000466D4
		public TSqlStatement alterFulltextStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FULLTEXT");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 84)
			{
				if (num != 183)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					tsqlStatement = this.alterFulltextCatalogStatement();
				}
				else
				{
					tsqlStatement = this.alterFulltextStoplistStatement();
				}
			}
			else
			{
				tsqlStatement = this.alterFulltextIndexStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000C79 RID: 3193 RVA: 0x0004855C File Offset: 0x0004675C
		public AlterIndexStatement alterIndexStatement()
		{
			AlterIndexStatement alterIndexStatement = base.FragmentFactory.CreateFragment<AlterIndexStatement>();
			IndexAffectingStatement indexAffectingStatement = IndexAffectingStatement.AlterIndexSet;
			this.match(84);
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						alterIndexStatement.Name = identifier;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.All = true;
				}
			}
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				alterIndexStatement.OnName = schemaObjectName;
			}
			if (this.LA(1) == 142)
			{
				this.match(142);
				this.indexOptionList(indexAffectingStatement, alterIndexStatement.IndexOptions, alterIndexStatement);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.AlterIndexType = AlterIndexType.Set;
				}
			}
			else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)) && base.NextTokenMatches("DISABLE"))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.AlterIndexType = AlterIndexType.Disable;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.AlterIndexType = AlterIndexTypeHelper.Instance.ParseOption(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token2);
				}
				if (this.LA(1) == 232 && this.LA(2) == 206)
				{
					PartitionSpecifier partitionSpecifier = this.partitionSpecifier();
					if (this.inputState.guessing == 0)
					{
						alterIndexStatement.Partition = partitionSpecifier;
					}
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (this.inputState.guessing == 0)
				{
					indexAffectingStatement = TSql90ParserBaseInternal.GetAlterIndexStatementKind(alterIndexStatement);
				}
				if (this.LA(1) == 171 && this.LA(2) == 191)
				{
					this.match(171);
					this.indexOptionList(indexAffectingStatement, alterIndexStatement.IndexOptions, alterIndexStatement);
					if (this.inputState.guessing == 0 && alterIndexStatement.AlterIndexType == AlterIndexType.Rebuild)
					{
						TSql100ParserBaseInternal.CheckPartitionAllSpecifiedForIndexRebuild(alterIndexStatement.Partition, alterIndexStatement.IndexOptions);
					}
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return alterIndexStatement;
		}

		// Token: 0x06000C7A RID: 3194 RVA: 0x00048858 File Offset: 0x00046A58
		public AlterLoginStatement alterLoginStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOGIN");
			}
			int num = this.LA(1);
			if (num <= 54)
			{
				if (num == 4 || num == 54)
				{
					return this.alterLoginAddDropCredential(identifier);
				}
			}
			else
			{
				if (num == 171)
				{
					return this.alterLoginOptions(identifier);
				}
				if (num == 232)
				{
					return this.alterLoginEnableDisable(identifier);
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C7B RID: 3195 RVA: 0x000488F4 File Offset: 0x00046AF4
		public AlterMasterKeyStatement alterMasterKeyStatement()
		{
			AlterMasterKeyStatement alterMasterKeyStatement = base.FragmentFactory.CreateFragment<AlterMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					if (this.LA(1) == 232 && this.LA(2) == 171)
					{
						IToken token2 = this.LT(1);
						this.match(232);
						this.match(171);
						IToken token3 = this.LT(1);
						this.match(232);
						this.match(18);
						IToken token4 = this.LT(1);
						this.match(232);
						this.match(206);
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "REGENERATE");
							TSql80ParserBaseInternal.Match(token3, "ENCRYPTION");
							TSql80ParserBaseInternal.Match(token4, "PASSWORD");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.Regenerate;
							alterMasterKeyStatement.Password = literal;
						}
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token5 = this.LT(1);
						this.match(232);
						IToken token6 = this.LT(1);
						this.match(232);
						this.match(171);
						IToken token7 = this.LT(1);
						this.match(232);
						this.match(18);
						IToken token8 = this.LT(1);
						this.match(232);
						this.match(206);
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token5, "FORCE");
							TSql80ParserBaseInternal.Match(token6, "REGENERATE");
							TSql80ParserBaseInternal.Match(token7, "ENCRYPTION");
							TSql80ParserBaseInternal.Match(token8, "PASSWORD");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.ForceRegenerate;
							alterMasterKeyStatement.Password = literal;
						}
					}
				}
				else
				{
					this.match(54);
					IToken token9 = this.LT(1);
					this.match(232);
					this.match(18);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token9, "ENCRYPTION");
					}
					if (this.LA(1) == 232 && this.LA(2) == 232)
					{
						IToken token10 = this.LT(1);
						this.match(232);
						IToken token11 = this.LT(1);
						this.match(232);
						IToken token12 = this.LT(1);
						this.match(91);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token10, "SERVICE");
							TSql80ParserBaseInternal.Match(token11, "MASTER");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.DropEncryptionByServiceMasterKey;
							TSql80ParserBaseInternal.UpdateTokenInfo(alterMasterKeyStatement, token12);
						}
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 206)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token13 = this.LT(1);
						this.match(232);
						this.match(206);
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token13, "PASSWORD");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.DropEncryptionByPassword;
							alterMasterKeyStatement.Password = literal;
						}
					}
				}
			}
			else
			{
				this.match(4);
				IToken token14 = this.LT(1);
				this.match(232);
				this.match(18);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token14, "ENCRYPTION");
				}
				if (this.LA(1) == 232 && this.LA(2) == 232)
				{
					IToken token15 = this.LT(1);
					this.match(232);
					IToken token16 = this.LT(1);
					this.match(232);
					IToken token17 = this.LT(1);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token15, "SERVICE");
						TSql80ParserBaseInternal.Match(token16, "MASTER");
						alterMasterKeyStatement.Option = AlterMasterKeyOption.AddEncryptionByServiceMasterKey;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterMasterKeyStatement, token17);
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 206)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token18 = this.LT(1);
					this.match(232);
					this.match(206);
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token18, "PASSWORD");
						alterMasterKeyStatement.Option = AlterMasterKeyOption.AddEncryptionByPassword;
						alterMasterKeyStatement.Password = literal;
					}
				}
			}
			return alterMasterKeyStatement;
		}

		// Token: 0x06000C7C RID: 3196 RVA: 0x00048E00 File Offset: 0x00047000
		public AlterMessageTypeStatement alterMessageTypeStatement()
		{
			AlterMessageTypeStatement alterMessageTypeStatement = base.FragmentFactory.CreateFragment<AlterMessageTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MESSAGE");
				TSql80ParserBaseInternal.Match(token2, "TYPE");
				alterMessageTypeStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterMessageTypeStatement);
			}
			this.messageTypeValidation(alterMessageTypeStatement);
			return alterMessageTypeStatement;
		}

		// Token: 0x06000C7D RID: 3197 RVA: 0x00048E84 File Offset: 0x00047084
		public TSqlStatement alterPartitionStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 73)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterPartitionSchemeStatement();
			}
			else
			{
				tsqlStatement = this.alterPartitionFunctionStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000C7E RID: 3198 RVA: 0x00048EFC File Offset: 0x000470FC
		public AlterQueueStatement alterQueueStatement()
		{
			AlterQueueStatement alterQueueStatement = base.FragmentFactory.CreateFragment<AlterQueueStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				alterQueueStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(alterQueueStatement);
			}
			this.queueOptionList(alterQueueStatement, true);
			return alterQueueStatement;
		}

		// Token: 0x06000C7F RID: 3199 RVA: 0x00048F60 File Offset: 0x00047160
		public AlterRoleStatement alterRoleStatement()
		{
			AlterRoleStatement alterRoleStatement = base.FragmentFactory.CreateFragment<AlterRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				alterRoleStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterRoleStatement);
			}
			AlterRoleAction alterRoleAction = this.alterRoleAction();
			if (this.inputState.guessing == 0)
			{
				alterRoleStatement.Action = alterRoleAction;
			}
			return alterRoleStatement;
		}

		// Token: 0x06000C80 RID: 3200 RVA: 0x00048FD8 File Offset: 0x000471D8
		public AlterRouteStatement alterRouteStatement()
		{
			AlterRouteStatement alterRouteStatement = base.FragmentFactory.CreateFragment<AlterRouteStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROUTE");
				alterRouteStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterRouteStatement);
			}
			this.routeOptionList(alterRouteStatement);
			return alterRouteStatement;
		}

		// Token: 0x06000C81 RID: 3201 RVA: 0x0004903C File Offset: 0x0004723C
		public AlterSchemaStatement alterSchemaStatement()
		{
			AlterSchemaStatement alterSchemaStatement = base.FragmentFactory.CreateFragment<AlterSchemaStatement>();
			this.match(139);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterSchemaStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterSchemaStatement);
			}
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TRANSFER");
			}
			if (this.LA(1) == 232 && this.LA(2) == 203)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(203);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "OBJECT"))
					{
						alterSchemaStatement.ObjectKind = SecurityObjectKind.Object;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "TYPE");
						alterSchemaStatement.ObjectKind = SecurityObjectKind.Type;
					}
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 139)
			{
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(139);
				IToken token4 = this.LT(1);
				this.match(232);
				this.match(203);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "XML");
					TSql80ParserBaseInternal.Match(token4, "COLLECTION");
					alterSchemaStatement.ObjectKind = SecurityObjectKind.XmlSchemaCollection;
				}
			}
			else if ((this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) || !TSql110ParserInternal.tokenSet_73_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
			if (this.inputState.guessing == 0)
			{
				alterSchemaStatement.ObjectName = schemaObjectName;
			}
			return alterSchemaStatement;
		}

		// Token: 0x06000C82 RID: 3202 RVA: 0x0004922C File Offset: 0x0004742C
		public AlterSequenceStatement alterSequenceStatement()
		{
			AlterSequenceStatement alterSequenceStatement = base.FragmentFactory.CreateFragment<AlterSequenceStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SEQUENCE");
				alterSequenceStatement.Name = schemaObjectName;
			}
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				this.alterSequenceOptionList(alterSequenceStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterSequenceStatement;
		}

		// Token: 0x06000C83 RID: 3203 RVA: 0x000492E4 File Offset: 0x000474E4
		public TSqlStatement alterServiceStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
			}
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				tsqlStatement = this.alterServiceMasterKeyStatement();
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 105 && this.LA(2) != 191))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterServiceStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000C84 RID: 3204 RVA: 0x00049394 File Offset: 0x00047594
		public AlterUserStatement alterUserStatement()
		{
			AlterUserStatement alterUserStatement = base.FragmentFactory.CreateFragment<AlterUserStatement>();
			this.match(163);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterUserStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterUserStatement);
			}
			this.match(171);
			PrincipalOption principalOption = this.alterUserOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterUserStatement, alterUserStatement.UserOptions, principalOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				principalOption = this.alterUserOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterUserStatement, alterUserStatement.UserOptions, principalOption);
				}
			}
			return alterUserStatement;
		}

		// Token: 0x06000C85 RID: 3205 RVA: 0x00049444 File Offset: 0x00047644
		public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement()
		{
			AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<AlterXmlSchemaCollectionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(139);
			IToken token2 = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
				TSql80ParserBaseInternal.Match(token2, "COLLECTION");
				alterXmlSchemaCollectionStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(alterXmlSchemaCollectionStatement);
			}
			this.match(4);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				alterXmlSchemaCollectionStatement.Expression = scalarExpression;
			}
			return alterXmlSchemaCollectionStatement;
		}

		// Token: 0x06000C86 RID: 3206 RVA: 0x000494F0 File Offset: 0x000476F0
		public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly)
		{
			ApplicationRoleOption applicationRoleOption = base.FragmentFactory.CreateFragment<ApplicationRoleOption>();
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PASSWORD"))
			{
				this.match(232);
				this.match(206);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					applicationRoleOption.OptionKind = ApplicationRoleOptionKind.Password;
					applicationRoleOption.Value = base.IdentifierOrValueExpression(literal);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					applicationRoleOption.OptionKind = ApplicationRoleOptionHelper.Instance.ParseOption(token);
					if (defaultSchemaAndPasswordOnly && applicationRoleOption.OptionKind != ApplicationRoleOptionKind.DefaultSchema)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					applicationRoleOption.Value = base.IdentifierOrValueExpression(identifier);
				}
			}
			return applicationRoleOption;
		}

		// Token: 0x06000C87 RID: 3207 RVA: 0x00049610 File Offset: 0x00047810
		public ScalarExpression alterAssemblyFromClause()
		{
			this.match(71);
			return this.expression(ExpressionFlags.None);
		}

		// Token: 0x06000C88 RID: 3208 RVA: 0x00049630 File Offset: 0x00047830
		public void alterAssemblyWith(AlterAssemblyStatement vParent)
		{
			int num = 0;
			this.match(171);
			AssemblyOption assemblyOption = this.alterAssemblyWithItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)assemblyOption.OptionKind, assemblyOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AssemblyOption>(vParent, vParent.Options, assemblyOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				assemblyOption = this.alterAssemblyWithItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)assemblyOption.OptionKind, assemblyOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AssemblyOption>(vParent, vParent.Options, assemblyOption);
				}
			}
		}

		// Token: 0x06000C89 RID: 3209 RVA: 0x000496C4 File Offset: 0x000478C4
		public void alterAssemblyDropFile(AlterAssemblyStatement vParent)
		{
			this.match(54);
			this.match(65);
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.DropFiles, literal);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.DropFiles, literal);
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.IsDropAll = true;
					return;
				}
			}
		}

		// Token: 0x06000C8A RID: 3210 RVA: 0x000497A4 File Offset: 0x000479A4
		public void alterAssemblyAddFile(AlterAssemblyStatement vParent)
		{
			this.match(4);
			this.match(65);
			this.match(71);
			AddFileSpec addFileSpec = this.alterAssemblyAddFileSpec();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AddFileSpec>(vParent, vParent.AddFiles, addFileSpec);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				addFileSpec = this.alterAssemblyAddFileSpec();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AddFileSpec>(vParent, vParent.AddFiles, addFileSpec);
				}
			}
		}

		// Token: 0x06000C8B RID: 3211 RVA: 0x00049828 File Offset: 0x00047A28
		public AssemblyOption alterAssemblyWithItem()
		{
			AssemblyOption assemblyOption;
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				assemblyOption = this.assemblyPermissionSetOrVisibilityOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				assemblyOption = this.assemblyUncheckedDataOption();
			}
			return assemblyOption;
		}

		// Token: 0x06000C8C RID: 3212 RVA: 0x00049894 File Offset: 0x00047A94
		public AssemblyOption assemblyPermissionSetOrVisibilityOption()
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 103:
			case 105:
				return this.assemblyVisibilityOption(token);
			case 104:
				break;
			default:
				if (num == 232)
				{
					return this.assemblyPermissionSetOption(token);
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C8D RID: 3213 RVA: 0x00049910 File Offset: 0x00047B10
		public AssemblyOption assemblyUncheckedDataOption()
		{
			AssemblyOption assemblyOption = base.FragmentFactory.CreateFragment<AssemblyOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "UNCHECKED");
				TSql80ParserBaseInternal.Match(token2, "DATA");
				TSql80ParserBaseInternal.UpdateTokenInfo(assemblyOption, token);
				assemblyOption.OptionKind = AssemblyOptionKind.UncheckedData;
				TSql80ParserBaseInternal.UpdateTokenInfo(assemblyOption, token2);
			}
			return assemblyOption;
		}

		// Token: 0x06000C8E RID: 3214 RVA: 0x0004998C File Offset: 0x00047B8C
		public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility)
		{
			OnOffAssemblyOption onOffAssemblyOption = base.FragmentFactory.CreateFragment<OnOffAssemblyOption>();
			OptionState optionState = this.optionOnOff(onOffAssemblyOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tPermissionSetVisibility, "VISIBILITY");
				TSql80ParserBaseInternal.UpdateTokenInfo(onOffAssemblyOption, tPermissionSetVisibility);
				onOffAssemblyOption.OptionKind = AssemblyOptionKind.Visibility;
				onOffAssemblyOption.OptionState = optionState;
			}
			return onOffAssemblyOption;
		}

		// Token: 0x06000C8F RID: 3215 RVA: 0x000499DC File Offset: 0x00047BDC
		public AddFileSpec alterAssemblyAddFileSpec()
		{
			AddFileSpec addFileSpec = base.FragmentFactory.CreateFragment<AddFileSpec>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				addFileSpec.File = scalarExpression;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return addFileSpec;
						}
						switch (num)
						{
						case 4:
						case 6:
							return addFileSpec;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
							{
								this.match(9);
								Literal literal = this.stringLiteral();
								if (this.inputState.guessing == 0)
								{
									addFileSpec.FileName = literal;
									return addFileSpec;
								}
								return addFileSpec;
							}
							case 12:
							case 13:
							case 15:
							case 17:
								return addFileSpec;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return addFileSpec;
						default:
							if (num == 28)
							{
								return addFileSpec;
							}
							switch (num)
							{
							case 33:
							case 35:
								return addFileSpec;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return addFileSpec;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return addFileSpec;
						default:
							if (num == 82)
							{
								return addFileSpec;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return addFileSpec;
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						return addFileSpec;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return addFileSpec;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return addFileSpec;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return addFileSpec;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return addFileSpec;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				if (num == 182 || num == 191 || num == 198)
				{
					return addFileSpec;
				}
			}
			else
			{
				if (num == 204)
				{
					return addFileSpec;
				}
				switch (num)
				{
				case 219:
				case 220:
					return addFileSpec;
				default:
					if (num == 232)
					{
						return addFileSpec;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000C90 RID: 3216 RVA: 0x00049CB0 File Offset: 0x00047EB0
		public AlterFullTextCatalogStatement alterFulltextCatalogStatement()
		{
			AlterFullTextCatalogStatement alterFullTextCatalogStatement = base.FragmentFactory.CreateFragment<AlterFullTextCatalogStatement>();
			this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterFullTextCatalogStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterFullTextCatalogStatement);
			}
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					this.match(171);
					FullTextCatalogOption fullTextCatalogOption = this.accentSensitivity();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextCatalogOption>(alterFullTextCatalogStatement, alterFullTextCatalogStatement.Options, fullTextCatalogOption);
						TSql80ParserBaseInternal.Match(token, "REBUILD");
						alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Rebuild;
					}
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (this.inputState.guessing == 0)
				{
					if (alterFullTextCatalogStatement.Action == AlterFullTextCatalogAction.None)
					{
						if (TSql80ParserBaseInternal.TryMatch(token, "REORGANIZE"))
						{
							alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Reorganize;
						}
						else
						{
							TSql80ParserBaseInternal.Match(token, "REBUILD");
							alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Rebuild;
						}
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(alterFullTextCatalogStatement, token);
				}
			}
			else
			{
				this.match(9);
				IToken token2 = this.LT(1);
				this.match(47);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(alterFullTextCatalogStatement, token2);
					alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.AsDefault;
				}
			}
			return alterFullTextCatalogStatement;
		}

		// Token: 0x06000C91 RID: 3217 RVA: 0x00049E5C File Offset: 0x0004805C
		public AlterFullTextIndexStatement alterFulltextIndexStatement()
		{
			AlterFullTextIndexStatement alterFullTextIndexStatement = base.FragmentFactory.CreateFragment<AlterFullTextIndexStatement>();
			this.match(84);
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				alterFullTextIndexStatement.OnName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(alterFullTextIndexStatement);
			}
			AlterFullTextIndexAction alterFullTextIndexAction = this.alterFulltextIndexAction();
			if (this.inputState.guessing == 0)
			{
				alterFullTextIndexStatement.Action = alterFullTextIndexAction;
			}
			return alterFullTextIndexStatement;
		}

		// Token: 0x06000C92 RID: 3218 RVA: 0x00049EC4 File Offset: 0x000480C4
		public AlterFullTextIndexAction alterFulltextIndexAction()
		{
			int num = this.LA(1);
			switch (num)
			{
			case 4:
				return this.addAlterFulltextIndexAction();
			case 5:
				break;
			case 6:
				return this.alterColumnAlterFullTextIndexAction();
			default:
				if (num == 54)
				{
					return this.dropAlterFulltextIndexAction();
				}
				if (num == 142)
				{
					return this.setAlterFullTextIndexAction();
				}
				break;
			}
			AlterFullTextIndexAction alterFullTextIndexAction;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)) && (base.NextTokenMatches("ENABLE") || base.NextTokenMatches("DISABLE")))
			{
				alterFullTextIndexAction = this.enableDisableAlterFulltextIndexAction();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 160 || this.LA(2) == 232) && base.NextTokenMatches("START"))
			{
				alterFullTextIndexAction = this.startPopulationAlterFulltextIndexAction();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				alterFullTextIndexAction = this.otherPopulationAlterFulltextIndexAction();
			}
			return alterFullTextIndexAction;
		}

		// Token: 0x06000C93 RID: 3219 RVA: 0x00049FF8 File Offset: 0x000481F8
		public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				simpleAlterFullTextIndexAction.ActionKind = TSql90ParserBaseInternal.EnableDisableMatcher<SimpleAlterFullTextIndexActionKind>(token, SimpleAlterFullTextIndexActionKind.Enable, SimpleAlterFullTextIndexActionKind.Disable);
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token);
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06000C94 RID: 3220 RVA: 0x0004A04C File Offset: 0x0004824C
		public AddAlterFullTextIndexAction addAlterFulltextIndexAction()
		{
			AddAlterFullTextIndexAction addAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<AddAlterFullTextIndexAction>();
			this.match(4);
			this.match(191);
			FullTextIndexColumn fullTextIndexColumn = this.fulltextIndexColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(addAlterFullTextIndexAction, addAlterFullTextIndexAction.Columns, fullTextIndexColumn);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				fullTextIndexColumn = this.fulltextIndexColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(addAlterFullTextIndexAction, addAlterFullTextIndexAction.Columns, fullTextIndexColumn);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(addAlterFullTextIndexAction, token);
			}
			bool flag = this.populationOption(addAlterFullTextIndexAction);
			if (this.inputState.guessing == 0)
			{
				addAlterFullTextIndexAction.WithNoPopulation = flag;
			}
			return addAlterFullTextIndexAction;
		}

		// Token: 0x06000C95 RID: 3221 RVA: 0x0004A11C File Offset: 0x0004831C
		public DropAlterFullTextIndexAction dropAlterFulltextIndexAction()
		{
			DropAlterFullTextIndexAction dropAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<DropAlterFullTextIndexAction>();
			this.match(54);
			this.match(191);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropAlterFullTextIndexAction, dropAlterFullTextIndexAction.Columns, identifier);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropAlterFullTextIndexAction, dropAlterFullTextIndexAction.Columns, identifier);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(dropAlterFullTextIndexAction, token);
			}
			bool flag = this.populationOption(dropAlterFullTextIndexAction);
			if (this.inputState.guessing == 0)
			{
				dropAlterFullTextIndexAction.WithNoPopulation = flag;
			}
			return dropAlterFullTextIndexAction;
		}

		// Token: 0x06000C96 RID: 3222 RVA: 0x0004A1EC File Offset: 0x000483EC
		public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "START");
			}
			int num = this.LA(1);
			if (num != 72)
			{
				if (num != 160)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "INCREMENTAL");
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartIncrementalPopulation;
					}
				}
				else
				{
					this.match(160);
					if (this.inputState.guessing == 0)
					{
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartUpdatePopulation;
					}
				}
			}
			else
			{
				this.match(72);
				if (this.inputState.guessing == 0)
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartFullPopulation;
				}
			}
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "POPULATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token3);
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06000C97 RID: 3223 RVA: 0x0004A310 File Offset: 0x00048510
		public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "STOP"))
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StopPopulation;
				}
				else if (TSql80ParserBaseInternal.TryMatch(token, "PAUSE"))
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.PausePopulation;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "RESUME");
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.ResumePopulation;
				}
				TSql80ParserBaseInternal.Match(token2, "POPULATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token2);
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06000C98 RID: 3224 RVA: 0x0004A3B4 File Offset: 0x000485B4
		public AlterFullTextIndexAction setAlterFullTextIndexAction()
		{
			this.match(142);
			AlterFullTextIndexAction alterFullTextIndexAction;
			if (this.LA(1) == 183)
			{
				alterFullTextIndexAction = this.setStoplistAlterFulltextIndexAction();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206 || this.LA(2) == 232) && base.NextTokenMatches("CHANGE_TRACKING"))
			{
				alterFullTextIndexAction = this.setChangeTrackingAlterFulltextIndexAction();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232 || !base.NextTokenMatches("SEARCH"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				alterFullTextIndexAction = this.setSearchPropertyListAlterFullTextIndexAction();
			}
			return alterFullTextIndexAction;
		}

		// Token: 0x06000C99 RID: 3225 RVA: 0x0004A478 File Offset: 0x00048678
		public AlterColumnAlterFullTextIndexAction alterColumnAlterFullTextIndexAction()
		{
			AlterColumnAlterFullTextIndexAction alterColumnAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<AlterColumnAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(6);
			this.match(27);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterColumnAlterFullTextIndexAction, token);
			}
			FullTextIndexColumn fullTextIndexColumn = this.alterFullTextIndexColumn();
			if (this.inputState.guessing == 0)
			{
				alterColumnAlterFullTextIndexAction.Column = fullTextIndexColumn;
			}
			bool flag = this.populationOption(alterColumnAlterFullTextIndexAction);
			if (this.inputState.guessing == 0)
			{
				alterColumnAlterFullTextIndexAction.WithNoPopulation = flag;
			}
			return alterColumnAlterFullTextIndexAction;
		}

		// Token: 0x06000C9A RID: 3226 RVA: 0x0004A4F8 File Offset: 0x000486F8
		public SetStopListAlterFullTextIndexAction setStoplistAlterFulltextIndexAction()
		{
			SetStopListAlterFullTextIndexAction setStopListAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SetStopListAlterFullTextIndexAction>();
			StopListFullTextIndexOption stopListFullTextIndexOption = this.stoplistFulltextIndexOption();
			if (this.inputState.guessing == 0)
			{
				setStopListAlterFullTextIndexAction.StopListOption = stopListFullTextIndexOption;
			}
			bool flag = this.populationOption(setStopListAlterFullTextIndexAction);
			if (this.inputState.guessing == 0)
			{
				setStopListAlterFullTextIndexAction.WithNoPopulation = flag;
			}
			return setStopListAlterFullTextIndexAction;
		}

		// Token: 0x06000C9B RID: 3227 RVA: 0x0004A54C File Offset: 0x0004874C
		public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(232);
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 206)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(206);
				}
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING");
			}
			int num2 = this.LA(1);
			if (num2 != 103)
			{
				if (num2 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "MANUAL"))
					{
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingManual;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "AUTO");
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingAuto;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingOff;
					TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token3);
				}
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06000C9C RID: 3228 RVA: 0x0004A684 File Offset: 0x00048884
		public SetSearchPropertyListAlterFullTextIndexAction setSearchPropertyListAlterFullTextIndexAction()
		{
			SetSearchPropertyListAlterFullTextIndexAction setSearchPropertyListAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SetSearchPropertyListAlterFullTextIndexAction>();
			SearchPropertyListFullTextIndexOption searchPropertyListFullTextIndexOption = this.searchPropertyListFullTextIndexOption();
			if (this.inputState.guessing == 0)
			{
				setSearchPropertyListAlterFullTextIndexAction.SearchPropertyListOption = searchPropertyListFullTextIndexOption;
			}
			bool flag = this.populationOption(setSearchPropertyListAlterFullTextIndexAction);
			if (this.inputState.guessing == 0)
			{
				setSearchPropertyListAlterFullTextIndexAction.WithNoPopulation = flag;
			}
			return setSearchPropertyListAlterFullTextIndexAction;
		}

		// Token: 0x06000C9D RID: 3229 RVA: 0x0004A6D8 File Offset: 0x000488D8
		public bool populationOption(TSqlFragment vParent)
		{
			bool flag = false;
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "NO");
					TSql80ParserBaseInternal.Match(token2, "POPULATION");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					flag = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return flag;
		}

		// Token: 0x06000C9E RID: 3230 RVA: 0x0004A7A0 File Offset: 0x000489A0
		public FullTextIndexColumn alterFullTextIndexColumn()
		{
			FullTextIndexColumn fullTextIndexColumn = base.FragmentFactory.CreateFragment<FullTextIndexColumn>();
			IToken token = null;
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				fullTextIndexColumn.Name = identifier;
			}
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.LT(1);
				this.match(54);
			}
			else
			{
				token = this.LT(1);
				this.match(4);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "STATISTICAL_SEMANTICS");
				if (token != null)
				{
					fullTextIndexColumn.StatisticalSemantics = true;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(fullTextIndexColumn, token2);
			}
			return fullTextIndexColumn;
		}

		// Token: 0x06000C9F RID: 3231 RVA: 0x0004A864 File Offset: 0x00048A64
		public PartitionSpecifier partitionSpecifier()
		{
			PartitionSpecifier partitionSpecifier = base.FragmentFactory.CreateFragment<PartitionSpecifier>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
			}
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num != 20)
							{
								goto IL_0239;
							}
						}
						else
						{
							IToken token2 = this.LT(1);
							this.match(5);
							if (this.inputState.guessing == 0)
							{
								partitionSpecifier.All = true;
								TSql80ParserBaseInternal.UpdateTokenInfo(partitionSpecifier, token2);
								return partitionSpecifier;
							}
							return partitionSpecifier;
						}
					}
					else if (num != 25 && num != 34)
					{
						goto IL_0239;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_0239;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_0239;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_0239;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_0239;
				}
			}
			else if (num <= 187)
			{
				if (num != 163 && num != 187)
				{
					goto IL_0239;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
					break;
				case 192:
					goto IL_0239;
				default:
					switch (num)
					{
					case 197:
					case 199:
					case 200:
						break;
					case 198:
						goto IL_0239;
					default:
						switch (num)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							break;
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 226:
						case 229:
							goto IL_0239;
						default:
							goto IL_0239;
						}
						break;
					}
					break;
				}
			}
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				partitionSpecifier.Number = scalarExpression;
				return partitionSpecifier;
			}
			return partitionSpecifier;
			IL_0239:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000CA0 RID: 3232 RVA: 0x0004AAC0 File Offset: 0x00048CC0
		public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName)
		{
			AlterLoginEnableDisableStatement alterLoginEnableDisableStatement = base.FragmentFactory.CreateFragment<AlterLoginEnableDisableStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				alterLoginEnableDisableStatement.Name = vName;
				alterLoginEnableDisableStatement.IsEnable = TSql90ParserBaseInternal.EnableDisableMatcher<bool>(token, true, false);
				TSql80ParserBaseInternal.UpdateTokenInfo(alterLoginEnableDisableStatement, token);
				base.ThrowPartialAstIfPhaseOne(alterLoginEnableDisableStatement);
			}
			return alterLoginEnableDisableStatement;
		}

		// Token: 0x06000CA1 RID: 3233 RVA: 0x0004AB20 File Offset: 0x00048D20
		public AlterLoginOptionsStatement alterLoginOptions(Identifier vName)
		{
			AlterLoginOptionsStatement alterLoginOptionsStatement = base.FragmentFactory.CreateFragment<AlterLoginOptionsStatement>();
			int num = 0;
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				alterLoginOptionsStatement.Name = vName;
				base.ThrowPartialAstIfPhaseOne(alterLoginOptionsStatement);
			}
			PrincipalOption principalOption = this.alterLoginParam();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterLoginOptionsStatement, alterLoginOptionsStatement.Options, principalOption);
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				principalOption = this.alterLoginParam();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterLoginOptionsStatement, alterLoginOptionsStatement.Options, principalOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
				}
			}
			return alterLoginOptionsStatement;
		}

		// Token: 0x06000CA2 RID: 3234 RVA: 0x0004ABDC File Offset: 0x00048DDC
		public AlterLoginAddDropCredentialStatement alterLoginAddDropCredential(Identifier vName)
		{
			AlterLoginAddDropCredentialStatement alterLoginAddDropCredentialStatement = base.FragmentFactory.CreateFragment<AlterLoginAddDropCredentialStatement>();
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(54);
				if (this.inputState.guessing == 0)
				{
					alterLoginAddDropCredentialStatement.IsAdd = false;
				}
			}
			else
			{
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					alterLoginAddDropCredentialStatement.IsAdd = true;
				}
			}
			if (this.inputState.guessing == 0)
			{
				alterLoginAddDropCredentialStatement.Name = vName;
				base.ThrowPartialAstIfPhaseOne(alterLoginAddDropCredentialStatement);
			}
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
				alterLoginAddDropCredentialStatement.CredentialName = identifier;
			}
			return alterLoginAddDropCredentialStatement;
		}

		// Token: 0x06000CA3 RID: 3235 RVA: 0x0004ACB0 File Offset: 0x00048EB0
		public PrincipalOption alterLoginParam()
		{
			PrincipalOption principalOption = null;
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				int num = this.LA(1);
				switch (num)
				{
				case 103:
				case 105:
					principalOption = this.onOffPrincipalOption(token);
					goto IL_012C;
				case 104:
					break;
				default:
					if (num != 224)
					{
						switch (num)
						{
						case 230:
						case 231:
							break;
						case 232:
						case 233:
						{
							Identifier identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
								if (TSql80ParserBaseInternal.TryMatch(token, "NAME"))
								{
									identifierPrincipalOption.OptionKind = PrincipalOptionKind.Name;
								}
								else
								{
									identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
								}
								identifierPrincipalOption.Identifier = identifier;
								principalOption = identifierPrincipalOption;
								goto IL_012C;
							}
							goto IL_012C;
						}
						default:
							goto IL_0119;
						}
					}
					principalOption = this.passwordAlterLoginOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "PASSWORD");
						goto IL_012C;
					}
					goto IL_012C;
				}
				IL_0119:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_012C:
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(principalOption, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NO");
					TSql80ParserBaseInternal.Match(token3, "CREDENTIAL");
					PrincipalOption principalOption2 = base.FragmentFactory.CreateFragment<PrincipalOption>();
					principalOption2.OptionKind = PrincipalOptionKind.NoCredential;
					TSql80ParserBaseInternal.UpdateTokenInfo(principalOption2, token3);
					principalOption = principalOption2;
				}
			}
			return principalOption;
		}

		// Token: 0x06000CA4 RID: 3236 RVA: 0x0004AEA0 File Offset: 0x000490A0
		public PasswordAlterPrincipalOption passwordAlterLoginOption()
		{
			PasswordAlterPrincipalOption passwordAlterPrincipalOption = base.FragmentFactory.CreateFragment<PasswordAlterPrincipalOption>();
			Literal literal = this.loginPassword();
			if (this.inputState.guessing == 0)
			{
				passwordAlterPrincipalOption.Password = literal;
				passwordAlterPrincipalOption.OptionKind = PrincipalOptionKind.Password;
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal2 = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "OLD_PASSWORD");
					passwordAlterPrincipalOption.OldPassword = literal2;
				}
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_49_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_75_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				while (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
				{
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql90ParserBaseInternal.RecognizeAlterLoginSecAdminPasswordOption(token2, passwordAlterPrincipalOption);
					}
				}
			}
			return passwordAlterPrincipalOption;
		}

		// Token: 0x06000CA5 RID: 3237 RVA: 0x0004AFD0 File Offset: 0x000491D0
		public AlterPartitionFunctionStatement alterPartitionFunctionStatement()
		{
			AlterPartitionFunctionStatement alterPartitionFunctionStatement = base.FragmentFactory.CreateFragment<AlterPartitionFunctionStatement>();
			this.match(73);
			Identifier identifier = this.identifier();
			this.match(191);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				alterPartitionFunctionStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterPartitionFunctionStatement);
			}
			int num = this.LA(1);
			if (num != 182)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "SPLIT");
					alterPartitionFunctionStatement.IsSplit = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionFunctionStatement, token);
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(182);
				if (this.inputState.guessing == 0)
				{
					alterPartitionFunctionStatement.IsSplit = false;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionFunctionStatement, token2);
				}
			}
			if (this.LA(1) == 232 && this.LA(2) == 191)
			{
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(191);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				IToken token4 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "RANGE");
					alterPartitionFunctionStatement.Boundary = scalarExpression;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionFunctionStatement, token4);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterPartitionFunctionStatement;
		}

		// Token: 0x06000CA6 RID: 3238 RVA: 0x0004B188 File Offset: 0x00049388
		public AlterPartitionSchemeStatement alterPartitionSchemeStatement()
		{
			AlterPartitionSchemeStatement alterPartitionSchemeStatement = base.FragmentFactory.CreateFragment<AlterPartitionSchemeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SCHEME");
				alterPartitionSchemeStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterPartitionSchemeStatement);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "NEXT");
				TSql80ParserBaseInternal.Match(token3, "USED");
				TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionSchemeStatement, token3);
			}
			if (this.LA(1) >= 230 && this.LA(1) <= 233 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					alterPartitionSchemeStatement.FileGroup = identifierOrValueExpression;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterPartitionSchemeStatement;
		}

		// Token: 0x06000CA7 RID: 3239 RVA: 0x0004B2C4 File Offset: 0x000494C4
		public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited)
		{
			ExecuteAsClause executeAsClause = base.FragmentFactory.CreateFragment<ExecuteAsClause>();
			switch (this.LA(1))
			{
			case 60:
			{
				IToken token = this.LT(1);
				this.match(60);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(executeAsClause, token);
				}
				break;
			}
			case 61:
			{
				IToken token2 = this.LT(1);
				this.match(61);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(executeAsClause, token2);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.match(9);
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					executeAsClause.ExecuteAsOption = ExecuteAsOption.String;
					executeAsClause.Literal = literal;
				}
				break;
			}
			case 232:
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					executeAsClause.ExecuteAsOption = ExecuteAsOptionHelper.Instance.ParseOption(token3);
					if ((vCallerProhibited && executeAsClause.ExecuteAsOption == ExecuteAsOption.Caller) || (vOwnerProhibited && executeAsClause.ExecuteAsOption == ExecuteAsOption.Owner))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
					}
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executeAsClause;
		}

		// Token: 0x06000CA8 RID: 3240 RVA: 0x0004B414 File Offset: 0x00049614
		public void queueOption(QueueStatement vParent, bool vDropAccepted)
		{
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				QueueOption queueOption = this.stateQueueOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<QueueOption>(vParent, vParent.QueueOptions, queueOption);
					return;
				}
			}
			else
			{
				if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("ACTIVATION"))
				{
					this.queueActivationOption(vParent, vDropAccepted);
					return;
				}
				if (this.LA(1) != 232 || this.LA(2) != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				QueueOption queueOption = this.queuePoisonMessageHandlingOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<QueueOption>(vParent, vParent.QueueOptions, queueOption);
					return;
				}
			}
		}

		// Token: 0x06000CA9 RID: 3241 RVA: 0x0004B4E8 File Offset: 0x000496E8
		public QueueStateOption stateQueueOption()
		{
			QueueStateOption queueStateOption = base.FragmentFactory.CreateFragment<QueueStateOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(queueStateOption);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "STATUS"))
				{
					queueStateOption.OptionKind = QueueOptionKind.Status;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "RETENTION");
					queueStateOption.OptionKind = QueueOptionKind.Retention;
				}
				queueStateOption.OptionState = optionState;
			}
			return queueStateOption;
		}

		// Token: 0x06000CAA RID: 3242 RVA: 0x0004B568 File Offset: 0x00049768
		public void queueActivationOption(QueueStatement vParent, bool vDropAccepted)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ACTIVATION");
			}
			QueueOption queueOption = this.activationQueueOptionArgument(vDropAccepted, ref flag, ref flag2, ref flag3);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<QueueOption>(vParent, vParent.QueueOptions, queueOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				queueOption = this.activationQueueOptionArgument(vDropAccepted, ref flag, ref flag2, ref flag3);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<QueueOption>(vParent, vParent.QueueOptions, queueOption);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
				if (vParent is CreateQueueStatement && (flag || flag2 || flag3) && (!flag || !flag2 || !flag3))
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46069", vParent, TSqlParserResource.SQL46069Message, new string[0]);
				}
			}
		}

		// Token: 0x06000CAB RID: 3243 RVA: 0x0004B680 File Offset: 0x00049880
		public QueueStateOption queuePoisonMessageHandlingOption()
		{
			QueueStateOption queueStateOption = base.FragmentFactory.CreateFragment<QueueStateOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "POISON_MESSAGE_HANDLING");
				TSql80ParserBaseInternal.UpdateTokenInfo(queueStateOption, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(queueStateOption);
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "STATUS");
				queueStateOption.OptionState = optionState;
				queueStateOption.OptionKind = QueueOptionKind.PoisonMessageHandlingStatus;
				TSql80ParserBaseInternal.UpdateTokenInfo(queueStateOption, token3);
			}
			return queueStateOption;
		}

		// Token: 0x06000CAC RID: 3244 RVA: 0x0004B748 File Offset: 0x00049948
		public QueueOption activationQueueOptionArgument(bool vDropAccepted, ref bool procedureName, ref bool maxQueueReaders, ref bool executeAs)
		{
			int num = this.LA(1);
			QueueOption queueOption;
			if (num != 54)
			{
				switch (num)
				{
				case 60:
				case 61:
					queueOption = this.executeAsQueueOptionArgument();
					if (this.inputState.guessing == 0)
					{
						executeAs = true;
					}
					break;
				default:
					if (num == 232)
					{
						IToken token = this.LT(1);
						this.match(232);
						this.match(206);
						int num2 = this.LA(1);
						if (num2 <= 200)
						{
							switch (num2)
							{
							case 103:
							case 105:
								return this.statusQueueOptionArgument(token);
							case 104:
								goto IL_00D7;
							default:
								if (num2 != 200)
								{
									goto IL_00D7;
								}
								break;
							}
						}
						else if (num2 != 221)
						{
							switch (num2)
							{
							case 232:
							case 233:
								break;
							default:
								goto IL_00D7;
							}
						}
						else
						{
							queueOption = this.maxQueueReadersQueueOptionArgument(token);
							if (this.inputState.guessing == 0)
							{
								maxQueueReaders = true;
								break;
							}
							break;
						}
						queueOption = this.procedureNameQueueOptionArgument(token);
						if (this.inputState.guessing == 0)
						{
							procedureName = true;
							break;
						}
						break;
						IL_00D7:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				queueOption = this.dropQueueOptionArgument(vDropAccepted);
			}
			return queueOption;
		}

		// Token: 0x06000CAD RID: 3245 RVA: 0x0004B878 File Offset: 0x00049A78
		public QueueStateOption statusQueueOptionArgument(IToken vStartToken)
		{
			QueueStateOption queueStateOption = base.FragmentFactory.CreateFragment<QueueStateOption>();
			OptionState optionState = this.optionOnOff(queueStateOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(vStartToken, "STATUS");
				TSql80ParserBaseInternal.UpdateTokenInfo(queueStateOption, vStartToken);
				queueStateOption.OptionState = optionState;
				queueStateOption.OptionKind = QueueOptionKind.ActivationStatus;
			}
			return queueStateOption;
		}

		// Token: 0x06000CAE RID: 3246 RVA: 0x0004B8C8 File Offset: 0x00049AC8
		public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken)
		{
			QueueProcedureOption queueProcedureOption = base.FragmentFactory.CreateFragment<QueueProcedureOption>();
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(vStartToken, "PROCEDURE_NAME");
				TSql80ParserBaseInternal.UpdateTokenInfo(queueProcedureOption, vStartToken);
				queueProcedureOption.OptionValue = schemaObjectName;
				queueProcedureOption.OptionKind = QueueOptionKind.ActivationProcedureName;
			}
			return queueProcedureOption;
		}

		// Token: 0x06000CAF RID: 3247 RVA: 0x0004B918 File Offset: 0x00049B18
		public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken)
		{
			QueueValueOption queueValueOption = base.FragmentFactory.CreateFragment<QueueValueOption>();
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(vStartToken, "MAX_QUEUE_READERS");
				TSql80ParserBaseInternal.UpdateTokenInfo(queueValueOption, vStartToken);
				queueValueOption.OptionValue = literal;
				queueValueOption.OptionKind = QueueOptionKind.ActivationMaxQueueReaders;
			}
			return queueValueOption;
		}

		// Token: 0x06000CB0 RID: 3248 RVA: 0x0004B968 File Offset: 0x00049B68
		public QueueOption dropQueueOptionArgument(bool vDropAccepted)
		{
			QueueOption queueOption = base.FragmentFactory.CreateFragment<QueueOption>();
			IToken token = this.LT(1);
			this.match(54);
			if (this.inputState.guessing == 0)
			{
				if (!vDropAccepted)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(queueOption, token);
				queueOption.OptionKind = QueueOptionKind.ActivationDrop;
			}
			return queueOption;
		}

		// Token: 0x06000CB1 RID: 3249 RVA: 0x0004B9BC File Offset: 0x00049BBC
		public QueueExecuteAsOption executeAsQueueOptionArgument()
		{
			QueueExecuteAsOption queueExecuteAsOption = base.FragmentFactory.CreateFragment<QueueExecuteAsOption>();
			ExecuteAsClause executeAsClause = this.executeAsClause(true, false);
			if (this.inputState.guessing == 0)
			{
				queueExecuteAsOption.OptionValue = executeAsClause;
				queueExecuteAsOption.OptionKind = QueueOptionKind.ActivationExecuteAs;
			}
			return queueExecuteAsOption;
		}

		// Token: 0x06000CB2 RID: 3250 RVA: 0x0004B9FC File Offset: 0x00049BFC
		public AlterRoleAction alterRoleAction()
		{
			int num = this.LA(1);
			AlterRoleAction alterRoleAction;
			if (num != 4)
			{
				if (num != 54)
				{
					if (num != 171)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					alterRoleAction = this.renameAlterRoleAction();
				}
				else
				{
					alterRoleAction = this.dropMemberAlterRoleAction();
				}
			}
			else
			{
				alterRoleAction = this.addMemberAlterRoleAction();
			}
			return alterRoleAction;
		}

		// Token: 0x06000CB3 RID: 3251 RVA: 0x0004BA54 File Offset: 0x00049C54
		public AddMemberAlterRoleAction addMemberAlterRoleAction()
		{
			AddMemberAlterRoleAction addMemberAlterRoleAction = base.FragmentFactory.CreateFragment<AddMemberAlterRoleAction>();
			IToken token = this.LT(1);
			this.match(4);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(addMemberAlterRoleAction, token);
				TSql80ParserBaseInternal.Match(token2, "MEMBER");
				addMemberAlterRoleAction.Member = identifier;
			}
			return addMemberAlterRoleAction;
		}

		// Token: 0x06000CB4 RID: 3252 RVA: 0x0004BAC4 File Offset: 0x00049CC4
		public DropMemberAlterRoleAction dropMemberAlterRoleAction()
		{
			DropMemberAlterRoleAction dropMemberAlterRoleAction = base.FragmentFactory.CreateFragment<DropMemberAlterRoleAction>();
			IToken token = this.LT(1);
			this.match(54);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(dropMemberAlterRoleAction, token);
				TSql80ParserBaseInternal.Match(token2, "MEMBER");
				dropMemberAlterRoleAction.Member = identifier;
			}
			return dropMemberAlterRoleAction;
		}

		// Token: 0x06000CB5 RID: 3253 RVA: 0x0004BB34 File Offset: 0x00049D34
		public RenameAlterRoleAction renameAlterRoleAction()
		{
			RenameAlterRoleAction renameAlterRoleAction = base.FragmentFactory.CreateFragment<RenameAlterRoleAction>();
			this.match(171);
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NAME");
				TSql80ParserBaseInternal.UpdateTokenInfo(renameAlterRoleAction, token);
				renameAlterRoleAction.NewName = identifier;
			}
			return renameAlterRoleAction;
		}

		// Token: 0x06000CB6 RID: 3254 RVA: 0x0004BBA8 File Offset: 0x00049DA8
		public RouteOption routeOption()
		{
			RouteOption routeOption = base.FragmentFactory.CreateFragment<RouteOption>();
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LIFETIME"))
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					routeOption.OptionKind = RouteOptionKind.Lifetime;
					routeOption.Literal = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(routeOption, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					routeOption.OptionKind = RouteOptionHelper.Instance.ParseOption(token2);
					routeOption.Literal = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(routeOption, token2);
				}
			}
			return routeOption;
		}

		// Token: 0x06000CB7 RID: 3255 RVA: 0x0004BCC0 File Offset: 0x00049EC0
		public SchemaObjectName schemaObjectTwoPartName()
		{
			SchemaObjectName schemaObjectName = null;
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(200);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
				}
			}
			return schemaObjectName;
		}

		// Token: 0x06000CB8 RID: 3256 RVA: 0x0004BD4C File Offset: 0x00049F4C
		public void alterSequenceOptionList(AlterSequenceStatement vParent)
		{
			int num = 0;
			int num2 = 0;
			while (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				SequenceOption sequenceOption = this.alterSequenceOptionListElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)sequenceOption.OptionKind, sequenceOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SequenceOption>(vParent, vParent.SequenceOptions, sequenceOption);
				}
				num2++;
			}
			if (num2 >= 1)
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000CB9 RID: 3257 RVA: 0x0004BDCC File Offset: 0x00049FCC
		public SequenceOption alterSequenceOptionListElement()
		{
			SequenceOption sequenceOption;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)) && base.NextTokenMatches("RESTART"))
			{
				sequenceOption = this.sequenceRestartOptionListElement();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				sequenceOption = this.commonSequenceOptionListElement();
			}
			return sequenceOption;
		}

		// Token: 0x06000CBA RID: 3258 RVA: 0x0004BE50 File Offset: 0x0004A050
		public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement()
		{
			AlterServiceMasterKeyStatement alterServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<AlterServiceMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				base.ThrowPartialAstIfPhaseOne(alterServiceMasterKeyStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("FORCE"))
			{
				IToken token2 = this.LT(1);
				this.match(232);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FORCE");
					TSql80ParserBaseInternal.Match(token3, "REGENERATE");
					alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.ForceRegenerate;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterServiceMasterKeyStatement, token3);
				}
			}
			else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "REGENERATE");
					alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.Regenerate;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterServiceMasterKeyStatement, token4);
				}
			}
			else
			{
				if (this.LA(1) != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				IToken token5 = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.stringLiteral();
				this.match(198);
				IToken token6 = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal2 = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token5, "OLD_ACCOUNT"))
					{
						TSql80ParserBaseInternal.Match(token6, "OLD_PASSWORD");
						alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.WithOldAccount;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token5, "NEW_ACCOUNT");
						TSql80ParserBaseInternal.Match(token6, "NEW_PASSWORD");
						alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.WithNewAccount;
					}
					alterServiceMasterKeyStatement.Account = literal;
					alterServiceMasterKeyStatement.Password = literal2;
				}
			}
			return alterServiceMasterKeyStatement;
		}

		// Token: 0x06000CBB RID: 3259 RVA: 0x0004C08C File Offset: 0x0004A28C
		public PrincipalOption alterUserOption()
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			PrincipalOption principalOption;
			if (num != 100 && num != 221)
			{
				switch (num)
				{
				case 232:
				case 233:
					principalOption = this.identifierAlterUserOption(token);
					break;
				default:
					if ((this.LA(1) != 224 && this.LA(1) != 230 && this.LA(1) != 231) || !TSql80ParserBaseInternal.TryMatch(token, "PASSWORD"))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					principalOption = this.passwordAlterUserOption(token);
					break;
				}
			}
			else
			{
				principalOption = this.literalAlterUserOption(token);
			}
			return principalOption;
		}

		// Token: 0x06000CBC RID: 3260 RVA: 0x0004C150 File Offset: 0x0004A350
		public PasswordAlterPrincipalOption passwordAlterUserOption(IToken tOption)
		{
			PasswordAlterPrincipalOption passwordAlterPrincipalOption = base.FragmentFactory.CreateFragment<PasswordAlterPrincipalOption>();
			Literal literal = this.loginPassword();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tOption, "PASSWORD");
				TSql80ParserBaseInternal.UpdateTokenInfo(passwordAlterPrincipalOption, tOption);
				passwordAlterPrincipalOption.Password = literal;
				passwordAlterPrincipalOption.OptionKind = PrincipalOptionKind.Password;
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal2 = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "OLD_PASSWORD");
					passwordAlterPrincipalOption.OldPassword = literal2;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_49_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return passwordAlterPrincipalOption;
		}

		// Token: 0x06000CBD RID: 3261 RVA: 0x0004C23C File Offset: 0x0004A43C
		public IdentifierPrincipalOption identifierAlterUserOption(IToken tOption)
		{
			IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				identifierPrincipalOption.OptionKind = UserOptionHelper.Instance.ParseOption(tOption, SqlVersionFlags.TSql110);
				identifierPrincipalOption.Identifier = identifier;
				TSql80ParserBaseInternal.UpdateTokenInfo(identifierPrincipalOption, tOption);
			}
			return identifierPrincipalOption;
		}

		// Token: 0x06000CBE RID: 3262 RVA: 0x0004C28C File Offset: 0x0004A48C
		public LiteralPrincipalOption literalAlterUserOption(IToken tOption)
		{
			LiteralPrincipalOption literalPrincipalOption = base.FragmentFactory.CreateFragment<LiteralPrincipalOption>();
			int num = this.LA(1);
			if (num != 100)
			{
				if (num != 221)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(tOption, "DEFAULT_LANGUAGE");
					literalPrincipalOption.OptionKind = PrincipalOptionKind.DefaultLanguage;
					literalPrincipalOption.Value = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(literalPrincipalOption, tOption);
				}
			}
			else
			{
				Literal literal = this.nullLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(tOption, "DEFAULT_SCHEMA");
					literalPrincipalOption.OptionKind = PrincipalOptionKind.DefaultSchema;
					literalPrincipalOption.Value = literal;
				}
			}
			return literalPrincipalOption;
		}

		// Token: 0x06000CBF RID: 3263 RVA: 0x0004C334 File Offset: 0x0004A534
		public void authorization(IAuthorization vParent)
		{
			this.match(11);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				vParent.Owner = identifier;
			}
		}

		// Token: 0x06000CC0 RID: 3264 RVA: 0x0004C364 File Offset: 0x0004A564
		public StatementList createSchemaElementList()
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			while (TSql110ParserInternal.tokenSet_76_.member(this.LA(1)))
			{
				TSqlStatement tsqlStatement = this.createSchemaElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
				}
			}
			return statementList;
		}

		// Token: 0x06000CC1 RID: 3265 RVA: 0x0004C3B4 File Offset: 0x0004A5B4
		public TSqlStatement createSchemaElement()
		{
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 49)
			{
				if (num != 75)
				{
					if (num != 132)
					{
						if (this.LA(1) == 35 && this.LA(2) == 166)
						{
							tsqlStatement = this.createViewStatement();
						}
						else
						{
							if (this.LA(1) != 35 || this.LA(2) != 148)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							tsqlStatement = this.createTableStatement();
						}
					}
					else
					{
						tsqlStatement = this.revokeStatement90();
					}
				}
				else
				{
					tsqlStatement = this.grantStatement90();
				}
			}
			else
			{
				tsqlStatement = this.denyStatement90();
			}
			this.optSemicolons(tsqlStatement);
			return tsqlStatement;
		}

		// Token: 0x06000CC2 RID: 3266 RVA: 0x0004C45C File Offset: 0x0004A65C
		public void functionStatementBody(FunctionStatementBody vResult, out bool vParseErrorOccurred)
		{
			this.match(73);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "TRIGGER");
				vResult.Name = schemaObjectName;
				TSql80ParserBaseInternal.CheckForTemporaryFunction(schemaObjectName);
				base.ThrowPartialAstIfPhaseOne(vResult);
			}
			this.match(191);
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.functionParameterList(vResult);
			}
			this.match(192);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RETURNS");
			}
			this.functionReturnTypeAndBody(vResult, out vParseErrorOccurred);
		}

		// Token: 0x06000CC3 RID: 3267 RVA: 0x0004C524 File Offset: 0x0004A724
		public void functionParameterList(FunctionStatementBody vResult)
		{
			ProcedureParameter procedureParameter = this.functionParameter();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, procedureParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				procedureParameter = this.functionParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, procedureParameter);
				}
			}
		}

		// Token: 0x06000CC4 RID: 3268 RVA: 0x0004C590 File Offset: 0x0004A790
		public void functionReturnTypeAndBody(FunctionStatementBody vParent, out bool vParseErrorOccurred)
		{
			vParseErrorOccurred = false;
			int num = this.LA(1);
			if (num != 53 && num != 96)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
				{
					DeclareTableVariableBody declareTableVariableBody = this.declareTableBody(IndexAffectingStatement.CreateOrAlterFunction);
					if (this.inputState.guessing == 0)
					{
						TableValuedFunctionReturnType tableValuedFunctionReturnType = base.FragmentFactory.CreateFragment<TableValuedFunctionReturnType>();
						tableValuedFunctionReturnType.DeclareTableVariableBody = declareTableVariableBody;
						vParent.ReturnType = tableValuedFunctionReturnType;
					}
					int num2 = this.LA(1);
					if (num2 != 9 && num2 != 13)
					{
						if (num2 != 171)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.functionAttributes(vParent);
					}
					int num3 = this.LA(1);
					if (num3 != 9)
					{
						if (num3 != 13)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					BeginEndBlockStatement beginEndBlockStatement = this.beginEndBlockStatement();
					if (this.inputState.guessing == 0)
					{
						base.SetFunctionBodyStatement(vParent, beginEndBlockStatement);
						vParseErrorOccurred = beginEndBlockStatement == null;
						return;
					}
					return;
				}
				default:
					if (this.LA(1) == 148 && (this.LA(2) == 9 || this.LA(2) == 131 || this.LA(2) == 171))
					{
						this.match(148);
						int num4 = this.LA(1);
						if (num4 != 9 && num4 != 131)
						{
							if (num4 != 171)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							this.functionAttributesNoExecuteAs(vParent);
						}
						int num5 = this.LA(1);
						if (num5 != 9)
						{
							if (num5 != 131)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(9);
						}
						this.match(131);
						SelectFunctionReturnType selectFunctionReturnType = this.functionReturnClauseRelational();
						if (this.inputState.guessing == 0)
						{
							vParent.ReturnType = selectFunctionReturnType;
							return;
						}
						return;
					}
					else
					{
						if (this.LA(1) != 148 || this.LA(2) != 191)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(148);
						DeclareTableVariableBody declareTableVariableBody = this.declareTableBodyMain(IndexAffectingStatement.CreateOrAlterFunction);
						if (this.inputState.guessing == 0)
						{
							TableValuedFunctionReturnType tableValuedFunctionReturnType2 = base.FragmentFactory.CreateFragment<TableValuedFunctionReturnType>();
							tableValuedFunctionReturnType2.DeclareTableVariableBody = declareTableVariableBody;
							vParent.ReturnType = tableValuedFunctionReturnType2;
						}
						int num6 = this.LA(1);
						if (num6 <= 113)
						{
							if (num6 == 9 || num6 == 113)
							{
								goto IL_03C4;
							}
						}
						else
						{
							if (num6 == 171)
							{
								this.functionAttributes(vParent);
								goto IL_03C4;
							}
							if (num6 == 175)
							{
								goto IL_03C4;
							}
						}
						throw new NoViableAltException(this.LT(1), this.getFilename());
						IL_03C4:
						int num7 = this.LA(1);
						if (num7 != 9)
						{
							if (num7 != 113)
							{
								if (num7 != 175)
								{
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
							}
							else
							{
								this.clrTableValuedFunctionOrderHint(vParent);
							}
						}
						int num8 = this.LA(1);
						if (num8 != 9)
						{
							if (num8 != 175)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(9);
						}
						MethodSpecifier methodSpecifier = this.methodSpecifier();
						this.optSemicolons(vParent);
						if (this.inputState.guessing == 0)
						{
							vParent.MethodSpecifier = methodSpecifier;
							return;
						}
						return;
					}
					break;
				}
			}
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				ScalarFunctionReturnType scalarFunctionReturnType = base.FragmentFactory.CreateFragment<ScalarFunctionReturnType>();
				scalarFunctionReturnType.DataType = dataTypeReference;
				vParent.ReturnType = scalarFunctionReturnType;
			}
			int num9 = this.LA(1);
			if (num9 <= 13)
			{
				if (num9 == 9 || num9 == 13)
				{
					goto IL_00B4;
				}
			}
			else
			{
				if (num9 == 171)
				{
					this.functionAttributes(vParent);
					goto IL_00B4;
				}
				if (num9 == 175)
				{
					goto IL_00B4;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00B4:
			int num10 = this.LA(1);
			if (num10 != 9)
			{
				if (num10 != 13 && num10 != 175)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
			}
			int num11 = this.LA(1);
			if (num11 != 13)
			{
				if (num11 != 175)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				MethodSpecifier methodSpecifier = this.methodSpecifier();
				this.optSemicolons(vParent);
				if (this.inputState.guessing == 0)
				{
					vParent.MethodSpecifier = methodSpecifier;
					return;
				}
			}
			else
			{
				BeginEndBlockStatement beginEndBlockStatement = this.beginEndBlockStatement();
				if (this.inputState.guessing == 0)
				{
					base.SetFunctionBodyStatement(vParent, beginEndBlockStatement);
					vParseErrorOccurred = beginEndBlockStatement == null;
					return;
				}
			}
		}

		// Token: 0x06000CC5 RID: 3269 RVA: 0x0004CA0C File Offset: 0x0004AC0C
		public ProcedureParameter functionParameter()
		{
			ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
			Identifier identifier = this.identifierVariable();
			int num = this.LA(1);
			if (num <= 53)
			{
				if (num == 9)
				{
					this.match(9);
					goto IL_0064;
				}
				if (num == 53)
				{
					goto IL_0064;
				}
			}
			else
			{
				if (num == 96)
				{
					goto IL_0064;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_0064;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0064:
			if (this.inputState.guessing == 0)
			{
				procedureParameter.VariableName = identifier;
			}
			this.scalarProcedureParameter(procedureParameter, false);
			return procedureParameter;
		}

		// Token: 0x06000CC6 RID: 3270 RVA: 0x0004CA9C File Offset: 0x0004AC9C
		public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed)
		{
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				vParent.DataType = dataTypeReference;
			}
			int num = this.LA(1);
			if (num <= 171)
			{
				if (num == 9 || num == 67 || num == 171)
				{
					goto IL_00A8;
				}
			}
			else if (num <= 198)
			{
				if (num == 192 || num == 198)
				{
					goto IL_00A8;
				}
			}
			else if (num != 206)
			{
				if (num == 232)
				{
					goto IL_00A8;
				}
			}
			else
			{
				this.match(206);
				ScalarExpression scalarExpression = this.possibleNegativeConstantOrIdentifierWithDefault();
				if (this.inputState.guessing == 0)
				{
					vParent.Value = scalarExpression;
					goto IL_00A8;
				}
				goto IL_00A8;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00A8:
			int num2 = this.LA(1);
			if (num2 <= 171)
			{
				if (num2 == 9 || num2 == 67 || num2 == 171)
				{
					return;
				}
			}
			else
			{
				if (num2 == 192 || num2 == 198)
				{
					return;
				}
				if (num2 == 232)
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.TryMatch(token, "READONLY"))
						{
							vParent.Modifier = ParameterModifier.ReadOnly;
						}
						else
						{
							TSql80ParserBaseInternal.Match(token, "OUTPUT", "OUT");
							if (outputAllowed)
							{
								vParent.Modifier = ParameterModifier.Output;
							}
							else
							{
								TSql80ParserBaseInternal.ThrowParseErrorException("SQL46039", token, TSqlParserResource.SQL46039Message, new string[0]);
							}
						}
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
						return;
					}
					return;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000CC7 RID: 3271 RVA: 0x0004CC2C File Offset: 0x0004AE2C
		public void functionAttributes(FunctionStatementBody vParent)
		{
			int num = 0;
			this.match(171);
			FunctionOption functionOption = this.functionAttribute();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				functionOption = this.functionAttribute();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
				}
			}
		}

		// Token: 0x06000CC8 RID: 3272 RVA: 0x0004CCC0 File Offset: 0x0004AEC0
		public BeginEndBlockStatement beginEndBlockStatement()
		{
			BeginEndBlockStatement beginEndBlockStatement = base.FragmentFactory.CreateFragment<BeginEndBlockStatement>();
			bool flag = false;
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			IToken token = this.LT(1);
			this.match(13);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(beginEndBlockStatement, token);
			}
			while (this.LA(1) == 204)
			{
				this.LT(1);
				this.match(204);
			}
			int num = 0;
			while (TSql110ParserInternal.tokenSet_3_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_77_.member(this.LA(2)) && base.IsStatementIsNext())
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						statementList.Statements.Add(tsqlStatement);
					}
					else
					{
						flag = true;
						base.ThrowIfEndOfFileOrBatch();
					}
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(56);
			if (this.inputState.guessing == 0)
			{
				beginEndBlockStatement.StatementList = statementList;
				TSql80ParserBaseInternal.UpdateTokenInfo(beginEndBlockStatement, token2);
				if (flag)
				{
					beginEndBlockStatement = null;
				}
			}
			return beginEndBlockStatement;
		}

		// Token: 0x06000CC9 RID: 3273 RVA: 0x0004CDEC File Offset: 0x0004AFEC
		public MethodSpecifier methodSpecifier()
		{
			MethodSpecifier methodSpecifier = base.FragmentFactory.CreateFragment<MethodSpecifier>();
			this.LT(1);
			this.match(175);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NAME");
			}
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				methodSpecifier.AssemblyName = identifier;
			}
			this.match(200);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				methodSpecifier.ClassName = identifier;
			}
			this.match(200);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				methodSpecifier.MethodName = identifier;
			}
			return methodSpecifier;
		}

		// Token: 0x06000CCA RID: 3274 RVA: 0x0004CEB0 File Offset: 0x0004B0B0
		public void functionAttributesNoExecuteAs(FunctionStatementBody vParent)
		{
			int num = 0;
			this.match(171);
			FunctionOption functionOption = this.functionAttributeNoExecuteAs();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				functionOption = this.functionAttributeNoExecuteAs();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
				}
			}
		}

		// Token: 0x06000CCB RID: 3275 RVA: 0x0004CF44 File Offset: 0x0004B144
		public SelectFunctionReturnType functionReturnClauseRelational()
		{
			SelectFunctionReturnType selectFunctionReturnType = base.FragmentFactory.CreateFragment<SelectFunctionReturnType>();
			if ((this.LA(1) == 140 || this.LA(1) == 171 || this.LA(1) == 191) && TSql110ParserInternal.tokenSet_78_.member(this.LA(2)))
			{
				SelectStatement selectStatement = this.subqueryExpressionWithOptionalCTE();
				if (this.inputState.guessing == 0)
				{
					selectFunctionReturnType.SelectStatement = selectStatement;
				}
			}
			else
			{
				if (this.LA(1) != 191 || this.LA(2) != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(191);
				WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
				QueryExpression queryExpression = this.subqueryExpression(SubDmlFlags.SelectNotForInsert);
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(selectFunctionReturnType, token);
					if (withCtesAndXmlNamespaces != null && withCtesAndXmlNamespaces.ChangeTrackingContext != null)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46072", withCtesAndXmlNamespaces.ChangeTrackingContext, TSqlParserResource.SQL46072Message, new string[0]);
					}
					SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
					selectStatement.QueryExpression = queryExpression;
					selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
					selectFunctionReturnType.SelectStatement = selectStatement;
					TSql80ParserBaseInternal.UpdateTokenInfo(selectFunctionReturnType, token2);
				}
			}
			return selectFunctionReturnType;
		}

		// Token: 0x06000CCC RID: 3276 RVA: 0x0004D098 File Offset: 0x0004B298
		public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType)
		{
			bool flag = false;
			Identifier identifier = this.identifierVariable();
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 148)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			this.match(148);
			DeclareTableVariableBody declareTableVariableBody = this.declareTableBodyMain(statementType);
			if (this.inputState.guessing == 0)
			{
				declareTableVariableBody.VariableName = identifier;
				declareTableVariableBody.AsDefined = flag;
			}
			return declareTableVariableBody;
		}

		// Token: 0x06000CCD RID: 3277 RVA: 0x0004D120 File Offset: 0x0004B320
		public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType)
		{
			DeclareTableVariableBody declareTableVariableBody = base.FragmentFactory.CreateFragment<DeclareTableVariableBody>();
			this.match(191);
			TableDefinition tableDefinition = this.tableDefinition(statementType, null);
			if (this.inputState.guessing == 0)
			{
				declareTableVariableBody.Definition = tableDefinition;
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(declareTableVariableBody, token);
			}
			return declareTableVariableBody;
		}

		// Token: 0x06000CCE RID: 3278 RVA: 0x0004D18C File Offset: 0x0004B38C
		public void clrTableValuedFunctionOrderHint(FunctionStatementBody vParent)
		{
			OrderBulkInsertOption orderBulkInsertOption = this.bulkInsertSortOrderOption();
			if (this.inputState.guessing == 0)
			{
				vParent.OrderHint = orderBulkInsertOption;
			}
		}

		// Token: 0x06000CCF RID: 3279 RVA: 0x0004D1B4 File Offset: 0x0004B3B4
		public QueryExpression subqueryExpression(SubDmlFlags subDmlFlags)
		{
			BinaryQueryExpression binaryQueryExpression = null;
			QueryExpression queryExpression = this.subqueryExpressionUnit(subDmlFlags);
			while (this.LA(1) == 59 || this.LA(1) == 87 || this.LA(1) == 158)
			{
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression = base.FragmentFactory.CreateFragment<BinaryQueryExpression>();
					binaryQueryExpression.FirstQueryExpression = queryExpression;
				}
				int num = this.LA(1);
				if (num != 59)
				{
					if (num != 87)
					{
						if (num != 158)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(158);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Union;
						}
					}
					else
					{
						this.match(87);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Intersect;
						}
					}
				}
				else
				{
					this.match(59);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Except;
					}
				}
				int num2 = this.LA(1);
				if (num2 != 5)
				{
					if (num2 != 140 && num2 != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(5);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.All = true;
					}
				}
				queryExpression = this.subqueryExpressionUnit(subDmlFlags);
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression.SecondQueryExpression = queryExpression;
					queryExpression = binaryQueryExpression;
				}
			}
			return queryExpression;
		}

		// Token: 0x06000CD0 RID: 3280 RVA: 0x0004D314 File Offset: 0x0004B514
		public FunctionOption functionAttribute()
		{
			int num = this.LA(1);
			FunctionOption functionOption;
			switch (num)
			{
			case 60:
			case 61:
				functionOption = this.functionExecuteAsOption();
				break;
			default:
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				functionOption = this.functionAttributeNoExecuteAs();
				break;
			}
			return functionOption;
		}

		// Token: 0x06000CD1 RID: 3281 RVA: 0x0004D368 File Offset: 0x0004B568
		public FunctionOption functionAttributeNoExecuteAs()
		{
			FunctionOption functionOption = base.FragmentFactory.CreateFragment<FunctionOption>();
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_79_.member(this.LA(2)))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					functionOption.OptionKind = TSql80ParserBaseInternal.ParseAlterCreateFunctionWithOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 100)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(100);
				this.match(105);
				this.match(100);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "RETURNS");
					TSql80ParserBaseInternal.Match(token3, "INPUT");
					functionOption.OptionKind = FunctionOptionKind.ReturnsNullOnNullInput;
					TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token3);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 105)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token4 = this.LT(1);
				this.match(232);
				this.match(105);
				this.match(100);
				IToken token5 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "CALLED");
					TSql80ParserBaseInternal.Match(token5, "INPUT");
					functionOption.OptionKind = FunctionOptionKind.CalledOnNullInput;
					TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token5);
				}
			}
			return functionOption;
		}

		// Token: 0x06000CD2 RID: 3282 RVA: 0x0004D518 File Offset: 0x0004B718
		public ExecuteAsFunctionOption functionExecuteAsOption()
		{
			ExecuteAsFunctionOption executeAsFunctionOption = base.FragmentFactory.CreateFragment<ExecuteAsFunctionOption>();
			ExecuteAsClause executeAsClause = this.executeAsClause(false, false);
			if (this.inputState.guessing == 0)
			{
				executeAsFunctionOption.OptionKind = FunctionOptionKind.ExecuteAs;
				executeAsFunctionOption.ExecuteAs = executeAsClause;
			}
			return executeAsFunctionOption;
		}

		// Token: 0x06000CD3 RID: 3283 RVA: 0x0004D558 File Offset: 0x0004B758
		public void identifierColumnList(TSqlFragment vParent, IList<ColumnReferenceExpression> columns)
		{
			this.match(191);
			ColumnReferenceExpression columnReferenceExpression = this.identifierColumnReferenceExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, columnReferenceExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnReferenceExpression = this.identifierColumnReferenceExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, columnReferenceExpression);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000CD4 RID: 3284 RVA: 0x0004D5EC File Offset: 0x0004B7EC
		public BooleanExpression filterClause(bool filterProhibited)
		{
			IToken token = this.LT(1);
			this.match(169);
			BooleanExpression booleanExpression = this.filterExpression();
			if (this.inputState.guessing == 0 && filterProhibited)
			{
				TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
			}
			return booleanExpression;
		}

		// Token: 0x06000CD5 RID: 3285 RVA: 0x0004D62C File Offset: 0x0004B82C
		public StatisticsOption createStatisticsStatementWithOption(ref bool isConflictingOption)
		{
			StatisticsOption statisticsOption;
			if (this.LA(1) == 232 && this.LA(2) == 221)
			{
				statisticsOption = this.sampleStatisticsOption(ref isConflictingOption);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				statisticsOption = this.statsStreamStatisticsOption();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				statisticsOption = this.simpleStatisticsOption(ref isConflictingOption);
			}
			return statisticsOption;
		}

		// Token: 0x06000CD6 RID: 3286 RVA: 0x0004D6C4 File Offset: 0x0004B8C4
		public LiteralStatisticsOption sampleStatisticsOption(ref bool isConflictingOption)
		{
			LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
			IToken token = this.LT(1);
			this.match(232);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SAMPLE");
				if (isConflictingOption)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message, new string[0]);
				}
				else
				{
					isConflictingOption = true;
				}
				literalStatisticsOption.Literal = literal;
			}
			int num = this.LA(1);
			if (num != 116)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token2);
					literalStatisticsOption.OptionKind = TSql80ParserBaseInternal.ParseSampleOptionsWithOption(token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(116);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token3);
					literalStatisticsOption.OptionKind = StatisticsOptionKind.SamplePercent;
				}
			}
			return literalStatisticsOption;
		}

		// Token: 0x06000CD7 RID: 3287 RVA: 0x0004D7CC File Offset: 0x0004B9CC
		public LiteralStatisticsOption statsStreamStatisticsOption()
		{
			LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.binary();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "STATS_STREAM");
				literalStatisticsOption.OptionKind = StatisticsOptionKind.StatsStream;
				literalStatisticsOption.Literal = literal;
			}
			return literalStatisticsOption;
		}

		// Token: 0x06000CD8 RID: 3288 RVA: 0x0004D834 File Offset: 0x0004BA34
		public StatisticsOption simpleStatisticsOption(ref bool isConflictingOption)
		{
			StatisticsOption statisticsOption = base.FragmentFactory.CreateFragment<StatisticsOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "FULLSCAN"))
				{
					if (isConflictingOption)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message, new string[0]);
					}
					else
					{
						isConflictingOption = true;
					}
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token);
				statisticsOption.OptionKind = TSql80ParserBaseInternal.ParseCreateStatisticsWithOption(token);
			}
			return statisticsOption;
		}

		// Token: 0x06000CD9 RID: 3289 RVA: 0x0004D8B0 File Offset: 0x0004BAB0
		public void columnNameList(TSqlFragment vParent, IList<Identifier> columnNames)
		{
			this.match(191);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(vParent, columnNames, identifier);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(vParent, columnNames, identifier);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000CDA RID: 3290 RVA: 0x0004D944 File Offset: 0x0004BB44
		public StatisticsOption updateStatisticsStatementWithOption(ref bool isConflictingOption)
		{
			StatisticsOption statisticsOption;
			if (this.LA(1) == 232 && this.LA(2) == 221)
			{
				statisticsOption = this.sampleStatisticsOption(ref isConflictingOption);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("STATS_STREAM"))
			{
				statisticsOption = this.statsStreamStatisticsOption();
			}
			else if ((this.LA(1) == 135 || this.LA(1) == 232) && this.LA(2) == 206)
			{
				statisticsOption = this.updateStatisticsLiteralOption();
			}
			else
			{
				if ((this.LA(1) != 5 && this.LA(1) != 84 && this.LA(1) != 232) || !TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				statisticsOption = this.updateStatisticsSimpleOption(ref isConflictingOption);
			}
			return statisticsOption;
		}

		// Token: 0x06000CDB RID: 3291 RVA: 0x0004DA38 File Offset: 0x0004BC38
		public LiteralStatisticsOption updateStatisticsLiteralOption()
		{
			LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
			int num = this.LA(1);
			if (num != 135)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "PAGECOUNT");
					literalStatisticsOption.OptionKind = StatisticsOptionKind.PageCount;
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token);
					literalStatisticsOption.Literal = literal;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(135);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token2);
					literalStatisticsOption.OptionKind = StatisticsOptionKind.RowCount;
					literalStatisticsOption.Literal = literal;
				}
			}
			return literalStatisticsOption;
		}

		// Token: 0x06000CDC RID: 3292 RVA: 0x0004DB24 File Offset: 0x0004BD24
		public StatisticsOption updateStatisticsSimpleOption(ref bool isConflictingOption)
		{
			StatisticsOption statisticsOption = base.FragmentFactory.CreateFragment<StatisticsOption>();
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 84)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.TryMatch(token, "FULLSCAN"))
						{
							if (isConflictingOption)
							{
								TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message, new string[0]);
							}
							else
							{
								isConflictingOption = true;
							}
						}
						TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token);
						statisticsOption.OptionKind = StatisticsOptionHelper.Instance.ParseOption(token);
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(84);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token2);
						statisticsOption.OptionKind = StatisticsOptionKind.Index;
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token3);
					statisticsOption.OptionKind = StatisticsOptionKind.All;
				}
			}
			return statisticsOption;
		}

		// Token: 0x06000CDD RID: 3293 RVA: 0x0004DC40 File Offset: 0x0004BE40
		public KillStatement killStatement()
		{
			KillStatement killStatement = base.FragmentFactory.CreateFragment<KillStatement>();
			int num = this.LA(1);
			ScalarExpression scalarExpression;
			if (num != 199 && num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
					scalarExpression = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				scalarExpression = this.signedInteger();
			}
			if (this.inputState.guessing == 0)
			{
				killStatement.Parameter = scalarExpression;
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "STATUSONLY");
					killStatement.WithStatusOnly = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(killStatement, token);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return killStatement;
		}

		// Token: 0x06000CDE RID: 3294 RVA: 0x0004DD60 File Offset: 0x0004BF60
		public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement()
		{
			KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement = base.FragmentFactory.CreateFragment<KillQueryNotificationSubscriptionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUERY");
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "NOTIFICATION");
			}
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "SUBSCRIPTION");
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 221)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					killQueryNotificationSubscriptionStatement.SubscriptionId = literal;
				}
			}
			else
			{
				IToken token4 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					killQueryNotificationSubscriptionStatement.All = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(killQueryNotificationSubscriptionStatement, token4);
				}
			}
			return killQueryNotificationSubscriptionStatement;
		}

		// Token: 0x06000CDF RID: 3295 RVA: 0x0004DE80 File Offset: 0x0004C080
		public KillStatsJobStatement killStatsJobStatement()
		{
			KillStatsJobStatement killStatsJobStatement = base.FragmentFactory.CreateFragment<KillStatsJobStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "STATS");
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "JOB");
			}
			ScalarExpression scalarExpression = this.signedInteger();
			if (this.inputState.guessing == 0)
			{
				killStatsJobStatement.JobId = scalarExpression;
			}
			return killStatsJobStatement;
		}

		// Token: 0x06000CE0 RID: 3296 RVA: 0x0004DF10 File Offset: 0x0004C110
		public Permission permission()
		{
			Permission permission = base.FragmentFactory.CreateFragment<Permission>();
			int num = 0;
			while (TSql110ParserInternal.tokenSet_38_.member(this.LA(1)))
			{
				Identifier identifier = this.securityStatementPermission();
				if (this.inputState.guessing == 0)
				{
					if (permission.Identifiers.Count >= 5)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(identifier);
					}
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(permission, permission.Identifiers, identifier);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num2 = this.LA(1);
			if (num2 <= 105)
			{
				if (num2 == 71 || num2 == 105)
				{
					return permission;
				}
			}
			else
			{
				if (num2 == 151)
				{
					return permission;
				}
				if (num2 == 191)
				{
					this.columnNameList(permission, permission.Columns);
					return permission;
				}
				if (num2 == 198)
				{
					return permission;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000CE1 RID: 3297 RVA: 0x0004DFEC File Offset: 0x0004C1EC
		public Identifier securityStatementPermission()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			TSql80ParserBaseInternal.UpdateTokenInfo(identifier, this.LT(1));
			identifier.SetUnquotedIdentifier(this.LT(1).getText());
			switch (this.LA(1))
			{
			case 4:
				this.match(4);
				return identifier;
			case 5:
				this.match(5);
				return identifier;
			case 6:
				this.match(6);
				return identifier;
			case 7:
				this.match(7);
				return identifier;
			case 8:
				this.match(8);
				return identifier;
			case 9:
				this.match(9);
				return identifier;
			case 10:
				this.match(10);
				return identifier;
			case 11:
				this.match(11);
				return identifier;
			case 12:
				this.match(12);
				return identifier;
			case 13:
				this.match(13);
				return identifier;
			case 14:
				this.match(14);
				return identifier;
			case 15:
				this.match(15);
				return identifier;
			case 16:
				this.match(16);
				return identifier;
			case 17:
				this.match(17);
				return identifier;
			case 18:
				this.match(18);
				return identifier;
			case 19:
				this.match(19);
				return identifier;
			case 20:
				this.match(20);
				return identifier;
			case 21:
				this.match(21);
				return identifier;
			case 22:
				this.match(22);
				return identifier;
			case 23:
				this.match(23);
				return identifier;
			case 24:
				this.match(24);
				return identifier;
			case 25:
				this.match(25);
				return identifier;
			case 26:
				this.match(26);
				return identifier;
			case 27:
				this.match(27);
				return identifier;
			case 28:
				this.match(28);
				return identifier;
			case 29:
				this.match(29);
				return identifier;
			case 30:
				this.match(30);
				return identifier;
			case 31:
				this.match(31);
				return identifier;
			case 32:
				this.match(32);
				return identifier;
			case 33:
				this.match(33);
				return identifier;
			case 34:
				this.match(34);
				return identifier;
			case 35:
				this.match(35);
				return identifier;
			case 36:
				this.match(36);
				return identifier;
			case 37:
				this.match(37);
				return identifier;
			case 38:
				this.match(38);
				return identifier;
			case 39:
				this.match(39);
				return identifier;
			case 40:
				this.match(40);
				return identifier;
			case 41:
				this.match(41);
				return identifier;
			case 42:
				this.match(42);
				return identifier;
			case 43:
				this.match(43);
				return identifier;
			case 44:
				this.match(44);
				return identifier;
			case 45:
				this.match(45);
				return identifier;
			case 46:
				this.match(46);
				return identifier;
			case 47:
				this.match(47);
				return identifier;
			case 48:
				this.match(48);
				return identifier;
			case 49:
				this.match(49);
				return identifier;
			case 50:
				this.match(50);
				return identifier;
			case 51:
				this.match(51);
				return identifier;
			case 52:
				this.match(52);
				return identifier;
			case 53:
				this.match(53);
				return identifier;
			case 54:
				this.match(54);
				return identifier;
			case 55:
				this.match(55);
				return identifier;
			case 56:
				this.match(56);
				return identifier;
			case 57:
				this.match(57);
				return identifier;
			case 58:
				this.match(58);
				return identifier;
			case 59:
				this.match(59);
				return identifier;
			case 60:
				this.match(60);
				return identifier;
			case 61:
				this.match(61);
				return identifier;
			case 62:
				this.match(62);
				return identifier;
			case 63:
				this.match(63);
				return identifier;
			case 64:
				this.match(64);
				return identifier;
			case 65:
				this.match(65);
				return identifier;
			case 66:
				this.match(66);
				return identifier;
			case 67:
				this.match(67);
				return identifier;
			case 68:
				this.match(68);
				return identifier;
			case 69:
				this.match(69);
				return identifier;
			case 70:
				this.match(70);
				return identifier;
			case 72:
				this.match(72);
				return identifier;
			case 73:
				this.match(73);
				return identifier;
			case 74:
				this.match(74);
				return identifier;
			case 76:
				this.match(76);
				return identifier;
			case 77:
				this.match(77);
				return identifier;
			case 78:
				this.match(78);
				return identifier;
			case 79:
				this.match(79);
				return identifier;
			case 80:
				this.match(80);
				return identifier;
			case 81:
				this.match(81);
				return identifier;
			case 82:
				this.match(82);
				return identifier;
			case 83:
				this.match(83);
				return identifier;
			case 84:
				this.match(84);
				return identifier;
			case 85:
				this.match(85);
				return identifier;
			case 86:
				this.match(86);
				return identifier;
			case 87:
				this.match(87);
				return identifier;
			case 88:
				this.match(88);
				return identifier;
			case 89:
				this.match(89);
				return identifier;
			case 90:
				this.match(90);
				return identifier;
			case 91:
				this.match(91);
				return identifier;
			case 92:
				this.match(92);
				return identifier;
			case 93:
				this.match(93);
				return identifier;
			case 94:
				this.match(94);
				return identifier;
			case 95:
				this.match(95);
				return identifier;
			case 96:
				this.match(96);
				return identifier;
			case 97:
				this.match(97);
				return identifier;
			case 98:
				this.match(98);
				return identifier;
			case 99:
				this.match(99);
				return identifier;
			case 100:
				this.match(100);
				return identifier;
			case 101:
				this.match(101);
				return identifier;
			case 102:
				this.match(102);
				return identifier;
			case 103:
				this.match(103);
				return identifier;
			case 104:
				this.match(104);
				return identifier;
			case 106:
				this.match(106);
				return identifier;
			case 107:
				this.match(107);
				return identifier;
			case 108:
				this.match(108);
				return identifier;
			case 109:
				this.match(109);
				return identifier;
			case 110:
				this.match(110);
				return identifier;
			case 111:
				this.match(111);
				return identifier;
			case 112:
				this.match(112);
				return identifier;
			case 113:
				this.match(113);
				return identifier;
			case 114:
				this.match(114);
				return identifier;
			case 115:
				this.match(115);
				return identifier;
			case 116:
				this.match(116);
				return identifier;
			case 117:
				this.match(117);
				return identifier;
			case 118:
				this.match(118);
				return identifier;
			case 119:
				this.match(119);
				return identifier;
			case 120:
				this.match(120);
				return identifier;
			case 121:
				this.match(121);
				return identifier;
			case 122:
				this.match(122);
				return identifier;
			case 123:
				this.match(123);
				return identifier;
			case 124:
				this.match(124);
				return identifier;
			case 125:
				this.match(125);
				return identifier;
			case 126:
				this.match(126);
				return identifier;
			case 127:
				this.match(127);
				return identifier;
			case 128:
				this.match(128);
				return identifier;
			case 129:
				this.match(129);
				return identifier;
			case 130:
				this.match(130);
				return identifier;
			case 131:
				this.match(131);
				return identifier;
			case 132:
				this.match(132);
				return identifier;
			case 133:
				this.match(133);
				return identifier;
			case 134:
				this.match(134);
				return identifier;
			case 135:
				this.match(135);
				return identifier;
			case 136:
				this.match(136);
				return identifier;
			case 137:
				this.match(137);
				return identifier;
			case 138:
				this.match(138);
				return identifier;
			case 139:
				this.match(139);
				return identifier;
			case 140:
				this.match(140);
				return identifier;
			case 141:
				this.match(141);
				return identifier;
			case 142:
				this.match(142);
				return identifier;
			case 143:
				this.match(143);
				return identifier;
			case 144:
				this.match(144);
				return identifier;
			case 145:
				this.match(145);
				return identifier;
			case 146:
				this.match(146);
				return identifier;
			case 147:
				this.match(147);
				return identifier;
			case 148:
				this.match(148);
				return identifier;
			case 149:
				this.match(149);
				return identifier;
			case 150:
				this.match(150);
				return identifier;
			case 152:
				this.match(152);
				return identifier;
			case 153:
				this.match(153);
				return identifier;
			case 154:
				this.match(154);
				return identifier;
			case 155:
				this.match(155);
				return identifier;
			case 156:
				this.match(156);
				return identifier;
			case 157:
				this.match(157);
				return identifier;
			case 158:
				this.match(158);
				return identifier;
			case 159:
				this.match(159);
				return identifier;
			case 160:
				this.match(160);
				return identifier;
			case 161:
				this.match(161);
				return identifier;
			case 162:
				this.match(162);
				return identifier;
			case 163:
				this.match(163);
				return identifier;
			case 164:
				this.match(164);
				return identifier;
			case 165:
				this.match(165);
				return identifier;
			case 166:
				this.match(166);
				return identifier;
			case 167:
				this.match(167);
				return identifier;
			case 168:
				this.match(168);
				return identifier;
			case 170:
				this.match(170);
				return identifier;
			case 171:
				this.match(171);
				return identifier;
			case 172:
				this.match(172);
				return identifier;
			case 173:
				this.match(173);
				return identifier;
			case 174:
				this.match(174);
				return identifier;
			case 175:
				this.match(175);
				return identifier;
			case 176:
				this.match(176);
				return identifier;
			case 177:
				this.match(177);
				return identifier;
			case 178:
				this.match(178);
				return identifier;
			case 179:
				this.match(179);
				return identifier;
			case 182:
				this.match(182);
				return identifier;
			case 183:
				this.match(183);
				return identifier;
			case 232:
				this.LT(1);
				this.match(232);
				return identifier;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000CE2 RID: 3298 RVA: 0x0004ED40 File Offset: 0x0004CF40
		public void securityTargetObjectCommon(SecurityTargetObject vParent)
		{
			SecurityTargetObjectName securityTargetObjectName = base.FragmentFactory.CreateFragment<SecurityTargetObjectName>();
			IToken token = this.LT(1);
			this.match(105);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			bool flag = false;
			if (TSql110ParserInternal.tokenSet_38_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_80_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					int num2 = 0;
					while (TSql110ParserInternal.tokenSet_38_.member(this.LA(1)))
					{
						this.securityStatementPermission();
						num2++;
					}
					if (num2 < 1)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(203);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				if (TSql110ParserInternal.tokenSet_38_.member(this.LA(1)) && this.LA(2) == 203)
				{
					Identifier identifier = this.securityStatementPermission();
					if (this.inputState.guessing == 0)
					{
						vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier);
					}
				}
				else
				{
					if (!TSql110ParserInternal.tokenSet_38_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_38_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					Identifier identifier = this.securityStatementPermission();
					if (TSql110ParserInternal.tokenSet_38_.member(this.LA(1)) && this.LA(2) == 203)
					{
						Identifier identifier2 = this.securityStatementPermission();
						if (this.inputState.guessing == 0)
						{
							vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier, identifier2);
						}
					}
					else
					{
						if (!TSql110ParserInternal.tokenSet_38_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_38_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						Identifier identifier2 = this.securityStatementPermission();
						Identifier identifier3 = this.securityStatementPermission();
						if (this.inputState.guessing == 0)
						{
							vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier, identifier2, identifier3);
						}
					}
				}
				this.match(203);
			}
			else if ((this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) || !TSql110ParserInternal.tokenSet_81_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
			if (this.inputState.guessing == 0)
			{
				securityTargetObjectName.MultiPartIdentifier = multiPartIdentifier;
				vParent.ObjectName = securityTargetObjectName;
			}
		}

		// Token: 0x06000CE3 RID: 3299 RVA: 0x0004F010 File Offset: 0x0004D210
		public SecurityTargetObject authorizationTargetObject()
		{
			SecurityTargetObject securityTargetObject = base.FragmentFactory.CreateFragment<SecurityTargetObject>();
			this.securityTargetObjectCommon(securityTargetObject);
			return securityTargetObject;
		}

		// Token: 0x06000CE4 RID: 3300 RVA: 0x0004F034 File Offset: 0x0004D234
		public void permissionsList(SecurityStatement vParent, ref bool vContainsColumnList)
		{
			Permission permission = this.permission();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Permission>(vParent, vParent.Permissions, permission);
				vContainsColumnList = vContainsColumnList || (permission.Columns != null && permission.Columns.Count > 0);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				permission = this.permission();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Permission>(vParent, vParent.Permissions, permission);
					vContainsColumnList = vContainsColumnList || (permission.Columns != null && permission.Columns.Count > 0);
				}
			}
		}

		// Token: 0x06000CE5 RID: 3301 RVA: 0x0004F0E4 File Offset: 0x0004D2E4
		public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vColumnsDisallowed)
		{
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 105)
				{
					if (num != 151)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					SecurityTargetObject securityTargetObject = this.securityTargetObject(vColumnsDisallowed);
					if (this.inputState.guessing == 0)
					{
						vParent.SecurityTargetObject = securityTargetObject;
						return;
					}
				}
			}
		}

		// Token: 0x06000CE6 RID: 3302 RVA: 0x0004F140 File Offset: 0x0004D340
		public void securityStatementPrincipalList(SecurityStatement vParent)
		{
			SecurityPrincipal securityPrincipal = this.principal();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SecurityPrincipal>(vParent, vParent.Principals, securityPrincipal);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				securityPrincipal = this.principal();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SecurityPrincipal>(vParent, vParent.Principals, securityPrincipal);
				}
			}
		}

		// Token: 0x06000CE7 RID: 3303 RVA: 0x0004F1AC File Offset: 0x0004D3AC
		public void securityStatementAsClauseOpt(SecurityStatement vParent)
		{
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return;
						}
						switch (num)
						{
						case 4:
						case 6:
							return;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						{
							this.match(9);
							Identifier identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								vParent.AsClause = identifier;
								return;
							}
							return;
						}
						case 10:
						case 11:
						case 14:
						case 16:
							break;
						case 12:
						case 13:
						case 15:
						case 17:
							return;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return;
							default:
								if (num == 28)
								{
									return;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return;
				}
			}
			else
			{
				if (num == 204)
				{
					return;
				}
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000CE8 RID: 3304 RVA: 0x0004F448 File Offset: 0x0004D648
		public WaitForSupportedStatement waitforInnerStatement()
		{
			WaitForSupportedStatement waitForSupportedStatement;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_30_.member(this.LA(2)) && base.NextTokenMatches("RECEIVE"))
			{
				waitForSupportedStatement = this.receiveStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				waitForSupportedStatement = this.getConversationGroupStatement();
			}
			return waitForSupportedStatement;
		}

		// Token: 0x06000CE9 RID: 3305 RVA: 0x0004F4C8 File Offset: 0x0004D6C8
		public ColumnReferenceExpression column()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			columnReferenceExpression.ColumnType = ColumnType.Regular;
			int num = this.LA(1);
			if (num > 136)
			{
				if (num != 200)
				{
					if (num == 227)
					{
						goto IL_0353;
					}
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_035C;
					}
				}
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.inputState.guessing == 0)
				{
					columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								goto IL_036F;
							}
							switch (num2)
							{
							case 4:
							case 6:
								goto IL_036F;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_036F;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_036F;
							default:
								if (num2 == 28)
								{
									goto IL_036F;
								}
								switch (num2)
								{
								case 33:
								case 35:
									goto IL_036F;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_036F;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_036F;
							default:
								if (num2 == 82)
								{
									goto IL_036F;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						goto IL_036F;
					}
				}
				else if (num2 <= 172)
				{
					if (num2 <= 119)
					{
						if (num2 == 106 || num2 == 111 || num2 == 119)
						{
							goto IL_036F;
						}
					}
					else
					{
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_036F;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num2)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_036F;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num2)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_036F;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 192)
				{
					if (num2 == 176 || num2 == 182)
					{
						goto IL_036F;
					}
					switch (num2)
					{
					case 191:
					case 192:
						goto IL_036F;
					}
				}
				else if (num2 <= 204)
				{
					switch (num2)
					{
					case 198:
						goto IL_036F;
					case 199:
						break;
					case 200:
						this.match(200);
						this.specialColumn(columnReferenceExpression);
						goto IL_036F;
					default:
						if (num2 == 204)
						{
							goto IL_036F;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 219:
					case 220:
					case 221:
					case 224:
						goto IL_036F;
					case 222:
					case 223:
						break;
					default:
						switch (num2)
						{
						case 232:
						case 234:
							goto IL_036F;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 81 && num != 136)
			{
				goto IL_035C;
			}
			IL_0353:
			this.specialColumn(columnReferenceExpression);
			goto IL_036F;
			IL_035C:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_036F:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06000CEA RID: 3306 RVA: 0x0004F860 File Offset: 0x0004DA60
		public ValueExpression binaryOrVariable()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 224)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.variable();
			}
			else
			{
				valueExpression = this.binary();
			}
			return valueExpression;
		}

		// Token: 0x06000CEB RID: 3307 RVA: 0x0004F8B0 File Offset: 0x0004DAB0
		public ValueExpression integerOrVariable()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 221)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.variable();
			}
			else
			{
				valueExpression = this.integer();
			}
			return valueExpression;
		}

		// Token: 0x06000CEC RID: 3308 RVA: 0x0004F900 File Offset: 0x0004DB00
		public void modificationTextStatement(TextModificationStatement vParent)
		{
			int num = this.LA(1);
			if (num <= 136)
			{
				if (num != 17)
				{
					if (num == 81 || num == 136)
					{
						goto IL_0085;
					}
				}
				else
				{
					this.match(17);
					if (this.inputState.guessing == 0)
					{
						vParent.Bulk = true;
						goto IL_0085;
					}
					goto IL_0085;
				}
			}
			else
			{
				if (num == 200 || num == 227)
				{
					goto IL_0085;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_0085;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0085:
			ColumnReferenceExpression columnReferenceExpression = this.column();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, true);
				vParent.Column = columnReferenceExpression;
			}
			int num2 = this.LA(1);
			ValueExpression valueExpression;
			if (num2 != 221)
			{
				if (num2 != 224 && num2 != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.binaryOrVariable();
			}
			else
			{
				valueExpression = this.integer();
			}
			if (this.inputState.guessing == 0)
			{
				vParent.TextId = valueExpression;
			}
			int num3 = this.LA(1);
			if (num3 <= 199)
			{
				if (num3 == 100 || num3 == 171 || num3 == 199)
				{
					return;
				}
			}
			else
			{
				if (num3 == 221 || num3 == 224)
				{
					return;
				}
				switch (num3)
				{
				case 230:
				case 231:
				case 234:
					return;
				case 232:
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "TIMESTAMP");
					}
					this.match(206);
					Literal literal = this.binary();
					if (this.inputState.guessing == 0)
					{
						vParent.Timestamp = literal;
						return;
					}
					return;
				}
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000CED RID: 3309 RVA: 0x0004FAEC File Offset: 0x0004DCEC
		public ScalarExpression signedIntegerOrVariableOrNull()
		{
			int num = this.LA(1);
			if (num <= 199)
			{
				if (num == 100)
				{
					return this.nullLiteral();
				}
				if (num != 199)
				{
					goto IL_0041;
				}
			}
			else if (num != 221 && num != 234)
			{
				goto IL_0041;
			}
			return this.signedIntegerOrVariable();
			IL_0041:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000CEE RID: 3310 RVA: 0x0004FB50 File Offset: 0x0004DD50
		public void modificationTextStatementWithLog(TextModificationStatement vParent)
		{
			this.match(171);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOG");
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.WithLog = true;
			}
		}

		// Token: 0x06000CEF RID: 3311 RVA: 0x0004FBA4 File Offset: 0x0004DDA4
		public ValueExpression writeString()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 100)
			{
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
						return this.stringLiteral();
					case 234:
						return this.variable();
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.binary();
			}
			else
			{
				valueExpression = this.nullLiteral();
			}
			return valueExpression;
		}

		// Token: 0x06000CF0 RID: 3312 RVA: 0x0004FC20 File Offset: 0x0004DE20
		public VariableReference variable()
		{
			VariableReference variableReference = base.FragmentFactory.CreateFragment<VariableReference>();
			IToken token = this.LT(1);
			this.match(234);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(variableReference, token);
				variableReference.Name = token.getText();
			}
			return variableReference;
		}

		// Token: 0x06000CF1 RID: 3313 RVA: 0x0004FC70 File Offset: 0x0004DE70
		public OpenMasterKeyStatement openMasterKeyStatement()
		{
			OpenMasterKeyStatement openMasterKeyStatement = base.FragmentFactory.CreateFragment<OpenMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			this.match(91);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
			}
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
			}
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				openMasterKeyStatement.Password = literal;
			}
			return openMasterKeyStatement;
		}

		// Token: 0x06000CF2 RID: 3314 RVA: 0x0004FD4C File Offset: 0x0004DF4C
		public OpenSymmetricKeyStatement openSymmetricKeyStatement()
		{
			OpenSymmetricKeyStatement openSymmetricKeyStatement = base.FragmentFactory.CreateFragment<OpenSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
			}
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				openSymmetricKeyStatement.Name = identifier;
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
			}
			this.match(18);
			CryptoMechanism cryptoMechanism = this.decryptionMechanism();
			if (this.inputState.guessing == 0)
			{
				openSymmetricKeyStatement.DecryptionMechanism = cryptoMechanism;
			}
			return openSymmetricKeyStatement;
		}

		// Token: 0x06000CF3 RID: 3315 RVA: 0x0004FE08 File Offset: 0x0004E008
		public OpenCursorStatement openCursorStatement()
		{
			OpenCursorStatement openCursorStatement = base.FragmentFactory.CreateFragment<OpenCursorStatement>();
			CursorId cursorId = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				openCursorStatement.Cursor = cursorId;
			}
			return openCursorStatement;
		}

		// Token: 0x06000CF4 RID: 3316 RVA: 0x0004FE40 File Offset: 0x0004E040
		public CryptoMechanism decryptionMechanism()
		{
			CryptoMechanism cryptoMechanism;
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				cryptoMechanism = this.passwordCrypto();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				cryptoMechanism = this.certificateCrypto();
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					this.match(171);
					this.decryptionMechanismPassword(cryptoMechanism);
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 91)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				cryptoMechanism = this.keyCrypto();
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					IToken token = this.LT(1);
					this.match(171);
					this.decryptionMechanismPassword(cryptoMechanism);
					if (this.inputState.guessing == 0 && cryptoMechanism.CryptoMechanismType == CryptoMechanismType.SymmetricKey)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
				}
				else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return cryptoMechanism;
		}

		// Token: 0x06000CF5 RID: 3317 RVA: 0x0004FFE0 File Offset: 0x0004E1E0
		public void decryptionMechanismPassword(CryptoMechanism vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PASSWORD");
				vParent.PasswordOrSignature = literal;
			}
		}

		// Token: 0x06000CF6 RID: 3318 RVA: 0x00050034 File Offset: 0x0004E234
		public CursorId cursorId()
		{
			CursorId cursorId = base.FragmentFactory.CreateFragment<CursorId>();
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("GLOBAL"))
			{
				IToken token = this.LT(1);
				this.match(232);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "GLOBAL");
					cursorId.Name = base.IdentifierOrValueExpression(identifier);
					cursorId.IsGlobal = true;
				}
			}
			else
			{
				if (this.LA(1) < 232 || this.LA(1) > 234 || !TSql110ParserInternal.tokenSet_82_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					cursorId.Name = identifierOrValueExpression;
					cursorId.IsGlobal = false;
				}
			}
			return cursorId;
		}

		// Token: 0x06000CF7 RID: 3319 RVA: 0x00050138 File Offset: 0x0004E338
		public CloseMasterKeyStatement closeMasterKeyStatement()
		{
			CloseMasterKeyStatement closeMasterKeyStatement = base.FragmentFactory.CreateFragment<CloseMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			IToken token2 = this.LT(1);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(closeMasterKeyStatement, token2);
			}
			return closeMasterKeyStatement;
		}

		// Token: 0x06000CF8 RID: 3320 RVA: 0x000501A8 File Offset: 0x0004E3A8
		public CloseSymmetricKeyStatement closeSymmetricKeyStatement()
		{
			CloseSymmetricKeyStatement closeSymmetricKeyStatement = base.FragmentFactory.CreateFragment<CloseSymmetricKeyStatement>();
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				}
				this.match(91);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					closeSymmetricKeyStatement.Name = identifier;
				}
			}
			else
			{
				this.match(5);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SYMMETRIC");
					closeSymmetricKeyStatement.All = true;
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "KEYS");
					TSql80ParserBaseInternal.UpdateTokenInfo(closeSymmetricKeyStatement, token3);
				}
			}
			return closeSymmetricKeyStatement;
		}

		// Token: 0x06000CF9 RID: 3321 RVA: 0x000502BC File Offset: 0x0004E4BC
		public CloseCursorStatement closeCursorStatement()
		{
			CloseCursorStatement closeCursorStatement = base.FragmentFactory.CreateFragment<CloseCursorStatement>();
			CursorId cursorId = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				closeCursorStatement.Cursor = cursorId;
			}
			return closeCursorStatement;
		}

		// Token: 0x06000CFA RID: 3322 RVA: 0x000502F4 File Offset: 0x0004E4F4
		public FetchCursorStatement rowSelector()
		{
			FetchCursorStatement fetchCursorStatement = base.FragmentFactory.CreateFragment<FetchCursorStatement>();
			if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql110ParserInternal.tokenSet_83_.member(this.LA(2)))
			{
				CursorId cursorId = this.cursorId();
				if (this.inputState.guessing == 0)
				{
					fetchCursorStatement.Cursor = cursorId;
				}
			}
			else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_84_.member(this.LA(2)))
			{
				FetchType fetchType = this.fetchType();
				this.match(71);
				CursorId cursorId = this.cursorId();
				if (this.inputState.guessing == 0)
				{
					fetchCursorStatement.Cursor = cursorId;
					fetchCursorStatement.FetchType = fetchType;
				}
			}
			else
			{
				if (this.LA(1) != 71)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(71);
				CursorId cursorId = this.cursorId();
				if (this.inputState.guessing == 0)
				{
					fetchCursorStatement.Cursor = cursorId;
				}
			}
			return fetchCursorStatement;
		}

		// Token: 0x06000CFB RID: 3323 RVA: 0x000503F8 File Offset: 0x0004E5F8
		public FetchType fetchType()
		{
			FetchType fetchType = base.FragmentFactory.CreateFragment<FetchType>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				fetchType.Orientation = FetchOrientationHelper.Instance.ParseOption(token);
			}
			int num = this.LA(1);
			ScalarExpression scalarExpression;
			if (num <= 199)
			{
				if (num != 71)
				{
					if (num != 199)
					{
						goto IL_010E;
					}
				}
				else
				{
					if (this.inputState.guessing == 0 && (fetchType.Orientation == FetchOrientation.Relative || fetchType.Orientation == FetchOrientation.Absolute))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					return fetchType;
				}
			}
			else if (num != 221)
			{
				if (num != 234)
				{
					goto IL_010E;
				}
				scalarExpression = this.variable();
				if (this.inputState.guessing != 0)
				{
					return fetchType;
				}
				if (fetchType.Orientation != FetchOrientation.Relative && fetchType.Orientation != FetchOrientation.Absolute)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				fetchType.RowOffset = scalarExpression;
				return fetchType;
			}
			scalarExpression = this.signedInteger();
			if (this.inputState.guessing != 0)
			{
				return fetchType;
			}
			if (fetchType.Orientation != FetchOrientation.Relative && fetchType.Orientation != FetchOrientation.Absolute)
			{
				throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
			}
			fetchType.RowOffset = scalarExpression;
			return fetchType;
			IL_010E:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000CFC RID: 3324 RVA: 0x00050528 File Offset: 0x0004E728
		public TSqlStatement dropDatabaseStatements()
		{
			this.match(43);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("AUDIT"))
			{
				tsqlStatement = this.dropDatabaseAuditSpecificationStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				tsqlStatement = this.dropDatabaseEncryptionKeyStatement();
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || !TSql110ParserInternal.tokenSet_49_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.dropDatabaseStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000CFD RID: 3325 RVA: 0x000505E0 File Offset: 0x0004E7E0
		public DropIndexStatement dropIndexStatement()
		{
			DropIndexStatement dropIndexStatement = base.FragmentFactory.CreateFragment<DropIndexStatement>();
			this.match(84);
			DropIndexClauseBase dropIndexClauseBase = this.dropIndexClause();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropIndexClauseBase>(dropIndexStatement, dropIndexStatement.DropIndexClauses, dropIndexClauseBase);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				dropIndexClauseBase = this.dropIndexClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropIndexClauseBase>(dropIndexStatement, dropIndexStatement.DropIndexClauses, dropIndexClauseBase);
				}
			}
			return dropIndexStatement;
		}

		// Token: 0x06000CFE RID: 3326 RVA: 0x00050660 File Offset: 0x0004E860
		public DropStatisticsStatement dropStatisticsStatement()
		{
			DropStatisticsStatement dropStatisticsStatement = base.FragmentFactory.CreateFragment<DropStatisticsStatement>();
			this.match(146);
			ChildObjectName childObjectName = this.statisticsDropObject();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ChildObjectName>(dropStatisticsStatement, dropStatisticsStatement.Objects, childObjectName);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				childObjectName = this.statisticsDropObject();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ChildObjectName>(dropStatisticsStatement, dropStatisticsStatement.Objects, childObjectName);
				}
			}
			return dropStatisticsStatement;
		}

		// Token: 0x06000CFF RID: 3327 RVA: 0x000506E4 File Offset: 0x0004E8E4
		public DropTableStatement dropTableStatement()
		{
			DropTableStatement dropTableStatement = base.FragmentFactory.CreateFragment<DropTableStatement>();
			this.match(148);
			this.dropObjectList(dropTableStatement, false);
			return dropTableStatement;
		}

		// Token: 0x06000D00 RID: 3328 RVA: 0x00050714 File Offset: 0x0004E914
		public DropProcedureStatement dropProcedureStatement()
		{
			DropProcedureStatement dropProcedureStatement = base.FragmentFactory.CreateFragment<DropProcedureStatement>();
			switch (this.LA(1))
			{
			case 120:
				this.match(120);
				break;
			case 121:
				this.match(121);
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.dropObjectList(dropProcedureStatement, true);
			return dropProcedureStatement;
		}

		// Token: 0x06000D01 RID: 3329 RVA: 0x00050778 File Offset: 0x0004E978
		public DropFunctionStatement dropFunctionStatement()
		{
			DropFunctionStatement dropFunctionStatement = base.FragmentFactory.CreateFragment<DropFunctionStatement>();
			this.match(73);
			this.dropObjectList(dropFunctionStatement, true);
			return dropFunctionStatement;
		}

		// Token: 0x06000D02 RID: 3330 RVA: 0x000507A4 File Offset: 0x0004E9A4
		public DropViewStatement dropViewStatement()
		{
			DropViewStatement dropViewStatement = base.FragmentFactory.CreateFragment<DropViewStatement>();
			this.match(166);
			this.dropObjectList(dropViewStatement, true);
			return dropViewStatement;
		}

		// Token: 0x06000D03 RID: 3331 RVA: 0x000507D4 File Offset: 0x0004E9D4
		public DropDefaultStatement dropDefaultStatement()
		{
			DropDefaultStatement dropDefaultStatement = base.FragmentFactory.CreateFragment<DropDefaultStatement>();
			this.match(47);
			this.dropObjectList(dropDefaultStatement, true);
			return dropDefaultStatement;
		}

		// Token: 0x06000D04 RID: 3332 RVA: 0x00050800 File Offset: 0x0004EA00
		public DropRuleStatement dropRuleStatement()
		{
			DropRuleStatement dropRuleStatement = base.FragmentFactory.CreateFragment<DropRuleStatement>();
			this.match(137);
			this.dropObjectList(dropRuleStatement, true);
			return dropRuleStatement;
		}

		// Token: 0x06000D05 RID: 3333 RVA: 0x00050830 File Offset: 0x0004EA30
		public DropTriggerStatement dropTriggerStatement()
		{
			DropTriggerStatement dropTriggerStatement = base.FragmentFactory.CreateFragment<DropTriggerStatement>();
			this.match(155);
			this.dropObjectList(dropTriggerStatement, true);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return dropTriggerStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return dropTriggerStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return dropTriggerStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return dropTriggerStatement;
							default:
								if (num == 28)
								{
									return dropTriggerStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return dropTriggerStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return dropTriggerStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return dropTriggerStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return dropTriggerStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return dropTriggerStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						TriggerScope triggerScope = this.triggerScope(dropTriggerStatement);
						if (this.inputState.guessing == 0)
						{
							dropTriggerStatement.TriggerScope = triggerScope;
							return dropTriggerStatement;
						}
						return dropTriggerStatement;
					}
					case 106:
						return dropTriggerStatement;
					default:
						if (num == 119)
						{
							return dropTriggerStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return dropTriggerStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return dropTriggerStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return dropTriggerStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return dropTriggerStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return dropTriggerStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return dropTriggerStatement;
				default:
					if (num == 232)
					{
						return dropTriggerStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D06 RID: 3334 RVA: 0x00050AE8 File Offset: 0x0004ECE8
		public DropSchemaStatement dropSchemaStatement()
		{
			DropSchemaStatement dropSchemaStatement = base.FragmentFactory.CreateFragment<DropSchemaStatement>();
			this.match(139);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				dropSchemaStatement.Schema = schemaObjectName;
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_032D;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_032D;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_032D;
						case 14:
						case 16:
						case 18:
						case 20:
						case 21:
							break;
						case 19:
						{
							IToken token = this.LT(1);
							this.match(19);
							if (this.inputState.guessing == 0)
							{
								dropSchemaStatement.DropBehavior = DropSchemaBehavior.Cascade;
								TSql80ParserBaseInternal.UpdateTokenInfo(dropSchemaStatement, token);
								goto IL_032D;
							}
							goto IL_032D;
						}
						default:
							if (num == 28)
							{
								goto IL_032D;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_032D;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_032D;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_032D;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_032D;
				}
			}
			else if (num <= 172)
			{
				if (num <= 106)
				{
					if (num == 95 || num == 106)
					{
						goto IL_032D;
					}
				}
				else
				{
					switch (num)
					{
					case 119:
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_032D;
					case 120:
					case 121:
					case 122:
					case 124:
					case 127:
					case 128:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					case 130:
					{
						IToken token2 = this.LT(1);
						this.match(130);
						if (this.inputState.guessing == 0)
						{
							dropSchemaStatement.DropBehavior = DropSchemaBehavior.Restrict;
							TSql80ParserBaseInternal.UpdateTokenInfo(dropSchemaStatement, token2);
							goto IL_032D;
						}
						goto IL_032D;
					}
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_032D;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_032D;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_032D;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_032D;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_032D;
				default:
					if (num == 232)
					{
						goto IL_032D;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_032D:
			if (this.inputState.guessing == 0 && dropSchemaStatement.Schema.SchemaIdentifier != null && dropSchemaStatement.DropBehavior == DropSchemaBehavior.None)
			{
				throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(dropSchemaStatement.Schema.SchemaIdentifier);
			}
			return dropSchemaStatement;
		}

		// Token: 0x06000D07 RID: 3335 RVA: 0x00050E58 File Offset: 0x0004F058
		public DropAggregateStatement dropAggregateStatement()
		{
			DropAggregateStatement dropAggregateStatement = base.FragmentFactory.CreateFragment<DropAggregateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.dropObjectList(dropAggregateStatement, true);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AGGREGATE");
			}
			return dropAggregateStatement;
		}

		// Token: 0x06000D08 RID: 3336 RVA: 0x00050EA8 File Offset: 0x0004F0A8
		public DropAssemblyStatement dropAssemblyStatement()
		{
			DropAssemblyStatement dropAssemblyStatement = base.FragmentFactory.CreateFragment<DropAssemblyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.dropObjectList(dropAssemblyStatement, true);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NO");
					TSql80ParserBaseInternal.Match(token3, "DEPENDENTS");
					dropAssemblyStatement.WithNoDependents = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(dropAssemblyStatement, token3);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return dropAssemblyStatement;
		}

		// Token: 0x06000D09 RID: 3337 RVA: 0x00050FB4 File Offset: 0x0004F1B4
		public DropAvailabilityGroupStatement dropAvailabilityGroupStatement()
		{
			DropAvailabilityGroupStatement dropAvailabilityGroupStatement = base.FragmentFactory.CreateFragment<DropAvailabilityGroupStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(76);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AVAILABILITY");
				dropAvailabilityGroupStatement.Name = identifier;
			}
			return dropAvailabilityGroupStatement;
		}

		// Token: 0x06000D0A RID: 3338 RVA: 0x00051014 File Offset: 0x0004F214
		public TSqlStatement dropPartitionStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 73)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.dropPartitionSchemeStatement();
			}
			else
			{
				tsqlStatement = this.dropPartitionFunctionStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000D0B RID: 3339 RVA: 0x0005108C File Offset: 0x0004F28C
		public DropSynonymStatement dropSynonymStatement()
		{
			DropSynonymStatement dropSynonymStatement = base.FragmentFactory.CreateFragment<DropSynonymStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.dropObjectList(dropSynonymStatement, true);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYNONYM");
			}
			return dropSynonymStatement;
		}

		// Token: 0x06000D0C RID: 3340 RVA: 0x000510DC File Offset: 0x0004F2DC
		public DropApplicationRoleStatement dropApplicationRoleStatement()
		{
			DropApplicationRoleStatement dropApplicationRoleStatement = base.FragmentFactory.CreateFragment<DropApplicationRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "APPLICATION");
				TSql80ParserBaseInternal.Match(token2, "ROLE");
				dropApplicationRoleStatement.Name = identifier;
			}
			return dropApplicationRoleStatement;
		}

		// Token: 0x06000D0D RID: 3341 RVA: 0x00051154 File Offset: 0x0004F354
		public DropBrokerPriorityStatement dropBrokerPriorityStatement()
		{
			DropBrokerPriorityStatement dropBrokerPriorityStatement = base.FragmentFactory.CreateFragment<DropBrokerPriorityStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "BROKER");
				TSql80ParserBaseInternal.Match(token2, "PRIORITY");
				dropBrokerPriorityStatement.Name = identifier;
			}
			return dropBrokerPriorityStatement;
		}

		// Token: 0x06000D0E RID: 3342 RVA: 0x000511CC File Offset: 0x0004F3CC
		public DropCryptographicProviderStatement dropCryptographicProviderStatement()
		{
			DropCryptographicProviderStatement dropCryptographicProviderStatement = base.FragmentFactory.CreateFragment<DropCryptographicProviderStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CRYPTOGRAPHIC");
				TSql80ParserBaseInternal.Match(token2, "PROVIDER");
				dropCryptographicProviderStatement.Name = identifier;
			}
			return dropCryptographicProviderStatement;
		}

		// Token: 0x06000D0F RID: 3343 RVA: 0x00051244 File Offset: 0x0004F444
		public TSqlStatement dropFulltextStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FULLTEXT");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 84)
			{
				if (num != 183)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					tsqlStatement = this.dropFulltextCatalogStatement();
				}
				else
				{
					tsqlStatement = this.dropFulltextStoplistStatement();
				}
			}
			else
			{
				tsqlStatement = this.dropFulltextIndexStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000D10 RID: 3344 RVA: 0x000512CC File Offset: 0x0004F4CC
		public DropLoginStatement dropLoginStatement()
		{
			DropLoginStatement dropLoginStatement = base.FragmentFactory.CreateFragment<DropLoginStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOGIN");
				dropLoginStatement.Name = identifier;
			}
			return dropLoginStatement;
		}

		// Token: 0x06000D11 RID: 3345 RVA: 0x00051324 File Offset: 0x0004F524
		public DropResourcePoolStatement dropResourcePoolStatement()
		{
			DropResourcePoolStatement dropResourcePoolStatement = base.FragmentFactory.CreateFragment<DropResourcePoolStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RESOURCE");
				TSql80ParserBaseInternal.Match(token2, "POOL");
				dropResourcePoolStatement.Name = identifier;
			}
			return dropResourcePoolStatement;
		}

		// Token: 0x06000D12 RID: 3346 RVA: 0x0005139C File Offset: 0x0004F59C
		public DropWorkloadGroupStatement dropWorkloadGroupStatement()
		{
			DropWorkloadGroupStatement dropWorkloadGroupStatement = base.FragmentFactory.CreateFragment<DropWorkloadGroupStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.LT(1);
			this.match(76);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "WORKLOAD");
				dropWorkloadGroupStatement.Name = identifier;
			}
			return dropWorkloadGroupStatement;
		}

		// Token: 0x06000D13 RID: 3347 RVA: 0x00051404 File Offset: 0x0004F604
		public DropRoleStatement dropRoleStatement()
		{
			DropRoleStatement dropRoleStatement = base.FragmentFactory.CreateFragment<DropRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				dropRoleStatement.Name = identifier;
			}
			return dropRoleStatement;
		}

		// Token: 0x06000D14 RID: 3348 RVA: 0x0005145C File Offset: 0x0004F65C
		public DropMasterKeyStatement dropMasterKeyStatement()
		{
			DropMasterKeyStatement dropMasterKeyStatement = base.FragmentFactory.CreateFragment<DropMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				TSql80ParserBaseInternal.UpdateTokenInfo(dropMasterKeyStatement, token2);
			}
			return dropMasterKeyStatement;
		}

		// Token: 0x06000D15 RID: 3349 RVA: 0x000514BC File Offset: 0x0004F6BC
		public DropSymmetricKeyStatement dropSymmetricKeyStatement()
		{
			DropSymmetricKeyStatement dropSymmetricKeyStatement = base.FragmentFactory.CreateFragment<DropSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				dropSymmetricKeyStatement.Name = identifier;
			}
			bool flag = this.removeProviderKeyOpt(dropSymmetricKeyStatement);
			if (this.inputState.guessing == 0)
			{
				dropSymmetricKeyStatement.RemoveProviderKey = flag;
			}
			return dropSymmetricKeyStatement;
		}

		// Token: 0x06000D16 RID: 3350 RVA: 0x00051538 File Offset: 0x0004F738
		public DropAsymmetricKeyStatement dropAsymmetricKeyStatement()
		{
			DropAsymmetricKeyStatement dropAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<DropAsymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				dropAsymmetricKeyStatement.Name = identifier;
			}
			bool flag = this.removeProviderKeyOpt(dropAsymmetricKeyStatement);
			if (this.inputState.guessing == 0)
			{
				dropAsymmetricKeyStatement.RemoveProviderKey = flag;
			}
			return dropAsymmetricKeyStatement;
		}

		// Token: 0x06000D17 RID: 3351 RVA: 0x000515B4 File Offset: 0x0004F7B4
		public DropCertificateStatement dropCertificateStatement()
		{
			DropCertificateStatement dropCertificateStatement = base.FragmentFactory.CreateFragment<DropCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				dropCertificateStatement.Name = identifier;
			}
			return dropCertificateStatement;
		}

		// Token: 0x06000D18 RID: 3352 RVA: 0x0005160C File Offset: 0x0004F80C
		public DropCredentialStatement dropCredentialStatement()
		{
			DropCredentialStatement dropCredentialStatement = base.FragmentFactory.CreateFragment<DropCredentialStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
				dropCredentialStatement.Name = identifier;
			}
			return dropCredentialStatement;
		}

		// Token: 0x06000D19 RID: 3353 RVA: 0x00051664 File Offset: 0x0004F864
		public DropTypeStatement dropTypeStatement()
		{
			DropTypeStatement dropTypeStatement = base.FragmentFactory.CreateFragment<DropTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.dropObject(false);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TYPE");
				dropTypeStatement.Name = schemaObjectName;
			}
			return dropTypeStatement;
		}

		// Token: 0x06000D1A RID: 3354 RVA: 0x000516BC File Offset: 0x0004F8BC
		public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement()
		{
			DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<DropXmlSchemaCollectionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(139);
			IToken token2 = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
				TSql80ParserBaseInternal.Match(token2, "COLLECTION");
				dropXmlSchemaCollectionStatement.Name = schemaObjectName;
			}
			return dropXmlSchemaCollectionStatement;
		}

		// Token: 0x06000D1B RID: 3355 RVA: 0x0005173C File Offset: 0x0004F93C
		public DropContractStatement dropContractStatement()
		{
			DropContractStatement dropContractStatement = base.FragmentFactory.CreateFragment<DropContractStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONTRACT");
				dropContractStatement.Name = identifier;
			}
			return dropContractStatement;
		}

		// Token: 0x06000D1C RID: 3356 RVA: 0x00051794 File Offset: 0x0004F994
		public DropQueueStatement dropQueueStatement()
		{
			DropQueueStatement dropQueueStatement = base.FragmentFactory.CreateFragment<DropQueueStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				dropQueueStatement.Name = schemaObjectName;
			}
			return dropQueueStatement;
		}

		// Token: 0x06000D1D RID: 3357 RVA: 0x000517EC File Offset: 0x0004F9EC
		public DropServiceStatement dropServiceStatement()
		{
			DropServiceStatement dropServiceStatement = base.FragmentFactory.CreateFragment<DropServiceStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
				dropServiceStatement.Name = identifier;
			}
			return dropServiceStatement;
		}

		// Token: 0x06000D1E RID: 3358 RVA: 0x00051844 File Offset: 0x0004FA44
		public DropRouteStatement dropRouteStatement()
		{
			DropRouteStatement dropRouteStatement = base.FragmentFactory.CreateFragment<DropRouteStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROUTE");
				dropRouteStatement.Name = identifier;
			}
			return dropRouteStatement;
		}

		// Token: 0x06000D1F RID: 3359 RVA: 0x0005189C File Offset: 0x0004FA9C
		public DropMessageTypeStatement dropMessageTypeStatement()
		{
			DropMessageTypeStatement dropMessageTypeStatement = base.FragmentFactory.CreateFragment<DropMessageTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MESSAGE");
				TSql80ParserBaseInternal.Match(token2, "TYPE");
				dropMessageTypeStatement.Name = identifier;
			}
			return dropMessageTypeStatement;
		}

		// Token: 0x06000D20 RID: 3360 RVA: 0x00051914 File Offset: 0x0004FB14
		public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement()
		{
			DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<DropRemoteServiceBindingStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOTE");
				TSql80ParserBaseInternal.Match(token2, "SERVICE");
				TSql80ParserBaseInternal.Match(token3, "BINDING");
				dropRemoteServiceBindingStatement.Name = identifier;
			}
			return dropRemoteServiceBindingStatement;
		}

		// Token: 0x06000D21 RID: 3361 RVA: 0x000519AC File Offset: 0x0004FBAC
		public DropEndpointStatement dropEndpointStatement()
		{
			DropEndpointStatement dropEndpointStatement = base.FragmentFactory.CreateFragment<DropEndpointStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENDPOINT");
				dropEndpointStatement.Name = identifier;
			}
			return dropEndpointStatement;
		}

		// Token: 0x06000D22 RID: 3362 RVA: 0x00051A04 File Offset: 0x0004FC04
		public DropSignatureStatement dropSignatureStatement()
		{
			DropSignatureStatement dropSignatureStatement = base.FragmentFactory.CreateFragment<DropSignatureStatement>();
			this.signatureType(dropSignatureStatement);
			this.match(71);
			this.signableElement(dropSignatureStatement);
			this.match(18);
			this.cryptoListWithOptionalPasswordSignature(dropSignatureStatement);
			return dropSignatureStatement;
		}

		// Token: 0x06000D23 RID: 3363 RVA: 0x00051A44 File Offset: 0x0004FC44
		public TSqlStatement dropEventStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EVENT");
			}
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("NOTIFICATION"))
			{
				tsqlStatement = this.dropEventNotificationStatement();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233) || !base.NextTokenMatches("SESSION"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.dropEventSessionStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000D24 RID: 3364 RVA: 0x00051B14 File Offset: 0x0004FD14
		public DropSequenceStatement dropSequenceStatement()
		{
			DropSequenceStatement dropSequenceStatement = base.FragmentFactory.CreateFragment<DropSequenceStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.dropObjectList(dropSequenceStatement, true);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SEQUENCE");
			}
			return dropSequenceStatement;
		}

		// Token: 0x06000D25 RID: 3365 RVA: 0x00051B64 File Offset: 0x0004FD64
		public DropFederationStatement dropFederationStatement()
		{
			DropFederationStatement dropFederationStatement = base.FragmentFactory.CreateFragment<DropFederationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FEDERATION");
				dropFederationStatement.Name = identifier;
			}
			return dropFederationStatement;
		}

		// Token: 0x06000D26 RID: 3366 RVA: 0x00051BBC File Offset: 0x0004FDBC
		public TSqlStatement dropServerStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVER");
			}
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AUDIT"))
			{
				this.LT(1);
				this.match(232);
				if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SPECIFICATION"))
				{
					tsqlStatement = this.dropServerAuditSpecificationStatement();
				}
				else
				{
					if ((this.LA(1) != 232 && this.LA(1) != 233) || !TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					tsqlStatement = this.dropServerAuditStatement();
				}
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.dropServerRoleStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06000D27 RID: 3367 RVA: 0x00051D20 File Offset: 0x0004FF20
		public DropUserStatement dropUserStatement()
		{
			DropUserStatement dropUserStatement = base.FragmentFactory.CreateFragment<DropUserStatement>();
			this.match(163);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				dropUserStatement.Name = identifier;
			}
			return dropUserStatement;
		}

		// Token: 0x06000D28 RID: 3368 RVA: 0x00051D60 File Offset: 0x0004FF60
		public DropServerAuditSpecificationStatement dropServerAuditSpecificationStatement()
		{
			DropServerAuditSpecificationStatement dropServerAuditSpecificationStatement = base.FragmentFactory.CreateFragment<DropServerAuditSpecificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SPECIFICATION");
				dropServerAuditSpecificationStatement.Name = identifier;
			}
			return dropServerAuditSpecificationStatement;
		}

		// Token: 0x06000D29 RID: 3369 RVA: 0x00051DB8 File Offset: 0x0004FFB8
		public DropServerAuditStatement dropServerAuditStatement()
		{
			DropServerAuditStatement dropServerAuditStatement = base.FragmentFactory.CreateFragment<DropServerAuditStatement>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				dropServerAuditStatement.Name = identifier;
			}
			return dropServerAuditStatement;
		}

		// Token: 0x06000D2A RID: 3370 RVA: 0x00051DF0 File Offset: 0x0004FFF0
		public DropServerRoleStatement dropServerRoleStatement()
		{
			DropServerRoleStatement dropServerRoleStatement = base.FragmentFactory.CreateFragment<DropServerRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				dropServerRoleStatement.Name = identifier;
			}
			return dropServerRoleStatement;
		}

		// Token: 0x06000D2B RID: 3371 RVA: 0x00051E48 File Offset: 0x00050048
		public DropDatabaseAuditSpecificationStatement dropDatabaseAuditSpecificationStatement()
		{
			DropDatabaseAuditSpecificationStatement dropDatabaseAuditSpecificationStatement = base.FragmentFactory.CreateFragment<DropDatabaseAuditSpecificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AUDIT");
				TSql80ParserBaseInternal.Match(token2, "SPECIFICATION");
				dropDatabaseAuditSpecificationStatement.Name = identifier;
			}
			return dropDatabaseAuditSpecificationStatement;
		}

		// Token: 0x06000D2C RID: 3372 RVA: 0x00051EC0 File Offset: 0x000500C0
		public DropDatabaseEncryptionKeyStatement dropDatabaseEncryptionKeyStatement()
		{
			DropDatabaseEncryptionKeyStatement dropDatabaseEncryptionKeyStatement = base.FragmentFactory.CreateFragment<DropDatabaseEncryptionKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.UpdateTokenInfo(dropDatabaseEncryptionKeyStatement, token2);
			}
			return dropDatabaseEncryptionKeyStatement;
		}

		// Token: 0x06000D2D RID: 3373 RVA: 0x00051F20 File Offset: 0x00050120
		public DropDatabaseStatement dropDatabaseStatement()
		{
			DropDatabaseStatement dropDatabaseStatement = base.FragmentFactory.CreateFragment<DropDatabaseStatement>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropDatabaseStatement, dropDatabaseStatement.Databases, identifier);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropDatabaseStatement, dropDatabaseStatement.Databases, identifier);
				}
			}
			return dropDatabaseStatement;
		}

		// Token: 0x06000D2E RID: 3374 RVA: 0x00051F98 File Offset: 0x00050198
		public DropIndexClauseBase dropIndexClause()
		{
			DropIndexClauseBase dropIndexClauseBase;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_85_.member(this.LA(2)))
			{
				dropIndexClauseBase = this.indexDropObject();
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || this.LA(2) != 105)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				dropIndexClauseBase = this.indexDropObjectNewNameFormat();
			}
			return dropIndexClauseBase;
		}

		// Token: 0x06000D2F RID: 3375 RVA: 0x00052030 File Offset: 0x00050230
		public BackwardsCompatibleDropIndexClause indexDropObject()
		{
			BackwardsCompatibleDropIndexClause backwardsCompatibleDropIndexClause = base.FragmentFactory.CreateFragment<BackwardsCompatibleDropIndexClause>();
			ChildObjectName childObjectName = this.childObjectNameWithThreePrefixes();
			if (this.inputState.guessing == 0)
			{
				if (childObjectName.BaseIdentifier == null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46027", childObjectName, TSqlParserResource.SQL46027Message, new string[0]);
				}
				backwardsCompatibleDropIndexClause.Index = childObjectName;
			}
			return backwardsCompatibleDropIndexClause;
		}

		// Token: 0x06000D30 RID: 3376 RVA: 0x00052084 File Offset: 0x00050284
		public DropIndexClause indexDropObjectNewNameFormat()
		{
			DropIndexClause dropIndexClause = base.FragmentFactory.CreateFragment<DropIndexClause>();
			Identifier identifier = this.identifier();
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				dropIndexClause.Index = identifier;
				dropIndexClause.Object = schemaObjectName;
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.dropClusteredIndexOptions(dropIndexClause);
			}
			else if (!TSql110ParserInternal.tokenSet_49_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return dropIndexClause;
		}

		// Token: 0x06000D31 RID: 3377 RVA: 0x00052130 File Offset: 0x00050330
		public void dropClusteredIndexOptions(DropIndexClause vParent)
		{
			int num = 0;
			this.match(171);
			this.match(191);
			this.dropClusteredIndexOption(vParent, ref num);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.dropClusteredIndexOption(vParent, ref num);
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000D32 RID: 3378 RVA: 0x000521AC File Offset: 0x000503AC
		public void dropClusteredIndexOption(DropIndexClause vParent, ref int encounteredOptions)
		{
			IndexOption indexOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP"))
			{
				indexOption = this.maxDopOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ONLINE"))
			{
				indexOption = this.onlineIndexOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 151 && base.NextTokenMatches("MOVE"))
			{
				indexOption = this.dropIndexMoveToOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) >= 230 && this.LA(2) <= 233 && base.NextTokenMatches("FILESTREAM_ON"))
			{
				indexOption = this.dropIndexFileStreamOnOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206 || !base.NextTokenMatches("DATA_COMPRESSION"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				indexOption = this.dataCompressionOption();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)indexOption.OptionKind, indexOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.Options, indexOption);
			}
		}

		// Token: 0x06000D33 RID: 3379 RVA: 0x00052304 File Offset: 0x00050504
		public IndexExpressionOption maxDopOption()
		{
			IndexExpressionOption indexExpressionOption = base.FragmentFactory.CreateFragment<IndexExpressionOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql90ParserBaseInternal.ThrowIfMaxdopValueOutOfRange(literal);
				TSql80ParserBaseInternal.Match(token, "MAXDOP");
				TSql80ParserBaseInternal.UpdateTokenInfo(indexExpressionOption, token);
				indexExpressionOption.OptionKind = IndexOptionKind.MaxDop;
				indexExpressionOption.Expression = literal;
			}
			return indexExpressionOption;
		}

		// Token: 0x06000D34 RID: 3380 RVA: 0x0005237C File Offset: 0x0005057C
		public IndexStateOption onlineIndexOption()
		{
			IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ONLINE");
				indexStateOption.OptionKind = IndexOptionKind.Online;
				TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
			}
			this.match(206);
			OptionState optionState = this.optionOnOff(indexStateOption);
			if (this.inputState.guessing == 0)
			{
				indexStateOption.OptionState = optionState;
			}
			return indexStateOption;
		}

		// Token: 0x06000D35 RID: 3381 RVA: 0x000523F8 File Offset: 0x000505F8
		public MoveToDropIndexOption dropIndexMoveToOption()
		{
			MoveToDropIndexOption moveToDropIndexOption = base.FragmentFactory.CreateFragment<MoveToDropIndexOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(151);
			FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MOVE");
				TSql80ParserBaseInternal.UpdateTokenInfo(moveToDropIndexOption, token);
				moveToDropIndexOption.OptionKind = IndexOptionKind.MoveTo;
				moveToDropIndexOption.MoveTo = fileGroupOrPartitionScheme;
			}
			return moveToDropIndexOption;
		}

		// Token: 0x06000D36 RID: 3382 RVA: 0x00052468 File Offset: 0x00050668
		public FileStreamOnDropIndexOption dropIndexFileStreamOnOption()
		{
			FileStreamOnDropIndexOption fileStreamOnDropIndexOption = base.FragmentFactory.CreateFragment<FileStreamOnDropIndexOption>();
			this.fileStreamOn(fileStreamOnDropIndexOption);
			if (this.inputState.guessing == 0)
			{
				fileStreamOnDropIndexOption.OptionKind = IndexOptionKind.FileStreamOn;
			}
			return fileStreamOnDropIndexOption;
		}

		// Token: 0x06000D37 RID: 3383 RVA: 0x000524A0 File Offset: 0x000506A0
		public DataCompressionOption dataCompressionOption()
		{
			DataCompressionOption dataCompressionOption = base.FragmentFactory.CreateFragment<DataCompressionOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "DATA_COMPRESSION");
				dataCompressionOption.CompressionLevel = DataCompressionLevelHelper.Instance.ParseOption(token2);
				dataCompressionOption.OptionKind = IndexOptionKind.DataCompression;
				TSql80ParserBaseInternal.UpdateTokenInfo(dataCompressionOption, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(dataCompressionOption, token2);
			}
			int num = this.LA(1);
			if (num != 105)
			{
				if (num != 192 && num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(105);
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(191);
				CompressionPartitionRange compressionPartitionRange = this.compressionPartitionRange();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "PARTITIONS");
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CompressionPartitionRange>(dataCompressionOption, dataCompressionOption.PartitionRanges, compressionPartitionRange);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					compressionPartitionRange = this.compressionPartitionRange();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CompressionPartitionRange>(dataCompressionOption, dataCompressionOption.PartitionRanges, compressionPartitionRange);
					}
				}
				IToken token4 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(dataCompressionOption, token4);
				}
			}
			return dataCompressionOption;
		}

		// Token: 0x06000D38 RID: 3384 RVA: 0x00052630 File Offset: 0x00050830
		public FileGroupOrPartitionScheme filegroupOrPartitionScheme()
		{
			FileGroupOrPartitionScheme fileGroupOrPartitionScheme = base.FragmentFactory.CreateFragment<FileGroupOrPartitionScheme>();
			IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				fileGroupOrPartitionScheme.Name = identifierOrValueExpression;
			}
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(fileGroupOrPartitionScheme, fileGroupOrPartitionScheme.PartitionSchemeColumns);
			}
			else if (!TSql110ParserInternal.tokenSet_86_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return fileGroupOrPartitionScheme;
		}

		// Token: 0x06000D39 RID: 3385 RVA: 0x000526D8 File Offset: 0x000508D8
		public void fileStreamOn(IFileStreamSpecifier vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILESTREAM_ON");
				TSql80ParserBaseInternal.UpdateTokenInfo((TSqlFragment)vParent, token);
				vParent.FileStreamOn = identifierOrValueExpression;
			}
		}

		// Token: 0x06000D3A RID: 3386 RVA: 0x0005272C File Offset: 0x0005092C
		public ChildObjectName statisticsDropObject()
		{
			ChildObjectName childObjectName = this.childObjectNameWithThreePrefixes();
			if (this.inputState.guessing == 0 && childObjectName.BaseIdentifier == null)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46038", childObjectName, TSqlParserResource.SQL46038Message, new string[0]);
			}
			return childObjectName;
		}

		// Token: 0x06000D3B RID: 3387 RVA: 0x0005276C File Offset: 0x0005096C
		public List<Identifier> identifierList(int vMaxNumber)
		{
			List<Identifier> list = new List<Identifier>();
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddIdentifierToListWithCheck(list, identifier, vMaxNumber);
					}
					while (this.LA(1) == 200 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
					{
						this.identifierListElement(list, vMaxNumber, false);
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.identifierListElement(list, vMaxNumber, true);
				while (this.LA(1) == 200 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
				{
					this.identifierListElement(list, vMaxNumber, false);
				}
			}
			return list;
		}

		// Token: 0x06000D3C RID: 3388 RVA: 0x0005286C File Offset: 0x00050A6C
		public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames)
		{
			SchemaObjectName schemaObjectName = this.dropObject(onlyTwoPartNames);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.Objects, schemaObjectName);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				schemaObjectName = this.dropObject(onlyTwoPartNames);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.Objects, schemaObjectName);
				}
			}
		}

		// Token: 0x06000D3D RID: 3389 RVA: 0x000528D8 File Offset: 0x00050AD8
		public TriggerScope triggerScope(TSqlFragment vParent)
		{
			TriggerScope triggerScope = TriggerScope.Normal;
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 43)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(43);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					triggerScope = TriggerScope.Database;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(5);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "SERVER");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
					triggerScope = TriggerScope.AllServer;
				}
			}
			return triggerScope;
		}

		// Token: 0x06000D3E RID: 3390 RVA: 0x0005298C File Offset: 0x00050B8C
		public SchemaObjectName dropObject(bool onlyTwoPartNames)
		{
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0 && onlyTwoPartNames)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "DROP");
			}
			return schemaObjectName;
		}

		// Token: 0x06000D3F RID: 3391 RVA: 0x000529BC File Offset: 0x00050BBC
		public DropPartitionFunctionStatement dropPartitionFunctionStatement()
		{
			DropPartitionFunctionStatement dropPartitionFunctionStatement = base.FragmentFactory.CreateFragment<DropPartitionFunctionStatement>();
			this.match(73);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				dropPartitionFunctionStatement.Name = identifier;
			}
			return dropPartitionFunctionStatement;
		}

		// Token: 0x06000D40 RID: 3392 RVA: 0x000529FC File Offset: 0x00050BFC
		public DropPartitionSchemeStatement dropPartitionSchemeStatement()
		{
			DropPartitionSchemeStatement dropPartitionSchemeStatement = base.FragmentFactory.CreateFragment<DropPartitionSchemeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SCHEME");
				dropPartitionSchemeStatement.Name = identifier;
			}
			return dropPartitionSchemeStatement;
		}

		// Token: 0x06000D41 RID: 3393 RVA: 0x00052A54 File Offset: 0x00050C54
		public DropFullTextCatalogStatement dropFulltextCatalogStatement()
		{
			DropFullTextCatalogStatement dropFullTextCatalogStatement = base.FragmentFactory.CreateFragment<DropFullTextCatalogStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CATALOG");
				dropFullTextCatalogStatement.Name = identifier;
			}
			return dropFullTextCatalogStatement;
		}

		// Token: 0x06000D42 RID: 3394 RVA: 0x00052AAC File Offset: 0x00050CAC
		public DropFullTextIndexStatement dropFulltextIndexStatement()
		{
			DropFullTextIndexStatement dropFullTextIndexStatement = base.FragmentFactory.CreateFragment<DropFullTextIndexStatement>();
			this.match(84);
			this.match(105);
			SchemaObjectName schemaObjectName = this.dropObject(false);
			if (this.inputState.guessing == 0)
			{
				dropFullTextIndexStatement.TableName = schemaObjectName;
			}
			return dropFullTextIndexStatement;
		}

		// Token: 0x06000D43 RID: 3395 RVA: 0x00052AF4 File Offset: 0x00050CF4
		public bool removeProviderKeyOpt(TSqlFragment vParent)
		{
			bool flag = false;
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token = this.LT(1);
				this.match(232);
				IToken token2 = this.LT(1);
				this.match(232);
				IToken token3 = this.LT(1);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "REMOVE");
					TSql80ParserBaseInternal.Match(token2, "PROVIDER");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
					flag = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return flag;
		}

		// Token: 0x06000D44 RID: 3396 RVA: 0x00052BC4 File Offset: 0x00050DC4
		public DropEventNotificationStatement dropEventNotificationStatement()
		{
			DropEventNotificationStatement dropEventNotificationStatement = base.FragmentFactory.CreateFragment<DropEventNotificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NOTIFICATION");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropEventNotificationStatement, dropEventNotificationStatement.Notifications, identifier);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropEventNotificationStatement, dropEventNotificationStatement.Notifications, identifier);
				}
			}
			EventNotificationObjectScope eventNotificationObjectScope = this.eventNotificationObjectScope();
			if (this.inputState.guessing == 0)
			{
				dropEventNotificationStatement.Scope = eventNotificationObjectScope;
			}
			return dropEventNotificationStatement;
		}

		// Token: 0x06000D45 RID: 3397 RVA: 0x00052C78 File Offset: 0x00050E78
		public DropEventSessionStatement dropEventSessionStatement()
		{
			DropEventSessionStatement dropEventSessionStatement = base.FragmentFactory.CreateFragment<DropEventSessionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SESSION");
				dropEventSessionStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(dropEventSessionStatement);
			}
			this.match(105);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "SERVER");
			}
			return dropEventSessionStatement;
		}

		// Token: 0x06000D46 RID: 3398 RVA: 0x00052D0C File Offset: 0x00050F0C
		public void signatureType(SignatureStatementBase vParent)
		{
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "COUNTER");
					vParent.IsCounter = true;
				}
			}
			else if (this.LA(1) != 232 || (this.LA(2) != 71 && this.LA(2) != 151))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "SIGNATURE");
			}
		}

		// Token: 0x06000D47 RID: 3399 RVA: 0x00052DD4 File Offset: 0x00050FD4
		public void signableElement(SignatureStatementBase vParent)
		{
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_88_.member(this.LA(2)))
			{
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					vParent.Element = schemaObjectName;
					return;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 203)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(203);
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token, "OBJECT"))
					{
						vParent.ElementKind = SignableElementKind.Object;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
						vParent.ElementKind = SignableElementKind.Assembly;
					}
					vParent.Element = schemaObjectName;
					return;
				}
			}
			else
			{
				if (this.LA(1) != 43)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(43);
				this.match(203);
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					vParent.ElementKind = SignableElementKind.Database;
					vParent.Element = schemaObjectName;
					return;
				}
			}
		}

		// Token: 0x06000D48 RID: 3400 RVA: 0x00052F14 File Offset: 0x00051114
		public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent)
		{
			CryptoMechanism cryptoMechanism = this.cryptoWithOptionalPasswordSignature();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.Cryptos, cryptoMechanism);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				cryptoMechanism = this.cryptoWithOptionalPasswordSignature();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.Cryptos, cryptoMechanism);
				}
			}
		}

		// Token: 0x06000D49 RID: 3401 RVA: 0x00052F80 File Offset: 0x00051180
		public CryptoMechanism cryptoWithOptionalPasswordSignature()
		{
			CryptoMechanism cryptoMechanism;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				cryptoMechanism = this.certificateCrypto();
				Literal literal = this.withSignatureOrPasswordOpt();
				if (this.inputState.guessing == 0 && literal != null)
				{
					cryptoMechanism.PasswordOrSignature = literal;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				cryptoMechanism = this.keyCrypto();
				Literal literal = this.withSignatureOrPasswordOpt();
				if (this.inputState.guessing == 0 && literal != null)
				{
					cryptoMechanism.PasswordOrSignature = literal;
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				cryptoMechanism = this.passwordCrypto();
			}
			return cryptoMechanism;
		}

		// Token: 0x06000D4A RID: 3402 RVA: 0x00053060 File Offset: 0x00051260
		public Literal withSignatureOrPasswordOpt()
		{
			Literal literal = null;
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				this.LT(1);
				this.match(232);
				this.match(206);
				int num = this.LA(1);
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
						literal = this.stringLiteral();
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					literal = this.binary();
				}
			}
			else if (!TSql110ParserInternal.tokenSet_49_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literal;
		}

		// Token: 0x06000D4B RID: 3403 RVA: 0x0005313C File Offset: 0x0005133C
		public Identifier nonQuotedIdentifier()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
				identifier.SetUnquotedIdentifier(token.getText());
			}
			return identifier;
		}

		// Token: 0x06000D4C RID: 3404 RVA: 0x0005318C File Offset: 0x0005138C
		public BeginTransactionStatement beginTransactionStatement()
		{
			BeginTransactionStatement beginTransactionStatement = base.FragmentFactory.CreateFragment<BeginTransactionStatement>();
			IToken token = this.LT(1);
			this.match(13);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token);
			}
			int num = this.LA(1);
			if (num != 52)
			{
				switch (num)
				{
				case 153:
				case 154:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(52);
				if (this.inputState.guessing == 0)
				{
					beginTransactionStatement.Distributed = true;
				}
			}
			switch (this.LA(1))
			{
			case 153:
			{
				IToken token2 = this.LT(1);
				this.match(153);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token2);
				}
				break;
			}
			case 154:
			{
				IToken token3 = this.LT(1);
				this.match(154);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token3);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (TSql110ParserInternal.tokenSet_24_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_25_.member(this.LA(2)))
			{
				this.transactionName(beginTransactionStatement);
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "MARK");
					TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token4);
					beginTransactionStatement.MarkDefined = true;
				}
				int num2 = this.LA(1);
				if (num2 <= 92)
				{
					if (num2 <= 28)
					{
						if (num2 <= 6)
						{
							if (num2 == 1)
							{
								return beginTransactionStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return beginTransactionStatement;
							}
						}
						else
						{
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return beginTransactionStatement;
							case 14:
							case 16:
								break;
							default:
								switch (num2)
								{
								case 22:
								case 23:
									return beginTransactionStatement;
								default:
									if (num2 == 28)
									{
										return beginTransactionStatement;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num2 <= 75)
					{
						switch (num2)
						{
						case 33:
						case 35:
							return beginTransactionStatement;
						case 34:
							break;
						default:
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								return beginTransactionStatement;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								break;
							default:
								switch (num2)
								{
								case 74:
								case 75:
									return beginTransactionStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 82 || num2 == 86 || num2 == 92)
					{
						return beginTransactionStatement;
					}
				}
				else if (num2 <= 172)
				{
					if (num2 <= 119)
					{
						if (num2 == 95 || num2 == 106 || num2 == 119)
						{
							return beginTransactionStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return beginTransactionStatement;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num2)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								return beginTransactionStatement;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num2)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									return beginTransactionStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 191)
				{
					if (num2 == 176 || num2 == 182 || num2 == 191)
					{
						return beginTransactionStatement;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return beginTransactionStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return beginTransactionStatement;
					default:
						switch (num2)
						{
						case 230:
						case 231:
						case 234:
						{
							ValueExpression valueExpression = this.stringOrVariable();
							if (this.inputState.guessing == 0)
							{
								beginTransactionStatement.MarkDescription = valueExpression;
								return beginTransactionStatement;
							}
							return beginTransactionStatement;
						}
						case 232:
							return beginTransactionStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return beginTransactionStatement;
		}

		// Token: 0x06000D4D RID: 3405 RVA: 0x0005367C File Offset: 0x0005187C
		public TryCatchStatement tryCatchStatement()
		{
			TryCatchStatement tryCatchStatement = base.FragmentFactory.CreateFragment<TryCatchStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(13);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tryCatchStatement, token);
				TSql80ParserBaseInternal.Match(token2, "TRY");
			}
			StatementList statementList = this.tryStatementList(ref flag);
			if (this.inputState.guessing == 0)
			{
				tryCatchStatement.TryStatements = statementList;
			}
			this.match(56);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "TRY");
			}
			this.LT(1);
			this.match(13);
			IToken token4 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "CATCH");
			}
			statementList = this.catchStatementList(ref flag);
			if (this.inputState.guessing == 0)
			{
				tryCatchStatement.CatchStatements = statementList;
			}
			this.match(56);
			IToken token5 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token5, "CATCH");
				TSql80ParserBaseInternal.UpdateTokenInfo(tryCatchStatement, token5);
				if (flag)
				{
					tryCatchStatement = null;
				}
			}
			return tryCatchStatement;
		}

		// Token: 0x06000D4E RID: 3406 RVA: 0x000537D8 File Offset: 0x000519D8
		public BeginConversationTimerStatement beginConversationTimerStatement()
		{
			BeginConversationTimerStatement beginConversationTimerStatement = base.FragmentFactory.CreateFragment<BeginConversationTimerStatement>();
			IToken token = this.LT(1);
			this.match(13);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.Match(token3, "TIMER");
				TSql80ParserBaseInternal.UpdateTokenInfo(beginConversationTimerStatement, token);
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(192);
			IToken token4 = this.LT(1);
			this.match(232);
			this.match(206);
			ScalarExpression scalarExpression2 = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				beginConversationTimerStatement.Handle = scalarExpression;
				TSql80ParserBaseInternal.Match(token4, "TIMEOUT");
				beginConversationTimerStatement.Timeout = scalarExpression2;
			}
			return beginConversationTimerStatement;
		}

		// Token: 0x06000D4F RID: 3407 RVA: 0x000538CC File Offset: 0x00051ACC
		public BeginDialogStatement beginDialogStatement()
		{
			BeginDialogStatement beginDialogStatement = base.FragmentFactory.CreateFragment<BeginDialogStatement>();
			int num = 0;
			IToken token = this.LT(1);
			this.match(13);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "DIALOG");
				TSql80ParserBaseInternal.UpdateTokenInfo(beginDialogStatement, token);
			}
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "CONVERSATION");
					beginDialogStatement.IsConversation = true;
					goto IL_00CB;
				}
				goto IL_00CB;
			}
			case 234:
				goto IL_00CB;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00CB:
			VariableReference variableReference = this.variable();
			this.match(71);
			IToken token4 = this.LT(1);
			this.match(232);
			IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
			this.match(151);
			IToken token5 = this.LT(1);
			this.match(232);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "SERVICE");
				TSql80ParserBaseInternal.Match(token5, "SERVICE");
				beginDialogStatement.Handle = variableReference;
				beginDialogStatement.InitiatorServiceName = identifierOrValueExpression;
				beginDialogStatement.TargetServiceName = valueExpression;
			}
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							goto IL_041C;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_041C;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_041C;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							goto IL_041C;
						default:
							if (num2 == 28)
							{
								goto IL_041C;
							}
							switch (num2)
							{
							case 33:
							case 35:
								goto IL_041C;
							}
							break;
						}
					}
				}
				else if (num2 <= 82)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_041C;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num2)
						{
						case 74:
						case 75:
							goto IL_041C;
						default:
							if (num2 == 82)
							{
								goto IL_041C;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 86 || num2 == 92 || num2 == 95)
				{
					goto IL_041C;
				}
			}
			else if (num2 <= 176)
			{
				if (num2 <= 144)
				{
					switch (num2)
					{
					case 105:
					case 106:
						goto IL_041C;
					default:
						if (num2 == 119)
						{
							goto IL_041C;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_041C;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_041C;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num2)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_041C;
						case 168:
						case 169:
							break;
						default:
							if (num2 == 176)
							{
								goto IL_041C;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 198)
			{
				if (num2 == 182 || num2 == 191)
				{
					goto IL_041C;
				}
				if (num2 == 198)
				{
					this.match(198);
					ValueExpression valueExpression2 = this.stringOrVariable();
					if (this.inputState.guessing == 0)
					{
						beginDialogStatement.InstanceSpec = valueExpression2;
						goto IL_041C;
					}
					goto IL_041C;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_041C;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_041C;
				default:
					if (num2 == 232)
					{
						goto IL_041C;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_041C:
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 28)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							goto IL_06F3;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_06F3;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_06F3;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								goto IL_06F3;
							default:
								if (num3 == 28)
								{
									goto IL_06F3;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 75)
				{
					switch (num3)
					{
					case 33:
					case 35:
						goto IL_06F3;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_06F3;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num3)
							{
							case 74:
							case 75:
								goto IL_06F3;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					goto IL_06F3;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 119)
				{
					if (num3 == 95)
					{
						goto IL_06F3;
					}
					switch (num3)
					{
					case 105:
					{
						this.match(105);
						IToken token6 = this.LT(1);
						this.match(232);
						IdentifierOrValueExpression identifierOrValueExpression2 = this.identifierOrVariable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token6, "CONTRACT");
							beginDialogStatement.ContractName = identifierOrValueExpression2;
							goto IL_06F3;
						}
						goto IL_06F3;
					}
					case 106:
						goto IL_06F3;
					default:
						if (num3 == 119)
						{
							goto IL_06F3;
						}
						break;
					}
				}
				else
				{
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_06F3;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_06F3;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num3)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_06F3;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176 || num3 == 182 || num3 == 191)
				{
					goto IL_06F3;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_06F3;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_06F3;
				default:
					if (num3 == 232)
					{
						goto IL_06F3;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_06F3:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				DialogOption dialogOption = this.beginConversationArgument(ref num);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DialogOption>(beginDialogStatement, beginDialogStatement.Options, dialogOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					dialogOption = this.beginConversationArgument(ref num);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DialogOption>(beginDialogStatement, beginDialogStatement.Options, dialogOption);
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return beginDialogStatement;
		}

		// Token: 0x06000D50 RID: 3408 RVA: 0x00054094 File Offset: 0x00052294
		public void transactionName(TransactionStatement vParent)
		{
			int num = this.LA(1);
			if (num != 199 && num != 221)
			{
				switch (num)
				{
				case 232:
				case 233:
				case 234:
				{
					IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
					if (this.inputState.guessing == 0)
					{
						vParent.Name = identifierOrValueExpression;
						return;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Identifier identifier = this.weirdTransactionName();
				if (this.inputState.guessing == 0)
				{
					vParent.Name = base.IdentifierOrValueExpression(identifier);
					return;
				}
			}
		}

		// Token: 0x06000D51 RID: 3409 RVA: 0x00054124 File Offset: 0x00052324
		public Identifier weirdTransactionName()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			StringBuilder stringBuilder = new StringBuilder();
			int num = this.LA(1);
			if (num != 199)
			{
				if (num != 221)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(199);
				if (this.inputState.guessing == 0)
				{
					stringBuilder.Append(token.getText());
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
				}
			}
			IToken token2 = this.LT(1);
			this.match(221);
			IToken token3 = this.LT(1);
			this.match(202);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token2);
				stringBuilder.Append(token2.getText());
				stringBuilder.Append(token3.getText());
			}
			this.tranIdentifier(stringBuilder, identifier);
			IToken token4 = this.LT(1);
			this.match(200);
			if (this.inputState.guessing == 0)
			{
				stringBuilder.Append(token4.getText());
			}
			this.tranIdentifier(stringBuilder, identifier);
			if (this.inputState.guessing == 0)
			{
				identifier.Value = stringBuilder.ToString();
			}
			return identifier;
		}

		// Token: 0x06000D52 RID: 3410 RVA: 0x00054268 File Offset: 0x00052468
		public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent)
		{
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					vStringBuilder.Append(token.getText());
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				break;
			}
			case 233:
			{
				IToken token2 = this.LT(1);
				this.match(233);
				if (this.inputState.guessing == 0)
				{
					vStringBuilder.Append(token2.getText());
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000D53 RID: 3411 RVA: 0x00054314 File Offset: 0x00052514
		public StatementList tryStatementList(ref bool vParseErrorOccurred)
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			while (this.LA(1) == 204)
			{
				this.match(204);
			}
			int num = 0;
			while (TSql110ParserInternal.tokenSet_3_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_77_.member(this.LA(2)) && base.IsStatementIsNext())
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
					}
					else
					{
						vParseErrorOccurred = true;
						base.ThrowIfEndOfFileOrBatch();
					}
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return statementList;
		}

		// Token: 0x06000D54 RID: 3412 RVA: 0x000543C8 File Offset: 0x000525C8
		public StatementList catchStatementList(ref bool vParseErrorOccurred)
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			while (this.LA(1) == 204)
			{
				this.match(204);
			}
			while (TSql110ParserInternal.tokenSet_3_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_77_.member(this.LA(2)) && base.IsStatementIsNext())
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
					}
					else
					{
						vParseErrorOccurred = true;
						base.ThrowIfEndOfFileOrBatch();
					}
				}
			}
			return statementList;
		}

		// Token: 0x06000D55 RID: 3413 RVA: 0x0005445C File Offset: 0x0005265C
		public DeclareVariableElement declareVariableElement()
		{
			DeclareVariableElement declareVariableElement = base.FragmentFactory.CreateFragment<DeclareVariableElement>();
			Identifier identifier = this.identifierVariable();
			int num = this.LA(1);
			if (num <= 42)
			{
				if (num == 9)
				{
					this.match(9);
					goto IL_0070;
				}
				if (num == 42)
				{
					goto IL_0070;
				}
			}
			else
			{
				if (num == 53 || num == 96)
				{
					goto IL_0070;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_0070;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0070:
			int num2 = this.LA(1);
			DataTypeReference dataTypeReference;
			if (num2 <= 53)
			{
				if (num2 == 42)
				{
					dataTypeReference = this.cursorDataType();
					goto IL_00CF;
				}
				if (num2 != 53)
				{
					goto IL_00BC;
				}
			}
			else if (num2 != 96)
			{
				switch (num2)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_00BC;
				}
			}
			dataTypeReference = this.scalarDataType();
			goto IL_00CF;
			IL_00BC:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00CF:
			if (this.inputState.guessing == 0)
			{
				declareVariableElement.VariableName = identifier;
				declareVariableElement.DataType = dataTypeReference;
			}
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 35)
				{
					if (num3 <= 17)
					{
						if (num3 == 1)
						{
							return declareVariableElement;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return declareVariableElement;
						case 5:
							break;
						default:
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return declareVariableElement;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 22:
						case 23:
							return declareVariableElement;
						default:
							if (num3 == 28)
							{
								return declareVariableElement;
							}
							switch (num3)
							{
							case 33:
							case 35:
								return declareVariableElement;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return declareVariableElement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							return declareVariableElement;
						default:
							if (num3 == 82)
							{
								return declareVariableElement;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					return declareVariableElement;
				}
			}
			else if (num3 <= 176)
			{
				if (num3 <= 144)
				{
					if (num3 == 106 || num3 == 119)
					{
						return declareVariableElement;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return declareVariableElement;
					}
				}
				else
				{
					switch (num3)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return declareVariableElement;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num3)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return declareVariableElement;
						case 168:
						case 169:
							break;
						default:
							if (num3 == 176)
							{
								return declareVariableElement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 198)
			{
				if (num3 == 182 || num3 == 191 || num3 == 198)
				{
					return declareVariableElement;
				}
			}
			else
			{
				switch (num3)
				{
				case 204:
					return declareVariableElement;
				case 205:
					break;
				case 206:
				{
					this.match(206);
					ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
					if (this.inputState.guessing == 0)
					{
						declareVariableElement.Value = scalarExpression;
						return declareVariableElement;
					}
					return declareVariableElement;
				}
				default:
					switch (num3)
					{
					case 219:
					case 220:
						return declareVariableElement;
					default:
						if (num3 == 232)
						{
							return declareVariableElement;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D56 RID: 3414 RVA: 0x00054824 File Offset: 0x00052A24
		public SqlDataTypeReference cursorDataType()
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			IToken token = this.LT(1);
			this.match(42);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
				sqlDataTypeReference.SqlDataTypeOption = SqlDataTypeOption.Cursor;
			}
			return sqlDataTypeReference;
		}

		// Token: 0x06000D57 RID: 3415 RVA: 0x0005486C File Offset: 0x00052A6C
		public DeclareVariableStatement declareVariableStatement()
		{
			DeclareVariableStatement declareVariableStatement = base.FragmentFactory.CreateFragment<DeclareVariableStatement>();
			DeclareVariableElement declareVariableElement = this.declareVariableElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeclareVariableElement>(declareVariableStatement, declareVariableStatement.Declarations, declareVariableElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				declareVariableElement = this.declareVariableElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeclareVariableElement>(declareVariableStatement, declareVariableStatement.Declarations, declareVariableElement);
				}
			}
			return declareVariableStatement;
		}

		// Token: 0x06000D58 RID: 3416 RVA: 0x000548E4 File Offset: 0x00052AE4
		public DeclareCursorStatement declareCursorStatement()
		{
			DeclareCursorStatement declareCursorStatement = base.FragmentFactory.CreateFragment<DeclareCursorStatement>();
			List<CursorOption> list = new List<CursorOption>();
			Identifier identifier = this.identifier();
			this.cursorOpts(true, list);
			CursorDefinition cursorDefinition = this.cursorDefinitionOptions(list);
			if (this.inputState.guessing == 0)
			{
				declareCursorStatement.Name = identifier;
				declareCursorStatement.CursorDefinition = cursorDefinition;
			}
			return declareCursorStatement;
		}

		// Token: 0x06000D59 RID: 3417 RVA: 0x00054938 File Offset: 0x00052B38
		public PredicateSetStatement predicateSetStatement()
		{
			PredicateSetStatement predicateSetStatement = base.FragmentFactory.CreateFragment<PredicateSetStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				SetOptions setOptions = PredicateSetOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
				predicateSetStatement.Options = setOptions;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					SetOptions setOptions = PredicateSetOptionsHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql110);
					predicateSetStatement.Options |= setOptions;
				}
			}
			this.setOnOff(predicateSetStatement);
			if (this.inputState.guessing == 0 && (predicateSetStatement.Options & SetOptions.QuotedIdentifier) == SetOptions.QuotedIdentifier)
			{
				this._tokenSource.QuotedIdentifier = predicateSetStatement.IsOn;
			}
			return predicateSetStatement;
		}

		// Token: 0x06000D5A RID: 3418 RVA: 0x00054A10 File Offset: 0x00052C10
		public SetVariableStatement setVariableStatement()
		{
			SetVariableStatement setVariableStatement = base.FragmentFactory.CreateFragment<SetVariableStatement>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				setVariableStatement.Variable = variableReference;
			}
			int num = this.LA(1);
			if (num != 196)
			{
				switch (num)
				{
				case 200:
				case 203:
				{
					int num2 = this.LA(1);
					if (num2 != 200)
					{
						if (num2 != 203)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(203);
						if (this.inputState.guessing == 0)
						{
							setVariableStatement.SeparatorType = SeparatorType.DoubleColon;
						}
					}
					else
					{
						this.match(200);
						if (this.inputState.guessing == 0)
						{
							setVariableStatement.SeparatorType = SeparatorType.Dot;
						}
					}
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						setVariableStatement.Identifier = identifier;
					}
					int num3 = this.LA(1);
					if (num3 != 191)
					{
						if (num3 != 196)
						{
							switch (num3)
							{
							case 206:
							case 212:
							case 213:
							case 214:
							case 215:
							case 216:
							case 217:
							case 218:
								goto IL_01AE;
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IL_01AE:
						AssignmentKind assignmentKind = this.assignmentWithOptOp();
						ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
						if (this.inputState.guessing == 0)
						{
							setVariableStatement.Expression = scalarExpression;
							setVariableStatement.AssignmentKind = assignmentKind;
							return setVariableStatement;
						}
						return setVariableStatement;
					}
					else
					{
						this.parenthesizedOptExpressionWithDefaultList(setVariableStatement, setVariableStatement.Parameters);
						if (this.inputState.guessing == 0)
						{
							setVariableStatement.FunctionCallExists = true;
							return setVariableStatement;
						}
						return setVariableStatement;
					}
					break;
				}
				case 206:
				case 212:
				case 213:
				case 214:
				case 215:
				case 216:
				case 217:
				case 218:
					goto IL_01F5;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IL_01F5:
			if (TSql110ParserInternal.tokenSet_89_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_39_.member(this.LA(2)))
			{
				AssignmentKind assignmentKind = this.assignmentWithOptOp();
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					setVariableStatement.Expression = scalarExpression;
					setVariableStatement.AssignmentKind = assignmentKind;
				}
			}
			else
			{
				if (this.LA(1) != 206 || this.LA(2) != 42)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				CursorDefinition cursorDefinition = this.cursorDefinition();
				if (this.inputState.guessing == 0)
				{
					setVariableStatement.CursorDefinition = cursorDefinition;
				}
			}
			return setVariableStatement;
		}

		// Token: 0x06000D5B RID: 3419 RVA: 0x00054CD0 File Offset: 0x00052ED0
		public SetStatisticsStatement setStatisticsStatement()
		{
			SetStatisticsStatement setStatisticsStatement = base.FragmentFactory.CreateFragment<SetStatisticsStatement>();
			this.match(146);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				setStatisticsStatement.Options = SetStatisticsOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					setStatisticsStatement.Options |= SetStatisticsOptionsHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql110);
				}
			}
			this.setOnOff(setStatisticsStatement);
			return setStatisticsStatement;
		}

		// Token: 0x06000D5C RID: 3420 RVA: 0x00054D88 File Offset: 0x00052F88
		public SetRowCountStatement setRowcountStatement()
		{
			SetRowCountStatement setRowCountStatement = base.FragmentFactory.CreateFragment<SetRowCountStatement>();
			this.match(135);
			ValueExpression valueExpression = this.integerOrVariable();
			if (this.inputState.guessing == 0)
			{
				setRowCountStatement.NumberRows = valueExpression;
			}
			return setRowCountStatement;
		}

		// Token: 0x06000D5D RID: 3421 RVA: 0x00054DC8 File Offset: 0x00052FC8
		public SetOffsetsStatement setOffsetsStatement()
		{
			SetOffsetsStatement setOffsetsStatement = base.FragmentFactory.CreateFragment<SetOffsetsStatement>();
			this.match(104);
			SetOffsets setOffsets = this.offsetItem();
			if (this.inputState.guessing == 0)
			{
				setOffsetsStatement.Options = setOffsets;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				setOffsets = this.offsetItem();
				if (this.inputState.guessing == 0)
				{
					setOffsetsStatement.Options |= setOffsets;
				}
			}
			this.setOnOff(setOffsetsStatement);
			return setOffsetsStatement;
		}

		// Token: 0x06000D5E RID: 3422 RVA: 0x00054E4C File Offset: 0x0005304C
		public SetCommandStatement setCommandStatement()
		{
			SetCommandStatement setCommandStatement = base.FragmentFactory.CreateFragment<SetCommandStatement>();
			SetCommand setCommand = this.setCommand();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetCommand>(setCommandStatement, setCommandStatement.Commands, setCommand);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				setCommand = this.setCommand();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetCommand>(setCommandStatement, setCommandStatement.Commands, setCommand);
				}
			}
			return setCommandStatement;
		}

		// Token: 0x06000D5F RID: 3423 RVA: 0x00054EC4 File Offset: 0x000530C4
		public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement()
		{
			SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement = base.FragmentFactory.CreateFragment<SetTransactionIsolationLevelStatement>();
			switch (this.LA(1))
			{
			case 153:
				this.match(153);
				break;
			case 154:
				this.match(154);
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ISOLATION");
				TSql80ParserBaseInternal.Match(token2, "LEVEL");
			}
			if (this.LA(1) == 124)
			{
				this.match(124);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token3, "COMMITTED"))
					{
						setTransactionIsolationLevelStatement.Level = IsolationLevel.ReadCommitted;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token3, "UNCOMMITTED");
						setTransactionIsolationLevelStatement.Level = IsolationLevel.ReadUncommitted;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(setTransactionIsolationLevelStatement, token3);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 124)
			{
				IToken token4 = this.LT(1);
				this.match(232);
				IToken token5 = this.LT(1);
				this.match(124);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "REPEATABLE");
					setTransactionIsolationLevelStatement.Level = IsolationLevel.RepeatableRead;
					TSql80ParserBaseInternal.UpdateTokenInfo(setTransactionIsolationLevelStatement, token5);
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token6 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token6, "SNAPSHOT"))
					{
						setTransactionIsolationLevelStatement.Level = IsolationLevel.Snapshot;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token6, "SERIALIZABLE");
						setTransactionIsolationLevelStatement.Level = IsolationLevel.Serializable;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(setTransactionIsolationLevelStatement, token6);
				}
			}
			return setTransactionIsolationLevelStatement;
		}

		// Token: 0x06000D60 RID: 3424 RVA: 0x000550E4 File Offset: 0x000532E4
		public SetTextSizeStatement setTextSizeStatement()
		{
			SetTextSizeStatement setTextSizeStatement = base.FragmentFactory.CreateFragment<SetTextSizeStatement>();
			this.match(149);
			ScalarExpression scalarExpression = this.signedInteger();
			if (this.inputState.guessing == 0)
			{
				setTextSizeStatement.TextSize = scalarExpression;
			}
			return setTextSizeStatement;
		}

		// Token: 0x06000D61 RID: 3425 RVA: 0x00055124 File Offset: 0x00053324
		public SetIdentityInsertStatement setIdentityInsertStatement()
		{
			SetIdentityInsertStatement setIdentityInsertStatement = base.FragmentFactory.CreateFragment<SetIdentityInsertStatement>();
			this.match(80);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				setIdentityInsertStatement.Table = schemaObjectName;
			}
			this.setOnOff(setIdentityInsertStatement);
			return setIdentityInsertStatement;
		}

		// Token: 0x06000D62 RID: 3426 RVA: 0x00055168 File Offset: 0x00053368
		public SetErrorLevelStatement setErrorLevelStatement()
		{
			SetErrorLevelStatement setErrorLevelStatement = base.FragmentFactory.CreateFragment<SetErrorLevelStatement>();
			this.match(57);
			ScalarExpression scalarExpression = this.signedInteger();
			if (this.inputState.guessing == 0)
			{
				setErrorLevelStatement.Level = scalarExpression;
			}
			return setErrorLevelStatement;
		}

		// Token: 0x06000D63 RID: 3427 RVA: 0x000551A8 File Offset: 0x000533A8
		public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList<ScalarExpression> expressions)
		{
			this.match(191);
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_01AD;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_01AD;
						}
					}
				}
				else if (num <= 81)
				{
					if (num != 47 && num != 81)
					{
						goto IL_01AD;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_01AD;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_01AD;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_01AD;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 187:
					case 191:
					case 193:
						break;
					case 188:
					case 189:
					case 190:
						goto IL_01AD;
					case 192:
						goto IL_01C0;
					default:
						goto IL_01AD;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_01AD;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_01AD;
					default:
						goto IL_01AD;
					}
					break;
				}
			}
			this.expressionWithDefaultList(vParent, expressions);
			goto IL_01C0;
			IL_01AD:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_01C0:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000D64 RID: 3428 RVA: 0x0005539C File Offset: 0x0005359C
		public AssignmentKind assignmentWithOptOp()
		{
			AssignmentKind assignmentKind = AssignmentKind.Equals;
			int num = this.LA(1);
			if (num != 196)
			{
				switch (num)
				{
				case 206:
					this.match(206);
					if (this.inputState.guessing == 0)
					{
						return AssignmentKind.Equals;
					}
					return assignmentKind;
				case 212:
				case 213:
				case 214:
				case 215:
				case 216:
				case 217:
				case 218:
					goto IL_0070;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IL_0070:
			assignmentKind = this.assignmentWithOp();
			return assignmentKind;
		}

		// Token: 0x06000D65 RID: 3429 RVA: 0x00055438 File Offset: 0x00053638
		public CursorDefinition cursorDefinition()
		{
			List<CursorOption> list = new List<CursorOption>();
			return this.cursorDefinitionOptions(list);
		}

		// Token: 0x06000D66 RID: 3430 RVA: 0x00055454 File Offset: 0x00053654
		public void setOnOff(SetOnOffStatement vParent)
		{
			switch (this.LA(1))
			{
			case 103:
			{
				IToken token = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.IsOn = false;
					return;
				}
				return;
			}
			case 105:
			{
				IToken token2 = this.LT(1);
				this.match(105);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					vParent.IsOn = true;
					return;
				}
				return;
			}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D67 RID: 3431 RVA: 0x000554F0 File Offset: 0x000536F0
		public SetOffsets offsetItem()
		{
			SetOffsets setOffsets = SetOffsets.None;
			int num = this.LA(1);
			if (num <= 113)
			{
				if (num <= 61)
				{
					if (num != 29)
					{
						switch (num)
						{
						case 60:
						case 61:
							switch (this.LA(1))
							{
							case 60:
								this.match(60);
								break;
							case 61:
								this.match(61);
								break;
							default:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							if (this.inputState.guessing == 0)
							{
								return SetOffsets.Execute;
							}
							return setOffsets;
						}
					}
					else
					{
						this.match(29);
						if (this.inputState.guessing == 0)
						{
							return SetOffsets.Compute;
						}
						return setOffsets;
					}
				}
				else if (num != 71)
				{
					if (num == 113)
					{
						this.match(113);
						if (this.inputState.guessing == 0)
						{
							return SetOffsets.Order;
						}
						return setOffsets;
					}
				}
				else
				{
					this.match(71);
					if (this.inputState.guessing == 0)
					{
						return SetOffsets.From;
					}
					return setOffsets;
				}
			}
			else if (num <= 140)
			{
				switch (num)
				{
				case 120:
				case 121:
					switch (this.LA(1))
					{
					case 120:
						this.match(120);
						break;
					case 121:
						this.match(121);
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.inputState.guessing == 0)
					{
						return SetOffsets.Procedure;
					}
					return setOffsets;
				default:
					if (num == 140)
					{
						this.match(140);
						if (this.inputState.guessing == 0)
						{
							return SetOffsets.Select;
						}
						return setOffsets;
					}
					break;
				}
			}
			else if (num != 148)
			{
				if (num == 232)
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing != 0)
					{
						return setOffsets;
					}
					if (TSql80ParserBaseInternal.TryMatch(token, "STATEMENT"))
					{
						return SetOffsets.Statement;
					}
					TSql80ParserBaseInternal.Match(token, "PARAM");
					return SetOffsets.Param;
				}
			}
			else
			{
				this.match(148);
				if (this.inputState.guessing == 0)
				{
					return SetOffsets.Table;
				}
				return setOffsets;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D68 RID: 3432 RVA: 0x00055734 File Offset: 0x00053934
		public SetCommand setCommand()
		{
			SetCommand setCommand = null;
			if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 103 || this.LA(2) == 232) && base.NextTokenMatches("FIPS_FLAGGER"))
			{
				this.LT(1);
				this.match(232);
				setCommand = this.fipsFlaggerLevel();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_60_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				ScalarExpression scalarExpression = this.possibleNegativeConstantOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					GeneralSetCommand generalSetCommand = base.FragmentFactory.CreateFragment<GeneralSetCommand>();
					generalSetCommand.CommandType = GeneralSetCommandTypeHelper.Instance.ParseOption(token);
					generalSetCommand.Parameter = scalarExpression;
					setCommand = generalSetCommand;
				}
			}
			return setCommand;
		}

		// Token: 0x06000D69 RID: 3433 RVA: 0x00055828 File Offset: 0x00053A28
		public SetFipsFlaggerCommand fipsFlaggerLevel()
		{
			SetFipsFlaggerCommand setFipsFlaggerCommand = base.FragmentFactory.CreateFragment<SetFipsFlaggerCommand>();
			int num = this.LA(1);
			if (num != 72)
			{
				if (num != 103)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						setFipsFlaggerCommand.ComplianceLevel = FipsComplianceLevelHelper.Instance.ParseOption(token);
						TSql80ParserBaseInternal.UpdateTokenInfo(setFipsFlaggerCommand, token);
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(103);
					if (this.inputState.guessing == 0)
					{
						setFipsFlaggerCommand.ComplianceLevel = FipsComplianceLevel.Off;
						TSql80ParserBaseInternal.UpdateTokenInfo(setFipsFlaggerCommand, token2);
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(72);
				if (this.inputState.guessing == 0)
				{
					setFipsFlaggerCommand.ComplianceLevel = FipsComplianceLevel.Full;
					TSql80ParserBaseInternal.UpdateTokenInfo(setFipsFlaggerCommand, token3);
				}
			}
			return setFipsFlaggerCommand;
		}

		// Token: 0x06000D6A RID: 3434 RVA: 0x00055914 File Offset: 0x00053B14
		public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement)
		{
			int num = this.LA(1);
			if (num <= 47)
			{
				if (num != 21 && num != 30 && num != 47)
				{
					goto IL_0095;
				}
			}
			else if (num <= 118)
			{
				if (num != 68 && num != 118)
				{
					goto IL_0095;
				}
			}
			else if (num != 159)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					ColumnDefinition columnDefinition = this.columnDefinition(statementType, vStatement);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnDefinition>(vParent, vParent.ColumnDefinitions, columnDefinition);
						return;
					}
					return;
				}
				default:
					goto IL_0095;
				}
			}
			ConstraintDefinition constraintDefinition = this.tableConstraint(statementType, vStatement);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ConstraintDefinition>(vParent, vParent.TableConstraints, constraintDefinition);
				return;
			}
			return;
			IL_0095:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D6B RID: 3435 RVA: 0x000559CC File Offset: 0x00053BCC
		public void cursorOpts(bool oldSyntax, IList<CursorOption> vOptions)
		{
			while (this.LA(1) == 232)
			{
				CursorOption cursorOption = this.cursorOption();
				if (this.inputState.guessing == 0)
				{
					if (oldSyntax)
					{
						if (cursorOption.OptionKind != CursorOptionKind.Insensitive && cursorOption.OptionKind != CursorOptionKind.Scroll)
						{
							TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(cursorOption);
						}
					}
					else if (cursorOption.OptionKind == CursorOptionKind.Insensitive)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(cursorOption);
					}
					vOptions.Add(cursorOption);
				}
			}
		}

		// Token: 0x06000D6C RID: 3436 RVA: 0x00055A30 File Offset: 0x00053C30
		public CursorDefinition cursorDefinitionOptions(IList<CursorOption> vOptions)
		{
			CursorDefinition cursorDefinition = base.FragmentFactory.CreateFragment<CursorDefinition>();
			this.match(42);
			this.cursorOpts(false, vOptions);
			this.match(67);
			SelectStatement selectStatement = this.selectStatement(SubDmlFlags.SelectNotForInsert);
			if (this.inputState.guessing == 0)
			{
				cursorDefinition.Select = selectStatement;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CursorOption>(cursorDefinition, cursorDefinition.Options, vOptions);
			}
			return cursorDefinition;
		}

		// Token: 0x06000D6D RID: 3437 RVA: 0x00055A8C File Offset: 0x00053C8C
		public SelectStatement selectStatement(SubDmlFlags subDmlFlags)
		{
			WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = null;
			int num = this.LA(1);
			if (num != 140)
			{
				if (num != 171)
				{
					if (num != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
				}
			}
			SelectStatement selectStatement = this.select(subDmlFlags);
			if (this.inputState.guessing == 0)
			{
				selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
			}
			return selectStatement;
		}

		// Token: 0x06000D6E RID: 3438 RVA: 0x00055AF8 File Offset: 0x00053CF8
		public CursorOption cursorOption()
		{
			CursorOption cursorOption = base.FragmentFactory.CreateFragment<CursorOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				cursorOption.OptionKind = CursorOptionsHelper.Instance.ParseOption(token);
			}
			return cursorOption;
		}

		// Token: 0x06000D6F RID: 3439 RVA: 0x00055B48 File Offset: 0x00053D48
		public CreateIndexStatement createRelationalIndexStatement(IToken tUnique, bool? isClustered)
		{
			CreateIndexStatement createIndexStatement = base.FragmentFactory.CreateFragment<CreateIndexStatement>();
			createIndexStatement.Unique = tUnique != null;
			createIndexStatement.Clustered = isClustered;
			this.match(84);
			Identifier identifier = this.identifier();
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				createIndexStatement.Name = identifier;
				createIndexStatement.OnName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createIndexStatement);
			}
			this.match(191);
			ColumnWithSortOrder columnWithSortOrder = this.columnWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(createIndexStatement, createIndexStatement.Columns, columnWithSortOrder);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnWithSortOrder = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(createIndexStatement, createIndexStatement.Columns, columnWithSortOrder);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createIndexStatement, token);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("INCLUDE"))
			{
				this.LT(1);
				this.match(232);
				this.identifierColumnList(createIndexStatement, createIndexStatement.IncludeColumns);
			}
			else if (!TSql110ParserInternal.tokenSet_90_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0443;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0443;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0443;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								goto IL_0443;
							default:
								if (num == 28)
								{
									goto IL_0443;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						goto IL_0443;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_0443;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								goto IL_0443;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0443;
				}
			}
			else if (num <= 172)
			{
				if (num <= 106)
				{
					if (num == 95)
					{
						goto IL_0443;
					}
					switch (num)
					{
					case 105:
					case 106:
						goto IL_0443;
					}
				}
				else
				{
					if (num == 119)
					{
						goto IL_0443;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0443;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_0443;
						case 169:
						{
							BooleanExpression booleanExpression = this.filterClause(createIndexStatement.Clustered ?? false);
							if (this.inputState.guessing == 0)
							{
								createIndexStatement.FilterPredicate = booleanExpression;
								goto IL_0443;
							}
							goto IL_0443;
						}
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					goto IL_0443;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0443;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0443;
				default:
					if (num == 232)
					{
						goto IL_0443;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0443:
			if (this.LA(1) == 171 && (this.LA(2) == 66 || this.LA(2) == 191 || this.LA(2) == 232))
			{
				this.match(171);
				int num2 = this.LA(1);
				if (num2 != 66)
				{
					if (num2 == 191)
					{
						this.indexOptionList(IndexAffectingStatement.CreateIndex, createIndexStatement.IndexOptions, createIndexStatement);
						goto IL_0520;
					}
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				this.indexLegacyOptionList(createIndexStatement);
				if (this.inputState.guessing == 0)
				{
					createIndexStatement.Translated80SyntaxTo90 = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_44_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IL_0520:
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 28)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							goto IL_07CB;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_07CB;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_07CB;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								goto IL_07CB;
							default:
								if (num3 == 28)
								{
									goto IL_07CB;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 75)
				{
					switch (num3)
					{
					case 33:
					case 35:
						goto IL_07CB;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_07CB;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num3)
							{
							case 74:
							case 75:
								goto IL_07CB;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					goto IL_07CB;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 119)
				{
					if (num3 == 95)
					{
						goto IL_07CB;
					}
					switch (num3)
					{
					case 105:
					{
						this.match(105);
						FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
						if (this.inputState.guessing == 0)
						{
							createIndexStatement.OnFileGroupOrPartitionScheme = fileGroupOrPartitionScheme;
							goto IL_07CB;
						}
						goto IL_07CB;
					}
					case 106:
						goto IL_07CB;
					default:
						if (num3 == 119)
						{
							goto IL_07CB;
						}
						break;
					}
				}
				else
				{
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_07CB;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_07CB;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num3)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_07CB;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176 || num3 == 182 || num3 == 191)
				{
					goto IL_07CB;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_07CB;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_07CB;
				default:
					if (num3 == 232)
					{
						goto IL_07CB;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_07CB:
			this.fileStreamOnOpt(createIndexStatement);
			return createIndexStatement;
		}

		// Token: 0x06000D70 RID: 3440 RVA: 0x00056328 File Offset: 0x00054528
		public void indexLegacyOptionList(CreateIndexStatement vParent)
		{
			IndexOption indexOption = this.indexLegacyOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.VerifyAllowedIndexOption(IndexAffectingStatement.CreateIndex, indexOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, indexOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				indexOption = this.indexLegacyOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.VerifyAllowedIndexOption(IndexAffectingStatement.CreateIndex, indexOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, indexOption);
				}
			}
		}

		// Token: 0x06000D71 RID: 3441 RVA: 0x000563A0 File Offset: 0x000545A0
		public void fileStreamOnOpt(IFileStreamSpecifier vParent)
		{
			if (this.LA(1) == 232 && this.LA(2) >= 230 && this.LA(2) <= 233)
			{
				this.fileStreamOn(vParent);
				return;
			}
			if (TSql110ParserInternal.tokenSet_91_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D72 RID: 3442 RVA: 0x00056418 File Offset: 0x00054618
		public BooleanExpression filterExpression()
		{
			BooleanExpression booleanExpression = this.filterExpressionPrimary();
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						switch (num)
						{
						case 1:
						case 4:
						case 6:
							return booleanExpression;
						case 2:
						case 3:
						case 5:
							break;
						case 7:
						{
							this.match(7);
							BooleanExpression booleanExpression2 = this.filterExpression();
							if (this.inputState.guessing == 0)
							{
								BooleanBinaryExpression booleanBinaryExpression = base.FragmentFactory.CreateFragment<BooleanBinaryExpression>();
								booleanBinaryExpression.BinaryExpressionType = BooleanBinaryExpressionType.And;
								booleanBinaryExpression.SecondExpression = booleanExpression2;
								booleanBinaryExpression.FirstExpression = booleanExpression;
								return booleanBinaryExpression;
							}
							return booleanExpression;
						}
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return booleanExpression;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return booleanExpression;
						default:
							if (num == 28)
							{
								return booleanExpression;
							}
							switch (num)
							{
							case 33:
							case 35:
								return booleanExpression;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return booleanExpression;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return booleanExpression;
						default:
							if (num == 82)
							{
								return booleanExpression;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return booleanExpression;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					switch (num)
					{
					case 105:
					case 106:
						return booleanExpression;
					default:
						if (num == 119)
						{
							return booleanExpression;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return booleanExpression;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return booleanExpression;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return booleanExpression;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 192)
			{
				if (num == 176 || num == 182)
				{
					return booleanExpression;
				}
				switch (num)
				{
				case 191:
				case 192:
					return booleanExpression;
				}
			}
			else
			{
				if (num == 204)
				{
					return booleanExpression;
				}
				switch (num)
				{
				case 219:
				case 220:
					return booleanExpression;
				default:
					if (num == 232)
					{
						return booleanExpression;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D73 RID: 3443 RVA: 0x000566F4 File Offset: 0x000548F4
		public BooleanExpression filterExpressionPrimary()
		{
			int num = this.LA(1);
			if (num <= 191)
			{
				if (num != 81 && num != 136)
				{
					if (num != 191)
					{
						goto IL_00D6;
					}
					return this.filterParenthesisExpression();
				}
			}
			else if (num != 200 && num != 227)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_00D6;
				}
			}
			ColumnReferenceExpression columnReferenceExpression = this.filterColumn();
			int num2 = this.LA(1);
			if (num2 > 89)
			{
				if (num2 != 188)
				{
					switch (num2)
					{
					case 205:
					case 206:
					case 208:
						break;
					case 207:
						goto IL_00BA;
					default:
						goto IL_00BA;
					}
				}
				return this.filterComparisonPredicate(columnReferenceExpression);
			}
			if (num2 == 83)
			{
				return this.filterInPredicate(columnReferenceExpression);
			}
			if (num2 == 89)
			{
				return this.filterNullPredicate(columnReferenceExpression);
			}
			IL_00BA:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00D6:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D74 RID: 3444 RVA: 0x000567EC File Offset: 0x000549EC
		public ColumnReferenceExpression filterColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			int num = this.LA(1);
			if (num > 136)
			{
				if (num != 200)
				{
					if (num == 227)
					{
						goto IL_0057;
					}
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_00ED;
					}
				}
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.inputState.guessing == 0)
				{
					columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				}
				int num2 = this.LA(1);
				if (num2 <= 89)
				{
					if (num2 == 83 || num2 == 89)
					{
						goto IL_0100;
					}
				}
				else
				{
					if (num2 == 188)
					{
						goto IL_0100;
					}
					if (num2 == 200)
					{
						this.match(200);
						this.specialColumn(columnReferenceExpression);
						goto IL_0100;
					}
					switch (num2)
					{
					case 205:
					case 206:
					case 208:
						goto IL_0100;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 81 && num != 136)
			{
				goto IL_00ED;
			}
			IL_0057:
			this.specialColumn(columnReferenceExpression);
			goto IL_0100;
			IL_00ED:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0100:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06000D75 RID: 3445 RVA: 0x00056910 File Offset: 0x00054B10
		public BooleanIsNullExpression filterNullPredicate(ScalarExpression vColumn)
		{
			return this.nullPredicate(vColumn);
		}

		// Token: 0x06000D76 RID: 3446 RVA: 0x00056928 File Offset: 0x00054B28
		public BooleanComparisonExpression filterComparisonPredicate(ScalarExpression vColumn)
		{
			BooleanComparisonExpression booleanComparisonExpression = base.FragmentFactory.CreateFragment<BooleanComparisonExpression>();
			BooleanComparisonType booleanComparisonType = this.comparisonOperator();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql100ParserBaseInternal.CheckComparisonOperandForIndexFilter(scalarExpression, true);
				booleanComparisonExpression.FirstExpression = vColumn;
				booleanComparisonExpression.SecondExpression = scalarExpression;
				booleanComparisonExpression.ComparisonType = booleanComparisonType;
			}
			return booleanComparisonExpression;
		}

		// Token: 0x06000D77 RID: 3447 RVA: 0x0005697C File Offset: 0x00054B7C
		public InPredicate filterInPredicate(ScalarExpression vColumn)
		{
			InPredicate inPredicate = base.FragmentFactory.CreateFragment<InPredicate>();
			this.match(83);
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				inPredicate.Expression = vColumn;
				TSql100ParserBaseInternal.CheckComparisonOperandForIndexFilter(scalarExpression, true);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(inPredicate, inPredicate.Values, scalarExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql100ParserBaseInternal.CheckComparisonOperandForIndexFilter(scalarExpression, true);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(inPredicate, inPredicate.Values, scalarExpression);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(inPredicate, token);
			}
			return inPredicate;
		}

		// Token: 0x06000D78 RID: 3448 RVA: 0x00056A48 File Offset: 0x00054C48
		public BooleanParenthesisExpression filterParenthesisExpression()
		{
			BooleanParenthesisExpression booleanParenthesisExpression = base.FragmentFactory.CreateFragment<BooleanParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			BooleanExpression booleanExpression = this.filterExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token);
				booleanParenthesisExpression.Expression = booleanExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token2);
			}
			return booleanParenthesisExpression;
		}

		// Token: 0x06000D79 RID: 3449 RVA: 0x00056AB8 File Offset: 0x00054CB8
		public void specialColumn(ColumnReferenceExpression vParent)
		{
			int num = this.LA(1);
			if (num != 81)
			{
				if (num != 136)
				{
					if (num != 227)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.systemColumn(vParent);
					return;
				}
				else
				{
					IToken token = this.LT(1);
					this.match(136);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
						vParent.ColumnType = ColumnType.RowGuidCol;
						return;
					}
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(81);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					vParent.ColumnType = ColumnType.IdentityCol;
					return;
				}
			}
		}

		// Token: 0x06000D7A RID: 3450 RVA: 0x00056B60 File Offset: 0x00054D60
		public BooleanIsNullExpression nullPredicate(ScalarExpression vExpressionFirst)
		{
			BooleanIsNullExpression booleanIsNullExpression = base.FragmentFactory.CreateFragment<BooleanIsNullExpression>();
			this.match(89);
			bool flag = this.nullNotNull(booleanIsNullExpression);
			if (this.inputState.guessing == 0)
			{
				booleanIsNullExpression.Expression = vExpressionFirst;
				booleanIsNullExpression.IsNot = !flag;
			}
			return booleanIsNullExpression;
		}

		// Token: 0x06000D7B RID: 3451 RVA: 0x00056BA8 File Offset: 0x00054DA8
		public IndexOption indexLegacyOption()
		{
			IndexOption indexOption = null;
			int num = this.LA(1);
			if (num != 66)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
					indexOption = indexStateOption;
					indexStateOption.OptionKind = TSql80ParserBaseInternal.ParseIndexLegacyWithOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
					indexStateOption.OptionState = OptionState.On;
				}
			}
			else
			{
				indexOption = this.fillFactorOption();
			}
			return indexOption;
		}

		// Token: 0x06000D7C RID: 3452 RVA: 0x00056C38 File Offset: 0x00054E38
		public IndexExpressionOption fillFactorOption()
		{
			IndexExpressionOption indexExpressionOption = base.FragmentFactory.CreateFragment<IndexExpressionOption>();
			IToken token = this.LT(1);
			this.match(66);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckFillFactorRange(literal);
				indexExpressionOption.OptionKind = IndexOptionKind.FillFactor;
				indexExpressionOption.Expression = literal;
				TSql80ParserBaseInternal.UpdateTokenInfo(indexExpressionOption, token);
			}
			return indexExpressionOption;
		}

		// Token: 0x06000D7D RID: 3453 RVA: 0x00056CA0 File Offset: 0x00054EA0
		public IndexOption indexOption()
		{
			IndexOption indexOption;
			if (this.LA(1) == 66)
			{
				indexOption = this.fillFactorOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP"))
			{
				indexOption = this.maxDopOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATA_COMPRESSION"))
			{
				indexOption = this.dataCompressionOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				indexOption = this.indexStateOption();
			}
			return indexOption;
		}

		// Token: 0x06000D7E RID: 3454 RVA: 0x00056D64 File Offset: 0x00054F64
		public IndexStateOption indexStateOption()
		{
			IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				indexStateOption.OptionKind = IndexOptionHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
				TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
			}
			this.match(206);
			OptionState optionState = this.optionOnOff(indexStateOption);
			if (this.inputState.guessing == 0)
			{
				indexStateOption.OptionState = optionState;
			}
			return indexStateOption;
		}

		// Token: 0x06000D7F RID: 3455 RVA: 0x00056DE0 File Offset: 0x00054FE0
		public XmlNamespaces xmlNamespaces()
		{
			XmlNamespaces xmlNamespaces = base.FragmentFactory.CreateFragment<XmlNamespaces>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XMLNAMESPACES");
			}
			this.match(191);
			XmlNamespacesElement xmlNamespacesElement = this.xmlNamespacesElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlNamespacesElement>(xmlNamespaces, xmlNamespaces.XmlNamespacesElements, xmlNamespacesElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				xmlNamespacesElement = this.xmlNamespacesElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlNamespacesElement>(xmlNamespaces, xmlNamespaces.XmlNamespacesElements, xmlNamespacesElement);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(xmlNamespaces, token2);
			}
			return xmlNamespaces;
		}

		// Token: 0x06000D80 RID: 3456 RVA: 0x00056EB8 File Offset: 0x000550B8
		public void ctContext(WithCtesAndXmlNamespaces vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.LT(1);
			this.match(191);
			ValueExpression valueExpression = this.binaryOrVariable();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING_CONTEXT");
				vParent.ChangeTrackingContext = valueExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000D81 RID: 3457 RVA: 0x00056F30 File Offset: 0x00055130
		public CommonTableExpression commonTableExpression()
		{
			CommonTableExpression commonTableExpression = base.FragmentFactory.CreateFragment<CommonTableExpression>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				commonTableExpression.ExpressionName = identifier;
			}
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.columnNameList(commonTableExpression, commonTableExpression.Columns);
			}
			this.match(9);
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression(SubDmlFlags.SelectNotForInsert);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				commonTableExpression.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(commonTableExpression, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(commonTableExpression, token2);
			}
			return commonTableExpression;
		}

		// Token: 0x06000D82 RID: 3458 RVA: 0x00057000 File Offset: 0x00055200
		public XmlNamespacesElement xmlNamespacesElement()
		{
			int num = this.LA(1);
			XmlNamespacesElement xmlNamespacesElement;
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
					xmlNamespacesElement = this.xmlNamespacesAliasElement();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				xmlNamespacesElement = this.xmlNamespacesDefaultElement();
			}
			return xmlNamespacesElement;
		}

		// Token: 0x06000D83 RID: 3459 RVA: 0x00057058 File Offset: 0x00055258
		public XmlNamespacesDefaultElement xmlNamespacesDefaultElement()
		{
			XmlNamespacesDefaultElement xmlNamespacesDefaultElement = base.FragmentFactory.CreateFragment<XmlNamespacesDefaultElement>();
			IToken token = this.LT(1);
			this.match(47);
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(xmlNamespacesDefaultElement, token);
				xmlNamespacesDefaultElement.String = stringLiteral;
			}
			return xmlNamespacesDefaultElement;
		}

		// Token: 0x06000D84 RID: 3460 RVA: 0x000570A8 File Offset: 0x000552A8
		public XmlNamespacesAliasElement xmlNamespacesAliasElement()
		{
			XmlNamespacesAliasElement xmlNamespacesAliasElement = base.FragmentFactory.CreateFragment<XmlNamespacesAliasElement>();
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				xmlNamespacesAliasElement.String = stringLiteral;
			}
			this.match(9);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				xmlNamespacesAliasElement.Identifier = identifier;
			}
			return xmlNamespacesAliasElement;
		}

		// Token: 0x06000D85 RID: 3461 RVA: 0x00057100 File Offset: 0x00055300
		public QueryExpression queryExpression(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement)
		{
			BinaryQueryExpression binaryQueryExpression = null;
			QueryExpression queryExpression = this.queryExpressionUnit(subDmlFlags, vSelectStatement);
			while (this.LA(1) == 59 || this.LA(1) == 87 || this.LA(1) == 158)
			{
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression = base.FragmentFactory.CreateFragment<BinaryQueryExpression>();
					binaryQueryExpression.FirstQueryExpression = queryExpression;
				}
				int num = this.LA(1);
				if (num != 59)
				{
					if (num != 87)
					{
						if (num != 158)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(158);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Union;
						}
					}
					else
					{
						this.match(87);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Intersect;
						}
					}
				}
				else
				{
					this.match(59);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Except;
					}
				}
				int num2 = this.LA(1);
				if (num2 != 5)
				{
					if (num2 != 140 && num2 != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(5);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.All = true;
					}
				}
				queryExpression = this.queryExpressionUnit(subDmlFlags, null);
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression.SecondQueryExpression = queryExpression;
					queryExpression = binaryQueryExpression;
				}
			}
			return queryExpression;
		}

		// Token: 0x06000D86 RID: 3462 RVA: 0x00057264 File Offset: 0x00055464
		public OrderByClause orderByClause()
		{
			OrderByClause orderByClause = base.FragmentFactory.CreateFragment<OrderByClause>();
			IToken token = this.LT(1);
			this.match(113);
			this.match(18);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(orderByClause, token);
			}
			ExpressionWithSortOrder expressionWithSortOrder = this.expressionWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExpressionWithSortOrder>(orderByClause, orderByClause.OrderByElements, expressionWithSortOrder);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				expressionWithSortOrder = this.expressionWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExpressionWithSortOrder>(orderByClause, orderByClause.OrderByElements, expressionWithSortOrder);
				}
			}
			return orderByClause;
		}

		// Token: 0x06000D87 RID: 3463 RVA: 0x0005730C File Offset: 0x0005550C
		public OffsetClause offsetClause()
		{
			OffsetClause offsetClause = base.FragmentFactory.CreateFragment<OffsetClause>();
			IToken token = this.LT(1);
			this.match(232);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OFFSET");
				TSql80ParserBaseInternal.UpdateTokenInfo(offsetClause, token);
				offsetClause.OffsetExpression = scalarExpression;
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "ROW", "ROWS");
				TSql80ParserBaseInternal.UpdateTokenInfo(offsetClause, token2);
			}
			if (this.LA(1) == 64 && this.LA(2) == 232)
			{
				IToken token3 = this.LT(1);
				this.match(64);
				IToken token4 = this.LT(1);
				this.match(232);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(offsetClause, token3);
					TSql80ParserBaseInternal.Match(token4, "FIRST", "NEXT");
					TSql80ParserBaseInternal.UpdateTokenInfo(offsetClause, token4);
					offsetClause.FetchExpression = scalarExpression;
				}
				IToken token5 = this.LT(1);
				this.match(232);
				IToken token6 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token5, "ROW", "ROWS");
					TSql80ParserBaseInternal.Match(token6, "ONLY");
					TSql80ParserBaseInternal.UpdateTokenInfo(offsetClause, token6);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_92_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return offsetClause;
		}

		// Token: 0x06000D88 RID: 3464 RVA: 0x000574C8 File Offset: 0x000556C8
		public ForClause forClause()
		{
			ForClause forClause = null;
			IToken token = this.LT(1);
			this.match(67);
			int num = this.LA(1);
			if (num <= 124)
			{
				if (num != 16)
				{
					if (num == 124)
					{
						this.match(124);
						IToken token2 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "ONLY");
							forClause = base.FragmentFactory.CreateFragment<ReadOnlyForClause>();
							TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token2);
							return forClause;
						}
						return forClause;
					}
				}
				else
				{
					forClause = this.browseForClause();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
						return forClause;
					}
					return forClause;
				}
			}
			else if (num != 160)
			{
				if (num == 232)
				{
					forClause = this.xmlForClause();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
						return forClause;
					}
					return forClause;
				}
			}
			else
			{
				forClause = this.updateForClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
					return forClause;
				}
				return forClause;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D89 RID: 3465 RVA: 0x000575D8 File Offset: 0x000557D8
		public void optimizerHints(TSqlFragment vParent, IList<OptimizerHint> hintsCollection)
		{
			IToken token = this.LT(1);
			this.match(111);
			this.match(191);
			OptimizerHint optimizerHint = this.hint();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<OptimizerHint>(vParent, hintsCollection, optimizerHint);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				optimizerHint = this.hint();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<OptimizerHint>(vParent, hintsCollection, optimizerHint);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000D8A RID: 3466 RVA: 0x00057688 File Offset: 0x00055888
		public TableReferenceWithAliasAndColumns derivedTable(SubDmlFlags subDmlFlags)
		{
			TableReferenceWithAliasAndColumns tableReferenceWithAliasAndColumns;
			if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 191))
			{
				tableReferenceWithAliasAndColumns = this.queryDerivedTable(subDmlFlags);
			}
			else
			{
				if (this.LA(1) != 191 || this.LA(2) != 164)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReferenceWithAliasAndColumns = this.inlinedDerivedTable();
			}
			this.simpleTableReferenceAlias(tableReferenceWithAliasAndColumns);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(tableReferenceWithAliasAndColumns, tableReferenceWithAliasAndColumns.Columns);
			}
			else if (!TSql110ParserInternal.tokenSet_93_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return tableReferenceWithAliasAndColumns;
		}

		// Token: 0x06000D8B RID: 3467 RVA: 0x0005777C File Offset: 0x0005597C
		public QueryDerivedTable queryDerivedTable(SubDmlFlags subDmlFlags)
		{
			QueryDerivedTable queryDerivedTable = base.FragmentFactory.CreateFragment<QueryDerivedTable>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression(subDmlFlags);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				queryDerivedTable.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(queryDerivedTable, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(queryDerivedTable, token2);
			}
			return queryDerivedTable;
		}

		// Token: 0x06000D8C RID: 3468 RVA: 0x000577EC File Offset: 0x000559EC
		public InlineDerivedTable inlinedDerivedTable()
		{
			InlineDerivedTable inlineDerivedTable = base.FragmentFactory.CreateFragment<InlineDerivedTable>();
			IToken token = this.LT(1);
			this.match(191);
			this.match(164);
			RowValue rowValue = this.rowValueExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(inlineDerivedTable, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RowValue>(inlineDerivedTable, inlineDerivedTable.RowValues, rowValue);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				rowValue = this.rowValueExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RowValue>(inlineDerivedTable, inlineDerivedTable.RowValues, rowValue);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(inlineDerivedTable, token2);
			}
			return inlineDerivedTable;
		}

		// Token: 0x06000D8D RID: 3469 RVA: 0x000578B4 File Offset: 0x00055AB4
		public void simpleTableReferenceAlias(TableReferenceWithAlias vParent)
		{
			int num = this.LA(1);
			if (num != 9)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
			}
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				vParent.Alias = identifier;
			}
		}

		// Token: 0x06000D8E RID: 3470 RVA: 0x0005791C File Offset: 0x00055B1C
		public RowValue rowValueExpression()
		{
			RowValue rowValue = base.FragmentFactory.CreateFragment<RowValue>();
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token);
			}
			this.expressionList(rowValue, rowValue.ColumnValues);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token2);
			}
			return rowValue;
		}

		// Token: 0x06000D8F RID: 3471 RVA: 0x00057998 File Offset: 0x00055B98
		public ScalarSubquery subquery(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ScalarSubquery scalarSubquery = base.FragmentFactory.CreateFragment<ScalarSubquery>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression(subDmlFlags);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				if (ExpressionFlags.ScalarSubqueriesDisallowed == (expressionFlags & ExpressionFlags.ScalarSubqueriesDisallowed))
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46098", queryExpression, TSqlParserResource.SQL46098Message, new string[0]);
				}
				scalarSubquery.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarSubquery, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarSubquery, token2);
			}
			return scalarSubquery;
		}

		// Token: 0x06000D90 RID: 3472 RVA: 0x00057A24 File Offset: 0x00055C24
		public QueryExpression subqueryExpressionUnit(SubDmlFlags subDmlFlags)
		{
			int num = this.LA(1);
			QueryExpression queryExpression;
			if (num != 140)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				queryExpression = this.subqueryParenthesis(subDmlFlags);
			}
			else
			{
				queryExpression = this.subquerySpecification(subDmlFlags);
			}
			return queryExpression;
		}

		// Token: 0x06000D91 RID: 3473 RVA: 0x00057A74 File Offset: 0x00055C74
		public QuerySpecification subquerySpecification(SubDmlFlags subDmlFlags)
		{
			QuerySpecification querySpecification = base.FragmentFactory.CreateFragment<QuerySpecification>();
			IToken token = this.LT(1);
			this.match(140);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(querySpecification, token);
			}
			this.uniqueRowFilterOpt(querySpecification);
			int num = this.LA(1);
			if (num <= 133)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num == 20 || num == 25)
						{
							goto IL_022D;
						}
					}
					else
					{
						if (num == 34)
						{
							goto IL_022D;
						}
						switch (num)
						{
						case 40:
						case 41:
							goto IL_022D;
						}
					}
				}
				else if (num <= 93)
				{
					switch (num)
					{
					case 79:
					case 81:
						goto IL_022D;
					case 80:
						break;
					default:
						if (num == 93)
						{
							goto IL_022D;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 100:
					case 101:
						goto IL_022D;
					default:
						if (num == 133)
						{
							goto IL_022D;
						}
						break;
					}
				}
			}
			else if (num <= 152)
			{
				if (num <= 141)
				{
					if (num == 136 || num == 141)
					{
						goto IL_022D;
					}
				}
				else
				{
					if (num == 147)
					{
						goto IL_022D;
					}
					if (num == 152)
					{
						TopRowFilter topRowFilter = this.topRowFilter();
						if (this.inputState.guessing == 0)
						{
							querySpecification.TopRowFilter = topRowFilter;
							goto IL_022D;
						}
						goto IL_022D;
					}
				}
			}
			else if (num <= 187)
			{
				if (num == 163 || num == 187)
				{
					goto IL_022D;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_022D;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_022D;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_022D:
			SelectElement selectElement = this.selectColumnOrStarExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(querySpecification, querySpecification.SelectElements, selectElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				selectElement = this.selectColumnOrStarExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(querySpecification, querySpecification.SelectElements, selectElement);
				}
			}
			FromClause fromClause = this.fromClauseOpt(subDmlFlags);
			if (this.inputState.guessing == 0)
			{
				querySpecification.FromClause = fromClause;
			}
			int num2 = this.LA(1);
			if (num2 <= 87)
			{
				if (num2 <= 49)
				{
					if (num2 == 1 || num2 == 35 || num2 == 49)
					{
						goto IL_03BA;
					}
				}
				else if (num2 <= 67)
				{
					if (num2 == 59 || num2 == 67)
					{
						goto IL_03BA;
					}
				}
				else
				{
					switch (num2)
					{
					case 75:
					case 76:
					case 77:
						goto IL_03BA;
					default:
						if (num2 == 87)
						{
							goto IL_03BA;
						}
						break;
					}
				}
			}
			else if (num2 <= 158)
			{
				if (num2 == 113 || num2 == 132 || num2 == 158)
				{
					goto IL_03BA;
				}
			}
			else if (num2 <= 192)
			{
				switch (num2)
				{
				case 169:
				{
					WhereClause whereClause = this.whereClause();
					if (this.inputState.guessing == 0)
					{
						querySpecification.WhereClause = whereClause;
						goto IL_03BA;
					}
					goto IL_03BA;
				}
				case 170:
					break;
				case 171:
					goto IL_03BA;
				default:
					if (num2 == 192)
					{
						goto IL_03BA;
					}
					break;
				}
			}
			else if (num2 == 204 || num2 == 219)
			{
				goto IL_03BA;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_03BA:
			int num3 = this.LA(1);
			if (num3 <= 87)
			{
				if (num3 <= 49)
				{
					if (num3 == 1 || num3 == 35 || num3 == 49)
					{
						goto IL_04B2;
					}
				}
				else if (num3 <= 67)
				{
					if (num3 == 59 || num3 == 67)
					{
						goto IL_04B2;
					}
				}
				else
				{
					switch (num3)
					{
					case 75:
					case 77:
						goto IL_04B2;
					case 76:
					{
						GroupByClause groupByClause = this.groupByClause();
						if (this.inputState.guessing == 0)
						{
							querySpecification.GroupByClause = groupByClause;
							goto IL_04B2;
						}
						goto IL_04B2;
					}
					default:
						if (num3 == 87)
						{
							goto IL_04B2;
						}
						break;
					}
				}
			}
			else if (num3 <= 158)
			{
				if (num3 == 113 || num3 == 132 || num3 == 158)
				{
					goto IL_04B2;
				}
			}
			else if (num3 <= 192)
			{
				if (num3 == 171 || num3 == 192)
				{
					goto IL_04B2;
				}
			}
			else if (num3 == 204 || num3 == 219)
			{
				goto IL_04B2;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_04B2:
			int num4 = this.LA(1);
			if (num4 <= 87)
			{
				if (num4 <= 49)
				{
					if (num4 == 1 || num4 == 35 || num4 == 49)
					{
						goto IL_05AA;
					}
				}
				else if (num4 <= 67)
				{
					if (num4 == 59 || num4 == 67)
					{
						goto IL_05AA;
					}
				}
				else
				{
					switch (num4)
					{
					case 75:
						goto IL_05AA;
					case 76:
						break;
					case 77:
					{
						HavingClause havingClause = this.havingClause();
						if (this.inputState.guessing == 0)
						{
							querySpecification.HavingClause = havingClause;
							goto IL_05AA;
						}
						goto IL_05AA;
					}
					default:
						if (num4 == 87)
						{
							goto IL_05AA;
						}
						break;
					}
				}
			}
			else if (num4 <= 158)
			{
				if (num4 == 113 || num4 == 132 || num4 == 158)
				{
					goto IL_05AA;
				}
			}
			else if (num4 <= 192)
			{
				if (num4 == 171 || num4 == 192)
				{
					goto IL_05AA;
				}
			}
			else if (num4 == 204 || num4 == 219)
			{
				goto IL_05AA;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_05AA:
			int num5 = this.LA(1);
			if (num5 <= 87)
			{
				if (num5 <= 49)
				{
					if (num5 == 1 || num5 == 35 || num5 == 49)
					{
						goto IL_07A0;
					}
				}
				else if (num5 <= 67)
				{
					if (num5 == 59 || num5 == 67)
					{
						goto IL_07A0;
					}
				}
				else if (num5 == 75 || num5 == 87)
				{
					goto IL_07A0;
				}
			}
			else if (num5 <= 158)
			{
				if (num5 == 113)
				{
					OrderByClause orderByClause = this.orderByClause();
					if (this.inputState.guessing == 0)
					{
						querySpecification.OrderByClause = orderByClause;
					}
					int num6 = this.LA(1);
					if (num6 <= 87)
					{
						if (num6 <= 49)
						{
							if (num6 == 1 || num6 == 35 || num6 == 49)
							{
								goto IL_07A0;
							}
						}
						else if (num6 <= 67)
						{
							if (num6 == 59 || num6 == 67)
							{
								goto IL_07A0;
							}
						}
						else if (num6 == 75 || num6 == 87)
						{
							goto IL_07A0;
						}
					}
					else if (num6 <= 171)
					{
						if (num6 == 132 || num6 == 158 || num6 == 171)
						{
							goto IL_07A0;
						}
					}
					else if (num6 <= 204)
					{
						if (num6 == 192 || num6 == 204)
						{
							goto IL_07A0;
						}
					}
					else
					{
						if (num6 == 219)
						{
							goto IL_07A0;
						}
						if (num6 == 232)
						{
							OffsetClause offsetClause = this.offsetClause();
							if (this.inputState.guessing == 0)
							{
								querySpecification.OffsetClause = offsetClause;
								goto IL_07A0;
							}
							goto IL_07A0;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (num5 == 132 || num5 == 158)
				{
					goto IL_07A0;
				}
			}
			else if (num5 <= 192)
			{
				if (num5 == 171 || num5 == 192)
				{
					goto IL_07A0;
				}
			}
			else if (num5 == 204 || num5 == 219)
			{
				goto IL_07A0;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_07A0:
			if (this.LA(1) == 67 && this.LA(2) == 16 && this.LA(1) == 67 && this.LA(2) == 16)
			{
				this.match(67);
				BrowseForClause browseForClause = this.browseForClause();
				if (this.inputState.guessing == 0)
				{
					querySpecification.ForClause = browseForClause;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_95_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num7 = this.LA(1);
			if (num7 <= 75)
			{
				if (num7 <= 49)
				{
					if (num7 == 1 || num7 == 35 || num7 == 49)
					{
						goto IL_092A;
					}
				}
				else
				{
					if (num7 == 59)
					{
						goto IL_092A;
					}
					if (num7 != 67)
					{
						if (num7 == 75)
						{
							goto IL_092A;
						}
					}
					else
					{
						IToken token2 = this.LT(1);
						this.match(67);
						XmlForClause xmlForClause = this.xmlForClause();
						if (this.inputState.guessing == 0)
						{
							if (querySpecification.ForClause != null)
							{
								TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
							}
							querySpecification.ForClause = xmlForClause;
							goto IL_092A;
						}
						goto IL_092A;
					}
				}
			}
			else if (num7 <= 158)
			{
				if (num7 == 87 || num7 == 132 || num7 == 158)
				{
					goto IL_092A;
				}
			}
			else if (num7 <= 192)
			{
				if (num7 == 171 || num7 == 192)
				{
					goto IL_092A;
				}
			}
			else if (num7 == 204 || num7 == 219)
			{
				goto IL_092A;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_092A:
			if (this.inputState.guessing == 0)
			{
				if (querySpecification.OrderByClause != null && querySpecification.TopRowFilter == null && querySpecification.ForClause == null && querySpecification.OffsetClause == null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46047", querySpecification, TSqlParserResource.SQL46047Message, new string[0]);
				}
				if (querySpecification.TopRowFilter != null && querySpecification.TopRowFilter.WithTies && querySpecification.OrderByClause == null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46048", querySpecification, TSqlParserResource.SQL46048Message, new string[0]);
				}
			}
			return querySpecification;
		}

		// Token: 0x06000D92 RID: 3474 RVA: 0x00058424 File Offset: 0x00056624
		public QueryParenthesisExpression subqueryParenthesis(SubDmlFlags subDmlFlags)
		{
			QueryParenthesisExpression queryParenthesisExpression = base.FragmentFactory.CreateFragment<QueryParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression(subDmlFlags);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token);
				queryParenthesisExpression.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token2);
			}
			return queryParenthesisExpression;
		}

		// Token: 0x06000D93 RID: 3475 RVA: 0x00058494 File Offset: 0x00056694
		public QueryExpression queryExpressionUnit(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement)
		{
			int num = this.LA(1);
			QueryExpression queryExpression;
			if (num != 140)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				queryExpression = this.queryParenthesis(subDmlFlags, vSelectStatement);
			}
			else
			{
				queryExpression = this.querySpecification(subDmlFlags, vSelectStatement);
			}
			return queryExpression;
		}

		// Token: 0x06000D94 RID: 3476 RVA: 0x000584E8 File Offset: 0x000566E8
		public QuerySpecification querySpecification(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement)
		{
			QuerySpecification querySpecification = base.FragmentFactory.CreateFragment<QuerySpecification>();
			IToken token = this.LT(1);
			this.match(140);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(querySpecification, token);
			}
			this.uniqueRowFilterOpt(querySpecification);
			int num = this.LA(1);
			if (num <= 133)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num == 20 || num == 25)
						{
							goto IL_022D;
						}
					}
					else
					{
						if (num == 34)
						{
							goto IL_022D;
						}
						switch (num)
						{
						case 40:
						case 41:
							goto IL_022D;
						}
					}
				}
				else if (num <= 93)
				{
					switch (num)
					{
					case 79:
					case 81:
						goto IL_022D;
					case 80:
						break;
					default:
						if (num == 93)
						{
							goto IL_022D;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 100:
					case 101:
						goto IL_022D;
					default:
						if (num == 133)
						{
							goto IL_022D;
						}
						break;
					}
				}
			}
			else if (num <= 152)
			{
				if (num <= 141)
				{
					if (num == 136 || num == 141)
					{
						goto IL_022D;
					}
				}
				else
				{
					if (num == 147)
					{
						goto IL_022D;
					}
					if (num == 152)
					{
						TopRowFilter topRowFilter = this.topRowFilter();
						if (this.inputState.guessing == 0)
						{
							querySpecification.TopRowFilter = topRowFilter;
							goto IL_022D;
						}
						goto IL_022D;
					}
				}
			}
			else if (num <= 187)
			{
				if (num == 163 || num == 187)
				{
					goto IL_022D;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_022D;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_022D;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_022D:
			this.selectExpression(querySpecification);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.selectExpression(querySpecification);
			}
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_0571;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_0571;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0571;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_0571;
							default:
								if (num2 == 28)
								{
									goto IL_0571;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 77)
				{
					switch (num2)
					{
					case 33:
					case 35:
						goto IL_0571;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 71:
						case 74:
						case 75:
						case 76:
						case 77:
							goto IL_0571;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 82:
					case 86:
					case 87:
						goto IL_0571;
					case 83:
					case 84:
					case 85:
						break;
					case 88:
					{
						IToken token2 = this.LT(1);
						this.match(88);
						SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
						if (this.inputState.guessing == 0)
						{
							if (vSelectStatement == null)
							{
								TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
							}
							vSelectStatement.Into = schemaObjectName;
							goto IL_0571;
						}
						goto IL_0571;
					}
					default:
						if (num2 == 92 || num2 == 95)
						{
							goto IL_0571;
						}
						break;
					}
				}
			}
			else if (num2 <= 176)
			{
				if (num2 <= 113)
				{
					if (num2 == 106)
					{
						goto IL_0571;
					}
					switch (num2)
					{
					case 111:
					case 113:
						goto IL_0571;
					}
				}
				else
				{
					if (num2 == 119)
					{
						goto IL_0571;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0571;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 169:
						case 170:
						case 171:
						case 172:
						case 176:
							goto IL_0571;
						}
						break;
					}
				}
			}
			else if (num2 <= 192)
			{
				if (num2 == 182)
				{
					goto IL_0571;
				}
				switch (num2)
				{
				case 191:
				case 192:
					goto IL_0571;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_0571;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_0571;
				default:
					if (num2 == 232)
					{
						goto IL_0571;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0571:
			FromClause fromClause = this.fromClauseOpt(subDmlFlags);
			if (this.inputState.guessing == 0)
			{
				querySpecification.FromClause = fromClause;
			}
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 28)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							goto IL_0883;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_0883;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0883;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								goto IL_0883;
							default:
								if (num3 == 28)
								{
									goto IL_0883;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 67)
				{
					switch (num3)
					{
					case 33:
					case 35:
						goto IL_0883;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
							goto IL_0883;
						}
						break;
					}
				}
				else
				{
					switch (num3)
					{
					case 74:
					case 75:
					case 76:
					case 77:
					case 82:
						goto IL_0883;
					case 78:
					case 79:
					case 80:
					case 81:
						break;
					default:
						switch (num3)
						{
						case 86:
						case 87:
							goto IL_0883;
						default:
							if (num3 == 92)
							{
								goto IL_0883;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 144)
			{
				if (num3 <= 106)
				{
					if (num3 == 95 || num3 == 106)
					{
						goto IL_0883;
					}
				}
				else
				{
					switch (num3)
					{
					case 111:
					case 113:
						goto IL_0883;
					case 112:
						break;
					default:
						if (num3 == 119)
						{
							goto IL_0883;
						}
						switch (num3)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_0883;
						}
						break;
					}
				}
			}
			else if (num3 <= 192)
			{
				switch (num3)
				{
				case 156:
				case 158:
				case 160:
				case 161:
				case 162:
				case 167:
				case 170:
				case 171:
				case 172:
				case 176:
					goto IL_0883;
				case 157:
				case 159:
				case 163:
				case 164:
				case 165:
				case 166:
				case 168:
				case 173:
				case 174:
				case 175:
					break;
				case 169:
				{
					WhereClause whereClause = this.whereClause();
					if (this.inputState.guessing == 0)
					{
						querySpecification.WhereClause = whereClause;
						goto IL_0883;
					}
					goto IL_0883;
				}
				default:
					if (num3 == 182)
					{
						goto IL_0883;
					}
					switch (num3)
					{
					case 191:
					case 192:
						goto IL_0883;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_0883;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_0883;
				default:
					if (num3 == 232)
					{
						goto IL_0883;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0883:
			int num4 = this.LA(1);
			if (num4 <= 95)
			{
				if (num4 <= 28)
				{
					if (num4 <= 6)
					{
						if (num4 == 1)
						{
							goto IL_0B6A;
						}
						switch (num4)
						{
						case 4:
						case 6:
							goto IL_0B6A;
						}
					}
					else
					{
						switch (num4)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0B6A;
						case 14:
						case 16:
							break;
						default:
							switch (num4)
							{
							case 22:
							case 23:
								goto IL_0B6A;
							default:
								if (num4 == 28)
								{
									goto IL_0B6A;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num4 <= 82)
				{
					switch (num4)
					{
					case 33:
					case 35:
						goto IL_0B6A;
					case 34:
						break;
					default:
						switch (num4)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
							goto IL_0B6A;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 62:
						case 63:
						case 65:
						case 66:
							break;
						default:
							switch (num4)
							{
							case 74:
							case 75:
							case 77:
							case 82:
								goto IL_0B6A;
							case 76:
							{
								GroupByClause groupByClause = this.groupByClause();
								if (this.inputState.guessing == 0)
								{
									querySpecification.GroupByClause = groupByClause;
									goto IL_0B6A;
								}
								goto IL_0B6A;
							}
							}
							break;
						}
						break;
					}
				}
				else
				{
					switch (num4)
					{
					case 86:
					case 87:
						goto IL_0B6A;
					default:
						if (num4 == 92 || num4 == 95)
						{
							goto IL_0B6A;
						}
						break;
					}
				}
			}
			else if (num4 <= 172)
			{
				if (num4 <= 113)
				{
					if (num4 == 106)
					{
						goto IL_0B6A;
					}
					switch (num4)
					{
					case 111:
					case 113:
						goto IL_0B6A;
					}
				}
				else
				{
					if (num4 == 119)
					{
						goto IL_0B6A;
					}
					switch (num4)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0B6A;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num4)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_0B6A;
						}
						break;
					}
				}
			}
			else if (num4 <= 192)
			{
				if (num4 == 176 || num4 == 182)
				{
					goto IL_0B6A;
				}
				switch (num4)
				{
				case 191:
				case 192:
					goto IL_0B6A;
				}
			}
			else
			{
				if (num4 == 204)
				{
					goto IL_0B6A;
				}
				switch (num4)
				{
				case 219:
				case 220:
					goto IL_0B6A;
				default:
					if (num4 == 232)
					{
						goto IL_0B6A;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0B6A:
			int num5 = this.LA(1);
			if (num5 <= 92)
			{
				if (num5 <= 28)
				{
					if (num5 <= 6)
					{
						if (num5 == 1)
						{
							return querySpecification;
						}
						switch (num5)
						{
						case 4:
						case 6:
							return querySpecification;
						}
					}
					else
					{
						switch (num5)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return querySpecification;
						case 14:
						case 16:
							break;
						default:
							switch (num5)
							{
							case 22:
							case 23:
								return querySpecification;
							default:
								if (num5 == 28)
								{
									return querySpecification;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num5 <= 77)
				{
					switch (num5)
					{
					case 33:
					case 35:
						return querySpecification;
					case 34:
						break;
					default:
						switch (num5)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
							return querySpecification;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 62:
						case 63:
						case 65:
						case 66:
							break;
						default:
							switch (num5)
							{
							case 74:
							case 75:
								return querySpecification;
							case 77:
							{
								HavingClause havingClause = this.havingClause();
								if (this.inputState.guessing == 0)
								{
									querySpecification.HavingClause = havingClause;
									return querySpecification;
								}
								return querySpecification;
							}
							}
							break;
						}
						break;
					}
				}
				else
				{
					if (num5 == 82)
					{
						return querySpecification;
					}
					switch (num5)
					{
					case 86:
					case 87:
						return querySpecification;
					default:
						if (num5 == 92)
						{
							return querySpecification;
						}
						break;
					}
				}
			}
			else if (num5 <= 172)
			{
				if (num5 <= 113)
				{
					if (num5 == 95 || num5 == 106)
					{
						return querySpecification;
					}
					switch (num5)
					{
					case 111:
					case 113:
						return querySpecification;
					}
				}
				else
				{
					if (num5 == 119)
					{
						return querySpecification;
					}
					switch (num5)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return querySpecification;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num5)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return querySpecification;
						}
						break;
					}
				}
			}
			else if (num5 <= 192)
			{
				if (num5 == 176 || num5 == 182)
				{
					return querySpecification;
				}
				switch (num5)
				{
				case 191:
				case 192:
					return querySpecification;
				}
			}
			else
			{
				if (num5 == 204)
				{
					return querySpecification;
				}
				switch (num5)
				{
				case 219:
				case 220:
					return querySpecification;
				default:
					if (num5 == 232)
					{
						return querySpecification;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D95 RID: 3477 RVA: 0x0005933C File Offset: 0x0005753C
		public QueryParenthesisExpression queryParenthesis(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement)
		{
			QueryParenthesisExpression queryParenthesisExpression = base.FragmentFactory.CreateFragment<QueryParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.queryExpression(subDmlFlags, vSelectStatement);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token);
				queryParenthesisExpression.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token2);
			}
			return queryParenthesisExpression;
		}

		// Token: 0x06000D96 RID: 3478 RVA: 0x000593AC File Offset: 0x000575AC
		public void uniqueRowFilterOpt(QuerySpecification vParent)
		{
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num != 20)
							{
								goto IL_01D1;
							}
							return;
						}
					}
					else
					{
						if (num != 25 && num != 34)
						{
							goto IL_01D1;
						}
						return;
					}
				}
				else if (num <= 51)
				{
					switch (num)
					{
					case 40:
					case 41:
						return;
					default:
						if (num != 51)
						{
							goto IL_01D1;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 79:
					case 81:
						return;
					case 80:
						goto IL_01D1;
					default:
						if (num == 93)
						{
							return;
						}
						switch (num)
						{
						case 100:
						case 101:
							return;
						default:
							goto IL_01D1;
						}
						break;
					}
				}
				IToken token;
				UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out token);
				if (this.inputState.guessing == 0)
				{
					vParent.UniqueRowFilter = uniqueRowFilter;
					return;
				}
				return;
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num == 133 || num == 136)
					{
						return;
					}
				}
				else if (num == 141 || num == 147)
				{
					return;
				}
			}
			else if (num <= 163)
			{
				if (num == 152 || num == 163)
				{
					return;
				}
			}
			else
			{
				if (num == 187)
				{
					return;
				}
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					return;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						return;
					}
					break;
				}
			}
			IL_01D1:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D97 RID: 3479 RVA: 0x000595A0 File Offset: 0x000577A0
		public TopRowFilter topRowFilter()
		{
			TopRowFilter topRowFilter = base.FragmentFactory.CreateFragment<TopRowFilter>();
			IToken token = this.LT(1);
			this.match(152);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token);
			}
			int num = this.LA(1);
			ScalarExpression scalarExpression;
			if (num != 191)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
					scalarExpression = this.integerOrRealOrNumeric();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				scalarExpression = this.parenthesisDisambiguatorForExpressions(ExpressionFlags.None);
			}
			if (this.inputState.guessing == 0)
			{
				topRowFilter.Expression = scalarExpression;
			}
			int num2 = this.LA(1);
			if (num2 <= 116)
			{
				if (num2 <= 41)
				{
					if (num2 <= 25)
					{
						if (num2 == 20 || num2 == 25)
						{
							goto IL_02AF;
						}
					}
					else
					{
						if (num2 == 34)
						{
							goto IL_02AF;
						}
						switch (num2)
						{
						case 40:
						case 41:
							goto IL_02AF;
						}
					}
				}
				else if (num2 <= 93)
				{
					switch (num2)
					{
					case 79:
					case 81:
						goto IL_02AF;
					case 80:
						break;
					default:
						if (num2 == 93)
						{
							goto IL_02AF;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 100:
					case 101:
						goto IL_02AF;
					default:
						if (num2 == 116)
						{
							IToken token2 = this.LT(1);
							this.match(116);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.ThrowIfPercentValueOutOfRange(scalarExpression);
								TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token2);
								topRowFilter.Percent = true;
								goto IL_02AF;
							}
							goto IL_02AF;
						}
						break;
					}
				}
			}
			else if (num2 <= 147)
			{
				if (num2 <= 136)
				{
					if (num2 == 133 || num2 == 136)
					{
						goto IL_02AF;
					}
				}
				else if (num2 == 141 || num2 == 147)
				{
					goto IL_02AF;
				}
			}
			else if (num2 <= 171)
			{
				if (num2 == 163 || num2 == 171)
				{
					goto IL_02AF;
				}
			}
			else
			{
				if (num2 == 187)
				{
					goto IL_02AF;
				}
				switch (num2)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_02AF;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num2)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_02AF;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_02AF:
			int num3 = this.LA(1);
			if (num3 <= 133)
			{
				if (num3 <= 41)
				{
					if (num3 <= 25)
					{
						if (num3 == 20 || num3 == 25)
						{
							return topRowFilter;
						}
					}
					else
					{
						if (num3 == 34)
						{
							return topRowFilter;
						}
						switch (num3)
						{
						case 40:
						case 41:
							return topRowFilter;
						}
					}
				}
				else if (num3 <= 93)
				{
					switch (num3)
					{
					case 79:
					case 81:
						return topRowFilter;
					case 80:
						break;
					default:
						if (num3 == 93)
						{
							return topRowFilter;
						}
						break;
					}
				}
				else
				{
					switch (num3)
					{
					case 100:
					case 101:
						return topRowFilter;
					default:
						if (num3 == 133)
						{
							return topRowFilter;
						}
						break;
					}
				}
			}
			else if (num3 <= 163)
			{
				if (num3 <= 141)
				{
					if (num3 == 136 || num3 == 141)
					{
						return topRowFilter;
					}
				}
				else if (num3 == 147 || num3 == 163)
				{
					return topRowFilter;
				}
			}
			else if (num3 <= 187)
			{
				if (num3 != 171)
				{
					if (num3 == 187)
					{
						return topRowFilter;
					}
				}
				else
				{
					this.match(171);
					IToken token3 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "TIES");
						TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token3);
						topRowFilter.WithTies = true;
						return topRowFilter;
					}
					return topRowFilter;
				}
			}
			else
			{
				switch (num3)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					return topRowFilter;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num3)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						return topRowFilter;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D98 RID: 3480 RVA: 0x00059A78 File Offset: 0x00057C78
		public SelectElement selectColumnOrStarExpression()
		{
			bool flag = false;
			if (TSql110ParserInternal.tokenSet_96_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_97_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.selectStarExpression();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			SelectElement selectElement;
			if (flag)
			{
				selectElement = this.selectStarExpression();
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_98_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_99_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				selectElement = this.selectColumn();
			}
			return selectElement;
		}

		// Token: 0x06000D99 RID: 3481 RVA: 0x00059B50 File Offset: 0x00057D50
		public FromClause fromClauseOpt(SubDmlFlags subDmlFlags)
		{
			FromClause fromClause = null;
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return fromClause;
						}
						switch (num)
						{
						case 4:
						case 6:
							return fromClause;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return fromClause;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return fromClause;
							default:
								if (num == 28)
								{
									return fromClause;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 77)
				{
					switch (num)
					{
					case 33:
					case 35:
						return fromClause;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 74:
						case 75:
						case 76:
						case 77:
							return fromClause;
						case 71:
							return this.fromClause(subDmlFlags);
						}
						break;
					}
				}
				else
				{
					if (num == 82)
					{
						return fromClause;
					}
					switch (num)
					{
					case 86:
					case 87:
						return fromClause;
					default:
						if (num == 92)
						{
							return fromClause;
						}
						break;
					}
				}
			}
			else if (num <= 144)
			{
				if (num <= 106)
				{
					if (num == 95 || num == 106)
					{
						return fromClause;
					}
				}
				else
				{
					switch (num)
					{
					case 111:
					case 113:
						return fromClause;
					case 112:
						break;
					default:
						if (num == 119)
						{
							return fromClause;
						}
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return fromClause;
						}
						break;
					}
				}
			}
			else if (num <= 192)
			{
				switch (num)
				{
				case 156:
				case 158:
				case 160:
				case 161:
				case 162:
				case 167:
				case 169:
				case 170:
				case 171:
				case 172:
				case 176:
					return fromClause;
				case 157:
				case 159:
				case 163:
				case 164:
				case 165:
				case 166:
				case 168:
				case 173:
				case 174:
				case 175:
					break;
				default:
					if (num == 182)
					{
						return fromClause;
					}
					switch (num)
					{
					case 191:
					case 192:
						return fromClause;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return fromClause;
				}
				switch (num)
				{
				case 219:
				case 220:
					return fromClause;
				default:
					if (num == 232)
					{
						return fromClause;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000D9A RID: 3482 RVA: 0x00059E24 File Offset: 0x00058024
		public WhereClause whereClause()
		{
			WhereClause whereClause = base.FragmentFactory.CreateFragment<WhereClause>();
			IToken token = this.LT(1);
			this.match(169);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(whereClause, token);
				whereClause.SearchCondition = booleanExpression;
			}
			return whereClause;
		}

		// Token: 0x06000D9B RID: 3483 RVA: 0x00059E78 File Offset: 0x00058078
		public GroupByClause groupByClause()
		{
			GroupByClause groupByClause = base.FragmentFactory.CreateFragment<GroupByClause>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(76);
			this.match(18);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(groupByClause, token);
			}
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num == 20)
							{
								goto IL_0218;
							}
						}
						else
						{
							this.match(5);
							if (this.inputState.guessing == 0)
							{
								groupByClause.All = true;
								goto IL_0218;
							}
							goto IL_0218;
						}
					}
					else if (num == 25 || num == 34)
					{
						goto IL_0218;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_0218;
					default:
						if (num == 81)
						{
							goto IL_0218;
						}
						break;
					}
				}
				else
				{
					if (num == 93)
					{
						goto IL_0218;
					}
					switch (num)
					{
					case 100:
					case 101:
						goto IL_0218;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num == 133 || num == 136)
					{
						goto IL_0218;
					}
				}
				else if (num == 141 || num == 147)
				{
					goto IL_0218;
				}
			}
			else if (num <= 187)
			{
				if (num == 163 || num == 187)
				{
					goto IL_0218;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
					goto IL_0218;
				case 192:
					break;
				default:
					switch (num)
					{
					case 197:
					case 199:
					case 200:
						goto IL_0218;
					case 198:
						break;
					default:
						switch (num)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							goto IL_0218;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0218:
			GroupingSpecification groupingSpecification = this.groupByItem(groupByClause.All, ref flag);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(groupByClause, groupByClause.GroupingSpecifications, groupingSpecification);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				groupingSpecification = this.groupByItem(groupByClause.All, ref flag);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(groupByClause, groupByClause.GroupingSpecifications, groupingSpecification);
				}
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (groupByClause.All)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46084", token2, TSqlParserResource.SQL46084Message, new string[0]);
					}
					if (flag)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46085", token2, TSqlParserResource.SQL46085Message, new string[0]);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(groupByClause, token2);
					groupByClause.GroupByOption = GroupByOptionHelper.Instance.ParseOption(token2);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_100_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return groupByClause;
		}

		// Token: 0x06000D9C RID: 3484 RVA: 0x0005A1E8 File Offset: 0x000583E8
		public HavingClause havingClause()
		{
			HavingClause havingClause = base.FragmentFactory.CreateFragment<HavingClause>();
			IToken token = this.LT(1);
			this.match(77);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(havingClause, token);
			}
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				havingClause.SearchCondition = booleanExpression;
			}
			return havingClause;
		}

		// Token: 0x06000D9D RID: 3485 RVA: 0x0005A244 File Offset: 0x00058444
		public BrowseForClause browseForClause()
		{
			BrowseForClause browseForClause = base.FragmentFactory.CreateFragment<BrowseForClause>();
			IToken token = this.LT(1);
			this.match(16);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(browseForClause, token);
			}
			return browseForClause;
		}

		// Token: 0x06000D9E RID: 3486 RVA: 0x0005A284 File Offset: 0x00058484
		public XmlForClause xmlForClause()
		{
			XmlForClause xmlForClause = base.FragmentFactory.CreateFragment<XmlForClause>();
			XmlForClauseOptions xmlForClauseOptions = XmlForClauseOptions.None;
			IToken token = this.LT(1);
			this.match(232);
			XmlForClauseOption xmlForClauseOption = this.xmlForClauseMode();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlForClauseOption>(xmlForClause, xmlForClause.Options, xmlForClauseOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				xmlForClauseOption = this.xmlParam(xmlForClauseOptions);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlForClauseOption>(xmlForClause, xmlForClause.Options, xmlForClauseOption);
					xmlForClauseOptions |= xmlForClauseOption.OptionKind;
				}
			}
			return xmlForClause;
		}

		// Token: 0x06000D9F RID: 3487 RVA: 0x0005A328 File Offset: 0x00058528
		public void selectExpression(QuerySpecification vParent)
		{
			bool flag = false;
			if (this.LA(1) == 234 && TSql110ParserInternal.tokenSet_89_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(234);
					this.assignmentWithOptOp();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				SelectSetVariable selectSetVariable = this.selectSetVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(vParent, vParent.SelectElements, selectSetVariable);
					return;
				}
			}
			else
			{
				bool flag2 = false;
				if (TSql110ParserInternal.tokenSet_96_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_101_.member(this.LA(2)))
				{
					int num2 = this.mark();
					flag2 = true;
					this.inputState.guessing++;
					try
					{
						this.selectStarExpression();
					}
					catch (RecognitionException)
					{
						flag2 = false;
					}
					this.rewind(num2);
					this.inputState.guessing--;
				}
				if (flag2)
				{
					SelectStarExpression selectStarExpression = this.selectStarExpression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(vParent, vParent.SelectElements, selectStarExpression);
						return;
					}
				}
				else
				{
					if (!TSql110ParserInternal.tokenSet_98_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_102_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					SelectScalarExpression selectScalarExpression = this.selectColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(vParent, vParent.SelectElements, selectScalarExpression);
						return;
					}
				}
			}
		}

		// Token: 0x06000DA0 RID: 3488 RVA: 0x0005A4E0 File Offset: 0x000586E0
		public UniqueRowFilter uniqueRowFilter(out IToken token)
		{
			UniqueRowFilter uniqueRowFilter = UniqueRowFilter.NotSpecified;
			token = null;
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 51)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(51);
				if (this.inputState.guessing == 0)
				{
					uniqueRowFilter = UniqueRowFilter.Distinct;
					token = token2;
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					uniqueRowFilter = UniqueRowFilter.All;
					token = token3;
				}
			}
			return uniqueRowFilter;
		}

		// Token: 0x06000DA1 RID: 3489 RVA: 0x0005A564 File Offset: 0x00058764
		public PrimaryExpression parenthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			PrimaryExpression primaryExpression;
			if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 191) && base.IsNextRuleSelectParenthesis())
			{
				primaryExpression = this.subquery(SubDmlFlags.SelectNotForInsert, expressionFlags);
			}
			else
			{
				if (this.LA(1) != 191 || !TSql110ParserInternal.tokenSet_39_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				primaryExpression = this.expressionParenthesis(expressionFlags);
			}
			return primaryExpression;
		}

		// Token: 0x06000DA2 RID: 3490 RVA: 0x0005A5F0 File Offset: 0x000587F0
		public TopRowFilter dmlTopRowFilter()
		{
			TopRowFilter topRowFilter = base.FragmentFactory.CreateFragment<TopRowFilter>();
			IToken token = this.LT(1);
			this.match(152);
			ScalarExpression scalarExpression = this.parenthesisDisambiguatorForExpressions(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token);
				topRowFilter.Expression = scalarExpression;
			}
			int num = this.LA(1);
			if (num <= 109)
			{
				if (num == 71 || num == 88)
				{
					return topRowFilter;
				}
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					return topRowFilter;
				}
			}
			else
			{
				switch (num)
				{
				case 115:
					return topRowFilter;
				case 116:
				{
					IToken token2 = this.LT(1);
					this.match(116);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token2);
						topRowFilter.Percent = true;
						return topRowFilter;
					}
					return topRowFilter;
				}
				default:
					if (num == 200)
					{
						return topRowFilter;
					}
					switch (num)
					{
					case 232:
					case 233:
					case 234:
						return topRowFilter;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DA3 RID: 3491 RVA: 0x0005A6F4 File Offset: 0x000588F4
		public void dmlTopRowFilterOpt(DataModificationSpecification vParent)
		{
			int num = this.LA(1);
			if (num <= 109)
			{
				if (num == 71 || num == 88)
				{
					return;
				}
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					return;
				}
			}
			else if (num <= 152)
			{
				if (num == 115)
				{
					return;
				}
				if (num == 152)
				{
					TopRowFilter topRowFilter = this.dmlTopRowFilter();
					if (this.inputState.guessing == 0)
					{
						vParent.TopRowFilter = topRowFilter;
						return;
					}
					return;
				}
			}
			else
			{
				if (num == 200)
				{
					return;
				}
				switch (num)
				{
				case 232:
				case 233:
				case 234:
					return;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DA4 RID: 3492 RVA: 0x0005A79C File Offset: 0x0005899C
		public SelectSetVariable selectSetVariable()
		{
			SelectSetVariable selectSetVariable = base.FragmentFactory.CreateFragment<SelectSetVariable>();
			VariableReference variableReference = this.variable();
			AssignmentKind assignmentKind = this.assignmentWithOptOp();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				selectSetVariable.Variable = variableReference;
				selectSetVariable.Expression = scalarExpression;
				selectSetVariable.AssignmentKind = assignmentKind;
			}
			return selectSetVariable;
		}

		// Token: 0x06000DA5 RID: 3493 RVA: 0x0005A7F0 File Offset: 0x000589F0
		public SelectStarExpression selectStarExpression()
		{
			SelectStarExpression selectStarExpression = base.FragmentFactory.CreateFragment<SelectStarExpression>();
			int num = this.LA(1);
			if (num != 195)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.inputState.guessing == 0)
				{
					selectStarExpression.Qualifier = multiPartIdentifier;
				}
				this.match(200);
				IToken token = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(selectStarExpression, token);
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(selectStarExpression, token2);
				}
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckStarQualifier(selectStarExpression);
			}
			return selectStarExpression;
		}

		// Token: 0x06000DA6 RID: 3494 RVA: 0x0005A8E0 File Offset: 0x00058AE0
		public SelectScalarExpression selectColumn()
		{
			SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
			if (TSql110ParserInternal.tokenSet_98_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_103_.member(this.LA(2)))
			{
				ScalarExpression scalarExpression = this.selectColumnExpression();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.Expression = scalarExpression;
				}
				if (TSql110ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_105_.member(this.LA(2)))
				{
					int num = this.LA(1);
					if (num != 9)
					{
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 233:
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
					if (this.inputState.guessing == 0)
					{
						selectScalarExpression.ColumnName = identifierOrValueExpression;
					}
				}
				else if (!TSql110ParserInternal.tokenSet_106_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) < 230 || this.LA(1) > 233 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.ColumnName = identifierOrValueExpression;
				}
				this.match(206);
				ScalarExpression scalarExpression = this.selectColumnExpression();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.Expression = scalarExpression;
				}
			}
			return selectScalarExpression;
		}

		// Token: 0x06000DA7 RID: 3495 RVA: 0x0005AA90 File Offset: 0x00058C90
		public SelectElement outputClauseSelectElement()
		{
			bool flag = false;
			if (TSql110ParserInternal.tokenSet_96_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_107_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.selectStarExpression();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			SelectElement selectElement;
			if (flag)
			{
				selectElement = this.selectStarExpression();
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_108_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				selectElement = this.outputClauseSelectColumn();
			}
			return selectElement;
		}

		// Token: 0x06000DA8 RID: 3496 RVA: 0x0005AB68 File Offset: 0x00058D68
		public SelectScalarExpression outputClauseSelectColumn()
		{
			SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				selectScalarExpression.Expression = scalarExpression;
			}
			if (TSql110ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_109_.member(this.LA(2)))
			{
				int num = this.LA(1);
				if (num != 9)
				{
					switch (num)
					{
					case 230:
					case 231:
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(9);
				}
				IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.ColumnName = identifierOrValueExpression;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_110_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_111_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return selectScalarExpression;
		}

		// Token: 0x06000DA9 RID: 3497 RVA: 0x0005AC64 File Offset: 0x00058E64
		public ScalarExpression selectColumnExpression()
		{
			int num = this.LA(1);
			if (num <= 133)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_01B1;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_01B1;
						}
					}
				}
				else if (num <= 93)
				{
					switch (num)
					{
					case 79:
						return this.identityFunction();
					case 80:
						goto IL_01B1;
					case 81:
						break;
					default:
						if (num != 93)
						{
							goto IL_01B1;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_01B1;
						}
						break;
					}
				}
			}
			else if (num <= 163)
			{
				if (num <= 141)
				{
					if (num != 136 && num != 141)
					{
						goto IL_01B1;
					}
				}
				else if (num != 147 && num != 163)
				{
					goto IL_01B1;
				}
			}
			else if (num <= 193)
			{
				if (num != 187)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_01B1;
					default:
						goto IL_01B1;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_01B1;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_01B1;
					default:
						goto IL_01B1;
					}
					break;
				}
			}
			return this.expression(ExpressionFlags.None);
			IL_01B1:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DAA RID: 3498 RVA: 0x0005AE38 File Offset: 0x00059038
		public IdentityFunctionCall identityFunction()
		{
			IdentityFunctionCall identityFunctionCall = base.FragmentFactory.CreateFragment<IdentityFunctionCall>();
			IToken token = this.LT(1);
			this.match(79);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identityFunctionCall, token);
			}
			this.match(191);
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				identityFunctionCall.DataType = dataTypeReference;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ScalarExpression scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityFunctionCall.Seed = scalarExpression;
				}
				this.match(198);
				scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityFunctionCall.Increment = scalarExpression;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identityFunctionCall, token2);
			}
			return identityFunctionCall;
		}

		// Token: 0x06000DAB RID: 3499 RVA: 0x0005AF48 File Offset: 0x00059148
		public ScalarExpression seedIncrement()
		{
			ScalarExpression scalarExpression = null;
			UnaryExpression unaryExpression = null;
			int num = this.LA(1);
			switch (num)
			{
			case 197:
			{
				IToken token = this.LT(1);
				this.match(197);
				if (this.inputState.guessing == 0)
				{
					unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Positive;
					goto IL_00CC;
				}
				goto IL_00CC;
			}
			case 198:
				break;
			case 199:
			{
				IToken token2 = this.LT(1);
				this.match(199);
				if (this.inputState.guessing == 0)
				{
					unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token2);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
					goto IL_00CC;
				}
				goto IL_00CC;
			}
			default:
				switch (num)
				{
				case 221:
				case 222:
					goto IL_00CC;
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00CC:
			Literal literal = this.integerOrNumeric();
			if (this.inputState.guessing == 0)
			{
				if (unaryExpression == null)
				{
					scalarExpression = literal;
				}
				else
				{
					unaryExpression.Expression = literal;
					scalarExpression = unaryExpression;
				}
			}
			return scalarExpression;
		}

		// Token: 0x06000DAC RID: 3500 RVA: 0x0005B04C File Offset: 0x0005924C
		public TableSampleClause tableSampleClause()
		{
			TableSampleClause tableSampleClause = base.FragmentFactory.CreateFragment<TableSampleClause>();
			IToken token = this.LT(1);
			this.match(179);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token);
			}
			int num = this.LA(1);
			if (num != 191)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SYSTEM");
					tableSampleClause.System = true;
				}
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				tableSampleClause.SampleNumber = scalarExpression;
			}
			int num2 = this.LA(1);
			if (num2 != 116)
			{
				if (num2 != 192)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token3 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "ROWS");
						tableSampleClause.TableSampleClauseOption = TableSampleClauseOption.Rows;
					}
				}
			}
			else
			{
				this.match(116);
				if (this.inputState.guessing == 0)
				{
					tableSampleClause.TableSampleClauseOption = TableSampleClauseOption.Percent;
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token4);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("REPEATABLE"))
			{
				this.LT(1);
				this.match(232);
				this.match(191);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					tableSampleClause.RepeatSeed = scalarExpression;
				}
				IToken token5 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token5);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_112_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return tableSampleClause;
		}

		// Token: 0x06000DAD RID: 3501 RVA: 0x0005B2A0 File Offset: 0x000594A0
		public FromClause fromClause(SubDmlFlags subDmlFlags)
		{
			FromClause fromClause = base.FragmentFactory.CreateFragment<FromClause>();
			IToken token = this.LT(1);
			this.match(71);
			TableReference tableReference = this.selectTableReferenceWithOdbc(subDmlFlags);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fromClause, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableReference>(fromClause, fromClause.TableReferences, tableReference);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				tableReference = this.selectTableReferenceWithOdbc(subDmlFlags);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableReference>(fromClause, fromClause.TableReferences, tableReference);
				}
			}
			return fromClause;
		}

		// Token: 0x06000DAE RID: 3502 RVA: 0x0005B334 File Offset: 0x00059534
		public TableReference selectTableReferenceWithOdbc(SubDmlFlags subDmlFlags)
		{
			int num = this.LA(1);
			if (num > 186)
			{
				if (num <= 200)
				{
					switch (num)
					{
					case 191:
						goto IL_00AD;
					case 192:
						goto IL_00C1;
					case 193:
						break;
					default:
						if (num != 200)
						{
							goto IL_00C1;
						}
						goto IL_00AD;
					}
				}
				else
				{
					if (num == 203)
					{
						goto IL_00AD;
					}
					switch (num)
					{
					case 232:
					case 233:
					case 234:
						goto IL_00AD;
					case 235:
						break;
					default:
						goto IL_00C1;
					}
				}
				return this.odbcQualifiedJoin(subDmlFlags);
			}
			if (num <= 70)
			{
				if (num != 32 && num != 70)
				{
					goto IL_00C1;
				}
			}
			else
			{
				switch (num)
				{
				case 107:
				case 108:
				case 109:
				case 110:
					break;
				default:
					switch (num)
					{
					case 184:
					case 185:
					case 186:
						break;
					default:
						goto IL_00C1;
					}
					break;
				}
			}
			IL_00AD:
			return this.selectTableReference(subDmlFlags);
			IL_00C1:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DAF RID: 3503 RVA: 0x0005B418 File Offset: 0x00059618
		public TableReference selectTableReference(SubDmlFlags subDmlFlags)
		{
			TableReference tableReference = this.selectTableReferenceElement(subDmlFlags);
			while (TSql110ParserInternal.tokenSet_113_.member(this.LA(1)))
			{
				this.selectTableReferenceAdditionalElement(subDmlFlags, ref tableReference);
			}
			return tableReference;
		}

		// Token: 0x06000DB0 RID: 3504 RVA: 0x0005B44C File Offset: 0x0005964C
		public OdbcQualifiedJoinTableReference odbcQualifiedJoin(SubDmlFlags subDmlFlags)
		{
			OdbcQualifiedJoinTableReference odbcQualifiedJoinTableReference = base.FragmentFactory.CreateFragment<OdbcQualifiedJoinTableReference>();
			IToken token = null;
			int num = this.LA(1);
			if (num != 193)
			{
				if (num != 235)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.odbcInitiator();
			}
			else
			{
				token = this.LT(1);
				this.match(193);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(odbcQualifiedJoinTableReference, token);
				}
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "OJ");
			}
			int num2 = this.LA(1);
			TableReference tableReference;
			if (num2 > 186)
			{
				if (num2 <= 200)
				{
					switch (num2)
					{
					case 191:
						goto IL_0165;
					case 192:
						goto IL_019C;
					case 193:
						break;
					default:
						if (num2 != 200)
						{
							goto IL_019C;
						}
						goto IL_0165;
					}
				}
				else
				{
					if (num2 == 203)
					{
						goto IL_0165;
					}
					switch (num2)
					{
					case 232:
					case 233:
					case 234:
						goto IL_0165;
					case 235:
						break;
					default:
						goto IL_019C;
					}
				}
				tableReference = this.odbcQualifiedJoin(subDmlFlags);
				goto IL_01AF;
			}
			if (num2 <= 70)
			{
				if (num2 != 32 && num2 != 70)
				{
					goto IL_019C;
				}
			}
			else
			{
				switch (num2)
				{
				case 107:
				case 108:
				case 109:
				case 110:
					break;
				default:
					switch (num2)
					{
					case 184:
					case 185:
					case 186:
						break;
					default:
						goto IL_019C;
					}
					break;
				}
			}
			IL_0165:
			tableReference = this.selectTableReference(subDmlFlags);
			if (this.inputState.guessing == 0 && !(tableReference is QualifiedJoin))
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46035", token, TSqlParserResource.SQL46035Message, new string[0]);
				goto IL_01AF;
			}
			goto IL_01AF;
			IL_019C:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_01AF:
			if (this.inputState.guessing == 0)
			{
				odbcQualifiedJoinTableReference.TableReference = tableReference;
			}
			IToken token3 = this.LT(1);
			this.match(194);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcQualifiedJoinTableReference, token3);
			}
			return odbcQualifiedJoinTableReference;
		}

		// Token: 0x06000DB1 RID: 3505 RVA: 0x0005B648 File Offset: 0x00059848
		public TableReference selectTableReferenceElement(SubDmlFlags subDmlFlags)
		{
			bool flag = false;
			if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_114_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.joinParenthesis(subDmlFlags);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			TableReference tableReference;
			if (flag)
			{
				tableReference = this.joinParenthesis(subDmlFlags);
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_114_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_115_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReference = this.selectTableReferenceElementWithoutJoinParenthesis(subDmlFlags);
			}
			return tableReference;
		}

		// Token: 0x06000DB2 RID: 3506 RVA: 0x0005B720 File Offset: 0x00059920
		public void selectTableReferenceAdditionalElement(SubDmlFlags subDmlFlags, ref TableReference vResult)
		{
			int num = this.LA(1);
			if (num <= 90)
			{
				if (num <= 72)
				{
					if (num != 36 && num != 72)
					{
						goto IL_0072;
					}
				}
				else if (num != 85 && num != 90)
				{
					goto IL_0072;
				}
			}
			else if (num <= 114)
			{
				if (num != 93 && num != 114)
				{
					goto IL_0072;
				}
			}
			else if (num != 133)
			{
				switch (num)
				{
				case 177:
					this.pivotedTableReference(ref vResult);
					return;
				case 178:
					this.unpivotedTableReference(ref vResult);
					return;
				default:
					goto IL_0072;
				}
			}
			this.joinElement(subDmlFlags, ref vResult);
			return;
			IL_0072:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DB3 RID: 3507 RVA: 0x0005B7B4 File Offset: 0x000599B4
		public void odbcInitiator()
		{
			IToken token = this.LT(1);
			this.match(235);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46036", token, TSqlParserResource.SQL46036Message, new string[0]);
			}
		}

		// Token: 0x06000DB4 RID: 3508 RVA: 0x0005B7FC File Offset: 0x000599FC
		public OdbcConvertSpecification odbcConvertSpecification()
		{
			OdbcConvertSpecification odbcConvertSpecification = base.FragmentFactory.CreateFragment<OdbcConvertSpecification>();
			Identifier identifier = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				odbcConvertSpecification.Identifier = identifier;
			}
			return odbcConvertSpecification;
		}

		// Token: 0x06000DB5 RID: 3509 RVA: 0x0005B834 File Offset: 0x00059A34
		public ExtractFromExpression extractFromExpression()
		{
			ExtractFromExpression extractFromExpression = base.FragmentFactory.CreateFragment<ExtractFromExpression>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(71);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EXTRACT");
				extractFromExpression.Expression = scalarExpression;
			}
			return extractFromExpression;
		}

		// Token: 0x06000DB6 RID: 3510 RVA: 0x0005B894 File Offset: 0x00059A94
		public OdbcFunctionCall odbcFunctionCall()
		{
			OdbcFunctionCall odbcFunctionCall = base.FragmentFactory.CreateFragment<OdbcFunctionCall>();
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			odbcFunctionCall.ParametersUsed = true;
			IToken token = this.LT(1);
			this.match(193);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcFunctionCall, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "FN");
			}
			if (this.inputState.guessing == 0 && this.LA(1) != 1)
			{
				identifier.SetUnquotedIdentifier(this.LT(1).getText());
				odbcFunctionCall.Name = identifier;
			}
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 43)
				{
					switch (num)
					{
					case 34:
					{
						this.match(34);
						this.match(191);
						ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, scalarExpression);
						}
						this.match(198);
						scalarExpression = this.odbcConvertSpecification();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, scalarExpression);
						}
						this.match(192);
						goto IL_066A;
					}
					case 35:
					case 36:
					case 37:
						goto IL_0657;
					case 38:
						break;
					case 39:
					case 40:
					{
						switch (this.LA(1))
						{
						case 39:
							this.match(39);
							break;
						case 40:
							this.match(40);
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						int num2 = this.LA(1);
						if (num2 == 191)
						{
							this.match(191);
							int num3 = this.LA(1);
							if (num3 <= 101)
							{
								if (num3 <= 34)
								{
									if (num3 != 20 && num3 != 25 && num3 != 34)
									{
										goto IL_0541;
									}
								}
								else if (num3 <= 81)
								{
									switch (num3)
									{
									case 40:
									case 41:
										break;
									default:
										if (num3 != 81)
										{
											goto IL_0541;
										}
										break;
									}
								}
								else if (num3 != 93)
								{
									switch (num3)
									{
									case 100:
									case 101:
										break;
									default:
										goto IL_0541;
									}
								}
							}
							else if (num3 <= 147)
							{
								if (num3 <= 136)
								{
									if (num3 != 133 && num3 != 136)
									{
										goto IL_0541;
									}
								}
								else if (num3 != 141 && num3 != 147)
								{
									goto IL_0541;
								}
							}
							else if (num3 <= 193)
							{
								if (num3 != 163)
								{
									switch (num3)
									{
									case 187:
									case 191:
									case 193:
										break;
									case 188:
									case 189:
									case 190:
										goto IL_0541;
									case 192:
										goto IL_0554;
									default:
										goto IL_0541;
									}
								}
							}
							else
							{
								switch (num3)
								{
								case 197:
								case 199:
								case 200:
									break;
								case 198:
									goto IL_0541;
								default:
									switch (num3)
									{
									case 211:
									case 221:
									case 222:
									case 223:
									case 224:
									case 225:
									case 227:
									case 228:
									case 230:
									case 231:
									case 232:
									case 233:
									case 234:
									case 235:
										break;
									case 212:
									case 213:
									case 214:
									case 215:
									case 216:
									case 217:
									case 218:
									case 219:
									case 220:
									case 226:
									case 229:
										goto IL_0541;
									default:
										goto IL_0541;
									}
									break;
								}
							}
							this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
							goto IL_0554;
							IL_0541:
							throw new NoViableAltException(this.LT(1), this.getFilename());
							IL_0554:
							this.match(192);
							goto IL_066A;
						}
						if (num2 != 194)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						if (this.inputState.guessing == 0)
						{
							odbcFunctionCall.ParametersUsed = false;
							goto IL_066A;
						}
						goto IL_066A;
					}
					default:
						if (num != 43)
						{
							goto IL_0657;
						}
						break;
					}
				}
				else
				{
					if (num != 86 && num != 93)
					{
						goto IL_0657;
					}
					goto IL_02AA;
				}
			}
			else if (num <= 156)
			{
				if (num == 133)
				{
					goto IL_02AA;
				}
				if (num != 156)
				{
					goto IL_0657;
				}
				this.match(156);
				this.match(191);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, scalarExpression);
				}
				this.match(198);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, scalarExpression);
				}
				this.match(192);
				goto IL_066A;
			}
			else if (num != 163)
			{
				if (num != 232)
				{
					goto IL_0657;
				}
				this.match(232);
				this.match(191);
				if (this.LA(1) == 232 && this.LA(2) == 71 && base.NextTokenMatches("EXTRACT"))
				{
					ScalarExpression scalarExpression = this.extractFromExpression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, scalarExpression);
					}
				}
				else if (TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_116_.member(this.LA(2)))
				{
					this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
				}
				else if (this.LA(1) != 192)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(192);
				goto IL_066A;
			}
			int num4 = this.LA(1);
			if (num4 != 38)
			{
				if (num4 != 43)
				{
					if (num4 != 163)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(163);
				}
				else
				{
					this.match(43);
				}
			}
			else
			{
				this.match(38);
			}
			this.match(191);
			this.match(192);
			goto IL_066A;
			IL_02AA:
			int num5 = this.LA(1);
			if (num5 != 86)
			{
				if (num5 != 93)
				{
					if (num5 != 133)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(133);
				}
				else
				{
					this.match(93);
				}
			}
			else
			{
				this.match(86);
			}
			this.match(191);
			this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
			this.match(192);
			goto IL_066A;
			IL_0657:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_066A:
			IToken token3 = this.LT(1);
			this.match(194);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcFunctionCall, token3);
			}
			return odbcFunctionCall;
		}

		// Token: 0x06000DB7 RID: 3511 RVA: 0x0005BF34 File Offset: 0x0005A134
		public TableReference joinTableReference(SubDmlFlags subDmlFlags)
		{
			TableReference tableReference = null;
			bool flag = false;
			if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_114_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.joinParenthesis(subDmlFlags);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				tableReference = this.joinParenthesis(subDmlFlags);
				while (TSql110ParserInternal.tokenSet_117_.member(this.LA(1)))
				{
					this.joinElement(subDmlFlags, ref tableReference);
				}
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_114_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_118_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReference = this.selectTableReferenceElementWithoutJoinParenthesis(subDmlFlags);
				int num2 = 0;
				while (TSql110ParserInternal.tokenSet_117_.member(this.LA(1)))
				{
					this.joinElement(subDmlFlags, ref tableReference);
					num2++;
				}
				if (num2 < 1)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return tableReference;
		}

		// Token: 0x06000DB8 RID: 3512 RVA: 0x0005C068 File Offset: 0x0005A268
		public JoinParenthesisTableReference joinParenthesis(SubDmlFlags subDmlFlags)
		{
			JoinParenthesisTableReference joinParenthesisTableReference = base.FragmentFactory.CreateFragment<JoinParenthesisTableReference>();
			IToken token = this.LT(1);
			this.match(191);
			TableReference tableReference = this.joinTableReference(subDmlFlags);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(joinParenthesisTableReference, token);
				joinParenthesisTableReference.Join = tableReference;
				TSql80ParserBaseInternal.UpdateTokenInfo(joinParenthesisTableReference, token2);
			}
			return joinParenthesisTableReference;
		}

		// Token: 0x06000DB9 RID: 3513 RVA: 0x0005C0D8 File Offset: 0x0005A2D8
		public void joinElement(SubDmlFlags subDmlFlags, ref TableReference vResult)
		{
			int num = this.LA(1);
			if (num <= 85)
			{
				if (num != 36)
				{
					if (num != 72 && num != 85)
					{
						goto IL_0050;
					}
					goto IL_0047;
				}
			}
			else if (num <= 93)
			{
				if (num != 90 && num != 93)
				{
					goto IL_0050;
				}
				goto IL_0047;
			}
			else if (num != 114)
			{
				if (num != 133)
				{
					goto IL_0050;
				}
				goto IL_0047;
			}
			this.unqualifiedJoin(subDmlFlags, ref vResult);
			return;
			IL_0047:
			this.qualifiedJoin(subDmlFlags, ref vResult);
			return;
			IL_0050:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DBA RID: 3514 RVA: 0x0005C148 File Offset: 0x0005A348
		public TableReference selectTableReferenceElementWithoutJoinParenthesis(SubDmlFlags subDmlFlags)
		{
			int num = this.LA(1);
			if (num <= 70)
			{
				if (num == 32 || num == 70)
				{
					return this.fulltextTableReference();
				}
			}
			else
			{
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					return this.openRowset();
				case 110:
					return this.openXmlTableReference();
				default:
					switch (num)
					{
					case 184:
					case 185:
					case 186:
						return this.semanticTableReference();
					default:
						if (num == 203)
						{
							return this.builtInFunctionTableReference();
						}
						break;
					}
					break;
				}
			}
			TableReference tableReference;
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CHANGETABLE"))
			{
				tableReference = this.changeTableTableReference();
			}
			else if (this.LA(1) == 234 && TSql110ParserInternal.tokenSet_119_.member(this.LA(2)))
			{
				tableReference = this.variableTableReference();
			}
			else if (this.LA(1) == 234 && this.LA(2) == 200)
			{
				tableReference = this.variableMethodCallTableReference();
			}
			else if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 164 || this.LA(2) == 191))
			{
				tableReference = this.derivedTable(subDmlFlags);
			}
			else if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_120_.member(this.LA(2)))
			{
				tableReference = this.subDmlTableReference(subDmlFlags);
			}
			else
			{
				if ((this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) || !TSql110ParserInternal.tokenSet_121_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReference = this.schemaObjectOrFunctionTableReference();
			}
			return tableReference;
		}

		// Token: 0x06000DBB RID: 3515 RVA: 0x0005C33C File Offset: 0x0005A53C
		public void pivotedTableReference(ref TableReference vResult)
		{
			PivotedTableReference pivotedTableReference = base.FragmentFactory.CreateFragment<PivotedTableReference>();
			pivotedTableReference.TableReference = vResult;
			vResult = pivotedTableReference;
			this.match(177);
			this.match(191);
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(4);
			if (this.inputState.guessing == 0)
			{
				pivotedTableReference.AggregateFunctionIdentifier = multiPartIdentifier;
			}
			this.match(191);
			ColumnReferenceExpression columnReferenceExpression = this.fixedColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(pivotedTableReference, pivotedTableReference.ValueColumns, columnReferenceExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnReferenceExpression = this.fixedColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(pivotedTableReference, pivotedTableReference.ValueColumns, columnReferenceExpression);
				}
			}
			this.match(192);
			this.match(67);
			columnReferenceExpression = this.fixedColumn();
			if (this.inputState.guessing == 0)
			{
				pivotedTableReference.PivotColumn = columnReferenceExpression;
			}
			this.match(83);
			this.columnNameList(pivotedTableReference, pivotedTableReference.InColumns);
			this.match(192);
			this.simpleTableReferenceAlias(pivotedTableReference);
		}

		// Token: 0x06000DBC RID: 3516 RVA: 0x0005C450 File Offset: 0x0005A650
		public void unpivotedTableReference(ref TableReference vResult)
		{
			UnpivotedTableReference unpivotedTableReference = base.FragmentFactory.CreateFragment<UnpivotedTableReference>();
			unpivotedTableReference.TableReference = vResult;
			vResult = unpivotedTableReference;
			this.match(178);
			this.match(191);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				unpivotedTableReference.ValueColumn = identifier;
			}
			this.match(67);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				unpivotedTableReference.PivotColumn = identifier;
			}
			this.match(83);
			this.columnListWithParenthesis(unpivotedTableReference, unpivotedTableReference.InColumns);
			this.match(192);
			this.simpleTableReferenceAlias(unpivotedTableReference);
		}

		// Token: 0x06000DBD RID: 3517 RVA: 0x0005C4F0 File Offset: 0x0005A6F0
		public ColumnReferenceExpression fixedColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			columnReferenceExpression.ColumnType = ColumnType.Regular;
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(4);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06000DBE RID: 3518 RVA: 0x0005C534 File Offset: 0x0005A734
		public void columnListWithParenthesis(TSqlFragment vParent, IList<ColumnReferenceExpression> columns)
		{
			this.match(191);
			ColumnReferenceExpression columnReferenceExpression = this.fixedColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, columnReferenceExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnReferenceExpression = this.fixedColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, columnReferenceExpression);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000DBF RID: 3519 RVA: 0x0005C5C8 File Offset: 0x0005A7C8
		public ColumnReferenceExpression identifierColumnReferenceExpression()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(1);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.ColumnType = ColumnType.Regular;
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
			}
			return columnReferenceExpression;
		}

		// Token: 0x06000DC0 RID: 3520 RVA: 0x0005C608 File Offset: 0x0005A808
		public void unqualifiedJoin(SubDmlFlags subDmlFlags, ref TableReference vResult)
		{
			UnqualifiedJoin unqualifiedJoin = base.FragmentFactory.CreateFragment<UnqualifiedJoin>();
			int num = this.LA(1);
			if (num != 36)
			{
				if (num != 114)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(114);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "APPLY");
					unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.OuterApply;
				}
			}
			else
			{
				this.match(36);
				int num2 = this.LA(1);
				if (num2 != 90)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "APPLY");
						unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.CrossApply;
					}
				}
				else
				{
					this.match(90);
					if (this.inputState.guessing == 0)
					{
						unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.CrossJoin;
					}
				}
			}
			TableReference tableReference = this.selectTableReferenceElement(subDmlFlags);
			if (this.inputState.guessing == 0)
			{
				unqualifiedJoin.FirstTableReference = vResult;
				unqualifiedJoin.SecondTableReference = tableReference;
				vResult = unqualifiedJoin;
			}
		}

		// Token: 0x06000DC1 RID: 3521 RVA: 0x0005C748 File Offset: 0x0005A948
		public void qualifiedJoin(SubDmlFlags subDmlFlags, ref TableReference vResult)
		{
			QualifiedJoin qualifiedJoin = base.FragmentFactory.CreateFragment<QualifiedJoin>();
			int num = this.LA(1);
			if (num <= 85)
			{
				if (num != 72 && num != 85)
				{
					goto IL_026B;
				}
			}
			else if (num != 90)
			{
				if (num != 93 && num != 133)
				{
					goto IL_026B;
				}
			}
			else
			{
				this.match(90);
				if (this.inputState.guessing == 0)
				{
					qualifiedJoin.QualifiedJoinType = QualifiedJoinType.Inner;
					goto IL_027E;
				}
				goto IL_027E;
			}
			int num2 = this.LA(1);
			if (num2 <= 85)
			{
				if (num2 != 72)
				{
					if (num2 == 85)
					{
						this.match(85);
						if (this.inputState.guessing == 0)
						{
							qualifiedJoin.QualifiedJoinType = QualifiedJoinType.Inner;
							goto IL_0224;
						}
						goto IL_0224;
					}
				}
				else
				{
					this.match(72);
					int num3 = this.LA(1);
					if (num3 <= 114)
					{
						if (num3 == 90)
						{
							goto IL_01FB;
						}
						if (num3 == 114)
						{
							this.match(114);
							goto IL_01FB;
						}
					}
					else if (num3 == 182 || num3 == 232)
					{
						goto IL_01FB;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_01FB:
					if (this.inputState.guessing == 0)
					{
						qualifiedJoin.QualifiedJoinType = QualifiedJoinType.FullOuter;
						goto IL_0224;
					}
					goto IL_0224;
				}
			}
			else if (num2 != 93)
			{
				if (num2 == 133)
				{
					this.match(133);
					int num4 = this.LA(1);
					if (num4 <= 114)
					{
						if (num4 == 90)
						{
							goto IL_018C;
						}
						if (num4 == 114)
						{
							this.match(114);
							goto IL_018C;
						}
					}
					else if (num4 == 182 || num4 == 232)
					{
						goto IL_018C;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_018C:
					if (this.inputState.guessing == 0)
					{
						qualifiedJoin.QualifiedJoinType = QualifiedJoinType.RightOuter;
						goto IL_0224;
					}
					goto IL_0224;
				}
			}
			else
			{
				this.match(93);
				int num5 = this.LA(1);
				if (num5 <= 114)
				{
					if (num5 == 90)
					{
						goto IL_0117;
					}
					if (num5 == 114)
					{
						this.match(114);
						goto IL_0117;
					}
				}
				else if (num5 == 182 || num5 == 232)
				{
					goto IL_0117;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0117:
				if (this.inputState.guessing == 0)
				{
					qualifiedJoin.QualifiedJoinType = QualifiedJoinType.LeftOuter;
					goto IL_0224;
				}
				goto IL_0224;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0224:
			int num6 = this.LA(1);
			if (num6 != 90)
			{
				if (num6 != 182 && num6 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.joinHint(qualifiedJoin);
			}
			this.match(90);
			goto IL_027E;
			IL_026B:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_027E:
			TableReference tableReference = this.selectTableReferenceWithOdbc(subDmlFlags);
			if (this.inputState.guessing == 0)
			{
				qualifiedJoin.FirstTableReference = vResult;
				qualifiedJoin.SecondTableReference = tableReference;
			}
			this.match(105);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				qualifiedJoin.SearchCondition = booleanExpression;
				vResult = qualifiedJoin;
			}
		}

		// Token: 0x06000DC2 RID: 3522 RVA: 0x0005CA20 File Offset: 0x0005AC20
		public TableReferenceWithAliasAndColumns changeTableTableReference()
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CHANGETABLE");
			}
			IToken token2 = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			this.match(198);
			int num = this.LA(1);
			TableReferenceWithAliasAndColumns tableReferenceWithAliasAndColumns;
			if (num <= 191)
			{
				if (num != 100)
				{
					if (num != 191)
					{
						goto IL_00D8;
					}
					tableReferenceWithAliasAndColumns = this.versionChangeTableParams(schemaObjectName);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "VERSION");
						goto IL_00EB;
					}
					goto IL_00EB;
				}
			}
			else if (num != 221 && num != 234)
			{
				goto IL_00D8;
			}
			tableReferenceWithAliasAndColumns = this.changesChangeTableParams(schemaObjectName);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "CHANGES");
				goto IL_00EB;
			}
			goto IL_00EB;
			IL_00D8:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00EB:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableReferenceWithAliasAndColumns, token);
			}
			this.match(192);
			this.simpleTableReferenceAlias(tableReferenceWithAliasAndColumns);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(tableReferenceWithAliasAndColumns, tableReferenceWithAliasAndColumns.Columns);
			}
			else if (!TSql110ParserInternal.tokenSet_93_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return tableReferenceWithAliasAndColumns;
		}

		// Token: 0x06000DC3 RID: 3523 RVA: 0x0005CBB4 File Offset: 0x0005ADB4
		public BuiltInFunctionTableReference builtInFunctionTableReference()
		{
			BuiltInFunctionTableReference builtInFunctionTableReference = base.FragmentFactory.CreateFragment<BuiltInFunctionTableReference>();
			IToken token = this.LT(1);
			this.match(203);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(builtInFunctionTableReference, token);
				builtInFunctionTableReference.Name = identifier;
			}
			this.match(191);
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_0262;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_0262;
						}
					}
				}
				else if (num <= 81)
				{
					if (num != 47 && num != 81)
					{
						goto IL_0262;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_0262;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_0262;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_0262;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 187:
					case 191:
					case 193:
						break;
					case 188:
					case 189:
					case 190:
						goto IL_0262;
					case 192:
						goto IL_0275;
					default:
						goto IL_0262;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_0262;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_0262;
					default:
						goto IL_0262;
					}
					break;
				}
			}
			ScalarExpression scalarExpression = this.expressionWithDefault();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(builtInFunctionTableReference, builtInFunctionTableReference.Parameters, scalarExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(builtInFunctionTableReference, builtInFunctionTableReference.Parameters, scalarExpression);
				}
			}
			goto IL_0275;
			IL_0262:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0275:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(builtInFunctionTableReference, token2);
			}
			this.simpleTableReferenceAliasOpt(builtInFunctionTableReference);
			return builtInFunctionTableReference;
		}

		// Token: 0x06000DC4 RID: 3524 RVA: 0x0005CE68 File Offset: 0x0005B068
		public VariableTableReference variableTableReference()
		{
			VariableTableReference variableTableReference = base.FragmentFactory.CreateFragment<VariableTableReference>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				variableTableReference.Variable = variableReference;
			}
			this.simpleTableReferenceAliasOpt(variableTableReference);
			return variableTableReference;
		}

		// Token: 0x06000DC5 RID: 3525 RVA: 0x0005CEA4 File Offset: 0x0005B0A4
		public VariableMethodCallTableReference variableMethodCallTableReference()
		{
			VariableMethodCallTableReference variableMethodCallTableReference = base.FragmentFactory.CreateFragment<VariableMethodCallTableReference>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				variableMethodCallTableReference.Variable = variableReference;
			}
			this.match(200);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				variableMethodCallTableReference.MethodName = identifier;
			}
			this.parenthesizedOptExpressionWithDefaultList(variableMethodCallTableReference, variableMethodCallTableReference.Parameters);
			this.simpleTableReferenceAlias(variableMethodCallTableReference);
			this.columnNameList(variableMethodCallTableReference, variableMethodCallTableReference.Columns);
			return variableMethodCallTableReference;
		}

		// Token: 0x06000DC6 RID: 3526 RVA: 0x0005CF20 File Offset: 0x0005B120
		public TableReferenceWithAlias openRowset()
		{
			TableReferenceWithAlias tableReferenceWithAlias;
			switch (this.LA(1))
			{
			case 107:
				tableReferenceWithAlias = this.adhocRowset();
				this.simpleTableReferenceAliasOpt(tableReferenceWithAlias);
				break;
			case 108:
				tableReferenceWithAlias = this.openQueryRowset();
				this.simpleTableReferenceAliasOpt(tableReferenceWithAlias);
				break;
			case 109:
				tableReferenceWithAlias = this.openRowsetRowset();
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return tableReferenceWithAlias;
		}

		// Token: 0x06000DC7 RID: 3527 RVA: 0x0005CF8C File Offset: 0x0005B18C
		public FullTextTableReference fulltextTableReference()
		{
			FullTextTableReference fullTextTableReference = base.FragmentFactory.CreateFragment<FullTextTableReference>();
			this.fullTextTable(fullTextTableReference);
			this.match(191);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				fullTextTableReference.TableName = schemaObjectName;
			}
			this.match(198);
			this.fulltextTableColumnList(fullTextTableReference);
			this.match(198);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				fullTextTableReference.SearchCondition = valueExpression;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.fulltextTableOptions(fullTextTableReference);
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fullTextTableReference, token);
			}
			this.simpleTableReferenceAliasOpt(fullTextTableReference);
			return fullTextTableReference;
		}

		// Token: 0x06000DC8 RID: 3528 RVA: 0x0005D074 File Offset: 0x0005B274
		public SemanticTableReference semanticTableReference()
		{
			SemanticTableReference semanticTableReference = base.FragmentFactory.CreateFragment<SemanticTableReference>();
			switch (this.LA(1))
			{
			case 184:
				this.semanticKeyPhraseTableReference(semanticTableReference);
				break;
			case 185:
				this.semanticSimilarityTableReference(semanticTableReference);
				break;
			case 186:
				this.semanticSimilarityDetailsTableReference(semanticTableReference);
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return semanticTableReference;
		}

		// Token: 0x06000DC9 RID: 3529 RVA: 0x0005D0E0 File Offset: 0x0005B2E0
		public OpenXmlTableReference openXmlTableReference()
		{
			IToken token = this.LT(1);
			this.match(110);
			this.match(191);
			OpenXmlTableReference openXmlTableReference = this.openXmlParams();
			IToken token2 = this.LT(1);
			this.match(192);
			this.openXmlWithClauseOpt(openXmlTableReference);
			this.simpleTableReferenceAliasOpt(openXmlTableReference);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(openXmlTableReference, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(openXmlTableReference, token2);
			}
			return openXmlTableReference;
		}

		// Token: 0x06000DCA RID: 3530 RVA: 0x0005D150 File Offset: 0x0005B350
		public DataModificationTableReference subDmlTableReference(SubDmlFlags subDmlFlags)
		{
			DataModificationTableReference dataModificationTableReference = base.FragmentFactory.CreateFragment<DataModificationTableReference>();
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(dataModificationTableReference, token);
				if ((subDmlFlags & SubDmlFlags.InsideSubDml) == SubDmlFlags.InsideSubDml)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46075", token, TSqlParserResource.SQL46075Message, new string[0]);
				}
			}
			DataModificationSpecification dataModificationSpecification = this.innerDmlStatement();
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				if ((subDmlFlags & SubDmlFlags.SelectNotForInsert) == SubDmlFlags.SelectNotForInsert)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46076", dataModificationSpecification, TSqlParserResource.SQL46076Message, new string[0]);
				}
				if ((subDmlFlags & SubDmlFlags.UpdateDeleteFrom) == SubDmlFlags.UpdateDeleteFrom)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46077", dataModificationSpecification, TSqlParserResource.SQL46077Message, new string[0]);
				}
				if ((subDmlFlags & SubDmlFlags.MergeUsing) == SubDmlFlags.MergeUsing)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46078", dataModificationSpecification, TSqlParserResource.SQL46078Message, new string[0]);
				}
				dataModificationTableReference.DataModificationSpecification = dataModificationSpecification;
			}
			this.simpleTableReferenceAlias(dataModificationTableReference);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(dataModificationTableReference, dataModificationTableReference.Columns);
			}
			else if (!TSql110ParserInternal.tokenSet_93_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return dataModificationTableReference;
		}

		// Token: 0x06000DCB RID: 3531 RVA: 0x0005D2A4 File Offset: 0x0005B4A4
		public TableReference schemaObjectOrFunctionTableReference()
		{
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			TableReference tableReference;
			if (TSql110ParserInternal.tokenSet_122_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_94_.member(this.LA(2)) && base.IsTableReference(false))
			{
				tableReference = this.schemaObjectTableReference(schemaObjectName);
			}
			else
			{
				if (this.LA(1) != 191 || !TSql110ParserInternal.tokenSet_123_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReference = this.schemaObjectFunctionTableReference(schemaObjectName);
			}
			return tableReference;
		}

		// Token: 0x06000DCC RID: 3532 RVA: 0x0005D330 File Offset: 0x0005B530
		public ChangeTableChangesTableReference changesChangeTableParams(SchemaObjectName vTarget)
		{
			ChangeTableChangesTableReference changeTableChangesTableReference = base.FragmentFactory.CreateFragment<ChangeTableChangesTableReference>();
			changeTableChangesTableReference.Target = vTarget;
			int num = this.LA(1);
			if (num != 100)
			{
				if (num != 221 && num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				ValueExpression valueExpression = this.integerOrVariable();
				if (this.inputState.guessing == 0)
				{
					changeTableChangesTableReference.SinceVersion = valueExpression;
				}
			}
			else
			{
				ValueExpression valueExpression = this.nullLiteral();
				if (this.inputState.guessing == 0)
				{
					changeTableChangesTableReference.SinceVersion = valueExpression;
				}
			}
			return changeTableChangesTableReference;
		}

		// Token: 0x06000DCD RID: 3533 RVA: 0x0005D3BC File Offset: 0x0005B5BC
		public ChangeTableVersionTableReference versionChangeTableParams(SchemaObjectName vTarget)
		{
			ChangeTableVersionTableReference changeTableVersionTableReference = base.FragmentFactory.CreateFragment<ChangeTableVersionTableReference>();
			changeTableVersionTableReference.Target = vTarget;
			this.columnNameList(changeTableVersionTableReference, changeTableVersionTableReference.PrimaryKeyColumns);
			this.match(198);
			this.match(191);
			this.expressionList(changeTableVersionTableReference, changeTableVersionTableReference.PrimaryKeyValues);
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(changeTableVersionTableReference, token);
			}
			return changeTableVersionTableReference;
		}

		// Token: 0x06000DCE RID: 3534 RVA: 0x0005D438 File Offset: 0x0005B638
		public DataModificationSpecification innerDmlStatement()
		{
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num == 48)
				{
					return this.deleteSpecification(SubDmlFlags.InsideSubDml);
				}
				if (num == 86)
				{
					return this.insertSpecification(SubDmlFlags.InsideSubDml);
				}
			}
			else
			{
				if (num == 160)
				{
					return this.updateSpecification(SubDmlFlags.InsideSubDml);
				}
				if (num == 182)
				{
					return this.mergeSpecification(SubDmlFlags.InsideSubDml);
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DCF RID: 3535 RVA: 0x0005D4AC File Offset: 0x0005B6AC
		public InsertSpecification insertSpecification(SubDmlFlags subDmlFlags)
		{
			InsertSpecification insertSpecification = base.FragmentFactory.CreateFragment<InsertSpecification>();
			IToken token = this.LT(1);
			this.match(86);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token);
			}
			this.dmlTopRowFilterOpt(insertSpecification);
			int num = this.LA(1);
			if (num <= 109)
			{
				if (num != 88)
				{
					switch (num)
					{
					case 107:
					case 108:
					case 109:
						goto IL_00E6;
					}
				}
				else
				{
					this.match(88);
					if (this.inputState.guessing == 0)
					{
						insertSpecification.InsertOption = InsertOption.Into;
						goto IL_00E6;
					}
					goto IL_00E6;
				}
			}
			else if (num != 115)
			{
				if (num == 200)
				{
					goto IL_00E6;
				}
				switch (num)
				{
				case 232:
				case 233:
				case 234:
					goto IL_00E6;
				}
			}
			else
			{
				this.match(115);
				if (this.inputState.guessing == 0)
				{
					insertSpecification.InsertOption = InsertOption.Over;
					goto IL_00E6;
				}
				goto IL_00E6;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00E6:
			TableReference tableReference = this.dmlTarget(false);
			if (this.inputState.guessing == 0)
			{
				insertSpecification.Target = tableReference;
			}
			bool flag = false;
			if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_124_.member(this.LA(2)))
			{
				int num2 = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					int num3 = this.LA(1);
					if (num3 != 200)
					{
						if (num3 != 227)
						{
							switch (num3)
							{
							case 232:
								this.match(232);
								break;
							case 233:
								this.match(233);
								break;
							default:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(227);
						}
					}
					else
					{
						this.match(200);
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num2);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken token2 = this.LT(1);
				this.match(191);
				ColumnReferenceExpression columnReferenceExpression = this.insertColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token2);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(insertSpecification, insertSpecification.Columns, columnReferenceExpression);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					columnReferenceExpression = this.insertColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(insertSpecification, insertSpecification.Columns, columnReferenceExpression);
					}
				}
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token3);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_125_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_126_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.outputClauseOpt(subDmlFlags, insertSpecification);
			int num4 = this.LA(1);
			InsertSource insertSource;
			if (num4 > 61)
			{
				if (num4 != 140)
				{
					if (num4 == 164)
					{
						goto IL_0325;
					}
					if (num4 != 191)
					{
						goto IL_0344;
					}
				}
				insertSource = this.selectInsertSource(subDmlFlags);
				goto IL_0357;
			}
			if (num4 != 47)
			{
				switch (num4)
				{
				case 60:
				case 61:
					insertSource = this.executeInsertSource();
					goto IL_0357;
				default:
					goto IL_0344;
				}
			}
			IL_0325:
			insertSource = this.valuesInsertSource();
			goto IL_0357;
			IL_0344:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0357:
			if (this.inputState.guessing == 0)
			{
				insertSpecification.InsertSource = insertSource;
			}
			return insertSpecification;
		}

		// Token: 0x06000DD0 RID: 3536 RVA: 0x0005D838 File Offset: 0x0005BA38
		public UpdateSpecification updateSpecification(SubDmlFlags subDmlFlags)
		{
			UpdateSpecification updateSpecification = base.FragmentFactory.CreateFragment<UpdateSpecification>();
			IToken token = this.LT(1);
			this.match(160);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateSpecification, token);
			}
			this.dmlTopRowFilterOpt(updateSpecification);
			TableReference tableReference = this.dmlTarget(false);
			if (this.inputState.guessing == 0)
			{
				updateSpecification.Target = tableReference;
			}
			this.setClausesList(updateSpecification, updateSpecification.SetClauses);
			this.outputClauseOpt(subDmlFlags, updateSpecification);
			FromClause fromClause = this.fromClauseOpt(subDmlFlags | SubDmlFlags.UpdateDeleteFrom);
			if (this.inputState.guessing == 0)
			{
				updateSpecification.FromClause = fromClause;
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return updateSpecification;
						}
						switch (num)
						{
						case 4:
						case 6:
							return updateSpecification;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return updateSpecification;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return updateSpecification;
							default:
								if (num == 28)
								{
									return updateSpecification;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return updateSpecification;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return updateSpecification;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return updateSpecification;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return updateSpecification;
				}
			}
			else if (num <= 172)
			{
				if (num <= 111)
				{
					if (num == 95 || num == 106 || num == 111)
					{
						return updateSpecification;
					}
				}
				else
				{
					if (num == 119)
					{
						return updateSpecification;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return updateSpecification;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return updateSpecification;
						case 169:
						{
							WhereClause whereClause = this.dmlWhereClause(subDmlFlags);
							if (this.inputState.guessing == 0)
							{
								updateSpecification.WhereClause = whereClause;
								return updateSpecification;
							}
							return updateSpecification;
						}
						}
						break;
					}
				}
			}
			else if (num <= 192)
			{
				if (num == 176 || num == 182)
				{
					return updateSpecification;
				}
				switch (num)
				{
				case 191:
				case 192:
					return updateSpecification;
				}
			}
			else
			{
				if (num == 204)
				{
					return updateSpecification;
				}
				switch (num)
				{
				case 219:
				case 220:
					return updateSpecification;
				default:
					if (num == 232)
					{
						return updateSpecification;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DD1 RID: 3537 RVA: 0x0005DB84 File Offset: 0x0005BD84
		public DeleteSpecification deleteSpecification(SubDmlFlags subDmlFlags)
		{
			DeleteSpecification deleteSpecification = base.FragmentFactory.CreateFragment<DeleteSpecification>();
			IToken token = this.LT(1);
			this.match(48);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(deleteSpecification, token);
			}
			this.dmlTopRowFilterOpt(deleteSpecification);
			int num = this.LA(1);
			if (num <= 109)
			{
				if (num == 71)
				{
					this.match(71);
					goto IL_00A7;
				}
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					goto IL_00A7;
				}
			}
			else
			{
				if (num == 200)
				{
					goto IL_00A7;
				}
				switch (num)
				{
				case 232:
				case 233:
				case 234:
					goto IL_00A7;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00A7:
			TableReference tableReference = this.dmlTarget(false);
			if (this.inputState.guessing == 0)
			{
				deleteSpecification.Target = tableReference;
			}
			this.outputClauseOpt(subDmlFlags, deleteSpecification);
			FromClause fromClause = this.fromClauseOpt(subDmlFlags | SubDmlFlags.UpdateDeleteFrom);
			if (this.inputState.guessing == 0)
			{
				deleteSpecification.FromClause = fromClause;
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							return deleteSpecification;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return deleteSpecification;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return deleteSpecification;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								return deleteSpecification;
							default:
								if (num2 == 28)
								{
									return deleteSpecification;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 33:
					case 35:
						return deleteSpecification;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return deleteSpecification;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return deleteSpecification;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					return deleteSpecification;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 111)
				{
					if (num2 == 95 || num2 == 106 || num2 == 111)
					{
						return deleteSpecification;
					}
				}
				else
				{
					if (num2 == 119)
					{
						return deleteSpecification;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return deleteSpecification;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return deleteSpecification;
						case 169:
						{
							WhereClause whereClause = this.dmlWhereClause(subDmlFlags);
							if (this.inputState.guessing == 0)
							{
								deleteSpecification.WhereClause = whereClause;
								return deleteSpecification;
							}
							return deleteSpecification;
						}
						}
						break;
					}
				}
			}
			else if (num2 <= 192)
			{
				if (num2 == 176 || num2 == 182)
				{
					return deleteSpecification;
				}
				switch (num2)
				{
				case 191:
				case 192:
					return deleteSpecification;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return deleteSpecification;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return deleteSpecification;
				default:
					if (num2 == 232)
					{
						return deleteSpecification;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DD2 RID: 3538 RVA: 0x0005DF30 File Offset: 0x0005C130
		public MergeSpecification mergeSpecification(SubDmlFlags subDmlFlags)
		{
			MergeSpecification mergeSpecification = base.FragmentFactory.CreateFragment<MergeSpecification>();
			IToken token = this.LT(1);
			this.match(182);
			this.dmlTopRowFilterOpt(mergeSpecification);
			int num = this.LA(1);
			if (num <= 109)
			{
				if (num == 88)
				{
					this.match(88);
					goto IL_0098;
				}
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					goto IL_0098;
				}
			}
			else
			{
				if (num == 200)
				{
					goto IL_0098;
				}
				switch (num)
				{
				case 232:
				case 233:
				case 234:
					goto IL_0098;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0098:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(mergeSpecification, token);
			}
			TableReference tableReference = this.dmlTarget(true);
			if (this.inputState.guessing == 0)
			{
				mergeSpecification.Target = tableReference;
			}
			if (this.LA(1) == 9)
			{
				this.match(9);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					mergeSpecification.TableAlias = identifier;
				}
			}
			else if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 232 && !base.NextTokenMatches("USING"))
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					mergeSpecification.TableAlias = identifier;
				}
			}
			else if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_127_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "USING");
			}
			TableReference tableReference2 = this.selectTableReferenceWithOdbc(subDmlFlags | SubDmlFlags.MergeUsing);
			if (this.inputState.guessing == 0)
			{
				mergeSpecification.TableReference = tableReference2;
			}
			this.match(105);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				mergeSpecification.SearchCondition = booleanExpression;
			}
			int num2 = 0;
			while (this.LA(1) == 168)
			{
				MergeActionClause mergeActionClause = this.mergeActionClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<MergeActionClause>(mergeSpecification, mergeSpecification.ActionClauses, mergeActionClause);
				}
				num2++;
			}
			if (num2 < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.outputClauseOpt(subDmlFlags, mergeSpecification);
			return mergeSpecification;
		}

		// Token: 0x06000DD3 RID: 3539 RVA: 0x0005E198 File Offset: 0x0005C398
		public void joinHint(QualifiedJoin vParent)
		{
			int num = this.LA(1);
			if (num != 182)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				int num2 = this.LA(1);
				if (num2 != 90)
				{
					if (num2 != 182)
					{
						if (num2 != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token2 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token, "LOCAL");
							vParent.JoinHint = JoinHintHelper.Instance.ParseOption(token2);
							if (vParent.JoinHint == JoinHint.Remote)
							{
								TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
								return;
							}
						}
					}
					else
					{
						this.LT(1);
						this.match(182);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token, "LOCAL");
							vParent.JoinHint = JoinHint.Merge;
							return;
						}
					}
				}
				else if (this.inputState.guessing == 0)
				{
					vParent.JoinHint = JoinHintHelper.Instance.ParseOption(token);
					return;
				}
			}
			else
			{
				this.match(182);
				if (this.inputState.guessing == 0)
				{
					vParent.JoinHint = JoinHint.Merge;
					return;
				}
			}
		}

		// Token: 0x06000DD4 RID: 3540 RVA: 0x0005E2E8 File Offset: 0x0005C4E8
		public ScalarExpression expressionWithDefault()
		{
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_01A4;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_01A4;
						}
					}
				}
				else if (num <= 81)
				{
					if (num == 47)
					{
						return this.defaultLiteral();
					}
					if (num != 81)
					{
						goto IL_01A4;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_01A4;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_01A4;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_01A4;
				}
			}
			else if (num <= 187)
			{
				if (num != 163 && num != 187)
				{
					goto IL_01A4;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
					break;
				case 192:
					goto IL_01A4;
				default:
					switch (num)
					{
					case 197:
					case 199:
					case 200:
						break;
					case 198:
						goto IL_01A4;
					default:
						switch (num)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							break;
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 226:
						case 229:
							goto IL_01A4;
						default:
							goto IL_01A4;
						}
						break;
					}
					break;
				}
			}
			return this.expression(ExpressionFlags.None);
			IL_01A4:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DD5 RID: 3541 RVA: 0x0005E4B0 File Offset: 0x0005C6B0
		public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent)
		{
			if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_128_.member(this.LA(2)))
			{
				this.simpleTableReferenceAlias(vParent);
				return;
			}
			if (TSql110ParserInternal.tokenSet_128_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DD6 RID: 3542 RVA: 0x0005E538 File Offset: 0x0005C738
		public ScalarExpression signedIntegerOrStringOrVariable()
		{
			int num = this.LA(1);
			if (num != 199 && num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
				case 234:
					return this.stringOrVariable();
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return this.signedInteger();
		}

		// Token: 0x06000DD7 RID: 3543 RVA: 0x0005E5A8 File Offset: 0x0005C7A8
		public ScalarExpression possibleNegativeConstant()
		{
			int num = this.LA(1);
			if (num <= 193)
			{
				if (num != 100 && num != 193)
				{
					goto IL_007F;
				}
			}
			else
			{
				if (num == 199)
				{
					return this.negativeConstant();
				}
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
				case 232:
				case 233:
					goto IL_007F;
				default:
					goto IL_007F;
				}
			}
			return this.literal();
			IL_007F:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DD8 RID: 3544 RVA: 0x0005E648 File Offset: 0x0005C848
		public void outputIntoOutputClause(DataModificationSpecification vParent)
		{
			List<SelectElement> list = new List<SelectElement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OUTPUT");
			}
			SelectElement selectElement = this.outputClauseSelectElement();
			if (this.inputState.guessing == 0)
			{
				list.Add(selectElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				selectElement = this.outputClauseSelectElement();
				if (this.inputState.guessing == 0)
				{
					list.Add(selectElement);
				}
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num != 1)
						{
							switch (num)
							{
							case 4:
							case 6:
								break;
							case 5:
								goto IL_0419;
							default:
								goto IL_0419;
							}
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							break;
						case 14:
						case 16:
							goto IL_0419;
						default:
							switch (num)
							{
							case 22:
							case 23:
								break;
							default:
								if (num != 28)
								{
									goto IL_0419;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						break;
					case 34:
						goto IL_0419;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 47:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							break;
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							goto IL_0419;
						default:
							switch (num)
							{
							case 71:
							case 74:
							case 75:
								break;
							case 72:
							case 73:
								goto IL_0419;
							default:
								goto IL_0419;
							}
							break;
						}
						break;
					}
				}
				else if (num != 82)
				{
					switch (num)
					{
					case 86:
						break;
					case 87:
						goto IL_0419;
					case 88:
					{
						OutputIntoClause outputIntoClause = this.outputIntoClause(token, list);
						if (this.inputState.guessing == 0)
						{
							vParent.OutputIntoClause = outputIntoClause;
						}
						if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_129_.member(this.LA(2)) && base.NextTokenMatches("OUTPUT"))
						{
							OutputClause outputClause = this.outputClause();
							if (this.inputState.guessing == 0)
							{
								vParent.OutputClause = outputClause;
								return;
							}
							return;
						}
						else
						{
							if (TSql110ParserInternal.tokenSet_130_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_111_.member(this.LA(2)))
							{
								return;
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						break;
					}
					default:
						if (num != 92)
						{
							goto IL_0419;
						}
						break;
					}
				}
			}
			else if (num <= 144)
			{
				if (num <= 106)
				{
					if (num != 95 && num != 106)
					{
						goto IL_0419;
					}
				}
				else if (num != 111 && num != 119)
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						goto IL_0419;
					default:
						goto IL_0419;
					}
				}
			}
			else if (num <= 192)
			{
				switch (num)
				{
				case 156:
				case 160:
				case 161:
				case 162:
				case 164:
				case 167:
				case 169:
				case 170:
				case 171:
				case 172:
				case 176:
					break;
				case 157:
				case 158:
				case 159:
				case 163:
				case 165:
				case 166:
				case 168:
				case 173:
				case 174:
				case 175:
					goto IL_0419;
				default:
					if (num != 182)
					{
						switch (num)
						{
						case 191:
						case 192:
							break;
						default:
							goto IL_0419;
						}
					}
					break;
				}
			}
			else if (num != 204)
			{
				switch (num)
				{
				case 219:
				case 220:
					break;
				default:
					if (num != 232)
					{
						goto IL_0419;
					}
					break;
				}
			}
			if (this.inputState.guessing == 0)
			{
				OutputClause outputClause = base.FragmentFactory.CreateFragment<OutputClause>();
				TSql80ParserBaseInternal.UpdateTokenInfo(outputClause, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputClause, outputClause.SelectColumns, list);
				vParent.OutputClause = outputClause;
				return;
			}
			return;
			IL_0419:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DD9 RID: 3545 RVA: 0x0005EA84 File Offset: 0x0005CC84
		public OutputIntoClause outputIntoClause(IToken tOutput, IList<SelectElement> vSelectElements)
		{
			OutputIntoClause outputIntoClause = base.FragmentFactory.CreateFragment<OutputIntoClause>();
			TSql80ParserBaseInternal.UpdateTokenInfo(outputIntoClause, tOutput);
			TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputIntoClause, outputIntoClause.SelectColumns, vSelectElements);
			this.match(88);
			int num = this.LA(1);
			TableReference tableReference;
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
					tableReference = this.variableDmlTarget();
					goto IL_0077;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			tableReference = this.intoSchemaObjectTable();
			IL_0077:
			if (this.inputState.guessing == 0)
			{
				outputIntoClause.IntoTable = tableReference;
			}
			if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.identifierColumnList(outputIntoClause, outputIntoClause.IntoTableColumns);
			}
			else if (!TSql110ParserInternal.tokenSet_130_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_111_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return outputIntoClause;
		}

		// Token: 0x06000DDA RID: 3546 RVA: 0x0005EBA0 File Offset: 0x0005CDA0
		public OutputClause outputClause()
		{
			OutputClause outputClause = base.FragmentFactory.CreateFragment<OutputClause>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OUTPUT");
				TSql80ParserBaseInternal.UpdateTokenInfo(outputClause, token);
			}
			SelectElement selectElement = this.outputClauseSelectElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputClause, outputClause.SelectColumns, selectElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				selectElement = this.outputClauseSelectElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputClause, outputClause.SelectColumns, selectElement);
				}
			}
			return outputClause;
		}

		// Token: 0x06000DDB RID: 3547 RVA: 0x0005EC4C File Offset: 0x0005CE4C
		public VariableTableReference variableDmlTarget()
		{
			VariableTableReference variableTableReference = base.FragmentFactory.CreateFragment<VariableTableReference>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				variableTableReference.Variable = variableReference;
			}
			return variableTableReference;
		}

		// Token: 0x06000DDC RID: 3548 RVA: 0x0005EC84 File Offset: 0x0005CE84
		public NamedTableReference intoSchemaObjectTable()
		{
			NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				namedTableReference.SchemaObject = schemaObjectName;
			}
			return namedTableReference;
		}

		// Token: 0x06000DDD RID: 3549 RVA: 0x0005ECBC File Offset: 0x0005CEBC
		public void outputClauseOpt(SubDmlFlags subDmlFlags, DataModificationSpecification vParent)
		{
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_129_.member(this.LA(2)) && base.NextTokenMatches("OUTPUT"))
			{
				this.outputIntoOutputClause(vParent);
				return;
			}
			if (!TSql110ParserInternal.tokenSet_130_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_111_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0 && (subDmlFlags & SubDmlFlags.InsideSubDml) == SubDmlFlags.InsideSubDml)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46079", vParent, TSqlParserResource.SQL46079Message, new string[0]);
				return;
			}
		}

		// Token: 0x06000DDE RID: 3550 RVA: 0x0005ED64 File Offset: 0x0005CF64
		public TableReference dmlTarget(bool indexHintAllowed)
		{
			int num = this.LA(1);
			TableReference tableReference;
			switch (num)
			{
			case 107:
			case 108:
			case 109:
				tableReference = this.openRowset();
				break;
			default:
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					case 234:
						return this.variableDmlTarget();
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				tableReference = this.schemaObjectDmlTarget(indexHintAllowed);
				break;
			}
			return tableReference;
		}

		// Token: 0x06000DDF RID: 3551 RVA: 0x0005EDE0 File Offset: 0x0005CFE0
		public WhereClause dmlWhereClause(SubDmlFlags subDmlFlags)
		{
			WhereClause whereClause;
			if (this.LA(1) == 169 && TSql110ParserInternal.tokenSet_131_.member(this.LA(2)))
			{
				whereClause = this.whereClause();
			}
			else
			{
				if (this.LA(1) != 169 || this.LA(2) != 37)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				whereClause = this.whereCurrentOfCursorClause(subDmlFlags);
			}
			return whereClause;
		}

		// Token: 0x06000DE0 RID: 3552 RVA: 0x0005EE50 File Offset: 0x0005D050
		public ColumnReferenceExpression insertColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			int num = this.LA(1);
			if (num != 200)
			{
				if (num == 227)
				{
					this.systemColumn(columnReferenceExpression);
					return columnReferenceExpression;
				}
				switch (num)
				{
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.ColumnType = ColumnType.Regular;
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
			}
			return columnReferenceExpression;
		}

		// Token: 0x06000DE1 RID: 3553 RVA: 0x0005EEDC File Offset: 0x0005D0DC
		public ValuesInsertSource valuesInsertSource()
		{
			ValuesInsertSource valuesInsertSource = base.FragmentFactory.CreateFragment<ValuesInsertSource>();
			int num = this.LA(1);
			if (num != 47)
			{
				if (num != 164)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(164);
				RowValue rowValue = this.rowValueExpressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(valuesInsertSource, token);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RowValue>(valuesInsertSource, valuesInsertSource.RowValues, rowValue);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					rowValue = this.rowValueExpressionWithDefault();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RowValue>(valuesInsertSource, valuesInsertSource.RowValues, rowValue);
					}
				}
			}
			else
			{
				this.defaultValuesInsertSource(valuesInsertSource);
			}
			return valuesInsertSource;
		}

		// Token: 0x06000DE2 RID: 3554 RVA: 0x0005EFA8 File Offset: 0x0005D1A8
		public ExecuteInsertSource executeInsertSource()
		{
			ExecuteInsertSource executeInsertSource = base.FragmentFactory.CreateFragment<ExecuteInsertSource>();
			ExecuteSpecification executeSpecification = this.executeSpecification();
			if (this.inputState.guessing == 0)
			{
				executeInsertSource.Execute = executeSpecification;
			}
			return executeInsertSource;
		}

		// Token: 0x06000DE3 RID: 3555 RVA: 0x0005EFE0 File Offset: 0x0005D1E0
		public SelectInsertSource selectInsertSource(SubDmlFlags subDmlFlags)
		{
			SelectInsertSource selectInsertSource = base.FragmentFactory.CreateFragment<SelectInsertSource>();
			QueryExpression queryExpression = this.queryExpression(subDmlFlags, null);
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_02AD;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_02AD;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_02AD;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_02AD;
						default:
							if (num == 28)
							{
								goto IL_02AD;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_02AD;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_02AD;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_02AD;
						default:
							if (num == 82)
							{
								goto IL_02AD;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_02AD;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						goto IL_02AD;
					}
					switch (num)
					{
					case 111:
						goto IL_02AD;
					case 112:
						break;
					case 113:
					{
						OrderByClause orderByClause = this.orderByClause();
						if (this.inputState.guessing == 0)
						{
							queryExpression.OrderByClause = orderByClause;
							goto IL_02AD;
						}
						goto IL_02AD;
					}
					default:
						if (num == 119)
						{
							goto IL_02AD;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_02AD;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_02AD;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_02AD;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 192)
			{
				if (num == 176 || num == 182)
				{
					goto IL_02AD;
				}
				switch (num)
				{
				case 191:
				case 192:
					goto IL_02AD;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_02AD;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_02AD;
				default:
					if (num == 232)
					{
						goto IL_02AD;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_02AD:
			if (this.inputState.guessing == 0)
			{
				selectInsertSource.Select = queryExpression;
			}
			return selectInsertSource;
		}

		// Token: 0x06000DE4 RID: 3556 RVA: 0x0005F2B0 File Offset: 0x0005D4B0
		public void setClausesList(TSqlFragment vParent, IList<SetClause> setClauses)
		{
			IToken token = this.LT(1);
			this.match(142);
			SetClause setClause = this.setClause();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetClause>(vParent, setClauses, setClause);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				setClause = this.setClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetClause>(vParent, setClauses, setClause);
				}
			}
		}

		// Token: 0x06000DE5 RID: 3557 RVA: 0x0005F32C File Offset: 0x0005D52C
		public SetClause setClause()
		{
			int num = this.LA(1);
			if (num != 200)
			{
				if (num == 227)
				{
					return this.setClauseSubItemSystemColumn();
				}
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
					return this.setClauseStartingWithVariable();
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
			int num2 = this.LA(1);
			SetClause setClause;
			if (num2 != 191)
			{
				if (num2 != 196)
				{
					switch (num2)
					{
					case 206:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
						goto IL_00A6;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IL_00A6:
				setClause = this.setClauseColumnAssignment(multiPartIdentifier);
			}
			else
			{
				setClause = this.setClauseFunctionCall(multiPartIdentifier);
			}
			return setClause;
		}

		// Token: 0x06000DE6 RID: 3558 RVA: 0x0005F424 File Offset: 0x0005D624
		public AssignmentSetClause setClauseStartingWithVariable()
		{
			AssignmentSetClause assignmentSetClause = base.FragmentFactory.CreateFragment<AssignmentSetClause>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				assignmentSetClause.Variable = variableReference;
			}
			int num = this.LA(1);
			AssignmentKind assignmentKind;
			ScalarExpression scalarExpression;
			if (num != 196)
			{
				switch (num)
				{
				case 206:
				{
					this.match(206);
					bool flag = false;
					if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_132_.member(this.LA(2)))
					{
						int num2 = this.mark();
						flag = true;
						this.inputState.guessing++;
						try
						{
							this.multiPartIdentifier(-1);
							this.assignmentWithOptOp();
						}
						catch (RecognitionException)
						{
							flag = false;
						}
						this.rewind(num2);
						this.inputState.guessing--;
					}
					if (flag)
					{
						MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
						assignmentKind = this.assignmentWithOptOp();
						if (this.inputState.guessing == 0)
						{
							base.CreateSetClauseColumn(assignmentSetClause, multiPartIdentifier);
							assignmentSetClause.AssignmentKind = assignmentKind;
						}
						scalarExpression = this.expressionWithDefault();
						if (this.inputState.guessing == 0)
						{
							assignmentSetClause.NewValue = scalarExpression;
							return assignmentSetClause;
						}
						return assignmentSetClause;
					}
					else
					{
						if (!TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_133_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						scalarExpression = this.expression(ExpressionFlags.None);
						if (this.inputState.guessing == 0)
						{
							assignmentSetClause.NewValue = scalarExpression;
							return assignmentSetClause;
						}
						return assignmentSetClause;
					}
					break;
				}
				case 212:
				case 213:
				case 214:
				case 215:
				case 216:
				case 217:
				case 218:
					goto IL_01C8;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IL_01C8:
			assignmentKind = this.assignmentWithOp();
			scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				assignmentSetClause.NewValue = scalarExpression;
				assignmentSetClause.AssignmentKind = assignmentKind;
			}
			return assignmentSetClause;
		}

		// Token: 0x06000DE7 RID: 3559 RVA: 0x0005F64C File Offset: 0x0005D84C
		public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier)
		{
			AssignmentSetClause assignmentSetClause = base.FragmentFactory.CreateFragment<AssignmentSetClause>();
			AssignmentKind assignmentKind = this.assignmentWithOptOp();
			ScalarExpression scalarExpression = this.expressionWithDefault();
			if (this.inputState.guessing == 0)
			{
				base.CreateSetClauseColumn(assignmentSetClause, vMultiPartIdentifier);
				assignmentSetClause.AssignmentKind = assignmentKind;
				assignmentSetClause.NewValue = scalarExpression;
			}
			return assignmentSetClause;
		}

		// Token: 0x06000DE8 RID: 3560 RVA: 0x0005F698 File Offset: 0x0005D898
		public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier)
		{
			FunctionCallSetClause functionCallSetClause = base.FragmentFactory.CreateFragment<FunctionCallSetClause>();
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			base.PutIdentifiersIntoFunctionCall(functionCall, vMultiPartIdentifier);
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			if (this.inputState.guessing == 0)
			{
				functionCallSetClause.MutatorFunction = functionCall;
			}
			return functionCallSetClause;
		}

		// Token: 0x06000DE9 RID: 3561 RVA: 0x0005F6E8 File Offset: 0x0005D8E8
		public AssignmentSetClause setClauseSubItemSystemColumn()
		{
			AssignmentSetClause assignmentSetClause = base.FragmentFactory.CreateFragment<AssignmentSetClause>();
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			this.systemColumn(columnReferenceExpression);
			AssignmentKind assignmentKind = this.assignmentWithOptOp();
			ScalarExpression scalarExpression = this.expressionWithDefault();
			if (this.inputState.guessing == 0)
			{
				assignmentSetClause.Column = columnReferenceExpression;
				assignmentSetClause.AssignmentKind = assignmentKind;
				assignmentSetClause.NewValue = scalarExpression;
			}
			return assignmentSetClause;
		}

		// Token: 0x06000DEA RID: 3562 RVA: 0x0005F748 File Offset: 0x0005D948
		public AssignmentKind assignmentWithOp()
		{
			AssignmentKind assignmentKind = AssignmentKind.Equals;
			int num = this.LA(1);
			if (num != 196)
			{
				switch (num)
				{
				case 212:
					this.match(212);
					if (this.inputState.guessing == 0)
					{
						assignmentKind = AssignmentKind.AddEquals;
					}
					break;
				case 213:
					this.match(213);
					if (this.inputState.guessing == 0)
					{
						assignmentKind = AssignmentKind.SubtractEquals;
					}
					break;
				case 214:
					this.match(214);
					if (this.inputState.guessing == 0)
					{
						assignmentKind = AssignmentKind.DivideEquals;
					}
					break;
				case 215:
					this.match(215);
					if (this.inputState.guessing == 0)
					{
						assignmentKind = AssignmentKind.ModEquals;
					}
					break;
				case 216:
					this.match(216);
					if (this.inputState.guessing == 0)
					{
						assignmentKind = AssignmentKind.BitwiseAndEquals;
					}
					break;
				case 217:
					this.match(217);
					if (this.inputState.guessing == 0)
					{
						assignmentKind = AssignmentKind.BitwiseOrEquals;
					}
					break;
				case 218:
					this.match(218);
					if (this.inputState.guessing == 0)
					{
						assignmentKind = AssignmentKind.BitwiseXorEquals;
					}
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(196);
				if (this.inputState.guessing == 0)
				{
					assignmentKind = AssignmentKind.MultiplyEquals;
				}
			}
			return assignmentKind;
		}

		// Token: 0x06000DEB RID: 3563 RVA: 0x0005F8A0 File Offset: 0x0005DAA0
		public void systemColumn(ColumnReferenceExpression vParent)
		{
			IToken token = this.LT(1);
			this.match(227);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.ColumnType = PseudoColumnHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
			}
		}

		// Token: 0x06000DEC RID: 3564 RVA: 0x0005F8E8 File Offset: 0x0005DAE8
		public ExecuteSpecification executeSpecification()
		{
			ExecuteSpecification executeSpecification = base.FragmentFactory.CreateFragment<ExecuteSpecification>();
			this.execStart(executeSpecification);
			this.execTypes(executeSpecification);
			return executeSpecification;
		}

		// Token: 0x06000DED RID: 3565 RVA: 0x0005F910 File Offset: 0x0005DB10
		public void defaultValuesInsertSource(ValuesInsertSource vParent)
		{
			IToken token = this.LT(1);
			this.match(47);
			IToken token2 = this.LT(1);
			this.match(164);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
				vParent.IsDefaultValues = true;
			}
		}

		// Token: 0x06000DEE RID: 3566 RVA: 0x0005F968 File Offset: 0x0005DB68
		public RowValue rowValueExpressionWithDefault()
		{
			RowValue rowValue = base.FragmentFactory.CreateFragment<RowValue>();
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token);
			}
			this.expressionWithDefaultList(rowValue, rowValue.ColumnValues);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token2);
			}
			return rowValue;
		}

		// Token: 0x06000DEF RID: 3567 RVA: 0x0005F9E4 File Offset: 0x0005DBE4
		public void expressionWithDefaultList(TSqlFragment vParent, IList<ScalarExpression> expressions)
		{
			ScalarExpression scalarExpression = this.expressionWithDefault();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, scalarExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, scalarExpression);
				}
			}
		}

		// Token: 0x06000DF0 RID: 3568 RVA: 0x0005FA44 File Offset: 0x0005DC44
		public TableReferenceWithAlias schemaObjectDmlTarget(bool indexHintAllowed)
		{
			bool flag = false;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_134_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.schemaObjectFourPartName();
					this.match(191);
					int num2 = this.LA(1);
					if (num2 <= 100)
					{
						if (num2 != 47 && num2 != 100)
						{
							goto IL_0106;
						}
					}
					else
					{
						switch (num2)
						{
						case 192:
							this.match(192);
							goto IL_0119;
						case 193:
							break;
						default:
							if (num2 != 199)
							{
								switch (num2)
								{
								case 221:
								case 222:
								case 223:
								case 224:
								case 225:
								case 230:
								case 231:
								case 234:
									break;
								case 226:
								case 227:
								case 228:
								case 229:
								case 232:
								case 233:
									goto IL_0106;
								default:
									goto IL_0106;
								}
							}
							break;
						}
					}
					this.possibleNegativeConstantWithDefault();
					goto IL_0119;
					IL_0106:
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_0119:;
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			TableReferenceWithAlias tableReferenceWithAlias;
			if (flag)
			{
				tableReferenceWithAlias = this.schemaObjectFunctionDmlTarget();
			}
			else
			{
				if ((this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) || !TSql110ParserInternal.tokenSet_135_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReferenceWithAlias = this.schemaObjectTableDmlTarget(indexHintAllowed);
			}
			return tableReferenceWithAlias;
		}

		// Token: 0x06000DF1 RID: 3569 RVA: 0x0005FC04 File Offset: 0x0005DE04
		public void mergeInsertDmlColumnListOpt(InsertMergeAction vParent)
		{
			int num = this.LA(1);
			if (num != 47 && num != 164)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				ColumnReferenceExpression columnReferenceExpression = this.mergeInsertDmlColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, columnReferenceExpression);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					columnReferenceExpression = this.mergeInsertDmlColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, columnReferenceExpression);
					}
				}
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
			}
		}

		// Token: 0x06000DF2 RID: 3570 RVA: 0x0005FCDC File Offset: 0x0005DEDC
		public ColumnReferenceExpression mergeInsertDmlColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			int num = this.LA(1);
			if (num != 200)
			{
				if (num == 227)
				{
					this.systemColumn(columnReferenceExpression);
					return columnReferenceExpression;
				}
				switch (num)
				{
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(1);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.ColumnType = ColumnType.Regular;
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
			}
			return columnReferenceExpression;
		}

		// Token: 0x06000DF3 RID: 3571 RVA: 0x0005FD68 File Offset: 0x0005DF68
		public ScalarExpression possibleNegativeConstantWithDefault()
		{
			int num = this.LA(1);
			if (num <= 100)
			{
				if (num == 47)
				{
					return this.defaultLiteral();
				}
				if (num != 100)
				{
					goto IL_0083;
				}
			}
			else if (num != 193 && num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
				case 232:
				case 233:
					goto IL_0083;
				default:
					goto IL_0083;
				}
			}
			return this.possibleNegativeConstant();
			IL_0083:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000DF4 RID: 3572 RVA: 0x0005FE0C File Offset: 0x0005E00C
		public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget()
		{
			SchemaObjectFunctionTableReference schemaObjectFunctionTableReference = base.FragmentFactory.CreateFragment<SchemaObjectFunctionTableReference>();
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				schemaObjectFunctionTableReference.SchemaObject = schemaObjectName;
			}
			this.parenthesizedOptExpressionWithDefaultList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Parameters);
			return schemaObjectFunctionTableReference;
		}

		// Token: 0x06000DF5 RID: 3573 RVA: 0x0005FE50 File Offset: 0x0005E050
		public NamedTableReference schemaObjectTableDmlTarget(bool indexHintAllowed)
		{
			NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				namedTableReference.SchemaObject = schemaObjectName;
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.tableHints(namedTableReference, namedTableReference.TableHints, indexHintAllowed);
			}
			else if (!TSql110ParserInternal.tokenSet_136_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_111_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return namedTableReference;
		}

		// Token: 0x06000DF6 RID: 3574 RVA: 0x0005FEF8 File Offset: 0x0005E0F8
		public void tableHints(TSqlFragment vParent, IList<TableHint> hints, bool tableHintAllowed)
		{
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			this.tableHintsBody(vParent, hints, tableHintAllowed);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000DF7 RID: 3575 RVA: 0x0005FF60 File Offset: 0x0005E160
		public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName)
		{
			NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
			namedTableReference.SchemaObject = vSchemaObjectName;
			if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232))
			{
				this.singleOldStyleTableHint(namedTableReference, namedTableReference.TableHints);
				if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_137_.member(this.LA(2)))
				{
					this.simpleTableReferenceAlias(namedTableReference);
				}
				else if (!TSql110ParserInternal.tokenSet_93_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_122_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				int num = this.LA(1);
				if (num <= 106)
				{
					if (num <= 23)
					{
						if (num <= 6)
						{
							if (num == 1)
							{
								goto IL_0463;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_0463;
							}
						}
						else
						{
							switch (num)
							{
							case 9:
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_0463;
							case 10:
							case 11:
							case 14:
							case 16:
								break;
							default:
								switch (num)
								{
								case 22:
								case 23:
									goto IL_0463;
								}
								break;
							}
						}
					}
					else if (num <= 36)
					{
						if (num == 28)
						{
							goto IL_0463;
						}
						switch (num)
						{
						case 33:
						case 35:
						case 36:
							goto IL_0463;
						}
					}
					else
					{
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 72:
						case 74:
						case 75:
						case 76:
						case 77:
						case 78:
						case 82:
						case 85:
						case 86:
						case 87:
						case 90:
						case 92:
						case 93:
						case 95:
							goto IL_0463;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 62:
						case 63:
						case 65:
						case 66:
						case 68:
						case 69:
						case 70:
						case 71:
						case 73:
						case 79:
						case 80:
						case 81:
						case 83:
						case 84:
						case 88:
						case 89:
						case 91:
						case 94:
							break;
						default:
							switch (num)
							{
							case 105:
							case 106:
								goto IL_0463;
							}
							break;
						}
					}
				}
				else if (num <= 194)
				{
					if (num <= 144)
					{
						switch (num)
						{
						case 111:
						case 113:
						case 114:
							goto IL_0463;
						case 112:
							break;
						default:
							switch (num)
							{
							case 119:
							case 123:
							case 125:
							case 126:
							case 129:
							case 131:
							case 132:
							case 133:
							case 134:
							case 138:
							case 140:
							case 142:
							case 143:
							case 144:
								goto IL_0463;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 169:
						case 170:
						case 171:
						case 172:
						case 176:
						case 177:
						case 178:
						case 182:
							goto IL_0463;
						case 157:
						case 159:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 173:
						case 174:
						case 175:
						case 180:
						case 181:
							break;
						case 179:
						{
							TableSampleClause tableSampleClause = this.tableSampleClause();
							if (this.inputState.guessing == 0)
							{
								namedTableReference.TableSampleClause = tableSampleClause;
								goto IL_0463;
							}
							goto IL_0463;
						}
						default:
							switch (num)
							{
							case 191:
							case 192:
							case 194:
								goto IL_0463;
							}
							break;
						}
					}
				}
				else if (num <= 204)
				{
					if (num == 198 || num == 204)
					{
						goto IL_0463;
					}
				}
				else
				{
					switch (num)
					{
					case 219:
					case 220:
						goto IL_0463;
					default:
						switch (num)
						{
						case 232:
						case 233:
							goto IL_0463;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0463:
				if ((this.LA(1) == 78 || this.LA(1) == 171) && TSql110ParserInternal.tokenSet_93_.member(this.LA(2)))
				{
					this.nonParameterTableHints(namedTableReference, namedTableReference.TableHints);
				}
				else if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_138_.member(this.LA(2)))
				{
					if (this.inputState.guessing == 0 && namedTableReference.TableSampleClause != null)
					{
						throw base.GetUnexpectedTokenErrorException();
					}
					this.simpleTableReferenceAlias(namedTableReference);
					int num2 = this.LA(1);
					if (num2 <= 106)
					{
						if (num2 <= 23)
						{
							if (num2 <= 6)
							{
								if (num2 == 1)
								{
									goto IL_0849;
								}
								switch (num2)
								{
								case 4:
								case 6:
									goto IL_0849;
								}
							}
							else
							{
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_0849;
								case 14:
								case 16:
									break;
								default:
									switch (num2)
									{
									case 22:
									case 23:
										goto IL_0849;
									}
									break;
								}
							}
						}
						else if (num2 <= 36)
						{
							if (num2 == 28)
							{
								goto IL_0849;
							}
							switch (num2)
							{
							case 33:
							case 35:
							case 36:
								goto IL_0849;
							}
						}
						else
						{
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 59:
							case 60:
							case 61:
							case 64:
							case 67:
							case 72:
							case 74:
							case 75:
							case 76:
							case 77:
							case 78:
							case 82:
							case 85:
							case 86:
							case 87:
							case 90:
							case 92:
							case 93:
							case 95:
								goto IL_0849;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 62:
							case 63:
							case 65:
							case 66:
							case 68:
							case 69:
							case 70:
							case 71:
							case 73:
							case 79:
							case 80:
							case 81:
							case 83:
							case 84:
							case 88:
							case 89:
							case 91:
							case 94:
								break;
							default:
								switch (num2)
								{
								case 105:
								case 106:
									goto IL_0849;
								}
								break;
							}
						}
					}
					else if (num2 <= 194)
					{
						if (num2 <= 144)
						{
							switch (num2)
							{
							case 111:
							case 113:
							case 114:
								goto IL_0849;
							case 112:
								break;
							default:
								switch (num2)
								{
								case 119:
								case 123:
								case 125:
								case 126:
								case 129:
								case 131:
								case 132:
								case 133:
								case 134:
								case 138:
								case 140:
								case 142:
								case 143:
								case 144:
									goto IL_0849;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 156:
							case 158:
							case 160:
							case 161:
							case 162:
							case 167:
							case 169:
							case 170:
							case 171:
							case 172:
							case 176:
							case 177:
							case 178:
							case 182:
								goto IL_0849;
							case 157:
							case 159:
							case 163:
							case 164:
							case 165:
							case 166:
							case 168:
							case 173:
							case 174:
							case 175:
							case 180:
							case 181:
								break;
							case 179:
							{
								TableSampleClause tableSampleClause = this.tableSampleClause();
								if (this.inputState.guessing == 0)
								{
									namedTableReference.TableSampleClause = tableSampleClause;
									goto IL_0849;
								}
								goto IL_0849;
							}
							default:
								switch (num2)
								{
								case 191:
								case 192:
								case 194:
									goto IL_0849;
								}
								break;
							}
						}
					}
					else if (num2 <= 204)
					{
						if (num2 == 198 || num2 == 204)
						{
							goto IL_0849;
						}
					}
					else
					{
						switch (num2)
						{
						case 219:
						case 220:
							goto IL_0849;
						default:
							if (num2 == 232)
							{
								goto IL_0849;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_0849:
					bool flag = false;
					if (this.LA(1) == 191 && this.LA(2) == 221)
					{
						int num3 = this.mark();
						flag = true;
						this.inputState.guessing++;
						try
						{
							this.match(191);
							this.integer();
						}
						catch (RecognitionException)
						{
							flag = false;
						}
						this.rewind(num3);
						this.inputState.guessing--;
					}
					if (flag)
					{
						IndexTableHint indexTableHint = this.oldForceIndex();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(namedTableReference, namedTableReference.TableHints, indexTableHint);
						}
					}
					else
					{
						bool flag2 = false;
						if ((this.LA(1) == 78 || this.LA(1) == 171) && TSql110ParserInternal.tokenSet_93_.member(this.LA(2)))
						{
							int num4 = this.mark();
							flag2 = true;
							this.inputState.guessing++;
							try
							{
								int num5 = this.LA(1);
								if (num5 != 78)
								{
									if (num5 != 171)
									{
										if (num5 != 191)
										{
											throw new NoViableAltException(this.LT(1), this.getFilename());
										}
										this.match(191);
										int num6 = this.LA(1);
										if (num6 != 78)
										{
											if (num6 != 84)
											{
												throw new NoViableAltException(this.LT(1), this.getFilename());
											}
											this.match(84);
										}
										else
										{
											this.match(78);
										}
									}
									else
									{
										this.match(171);
									}
								}
								else
								{
									this.match(78);
								}
							}
							catch (RecognitionException)
							{
								flag2 = false;
							}
							this.rewind(num4);
							this.inputState.guessing--;
						}
						if (flag2)
						{
							this.nonParameterTableHints(namedTableReference, namedTableReference.TableHints);
						}
						else if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232))
						{
							this.singleOldStyleTableHint(namedTableReference, namedTableReference.TableHints);
						}
						else if (!TSql110ParserInternal.tokenSet_93_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
				}
				else if (!TSql110ParserInternal.tokenSet_93_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return namedTableReference;
		}

		// Token: 0x06000DF8 RID: 3576 RVA: 0x00060A5C File Offset: 0x0005EC5C
		public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName)
		{
			SchemaObjectFunctionTableReference schemaObjectFunctionTableReference = base.FragmentFactory.CreateFragment<SchemaObjectFunctionTableReference>();
			schemaObjectFunctionTableReference.SchemaObject = vSchemaObjectName;
			this.parenthesizedOptExpressionWithDefaultList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Parameters);
			this.simpleTableReferenceAliasOpt(schemaObjectFunctionTableReference);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Columns);
			}
			else if (!TSql110ParserInternal.tokenSet_93_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return schemaObjectFunctionTableReference;
		}

		// Token: 0x06000DF9 RID: 3577 RVA: 0x00060B04 File Offset: 0x0005ED04
		public void singleOldStyleTableHint(TSqlFragment vParent, IList<TableHint> hints)
		{
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			TableHint tableHint = this.tableHint(true);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, tableHint);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000DFA RID: 3578 RVA: 0x00060B74 File Offset: 0x0005ED74
		public void nonParameterTableHints(TSqlFragment vParent, IList<TableHint> hints)
		{
			int num = this.LA(1);
			if (num != 78)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.simpleTableHints(vParent, hints);
				return;
			}
			else
			{
				IToken token = this.LT(1);
				this.match(78);
				if (this.inputState.guessing == 0)
				{
					TableHint tableHint = base.FragmentFactory.CreateFragment<TableHint>();
					TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token);
					tableHint.HintKind = TableHintKind.HoldLock;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, tableHint);
				}
				bool flag = false;
				if (this.LA(1) == 191 && this.LA(2) == 221)
				{
					int num2 = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.match(191);
						this.integer();
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(num2);
					this.inputState.guessing--;
				}
				if (flag)
				{
					IndexTableHint indexTableHint = this.oldForceIndex();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, indexTableHint);
						return;
					}
					return;
				}
				else
				{
					bool flag2 = false;
					if (this.LA(1) == 171 && this.LA(2) == 191)
					{
						int num3 = this.mark();
						flag2 = true;
						this.inputState.guessing++;
						try
						{
							this.match(191);
							int num4 = this.LA(1);
							if (num4 != 84)
							{
								switch (num4)
								{
								case 232:
								case 233:
									this.identifier();
									break;
								default:
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
							}
							else
							{
								this.match(84);
							}
						}
						catch (RecognitionException)
						{
							flag2 = false;
						}
						this.rewind(num3);
						this.inputState.guessing--;
					}
					if (flag2)
					{
						this.simpleTableHints(vParent, hints);
						return;
					}
					if (TSql110ParserInternal.tokenSet_93_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
					{
						return;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
		}

		// Token: 0x06000DFB RID: 3579 RVA: 0x00060DB0 File Offset: 0x0005EFB0
		public IndexTableHint oldForceIndex()
		{
			IndexTableHint indexTableHint = base.FragmentFactory.CreateFragment<IndexTableHint>();
			IToken token = this.LT(1);
			this.match(191);
			Literal literal = this.integer();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, base.IdentifierOrValueExpression(literal));
				TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token2);
				indexTableHint.HintKind = TableHintKind.Index;
			}
			return indexTableHint;
		}

		// Token: 0x06000DFC RID: 3580 RVA: 0x00060E34 File Offset: 0x0005F034
		public void fullTextTable(FullTextTableReference vParent)
		{
			int num = this.LA(1);
			if (num != 32)
			{
				if (num != 70)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(70);
				if (this.inputState.guessing == 0)
				{
					vParent.FullTextFunctionType = FullTextFunctionType.FreeText;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(32);
				if (this.inputState.guessing == 0)
				{
					vParent.FullTextFunctionType = FullTextFunctionType.Contains;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
			}
		}

		// Token: 0x06000DFD RID: 3581 RVA: 0x00060EC4 File Offset: 0x0005F0C4
		public void fulltextTableColumnList(FullTextTableReference vParent)
		{
			if (TSql110ParserInternal.tokenSet_139_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_140_.member(this.LA(2)))
			{
				this.fulltextSemanticTableColumnList(vParent, vParent.Columns);
				return;
			}
			if (this.LA(1) != 232 || this.LA(2) != 191)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			ColumnReferenceExpression columnReferenceExpression = this.identifierColumnReferenceExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PROPERTY");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, columnReferenceExpression);
			}
			this.match(198);
			StringLiteral stringLiteral = this.stringLiteral();
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				vParent.PropertyName = stringLiteral;
				return;
			}
		}

		// Token: 0x06000DFE RID: 3582 RVA: 0x00060FB8 File Offset: 0x0005F1B8
		public void fulltextTableOptions(FullTextTableReference vParent)
		{
			if (this.LA(1) == 198 && this.LA(2) == 232)
			{
				this.match(198);
				ValueExpression valueExpression = this.languageExpression();
				if (this.inputState.guessing == 0)
				{
					vParent.Language = valueExpression;
				}
				int num = this.LA(1);
				if (num != 192)
				{
					if (num != 198)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(198);
					ValueExpression valueExpression2 = this.integerOrVariable();
					if (this.inputState.guessing == 0)
					{
						vParent.TopN = valueExpression2;
						return;
					}
				}
			}
			else
			{
				if (this.LA(1) != 198 || (this.LA(2) != 221 && this.LA(2) != 234))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ValueExpression valueExpression2 = this.integerOrVariable();
				if (this.inputState.guessing == 0)
				{
					vParent.TopN = valueExpression2;
				}
				int num2 = this.LA(1);
				if (num2 != 192)
				{
					if (num2 != 198)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(198);
					ValueExpression valueExpression = this.languageExpression();
					if (this.inputState.guessing == 0)
					{
						vParent.Language = valueExpression;
						return;
					}
				}
			}
		}

		// Token: 0x06000DFF RID: 3583 RVA: 0x0006111C File Offset: 0x0005F31C
		public void fulltextSemanticTableColumnList(TSqlFragment vParent, IList<ColumnReferenceExpression> vColumns)
		{
			int num = this.LA(1);
			if (num != 195)
			{
				ColumnReferenceExpression columnReferenceExpression;
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						if (this.LA(1) == 191 && this.LA(2) == 195)
						{
							this.match(191);
							columnReferenceExpression = this.starColumnReferenceExpression();
							this.match(192);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vColumns, columnReferenceExpression);
								return;
							}
							return;
						}
						else
						{
							if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
							{
								this.match(191);
								columnReferenceExpression = this.identifierColumnReferenceExpression();
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vColumns, columnReferenceExpression);
								}
								while (this.LA(1) == 198)
								{
									this.match(198);
									columnReferenceExpression = this.identifierColumnReferenceExpression();
									if (this.inputState.guessing == 0)
									{
										TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vColumns, columnReferenceExpression);
									}
								}
								this.match(192);
								return;
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						break;
					}
				}
				columnReferenceExpression = this.identifierColumnReferenceExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vColumns, columnReferenceExpression);
					return;
				}
			}
			else
			{
				ColumnReferenceExpression columnReferenceExpression = this.starColumnReferenceExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vColumns, columnReferenceExpression);
					return;
				}
			}
		}

		// Token: 0x06000E00 RID: 3584 RVA: 0x000612A4 File Offset: 0x0005F4A4
		public ColumnReferenceExpression starColumnReferenceExpression()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			IToken token = this.LT(1);
			this.match(195);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.ColumnType = ColumnType.Wildcard;
				TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06000E01 RID: 3585 RVA: 0x000612F0 File Offset: 0x0005F4F0
		public ValueExpression languageExpression()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LANGUAGE");
			}
			return this.binaryOrIntegerOrStringOrVariable();
		}

		// Token: 0x06000E02 RID: 3586 RVA: 0x00061334 File Offset: 0x0005F534
		public ValueExpression binaryOrIntegerOrStringOrVariable()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 221)
			{
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
						return this.stringLiteral();
					case 234:
						return this.variable();
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.binary();
			}
			else
			{
				valueExpression = this.integer();
			}
			return valueExpression;
		}

		// Token: 0x06000E03 RID: 3587 RVA: 0x000613B4 File Offset: 0x0005F5B4
		public void semanticKeyPhraseTableReference(SemanticTableReference vParent)
		{
			IToken token = this.LT(1);
			this.match(184);
			this.match(191);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.SemanticFunctionType = SemanticFunctionType.SemanticKeyPhraseTable;
				vParent.TableName = schemaObjectName;
			}
			this.match(198);
			this.fulltextSemanticTableColumnList(vParent, vParent.Columns);
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ScalarExpression scalarExpression = this.possibleNegativeConstant();
				if (this.inputState.guessing == 0)
				{
					vParent.SourceKey = scalarExpression;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			this.simpleTableReferenceAliasOpt(vParent);
		}

		// Token: 0x06000E04 RID: 3588 RVA: 0x000614A8 File Offset: 0x0005F6A8
		public void semanticSimilarityTableReference(SemanticTableReference vParent)
		{
			IToken token = this.LT(1);
			this.match(185);
			this.match(191);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.SemanticFunctionType = SemanticFunctionType.SemanticSimilarityTable;
				vParent.TableName = schemaObjectName;
			}
			this.match(198);
			this.fulltextSemanticTableColumnList(vParent, vParent.Columns);
			this.match(198);
			ScalarExpression scalarExpression = this.possibleNegativeConstant();
			if (this.inputState.guessing == 0)
			{
				vParent.SourceKey = scalarExpression;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			this.simpleTableReferenceAliasOpt(vParent);
		}

		// Token: 0x06000E05 RID: 3589 RVA: 0x0006156C File Offset: 0x0005F76C
		public void semanticSimilarityDetailsTableReference(SemanticTableReference vParent)
		{
			IToken token = this.LT(1);
			this.match(186);
			this.match(191);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.SemanticFunctionType = SemanticFunctionType.SemanticSimilarityDetailsTable;
				vParent.TableName = schemaObjectName;
			}
			this.match(198);
			ColumnReferenceExpression columnReferenceExpression = this.identifierColumnReferenceExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, columnReferenceExpression);
			}
			this.match(198);
			ScalarExpression scalarExpression = this.possibleNegativeConstant();
			if (this.inputState.guessing == 0)
			{
				vParent.SourceKey = scalarExpression;
			}
			this.match(198);
			ColumnReferenceExpression columnReferenceExpression2 = this.identifierColumnReferenceExpression();
			if (this.inputState.guessing == 0)
			{
				vParent.MatchedColumn = columnReferenceExpression2;
			}
			this.match(198);
			ScalarExpression scalarExpression2 = this.possibleNegativeConstant();
			if (this.inputState.guessing == 0)
			{
				vParent.MatchedKey = scalarExpression2;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			this.simpleTableReferenceAliasOpt(vParent);
		}

		// Token: 0x06000E06 RID: 3590 RVA: 0x00061698 File Offset: 0x0005F898
		public OpenXmlTableReference openXmlParams()
		{
			OpenXmlTableReference openXmlTableReference = base.FragmentFactory.CreateFragment<OpenXmlTableReference>();
			VariableReference variableReference = this.variable();
			this.match(198);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				openXmlTableReference.Variable = variableReference;
				openXmlTableReference.RowPattern = valueExpression;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ValueExpression valueExpression2 = this.integerOrVariable();
				if (this.inputState.guessing == 0)
				{
					openXmlTableReference.Flags = valueExpression2;
				}
			}
			return openXmlTableReference;
		}

		// Token: 0x06000E07 RID: 3591 RVA: 0x0006173C File Offset: 0x0005F93C
		public void openXmlWithClauseOpt(OpenXmlTableReference vParent)
		{
			bool flag = false;
			if (this.LA(1) == 171 && TSql110ParserInternal.tokenSet_134_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(171);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				if (this.LA(1) == 171 && this.LA(2) == 191)
				{
					this.match(171);
					this.match(191);
					this.openXmlSchemaItemList(vParent);
					IToken token = this.LT(1);
					this.match(192);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
						return;
					}
				}
				else
				{
					if (this.LA(1) != 171 || (this.LA(2) != 200 && this.LA(2) != 232 && this.LA(2) != 233))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(171);
					SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
					if (this.inputState.guessing == 0)
					{
						vParent.TableName = schemaObjectName;
						return;
					}
				}
				return;
			}
			if (TSql110ParserInternal.tokenSet_119_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E08 RID: 3592 RVA: 0x000618DC File Offset: 0x0005FADC
		public void openXmlSchemaItemList(OpenXmlTableReference vParent)
		{
			SchemaDeclarationItem schemaDeclarationItem = this.openXmlSchemaItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaDeclarationItem>(vParent, vParent.SchemaDeclarationItems, schemaDeclarationItem);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				schemaDeclarationItem = this.openXmlSchemaItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaDeclarationItem>(vParent, vParent.SchemaDeclarationItems, schemaDeclarationItem);
				}
			}
		}

		// Token: 0x06000E09 RID: 3593 RVA: 0x00061948 File Offset: 0x0005FB48
		public SchemaDeclarationItem openXmlSchemaItem()
		{
			SchemaDeclarationItem schemaDeclarationItem = base.FragmentFactory.CreateFragment<SchemaDeclarationItem>();
			ColumnDefinitionBase columnDefinitionBase = this.columnDefinitionBasic();
			if (this.inputState.guessing == 0)
			{
				schemaDeclarationItem.ColumnDefinition = columnDefinitionBase;
			}
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				switch (num)
				{
				case 230:
				case 231:
				case 234:
				{
					ValueExpression valueExpression = this.stringOrVariable();
					if (this.inputState.guessing == 0)
					{
						schemaDeclarationItem.Mapping = valueExpression;
						return schemaDeclarationItem;
					}
					return schemaDeclarationItem;
				}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return schemaDeclarationItem;
		}

		// Token: 0x06000E0A RID: 3594 RVA: 0x000619E8 File Offset: 0x0005FBE8
		public ColumnDefinitionBase columnDefinitionBasic()
		{
			ColumnDefinitionBase columnDefinitionBase = base.FragmentFactory.CreateFragment<ColumnDefinitionBase>();
			Identifier identifier = this.identifier();
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				columnDefinitionBase.ColumnIdentifier = identifier;
				columnDefinitionBase.DataType = dataTypeReference;
			}
			this.collationOpt(columnDefinitionBase);
			return columnDefinitionBase;
		}

		// Token: 0x06000E0B RID: 3595 RVA: 0x00061A34 File Offset: 0x0005FC34
		public TableReferenceWithAlias openRowsetRowset()
		{
			IToken token = this.LT(1);
			this.match(109);
			this.match(191);
			int num = this.LA(1);
			TableReferenceWithAlias tableReferenceWithAlias;
			if (num != 17)
			{
				switch (num)
				{
				case 230:
				case 231:
					tableReferenceWithAlias = this.openRowsetParams();
					break;
				case 232:
				case 233:
					tableReferenceWithAlias = this.internalOpenRowsetArgs();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				tableReferenceWithAlias = this.openRowsetBulk();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableReferenceWithAlias, token);
			}
			return tableReferenceWithAlias;
		}

		// Token: 0x06000E0C RID: 3596 RVA: 0x00061ACC File Offset: 0x0005FCCC
		public OpenQueryTableReference openQueryRowset()
		{
			OpenQueryTableReference openQueryTableReference = base.FragmentFactory.CreateFragment<OpenQueryTableReference>();
			IToken token = this.LT(1);
			this.match(108);
			this.match(191);
			Identifier identifier = this.identifier();
			this.match(198);
			StringLiteral stringLiteral = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(openQueryTableReference, token);
				openQueryTableReference.LinkedServer = identifier;
				openQueryTableReference.Query = stringLiteral;
				TSql80ParserBaseInternal.UpdateTokenInfo(openQueryTableReference, token2);
			}
			return openQueryTableReference;
		}

		// Token: 0x06000E0D RID: 3597 RVA: 0x00061B5C File Offset: 0x0005FD5C
		public AdHocTableReference adhocRowset()
		{
			AdHocTableReference adHocTableReference = base.FragmentFactory.CreateFragment<AdHocTableReference>();
			AdHocDataSource adHocDataSource = this.adhocDataSource();
			this.match(200);
			if (this.inputState.guessing == 0)
			{
				adHocTableReference.DataSource = adHocDataSource;
			}
			SchemaObjectNameOrValueExpression schemaObjectNameOrValueExpression = this.objectOrString();
			if (this.inputState.guessing == 0)
			{
				adHocTableReference.Object = schemaObjectNameOrValueExpression;
			}
			return adHocTableReference;
		}

		// Token: 0x06000E0E RID: 3598 RVA: 0x00061BB8 File Offset: 0x0005FDB8
		public OpenRowsetTableReference openRowsetParams()
		{
			OpenRowsetTableReference openRowsetTableReference = base.FragmentFactory.CreateFragment<OpenRowsetTableReference>();
			StringLiteral stringLiteral = this.stringLiteral();
			this.match(198);
			if (this.inputState.guessing == 0)
			{
				openRowsetTableReference.ProviderName = stringLiteral;
			}
			if ((this.LA(1) == 230 || this.LA(1) == 231) && this.LA(2) == 204)
			{
				StringLiteral stringLiteral2 = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					openRowsetTableReference.DataSource = stringLiteral2;
				}
				this.match(204);
				int num = this.LA(1);
				if (num != 204)
				{
					switch (num)
					{
					case 230:
					case 231:
					{
						StringLiteral stringLiteral3 = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							openRowsetTableReference.UserId = stringLiteral3;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				this.match(204);
				int num2 = this.LA(1);
				if (num2 != 198)
				{
					switch (num2)
					{
					case 230:
					case 231:
					{
						StringLiteral stringLiteral4 = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							openRowsetTableReference.Password = stringLiteral4;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
			}
			else
			{
				if ((this.LA(1) != 230 && this.LA(1) != 231) || this.LA(2) != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				StringLiteral stringLiteral5 = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					openRowsetTableReference.ProviderString = stringLiteral5;
				}
			}
			this.match(198);
			int num3 = this.LA(1);
			if (num3 != 200)
			{
				switch (num3)
				{
				case 230:
				case 231:
				{
					StringLiteral stringLiteral6 = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						openRowsetTableReference.Query = stringLiteral6;
						goto IL_0237;
					}
					goto IL_0237;
				}
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				openRowsetTableReference.Object = schemaObjectName;
			}
			IL_0237:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(openRowsetTableReference, token);
			}
			this.simpleTableReferenceAliasOpt(openRowsetTableReference);
			return openRowsetTableReference;
		}

		// Token: 0x06000E0F RID: 3599 RVA: 0x00061E2C File Offset: 0x0006002C
		public InternalOpenRowset internalOpenRowsetArgs()
		{
			InternalOpenRowset internalOpenRowset = base.FragmentFactory.CreateFragment<InternalOpenRowset>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				internalOpenRowset.Identifier = identifier;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				ScalarExpression scalarExpression = this.possibleNegativeConstant();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(internalOpenRowset, internalOpenRowset.VarArgs, scalarExpression);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(internalOpenRowset, token);
			}
			this.simpleTableReferenceAliasOpt(internalOpenRowset);
			return internalOpenRowset;
		}

		// Token: 0x06000E10 RID: 3600 RVA: 0x00061ED0 File Offset: 0x000600D0
		public BulkOpenRowset openRowsetBulk()
		{
			BulkOpenRowset bulkOpenRowset = base.FragmentFactory.CreateFragment<BulkOpenRowset>();
			int num = 34866;
			this.match(17);
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				bulkOpenRowset.DataFile = stringLiteral;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				BulkInsertOption bulkInsertOption = this.openRowsetBulkHint();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(bulkOpenRowset, bulkOpenRowset.Options, bulkInsertOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql90ParserBaseInternal.CheckForFormatFileOptionInOpenRowsetBulk(num, stringLiteral);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkOpenRowset, token);
			}
			this.simpleTableReferenceAliasOpt(bulkOpenRowset);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(bulkOpenRowset, bulkOpenRowset.Columns);
			}
			else if (!TSql110ParserInternal.tokenSet_128_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return bulkOpenRowset;
		}

		// Token: 0x06000E11 RID: 3601 RVA: 0x0006200C File Offset: 0x0006020C
		public BulkInsertOption openRowsetBulkHint()
		{
			BulkInsertOption bulkInsertOption;
			if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198))
			{
				bulkInsertOption = this.openRowsetBulkHintNoValue();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				bulkInsertOption = this.simpleBulkInsertOptionWithValue();
			}
			else
			{
				if (this.LA(1) != 113)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				bulkInsertOption = this.openRowsetBulkOrderHint();
			}
			return bulkInsertOption;
		}

		// Token: 0x06000E12 RID: 3602 RVA: 0x0006209C File Offset: 0x0006029C
		public BulkInsertOption openRowsetBulkHintNoValue()
		{
			BulkInsertOption bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				bulkInsertOption.OptionKind = OpenRowsetBulkHintOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
			}
			return bulkInsertOption;
		}

		// Token: 0x06000E13 RID: 3603 RVA: 0x000620F0 File Offset: 0x000602F0
		public AdHocDataSource adhocDataSource()
		{
			AdHocDataSource adHocDataSource = base.FragmentFactory.CreateFragment<AdHocDataSource>();
			IToken token = this.LT(1);
			this.match(107);
			this.match(191);
			StringLiteral stringLiteral = this.stringLiteral();
			this.match(198);
			StringLiteral stringLiteral2 = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(adHocDataSource, token);
				adHocDataSource.ProviderName = stringLiteral;
				adHocDataSource.InitString = stringLiteral2;
				TSql80ParserBaseInternal.UpdateTokenInfo(adHocDataSource, token2);
			}
			return adHocDataSource;
		}

		// Token: 0x06000E14 RID: 3604 RVA: 0x00062180 File Offset: 0x00060380
		public SchemaObjectNameOrValueExpression objectOrString()
		{
			SchemaObjectNameOrValueExpression schemaObjectNameOrValueExpression = base.FragmentFactory.CreateFragment<SchemaObjectNameOrValueExpression>();
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						schemaObjectNameOrValueExpression.ValueExpression = literal;
						return schemaObjectNameOrValueExpression;
					}
					return schemaObjectNameOrValueExpression;
				}
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				schemaObjectNameOrValueExpression.SchemaObjectName = schemaObjectName;
			}
			return schemaObjectNameOrValueExpression;
		}

		// Token: 0x06000E15 RID: 3605 RVA: 0x00062218 File Offset: 0x00060418
		public void simpleTableHints(TSqlFragment vParent, IList<TableHint> hints)
		{
			IToken token = this.LT(1);
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			if (this.LA(1) == 191 && this.LA(2) == 221)
			{
				IndexTableHint indexTableHint = this.oldForceIndex();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, indexTableHint);
					return;
				}
				return;
			}
			else
			{
				if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232))
				{
					this.tableHints(vParent, hints, true);
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000E16 RID: 3606 RVA: 0x000622D8 File Offset: 0x000604D8
		public void tableHintsBody(TSqlFragment vParent, IList<TableHint> hints, bool tableHintAllowed)
		{
			TableHint tableHint = this.tableHint(tableHintAllowed);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, tableHint);
			}
			while (TSql110ParserInternal.tokenSet_141_.member(this.LA(1)))
			{
				int num = this.LA(1);
				if (num <= 84)
				{
					if (num != 78 && num != 84)
					{
						goto IL_0068;
					}
				}
				else if (num != 198)
				{
					if (num != 232)
					{
						goto IL_0068;
					}
				}
				else
				{
					this.match(198);
				}
				tableHint = this.tableHint(tableHintAllowed);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, tableHint);
					continue;
				}
				continue;
				IL_0068:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000E17 RID: 3607 RVA: 0x00062380 File Offset: 0x00060580
		public TableHint tableHint(bool indexHintAllowed)
		{
			TableHint tableHint;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_142_.member(this.LA(2)) && base.NextTokenMatches("FORCESEEK"))
			{
				tableHint = this.forceSeekTableHint(indexHintAllowed);
			}
			else if ((this.LA(1) == 78 || this.LA(1) == 232) && TSql110ParserInternal.tokenSet_143_.member(this.LA(2)))
			{
				tableHint = this.simpleTableHint();
			}
			else if (this.LA(1) == 84)
			{
				tableHint = this.indexTableHint(indexHintAllowed);
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableHint = this.literalTableHint();
			}
			return tableHint;
		}

		// Token: 0x06000E18 RID: 3608 RVA: 0x0006244C File Offset: 0x0006064C
		public ForceSeekTableHint forceSeekTableHint(bool indexHintAllowed)
		{
			ForceSeekTableHint forceSeekTableHint = base.FragmentFactory.CreateFragment<ForceSeekTableHint>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FORCESEEK");
				TSql80ParserBaseInternal.UpdateTokenInfo(forceSeekTableHint, token);
				forceSeekTableHint.HintKind = TableHintKind.ForceSeek;
			}
			int num = this.LA(1);
			if (num <= 84)
			{
				if (num == 78 || num == 84)
				{
					return forceSeekTableHint;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				{
					this.match(191);
					IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrInteger();
					if (this.inputState.guessing == 0)
					{
						if (!indexHintAllowed)
						{
							TSql80ParserBaseInternal.ThrowParseErrorException("SQL46074", token, TSqlParserResource.SQL46074Message, new string[0]);
						}
						forceSeekTableHint.IndexValue = identifierOrValueExpression;
					}
					this.match(191);
					ColumnReferenceExpression columnReferenceExpression = this.identifierColumnReferenceExpression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(forceSeekTableHint, forceSeekTableHint.ColumnValues, columnReferenceExpression);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						columnReferenceExpression = this.identifierColumnReferenceExpression();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(forceSeekTableHint, forceSeekTableHint.ColumnValues, columnReferenceExpression);
						}
					}
					this.match(192);
					IToken token2 = this.LT(1);
					this.match(192);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(forceSeekTableHint, token2);
						return forceSeekTableHint;
					}
					return forceSeekTableHint;
				}
				case 192:
					return forceSeekTableHint;
				default:
					if (num == 198 || num == 232)
					{
						return forceSeekTableHint;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E19 RID: 3609 RVA: 0x000625F0 File Offset: 0x000607F0
		public TableHint simpleTableHint()
		{
			TableHint tableHint = base.FragmentFactory.CreateFragment<TableHint>();
			int num = this.LA(1);
			if (num != 78)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					tableHint.HintKind = TableHintOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
					TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token);
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(78);
				if (this.inputState.guessing == 0)
				{
					tableHint.HintKind = TableHintKind.HoldLock;
					TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token2);
				}
			}
			return tableHint;
		}

		// Token: 0x06000E1A RID: 3610 RVA: 0x000626A0 File Offset: 0x000608A0
		public IndexTableHint indexTableHint(bool indexHintAllowed)
		{
			IndexTableHint indexTableHint = base.FragmentFactory.CreateFragment<IndexTableHint>();
			IToken token = this.LT(1);
			this.match(84);
			if (this.inputState.guessing == 0)
			{
				if (!indexHintAllowed)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46074", token, TSqlParserResource.SQL46074Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token);
				indexTableHint.HintKind = TableHintKind.Index;
			}
			int num = this.LA(1);
			if (num != 191)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrInteger();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, identifierOrValueExpression);
				}
			}
			else
			{
				this.match(191);
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrInteger();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, identifierOrValueExpression);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					identifierOrValueExpression = this.identifierOrInteger();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, identifierOrValueExpression);
					}
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token2);
				}
			}
			return indexTableHint;
		}

		// Token: 0x06000E1B RID: 3611 RVA: 0x000627FC File Offset: 0x000609FC
		public LiteralTableHint literalTableHint()
		{
			LiteralTableHint literalTableHint = base.FragmentFactory.CreateFragment<LiteralTableHint>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SPATIAL_WINDOW_MAX_CELLS");
				literalTableHint.HintKind = TableHintKind.SpatialWindowMaxCells;
				TSql80ParserBaseInternal.UpdateTokenInfo(literalTableHint, token);
				literalTableHint.Value = literal;
			}
			return literalTableHint;
		}

		// Token: 0x06000E1C RID: 3612 RVA: 0x0006286C File Offset: 0x00060A6C
		public IdentifierOrValueExpression identifierOrInteger()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			int num = this.LA(1);
			if (num != 221)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						identifierOrValueExpression.Identifier = identifier;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = literal;
				}
			}
			return identifierOrValueExpression;
		}

		// Token: 0x06000E1D RID: 3613 RVA: 0x000628FC File Offset: 0x00060AFC
		public WhereClause whereCurrentOfCursorClause(SubDmlFlags subDmlFlags)
		{
			WhereClause whereClause = base.FragmentFactory.CreateFragment<WhereClause>();
			IToken token = this.LT(1);
			this.match(169);
			this.match(37);
			this.match(102);
			CursorId cursorId = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				if ((subDmlFlags & SubDmlFlags.InsideSubDml) == SubDmlFlags.InsideSubDml)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46083", token, TSqlParserResource.SQL46083Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(whereClause, token);
				whereClause.Cursor = cursorId;
			}
			return whereClause;
		}

		// Token: 0x06000E1E RID: 3614 RVA: 0x0006297C File Offset: 0x00060B7C
		public GroupingSpecification groupByItem(bool isAll, ref bool encounteredCubeRollupGroupingSets)
		{
			GroupingSpecification groupingSpecification;
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CUBE"))
			{
				groupingSpecification = this.cubeSpec(isAll);
				if (this.inputState.guessing == 0)
				{
					encounteredCubeRollupGroupingSets = true;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("ROLLUP"))
			{
				groupingSpecification = this.rollupSpec(isAll);
				if (this.inputState.guessing == 0)
				{
					encounteredCubeRollupGroupingSets = true;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("GROUPING"))
			{
				groupingSpecification = this.groupingSetsSpec(isAll);
				if (this.inputState.guessing == 0)
				{
					encounteredCubeRollupGroupingSets = true;
				}
			}
			else
			{
				bool flag = false;
				if (this.LA(1) == 191 && this.LA(2) == 192)
				{
					int num = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.match(191);
						this.match(192);
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(num);
					this.inputState.guessing--;
				}
				if (flag)
				{
					groupingSpecification = this.grandTotal();
				}
				else
				{
					if (!TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_144_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					groupingSpecification = this.simpleGroupByItem();
				}
			}
			return groupingSpecification;
		}

		// Token: 0x06000E1F RID: 3615 RVA: 0x00062B34 File Offset: 0x00060D34
		public CubeGroupingSpecification cubeSpec(bool isAll)
		{
			CubeGroupingSpecification cubeGroupingSpecification = base.FragmentFactory.CreateFragment<CubeGroupingSpecification>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			this.cubeOrRollupArgumentList(cubeGroupingSpecification, cubeGroupingSpecification.Arguments);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CUBE");
				if (isAll)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46084", token, TSqlParserResource.SQL46084Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(cubeGroupingSpecification, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(cubeGroupingSpecification, token2);
			}
			return cubeGroupingSpecification;
		}

		// Token: 0x06000E20 RID: 3616 RVA: 0x00062BD0 File Offset: 0x00060DD0
		public RollupGroupingSpecification rollupSpec(bool isAll)
		{
			RollupGroupingSpecification rollupGroupingSpecification = base.FragmentFactory.CreateFragment<RollupGroupingSpecification>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			this.cubeOrRollupArgumentList(rollupGroupingSpecification, rollupGroupingSpecification.Arguments);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLLUP");
				if (isAll)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46084", token, TSqlParserResource.SQL46084Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(rollupGroupingSpecification, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(rollupGroupingSpecification, token2);
			}
			return rollupGroupingSpecification;
		}

		// Token: 0x06000E21 RID: 3617 RVA: 0x00062C6C File Offset: 0x00060E6C
		public GroupingSetsGroupingSpecification groupingSetsSpec(bool isAll)
		{
			GroupingSetsGroupingSpecification groupingSetsGroupingSpecification = base.FragmentFactory.CreateFragment<GroupingSetsGroupingSpecification>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(191);
			GroupingSpecification groupingSpecification = this.groupingSet();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "GROUPING");
				TSql80ParserBaseInternal.Match(token2, "SETS");
				if (isAll)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46084", token, TSqlParserResource.SQL46084Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(groupingSetsGroupingSpecification, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(groupingSetsGroupingSpecification, groupingSetsGroupingSpecification.Sets, groupingSpecification);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				groupingSpecification = this.groupingSet();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(groupingSetsGroupingSpecification, groupingSetsGroupingSpecification.Sets, groupingSpecification);
				}
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(groupingSetsGroupingSpecification, token3);
			}
			return groupingSetsGroupingSpecification;
		}

		// Token: 0x06000E22 RID: 3618 RVA: 0x00062D7C File Offset: 0x00060F7C
		public GrandTotalGroupingSpecification grandTotal()
		{
			GrandTotalGroupingSpecification grandTotalGroupingSpecification = base.FragmentFactory.CreateFragment<GrandTotalGroupingSpecification>();
			IToken token = this.LT(1);
			this.match(191);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(grandTotalGroupingSpecification, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(grandTotalGroupingSpecification, token2);
			}
			return grandTotalGroupingSpecification;
		}

		// Token: 0x06000E23 RID: 3619 RVA: 0x00062DDC File Offset: 0x00060FDC
		public ExpressionGroupingSpecification simpleGroupByItem()
		{
			ExpressionGroupingSpecification expressionGroupingSpecification = base.FragmentFactory.CreateFragment<ExpressionGroupingSpecification>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				expressionGroupingSpecification.Expression = scalarExpression;
			}
			return expressionGroupingSpecification;
		}

		// Token: 0x06000E24 RID: 3620 RVA: 0x00062E14 File Offset: 0x00061014
		public GroupingSpecification groupingSet()
		{
			bool flag = false;
			if (this.LA(1) == 191 && this.LA(2) == 192)
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.match(192);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			GroupingSpecification groupingSpecification;
			if (flag)
			{
				groupingSpecification = this.grandTotal();
			}
			else
			{
				bool flag2 = false;
				if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_39_.member(this.LA(2)))
				{
					int num2 = this.mark();
					flag2 = true;
					this.inputState.guessing++;
					try
					{
						this.match(191);
					}
					catch (RecognitionException)
					{
						flag2 = false;
					}
					this.rewind(num2);
					this.inputState.guessing--;
				}
				if (flag2)
				{
					groupingSpecification = this.composingGroupingSet();
				}
				else
				{
					if (!TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_116_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					groupingSpecification = this.groupingSetItem();
				}
			}
			return groupingSpecification;
		}

		// Token: 0x06000E25 RID: 3621 RVA: 0x00062F7C File Offset: 0x0006117C
		public CompositeGroupingSpecification composingGroupingSet()
		{
			CompositeGroupingSpecification compositeGroupingSpecification = base.FragmentFactory.CreateFragment<CompositeGroupingSpecification>();
			this.match(191);
			GroupingSpecification groupingSpecification = this.groupingSetItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(compositeGroupingSpecification, compositeGroupingSpecification.Items, groupingSpecification);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				groupingSpecification = this.groupingSetItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(compositeGroupingSpecification, compositeGroupingSpecification.Items, groupingSpecification);
				}
			}
			this.match(192);
			return compositeGroupingSpecification;
		}

		// Token: 0x06000E26 RID: 3622 RVA: 0x0006300C File Offset: 0x0006120C
		public GroupingSpecification groupingSetItem()
		{
			GroupingSpecification groupingSpecification;
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CUBE"))
			{
				groupingSpecification = this.cubeSpec(false);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("ROLLUP"))
			{
				groupingSpecification = this.rollupSpec(false);
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_116_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				groupingSpecification = this.simpleGroupByItem();
			}
			return groupingSpecification;
		}

		// Token: 0x06000E27 RID: 3623 RVA: 0x000630C4 File Offset: 0x000612C4
		public void cubeOrRollupArgumentList(TSqlFragment vParent, IList<GroupingSpecification> specs)
		{
			GroupingSpecification groupingSpecification = this.cubeOrRollupArgument();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(vParent, specs, groupingSpecification);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				groupingSpecification = this.cubeOrRollupArgument();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(vParent, specs, groupingSpecification);
				}
			}
		}

		// Token: 0x06000E28 RID: 3624 RVA: 0x00063124 File Offset: 0x00061324
		public GroupingSpecification cubeOrRollupArgument()
		{
			bool flag = false;
			if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_39_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			GroupingSpecification groupingSpecification;
			if (flag)
			{
				groupingSpecification = this.compositeGroupByItem();
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_116_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				groupingSpecification = this.simpleGroupByItem();
			}
			return groupingSpecification;
		}

		// Token: 0x06000E29 RID: 3625 RVA: 0x000631FC File Offset: 0x000613FC
		public CompositeGroupingSpecification compositeGroupByItem()
		{
			CompositeGroupingSpecification compositeGroupingSpecification = base.FragmentFactory.CreateFragment<CompositeGroupingSpecification>();
			IToken token = this.LT(1);
			this.match(191);
			ExpressionGroupingSpecification expressionGroupingSpecification = this.simpleGroupByItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(compositeGroupingSpecification, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(compositeGroupingSpecification, compositeGroupingSpecification.Items, expressionGroupingSpecification);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				expressionGroupingSpecification = this.simpleGroupByItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(compositeGroupingSpecification, compositeGroupingSpecification.Items, expressionGroupingSpecification);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(compositeGroupingSpecification, token2);
			}
			return compositeGroupingSpecification;
		}

		// Token: 0x06000E2A RID: 3626 RVA: 0x000632B8 File Offset: 0x000614B8
		public ExpressionWithSortOrder expressionWithSortOrder()
		{
			ExpressionWithSortOrder expressionWithSortOrder = base.FragmentFactory.CreateFragment<ExpressionWithSortOrder>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				expressionWithSortOrder.Expression = scalarExpression;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return expressionWithSortOrder;
						}
						switch (num)
						{
						case 4:
						case 6:
							return expressionWithSortOrder;
						case 5:
							goto IL_02D3;
						default:
							switch (num)
							{
							case 10:
								break;
							case 11:
							case 14:
							case 16:
								goto IL_02D3;
							case 12:
							case 13:
							case 15:
							case 17:
								return expressionWithSortOrder;
							default:
								goto IL_02D3;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return expressionWithSortOrder;
						default:
							if (num == 28)
							{
								return expressionWithSortOrder;
							}
							switch (num)
							{
							case 33:
							case 35:
								return expressionWithSortOrder;
							case 34:
								goto IL_02D3;
							default:
								goto IL_02D3;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 59:
					case 60:
					case 61:
					case 64:
					case 67:
						return expressionWithSortOrder;
					case 47:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 62:
					case 63:
					case 65:
					case 66:
						goto IL_02D3;
					case 50:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return expressionWithSortOrder;
						default:
							if (num != 82)
							{
								goto IL_02D3;
							}
							return expressionWithSortOrder;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 86:
					case 87:
						return expressionWithSortOrder;
					default:
						if (num != 92 && num != 95)
						{
							goto IL_02D3;
						}
						return expressionWithSortOrder;
					}
				}
				SortOrder sortOrder = this.orderByOption(expressionWithSortOrder);
				if (this.inputState.guessing == 0)
				{
					expressionWithSortOrder.SortOrder = sortOrder;
					return expressionWithSortOrder;
				}
				return expressionWithSortOrder;
			}
			else if (num <= 176)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 111 || num == 119)
					{
						return expressionWithSortOrder;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return expressionWithSortOrder;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return expressionWithSortOrder;
						case 157:
						case 159:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return expressionWithSortOrder;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				if (num == 182)
				{
					return expressionWithSortOrder;
				}
				switch (num)
				{
				case 191:
				case 192:
					return expressionWithSortOrder;
				default:
					if (num == 198)
					{
						return expressionWithSortOrder;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return expressionWithSortOrder;
				}
				switch (num)
				{
				case 219:
				case 220:
					return expressionWithSortOrder;
				default:
					if (num == 232)
					{
						return expressionWithSortOrder;
					}
					break;
				}
			}
			IL_02D3:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E2B RID: 3627 RVA: 0x000635AC File Offset: 0x000617AC
		public SortOrder orderByOption(TSqlFragment vParent)
		{
			SortOrder sortOrder = SortOrder.NotSpecified;
			int num = this.LA(1);
			if (num != 10)
			{
				if (num != 50)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(50);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					sortOrder = SortOrder.Descending;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(10);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					sortOrder = SortOrder.Ascending;
				}
			}
			return sortOrder;
		}

		// Token: 0x06000E2C RID: 3628 RVA: 0x00063638 File Offset: 0x00061838
		public UpdateForClause updateForClause()
		{
			UpdateForClause updateForClause = base.FragmentFactory.CreateFragment<UpdateForClause>();
			IToken token = this.LT(1);
			this.match(160);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateForClause, token);
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return updateForClause;
						}
						switch (num)
						{
						case 4:
						case 6:
							return updateForClause;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return updateForClause;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return updateForClause;
						default:
							if (num == 28)
							{
								return updateForClause;
							}
							switch (num)
							{
							case 33:
							case 35:
								return updateForClause;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return updateForClause;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return updateForClause;
						default:
							if (num == 82)
							{
								return updateForClause;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return updateForClause;
				}
			}
			else if (num <= 162)
			{
				if (num <= 111)
				{
					if (num == 102)
					{
						this.match(102);
						ColumnReferenceExpression columnReferenceExpression = this.column();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(updateForClause, updateForClause.Columns, columnReferenceExpression);
						}
						while (this.LA(1) == 198)
						{
							this.match(198);
							columnReferenceExpression = this.column();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(updateForClause, updateForClause.Columns, columnReferenceExpression);
							}
						}
						return updateForClause;
					}
					if (num == 106 || num == 111)
					{
						return updateForClause;
					}
				}
				else
				{
					if (num == 119)
					{
						return updateForClause;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return updateForClause;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return updateForClause;
						}
						break;
					}
				}
			}
			else if (num <= 182)
			{
				switch (num)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					return updateForClause;
				case 168:
				case 169:
					break;
				default:
					if (num == 176 || num == 182)
					{
						return updateForClause;
					}
					break;
				}
			}
			else if (num <= 204)
			{
				if (num == 191 || num == 204)
				{
					return updateForClause;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					return updateForClause;
				default:
					if (num == 232)
					{
						return updateForClause;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E2D RID: 3629 RVA: 0x0006396C File Offset: 0x00061B6C
		public XmlForClauseOption xmlForClauseMode()
		{
			XmlForClauseOption xmlForClauseOption = base.FragmentFactory.CreateFragment<XmlForClauseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				xmlForClauseOption.OptionKind = XmlForClauseModeHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token);
			}
			if (this.LA(1) == 191 && (this.LA(2) == 230 || this.LA(2) == 231))
			{
				IToken token2 = this.LT(1);
				this.match(191);
				Literal literal = this.stringLiteral();
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					if (xmlForClauseOption.OptionKind == XmlForClauseOptions.Explicit || xmlForClauseOption.OptionKind == XmlForClauseOptions.Auto)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
					}
					xmlForClauseOption.Value = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token3);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_145_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return xmlForClauseOption;
		}

		// Token: 0x06000E2E RID: 3630 RVA: 0x00063A90 File Offset: 0x00061C90
		public XmlForClauseOption xmlParam(XmlForClauseOptions encountered)
		{
			XmlForClauseOption xmlForClauseOption = base.FragmentFactory.CreateFragment<XmlForClauseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.LA(1) == 191 && (this.LA(2) == 230 || this.LA(2) == 231))
			{
				IToken token2 = this.LT(1);
				this.match(191);
				Literal literal = this.stringLiteral();
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					if (!TSql80ParserBaseInternal.TryMatch(token, "XMLSCHEMA") && !TSql80ParserBaseInternal.TryMatch(token, "ROOT"))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
					}
					xmlForClauseOption.Value = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token3);
				}
			}
			else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_145_.member(this.LA(2)))
			{
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token, "BINARY"))
					{
						TSql80ParserBaseInternal.Match(token4, "BASE64");
						xmlForClauseOption.OptionKind = XmlForClauseOptions.BinaryBase64;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "ELEMENTS");
						if (TSql80ParserBaseInternal.TryMatch(token4, "XSINIL"))
						{
							xmlForClauseOption.OptionKind = XmlForClauseOptions.ElementsXsiNil;
						}
						else
						{
							TSql80ParserBaseInternal.Match(token4, "ABSENT");
							xmlForClauseOption.OptionKind = XmlForClauseOptions.ElementsAbsent;
						}
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token4);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_145_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0)
			{
				if (xmlForClauseOption.OptionKind == XmlForClauseOptions.None)
				{
					xmlForClauseOption.OptionKind = XmlForClauseOptionsHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token);
				}
				TSql80ParserBaseInternal.CheckXmlForClauseOptionDuplication(encountered, xmlForClauseOption.OptionKind, token);
			}
			return xmlForClauseOption;
		}

		// Token: 0x06000E2F RID: 3631 RVA: 0x00063C94 File Offset: 0x00061E94
		public OptimizerHint hint()
		{
			int num = this.LA(1);
			OptimizerHint optimizerHint;
			if (num != 148)
			{
				if (num == 162)
				{
					optimizerHint = this.usePlanOptimizerHint();
				}
				else if (this.LA(1) == 232 && this.LA(2) == 221)
				{
					optimizerHint = this.literalOptimizerHint();
				}
				else if ((this.LA(1) == 113 || this.LA(1) == 182 || this.LA(1) == 232) && TSql110ParserInternal.tokenSet_146_.member(this.LA(2)))
				{
					optimizerHint = this.simpleOptimizerHint();
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 67)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					optimizerHint = this.optimizeForOptimizerHint();
				}
			}
			else
			{
				optimizerHint = this.tableHintsOptimizerHint();
			}
			return optimizerHint;
		}

		// Token: 0x06000E30 RID: 3632 RVA: 0x00063D70 File Offset: 0x00061F70
		public LiteralOptimizerHint literalOptimizerHint()
		{
			LiteralOptimizerHint literalOptimizerHint = base.FragmentFactory.CreateFragment<LiteralOptimizerHint>();
			IToken token = this.LT(1);
			this.match(232);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalOptimizerHint.HintKind = IntegerOptimizerHintHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
				literalOptimizerHint.Value = literal;
			}
			return literalOptimizerHint;
		}

		// Token: 0x06000E31 RID: 3633 RVA: 0x00063DCC File Offset: 0x00061FCC
		public OptimizerHint simpleOptimizerHint()
		{
			OptimizerHint optimizerHint = base.FragmentFactory.CreateFragment<OptimizerHint>();
			if (this.LA(1) == 232 && this.LA(2) == 90)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(90);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = TSql80ParserBaseInternal.ParseJoinOptimizerHint(token);
				}
			}
			else if (this.LA(1) == 182 && this.LA(2) == 90)
			{
				this.match(182);
				this.match(90);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = OptimizerHintKind.MergeJoin;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 158)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(158);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = TSql80ParserBaseInternal.ParseUnionOptimizerHint(token2);
				}
			}
			else if (this.LA(1) == 182 && this.LA(2) == 158)
			{
				this.match(182);
				this.match(158);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = OptimizerHintKind.MergeUnion;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 113)
			{
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(113);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FORCE");
					optimizerHint.HintKind = OptimizerHintKind.ForceOrder;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 76)
			{
				IToken token4 = this.LT(1);
				this.match(232);
				this.match(76);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "HASH");
					optimizerHint.HintKind = OptimizerHintKind.HashGroup;
				}
			}
			else if (this.LA(1) == 113)
			{
				this.LT(1);
				this.match(113);
				this.match(76);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = OptimizerHintKind.OrderGroup;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 117)
			{
				IToken token5 = this.LT(1);
				this.match(232);
				this.match(117);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = PlanOptimizerHintHelper.Instance.ParseOption(token5, SqlVersionFlags.TSql110);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token6 = this.LT(1);
				this.match(232);
				IToken token7 = this.LT(1);
				this.match(232);
				int num = this.LA(1);
				if (num != 158)
				{
					if (num != 192 && num != 198)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.TryMatch(token6, "EXPAND"))
						{
							TSql80ParserBaseInternal.Match(token7, "VIEWS");
							optimizerHint.HintKind = OptimizerHintKind.ExpandViews;
						}
						else if (TSql80ParserBaseInternal.TryMatch(token6, "PARAMETERIZATION"))
						{
							if (TSql80ParserBaseInternal.TryMatch(token7, "SIMPLE"))
							{
								optimizerHint.HintKind = OptimizerHintKind.ParameterizationSimple;
							}
							else
							{
								TSql80ParserBaseInternal.Match(token7, "FORCED");
								optimizerHint.HintKind = OptimizerHintKind.ParameterizationForced;
							}
						}
						else
						{
							TSql80ParserBaseInternal.Match(token6, "BYPASS");
							TSql80ParserBaseInternal.Match(token7, "OPTIMIZER_QUEUE");
							optimizerHint.HintKind = OptimizerHintKind.BypassOptimizerQueue;
						}
					}
				}
				else
				{
					this.LT(1);
					this.match(158);
					this.match(5);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token6, "OPTIMIZE");
						TSql80ParserBaseInternal.Match(token7, "CORRELATED");
						optimizerHint.HintKind = OptimizerHintKind.OptimizeCorrelatedUnionAll;
					}
				}
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 192 && this.LA(2) != 198))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token8 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token8, "RECOMPILE"))
					{
						TSql80ParserBaseInternal.Match(token8, "RECOMPILE");
						optimizerHint.HintKind = OptimizerHintKind.Recompile;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token8, "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX");
						optimizerHint.HintKind = OptimizerHintKind.IgnoreNonClusteredColumnStoreIndex;
					}
				}
			}
			return optimizerHint;
		}

		// Token: 0x06000E32 RID: 3634 RVA: 0x000642A4 File Offset: 0x000624A4
		public LiteralOptimizerHint usePlanOptimizerHint()
		{
			LiteralOptimizerHint literalOptimizerHint = base.FragmentFactory.CreateFragment<LiteralOptimizerHint>();
			this.LT(1);
			this.match(162);
			this.match(117);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				literalOptimizerHint.HintKind = OptimizerHintKind.UsePlan;
				literalOptimizerHint.Value = literal;
			}
			return literalOptimizerHint;
		}

		// Token: 0x06000E33 RID: 3635 RVA: 0x000642FC File Offset: 0x000624FC
		public OptimizeForOptimizerHint optimizeForOptimizerHint()
		{
			OptimizeForOptimizerHint optimizeForOptimizerHint = base.FragmentFactory.CreateFragment<OptimizeForOptimizerHint>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(67);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OPTIMIZE");
				optimizeForOptimizerHint.HintKind = OptimizerHintKind.OptimizeFor;
			}
			int num = this.LA(1);
			if (num != 191)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "UNKNOWN");
					optimizeForOptimizerHint.IsForUnknown = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(optimizeForOptimizerHint, token2);
				}
			}
			else
			{
				this.match(191);
				VariableValuePair variableValuePair = this.variableValuePair();
				if (this.inputState.guessing == 0)
				{
					optimizeForOptimizerHint.IsForUnknown = false;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableValuePair>(optimizeForOptimizerHint, optimizeForOptimizerHint.Pairs, variableValuePair);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					variableValuePair = this.variableValuePair();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableValuePair>(optimizeForOptimizerHint, optimizeForOptimizerHint.Pairs, variableValuePair);
					}
				}
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(optimizeForOptimizerHint, token3);
				}
			}
			return optimizeForOptimizerHint;
		}

		// Token: 0x06000E34 RID: 3636 RVA: 0x00064464 File Offset: 0x00062664
		public TableHintsOptimizerHint tableHintsOptimizerHint()
		{
			TableHintsOptimizerHint tableHintsOptimizerHint = base.FragmentFactory.CreateFragment<TableHintsOptimizerHint>();
			IToken token = this.LT(1);
			this.match(148);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(191);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableHintsOptimizerHint, token);
				TSql80ParserBaseInternal.Match(token2, "HINT");
				tableHintsOptimizerHint.HintKind = OptimizerHintKind.TableHints;
				tableHintsOptimizerHint.ObjectName = schemaObjectName;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				this.tableHintsBody(tableHintsOptimizerHint, tableHintsOptimizerHint.TableHints, true);
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableHintsOptimizerHint, token3);
			}
			return tableHintsOptimizerHint;
		}

		// Token: 0x06000E35 RID: 3637 RVA: 0x0006455C File Offset: 0x0006275C
		public VariableValuePair variableValuePair()
		{
			VariableValuePair variableValuePair = base.FragmentFactory.CreateFragment<VariableValuePair>();
			VariableReference variableReference = this.variable();
			int num = this.LA(1);
			if (num != 206)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "UNKNOWN");
					variableValuePair.Variable = variableReference;
					variableValuePair.IsForUnknown = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(variableValuePair, token);
				}
			}
			else
			{
				this.match(206);
				ScalarExpression scalarExpression = this.possibleNegativeConstant();
				if (this.inputState.guessing == 0)
				{
					variableValuePair.Variable = variableReference;
					variableValuePair.Value = scalarExpression;
					variableValuePair.IsForUnknown = false;
				}
			}
			return variableValuePair;
		}

		// Token: 0x06000E36 RID: 3638 RVA: 0x00064628 File Offset: 0x00062828
		public Literal cryptographicProviderFile()
		{
			Literal literal = null;
			this.match(71);
			this.match(65);
			this.match(206);
			Literal literal2 = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				literal = literal2;
			}
			return literal;
		}

		// Token: 0x06000E37 RID: 3639 RVA: 0x0006466C File Offset: 0x0006286C
		public AlterResourcePoolStatement alterResourcePoolStatement()
		{
			AlterResourcePoolStatement alterResourcePoolStatement = base.FragmentFactory.CreateFragment<AlterResourcePoolStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "POOL");
				alterResourcePoolStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterResourcePoolStatement);
			}
			this.resourcePoolStatementBody(alterResourcePoolStatement);
			return alterResourcePoolStatement;
		}

		// Token: 0x06000E38 RID: 3640 RVA: 0x000646D0 File Offset: 0x000628D0
		public AlterResourceGovernorStatement alterResourceGovernorStatement()
		{
			AlterResourceGovernorStatement alterResourceGovernorStatement = base.FragmentFactory.CreateFragment<AlterResourceGovernorStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "GOVERNOR");
			}
			int num = this.LA(1);
			if (num != 126)
			{
				if (num != 171)
				{
					if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)))
					{
						IToken token2 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "DISABLE");
							alterResourceGovernorStatement.Command = AlterResourceGovernorCommandType.Disable;
							TSql80ParserBaseInternal.UpdateTokenInfo(alterResourceGovernorStatement, token2);
						}
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 146)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token3 = this.LT(1);
						this.match(232);
						IToken token4 = this.LT(1);
						this.match(146);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token3, "RESET");
							alterResourceGovernorStatement.Command = AlterResourceGovernorCommandType.ResetStatistics;
							TSql80ParserBaseInternal.UpdateTokenInfo(alterResourceGovernorStatement, token4);
						}
					}
				}
				else
				{
					this.LT(1);
					this.match(171);
					this.match(191);
					IToken token5 = this.LT(1);
					this.match(232);
					this.match(206);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "CLASSIFIER_FUNCTION");
						alterResourceGovernorStatement.Command = AlterResourceGovernorCommandType.ClassifierFunction;
					}
					int num2 = this.LA(1);
					if (num2 != 100)
					{
						switch (num2)
						{
						case 232:
						case 233:
						{
							SchemaObjectName schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
							if (this.inputState.guessing == 0)
							{
								alterResourceGovernorStatement.ClassifierFunction = schemaObjectName;
							}
							break;
						}
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.LT(1);
						this.match(100);
						if (this.inputState.guessing == 0)
						{
							alterResourceGovernorStatement.ClassifierFunction = null;
						}
					}
					IToken token6 = this.LT(1);
					this.match(192);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(alterResourceGovernorStatement, token6);
					}
				}
			}
			else
			{
				IToken token7 = this.LT(1);
				this.match(126);
				if (this.inputState.guessing == 0)
				{
					alterResourceGovernorStatement.Command = AlterResourceGovernorCommandType.Reconfigure;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterResourceGovernorStatement, token7);
				}
			}
			return alterResourceGovernorStatement;
		}

		// Token: 0x06000E39 RID: 3641 RVA: 0x00064968 File Offset: 0x00062B68
		public void resourcePoolStatementBody(ResourcePoolStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				IToken token = this.LT(1);
				this.match(171);
				this.match(191);
				ResourcePoolParameter resourcePoolParameter = this.resourcePoolParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ResourcePoolParameter>(vParent, vParent.ResourcePoolParameters, resourcePoolParameter);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					resourcePoolParameter = this.resourcePoolParameter();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ResourcePoolParameter>(vParent, vParent.ResourcePoolParameters, resourcePoolParameter);
					}
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
				return;
			}
			else
			{
				if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000E3A RID: 3642 RVA: 0x00064A80 File Offset: 0x00062C80
		public ResourcePoolParameter resourcePoolParameter()
		{
			ResourcePoolParameter resourcePoolParameter = base.FragmentFactory.CreateFragment<ResourcePoolParameter>();
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("AFFINITY"))
			{
				ResourcePoolAffinitySpecification resourcePoolAffinitySpecification = this.resourcePoolAffinitySpecification();
				if (this.inputState.guessing == 0)
				{
					resourcePoolParameter.ParameterType = ResourcePoolParameterType.Affinity;
					resourcePoolParameter.AffinitySpecification = resourcePoolAffinitySpecification;
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					resourcePoolParameter.ParameterType = ResourcePoolParameterHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
				}
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					int num;
					if (int.TryParse(literal.Value, 7, CultureInfo.InvariantCulture, ref num))
					{
						if (resourcePoolParameter.ParameterType == ResourcePoolParameterType.MinCpuPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.MinMemoryPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.MinIoPercent)
						{
							if (num < 0 || num > 100)
							{
								TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, new string[] { token.getText() });
							}
						}
						else if ((resourcePoolParameter.ParameterType == ResourcePoolParameterType.MaxCpuPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.MaxMemoryPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.CapCpuPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.TargetMemoryPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.MaxIoPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.CapIoPercent) && (num < 1 || num > 100))
						{
							TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, new string[] { token.getText() });
						}
						resourcePoolParameter.ParameterValue = literal;
					}
					else
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(literal);
					}
				}
			}
			return resourcePoolParameter;
		}

		// Token: 0x06000E3B RID: 3643 RVA: 0x00064C58 File Offset: 0x00062E58
		public ResourcePoolAffinitySpecification resourcePoolAffinitySpecification()
		{
			ResourcePoolAffinitySpecification resourcePoolAffinitySpecification = base.FragmentFactory.CreateFragment<ResourcePoolAffinitySpecification>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AFFINITY");
			}
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				resourcePoolAffinitySpecification.AffinityType = ResourcePoolAffinityHelper.Instance.ParseOption(token2);
			}
			int num = this.LA(1);
			if (num != 191)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (resourcePoolAffinitySpecification.AffinityType != ResourcePoolAffinityType.Scheduler)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token3);
					}
					TSql80ParserBaseInternal.Match(token3, "AUTO");
					resourcePoolAffinitySpecification.IsAuto = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(resourcePoolAffinitySpecification, token3);
				}
			}
			else
			{
				IToken token4 = this.LT(1);
				this.match(191);
				LiteralRange literalRange = this.poolAffinityRange();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(resourcePoolAffinitySpecification, token4);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<LiteralRange>(resourcePoolAffinitySpecification, resourcePoolAffinitySpecification.PoolAffinityRanges, literalRange);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					literalRange = this.poolAffinityRange();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<LiteralRange>(resourcePoolAffinitySpecification, resourcePoolAffinitySpecification.PoolAffinityRanges, literalRange);
					}
				}
				IToken token5 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(resourcePoolAffinitySpecification, token5);
				}
			}
			return resourcePoolAffinitySpecification;
		}

		// Token: 0x06000E3C RID: 3644 RVA: 0x00064E10 File Offset: 0x00063010
		public LiteralRange poolAffinityRange()
		{
			LiteralRange literalRange = base.FragmentFactory.CreateFragment<LiteralRange>();
			IntegerLiteral integerLiteral = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalRange.From = integerLiteral;
			}
			int num = this.LA(1);
			if (num != 151)
			{
				if (num != 192 && num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(151);
				IntegerLiteral integerLiteral2 = this.integer();
				if (this.inputState.guessing == 0)
				{
					literalRange.To = integerLiteral2;
				}
			}
			return literalRange;
		}

		// Token: 0x06000E3D RID: 3645 RVA: 0x00064EA4 File Offset: 0x000630A4
		public void workloadGroupStatementBody(WorkloadGroupStatement vParent)
		{
			int num = 0;
			IToken token = this.LT(1);
			this.match(232);
			this.LT(1);
			this.match(76);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "WORKLOAD");
				vParent.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(vParent);
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				IToken token2 = this.LT(1);
				this.match(171);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
				}
				this.match(191);
				WorkloadGroupParameter workloadGroupParameter = this.workloadGroupParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)workloadGroupParameter.ParameterType, workloadGroupParameter);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<WorkloadGroupParameter>(vParent, vParent.WorkloadGroupParameters, workloadGroupParameter);
				}
				while (this.LA(1) == 198)
				{
					this.LT(1);
					this.match(198);
					workloadGroupParameter = this.workloadGroupParameter();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)workloadGroupParameter.ParameterType, workloadGroupParameter);
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<WorkloadGroupParameter>(vParent, vParent.WorkloadGroupParameters, workloadGroupParameter);
					}
				}
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("USING"))
			{
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "USING");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
				}
				Identifier identifier2 = this.identifier();
				if (this.inputState.guessing == 0)
				{
					vParent.PoolName = identifier2;
					return;
				}
				return;
			}
			else
			{
				if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000E3E RID: 3646 RVA: 0x00065110 File Offset: 0x00063310
		public WorkloadGroupParameter workloadGroupParameter()
		{
			WorkloadGroupParameter workloadGroupParameter = null;
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "IMPORTANCE");
					WorkloadGroupImportanceParameter workloadGroupImportanceParameter = base.FragmentFactory.CreateFragment<WorkloadGroupImportanceParameter>();
					workloadGroupImportanceParameter.ParameterType = WorkloadGroupParameterType.Importance;
					workloadGroupImportanceParameter.ParameterValue = ImportanceParameterHelper.Instance.ParseOption(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(workloadGroupImportanceParameter, token);
					TSql80ParserBaseInternal.UpdateTokenInfo(workloadGroupImportanceParameter, token2);
					workloadGroupParameter = workloadGroupImportanceParameter;
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					WorkloadGroupResourceParameter workloadGroupResourceParameter = base.FragmentFactory.CreateFragment<WorkloadGroupResourceParameter>();
					workloadGroupResourceParameter.ParameterType = WorkloadGroupResourceParameterHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
					int num2;
					if (int.TryParse(literal.Value, 7, CultureInfo.InvariantCulture, ref num2))
					{
						if (workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.RequestMaxMemoryGrantPercent || workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.GroupMinMemoryPercent)
						{
							if (num2 < 0 || num2 > 100)
							{
								TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, new string[] { token.getText() });
							}
						}
						else if (workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.RequestMaxCpuTimeSec || workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.RequestMemoryGrantTimeoutSec || workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.GroupMaxRequests)
						{
							if (num2 < 0)
							{
								TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, new string[] { token.getText() });
							}
						}
						else if (workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.MaxDop && (num2 < 0 || num2 > 64))
						{
							TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, new string[] { token.getText() });
						}
						workloadGroupResourceParameter.ParameterValue = literal;
						TSql80ParserBaseInternal.UpdateTokenInfo(workloadGroupResourceParameter, token);
						workloadGroupParameter = workloadGroupResourceParameter;
					}
					else
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(literal);
					}
				}
			}
			return workloadGroupParameter;
		}

		// Token: 0x06000E3F RID: 3647 RVA: 0x0006531C File Offset: 0x0006351C
		public void brokerPriorityStatementBody(BrokerPriorityStatement vParent)
		{
			int num = 0;
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "BROKER");
				TSql80ParserBaseInternal.Match(token2, "PRIORITY");
				vParent.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(vParent);
			}
			this.LT(1);
			this.match(67);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "CONVERSATION");
			}
			if (this.LA(1) == 142 && this.LA(2) == 191)
			{
				IToken token4 = this.LT(1);
				this.match(142);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
				}
				this.match(191);
				BrokerPriorityParameter brokerPriorityParameter = this.brokerPriorityParameter(num);
				if (this.inputState.guessing == 0)
				{
					TSql100ParserBaseInternal.UpdateBrokerPriorityEncounteredOptions(ref num, brokerPriorityParameter);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BrokerPriorityParameter>(vParent, vParent.BrokerPriorityParameters, brokerPriorityParameter);
				}
				while (this.LA(1) == 198)
				{
					this.LT(1);
					this.match(198);
					brokerPriorityParameter = this.brokerPriorityParameter(num);
					if (this.inputState.guessing == 0)
					{
						TSql100ParserBaseInternal.UpdateBrokerPriorityEncounteredOptions(ref num, brokerPriorityParameter);
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BrokerPriorityParameter>(vParent, vParent.BrokerPriorityParameters, brokerPriorityParameter);
					}
				}
				IToken token5 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token5);
					return;
				}
				return;
			}
			else
			{
				if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000E40 RID: 3648 RVA: 0x0006550C File Offset: 0x0006370C
		public BrokerPriorityParameter brokerPriorityParameter(int encountered)
		{
			BrokerPriorityParameter brokerPriorityParameter = base.FragmentFactory.CreateFragment<BrokerPriorityParameter>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				brokerPriorityParameter.ParameterType = BrokerPriorityParameterHelper.Instance.ParseOption(token);
				TSql100ParserBaseInternal.CheckBrokerPriorityParameterDuplication(encountered, brokerPriorityParameter.ParameterType, token);
			}
			this.match(206);
			int num = this.LA(1);
			if (num <= 47)
			{
				if (num != 8)
				{
					if (num == 47)
					{
						this.LT(1);
						this.match(47);
						if (this.inputState.guessing != 0)
						{
							return brokerPriorityParameter;
						}
						if (brokerPriorityParameter.ParameterType == BrokerPriorityParameterType.PriorityLevel)
						{
							brokerPriorityParameter.IsDefaultOrAny = BrokerPriorityParameterSpecialType.Default;
							return brokerPriorityParameter;
						}
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
						return brokerPriorityParameter;
					}
				}
				else
				{
					this.LT(1);
					this.match(8);
					if (this.inputState.guessing != 0)
					{
						return brokerPriorityParameter;
					}
					if (brokerPriorityParameter.ParameterType != BrokerPriorityParameterType.PriorityLevel)
					{
						brokerPriorityParameter.IsDefaultOrAny = BrokerPriorityParameterSpecialType.Any;
						return brokerPriorityParameter;
					}
					TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
					return brokerPriorityParameter;
				}
			}
			else if (num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing != 0)
					{
						return brokerPriorityParameter;
					}
					if (brokerPriorityParameter.ParameterType == BrokerPriorityParameterType.RemoteServiceName)
					{
						brokerPriorityParameter.ParameterValue = base.IdentifierOrValueExpression(literal);
						brokerPriorityParameter.IsDefaultOrAny = BrokerPriorityParameterSpecialType.None;
						return brokerPriorityParameter;
					}
					TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
					return brokerPriorityParameter;
				}
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing != 0)
					{
						return brokerPriorityParameter;
					}
					if (brokerPriorityParameter.ParameterType == BrokerPriorityParameterType.ContractName || brokerPriorityParameter.ParameterType == BrokerPriorityParameterType.LocalServiceName)
					{
						brokerPriorityParameter.ParameterValue = base.IdentifierOrValueExpression(identifier);
						brokerPriorityParameter.IsDefaultOrAny = BrokerPriorityParameterSpecialType.None;
						return brokerPriorityParameter;
					}
					TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
					return brokerPriorityParameter;
				}
				}
			}
			else
			{
				Literal literal2 = this.integer();
				if (this.inputState.guessing != 0)
				{
					return brokerPriorityParameter;
				}
				if (brokerPriorityParameter.ParameterType == BrokerPriorityParameterType.PriorityLevel)
				{
					brokerPriorityParameter.ParameterValue = base.IdentifierOrValueExpression(literal2);
					brokerPriorityParameter.IsDefaultOrAny = BrokerPriorityParameterSpecialType.None;
					return brokerPriorityParameter;
				}
				TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
				return brokerPriorityParameter;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E41 RID: 3649 RVA: 0x0006571C File Offset: 0x0006391C
		public void createSequenceOptionList(CreateSequenceStatement vParent)
		{
			int num = 0;
			int num2 = 0;
			while ((this.LA(1) == 9 || this.LA(1) == 232) && TSql110ParserInternal.tokenSet_45_.member(this.LA(2)))
			{
				SequenceOption sequenceOption = this.createSequenceOptionListElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)sequenceOption.OptionKind, sequenceOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SequenceOption>(vParent, vParent.SequenceOptions, sequenceOption);
				}
				num2++;
			}
			if (num2 >= 1)
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E42 RID: 3650 RVA: 0x000657A8 File Offset: 0x000639A8
		public SequenceOption createSequenceOptionListElement()
		{
			SequenceOption sequenceOption;
			if (this.LA(1) == 9)
			{
				sequenceOption = this.sequenceDatatypeOptionListElement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 171 && base.NextTokenMatches("START"))
			{
				sequenceOption = this.sequenceStartOptionListElement();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_147_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				sequenceOption = this.commonSequenceOptionListElement();
			}
			return sequenceOption;
		}

		// Token: 0x06000E43 RID: 3651 RVA: 0x0006583C File Offset: 0x00063A3C
		public ScalarExpressionSequenceOption sequenceRestartOptionListElement()
		{
			ScalarExpressionSequenceOption scalarExpressionSequenceOption = base.FragmentFactory.CreateFragment<ScalarExpressionSequenceOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarExpressionSequenceOption, token);
				scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.Restart;
			}
			if (this.LA(1) == 171 && TSql110ParserInternal.tokenSet_148_.member(this.LA(2)))
			{
				this.LT(1);
				this.match(171);
				ScalarExpression scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					scalarExpressionSequenceOption.OptionValue = scalarExpression;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return scalarExpressionSequenceOption;
		}

		// Token: 0x06000E44 RID: 3652 RVA: 0x00065914 File Offset: 0x00063B14
		public SequenceOption commonSequenceOptionListElement()
		{
			SequenceOption sequenceOption;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_149_.member(this.LA(2)) && base.NextTokenMatches("CACHE"))
			{
				sequenceOption = this.sequenceCacheOptionListElement();
			}
			else if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_37_.member(this.LA(2)) && base.NextTokenMatches("Cycle"))
			{
				sequenceOption = this.sequenceCycleOptionListElement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 18 && base.NextTokenMatches("INCREMENT"))
			{
				sequenceOption = this.sequenceIncrementOptionListElement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("NO"))
			{
				sequenceOption = this.sequenceNoOptionListElement();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql110ParserInternal.tokenSet_148_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				sequenceOption = this.sequenceMinMaxOptionListElement();
			}
			return sequenceOption;
		}

		// Token: 0x06000E45 RID: 3653 RVA: 0x00065A34 File Offset: 0x00063C34
		public DataTypeSequenceOption sequenceDatatypeOptionListElement()
		{
			DataTypeSequenceOption dataTypeSequenceOption = base.FragmentFactory.CreateFragment<DataTypeSequenceOption>();
			IToken token = this.LT(1);
			this.match(9);
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(dataTypeSequenceOption, token);
				dataTypeSequenceOption.OptionKind = SequenceOptionKind.As;
				dataTypeSequenceOption.DataType = dataTypeReference;
			}
			return dataTypeSequenceOption;
		}

		// Token: 0x06000E46 RID: 3654 RVA: 0x00065A8C File Offset: 0x00063C8C
		public ScalarExpressionSequenceOption sequenceStartOptionListElement()
		{
			ScalarExpressionSequenceOption scalarExpressionSequenceOption = base.FragmentFactory.CreateFragment<ScalarExpressionSequenceOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.LT(1);
			this.match(171);
			ScalarExpression scalarExpression = this.seedIncrement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarExpressionSequenceOption, token);
				scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.Start;
				scalarExpressionSequenceOption.OptionValue = scalarExpression;
			}
			return scalarExpressionSequenceOption;
		}

		// Token: 0x06000E47 RID: 3655 RVA: 0x00065AFC File Offset: 0x00063CFC
		public ScalarExpressionSequenceOption sequenceCacheOptionListElement()
		{
			ScalarExpressionSequenceOption scalarExpressionSequenceOption = base.FragmentFactory.CreateFragment<ScalarExpressionSequenceOption>();
			ScalarExpression scalarExpression = null;
			IToken token = this.LT(1);
			this.match(232);
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_02B8;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_02B8;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_02B8;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_02B8;
						default:
							if (num == 28)
							{
								goto IL_02B8;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_02B8;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_02B8;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_02B8;
						default:
							if (num == 82)
							{
								goto IL_02B8;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_02B8;
				}
			}
			else
			{
				if (num > 176)
				{
					if (num <= 199)
					{
						if (num == 182 || num == 191)
						{
							goto IL_02B8;
						}
						switch (num)
						{
						case 197:
						case 199:
							break;
						case 198:
							goto IL_02A5;
						default:
							goto IL_02A5;
						}
					}
					else
					{
						if (num == 204)
						{
							goto IL_02B8;
						}
						switch (num)
						{
						case 219:
						case 220:
							goto IL_02B8;
						case 221:
						case 222:
							break;
						default:
							if (num != 232)
							{
								goto IL_02A5;
							}
							goto IL_02B8;
						}
					}
					scalarExpression = this.seedIncrement();
					goto IL_02B8;
				}
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						goto IL_02B8;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_02B8;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_02B8;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_02B8;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								goto IL_02B8;
							}
							break;
						}
						break;
					}
				}
			}
			IL_02A5:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_02B8:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarExpressionSequenceOption, token);
				scalarExpressionSequenceOption.OptionValue = scalarExpression;
				scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.Cache;
			}
			return scalarExpressionSequenceOption;
		}

		// Token: 0x06000E48 RID: 3656 RVA: 0x00065DE4 File Offset: 0x00063FE4
		public SequenceOption sequenceCycleOptionListElement()
		{
			SequenceOption sequenceOption = base.FragmentFactory.CreateFragment<SequenceOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(sequenceOption, token);
				sequenceOption.OptionKind = SequenceOptionKind.Cycle;
			}
			return sequenceOption;
		}

		// Token: 0x06000E49 RID: 3657 RVA: 0x00065E30 File Offset: 0x00064030
		public ScalarExpressionSequenceOption sequenceIncrementOptionListElement()
		{
			ScalarExpressionSequenceOption scalarExpressionSequenceOption = base.FragmentFactory.CreateFragment<ScalarExpressionSequenceOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.LT(1);
			this.match(18);
			ScalarExpression scalarExpression = this.seedIncrement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarExpressionSequenceOption, token);
				scalarExpressionSequenceOption.OptionValue = scalarExpression;
				scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.Increment;
			}
			return scalarExpressionSequenceOption;
		}

		// Token: 0x06000E4A RID: 3658 RVA: 0x00065E9C File Offset: 0x0006409C
		public SequenceOption sequenceNoOptionListElement()
		{
			SequenceOption sequenceOption = base.FragmentFactory.CreateFragment<SequenceOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token2, "MINVALUE"))
				{
					sequenceOption.OptionKind = SequenceOptionKind.MinValue;
				}
				else if (TSql80ParserBaseInternal.TryMatch(token2, "MAXVALUE"))
				{
					sequenceOption.OptionKind = SequenceOptionKind.MaxValue;
				}
				else if (TSql80ParserBaseInternal.TryMatch(token2, "CACHE"))
				{
					sequenceOption.OptionKind = SequenceOptionKind.Cache;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "Cycle");
					sequenceOption.OptionKind = SequenceOptionKind.Cycle;
				}
				sequenceOption.NoValue = true;
				TSql80ParserBaseInternal.UpdateTokenInfo(sequenceOption, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(sequenceOption, token2);
			}
			return sequenceOption;
		}

		// Token: 0x06000E4B RID: 3659 RVA: 0x00065F58 File Offset: 0x00064158
		public ScalarExpressionSequenceOption sequenceMinMaxOptionListElement()
		{
			ScalarExpressionSequenceOption scalarExpressionSequenceOption = base.FragmentFactory.CreateFragment<ScalarExpressionSequenceOption>();
			IToken token = this.LT(1);
			this.match(232);
			ScalarExpression scalarExpression = this.seedIncrement();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "MINVALUE"))
				{
					scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.MinValue;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "MAXVALUE");
					scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.MaxValue;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarExpressionSequenceOption, token);
				scalarExpressionSequenceOption.OptionValue = scalarExpression;
			}
			return scalarExpressionSequenceOption;
		}

		// Token: 0x06000E4C RID: 3660 RVA: 0x00065FD4 File Offset: 0x000641D4
		public void spatialIndexingScheme(CreateSpatialIndexStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "USING");
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				vParent.SpatialIndexingScheme = SpatialIndexingSchemeTypeHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql110);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000E4D RID: 3661 RVA: 0x0006604C File Offset: 0x0006424C
		public void spatialIndexOptionsList(CreateSpatialIndexStatement vParent)
		{
			bool flag = false;
			this.match(191);
			SpatialIndexOption spatialIndexOption = this.spatialIndexOption(vParent.SpatialIndexingScheme, ref flag);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SpatialIndexOption>(vParent, vParent.SpatialIndexOptions, spatialIndexOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				spatialIndexOption = this.spatialIndexOption(vParent.SpatialIndexingScheme, ref flag);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SpatialIndexOption>(vParent, vParent.SpatialIndexOptions, spatialIndexOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000E4E RID: 3662 RVA: 0x000660FC File Offset: 0x000642FC
		public SpatialIndexOption spatialIndexOption(SpatialIndexingSchemeType indexingScheme, ref bool isRegularIndexOption)
		{
			SpatialIndexOption spatialIndexOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("BOUNDING_BOX"))
			{
				spatialIndexOption = this.boundingBoxSpatialIndexOption(isRegularIndexOption, indexingScheme);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("GRIDS"))
			{
				spatialIndexOption = this.gridsSpatialIndexOption(isRegularIndexOption);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CELLS_PER_OBJECT"))
			{
				spatialIndexOption = this.cellsPerObjectSpatialIndexOption(isRegularIndexOption);
			}
			else
			{
				if ((this.LA(1) != 66 && this.LA(1) != 232) || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				spatialIndexOption = this.spatialIndexRegularOption(IndexAffectingStatement.CreateSpatialIndex);
				if (this.inputState.guessing == 0)
				{
					isRegularIndexOption = true;
				}
			}
			return spatialIndexOption;
		}

		// Token: 0x06000E4F RID: 3663 RVA: 0x00066204 File Offset: 0x00064404
		public BoundingBoxSpatialIndexOption boundingBoxSpatialIndexOption(bool isRegularIndexOption, SpatialIndexingSchemeType indexingScheme)
		{
			BoundingBoxSpatialIndexOption boundingBoxSpatialIndexOption = base.FragmentFactory.CreateFragment<BoundingBoxSpatialIndexOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "BOUNDING_BOX");
				if (isRegularIndexOption)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46081", token, TSqlParserResource.SQL46081Message, new string[] { token.getText() });
				}
				if (indexingScheme == SpatialIndexingSchemeType.GeographyGrid)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46067", token, TSqlParserResource.SQL46067Message, new string[] { token.getText() });
				}
			}
			this.boundingBoxParameter(boundingBoxSpatialIndexOption);
			if (this.inputState.guessing == 0 && boundingBoxSpatialIndexOption.BoundingBoxParameters.Count != 4)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46066", token, TSqlParserResource.SQL46066Message, new string[] { token.getText() });
			}
			return boundingBoxSpatialIndexOption;
		}

		// Token: 0x06000E50 RID: 3664 RVA: 0x000662E8 File Offset: 0x000644E8
		public GridsSpatialIndexOption gridsSpatialIndexOption(bool isRegularIndexOption)
		{
			GridsSpatialIndexOption gridsSpatialIndexOption = base.FragmentFactory.CreateFragment<GridsSpatialIndexOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "GRIDS");
				if (isRegularIndexOption)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46081", token, TSqlParserResource.SQL46081Message, new string[] { token.getText() });
				}
			}
			this.gridParameter(gridsSpatialIndexOption);
			return gridsSpatialIndexOption;
		}

		// Token: 0x06000E51 RID: 3665 RVA: 0x00066368 File Offset: 0x00064568
		public CellsPerObjectSpatialIndexOption cellsPerObjectSpatialIndexOption(bool isRegularIndexOption)
		{
			CellsPerObjectSpatialIndexOption cellsPerObjectSpatialIndexOption = base.FragmentFactory.CreateFragment<CellsPerObjectSpatialIndexOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CELLS_PER_OBJECT");
				if (isRegularIndexOption)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46081", token, TSqlParserResource.SQL46081Message, new string[] { token.getText() });
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(cellsPerObjectSpatialIndexOption, token);
				TSql100ParserBaseInternal.CheckForCellsPerObjectValueRange(literal);
				cellsPerObjectSpatialIndexOption.Value = literal;
			}
			return cellsPerObjectSpatialIndexOption;
		}

		// Token: 0x06000E52 RID: 3666 RVA: 0x000663FC File Offset: 0x000645FC
		public SpatialIndexRegularOption spatialIndexRegularOption(IndexAffectingStatement statement)
		{
			SpatialIndexRegularOption spatialIndexRegularOption = base.FragmentFactory.CreateFragment<SpatialIndexRegularOption>();
			IndexOption indexOption = this.indexOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.VerifyAllowedIndexOption(statement, indexOption, SqlVersionFlags.TSql110);
				TSql100ParserBaseInternal.CheckIfValidSpatialIndexOptionValue(statement, indexOption);
				spatialIndexRegularOption.Option = indexOption;
			}
			return spatialIndexRegularOption;
		}

		// Token: 0x06000E53 RID: 3667 RVA: 0x00066440 File Offset: 0x00064640
		public void boundingBoxParameter(BoundingBoxSpatialIndexOption vParent)
		{
			this.LT(1);
			this.match(191);
			int num = this.LA(1);
			if (num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
					break;
				default:
					if (num == 232)
					{
						this.boundingBoxParameterListByname(vParent);
						goto IL_006A;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			this.boundingBoxParameterListByord(vParent);
			IL_006A:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000E54 RID: 3668 RVA: 0x000664E0 File Offset: 0x000646E0
		public void boundingBoxParameterListByname(BoundingBoxSpatialIndexOption vParent)
		{
			int num = 0;
			BoundingBoxParameter boundingBoxParameter = this.boundingBoxParameterByName(num);
			if (this.inputState.guessing == 0)
			{
				TSql100ParserBaseInternal.UpdateBoundingBoxParameterEncounteredOptions(ref num, boundingBoxParameter);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BoundingBoxParameter>(vParent, vParent.BoundingBoxParameters, boundingBoxParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				boundingBoxParameter = this.boundingBoxParameterByName(num);
				if (this.inputState.guessing == 0)
				{
					TSql100ParserBaseInternal.UpdateBoundingBoxParameterEncounteredOptions(ref num, boundingBoxParameter);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BoundingBoxParameter>(vParent, vParent.BoundingBoxParameters, boundingBoxParameter);
				}
			}
		}

		// Token: 0x06000E55 RID: 3669 RVA: 0x00066560 File Offset: 0x00064760
		public void boundingBoxParameterListByord(BoundingBoxSpatialIndexOption vParent)
		{
			BoundingBoxParameter boundingBoxParameter = this.boundingBoxParameterByOrd();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BoundingBoxParameter>(vParent, vParent.BoundingBoxParameters, boundingBoxParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				boundingBoxParameter = this.boundingBoxParameterByOrd();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BoundingBoxParameter>(vParent, vParent.BoundingBoxParameters, boundingBoxParameter);
				}
			}
		}

		// Token: 0x06000E56 RID: 3670 RVA: 0x000665CC File Offset: 0x000647CC
		public BoundingBoxParameter boundingBoxParameterByName(int encountered)
		{
			BoundingBoxParameter boundingBoxParameter = base.FragmentFactory.CreateFragment<BoundingBoxParameter>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			ScalarExpression scalarExpression = this.signedIntegerOrReal();
			if (this.inputState.guessing == 0)
			{
				boundingBoxParameter.Parameter = BoundingBoxParameterTypeHelper.Instance.ParseOption(token);
				TSql100ParserBaseInternal.CheckBoundingBoxParameterDuplication(encountered, boundingBoxParameter.Parameter, token);
				boundingBoxParameter.Value = scalarExpression;
			}
			return boundingBoxParameter;
		}

		// Token: 0x06000E57 RID: 3671 RVA: 0x00066640 File Offset: 0x00064840
		public ScalarExpression signedIntegerOrReal()
		{
			ScalarExpression scalarExpression = null;
			UnaryExpression unaryExpression = null;
			int num = this.LA(1);
			if (num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(199);
				if (this.inputState.guessing == 0)
				{
					unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
				}
			}
			Literal literal = this.integerOrRealOrNumeric();
			if (this.inputState.guessing == 0)
			{
				if (unaryExpression == null)
				{
					scalarExpression = literal;
				}
				else
				{
					unaryExpression.Expression = literal;
					scalarExpression = unaryExpression;
				}
			}
			return scalarExpression;
		}

		// Token: 0x06000E58 RID: 3672 RVA: 0x000666F4 File Offset: 0x000648F4
		public BoundingBoxParameter boundingBoxParameterByOrd()
		{
			BoundingBoxParameter boundingBoxParameter = base.FragmentFactory.CreateFragment<BoundingBoxParameter>();
			ScalarExpression scalarExpression = this.signedIntegerOrReal();
			if (this.inputState.guessing == 0)
			{
				boundingBoxParameter.Parameter = BoundingBoxParameterType.None;
				boundingBoxParameter.Value = scalarExpression;
			}
			return boundingBoxParameter;
		}

		// Token: 0x06000E59 RID: 3673 RVA: 0x00066730 File Offset: 0x00064930
		public void gridParameter(GridsSpatialIndexOption vParent)
		{
			this.LT(1);
			this.match(191);
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				this.gridParameterListByName(vParent);
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 192 && this.LA(2) != 198))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.gridParameterListByOrd(vParent);
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000E5A RID: 3674 RVA: 0x000667E4 File Offset: 0x000649E4
		public void gridParameterListByName(GridsSpatialIndexOption vParent)
		{
			GridParameter gridParameter = this.gridParameterByName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GridParameter>(vParent, vParent.GridParameters, gridParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				gridParameter = this.gridParameterByName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GridParameter>(vParent, vParent.GridParameters, gridParameter);
				}
			}
		}

		// Token: 0x06000E5B RID: 3675 RVA: 0x00066850 File Offset: 0x00064A50
		public void gridParameterListByOrd(GridsSpatialIndexOption vParent)
		{
			GridParameter gridParameter = this.gridParameterByOrd();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GridParameter>(vParent, vParent.GridParameters, gridParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				gridParameter = this.gridParameterByOrd();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GridParameter>(vParent, vParent.GridParameters, gridParameter);
				}
			}
		}

		// Token: 0x06000E5C RID: 3676 RVA: 0x000668BC File Offset: 0x00064ABC
		public GridParameter gridParameterByName()
		{
			GridParameter gridParameter = base.FragmentFactory.CreateFragment<GridParameter>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				gridParameter.Parameter = GridParameterTypeHelper.Instance.ParseOption(token);
				gridParameter.Value = ImportanceParameterHelper.Instance.ParseOption(token2);
			}
			return gridParameter;
		}

		// Token: 0x06000E5D RID: 3677 RVA: 0x0006693C File Offset: 0x00064B3C
		public GridParameter gridParameterByOrd()
		{
			GridParameter gridParameter = base.FragmentFactory.CreateFragment<GridParameter>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				gridParameter.Parameter = GridParameterType.None;
				gridParameter.Value = ImportanceParameterHelper.Instance.ParseOption(token);
			}
			return gridParameter;
		}

		// Token: 0x06000E5E RID: 3678 RVA: 0x00066990 File Offset: 0x00064B90
		public void viewStatementBody(ViewStatementBody vResult)
		{
			int num = 0;
			this.match(166);
			SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
			if (this.inputState.guessing == 0)
			{
				vResult.SchemaObjectName = schemaObjectName;
				TSql80ParserBaseInternal.CheckForTemporaryView(schemaObjectName);
				base.ThrowPartialAstIfPhaseOne(vResult);
			}
			int num2 = this.LA(1);
			if (num2 != 9 && num2 != 171)
			{
				if (num2 != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.columnNameList(vResult, vResult.Columns);
			}
			int num3 = this.LA(1);
			if (num3 != 9)
			{
				if (num3 != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				ViewOption viewOption = this.viewOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)viewOption.OptionKind, viewOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ViewOption>(vResult, vResult.ViewOptions, viewOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					viewOption = this.viewOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)viewOption.OptionKind, viewOption);
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ViewOption>(vResult, vResult.ViewOptions, viewOption);
					}
				}
			}
			IToken token = this.LT(1);
			this.match(9);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
			}
			SelectStatement selectStatement = this.subqueryExpressionWithOptionalCTE();
			if (this.inputState.guessing == 0)
			{
				vResult.SelectStatement = selectStatement;
			}
			int num4 = this.LA(1);
			if (num4 <= 75)
			{
				if (num4 <= 35)
				{
					if (num4 == 1 || num4 == 35)
					{
						return;
					}
				}
				else if (num4 == 49 || num4 == 75)
				{
					return;
				}
			}
			else if (num4 <= 171)
			{
				if (num4 == 132)
				{
					return;
				}
				if (num4 == 171)
				{
					this.match(171);
					this.match(21);
					IToken token2 = this.LT(1);
					this.match(111);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token2);
						vResult.WithCheckOption = true;
						return;
					}
					return;
				}
			}
			else if (num4 == 204 || num4 == 219)
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E5F RID: 3679 RVA: 0x00066BD8 File Offset: 0x00064DD8
		public ViewOption viewOption()
		{
			ViewOption viewOption = base.FragmentFactory.CreateFragment<ViewOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				viewOption.OptionKind = ViewOptionHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(viewOption, token);
			}
			return viewOption;
		}

		// Token: 0x06000E60 RID: 3680 RVA: 0x00066C2C File Offset: 0x00064E2C
		public TriggerOption triggerOption(bool vOwnerProhibited)
		{
			TriggerOption triggerOption = null;
			int num = this.LA(1);
			switch (num)
			{
			case 60:
			case 61:
			{
				ExecuteAsClause executeAsClause = this.executeAsClause(false, vOwnerProhibited);
				if (this.inputState.guessing == 0)
				{
					ExecuteAsTriggerOption executeAsTriggerOption = base.FragmentFactory.CreateFragment<ExecuteAsTriggerOption>();
					executeAsTriggerOption.OptionKind = TriggerOptionKind.ExecuteAsClause;
					executeAsTriggerOption.ExecuteAsClause = executeAsClause;
					triggerOption = executeAsTriggerOption;
				}
				break;
			}
			default:
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					triggerOption = base.FragmentFactory.CreateFragment<TriggerOption>();
					triggerOption.OptionKind = TriggerOptionHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(triggerOption, token);
				}
				break;
			}
			}
			return triggerOption;
		}

		// Token: 0x06000E61 RID: 3681 RVA: 0x00066CF0 File Offset: 0x00064EF0
		public void procedureOptions(ProcedureStatementBody vParent)
		{
			int num = 0;
			this.match(171);
			ProcedureOption procedureOption = this.procedureOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)procedureOption.OptionKind, procedureOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureOption>(vParent, vParent.Options, procedureOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				procedureOption = this.procedureOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)procedureOption.OptionKind, procedureOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureOption>(vParent, vParent.Options, procedureOption);
				}
			}
		}

		// Token: 0x06000E62 RID: 3682 RVA: 0x00066D84 File Offset: 0x00064F84
		public ProcedureOption procedureOption()
		{
			ProcedureOption procedureOption = null;
			int num = this.LA(1);
			switch (num)
			{
			case 60:
			case 61:
			{
				ExecuteAsClause executeAsClause = this.executeAsClause(false, false);
				if (this.inputState.guessing == 0)
				{
					ExecuteAsProcedureOption executeAsProcedureOption = base.FragmentFactory.CreateFragment<ExecuteAsProcedureOption>();
					executeAsProcedureOption.ExecuteAs = executeAsClause;
					executeAsProcedureOption.OptionKind = ProcedureOptionKind.ExecuteAs;
					procedureOption = executeAsProcedureOption;
				}
				break;
			}
			default:
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					procedureOption = base.FragmentFactory.CreateFragment<ProcedureOption>();
					procedureOption.OptionKind = ProcedureOptionHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(procedureOption, token);
				}
				break;
			}
			}
			return procedureOption;
		}

		// Token: 0x06000E63 RID: 3683 RVA: 0x00066E48 File Offset: 0x00065048
		public void procedureStatementBody(ProcedureStatementBody vResult, out bool vParseErrorOccurred)
		{
			vParseErrorOccurred = false;
			try
			{
				switch (this.LA(1))
				{
				case 120:
					this.match(120);
					break;
				case 121:
					this.match(121);
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				ProcedureReference procedureReference = this.procedureReference();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(procedureReference.Name, "PROCEDURE");
					vResult.ProcedureReference = procedureReference;
				}
				if (this.inputState.guessing == 0)
				{
					base.ThrowPartialAstIfPhaseOne(vResult);
				}
				int num = this.LA(1);
				if (num <= 67)
				{
					if (num != 9 && num != 67)
					{
						goto IL_0150;
					}
				}
				else if (num != 171)
				{
					if (num != 191)
					{
						if (num != 234)
						{
							goto IL_0150;
						}
					}
					else
					{
						this.match(191);
						this.procedureParameterList(vResult);
						IToken token = this.LT(1);
						this.match(192);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
							goto IL_0163;
						}
						goto IL_0163;
					}
				}
				int num2 = this.LA(1);
				if (num2 <= 67)
				{
					if (num2 == 9 || num2 == 67)
					{
						goto IL_0163;
					}
				}
				else
				{
					if (num2 == 171)
					{
						goto IL_0163;
					}
					if (num2 == 234)
					{
						this.procedureParameterList(vResult);
						goto IL_0163;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0150:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0163:
				int num3 = this.LA(1);
				if (num3 != 9 && num3 != 67)
				{
					if (num3 != 171)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.procedureOptions(vResult);
				}
				int num4 = this.LA(1);
				if (num4 != 9)
				{
					if (num4 != 67)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(67);
					this.match(128);
					if (this.inputState.guessing == 0)
					{
						vResult.IsForReplication = true;
					}
				}
				IToken token2 = this.LT(1);
				this.match(9);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token2);
				}
				int num5 = this.LA(1);
				if (num5 <= 86)
				{
					if (num5 <= 28)
					{
						if (num5 <= 6)
						{
							if (num5 != 1)
							{
								switch (num5)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_0749;
								default:
									goto IL_0749;
								}
							}
						}
						else
						{
							switch (num5)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_0749;
							default:
								switch (num5)
								{
								case 22:
								case 23:
									break;
								default:
									if (num5 != 28)
									{
										goto IL_0749;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num5 <= 64)
					{
						switch (num5)
						{
						case 33:
						case 35:
							break;
						case 34:
							goto IL_0749;
						default:
							switch (num5)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 56:
								break;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 55:
								goto IL_0749;
							default:
								switch (num5)
								{
								case 60:
								case 61:
								case 64:
									break;
								case 62:
								case 63:
									goto IL_0749;
								default:
									goto IL_0749;
								}
								break;
							}
							break;
						}
					}
					else
					{
						switch (num5)
						{
						case 74:
						case 75:
							break;
						default:
							if (num5 != 82 && num5 != 86)
							{
								goto IL_0749;
							}
							break;
						}
					}
				}
				else if (num5 <= 162)
				{
					if (num5 <= 106)
					{
						if (num5 != 92 && num5 != 95 && num5 != 106)
						{
							goto IL_0749;
						}
					}
					else if (num5 != 119)
					{
						switch (num5)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							break;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							goto IL_0749;
						default:
							switch (num5)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								break;
							case 157:
							case 158:
							case 159:
								goto IL_0749;
							default:
								goto IL_0749;
							}
							break;
						}
					}
				}
				else if (num5 <= 191)
				{
					switch (num5)
					{
					case 167:
					case 170:
					case 171:
					case 172:
					case 176:
						break;
					case 168:
					case 169:
					case 173:
					case 174:
						goto IL_0749;
					case 175:
					{
						MethodSpecifier methodSpecifier = this.methodSpecifier();
						this.optSemicolons(vResult);
						if (this.inputState.guessing == 0)
						{
							vResult.MethodSpecifier = methodSpecifier;
							goto IL_075C;
						}
						goto IL_075C;
					}
					default:
						if (num5 != 182 && num5 != 191)
						{
							goto IL_0749;
						}
						break;
					}
				}
				else if (num5 != 204)
				{
					switch (num5)
					{
					case 219:
					case 220:
						break;
					default:
						if (num5 != 232)
						{
							goto IL_0749;
						}
						break;
					}
				}
				this.optSemicolons(vResult);
				int num6 = this.LA(1);
				if (num6 <= 92)
				{
					if (num6 <= 35)
					{
						if (num6 <= 17)
						{
							if (num6 == 1)
							{
								goto IL_075C;
							}
							switch (num6)
							{
							case 4:
							case 6:
								break;
							case 5:
								goto IL_0710;
							default:
								switch (num6)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									break;
								case 14:
								case 16:
									goto IL_0710;
								default:
									goto IL_0710;
								}
								break;
							}
						}
						else
						{
							switch (num6)
							{
							case 22:
							case 23:
								break;
							default:
								if (num6 != 28)
								{
									switch (num6)
									{
									case 33:
									case 35:
										break;
									case 34:
										goto IL_0710;
									default:
										goto IL_0710;
									}
								}
								break;
							}
						}
					}
					else if (num6 <= 75)
					{
						switch (num6)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 56:
							break;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 55:
							goto IL_0710;
						default:
							switch (num6)
							{
							case 60:
							case 61:
							case 64:
								break;
							case 62:
							case 63:
								goto IL_0710;
							default:
								switch (num6)
								{
								case 74:
								case 75:
									break;
								default:
									goto IL_0710;
								}
								break;
							}
							break;
						}
					}
					else if (num6 != 82 && num6 != 86 && num6 != 92)
					{
						goto IL_0710;
					}
				}
				else if (num6 <= 172)
				{
					if (num6 <= 119)
					{
						if (num6 != 95 && num6 != 106 && num6 != 119)
						{
							goto IL_0710;
						}
					}
					else
					{
						switch (num6)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							break;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							goto IL_0710;
						default:
							switch (num6)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								break;
							case 157:
							case 158:
							case 159:
								goto IL_0710;
							default:
								switch (num6)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									break;
								case 168:
								case 169:
									goto IL_0710;
								default:
									goto IL_0710;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num6 <= 191)
				{
					if (num6 != 176 && num6 != 182 && num6 != 191)
					{
						goto IL_0710;
					}
				}
				else
				{
					if (num6 == 204)
					{
						goto IL_075C;
					}
					switch (num6)
					{
					case 219:
						goto IL_075C;
					case 220:
						break;
					default:
						if (num6 != 232)
						{
							goto IL_0710;
						}
						break;
					}
				}
				StatementList statementList = this.statementList(ref vParseErrorOccurred);
				if (this.inputState.guessing == 0)
				{
					vResult.StatementList = statementList;
					goto IL_075C;
				}
				goto IL_075C;
				IL_0710:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0749:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_075C:;
			}
			catch (NoViableAltException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (!base.PhaseOne || vResult == null || vResult.ProcedureReference == null || vResult.ProcedureReference.Name == null)
				{
					throw;
				}
				base.ThrowPartialAstIfPhaseOne(vResult);
			}
		}

		// Token: 0x06000E64 RID: 3684 RVA: 0x0006760C File Offset: 0x0006580C
		public ProcedureReference procedureReference()
		{
			ProcedureReference procedureReference = base.FragmentFactory.CreateFragment<ProcedureReference>();
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			Literal literal = this.procNumOpt();
			if (this.inputState.guessing == 0)
			{
				procedureReference.Name = schemaObjectName;
				procedureReference.Number = literal;
			}
			return procedureReference;
		}

		// Token: 0x06000E65 RID: 3685 RVA: 0x00067650 File Offset: 0x00065850
		public void procedureParameterList(ProcedureStatementBodyBase vResult)
		{
			ProcedureParameter procedureParameter = this.procedureParameter();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, procedureParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				procedureParameter = this.procedureParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, procedureParameter);
				}
			}
		}

		// Token: 0x06000E66 RID: 3686 RVA: 0x000676BC File Offset: 0x000658BC
		public ProcedureParameter procedureParameter()
		{
			ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
			Identifier identifier = this.identifierVariable();
			int num = this.LA(1);
			if (num <= 42)
			{
				if (num == 9)
				{
					this.match(9);
					goto IL_0069;
				}
				if (num == 42)
				{
					goto IL_0069;
				}
			}
			else
			{
				if (num == 53 || num == 96)
				{
					goto IL_0069;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_0069;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0069:
			if (this.inputState.guessing == 0)
			{
				procedureParameter.VariableName = identifier;
			}
			int num2 = this.LA(1);
			if (num2 <= 53)
			{
				if (num2 == 42)
				{
					this.cursorProcedureParameter(procedureParameter);
					return procedureParameter;
				}
				if (num2 != 53)
				{
					goto IL_00C4;
				}
			}
			else if (num2 != 96)
			{
				switch (num2)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_00C4;
				}
			}
			this.scalarProcedureParameter(procedureParameter, true);
			return procedureParameter;
			IL_00C4:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E67 RID: 3687 RVA: 0x000677A4 File Offset: 0x000659A4
		public void cursorProcedureParameter(ProcedureParameter vParent)
		{
			DataTypeReference dataTypeReference = this.cursorDataType();
			if (this.inputState.guessing == 0)
			{
				vParent.DataType = dataTypeReference;
			}
			IToken token = this.LT(1);
			this.match(165);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.IsVarying = true;
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "OUTPUT", "OUT");
				vParent.Modifier = ParameterModifier.Output;
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06000E68 RID: 3688 RVA: 0x0006783C File Offset: 0x00065A3C
		public IdentifierLiteral identifierLiteral()
		{
			IdentifierLiteral identifierLiteral = base.FragmentFactory.CreateFragment<IdentifierLiteral>();
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifierLiteral, token);
					identifierLiteral.SetUnquotedIdentifier(token.getText());
					TSql80ParserBaseInternal.CheckIdentifierLiteralLength(identifierLiteral);
				}
				break;
			}
			case 233:
			{
				IToken token2 = this.LT(1);
				this.match(233);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifierLiteral, token2);
					identifierLiteral.SetIdentifier(token2.getText());
					TSql80ParserBaseInternal.CheckIdentifierLiteralLength(identifierLiteral);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierLiteral;
		}

		// Token: 0x06000E69 RID: 3689 RVA: 0x00067904 File Offset: 0x00065B04
		public ValueExpression literal()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 100)
			{
				if (num != 193)
				{
					switch (num)
					{
					case 221:
						return this.integer();
					case 222:
						return this.numeric();
					case 223:
						return this.real();
					case 224:
						return this.binary();
					case 225:
						return this.moneyLiteral();
					case 230:
					case 231:
						return this.stringLiteral();
					case 234:
						return this.globalVariableOrVariableReference();
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.odbcLiteral();
			}
			else
			{
				valueExpression = this.nullLiteral();
			}
			return valueExpression;
		}

		// Token: 0x06000E6A RID: 3690 RVA: 0x000679D8 File Offset: 0x00065BD8
		public UnaryExpression negativeConstant()
		{
			UnaryExpression unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
			IToken token = this.LT(1);
			this.match(199);
			Literal literal = this.subroutineParameterLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
				unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
				unaryExpression.Expression = literal;
			}
			return unaryExpression;
		}

		// Token: 0x06000E6B RID: 3691 RVA: 0x00067A30 File Offset: 0x00065C30
		public Literal subroutineParameterLiteral()
		{
			switch (this.LA(1))
			{
			case 221:
				return this.integer();
			case 222:
				return this.numeric();
			case 223:
				return this.real();
			case 225:
				return this.moneyLiteral();
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E6C RID: 3692 RVA: 0x00067AA0 File Offset: 0x00065CA0
		public void triggerStatementBody(TriggerStatementBody vResult, out bool vParseErrorOccurred)
		{
			bool flag = false;
			vParseErrorOccurred = false;
			this.match(155);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "TRIGGER");
				vResult.Name = schemaObjectName;
			}
			this.match(105);
			TriggerObject triggerObject = this.triggerObject();
			if (this.inputState.guessing == 0)
			{
				vResult.TriggerObject = triggerObject;
				base.ThrowPartialAstIfPhaseOne(vResult);
				if (vResult.TriggerObject.TriggerScope != TriggerScope.Normal)
				{
					flag = true;
				}
			}
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 171)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(171);
					TriggerOption triggerOption = this.triggerOption(flag);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerOption>(vResult, vResult.Options, triggerOption);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						triggerOption = this.triggerOption(flag);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerOption>(vResult, vResult.Options, triggerOption);
						}
					}
				}
			}
			if ((this.LA(1) == 67 || this.LA(1) == 232) && this.LA(2) == 232 && flag)
			{
				this.ddlTriggerMidSection(vResult);
			}
			else
			{
				if ((this.LA(1) != 67 && this.LA(1) != 232) || !TSql110ParserInternal.tokenSet_150_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.dmlTriggerMidSection(vResult);
			}
			IToken token = this.LT(1);
			this.match(9);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						switch (num2)
						{
						case 4:
						case 6:
							break;
						case 5:
							goto IL_047F;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_047F;
							default:
								goto IL_047F;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							break;
						default:
							if (num2 != 28)
							{
								switch (num2)
								{
								case 33:
								case 35:
									break;
								case 34:
									goto IL_047F;
								default:
									goto IL_047F;
								}
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 56:
						break;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 55:
						goto IL_047F;
					default:
						switch (num2)
						{
						case 60:
						case 61:
						case 64:
							break;
						case 62:
						case 63:
							goto IL_047F;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								break;
							default:
								goto IL_047F;
							}
							break;
						}
						break;
					}
				}
				else if (num2 != 82 && num2 != 86 && num2 != 92)
				{
					goto IL_047F;
				}
			}
			else if (num2 <= 162)
			{
				if (num2 <= 106)
				{
					if (num2 != 95 && num2 != 106)
					{
						goto IL_047F;
					}
				}
				else if (num2 != 119)
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						goto IL_047F;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							break;
						case 157:
						case 158:
						case 159:
							goto IL_047F;
						default:
							goto IL_047F;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				switch (num2)
				{
				case 167:
				case 170:
				case 171:
				case 172:
				case 176:
					break;
				case 168:
				case 169:
				case 173:
				case 174:
					goto IL_047F;
				case 175:
				{
					MethodSpecifier methodSpecifier = this.methodSpecifier();
					this.optSemicolons(vResult);
					if (this.inputState.guessing == 0)
					{
						vResult.MethodSpecifier = methodSpecifier;
						return;
					}
					return;
				}
				default:
					if (num2 != 182 && num2 != 191)
					{
						goto IL_047F;
					}
					break;
				}
			}
			else if (num2 != 204 && num2 != 220 && num2 != 232)
			{
				goto IL_047F;
			}
			while (this.LA(1) == 204)
			{
				this.LT(1);
				this.match(204);
			}
			StatementList statementList = this.statementList(ref vParseErrorOccurred);
			if (this.inputState.guessing == 0)
			{
				vResult.StatementList = statementList;
				return;
			}
			return;
			IL_047F:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E6D RID: 3693 RVA: 0x00067F40 File Offset: 0x00066140
		public void ddlTriggerMidSection(TriggerStatementBody vParent)
		{
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "AFTER");
					vParent.TriggerType = TriggerType.After;
				}
			}
			else
			{
				this.match(67);
				if (this.inputState.guessing == 0)
				{
					vParent.TriggerType = TriggerType.For;
				}
			}
			if (this.LA(1) == 232 && (this.LA(2) == 9 || this.LA(2) == 198) && !base.NextTokenMatches("LOGON"))
			{
				TriggerAction triggerAction = this.ddlTriggerAction();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					triggerAction = this.ddlTriggerAction();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
					}
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 9)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "LOGON");
					if (vParent.TriggerObject.TriggerScope == TriggerScope.AllServer)
					{
						TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
						triggerAction.TriggerActionType = TriggerActionType.LogOn;
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
						return;
					}
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46044", token2, TSqlParserResource.SQL46044Message, new string[0]);
					return;
				}
			}
		}

		// Token: 0x06000E6E RID: 3694 RVA: 0x00068104 File Offset: 0x00066304
		public void dmlTriggerMidSection(TriggerStatementBody vParent)
		{
			bool flag = false;
			int num = 0;
			int num2 = this.LA(1);
			if (num2 != 67)
			{
				if (num2 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				int num3 = this.LA(1);
				if (num3 <= 86)
				{
					if (num3 == 48 || num3 == 86)
					{
						goto IL_00BC;
					}
				}
				else if (num3 != 102)
				{
					if (num3 == 160)
					{
						goto IL_00BC;
					}
				}
				else
				{
					this.LT(1);
					this.match(102);
					if (this.inputState.guessing == 0)
					{
						flag = true;
						goto IL_00BC;
					}
					goto IL_00BC;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_00BC:
				if (this.inputState.guessing == 0)
				{
					if (flag)
					{
						TSql80ParserBaseInternal.Match(token, "INSTEAD");
						vParent.TriggerType = TriggerType.InsteadOf;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "AFTER");
						vParent.TriggerType = TriggerType.After;
					}
				}
			}
			else
			{
				this.match(67);
				if (this.inputState.guessing == 0)
				{
					vParent.TriggerType = TriggerType.For;
				}
			}
			TriggerAction triggerAction = this.dmlTriggerAction();
			if (this.inputState.guessing == 0)
			{
				TSql90ParserBaseInternal.CheckDmlTriggerActionDuplication(num, triggerAction);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
				TSql90ParserBaseInternal.UpdateDmlTriggerActionEncounteredOptions(ref num, triggerAction);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				triggerAction = this.dmlTriggerAction();
				if (this.inputState.guessing == 0)
				{
					TSql90ParserBaseInternal.CheckDmlTriggerActionDuplication(num, triggerAction);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
					TSql90ParserBaseInternal.UpdateDmlTriggerActionEncounteredOptions(ref num, triggerAction);
				}
			}
			int num4 = this.LA(1);
			if (num4 != 9)
			{
				if (num4 != 99)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(99);
				this.match(67);
				this.match(128);
				if (this.inputState.guessing == 0)
				{
					vParent.IsNotForReplication = true;
					return;
				}
			}
		}

		// Token: 0x06000E6F RID: 3695 RVA: 0x000682EC File Offset: 0x000664EC
		public TriggerAction dmlTriggerAction()
		{
			TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
			int num = this.LA(1);
			if (num != 48)
			{
				if (num != 86)
				{
					if (num != 160)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(160);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token);
						triggerAction.TriggerActionType = TriggerActionType.Update;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(86);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token2);
						triggerAction.TriggerActionType = TriggerActionType.Insert;
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(48);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token3);
					triggerAction.TriggerActionType = TriggerActionType.Delete;
				}
			}
			return triggerAction;
		}

		// Token: 0x06000E70 RID: 3696 RVA: 0x000683D0 File Offset: 0x000665D0
		public TriggerAction ddlTriggerAction()
		{
			TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				triggerAction.TriggerActionType = TriggerActionType.Event;
				EventNotificationEventType eventNotificationEventType;
				if (TriggerEventTypeHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql110, out eventNotificationEventType))
				{
					triggerAction.EventTypeGroup = base.CreateEventTypeContainer(eventNotificationEventType, token);
				}
				else
				{
					EventNotificationEventGroup eventNotificationEventGroup = TriggerEventGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql110);
					triggerAction.EventTypeGroup = base.CreateEventGroupContainer(eventNotificationEventGroup, token);
				}
			}
			return triggerAction;
		}

		// Token: 0x06000E71 RID: 3697 RVA: 0x00068450 File Offset: 0x00066650
		public void endConversationArgumentsOpt(EndConversationStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 28)
					{
						if (num <= 6)
						{
							if (num != 1)
							{
								switch (num)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_034B;
								default:
									goto IL_034B;
								}
							}
						}
						else
						{
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_034B;
							default:
								switch (num)
								{
								case 22:
								case 23:
									break;
								default:
									if (num != 28)
									{
										goto IL_034B;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num <= 75)
					{
						switch (num)
						{
						case 33:
						case 35:
							break;
						case 34:
							goto IL_034B;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								break;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								goto IL_034B;
							default:
								switch (num)
								{
								case 74:
								case 75:
									break;
								default:
									goto IL_034B;
								}
								break;
							}
							break;
						}
					}
					else if (num != 82 && num != 86 && num != 92)
					{
						goto IL_034B;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num != 95 && num != 106 && num != 119)
						{
							goto IL_034B;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							break;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							goto IL_034B;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								break;
							case 157:
							case 158:
							case 159:
								goto IL_034B;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									break;
								case 168:
								case 169:
									goto IL_034B;
								default:
									goto IL_034B;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num != 176 && num != 182 && num != 191)
					{
						goto IL_034B;
					}
				}
				else
				{
					switch (num)
					{
					case 204:
						break;
					case 205:
						goto IL_034B;
					case 206:
					{
						this.match(206);
						ValueExpression valueExpression = this.integerOrVariable();
						IToken token2 = this.LT(1);
						this.match(232);
						this.match(206);
						ValueExpression valueExpression2 = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "DESCRIPTION");
							vParent.ErrorCode = valueExpression;
							vParent.ErrorDescription = valueExpression2;
							return;
						}
						return;
					}
					default:
						switch (num)
						{
						case 219:
						case 220:
							break;
						default:
							if (num != 232)
							{
								goto IL_034B;
							}
							break;
						}
						break;
					}
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "CLEANUP");
					vParent.WithCleanup = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				return;
				IL_034B:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E72 RID: 3698 RVA: 0x000687F8 File Offset: 0x000669F8
		public SelectElement receiveSelectExpression()
		{
			SelectElement selectElement;
			if (this.LA(1) == 234 && TSql110ParserInternal.tokenSet_89_.member(this.LA(2)))
			{
				selectElement = this.selectSetVariable();
			}
			else
			{
				bool flag = false;
				if (TSql110ParserInternal.tokenSet_96_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_151_.member(this.LA(2)))
				{
					int num = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.selectStarExpression();
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(num);
					this.inputState.guessing--;
				}
				if (flag)
				{
					selectElement = this.selectStarExpression();
				}
				else
				{
					if (!TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_152_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					selectElement = this.receiveColumnSelectExpression();
				}
			}
			return selectElement;
		}

		// Token: 0x06000E73 RID: 3699 RVA: 0x00068900 File Offset: 0x00066B00
		public SelectScalarExpression receiveColumnSelectExpression()
		{
			SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				selectScalarExpression.Expression = scalarExpression;
			}
			int num = this.LA(1);
			if (num <= 71)
			{
				if (num != 9)
				{
					if (num != 71)
					{
						goto IL_00D8;
					}
					return selectScalarExpression;
				}
			}
			else
			{
				if (num == 198)
				{
					return selectScalarExpression;
				}
				switch (num)
				{
				case 230:
				case 231:
				case 232:
				case 233:
					break;
				default:
					goto IL_00D8;
				}
			}
			int num2 = this.LA(1);
			if (num2 != 9)
			{
				switch (num2)
				{
				case 230:
				case 231:
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
			}
			IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				selectScalarExpression.ColumnName = identifierOrValueExpression;
				return selectScalarExpression;
			}
			return selectScalarExpression;
			IL_00D8:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E74 RID: 3700 RVA: 0x000689FC File Offset: 0x00066BFC
		public DialogOption beginConversationArgument(ref int encounteredOptions)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			if (num <= 133)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_01D5;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_01D5;
						}
					}
				}
				else if (num <= 93)
				{
					if (num != 81 && num != 93)
					{
						goto IL_01D5;
					}
				}
				else
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					case 102:
					case 104:
						goto IL_01D5;
					case 103:
					case 105:
						return this.onOffBeginDialogConversationArgument(token, ref encounteredOptions);
					default:
						if (num != 133)
						{
							goto IL_01D5;
						}
						break;
					}
				}
			}
			else if (num <= 163)
			{
				if (num <= 141)
				{
					if (num != 136 && num != 141)
					{
						goto IL_01D5;
					}
				}
				else if (num != 147 && num != 163)
				{
					goto IL_01D5;
				}
			}
			else if (num <= 193)
			{
				if (num != 187)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_01D5;
					default:
						goto IL_01D5;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_01D5;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_01D5;
					default:
						goto IL_01D5;
					}
					break;
				}
			}
			return this.scalarExpressionBeginDialogConversationArgument(token, ref encounteredOptions);
			IL_01D5:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E75 RID: 3701 RVA: 0x00068BF4 File Offset: 0x00066DF4
		public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, ref int encounteredOptions)
		{
			ScalarExpressionDialogOption scalarExpressionDialogOption = base.FragmentFactory.CreateFragment<ScalarExpressionDialogOption>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(tOption, "RELATED_CONVERSATION"))
				{
					scalarExpressionDialogOption.OptionKind = DialogOptionKind.RelatedConversation;
					scalarExpressionDialogOption.Value = scalarExpression;
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 1, tOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 0, tOption);
				}
				else if (TSql80ParserBaseInternal.TryMatch(tOption, "RELATED_CONVERSATION_GROUP"))
				{
					scalarExpressionDialogOption.OptionKind = DialogOptionKind.RelatedConversationGroup;
					scalarExpressionDialogOption.Value = scalarExpression;
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 1, tOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 0, tOption);
				}
				else
				{
					TSql80ParserBaseInternal.Match(tOption, "LIFETIME");
					scalarExpressionDialogOption.OptionKind = DialogOptionKind.Lifetime;
					scalarExpressionDialogOption.Value = scalarExpression;
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)scalarExpressionDialogOption.OptionKind, tOption);
				}
			}
			return scalarExpressionDialogOption;
		}

		// Token: 0x06000E76 RID: 3702 RVA: 0x00068CA8 File Offset: 0x00066EA8
		public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, ref int encounteredOptions)
		{
			OnOffDialogOption onOffDialogOption = base.FragmentFactory.CreateFragment<OnOffDialogOption>();
			OptionState optionState = this.optionOnOff(onOffDialogOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tOption, "ENCRYPTION");
				onOffDialogOption.OptionKind = DialogOptionKind.Encryption;
				TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)onOffDialogOption.OptionKind, tOption);
				onOffDialogOption.OptionState = optionState;
			}
			return onOffDialogOption;
		}

		// Token: 0x06000E77 RID: 3703 RVA: 0x00068D00 File Offset: 0x00066F00
		public MergeStatement mergeStatementWithoutSemicolon(SubDmlFlags subDmlFlags)
		{
			MergeStatement mergeStatement = base.FragmentFactory.CreateFragment<MergeStatement>();
			MergeSpecification mergeSpecification = this.mergeSpecification(subDmlFlags);
			if (this.inputState.guessing == 0)
			{
				mergeStatement.MergeSpecification = mergeSpecification;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return mergeStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return mergeStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return mergeStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return mergeStatement;
						default:
							if (num == 28)
							{
								return mergeStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return mergeStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return mergeStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return mergeStatement;
						default:
							if (num == 82)
							{
								return mergeStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return mergeStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						return mergeStatement;
					}
					if (num == 111)
					{
						this.optimizerHints(mergeStatement, mergeStatement.OptimizerHints);
						return mergeStatement;
					}
					if (num == 119)
					{
						return mergeStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return mergeStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return mergeStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return mergeStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176 || num == 182 || num == 191)
				{
					return mergeStatement;
				}
			}
			else
			{
				if (num == 204)
				{
					return mergeStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return mergeStatement;
				default:
					if (num == 232)
					{
						return mergeStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E78 RID: 3704 RVA: 0x00068FA8 File Offset: 0x000671A8
		public MergeActionClause mergeActionClause()
		{
			MergeActionClause mergeActionClause = base.FragmentFactory.CreateFragment<MergeActionClause>();
			this.match(168);
			MergeCondition mergeCondition = this.mergeCondition();
			if (this.inputState.guessing == 0)
			{
				mergeActionClause.Condition = mergeCondition;
			}
			int num = this.LA(1);
			if (num != 7)
			{
				if (num != 150)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(7);
				BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					mergeActionClause.SearchCondition = booleanExpression;
				}
			}
			this.match(150);
			MergeAction mergeAction = this.mergeAction(mergeCondition);
			if (this.inputState.guessing == 0)
			{
				mergeActionClause.Action = mergeAction;
			}
			return mergeActionClause;
		}

		// Token: 0x06000E79 RID: 3705 RVA: 0x00069060 File Offset: 0x00067260
		public MergeCondition mergeCondition()
		{
			MergeCondition mergeCondition = MergeCondition.NotSpecified;
			int num = this.LA(1);
			if (num != 99)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "MATCHED");
					mergeCondition = MergeCondition.Matched;
				}
			}
			else
			{
				this.match(99);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "MATCHED");
				}
				int num2 = this.LA(1);
				if (num2 != 7)
				{
					if (num2 != 18)
					{
						if (num2 != 150)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(18);
						IToken token3 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing != 0)
						{
							return mergeCondition;
						}
						if (TSql80ParserBaseInternal.TryMatch(token3, "TARGET"))
						{
							return MergeCondition.NotMatchedByTarget;
						}
						TSql80ParserBaseInternal.Match(token3, "SOURCE");
						return MergeCondition.NotMatchedBySource;
					}
				}
				if (this.inputState.guessing == 0)
				{
					mergeCondition = MergeCondition.NotMatched;
				}
			}
			return mergeCondition;
		}

		// Token: 0x06000E7A RID: 3706 RVA: 0x00069198 File Offset: 0x00067398
		public MergeAction mergeAction(MergeCondition condition)
		{
			int num = this.LA(1);
			MergeAction mergeAction;
			if (num != 48)
			{
				if (num != 86)
				{
					if (num != 160)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					mergeAction = this.updateMergeAction(condition);
				}
				else
				{
					mergeAction = this.insertMergeAction(condition);
				}
			}
			else
			{
				mergeAction = this.deleteMergeAction(condition);
			}
			return mergeAction;
		}

		// Token: 0x06000E7B RID: 3707 RVA: 0x000691F4 File Offset: 0x000673F4
		public UpdateMergeAction updateMergeAction(MergeCondition condition)
		{
			UpdateMergeAction updateMergeAction = base.FragmentFactory.CreateFragment<UpdateMergeAction>();
			IToken token = this.LT(1);
			this.match(160);
			this.setClausesList(updateMergeAction, updateMergeAction.SetClauses);
			if (this.inputState.guessing == 0)
			{
				if (condition == MergeCondition.NotMatched || condition == MergeCondition.NotMatchedByTarget)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46041", token, TSqlParserResource.SQL46041Message, new string[] { "Update" });
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(updateMergeAction, token);
			}
			return updateMergeAction;
		}

		// Token: 0x06000E7C RID: 3708 RVA: 0x0006926C File Offset: 0x0006746C
		public InsertMergeAction insertMergeAction(MergeCondition condition)
		{
			InsertMergeAction insertMergeAction = base.FragmentFactory.CreateFragment<InsertMergeAction>();
			IToken token = this.LT(1);
			this.match(86);
			this.mergeInsertDmlColumnListOpt(insertMergeAction);
			ValuesInsertSource valuesInsertSource = this.mergeInsertSource();
			if (this.inputState.guessing == 0)
			{
				if (condition == MergeCondition.Matched || condition == MergeCondition.NotMatchedBySource)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46040", token, TSqlParserResource.SQL46040Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(insertMergeAction, token);
				insertMergeAction.Source = valuesInsertSource;
			}
			return insertMergeAction;
		}

		// Token: 0x06000E7D RID: 3709 RVA: 0x000692E0 File Offset: 0x000674E0
		public DeleteMergeAction deleteMergeAction(MergeCondition condition)
		{
			DeleteMergeAction deleteMergeAction = base.FragmentFactory.CreateFragment<DeleteMergeAction>();
			IToken token = this.LT(1);
			this.match(48);
			if (this.inputState.guessing == 0)
			{
				if (condition == MergeCondition.NotMatched || condition == MergeCondition.NotMatchedByTarget)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46041", token, TSqlParserResource.SQL46041Message, new string[] { "Delete" });
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(deleteMergeAction, token);
			}
			return deleteMergeAction;
		}

		// Token: 0x06000E7E RID: 3710 RVA: 0x00069348 File Offset: 0x00067548
		public ValuesInsertSource mergeInsertSource()
		{
			ValuesInsertSource valuesInsertSource = base.FragmentFactory.CreateFragment<ValuesInsertSource>();
			int num = this.LA(1);
			if (num != 47)
			{
				if (num != 164)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(164);
				RowValue rowValue = this.rowValueExpressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(valuesInsertSource, token);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RowValue>(valuesInsertSource, valuesInsertSource.RowValues, rowValue);
				}
			}
			else
			{
				this.defaultValuesInsertSource(valuesInsertSource);
			}
			return valuesInsertSource;
		}

		// Token: 0x06000E7F RID: 3711 RVA: 0x000693D4 File Offset: 0x000675D4
		public void execStart(TSqlFragment vParent)
		{
			switch (this.LA(1))
			{
			case 60:
			{
				IToken token = this.LT(1);
				this.match(60);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				break;
			}
			case 61:
			{
				IToken token2 = this.LT(1);
				this.match(61);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000E80 RID: 3712 RVA: 0x00069460 File Offset: 0x00067660
		public ExecuteContext executeAsStatementContext()
		{
			ExecuteContext executeContext = base.FragmentFactory.CreateFragment<ExecuteContext>();
			int num = this.LA(1);
			if (num != 163)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				int num2 = this.LA(1);
				if (num2 <= 92)
				{
					if (num2 <= 28)
					{
						if (num2 <= 6)
						{
							if (num2 != 1)
							{
								switch (num2)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_035E;
								default:
									goto IL_035E;
								}
							}
						}
						else
						{
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_035E;
							default:
								switch (num2)
								{
								case 22:
								case 23:
									break;
								default:
									if (num2 != 28)
									{
										goto IL_035E;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num2 <= 75)
					{
						switch (num2)
						{
						case 33:
						case 35:
							break;
						case 34:
							goto IL_035E;
						default:
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								break;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								goto IL_035E;
							default:
								switch (num2)
								{
								case 74:
								case 75:
									break;
								default:
									goto IL_035E;
								}
								break;
							}
							break;
						}
					}
					else if (num2 != 82 && num2 != 86 && num2 != 92)
					{
						goto IL_035E;
					}
				}
				else if (num2 <= 172)
				{
					if (num2 <= 119)
					{
						if (num2 != 95 && num2 != 106 && num2 != 119)
						{
							goto IL_035E;
						}
					}
					else
					{
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							break;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							goto IL_035E;
						default:
							switch (num2)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								break;
							case 157:
							case 158:
							case 159:
								goto IL_035E;
							default:
								switch (num2)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									break;
								case 168:
								case 169:
									goto IL_035E;
								default:
									goto IL_035E;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 191)
				{
					if (num2 != 176 && num2 != 182 && num2 != 191)
					{
						goto IL_035E;
					}
				}
				else
				{
					switch (num2)
					{
					case 204:
						break;
					case 205:
						goto IL_035E;
					case 206:
					{
						this.match(206);
						ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token, "LOGIN");
							executeContext.Kind = ExecuteAsOption.Login;
							executeContext.Principal = scalarExpression;
							return executeContext;
						}
						return executeContext;
					}
					default:
						switch (num2)
						{
						case 219:
						case 220:
							break;
						default:
							if (num2 != 232)
							{
								goto IL_035E;
							}
							break;
						}
						break;
					}
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "CALLER");
					executeContext.Kind = ExecuteAsOption.Caller;
					TSql80ParserBaseInternal.UpdateTokenInfo(executeContext, token);
					return executeContext;
				}
				return executeContext;
				IL_035E:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				this.match(163);
				this.match(206);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					executeContext.Kind = ExecuteAsOption.User;
					executeContext.Principal = scalarExpression;
				}
			}
			return executeContext;
		}

		// Token: 0x06000E81 RID: 3713 RVA: 0x000697F4 File Offset: 0x000679F4
		public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				if (this.LA(1) == 232 && this.LA(2) == 176)
				{
					IToken token = this.LT(1);
					this.match(232);
					IToken token2 = this.LT(1);
					this.match(176);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "NO");
						vParent.WithNoRevert = true;
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
						return;
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 88)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token3 = this.LT(1);
					this.match(232);
					this.match(88);
					VariableReference variableReference = this.variable();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "COOKIE");
						vParent.Cookie = variableReference;
						return;
					}
				}
				return;
			}
			if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E82 RID: 3714 RVA: 0x00069948 File Offset: 0x00067B48
		public ExecuteOption executeOption()
		{
			ExecuteOption executeOption;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_16_.member(this.LA(2)) && base.NextTokenMatches("RECOMPILE"))
			{
				executeOption = this.executeOptionRecompile();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				executeOption = this.executeOptionResultSets();
			}
			return executeOption;
		}

		// Token: 0x06000E83 RID: 3715 RVA: 0x000699C8 File Offset: 0x00067BC8
		public ExecuteOption executeOptionRecompile()
		{
			ExecuteOption executeOption = base.FragmentFactory.CreateFragment<ExecuteOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RECOMPILE");
				executeOption.OptionKind = ExecuteOptionKind.Recompile;
			}
			return executeOption;
		}

		// Token: 0x06000E84 RID: 3716 RVA: 0x00069A18 File Offset: 0x00067C18
		public ResultSetsExecuteOption executeOptionResultSets()
		{
			ResultSetsExecuteOption resultSetsExecuteOption = base.FragmentFactory.CreateFragment<ResultSetsExecuteOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RESULT");
				TSql80ParserBaseInternal.Match(token2, "SETS");
				resultSetsExecuteOption.OptionKind = ExecuteOptionKind.ResultSets;
			}
			int num = this.LA(1);
			if (num != 191)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token3, "UNDEFINED"))
					{
						resultSetsExecuteOption.ResultSetsOptionKind = ResultSetsOptionKind.Undefined;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token3, "NONE");
						resultSetsExecuteOption.ResultSetsOptionKind = ResultSetsOptionKind.None;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(resultSetsExecuteOption, token3);
				}
			}
			else
			{
				this.match(191);
				ResultSetDefinition resultSetDefinition = this.resultSetDefinition();
				if (this.inputState.guessing == 0)
				{
					resultSetsExecuteOption.ResultSetsOptionKind = ResultSetsOptionKind.ResultSetsDefined;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ResultSetDefinition>(resultSetsExecuteOption, resultSetsExecuteOption.Definitions, resultSetDefinition);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					resultSetDefinition = this.resultSetDefinition();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ResultSetDefinition>(resultSetsExecuteOption, resultSetsExecuteOption.Definitions, resultSetDefinition);
					}
				}
				IToken token4 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(resultSetsExecuteOption, token4);
				}
			}
			return resultSetsExecuteOption;
		}

		// Token: 0x06000E85 RID: 3717 RVA: 0x00069BB4 File Offset: 0x00067DB4
		public ResultSetDefinition resultSetDefinition()
		{
			ResultSetDefinition resultSetDefinition;
			if (this.LA(1) == 191)
			{
				resultSetDefinition = this.inlineResultSetDefinition();
			}
			else if (this.LA(1) == 9 && this.LA(2) == 67)
			{
				resultSetDefinition = this.asForXmlResultSetDefinition();
			}
			else
			{
				if (this.LA(1) != 9 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				resultSetDefinition = this.asSchemaObjectResultSetDefinition();
			}
			return resultSetDefinition;
		}

		// Token: 0x06000E86 RID: 3718 RVA: 0x00069C30 File Offset: 0x00067E30
		public InlineResultSetDefinition inlineResultSetDefinition()
		{
			InlineResultSetDefinition inlineResultSetDefinition = base.FragmentFactory.CreateFragment<InlineResultSetDefinition>();
			this.match(191);
			ResultColumnDefinition resultColumnDefinition = this.resultColumnDefinition();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ResultColumnDefinition>(inlineResultSetDefinition, inlineResultSetDefinition.ResultColumnDefinitions, resultColumnDefinition);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				resultColumnDefinition = this.resultColumnDefinition();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ResultColumnDefinition>(inlineResultSetDefinition, inlineResultSetDefinition.ResultColumnDefinitions, resultColumnDefinition);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(inlineResultSetDefinition, token);
			}
			return inlineResultSetDefinition;
		}

		// Token: 0x06000E87 RID: 3719 RVA: 0x00069CDC File Offset: 0x00067EDC
		public ResultSetDefinition asForXmlResultSetDefinition()
		{
			ResultSetDefinition resultSetDefinition = base.FragmentFactory.CreateFragment<ResultSetDefinition>();
			this.match(9);
			this.match(67);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
				resultSetDefinition.ResultSetType = ResultSetType.ForXml;
				TSql80ParserBaseInternal.UpdateTokenInfo(resultSetDefinition, token);
			}
			return resultSetDefinition;
		}

		// Token: 0x06000E88 RID: 3720 RVA: 0x00069D44 File Offset: 0x00067F44
		public SchemaObjectResultSetDefinition asSchemaObjectResultSetDefinition()
		{
			SchemaObjectResultSetDefinition schemaObjectResultSetDefinition = base.FragmentFactory.CreateFragment<SchemaObjectResultSetDefinition>();
			this.match(9);
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "OBJECT"))
				{
					schemaObjectResultSetDefinition.ResultSetType = ResultSetType.Object;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "TYPE");
					schemaObjectResultSetDefinition.ResultSetType = ResultSetType.Type;
				}
				schemaObjectResultSetDefinition.Name = schemaObjectName;
			}
			return schemaObjectResultSetDefinition;
		}

		// Token: 0x06000E89 RID: 3721 RVA: 0x00069DC0 File Offset: 0x00067FC0
		public ResultColumnDefinition resultColumnDefinition()
		{
			ResultColumnDefinition resultColumnDefinition = base.FragmentFactory.CreateFragment<ResultColumnDefinition>();
			ColumnDefinitionBase columnDefinitionBase = this.columnDefinitionBasic();
			if (this.inputState.guessing == 0)
			{
				resultColumnDefinition.ColumnDefinition = columnDefinitionBase;
			}
			int num = this.LA(1);
			switch (num)
			{
			case 99:
			case 100:
			{
				NullableConstraintDefinition nullableConstraintDefinition = this.nullableConstraint();
				if (this.inputState.guessing == 0)
				{
					resultColumnDefinition.Nullable = nullableConstraintDefinition;
				}
				break;
			}
			default:
				if (num != 192 && num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				break;
			}
			return resultColumnDefinition;
		}

		// Token: 0x06000E8A RID: 3722 RVA: 0x00069E50 File Offset: 0x00068050
		public void execTypes(ExecuteSpecification vParent)
		{
			if (this.LA(1) == 191)
			{
				this.match(191);
				ExecutableEntity executableEntity = this.execStrTypes();
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.ExecutableEntity = executableEntity;
				}
				int num = this.LA(1);
				if (num <= 95)
				{
					if (num <= 35)
					{
						if (num <= 17)
						{
							if (num == 1)
							{
								goto IL_030F;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_030F;
							case 5:
								break;
							default:
								switch (num)
								{
								case 9:
								{
									ExecuteContext executeContext = this.execStrExecCtxt();
									if (this.inputState.guessing == 0)
									{
										vParent.ExecuteContext = executeContext;
										goto IL_030F;
									}
									goto IL_030F;
								}
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_030F;
								}
								break;
							}
						}
						else
						{
							switch (num)
							{
							case 22:
							case 23:
								goto IL_030F;
							default:
								if (num == 28)
								{
									goto IL_030F;
								}
								switch (num)
								{
								case 33:
								case 35:
									goto IL_030F;
								}
								break;
							}
						}
					}
					else if (num <= 82)
					{
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_030F;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								goto IL_030F;
							default:
								if (num == 82)
								{
									goto IL_030F;
								}
								break;
							}
							break;
						}
					}
					else if (num == 86 || num == 92 || num == 95)
					{
						goto IL_030F;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num == 106 || num == 111 || num == 119)
						{
							goto IL_030F;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_030F;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_030F;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_030F;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 192)
				{
					if (num == 176 || num == 182)
					{
						goto IL_030F;
					}
					switch (num)
					{
					case 191:
					case 192:
						goto IL_030F;
					}
				}
				else
				{
					if (num == 204)
					{
						goto IL_030F;
					}
					switch (num)
					{
					case 219:
					case 220:
						goto IL_030F;
					default:
						if (num == 232)
						{
							goto IL_030F;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_030F:
				if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AT"))
				{
					Identifier identifier = this.linkedServer();
					if (this.inputState.guessing == 0)
					{
						vParent.LinkedServer = identifier;
						return;
					}
				}
				else
				{
					if (TSql110ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
					{
						return;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else if (TSql110ParserInternal.tokenSet_153_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_154_.member(this.LA(2)))
			{
				ExecutableEntity executableEntity = this.execProcEx();
				if (this.inputState.guessing == 0)
				{
					vParent.ExecutableEntity = executableEntity;
					return;
				}
			}
			else
			{
				if (this.LA(1) != 234 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				VariableReference variableReference = this.variable();
				this.match(206);
				ExecutableEntity executableEntity = this.execProcEx();
				if (this.inputState.guessing == 0)
				{
					vParent.Variable = variableReference;
					vParent.ExecutableEntity = executableEntity;
					return;
				}
			}
		}

		// Token: 0x06000E8B RID: 3723 RVA: 0x0006A2A8 File Offset: 0x000684A8
		public ExecutableEntity execStrTypes()
		{
			ExecutableEntity executableEntity = this.execSqlList();
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				this.setParamList(executableEntity);
			}
			return executableEntity;
		}

		// Token: 0x06000E8C RID: 3724 RVA: 0x0006A2FC File Offset: 0x000684FC
		public ExecuteContext execStrExecCtxt()
		{
			this.match(9);
			return this.execCtxtStmt();
		}

		// Token: 0x06000E8D RID: 3725 RVA: 0x0006A31C File Offset: 0x0006851C
		public Identifier linkedServer()
		{
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AT");
			}
			return identifier;
		}

		// Token: 0x06000E8E RID: 3726 RVA: 0x0006A360 File Offset: 0x00068560
		public ExecutableProcedureReference execProcEx()
		{
			int num = this.LA(1);
			ExecutableProcedureReference executableProcedureReference;
			if (num != 107)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
					case 234:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				executableProcedureReference = this.execProc();
			}
			else
			{
				executableProcedureReference = this.adhocDataSourceExecproc();
			}
			return executableProcedureReference;
		}

		// Token: 0x06000E8F RID: 3727 RVA: 0x0006A3C4 File Offset: 0x000685C4
		public ExecuteContext execCtxtStmt()
		{
			ExecuteContext executeContext = base.FragmentFactory.CreateFragment<ExecuteContext>();
			this.execCtxtStmtType(executeContext);
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return executeContext;
						}
						switch (num)
						{
						case 4:
						case 6:
							return executeContext;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return executeContext;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return executeContext;
						default:
							if (num == 28)
							{
								return executeContext;
							}
							switch (num)
							{
							case 33:
							case 35:
								return executeContext;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return executeContext;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return executeContext;
						default:
							if (num == 82)
							{
								return executeContext;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return executeContext;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 111 || num == 119)
					{
						return executeContext;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return executeContext;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return executeContext;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return executeContext;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 192)
			{
				if (num == 176 || num == 182)
				{
					return executeContext;
				}
				switch (num)
				{
				case 191:
				case 192:
					return executeContext;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
					return executeContext;
				case 205:
					break;
				case 206:
				{
					Literal literal = this.execCtxtStmtPrincipal();
					if (this.inputState.guessing == 0)
					{
						executeContext.Principal = literal;
						return executeContext;
					}
					return executeContext;
				}
				default:
					switch (num)
					{
					case 219:
					case 220:
						return executeContext;
					default:
						if (num == 232)
						{
							return executeContext;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E90 RID: 3728 RVA: 0x0006A688 File Offset: 0x00068888
		public void execCtxtStmtType(ExecuteContext vParent)
		{
			int num = this.LA(1);
			if (num != 163)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOGIN");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.Kind = ExecuteAsOption.Login;
					return;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(163);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					vParent.Kind = ExecuteAsOption.User;
					return;
				}
			}
		}

		// Token: 0x06000E91 RID: 3729 RVA: 0x0006A730 File Offset: 0x00068930
		public Literal execCtxtStmtPrincipal()
		{
			this.match(206);
			return this.stringLiteral();
		}

		// Token: 0x06000E92 RID: 3730 RVA: 0x0006A754 File Offset: 0x00068954
		public ExecutableStringList execSqlList()
		{
			ExecutableStringList executableStringList = base.FragmentFactory.CreateFragment<ExecutableStringList>();
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(executableStringList, executableStringList.Strings, valueExpression);
			}
			while (this.LA(1) == 197)
			{
				this.match(197);
				valueExpression = this.stringOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(executableStringList, executableStringList.Strings, valueExpression);
				}
			}
			return executableStringList;
		}

		// Token: 0x06000E93 RID: 3731 RVA: 0x0006A7CC File Offset: 0x000689CC
		public void setParamList(ExecutableEntity vParent)
		{
			bool flag = false;
			int num = 0;
			ExecuteParameter executeParameter = this.setParam(ref flag, ref num);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExecuteParameter>(vParent, vParent.Parameters, executeParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				executeParameter = this.setParam(ref flag, ref num);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExecuteParameter>(vParent, vParent.Parameters, executeParameter);
				}
			}
		}

		// Token: 0x06000E94 RID: 3732 RVA: 0x0006A844 File Offset: 0x00068A44
		public ExecutableProcedureReference adhocDataSourceExecproc()
		{
			ExecutableProcedureReference executableProcedureReference = base.FragmentFactory.CreateFragment<ExecutableProcedureReference>();
			AdHocDataSource adHocDataSource = this.adhocDataSource();
			this.match(200);
			ProcedureReferenceName procedureReferenceName = this.procObjectReference();
			if (this.inputState.guessing == 0)
			{
				executableProcedureReference.AdHocDataSource = adHocDataSource;
				executableProcedureReference.ProcedureReference = procedureReferenceName;
			}
			if (TSql110ParserInternal.tokenSet_17_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_18_.member(this.LA(2)))
			{
				this.setParamList(executableProcedureReference);
			}
			else if (!TSql110ParserInternal.tokenSet_19_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executableProcedureReference;
		}

		// Token: 0x06000E95 RID: 3733 RVA: 0x0006A8FC File Offset: 0x00068AFC
		public ProcedureReferenceName procObjectReference()
		{
			ProcedureReferenceName procedureReferenceName = base.FragmentFactory.CreateFragment<ProcedureReferenceName>();
			ProcedureReference procedureReference = this.procedureReference();
			if (this.inputState.guessing == 0)
			{
				procedureReferenceName.ProcedureReference = procedureReference;
			}
			return procedureReferenceName;
		}

		// Token: 0x06000E96 RID: 3734 RVA: 0x0006A934 File Offset: 0x00068B34
		public ProcedureReferenceName varObjectReference()
		{
			ProcedureReferenceName procedureReferenceName = base.FragmentFactory.CreateFragment<ProcedureReferenceName>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				procedureReferenceName.ProcedureVariable = variableReference;
			}
			return procedureReferenceName;
		}

		// Token: 0x06000E97 RID: 3735 RVA: 0x0006A96C File Offset: 0x00068B6C
		public Literal procNumOpt()
		{
			Literal literal = null;
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return literal;
						}
						switch (num)
						{
						case 4:
						case 6:
							return literal;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
							case 12:
							case 13:
							case 15:
							case 17:
								return literal;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return literal;
						default:
							if (num == 28)
							{
								return literal;
							}
							switch (num)
							{
							case 33:
							case 35:
								return literal;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
						return literal;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return literal;
						default:
							if (num == 82)
							{
								return literal;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return literal;
				}
			}
			else if (num <= 162)
			{
				if (num <= 111)
				{
					if (num == 100 || num == 106 || num == 111)
					{
						return literal;
					}
				}
				else
				{
					if (num == 119)
					{
						return literal;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return literal;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return literal;
						}
						break;
					}
				}
			}
			else if (num <= 182)
			{
				switch (num)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					return literal;
				case 168:
				case 169:
					break;
				default:
					if (num == 176 || num == 182)
					{
						return literal;
					}
					break;
				}
			}
			else if (num <= 199)
			{
				switch (num)
				{
				case 191:
				case 192:
				case 193:
					return literal;
				default:
					if (num == 199)
					{
						return literal;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return literal;
				}
				switch (num)
				{
				case 219:
				case 220:
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					return literal;
				case 236:
					this.match(236);
					return this.integer();
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E98 RID: 3736 RVA: 0x0006AC84 File Offset: 0x00068E84
		public ExecuteParameter setParam(ref bool nameEqualsValueWasUsed, ref int parameterNumber)
		{
			ExecuteParameter executeParameter = base.FragmentFactory.CreateFragment<ExecuteParameter>();
			executeParameter.IsOutput = false;
			parameterNumber++;
			if (this.LA(1) == 234 && this.LA(2) == 206)
			{
				VariableReference variableReference = this.variable();
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					executeParameter.Variable = variableReference;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_155_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 100)
			{
				if (num != 47)
				{
					if (num != 100)
					{
						goto IL_0276;
					}
				}
				else
				{
					Literal literal = this.defaultLiteral();
					if (this.inputState.guessing == 0)
					{
						executeParameter.ParameterValue = literal;
						return executeParameter;
					}
					return executeParameter;
				}
			}
			else if (num != 193 && num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_0276;
				default:
					goto IL_0276;
				}
			}
			ScalarExpression scalarExpression = this.possibleNegativeConstantOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				executeParameter.ParameterValue = scalarExpression;
				if (executeParameter.Variable != null)
				{
					nameEqualsValueWasUsed = true;
				}
				else if (nameEqualsValueWasUsed)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46089", scalarExpression, TSqlParserResource.SQL46089Message, new string[] { parameterNumber.ToString(CultureInfo.CurrentCulture) });
				}
			}
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_156_.member(this.LA(2)) && (base.NextTokenMatches("OUTPUT") || base.NextTokenMatches("OUT")))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					VariableReference variableReference2 = scalarExpression as VariableReference;
					GlobalVariableExpression globalVariableExpression = scalarExpression as GlobalVariableExpression;
					if (variableReference2 == null && globalVariableExpression == null)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46088", token, TSqlParserResource.SQL46088Message, new string[0]);
					}
					TSql80ParserBaseInternal.Match(token, "OUTPUT", "OUT");
					executeParameter.IsOutput = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(executeParameter, token);
					return executeParameter;
				}
				return executeParameter;
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_156_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_157_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				return executeParameter;
			}
			IL_0276:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000E99 RID: 3737 RVA: 0x0006AF1C File Offset: 0x0006911C
		public TableDefinition tableDefinitionCreateTable()
		{
			TableDefinition tableDefinition = base.FragmentFactory.CreateFragment<TableDefinition>();
			this.tableElement(IndexAffectingStatement.CreateTable, tableDefinition, null);
			while (this.LA(1) == 198 && TSql110ParserInternal.tokenSet_158_.member(this.LA(2)))
			{
				this.LT(1);
				this.match(198);
				this.tableElement(IndexAffectingStatement.CreateTable, tableDefinition, null);
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
			}
			return tableDefinition;
		}

		// Token: 0x06000E9A RID: 3738 RVA: 0x0006AFB8 File Offset: 0x000691B8
		public FederationScheme federatedOn(CreateTableStatement vParent)
		{
			FederationScheme federationScheme = base.FragmentFactory.CreateFragment<FederationScheme>();
			this.identifier();
			this.match(105);
			this.match(191);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				federationScheme.DistributionName = identifier;
			}
			this.match(206);
			Identifier identifier2 = this.identifier();
			if (this.inputState.guessing == 0)
			{
				federationScheme.ColumnName = identifier2;
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			return federationScheme;
		}

		// Token: 0x06000E9B RID: 3739 RVA: 0x0006B058 File Offset: 0x00069258
		public void largeDataOnOpt(CreateTableStatement vParent)
		{
			if (this.LA(1) == 232 && this.LA(2) >= 230 && this.LA(2) <= 233)
			{
				this.largeDataOn(vParent);
				if (this.LA(1) == 232 && this.LA(2) >= 230 && this.LA(2) <= 233)
				{
					this.largeDataOn(vParent);
					return;
				}
				if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				if (TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000E9C RID: 3740 RVA: 0x0006B144 File Offset: 0x00069344
		public void withTableOptions(CreateTableStatement vParent)
		{
			this.match(171);
			this.match(191);
			TableOption tableOption = this.createTableOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableOption>(vParent, vParent.Options, tableOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				tableOption = this.createTableOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableOption>(vParent, vParent.Options, tableOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000E9D RID: 3741 RVA: 0x0006B1F0 File Offset: 0x000693F0
		public void largeDataOn(CreateTableStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "TEXTIMAGE_ON"))
				{
					if (vParent.TextImageOn != null)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46058", token, TSqlParserResource.SQL46058Message, new string[] { token.getText() });
					}
					vParent.TextImageOn = identifierOrValueExpression;
					return;
				}
				TSql80ParserBaseInternal.Match(token, "FILESTREAM_ON");
				if (vParent.FileStreamOn != null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46058", token, TSqlParserResource.SQL46058Message, new string[] { token.getText() });
				}
				vParent.FileStreamOn = identifierOrValueExpression;
			}
		}

		// Token: 0x06000E9E RID: 3742 RVA: 0x0006B2A0 File Offset: 0x000694A0
		public TableOption createTableOption()
		{
			TableOption tableOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATA_COMPRESSION"))
			{
				tableOption = this.tableDataCompressionOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILETABLE_DIRECTORY"))
			{
				tableOption = this.fileTableDirectoryTableOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILETABLE_COLLATE_FILENAME"))
			{
				tableOption = this.fileTableCollateFileNameTableOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206 || !base.NextTokenMatchesOneOf(new string[] { "FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME", "FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME", "FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME" }))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableOption = this.fileTableConstraintNameTableOption();
			}
			return tableOption;
		}

		// Token: 0x06000E9F RID: 3743 RVA: 0x0006B3AC File Offset: 0x000695AC
		public TableDataCompressionOption tableDataCompressionOption()
		{
			TableDataCompressionOption tableDataCompressionOption = base.FragmentFactory.CreateFragment<TableDataCompressionOption>();
			DataCompressionOption dataCompressionOption = this.dataCompressionOption();
			if (this.inputState.guessing == 0)
			{
				tableDataCompressionOption.DataCompressionOption = dataCompressionOption;
				tableDataCompressionOption.OptionKind = TableOptionKind.DataCompression;
			}
			return tableDataCompressionOption;
		}

		// Token: 0x06000EA0 RID: 3744 RVA: 0x0006B3E8 File Offset: 0x000695E8
		public FileTableDirectoryTableOption fileTableDirectoryTableOption()
		{
			FileTableDirectoryTableOption fileTableDirectoryTableOption = base.FragmentFactory.CreateFragment<FileTableDirectoryTableOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteralOrNull();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILETABLE_DIRECTORY");
				fileTableDirectoryTableOption.OptionKind = TableOptionKind.FileTableDirectory;
				fileTableDirectoryTableOption.Value = literal;
			}
			return fileTableDirectoryTableOption;
		}

		// Token: 0x06000EA1 RID: 3745 RVA: 0x0006B450 File Offset: 0x00069650
		public FileTableCollateFileNameTableOption fileTableCollateFileNameTableOption()
		{
			FileTableCollateFileNameTableOption fileTableCollateFileNameTableOption = base.FragmentFactory.CreateFragment<FileTableCollateFileNameTableOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Identifier identifier = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILETABLE_COLLATE_FILENAME");
				fileTableCollateFileNameTableOption.OptionKind = TableOptionKind.FileTableCollateFileName;
				fileTableCollateFileNameTableOption.Value = identifier;
			}
			return fileTableCollateFileNameTableOption;
		}

		// Token: 0x06000EA2 RID: 3746 RVA: 0x0006B4B8 File Offset: 0x000696B8
		public FileTableConstraintNameTableOption fileTableConstraintNameTableOption()
		{
			FileTableConstraintNameTableOption fileTableConstraintNameTableOption = base.FragmentFactory.CreateFragment<FileTableConstraintNameTableOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				fileTableConstraintNameTableOption.Value = identifier;
				if (TSql80ParserBaseInternal.TryMatch(token, "FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME"))
				{
					fileTableConstraintNameTableOption.OptionKind = TableOptionKind.FileTablePrimaryKeyConstraintName;
				}
				else if (TSql80ParserBaseInternal.TryMatch(token, "FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME"))
				{
					fileTableConstraintNameTableOption.OptionKind = TableOptionKind.FileTableStreamIdUniqueConstraintName;
				}
				else if (TSql80ParserBaseInternal.TryMatch(token, "FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME"))
				{
					fileTableConstraintNameTableOption.OptionKind = TableOptionKind.FileTableFullPathUniqueConstraintName;
				}
				else
				{
					TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
				}
			}
			return fileTableConstraintNameTableOption;
		}

		// Token: 0x06000EA3 RID: 3747 RVA: 0x0006B558 File Offset: 0x00069758
		public CompressionPartitionRange compressionPartitionRange()
		{
			CompressionPartitionRange compressionPartitionRange = base.FragmentFactory.CreateFragment<CompressionPartitionRange>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				compressionPartitionRange.From = scalarExpression;
			}
			int num = this.LA(1);
			if (num != 151)
			{
				if (num != 192 && num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(151);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					compressionPartitionRange.To = scalarExpression;
				}
			}
			return compressionPartitionRange;
		}

		// Token: 0x06000EA4 RID: 3748 RVA: 0x0006B5EC File Offset: 0x000697EC
		public AlterTableAlterColumnStatement alterTableAlterColumnStatement()
		{
			AlterTableAlterColumnStatement alterTableAlterColumnStatement = base.FragmentFactory.CreateFragment<AlterTableAlterColumnStatement>();
			bool flag = false;
			this.match(6);
			this.match(27);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterTableAlterColumnStatement.ColumnIdentifier = identifier;
				base.ThrowPartialAstIfPhaseOne(alterTableAlterColumnStatement);
			}
			int num = this.LA(1);
			if (num <= 54)
			{
				if (num != 4)
				{
					switch (num)
					{
					case 53:
						goto IL_0096;
					case 54:
						break;
					default:
						goto IL_0597;
					}
				}
				int num2 = this.LA(1);
				if (num2 != 4)
				{
					if (num2 != 54)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(54);
					if (this.inputState.guessing == 0)
					{
						flag = false;
					}
				}
				else
				{
					this.match(4);
					if (this.inputState.guessing == 0)
					{
						flag = true;
					}
				}
				int num3 = this.LA(1);
				if (num3 != 99)
				{
					if (num3 != 136)
					{
						if (num3 != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							if (TSql80ParserBaseInternal.TryMatch(token, "PERSISTED"))
							{
								alterTableAlterColumnStatement.AlterTableAlterColumnOption = (flag ? AlterTableAlterColumnOption.AddPersisted : AlterTableAlterColumnOption.DropPersisted);
							}
							else
							{
								TSql80ParserBaseInternal.Match(token, "SPARSE");
								alterTableAlterColumnStatement.AlterTableAlterColumnOption = (flag ? AlterTableAlterColumnOption.AddSparse : AlterTableAlterColumnOption.DropSparse);
							}
							TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token);
							return alterTableAlterColumnStatement;
						}
						return alterTableAlterColumnStatement;
					}
					else
					{
						IToken token2 = this.LT(1);
						this.match(136);
						if (this.inputState.guessing != 0)
						{
							return alterTableAlterColumnStatement;
						}
						TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token2);
						if (flag)
						{
							alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddRowGuidCol;
							return alterTableAlterColumnStatement;
						}
						alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropRowGuidCol;
						return alterTableAlterColumnStatement;
					}
				}
				else
				{
					this.match(99);
					this.match(67);
					IToken token3 = this.LT(1);
					this.match(128);
					if (this.inputState.guessing != 0)
					{
						return alterTableAlterColumnStatement;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token3);
					if (flag)
					{
						alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddNotForReplication;
						return alterTableAlterColumnStatement;
					}
					alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropNotForReplication;
					return alterTableAlterColumnStatement;
				}
			}
			else if (num != 96)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_0597;
				}
			}
			IL_0096:
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				alterTableAlterColumnStatement.DataType = dataTypeReference;
			}
			this.collationOpt(alterTableAlterColumnStatement);
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_159_.member(this.LA(2)))
			{
				ColumnStorageOptions columnStorageOptions = this.columnStorage(IndexAffectingStatement.AlterTableAddElement, dataTypeReference);
				if (this.inputState.guessing == 0)
				{
					alterTableAlterColumnStatement.StorageOptions = columnStorageOptions;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_160_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num4 = this.LA(1);
			if (num4 <= 95)
			{
				if (num4 <= 35)
				{
					if (num4 <= 17)
					{
						if (num4 == 1)
						{
							return alterTableAlterColumnStatement;
						}
						switch (num4)
						{
						case 4:
						case 6:
							return alterTableAlterColumnStatement;
						case 5:
							break;
						default:
							switch (num4)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterTableAlterColumnStatement;
							}
							break;
						}
					}
					else
					{
						switch (num4)
						{
						case 22:
						case 23:
							return alterTableAlterColumnStatement;
						default:
							if (num4 == 28)
							{
								return alterTableAlterColumnStatement;
							}
							switch (num4)
							{
							case 33:
							case 35:
								return alterTableAlterColumnStatement;
							}
							break;
						}
					}
				}
				else if (num4 <= 82)
				{
					switch (num4)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterTableAlterColumnStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num4)
						{
						case 74:
						case 75:
							return alterTableAlterColumnStatement;
						default:
							if (num4 == 82)
							{
								return alterTableAlterColumnStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num4 == 86 || num4 == 92 || num4 == 95)
				{
					return alterTableAlterColumnStatement;
				}
			}
			else if (num4 <= 172)
			{
				if (num4 <= 119)
				{
					switch (num4)
					{
					case 99:
					case 100:
					{
						bool flag2 = this.nullNotNull(alterTableAlterColumnStatement);
						if (this.inputState.guessing == 0)
						{
							alterTableAlterColumnStatement.AlterTableAlterColumnOption = (flag2 ? AlterTableAlterColumnOption.Null : AlterTableAlterColumnOption.NotNull);
							return alterTableAlterColumnStatement;
						}
						return alterTableAlterColumnStatement;
					}
					default:
						if (num4 == 106 || num4 == 119)
						{
							return alterTableAlterColumnStatement;
						}
						break;
					}
				}
				else
				{
					switch (num4)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterTableAlterColumnStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num4)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterTableAlterColumnStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num4)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterTableAlterColumnStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num4 <= 191)
			{
				if (num4 == 176 || num4 == 182 || num4 == 191)
				{
					return alterTableAlterColumnStatement;
				}
			}
			else
			{
				if (num4 == 204)
				{
					return alterTableAlterColumnStatement;
				}
				switch (num4)
				{
				case 219:
				case 220:
					return alterTableAlterColumnStatement;
				default:
					if (num4 == 232)
					{
						return alterTableAlterColumnStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0597:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000EA5 RID: 3749 RVA: 0x0006BBA4 File Offset: 0x00069DA4
		public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement()
		{
			AlterTableTriggerModificationStatement alterTableTriggerModificationStatement = base.FragmentFactory.CreateFragment<AlterTableTriggerModificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				alterTableTriggerModificationStatement.TriggerEnforcement = TSql80ParserBaseInternal.ParseTriggerEnforcement(token);
			}
			this.match(155);
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableTriggerModificationStatement, alterTableTriggerModificationStatement.TriggerNames, identifier);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableTriggerModificationStatement, alterTableTriggerModificationStatement.TriggerNames, identifier);
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					alterTableTriggerModificationStatement.All = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableTriggerModificationStatement, token2);
				}
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterTableTriggerModificationStatement);
			}
			return alterTableTriggerModificationStatement;
		}

		// Token: 0x06000EA6 RID: 3750 RVA: 0x0006BCD4 File Offset: 0x00069ED4
		public AlterTableDropTableElementStatement alterTableDropTableElementStatement()
		{
			AlterTableDropTableElementStatement alterTableDropTableElementStatement = base.FragmentFactory.CreateFragment<AlterTableDropTableElementStatement>();
			this.match(54);
			AlterTableDropTableElement alterTableDropTableElement = this.alterTableDropTableElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AlterTableDropTableElement>(alterTableDropTableElementStatement, alterTableDropTableElementStatement.AlterTableDropTableElements, alterTableDropTableElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				alterTableDropTableElement = this.alterTableDropTableElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AlterTableDropTableElement>(alterTableDropTableElementStatement, alterTableDropTableElementStatement.AlterTableDropTableElements, alterTableDropTableElement);
				}
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterTableDropTableElementStatement);
			}
			return alterTableDropTableElementStatement;
		}

		// Token: 0x06000EA7 RID: 3751 RVA: 0x0006BD68 File Offset: 0x00069F68
		public AlterTableSwitchStatement alterTableSwitchStatement()
		{
			AlterTableSwitchStatement alterTableSwitchStatement = base.FragmentFactory.CreateFragment<AlterTableSwitchStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SWITCH");
			}
			int num = this.LA(1);
			if (num != 151)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "PARTITION");
					alterTableSwitchStatement.SourcePartitionNumber = scalarExpression;
				}
			}
			this.match(151);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				alterTableSwitchStatement.TargetTable = schemaObjectName;
			}
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_39_.member(this.LA(2)) && base.NextTokenMatches("PARTITION"))
			{
				this.match(232);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					alterTableSwitchStatement.TargetPartitionNumber = scalarExpression;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterTableSwitchStatement;
		}

		// Token: 0x06000EA8 RID: 3752 RVA: 0x0006BED4 File Offset: 0x0006A0D4
		public ConstraintEnforcement constraintEnforcement()
		{
			ConstraintEnforcement constraintEnforcement = ConstraintEnforcement.NotSpecified;
			int num = this.LA(1);
			if (num != 21)
			{
				if (num != 97)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(97);
				if (this.inputState.guessing == 0)
				{
					constraintEnforcement = ConstraintEnforcement.NoCheck;
				}
			}
			else
			{
				this.match(21);
				if (this.inputState.guessing == 0)
				{
					constraintEnforcement = ConstraintEnforcement.Check;
				}
			}
			return constraintEnforcement;
		}

		// Token: 0x06000EA9 RID: 3753 RVA: 0x0006BF40 File Offset: 0x0006A140
		public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck)
		{
			AlterTableAddTableElementStatement alterTableAddTableElementStatement = base.FragmentFactory.CreateFragment<AlterTableAddTableElementStatement>();
			alterTableAddTableElementStatement.ExistingRowsCheckEnforcement = vExistingRowsCheck;
			this.match(4);
			TableDefinition tableDefinition = this.tableDefinition(IndexAffectingStatement.AlterTableAddElement, alterTableAddTableElementStatement);
			if (this.inputState.guessing == 0)
			{
				alterTableAddTableElementStatement.Definition = tableDefinition;
			}
			return alterTableAddTableElementStatement;
		}

		// Token: 0x06000EAA RID: 3754 RVA: 0x0006BF88 File Offset: 0x0006A188
		public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck)
		{
			AlterTableConstraintModificationStatement alterTableConstraintModificationStatement = base.FragmentFactory.CreateFragment<AlterTableConstraintModificationStatement>();
			alterTableConstraintModificationStatement.ExistingRowsCheckEnforcement = vExistingRowsCheck;
			ConstraintEnforcement constraintEnforcement = this.constraintEnforcement();
			this.match(30);
			if (this.inputState.guessing == 0)
			{
				alterTableConstraintModificationStatement.ConstraintEnforcement = constraintEnforcement;
			}
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableConstraintModificationStatement, alterTableConstraintModificationStatement.ConstraintNames, identifier);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableConstraintModificationStatement, alterTableConstraintModificationStatement.ConstraintNames, identifier);
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					alterTableConstraintModificationStatement.All = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableConstraintModificationStatement, token);
				}
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterTableConstraintModificationStatement);
			}
			return alterTableConstraintModificationStatement;
		}

		// Token: 0x06000EAB RID: 3755 RVA: 0x0006C0AC File Offset: 0x0006A2AC
		public AlterTableRebuildStatement alterTableRebuildStatement()
		{
			AlterTableRebuildStatement alterTableRebuildStatement = base.FragmentFactory.CreateFragment<AlterTableRebuildStatement>();
			IndexAffectingStatement indexAffectingStatement = IndexAffectingStatement.AlterTableRebuildAllPartitions;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REBUILD");
				TSql80ParserBaseInternal.UpdateTokenInfo(alterTableRebuildStatement, token);
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				PartitionSpecifier partitionSpecifier = this.partitionSpecifier();
				if (this.inputState.guessing == 0)
				{
					alterTableRebuildStatement.Partition = partitionSpecifier;
					if (!partitionSpecifier.All)
					{
						indexAffectingStatement = IndexAffectingStatement.AlterTableRebuildOnePartition;
					}
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.indexOptionList(indexAffectingStatement, alterTableRebuildStatement.IndexOptions, alterTableRebuildStatement);
				if (this.inputState.guessing == 0)
				{
					TSql100ParserBaseInternal.CheckPartitionAllSpecifiedForIndexRebuild(alterTableRebuildStatement.Partition, alterTableRebuildStatement.IndexOptions);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterTableRebuildStatement;
		}

		// Token: 0x06000EAC RID: 3756 RVA: 0x0006C208 File Offset: 0x0006A408
		public AlterTableChangeTrackingModificationStatement alterTableChangeTrackingModificationStatement()
		{
			AlterTableChangeTrackingModificationStatement alterTableChangeTrackingModificationStatement = base.FragmentFactory.CreateFragment<AlterTableChangeTrackingModificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "CHANGE_TRACKING");
				alterTableChangeTrackingModificationStatement.IsEnable = TSql90ParserBaseInternal.EnableDisableMatcher<bool>(token, true, false);
				TSql80ParserBaseInternal.UpdateTokenInfo(alterTableChangeTrackingModificationStatement, token2);
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.match(191);
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(206);
				OptionState optionState = this.optionOnOff(alterTableChangeTrackingModificationStatement);
				IToken token4 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "TRACK_COLUMNS_UPDATED");
					if (!alterTableChangeTrackingModificationStatement.IsEnable)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
					}
					alterTableChangeTrackingModificationStatement.TrackColumnsUpdated = optionState;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableChangeTrackingModificationStatement, token4);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterTableChangeTrackingModificationStatement;
		}

		// Token: 0x06000EAD RID: 3757 RVA: 0x0006C364 File Offset: 0x0006A564
		public AlterTableFileTableNamespaceStatement alterTableFileTableNamespaceStatement()
		{
			AlterTableFileTableNamespaceStatement alterTableFileTableNamespaceStatement = base.FragmentFactory.CreateFragment<AlterTableFileTableNamespaceStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "FILETABLE_NAMESPACE");
				alterTableFileTableNamespaceStatement.IsEnable = TSql90ParserBaseInternal.EnableDisableMatcher<bool>(token, true, false);
				TSql80ParserBaseInternal.UpdateTokenInfo(alterTableFileTableNamespaceStatement, token2);
			}
			return alterTableFileTableNamespaceStatement;
		}

		// Token: 0x06000EAE RID: 3758 RVA: 0x0006C3D8 File Offset: 0x0006A5D8
		public AlterTableSetStatement alterTableSetStatement()
		{
			AlterTableSetStatement alterTableSetStatement = base.FragmentFactory.CreateFragment<AlterTableSetStatement>();
			this.match(142);
			this.match(191);
			TableOption tableOption = this.tableOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableOption>(alterTableSetStatement, alterTableSetStatement.Options, tableOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				tableOption = this.tableOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableOption>(alterTableSetStatement, alterTableSetStatement.Options, tableOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterTableSetStatement, token);
			}
			return alterTableSetStatement;
		}

		// Token: 0x06000EAF RID: 3759 RVA: 0x0006C490 File Offset: 0x0006A690
		public TableOption tableOption()
		{
			TableOption tableOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LOCK_ESCALATION"))
			{
				tableOption = this.lockEscalationTableOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILESTREAM_ON"))
			{
				tableOption = this.fileStreamOnTableOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206 || !base.NextTokenMatches("FILETABLE_DIRECTORY"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableOption = this.fileTableDirectoryTableOption();
			}
			return tableOption;
		}

		// Token: 0x06000EB0 RID: 3760 RVA: 0x0006C54C File Offset: 0x0006A74C
		public LockEscalationTableOption lockEscalationTableOption()
		{
			LockEscalationTableOption lockEscalationTableOption = base.FragmentFactory.CreateFragment<LockEscalationTableOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOCK_ESCALATION");
				lockEscalationTableOption.OptionKind = TableOptionKind.LockEscalation;
			}
			int num = this.LA(1);
			if (num != 148)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					lockEscalationTableOption.Value = LockEscalationMethodHelper.Instance.ParseOption(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(lockEscalationTableOption, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(148);
				if (this.inputState.guessing == 0)
				{
					lockEscalationTableOption.Value = LockEscalationMethod.Table;
					TSql80ParserBaseInternal.UpdateTokenInfo(lockEscalationTableOption, token3);
				}
			}
			return lockEscalationTableOption;
		}

		// Token: 0x06000EB1 RID: 3761 RVA: 0x0006C644 File Offset: 0x0006A844
		public FileStreamOnTableOption fileStreamOnTableOption()
		{
			FileStreamOnTableOption fileStreamOnTableOption = base.FragmentFactory.CreateFragment<FileStreamOnTableOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILESTREAM_ON");
				fileStreamOnTableOption.OptionKind = TableOptionKind.FileStreamOn;
				fileStreamOnTableOption.Value = identifierOrValueExpression;
			}
			return fileStreamOnTableOption;
		}

		// Token: 0x06000EB2 RID: 3762 RVA: 0x0006C6AC File Offset: 0x0006A8AC
		public ColumnStorageOptions columnStorage(IndexAffectingStatement statementType, DataTypeReference columnType)
		{
			ColumnStorageOptions columnStorageOptions = base.FragmentFactory.CreateFragment<ColumnStorageOptions>();
			IToken token = null;
			token = this.LT(1);
			this.match(232);
			bool flag = false;
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_91_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(232);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token, "SPARSE"))
					{
						TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.Sparse, token, statementType);
						TSql80ParserBaseInternal.Match(token2, "FILESTREAM");
						TSql100ParserBaseInternal.SetFileStreamStorageOption(columnStorageOptions, token2, columnType, statementType);
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "FILESTREAM");
						TSql100ParserBaseInternal.SetFileStreamStorageOption(columnStorageOptions, token, columnType, statementType);
						TSql80ParserBaseInternal.Match(token2, "SPARSE");
						TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.Sparse, token2, statementType);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(columnStorageOptions, token2);
				}
			}
			else if (this.LA(1) == 67)
			{
				this.match(67);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "COLUMN_SET");
					TSql80ParserBaseInternal.Match(token3, "ALL_SPARSE_COLUMNS");
					XmlDataTypeReference xmlDataTypeReference = columnType as XmlDataTypeReference;
					if (xmlDataTypeReference != null && xmlDataTypeReference.XmlDataTypeOption == XmlDataTypeOption.None && xmlDataTypeReference.XmlSchemaCollection == null)
					{
						TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.ColumnSetForAllSparseColumns, token, statementType);
					}
					else
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(columnStorageOptions, token3);
				}
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_91_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token, "SPARSE"))
					{
						TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.Sparse, token, statementType);
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "FILESTREAM");
						TSql100ParserBaseInternal.SetFileStreamStorageOption(columnStorageOptions, token, columnType, statementType);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(columnStorageOptions, token);
				}
			}
			return columnStorageOptions;
		}

		// Token: 0x06000EB3 RID: 3763 RVA: 0x0006C8E8 File Offset: 0x0006AAE8
		public AlterTableDropTableElement alterTableDropTableElement()
		{
			AlterTableDropTableElement alterTableDropTableElement = base.FragmentFactory.CreateFragment<AlterTableDropTableElement>();
			int num = this.LA(1);
			if (num != 27)
			{
				if (num != 30)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				int num2 = this.LA(1);
				if (num2 != 30)
				{
					switch (num2)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(30);
					if (this.inputState.guessing == 0)
					{
						alterTableDropTableElement.TableElementType = TableElementType.Constraint;
					}
				}
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					alterTableDropTableElement.Name = identifier;
				}
				if (this.LA(1) == 171 && this.LA(2) == 191)
				{
					this.alterTableDropTableElementWithOptions(alterTableDropTableElement);
				}
				else if (!TSql110ParserInternal.tokenSet_49_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(27);
				if (this.inputState.guessing == 0)
				{
					alterTableDropTableElement.TableElementType = TableElementType.Column;
				}
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					alterTableDropTableElement.Name = identifier;
				}
			}
			return alterTableDropTableElement;
		}

		// Token: 0x06000EB4 RID: 3764 RVA: 0x0006CA4C File Offset: 0x0006AC4C
		public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent)
		{
			this.match(171);
			this.match(191);
			DropClusteredConstraintOption dropClusteredConstraintOption = this.dropClusteredConstraintOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropClusteredConstraintOption>(vParent, vParent.DropClusteredConstraintOptions, dropClusteredConstraintOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				dropClusteredConstraintOption = this.dropClusteredConstraintOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropClusteredConstraintOption>(vParent, vParent.DropClusteredConstraintOptions, dropClusteredConstraintOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000EB5 RID: 3765 RVA: 0x0006CAF8 File Offset: 0x0006ACF8
		public DropClusteredConstraintOption dropClusteredConstraintOption()
		{
			DropClusteredConstraintOption dropClusteredConstraintOption = null;
			DropClusteredConstraintStateOption dropClusteredConstraintStateOption = null;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP"))
			{
				this.match(232);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					DropClusteredConstraintValueOption dropClusteredConstraintValueOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintValueOption>();
					dropClusteredConstraintValueOption.OptionValue = literal;
					dropClusteredConstraintOption = dropClusteredConstraintValueOption;
					dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.MaxDop;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ONLINE"))
			{
				this.match(232);
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					dropClusteredConstraintStateOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintStateOption>();
					dropClusteredConstraintOption = dropClusteredConstraintStateOption;
					dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.Online;
				}
				OptionState optionState = this.optionOnOff(dropClusteredConstraintOption);
				if (this.inputState.guessing == 0)
				{
					dropClusteredConstraintStateOption.OptionState = optionState;
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 151 || !base.NextTokenMatches("MOVE"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(232);
				this.match(151);
				FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
				if (this.inputState.guessing == 0)
				{
					DropClusteredConstraintMoveOption dropClusteredConstraintMoveOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintMoveOption>();
					dropClusteredConstraintMoveOption.OptionValue = fileGroupOrPartitionScheme;
					dropClusteredConstraintOption = dropClusteredConstraintMoveOption;
					dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.MoveTo;
				}
			}
			return dropClusteredConstraintOption;
		}

		// Token: 0x06000EB6 RID: 3766 RVA: 0x0006CC94 File Offset: 0x0006AE94
		public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement)
		{
			ColumnDefinition columnDefinition = base.FragmentFactory.CreateFragment<ColumnDefinition>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				columnDefinition.ColumnIdentifier = identifier;
				if (base.PhaseOne && vStatement != null)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnDefinition>(vStatement, vStatement.Definition.ColumnDefinitions, columnDefinition);
					base.ThrowPartialAstIfPhaseOne(vStatement);
				}
			}
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num != 1)
						{
							switch (num)
							{
							case 4:
							case 6:
								break;
							case 5:
								goto IL_0342;
							default:
								goto IL_0342;
							}
						}
					}
					else
					{
						switch (num)
						{
						case 9:
							this.computedColumnBody(columnDefinition);
							this.computedColumnConstraintListOpt(statementType, columnDefinition);
							return columnDefinition;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							goto IL_0342;
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							break;
						default:
							switch (num)
							{
							case 28:
							case 30:
								break;
							case 29:
								goto IL_0342;
							default:
								switch (num)
								{
								case 33:
								case 35:
									break;
								case 34:
									goto IL_0342;
								default:
									goto IL_0342;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 53:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 68:
						break;
					case 50:
					case 51:
					case 52:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
					case 67:
						goto IL_0342;
					default:
						switch (num)
						{
						case 74:
						case 75:
							break;
						default:
							goto IL_0342;
						}
						break;
					}
				}
				else if (num != 79 && num != 82 && num != 86)
				{
					goto IL_0342;
				}
			}
			else if (num <= 176)
			{
				if (num <= 106)
				{
					switch (num)
					{
					case 92:
					case 95:
					case 96:
					case 99:
					case 100:
						break;
					case 93:
					case 94:
					case 97:
					case 98:
						goto IL_0342;
					default:
						if (num != 106)
						{
							goto IL_0342;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						goto IL_0342;
					default:
						switch (num)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							break;
						case 157:
						case 158:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							goto IL_0342;
						default:
							if (num != 176)
							{
								goto IL_0342;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				if (num != 182)
				{
					switch (num)
					{
					case 191:
					case 192:
						break;
					default:
						if (num != 198)
						{
							goto IL_0342;
						}
						break;
					}
				}
			}
			else if (num != 204)
			{
				switch (num)
				{
				case 219:
				case 220:
					break;
				default:
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_0342;
					}
					break;
				}
			}
			this.regularColumnBody(statementType, columnDefinition);
			this.columnConstraintListOpt(statementType, columnDefinition);
			return columnDefinition;
			IL_0342:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000EB7 RID: 3767 RVA: 0x0006CFF8 File Offset: 0x0006B1F8
		public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement)
		{
			ConstraintDefinition constraintDefinition = null;
			IToken token = null;
			Identifier identifier = null;
			try
			{
				int num = this.LA(1);
				if (num <= 47)
				{
					if (num == 21)
					{
						goto IL_0080;
					}
					if (num != 30)
					{
						if (num == 47)
						{
							goto IL_0080;
						}
					}
					else
					{
						token = this.LT(1);
						this.match(30);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
							goto IL_0080;
						}
						goto IL_0080;
					}
				}
				else if (num == 68 || num == 118 || num == 159)
				{
					goto IL_0080;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0080:
				int num2 = this.LA(1);
				if (num2 <= 47)
				{
					if (num2 == 21)
					{
						constraintDefinition = this.checkConstraint(statementType);
						goto IL_00ED;
					}
					if (num2 == 47)
					{
						constraintDefinition = this.defaultTableConstraint(statementType);
						goto IL_00ED;
					}
				}
				else
				{
					if (num2 == 68)
					{
						constraintDefinition = this.foreignKeyTableConstraint(statementType);
						goto IL_00ED;
					}
					if (num2 == 118 || num2 == 159)
					{
						constraintDefinition = this.uniqueTableConstraint(statementType);
						goto IL_00ED;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_00ED:
				if (this.inputState.guessing == 0 && identifier != null)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(constraintDefinition, token);
					constraintDefinition.ConstraintIdentifier = identifier;
				}
			}
			catch (PhaseOneConstraintException ex)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (identifier != null)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(ex.Constraint, token);
					ex.Constraint.ConstraintIdentifier = identifier;
				}
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ConstraintDefinition>(vStatement, vStatement.Definition.TableConstraints, ex.Constraint);
				base.ThrowPartialAstIfPhaseOne(vStatement);
			}
			return constraintDefinition;
		}

		// Token: 0x06000EB8 RID: 3768 RVA: 0x0006D17C File Offset: 0x0006B37C
		public void computedColumnBody(ColumnDefinition vParent)
		{
			this.match(9);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.ScalarSubqueriesDisallowed);
			if (this.inputState.guessing == 0)
			{
				vParent.ComputedColumnExpression = scalarExpression;
			}
			if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_161_.member(this.LA(2)) && base.NextTokenMatches("PERSISTED"))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					vParent.IsPersisted = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				return;
			}
			else
			{
				if (TSql110ParserInternal.tokenSet_161_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000EB9 RID: 3769 RVA: 0x0006D248 File Offset: 0x0006B448
		public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult)
		{
			while (TSql110ParserInternal.tokenSet_162_.member(this.LA(1)))
			{
				ConstraintDefinition constraintDefinition = this.columnConstraint(statementType);
				if (this.inputState.guessing == 0)
				{
					TSql90ParserBaseInternal.AddConstraintToComputedColumn(constraintDefinition, vResult);
				}
			}
		}

		// Token: 0x06000EBA RID: 3770 RVA: 0x0006D288 File Offset: 0x0006B488
		public void regularColumnBody(IndexAffectingStatement statementType, ColumnDefinition vParent)
		{
			if (TSql110ParserInternal.tokenSet_58_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_163_.member(this.LA(2)))
			{
				DataTypeReference dataTypeReference = this.scalarDataType();
				if (this.inputState.guessing == 0)
				{
					vParent.DataType = dataTypeReference;
				}
				this.collationOpt(vParent);
				if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_164_.member(this.LA(2)))
				{
					ColumnStorageOptions columnStorageOptions = this.columnStorage(statementType, dataTypeReference);
					if (this.inputState.guessing == 0)
					{
						vParent.StorageOptions = columnStorageOptions;
					}
				}
				else if (!TSql110ParserInternal.tokenSet_91_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else if (!TSql110ParserInternal.tokenSet_91_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0)
			{
				base.VerifyColumnDataType(vParent);
			}
		}

		// Token: 0x06000EBB RID: 3771 RVA: 0x0006D3AC File Offset: 0x0006B5AC
		public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult)
		{
			for (;;)
			{
				int num = this.LA(1);
				if (num <= 79)
				{
					if (num <= 30)
					{
						if (num != 21 && num != 30)
						{
							break;
						}
					}
					else if (num != 47 && num != 68)
					{
						if (num != 79)
						{
							return;
						}
						IdentityOptions identityOptions = this.identityConstraint(statementType);
						if (this.inputState.guessing == 0)
						{
							if (vResult.IdentityOptions != null)
							{
								TSql80ParserBaseInternal.ThrowParseErrorException("SQL46043", identityOptions, TSqlParserResource.SQL46043Message, new string[0]);
							}
							vResult.IdentityOptions = identityOptions;
							continue;
						}
						continue;
					}
				}
				else if (num <= 118)
				{
					switch (num)
					{
					case 99:
					case 100:
						break;
					default:
						if (num != 118)
						{
							return;
						}
						break;
					}
				}
				else if (num != 127)
				{
					if (num == 136)
					{
						this.rowguidcolConstraint(vResult);
						continue;
					}
					if (num != 159)
					{
						return;
					}
				}
				ConstraintDefinition constraintDefinition = this.columnConstraint(statementType);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddConstraintToColumn(constraintDefinition, vResult);
				}
			}
		}

		// Token: 0x06000EBC RID: 3772 RVA: 0x0006D494 File Offset: 0x0006B694
		public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType)
		{
			ConstraintDefinition constraintDefinition = null;
			IToken token = null;
			Identifier identifier = null;
			try
			{
				int num = this.LA(1);
				if (num <= 68)
				{
					if (num <= 30)
					{
						if (num == 21)
						{
							goto IL_009C;
						}
						if (num == 30)
						{
							token = this.LT(1);
							this.match(30);
							identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
								goto IL_009C;
							}
							goto IL_009C;
						}
					}
					else if (num == 47 || num == 68)
					{
						goto IL_009C;
					}
				}
				else if (num <= 118)
				{
					switch (num)
					{
					case 99:
					case 100:
						goto IL_009C;
					default:
						if (num == 118)
						{
							goto IL_009C;
						}
						break;
					}
				}
				else if (num == 127 || num == 159)
				{
					goto IL_009C;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_009C:
				int num2 = this.LA(1);
				if (num2 > 68)
				{
					if (num2 <= 118)
					{
						switch (num2)
						{
						case 99:
						case 100:
							constraintDefinition = this.nullableConstraint();
							goto IL_0134;
						default:
							if (num2 != 118)
							{
								goto IL_0121;
							}
							break;
						}
					}
					else
					{
						if (num2 == 127)
						{
							goto IL_010D;
						}
						if (num2 != 159)
						{
							goto IL_0121;
						}
					}
					constraintDefinition = this.uniqueColumnConstraint(statementType);
					goto IL_0134;
				}
				if (num2 == 21)
				{
					constraintDefinition = this.checkConstraint(statementType);
					goto IL_0134;
				}
				if (num2 == 47)
				{
					constraintDefinition = this.defaultColumnConstraint(statementType);
					goto IL_0134;
				}
				if (num2 != 68)
				{
					goto IL_0121;
				}
				IL_010D:
				constraintDefinition = this.foreignKeyColumnConstraint(statementType);
				goto IL_0134;
				IL_0121:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0134:
				if (this.inputState.guessing == 0 && identifier != null)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(constraintDefinition, token);
					constraintDefinition.ConstraintIdentifier = identifier;
				}
			}
			catch (PhaseOneConstraintException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
			}
			return constraintDefinition;
		}

		// Token: 0x06000EBD RID: 3773 RVA: 0x0006D624 File Offset: 0x0006B824
		public void rowguidcolConstraint(ColumnDefinition vParent)
		{
			IToken token = this.LT(1);
			this.match(136);
			if (this.inputState.guessing == 0)
			{
				if (vParent.IsRowGuidCol)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46042", token, TSqlParserResource.SQL46042Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.IsRowGuidCol = true;
			}
		}

		// Token: 0x06000EBE RID: 3774 RVA: 0x0006D680 File Offset: 0x0006B880
		public IdentityOptions identityConstraint(IndexAffectingStatement statementType)
		{
			IdentityOptions identityOptions = base.FragmentFactory.CreateFragment<IdentityOptions>();
			IToken token = this.LT(1);
			this.match(79);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identityOptions, token);
			}
			bool flag = false;
			if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_148_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.seedIncrement();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				ScalarExpression scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityOptions.IdentitySeed = scalarExpression;
				}
				this.match(198);
				scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityOptions.IdentityIncrement = scalarExpression;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identityOptions, token2);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_91_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			bool flag2 = this.replicationClauseOpt(statementType, identityOptions);
			if (this.inputState.guessing == 0)
			{
				identityOptions.IsIdentityNotForReplication = flag2;
			}
			return identityOptions;
		}

		// Token: 0x06000EBF RID: 3775 RVA: 0x0006D81C File Offset: 0x0006BA1C
		public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent)
		{
			bool flag = false;
			bool flag2 = false;
			if (this.LA(1) == 99 && this.LA(2) == 67)
			{
				int num = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(99);
					this.match(67);
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				IToken token = this.LT(1);
				this.match(99);
				this.match(67);
				IToken token2 = this.LT(1);
				this.match(128);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					flag = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_91_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return flag;
		}

		// Token: 0x06000EC0 RID: 3776 RVA: 0x0006D930 File Offset: 0x0006BB30
		public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType)
		{
			DefaultConstraintDefinition defaultConstraintDefinition = base.FragmentFactory.CreateFragment<DefaultConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(47);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.ScalarSubqueriesDisallowed);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token);
				defaultConstraintDefinition.Expression = scalarExpression;
			}
			if (this.LA(1) == 171 && this.LA(2) == 164)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(164);
				if (this.inputState.guessing == 0)
				{
					if (statementType != IndexAffectingStatement.AlterTableAddElement)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46013", token, TSqlParserResource.SQL46013Message, new string[0]);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token2);
					defaultConstraintDefinition.WithValues = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_91_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return defaultConstraintDefinition;
		}

		// Token: 0x06000EC1 RID: 3777 RVA: 0x0006DA2C File Offset: 0x0006BC2C
		public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType)
		{
			UniqueConstraintDefinition uniqueConstraintDefinition = base.FragmentFactory.CreateFragment<UniqueConstraintDefinition>();
			this.uniqueConstraintHeader(uniqueConstraintDefinition, false);
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.columnWithSortOrder();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				ColumnWithSortOrder columnWithSortOrder = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, columnWithSortOrder);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					columnWithSortOrder = this.columnWithSortOrder();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, columnWithSortOrder);
					}
				}
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(uniqueConstraintDefinition, token);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_165_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.uniqueConstraintTailOpt(statementType, uniqueConstraintDefinition);
			return uniqueConstraintDefinition;
		}

		// Token: 0x06000EC2 RID: 3778 RVA: 0x0006DBC4 File Offset: 0x0006BDC4
		public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType)
		{
			ForeignKeyConstraintDefinition foreignKeyConstraintDefinition = base.FragmentFactory.CreateFragment<ForeignKeyConstraintDefinition>();
			int num = this.LA(1);
			if (num != 68)
			{
				if (num != 127)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(68);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
					TSql80ParserBaseInternal.UpdateTokenInfo(foreignKeyConstraintDefinition, token);
				}
				this.foreignConstraintColumnsOpt(foreignKeyConstraintDefinition);
			}
			this.foreignKeyConstraintCommonEnd(statementType, foreignKeyConstraintDefinition);
			return foreignKeyConstraintDefinition;
		}

		// Token: 0x06000EC3 RID: 3779 RVA: 0x0006DC4C File Offset: 0x0006BE4C
		public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType)
		{
			CheckConstraintDefinition checkConstraintDefinition = base.FragmentFactory.CreateFragment<CheckConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(21);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(checkConstraintDefinition, token);
				base.ThrowConstraintIfPhaseOne(checkConstraintDefinition);
			}
			bool flag = this.replicationClauseOpt(statementType, checkConstraintDefinition);
			if (this.inputState.guessing == 0)
			{
				checkConstraintDefinition.NotForReplication = flag;
			}
			this.match(191);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.ScalarSubqueriesDisallowed);
			if (this.inputState.guessing == 0)
			{
				checkConstraintDefinition.CheckCondition = booleanExpression;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(checkConstraintDefinition, token2);
			}
			return checkConstraintDefinition;
		}

		// Token: 0x06000EC4 RID: 3780 RVA: 0x0006DD04 File Offset: 0x0006BF04
		public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType)
		{
			UniqueConstraintDefinition uniqueConstraintDefinition = base.FragmentFactory.CreateFragment<UniqueConstraintDefinition>();
			this.uniqueConstraintHeader(uniqueConstraintDefinition, true);
			this.match(191);
			ColumnWithSortOrder columnWithSortOrder = this.columnWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, columnWithSortOrder);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnWithSortOrder = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, columnWithSortOrder);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(uniqueConstraintDefinition, token);
			}
			this.uniqueConstraintTailOpt(statementType, uniqueConstraintDefinition);
			return uniqueConstraintDefinition;
		}

		// Token: 0x06000EC5 RID: 3781 RVA: 0x0006DDC0 File Offset: 0x0006BFC0
		public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType)
		{
			DefaultConstraintDefinition defaultConstraintDefinition = base.FragmentFactory.CreateFragment<DefaultConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(47);
			if (this.inputState.guessing == 0)
			{
				if (statementType != IndexAffectingStatement.AlterTableAddElement)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46014", token, TSqlParserResource.SQL46014Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token);
				base.ThrowConstraintIfPhaseOne(defaultConstraintDefinition);
			}
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.ScalarSubqueriesDisallowed);
			this.match(67);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				defaultConstraintDefinition.Expression = scalarExpression;
				defaultConstraintDefinition.Column = identifier;
			}
			if (this.LA(1) == 171 && this.LA(2) == 164)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(164);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token2);
					defaultConstraintDefinition.WithValues = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_71_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_157_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return defaultConstraintDefinition;
		}

		// Token: 0x06000EC6 RID: 3782 RVA: 0x0006DEE8 File Offset: 0x0006C0E8
		public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType)
		{
			ForeignKeyConstraintDefinition foreignKeyConstraintDefinition = base.FragmentFactory.CreateFragment<ForeignKeyConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(68);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(foreignKeyConstraintDefinition, token);
				base.ThrowConstraintIfPhaseOne(foreignKeyConstraintDefinition);
			}
			this.foreignConstraintColumnsOpt(foreignKeyConstraintDefinition);
			this.foreignKeyConstraintCommonEnd(statementType, foreignKeyConstraintDefinition);
			return foreignKeyConstraintDefinition;
		}

		// Token: 0x06000EC7 RID: 3783 RVA: 0x0006DF50 File Offset: 0x0006C150
		public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne)
		{
			int num = this.LA(1);
			if (num != 118)
			{
				if (num != 159)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(159);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.IsPrimaryKey = false;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(118);
				IToken token3 = this.LT(1);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
					vParent.IsPrimaryKey = true;
				}
			}
			if (this.inputState.guessing == 0 && throwInPhaseOne)
			{
				base.ThrowConstraintIfPhaseOne(vParent);
			}
			int num2 = this.LA(1);
			if (num2 <= 100)
			{
				if (num2 <= 68)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							return;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
						case 28:
						case 30:
							return;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
						case 25:
						case 26:
						case 27:
						case 29:
							break;
						case 24:
						{
							IToken token4 = this.LT(1);
							this.match(24);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
								vParent.Clustered = new bool?(true);
								return;
							}
							return;
						}
						default:
							switch (num2)
							{
							case 33:
							case 35:
								return;
							case 34:
								break;
							default:
								switch (num2)
								{
								case 44:
								case 45:
								case 46:
								case 47:
								case 48:
								case 49:
								case 54:
								case 55:
								case 56:
								case 60:
								case 61:
								case 64:
								case 68:
									return;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 79)
				{
					switch (num2)
					{
					case 74:
					case 75:
						return;
					default:
						if (num2 == 79)
						{
							return;
						}
						break;
					}
				}
				else
				{
					if (num2 == 82 || num2 == 86)
					{
						return;
					}
					switch (num2)
					{
					case 92:
					case 95:
					case 99:
					case 100:
						return;
					case 98:
					{
						IToken token5 = this.LT(1);
						this.match(98);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token5);
							vParent.Clustered = new bool?(false);
							return;
						}
						return;
					}
					}
				}
			}
			else if (num2 <= 182)
			{
				if (num2 <= 144)
				{
					switch (num2)
					{
					case 105:
					case 106:
						return;
					default:
						switch (num2)
						{
						case 118:
						case 119:
						case 123:
						case 125:
						case 126:
						case 127:
						case 129:
						case 131:
						case 132:
						case 134:
						case 136:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 156:
					case 159:
					case 160:
					case 161:
					case 162:
					case 167:
					case 170:
					case 171:
					case 172:
						return;
					case 157:
					case 158:
					case 163:
					case 164:
					case 165:
					case 166:
					case 168:
					case 169:
						break;
					default:
						if (num2 == 176 || num2 == 182)
						{
							return;
						}
						break;
					}
				}
			}
			else if (num2 <= 198)
			{
				switch (num2)
				{
				case 191:
				case 192:
					return;
				default:
					if (num2 == 198)
					{
						return;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return;
				default:
					if (num2 == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000EC8 RID: 3784 RVA: 0x0006E390 File Offset: 0x0006C590
		public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent)
		{
			this.uniqueConstraintIndexOptionsOpt(statementType, vParent);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0314;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0314;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							goto IL_0314;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 28:
							case 30:
								goto IL_0314;
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_0314;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 79)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 68:
						goto IL_0314;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
					case 67:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0314;
						default:
							if (num == 79)
							{
								goto IL_0314;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0314;
				}
			}
			else if (num <= 176)
			{
				if (num <= 106)
				{
					if (num == 95)
					{
						goto IL_0314;
					}
					switch (num)
					{
					case 99:
					case 100:
						goto IL_0314;
					default:
						switch (num)
						{
						case 105:
						{
							IToken token = this.LT(1);
							this.match(105);
							FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
							if (this.inputState.guessing == 0)
							{
								if (statementType == IndexAffectingStatement.CreateType)
								{
									TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
								}
								vParent.OnFileGroupOrPartitionScheme = fileGroupOrPartitionScheme;
								goto IL_0314;
							}
							goto IL_0314;
						}
						case 106:
							goto IL_0314;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0314;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_0314;
						case 157:
						case 158:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								goto IL_0314;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				if (num == 182)
				{
					goto IL_0314;
				}
				switch (num)
				{
				case 191:
				case 192:
					goto IL_0314;
				default:
					if (num == 198)
					{
						goto IL_0314;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0314;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0314;
				default:
					if (num == 232)
					{
						goto IL_0314;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0314:
			this.fileStreamOnOpt(vParent);
		}

		// Token: 0x06000EC9 RID: 3785 RVA: 0x0006E6B8 File Offset: 0x0006C8B8
		public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent)
		{
			if (this.LA(1) == 171 && (this.LA(2) == 66 || this.LA(2) == 191 || this.LA(2) == 232))
			{
				this.match(171);
				int num = this.LA(1);
				if (num != 66)
				{
					if (num == 191)
					{
						this.indexOptionList(statement, vParent.IndexOptions, vParent);
						return;
					}
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.sortedDataOptions();
					int num2 = this.LA(1);
					if (num2 <= 92)
					{
						if (num2 <= 35)
						{
							if (num2 <= 6)
							{
								if (num2 == 1)
								{
									return;
								}
								switch (num2)
								{
								case 4:
								case 6:
									return;
								}
							}
							else
							{
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
								case 21:
								case 22:
								case 23:
									return;
								case 14:
								case 16:
								case 18:
								case 19:
								case 20:
									break;
								default:
									switch (num2)
									{
									case 28:
									case 30:
										return;
									case 29:
										break;
									default:
										switch (num2)
										{
										case 33:
										case 35:
											return;
										}
										break;
									}
									break;
								}
							}
						}
						else if (num2 <= 79)
						{
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 47:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
							case 68:
								return;
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
							case 65:
							case 67:
								break;
							case 66:
							{
								IndexOption indexOption = this.fillFactorOption();
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, indexOption);
									return;
								}
								return;
							}
							default:
								switch (num2)
								{
								case 74:
								case 75:
									return;
								default:
									if (num2 == 79)
									{
										return;
									}
									break;
								}
								break;
							}
						}
						else if (num2 == 82 || num2 == 86 || num2 == 92)
						{
							return;
						}
					}
					else if (num2 <= 176)
					{
						if (num2 <= 106)
						{
							if (num2 == 95)
							{
								return;
							}
							switch (num2)
							{
							case 99:
							case 100:
								return;
							default:
								switch (num2)
								{
								case 105:
								case 106:
									return;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 118:
							case 119:
							case 123:
							case 125:
							case 126:
							case 127:
							case 129:
							case 131:
							case 132:
							case 134:
							case 136:
							case 138:
							case 140:
							case 142:
							case 143:
							case 144:
								return;
							case 120:
							case 121:
							case 122:
							case 124:
							case 128:
							case 130:
							case 133:
							case 135:
							case 137:
							case 139:
							case 141:
								break;
							default:
								switch (num2)
								{
								case 156:
								case 159:
								case 160:
								case 161:
								case 162:
								case 167:
								case 170:
								case 171:
								case 172:
									return;
								case 157:
								case 158:
								case 163:
								case 164:
								case 165:
								case 166:
								case 168:
								case 169:
									break;
								default:
									if (num2 == 176)
									{
										return;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num2 <= 198)
					{
						if (num2 == 182)
						{
							return;
						}
						switch (num2)
						{
						case 191:
						case 192:
							return;
						default:
							if (num2 == 198)
							{
								return;
							}
							break;
						}
					}
					else
					{
						if (num2 == 204)
						{
							return;
						}
						switch (num2)
						{
						case 219:
						case 220:
							return;
						default:
							if (num2 == 232)
							{
								return;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				else
				{
					IndexOption indexOption = this.fillFactorOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, indexOption);
					}
					if (this.LA(1) == 232 && TSql110ParserInternal.tokenSet_165_.member(this.LA(2)) && base.NextTokenMatchesOneOf(new string[] { "SORTED_DATA", "SORTED_DATA_REORG" }))
					{
						this.sortedDataOptions();
						return;
					}
					if (TSql110ParserInternal.tokenSet_165_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
					{
						return;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (TSql110ParserInternal.tokenSet_165_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000ECA RID: 3786 RVA: 0x0006EB38 File Offset: 0x0006CD38
		public void sortedDataOptions()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SORTED_DATA", "SORTED_DATA_REORG");
			}
		}

		// Token: 0x06000ECB RID: 3787 RVA: 0x0006EB78 File Offset: 0x0006CD78
		public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent)
		{
			DeleteUpdateAction deleteUpdateAction = DeleteUpdateAction.NoAction;
			int num = this.LA(1);
			if (num != 19)
			{
				if (num != 142)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "NO");
					}
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
						TSql80ParserBaseInternal.Match(token2, "ACTION");
					}
				}
				else
				{
					this.match(142);
					int num2 = this.LA(1);
					if (num2 != 47)
					{
						if (num2 != 100)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token3 = this.LT(1);
						this.match(100);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
							deleteUpdateAction = DeleteUpdateAction.SetNull;
						}
					}
					else
					{
						IToken token4 = this.LT(1);
						this.match(47);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
							deleteUpdateAction = DeleteUpdateAction.SetDefault;
						}
					}
				}
			}
			else
			{
				IToken token5 = this.LT(1);
				this.match(19);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token5);
					deleteUpdateAction = DeleteUpdateAction.Cascade;
				}
			}
			return deleteUpdateAction;
		}

		// Token: 0x06000ECC RID: 3788 RVA: 0x0006ECE8 File Offset: 0x0006CEE8
		public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent)
		{
			bool flag = false;
			IToken token = this.LT(1);
			this.match(127);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.ReferenceTableName = schemaObjectName;
			}
			bool flag2 = false;
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				int num = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.identifier();
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				this.columnNameList(vParent, vParent.ReferencedTableColumns);
			}
			else if (!TSql110ParserInternal.tokenSet_165_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			bool flag3 = false;
			if (this.LA(1) == 105 && this.LA(2) == 48)
			{
				int num2 = this.mark();
				flag3 = true;
				this.inputState.guessing++;
				try
				{
					this.match(105);
					this.match(48);
				}
				catch (RecognitionException)
				{
					flag3 = false;
				}
				this.rewind(num2);
				this.inputState.guessing--;
			}
			if (flag3)
			{
				this.match(105);
				this.match(48);
				DeleteUpdateAction deleteUpdateAction = this.deleteUpdateAction(vParent);
				if (this.inputState.guessing == 0)
				{
					vParent.DeleteAction = deleteUpdateAction;
					flag = true;
				}
			}
			else if (!TSql110ParserInternal.tokenSet_165_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 35)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							goto IL_084A;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_084A;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							goto IL_084A;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num3)
							{
							case 28:
							case 30:
								goto IL_084A;
							case 29:
								break;
							default:
								switch (num3)
								{
								case 33:
								case 35:
									goto IL_084A;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 79)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 68:
						goto IL_084A;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
					case 67:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							goto IL_084A;
						default:
							if (num3 == 79)
							{
								goto IL_084A;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					goto IL_084A;
				}
			}
			else if (num3 <= 176)
			{
				if (num3 <= 106)
				{
					if (num3 == 95)
					{
						goto IL_084A;
					}
					switch (num3)
					{
					case 99:
					case 100:
						goto IL_084A;
					default:
						switch (num3)
						{
						case 105:
						{
							this.match(105);
							this.match(160);
							DeleteUpdateAction deleteUpdateAction = this.deleteUpdateAction(vParent);
							if (this.inputState.guessing == 0)
							{
								vParent.UpdateAction = deleteUpdateAction;
							}
							int num4 = this.LA(1);
							if (num4 <= 92)
							{
								if (num4 <= 35)
								{
									if (num4 <= 6)
									{
										if (num4 == 1)
										{
											goto IL_084A;
										}
										switch (num4)
										{
										case 4:
										case 6:
											goto IL_084A;
										}
									}
									else
									{
										switch (num4)
										{
										case 12:
										case 13:
										case 15:
										case 17:
										case 21:
										case 22:
										case 23:
											goto IL_084A;
										case 14:
										case 16:
										case 18:
										case 19:
										case 20:
											break;
										default:
											switch (num4)
											{
											case 28:
											case 30:
												goto IL_084A;
											case 29:
												break;
											default:
												switch (num4)
												{
												case 33:
												case 35:
													goto IL_084A;
												}
												break;
											}
											break;
										}
									}
								}
								else if (num4 <= 79)
								{
									switch (num4)
									{
									case 44:
									case 45:
									case 46:
									case 47:
									case 48:
									case 49:
									case 54:
									case 55:
									case 56:
									case 60:
									case 61:
									case 64:
									case 68:
										goto IL_084A;
									case 50:
									case 51:
									case 52:
									case 53:
									case 57:
									case 58:
									case 59:
									case 62:
									case 63:
									case 65:
									case 66:
									case 67:
										break;
									default:
										switch (num4)
										{
										case 74:
										case 75:
											goto IL_084A;
										default:
											if (num4 == 79)
											{
												goto IL_084A;
											}
											break;
										}
										break;
									}
								}
								else if (num4 == 82 || num4 == 86 || num4 == 92)
								{
									goto IL_084A;
								}
							}
							else if (num4 <= 176)
							{
								if (num4 <= 106)
								{
									if (num4 == 95)
									{
										goto IL_084A;
									}
									switch (num4)
									{
									case 99:
									case 100:
										goto IL_084A;
									default:
										switch (num4)
										{
										case 105:
										{
											IToken token2 = this.LT(1);
											this.match(105);
											this.match(48);
											deleteUpdateAction = this.deleteUpdateAction(vParent);
											if (this.inputState.guessing != 0)
											{
												goto IL_084A;
											}
											if (flag)
											{
												throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
											}
											vParent.DeleteAction = deleteUpdateAction;
											goto IL_084A;
										}
										case 106:
											goto IL_084A;
										}
										break;
									}
								}
								else
								{
									switch (num4)
									{
									case 118:
									case 119:
									case 123:
									case 125:
									case 126:
									case 127:
									case 129:
									case 131:
									case 132:
									case 134:
									case 136:
									case 138:
									case 140:
									case 142:
									case 143:
									case 144:
										goto IL_084A;
									case 120:
									case 121:
									case 122:
									case 124:
									case 128:
									case 130:
									case 133:
									case 135:
									case 137:
									case 139:
									case 141:
										break;
									default:
										switch (num4)
										{
										case 156:
										case 159:
										case 160:
										case 161:
										case 162:
										case 167:
										case 170:
										case 171:
										case 172:
											goto IL_084A;
										case 157:
										case 158:
										case 163:
										case 164:
										case 165:
										case 166:
										case 168:
										case 169:
											break;
										default:
											if (num4 == 176)
											{
												goto IL_084A;
											}
											break;
										}
										break;
									}
								}
							}
							else if (num4 <= 198)
							{
								if (num4 == 182)
								{
									goto IL_084A;
								}
								switch (num4)
								{
								case 191:
								case 192:
									goto IL_084A;
								default:
									if (num4 == 198)
									{
										goto IL_084A;
									}
									break;
								}
							}
							else
							{
								if (num4 == 204)
								{
									goto IL_084A;
								}
								switch (num4)
								{
								case 219:
								case 220:
									goto IL_084A;
								default:
									if (num4 == 232)
									{
										goto IL_084A;
									}
									break;
								}
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						case 106:
							goto IL_084A;
						}
						break;
					}
				}
				else
				{
					switch (num3)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_084A;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_084A;
						case 157:
						case 158:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							break;
						default:
							if (num3 == 176)
							{
								goto IL_084A;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 198)
			{
				if (num3 == 182)
				{
					goto IL_084A;
				}
				switch (num3)
				{
				case 191:
				case 192:
					goto IL_084A;
				default:
					if (num3 == 198)
					{
						goto IL_084A;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_084A;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_084A;
				default:
					if (num3 == 232)
					{
						goto IL_084A;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_084A:
			bool flag4 = this.replicationClauseOpt(statementType, vParent);
			if (this.inputState.guessing == 0)
			{
				vParent.NotForReplication = flag4;
			}
		}

		// Token: 0x06000ECD RID: 3789 RVA: 0x0006F57C File Offset: 0x0006D77C
		public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent)
		{
			int num = this.LA(1);
			if (num == 127)
			{
				return;
			}
			if (num == 191)
			{
				this.columnNameList(vParent, vParent.Columns);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000ECE RID: 3790 RVA: 0x0006F5C0 File Offset: 0x0006D7C0
		public XmlDataTypeReference xmlDataType(SchemaObjectName vName)
		{
			XmlDataTypeReference xmlDataTypeReference = base.FragmentFactory.CreateFragment<XmlDataTypeReference>();
			xmlDataTypeReference.Name = vName;
			xmlDataTypeReference.UpdateTokenInfo(vName);
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.identifier();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						xmlDataTypeReference.XmlDataTypeOption = XmlDataTypeOptionHelper.Instance.ParseOption(token);
					}
				}
				else if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 192 && this.LA(2) != 200))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				SchemaObjectName schemaObjectName = this.dataTypeSchemaObjectName();
				if (this.inputState.guessing == 0)
				{
					xmlDataTypeReference.XmlSchemaCollection = schemaObjectName;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlDataTypeReference, token2);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_0_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return xmlDataTypeReference;
		}

		// Token: 0x06000ECF RID: 3791 RVA: 0x0006F7B4 File Offset: 0x0006D9B4
		public SchemaObjectName dataTypeSchemaObjectName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return schemaObjectName;
						}
						switch (num)
						{
						case 4:
						case 6:
							return schemaObjectName;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							return schemaObjectName;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 26:
							case 28:
							case 30:
								return schemaObjectName;
							case 27:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									return schemaObjectName;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 79)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
					case 68:
						return schemaObjectName;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return schemaObjectName;
						default:
							if (num == 79)
							{
								return schemaObjectName;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return schemaObjectName;
				}
			}
			else if (num <= 176)
			{
				if (num <= 100)
				{
					if (num == 95)
					{
						return schemaObjectName;
					}
					switch (num)
					{
					case 99:
					case 100:
						return schemaObjectName;
					}
				}
				else
				{
					if (num == 106)
					{
						return schemaObjectName;
					}
					switch (num)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return schemaObjectName;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 165:
						case 167:
						case 170:
						case 171:
						case 172:
						case 175:
						case 176:
							return schemaObjectName;
						}
						break;
					}
				}
			}
			else if (num <= 200)
			{
				if (num == 182)
				{
					return schemaObjectName;
				}
				switch (num)
				{
				case 191:
				case 192:
					return schemaObjectName;
				default:
					switch (num)
					{
					case 198:
						return schemaObjectName;
					case 200:
						this.match(200);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
							return schemaObjectName;
						}
						return schemaObjectName;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
				case 206:
					return schemaObjectName;
				case 205:
					break;
				default:
					switch (num)
					{
					case 219:
					case 220:
						return schemaObjectName;
					default:
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 234:
							return schemaObjectName;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000ED0 RID: 3792 RVA: 0x0006FB38 File Offset: 0x0006DD38
		public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType)
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			sqlDataTypeReference.Name = vName;
			sqlDataTypeReference.SqlDataTypeOption = vType;
			sqlDataTypeReference.UpdateTokenInfo(vName);
			bool flag = false;
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_035D;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_035D;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							goto IL_035D;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 26:
							case 28:
							case 30:
								goto IL_035D;
							case 27:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_035D;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 79)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
					case 68:
						goto IL_035D;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_035D;
						default:
							if (num == 79)
							{
								goto IL_035D;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_035D;
				}
			}
			else if (num <= 176)
			{
				if (num <= 100)
				{
					if (num == 95)
					{
						goto IL_035D;
					}
					switch (num)
					{
					case 99:
					case 100:
						goto IL_035D;
					}
				}
				else
				{
					if (num == 106)
					{
						goto IL_035D;
					}
					switch (num)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_035D;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
						case 175:
						case 176:
							goto IL_035D;
						case 165:
						{
							IToken token = this.LT(1);
							this.match(165);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
								flag = true;
								goto IL_035D;
							}
							goto IL_035D;
						}
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				if (num == 182)
				{
					goto IL_035D;
				}
				switch (num)
				{
				case 191:
				case 192:
					goto IL_035D;
				default:
					if (num == 198)
					{
						goto IL_035D;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
				case 206:
					goto IL_035D;
				case 205:
					break;
				default:
					switch (num)
					{
					case 219:
					case 220:
						goto IL_035D;
					default:
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 234:
							goto IL_035D;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_035D:
			this.dataTypeParametersOpt(sqlDataTypeReference);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ProcessNationalAndVarying(sqlDataTypeReference, null, flag);
				TSql80ParserBaseInternal.CheckSqlDataTypeParameters(sqlDataTypeReference);
			}
			return sqlDataTypeReference;
		}

		// Token: 0x06000ED1 RID: 3793 RVA: 0x0006FEC8 File Offset: 0x0006E0C8
		public UserDataTypeReference userDataType(SchemaObjectName vName)
		{
			UserDataTypeReference userDataTypeReference = base.FragmentFactory.CreateFragment<UserDataTypeReference>();
			userDataTypeReference.Name = vName;
			userDataTypeReference.UpdateTokenInfo(vName);
			this.dataTypeParametersOpt(userDataTypeReference);
			return userDataTypeReference;
		}

		// Token: 0x06000ED2 RID: 3794 RVA: 0x0006FEF8 File Offset: 0x0006E0F8
		public SqlDataTypeReference doubleDataType()
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			IToken token = this.LT(1);
			this.match(53);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "PRECISION");
				base.SetNameForDoublePrecisionType(sqlDataTypeReference, token, token2);
				sqlDataTypeReference.SqlDataTypeOption = SqlDataTypeOption.Float;
			}
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 221 || this.LA(2) == 232))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					int num2 = this.LA(1);
					if (num2 != 221)
					{
						if (num2 != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(232);
					}
					else
					{
						this.integer();
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				int num3 = this.LA(1);
				if (num3 != 221)
				{
					if (num3 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					Literal literal = this.max();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(sqlDataTypeReference, sqlDataTypeReference.Parameters, literal);
					}
				}
				else
				{
					Literal literal = this.integer();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(sqlDataTypeReference, sqlDataTypeReference.Parameters, literal);
					}
				}
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token3);
				}
			}
			else if (!TSql110ParserInternal.tokenSet_0_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return sqlDataTypeReference;
		}

		// Token: 0x06000ED3 RID: 3795 RVA: 0x00070128 File Offset: 0x0006E328
		public SqlDataTypeReference sqlDataTypeWithNational()
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(96);
			SchemaObjectName schemaObjectName = this.dataTypeSchemaObjectName();
			if (this.inputState.guessing == 0)
			{
				sqlDataTypeReference.SqlDataTypeOption = TSql100ParserBaseInternal.ParseDataType100(schemaObjectName.BaseIdentifier.Value);
				if (sqlDataTypeReference.SqlDataTypeOption == SqlDataTypeOption.None || (schemaObjectName.SchemaIdentifier != null && !TSql90ParserBaseInternal.IsSys(schemaObjectName.SchemaIdentifier)))
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46003", token, TSqlParserResource.SQL46003Message, new string[] { TSqlParserResource.UserDefined });
				}
				sqlDataTypeReference.Name = schemaObjectName;
				TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
				sqlDataTypeReference.UpdateTokenInfo(schemaObjectName);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_03F9;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_03F9;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							goto IL_03F9;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 26:
							case 28:
							case 30:
								goto IL_03F9;
							case 27:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_03F9;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 79)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
					case 68:
						goto IL_03F9;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_03F9;
						default:
							if (num == 79)
							{
								goto IL_03F9;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_03F9;
				}
			}
			else if (num <= 176)
			{
				if (num <= 100)
				{
					if (num == 95)
					{
						goto IL_03F9;
					}
					switch (num)
					{
					case 99:
					case 100:
						goto IL_03F9;
					}
				}
				else
				{
					if (num == 106)
					{
						goto IL_03F9;
					}
					switch (num)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_03F9;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
						case 175:
						case 176:
							goto IL_03F9;
						case 165:
						{
							IToken token2 = this.LT(1);
							this.match(165);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token2);
								flag = true;
								goto IL_03F9;
							}
							goto IL_03F9;
						}
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				if (num == 182)
				{
					goto IL_03F9;
				}
				switch (num)
				{
				case 191:
				case 192:
					goto IL_03F9;
				default:
					if (num == 198)
					{
						goto IL_03F9;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
				case 206:
					goto IL_03F9;
				case 205:
					break;
				default:
					switch (num)
					{
					case 219:
					case 220:
						goto IL_03F9;
					default:
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 234:
							goto IL_03F9;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_03F9:
			this.dataTypeParametersOpt(sqlDataTypeReference);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ProcessNationalAndVarying(sqlDataTypeReference, token, flag);
				TSql80ParserBaseInternal.CheckSqlDataTypeParameters(sqlDataTypeReference);
			}
			return sqlDataTypeReference;
		}

		// Token: 0x06000ED4 RID: 3796 RVA: 0x00070554 File Offset: 0x0006E754
		public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent)
		{
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 221 || this.LA(2) == 232))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					int num2 = this.LA(1);
					if (num2 != 221)
					{
						if (num2 != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(232);
					}
					else
					{
						this.integer();
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				int num3 = this.LA(1);
				if (num3 != 221)
				{
					if (num3 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					Literal literal = this.max();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.Parameters, literal);
					}
				}
				else
				{
					Literal literal = this.integer();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.Parameters, literal);
					}
					int num4 = this.LA(1);
					if (num4 != 192)
					{
						if (num4 != 198)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(198);
						literal = this.integer();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.Parameters, literal);
						}
					}
				}
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				return;
			}
			else
			{
				if (TSql110ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_1_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06000ED5 RID: 3797 RVA: 0x00070780 File Offset: 0x0006E980
		public MaxLiteral max()
		{
			MaxLiteral maxLiteral = base.FragmentFactory.CreateFragment<MaxLiteral>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MAX");
				TSql80ParserBaseInternal.UpdateTokenInfo(maxLiteral, token);
				maxLiteral.Value = token.getText();
			}
			return maxLiteral;
		}

		// Token: 0x06000ED6 RID: 3798 RVA: 0x000707DC File Offset: 0x0006E9DC
		public void identifierListElement(List<Identifier> vParent, int vMaxNumber, bool first)
		{
			IToken token = this.LT(1);
			this.match(200);
			Identifier identifier;
			if (this.inputState.guessing == 0 && first)
			{
				identifier = base.GetEmptyIdentifier(token);
				TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, identifier, vMaxNumber);
			}
			while (this.LA(1) == 200)
			{
				IToken token2 = this.LT(1);
				this.match(200);
				if (this.inputState.guessing == 0)
				{
					identifier = base.GetEmptyIdentifier(token2);
					TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, identifier, vMaxNumber);
				}
			}
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, identifier, vMaxNumber);
			}
		}

		// Token: 0x06000ED7 RID: 3799 RVA: 0x0007087C File Offset: 0x0006EA7C
		public MultiPartIdentifier nonEmptyThreePartObjectName()
		{
			MultiPartIdentifier multiPartIdentifier = base.FragmentFactory.CreateFragment<MultiPartIdentifier>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(multiPartIdentifier, multiPartIdentifier.Identifiers, identifier);
			}
			this.match(200);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(multiPartIdentifier, multiPartIdentifier.Identifiers, identifier);
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return multiPartIdentifier;
						}
						switch (num)
						{
						case 4:
						case 6:
							return multiPartIdentifier;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return multiPartIdentifier;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return multiPartIdentifier;
						default:
							if (num == 28)
							{
								return multiPartIdentifier;
							}
							switch (num)
							{
							case 33:
							case 35:
								return multiPartIdentifier;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return multiPartIdentifier;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return multiPartIdentifier;
						default:
							if (num == 82)
							{
								return multiPartIdentifier;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return multiPartIdentifier;
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						return multiPartIdentifier;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return multiPartIdentifier;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return multiPartIdentifier;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return multiPartIdentifier;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return multiPartIdentifier;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 200)
			{
				if (num == 182)
				{
					return multiPartIdentifier;
				}
				switch (num)
				{
				case 191:
				case 192:
					return multiPartIdentifier;
				default:
					switch (num)
					{
					case 198:
						return multiPartIdentifier;
					case 200:
						this.match(200);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(multiPartIdentifier, multiPartIdentifier.Identifiers, identifier);
							return multiPartIdentifier;
						}
						return multiPartIdentifier;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return multiPartIdentifier;
				}
				switch (num)
				{
				case 219:
				case 220:
					return multiPartIdentifier;
				default:
					if (num == 232)
					{
						return multiPartIdentifier;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000ED8 RID: 3800 RVA: 0x00070B9C File Offset: 0x0006ED9C
		public MultiPartIdentifier oneOrTwoOrThreePartObjectName()
		{
			MultiPartIdentifier multiPartIdentifier = base.FragmentFactory.CreateFragment<MultiPartIdentifier>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(multiPartIdentifier, multiPartIdentifier.Identifiers, identifier);
			}
			int num = this.LA(1);
			if (num <= 191)
			{
				if (num == 188 || num == 191)
				{
					return multiPartIdentifier;
				}
			}
			else
			{
				switch (num)
				{
				case 198:
					return multiPartIdentifier;
				case 199:
					break;
				case 200:
				{
					this.match(200);
					identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(multiPartIdentifier, multiPartIdentifier.Identifiers, identifier);
					}
					int num2 = this.LA(1);
					if (num2 <= 191)
					{
						if (num2 == 188 || num2 == 191)
						{
							return multiPartIdentifier;
						}
					}
					else
					{
						switch (num2)
						{
						case 198:
							return multiPartIdentifier;
						case 199:
							break;
						case 200:
							this.match(200);
							identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(multiPartIdentifier, multiPartIdentifier.Identifiers, identifier);
								return multiPartIdentifier;
							}
							return multiPartIdentifier;
						default:
							switch (num2)
							{
							case 205:
							case 206:
							case 208:
								return multiPartIdentifier;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				default:
					switch (num)
					{
					case 205:
					case 206:
					case 208:
						return multiPartIdentifier;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000ED9 RID: 3801 RVA: 0x00070D1C File Offset: 0x0006EF1C
		public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanExpression booleanExpression = null;
			booleanExpression = this.booleanExpressionAnd(expressionFlags);
			while (this.LA(1) == 112)
			{
				this.match(112);
				BooleanExpression booleanExpression2 = this.booleanExpressionAnd(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					base.AddBinaryExpression(ref booleanExpression, booleanExpression2, BooleanBinaryExpressionType.Or);
				}
			}
			return booleanExpression;
		}

		// Token: 0x06000EDA RID: 3802 RVA: 0x00070D68 File Offset: 0x0006EF68
		public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanExpression booleanExpression = null;
			booleanExpression = this.booleanExpressionUnary(expressionFlags);
			while (this.LA(1) == 7)
			{
				this.match(7);
				BooleanExpression booleanExpression2 = this.booleanExpressionUnary(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					base.AddBinaryExpression(ref booleanExpression, booleanExpression2, BooleanBinaryExpressionType.And);
				}
			}
			return booleanExpression;
		}

		// Token: 0x06000EDB RID: 3803 RVA: 0x00070DB4 File Offset: 0x0006EFB4
		public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanExpression booleanExpression = null;
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_022C;
						}
					}
					else if (num != 31 && num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_022C;
						}
					}
				}
				else if (num <= 69)
				{
					if (num != 62 && num != 69)
					{
						goto IL_022C;
					}
				}
				else if (num != 81 && num != 93)
				{
					switch (num)
					{
					case 99:
					{
						IToken token = this.LT(1);
						this.match(99);
						BooleanExpression booleanExpression2 = this.booleanExpressionUnary(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							BooleanNotExpression booleanNotExpression = base.FragmentFactory.CreateFragment<BooleanNotExpression>();
							booleanExpression = booleanNotExpression;
							TSql80ParserBaseInternal.UpdateTokenInfo(booleanNotExpression, token);
							booleanNotExpression.Expression = booleanExpression2;
							return booleanExpression;
						}
						return booleanExpression;
					}
					case 100:
					case 101:
						break;
					default:
						goto IL_022C;
					}
				}
			}
			else if (num <= 157)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_022C;
					}
				}
				else if (num != 141 && num != 147 && num != 157)
				{
					goto IL_022C;
				}
			}
			else if (num <= 187)
			{
				if (num != 160 && num != 163 && num != 187)
				{
					goto IL_022C;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
					break;
				case 192:
					goto IL_022C;
				default:
					switch (num)
					{
					case 197:
					case 199:
					case 200:
						break;
					case 198:
						goto IL_022C;
					default:
						switch (num)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							break;
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 226:
						case 229:
							goto IL_022C;
						default:
							goto IL_022C;
						}
						break;
					}
					break;
				}
			}
			return this.booleanExpressionPrimary(expressionFlags);
			IL_022C:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000EDC RID: 3804 RVA: 0x00071004 File Offset: 0x0006F204
		public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			IToken token = null;
			bool flag = false;
			int num = this.LA(1);
			if (num <= 62)
			{
				if (num != 31)
				{
					if (num != 62)
					{
						goto IL_0071;
					}
					return this.existsPredicate(expressionFlags);
				}
			}
			else if (num != 69)
			{
				if (num == 157)
				{
					return this.tsEqualCall();
				}
				if (num != 160)
				{
					goto IL_0071;
				}
				return this.updateCall();
			}
			return this.fulltextPredicate();
			IL_0071:
			BooleanExpression booleanExpression;
			if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_131_.member(this.LA(2)) && base.IsNextRuleBooleanParenthesis())
			{
				booleanExpression = this.booleanExpressionParenthesis();
			}
			else
			{
				if (TSql110ParserInternal.tokenSet_39_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_166_.member(this.LA(2)))
				{
					ScalarExpression scalarExpression = this.expression(expressionFlags);
					int num2 = this.LA(1);
					if (num2 <= 89)
					{
						if (num2 != 14 && num2 != 83)
						{
							if (num2 != 89)
							{
								goto IL_0423;
							}
							return this.nullPredicate(scalarExpression);
						}
					}
					else
					{
						if (num2 > 99)
						{
							if (num2 != 188)
							{
								switch (num2)
								{
								case 205:
								case 206:
								case 208:
									break;
								case 207:
									goto IL_0423;
								default:
									goto IL_0423;
								}
							}
							BooleanComparisonType booleanComparisonType = this.comparisonOperator();
							int num3 = this.LA(1);
							if (num3 <= 101)
							{
								if (num3 <= 25)
								{
									if (num3 <= 8)
									{
										if (num3 != 5 && num3 != 8)
										{
											goto IL_0339;
										}
										goto IL_0329;
									}
									else if (num3 != 20 && num3 != 25)
									{
										goto IL_0339;
									}
								}
								else if (num3 <= 41)
								{
									if (num3 != 34)
									{
										switch (num3)
										{
										case 40:
										case 41:
											break;
										default:
											goto IL_0339;
										}
									}
								}
								else if (num3 != 81 && num3 != 93)
								{
									switch (num3)
									{
									case 100:
									case 101:
										break;
									default:
										goto IL_0339;
									}
								}
							}
							else if (num3 <= 147)
							{
								if (num3 <= 136)
								{
									if (num3 != 133 && num3 != 136)
									{
										goto IL_0339;
									}
								}
								else if (num3 != 141)
								{
									switch (num3)
									{
									case 145:
										goto IL_0329;
									case 146:
										goto IL_0339;
									case 147:
										break;
									default:
										goto IL_0339;
									}
								}
							}
							else if (num3 <= 187)
							{
								if (num3 != 163 && num3 != 187)
								{
									goto IL_0339;
								}
							}
							else
							{
								switch (num3)
								{
								case 191:
								case 193:
									break;
								case 192:
									goto IL_0339;
								default:
									switch (num3)
									{
									case 197:
									case 199:
									case 200:
										break;
									case 198:
										goto IL_0339;
									default:
										switch (num3)
										{
										case 211:
										case 221:
										case 222:
										case 223:
										case 224:
										case 225:
										case 227:
										case 228:
										case 230:
										case 231:
										case 232:
										case 233:
										case 234:
										case 235:
											break;
										case 212:
										case 213:
										case 214:
										case 215:
										case 216:
										case 217:
										case 218:
										case 219:
										case 220:
										case 226:
										case 229:
											goto IL_0339;
										default:
											goto IL_0339;
										}
										break;
									}
									break;
								}
							}
							return this.comparisonPredicate(scalarExpression, booleanComparisonType, expressionFlags);
							IL_0329:
							return this.subqueryComparisonPredicate(scalarExpression, booleanComparisonType, expressionFlags);
							IL_0339:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						if (num2 != 94 && num2 != 99)
						{
							goto IL_0423;
						}
					}
					int num4 = this.LA(1);
					if (num4 <= 83)
					{
						if (num4 == 14 || num4 == 83)
						{
							goto IL_03B6;
						}
					}
					else
					{
						if (num4 == 94)
						{
							goto IL_03B6;
						}
						if (num4 == 99)
						{
							token = this.LT(1);
							this.match(99);
							if (this.inputState.guessing == 0)
							{
								flag = true;
								goto IL_03B6;
							}
							goto IL_03B6;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_03B6:
					int num5 = this.LA(1);
					if (num5 != 14)
					{
						if (num5 != 83)
						{
							if (num5 != 94)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							booleanExpression = this.likePredicate(scalarExpression, flag, expressionFlags);
						}
						else
						{
							booleanExpression = this.inPredicate(scalarExpression, flag, expressionFlags);
						}
					}
					else
					{
						booleanExpression = this.betweenPredicate(scalarExpression, flag, expressionFlags);
					}
					if (this.inputState.guessing == 0 && token != null)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(booleanExpression, token);
						return booleanExpression;
					}
					return booleanExpression;
					IL_0423:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return booleanExpression;
		}

		// Token: 0x06000EDD RID: 3805 RVA: 0x0007145C File Offset: 0x0006F65C
		public BooleanParenthesisExpression booleanExpressionParenthesis()
		{
			BooleanParenthesisExpression booleanParenthesisExpression = base.FragmentFactory.CreateFragment<BooleanParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token);
				booleanParenthesisExpression.Expression = booleanExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token2);
			}
			return booleanParenthesisExpression;
		}

		// Token: 0x06000EDE RID: 3806 RVA: 0x000714CC File Offset: 0x0006F6CC
		public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanComparisonExpression booleanComparisonExpression = base.FragmentFactory.CreateFragment<BooleanComparisonExpression>();
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanComparisonExpression.ComparisonType = vType;
				booleanComparisonExpression.FirstExpression = vExpressionFirst;
				booleanComparisonExpression.SecondExpression = scalarExpression;
			}
			return booleanComparisonExpression;
		}

		// Token: 0x06000EDF RID: 3807 RVA: 0x00071510 File Offset: 0x0006F710
		public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			SubqueryComparisonPredicate subqueryComparisonPredicate = base.FragmentFactory.CreateFragment<SubqueryComparisonPredicate>();
			SubqueryComparisonPredicateType subqueryComparisonPredicateType = this.subqueryComparisonPredicateType();
			ScalarSubquery scalarSubquery = this.subquery(SubDmlFlags.SelectNotForInsert, expressionFlags);
			if (this.inputState.guessing == 0)
			{
				subqueryComparisonPredicate.ComparisonType = vType;
				subqueryComparisonPredicate.Expression = vExpressionFirst;
				subqueryComparisonPredicate.SubqueryComparisonPredicateType = subqueryComparisonPredicateType;
				subqueryComparisonPredicate.Subquery = scalarSubquery;
			}
			return subqueryComparisonPredicate;
		}

		// Token: 0x06000EE0 RID: 3808 RVA: 0x00071568 File Offset: 0x0006F768
		public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			InPredicate inPredicate = base.FragmentFactory.CreateFragment<InPredicate>();
			IToken token = this.LT(1);
			this.match(83);
			if (this.inputState.guessing == 0)
			{
				if (vNotDefined)
				{
					inPredicate.NotDefined = true;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(inPredicate, token);
				inPredicate.Expression = vExpressionFirst;
			}
			if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 191) && base.IsNextRuleSelectParenthesis())
			{
				ScalarSubquery scalarSubquery = this.subquery(SubDmlFlags.SelectNotForInsert, expressionFlags);
				if (this.inputState.guessing == 0)
				{
					inPredicate.Subquery = scalarSubquery;
				}
			}
			else
			{
				if (this.LA(1) != 191 || !TSql110ParserInternal.tokenSet_39_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				this.expressionList(inPredicate, inPredicate.Values);
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(inPredicate, token2);
				}
			}
			return inPredicate;
		}

		// Token: 0x06000EE1 RID: 3809 RVA: 0x00071684 File Offset: 0x0006F884
		public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanTernaryExpression booleanTernaryExpression = base.FragmentFactory.CreateFragment<BooleanTernaryExpression>();
			IToken token = this.LT(1);
			this.match(14);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanTernaryExpression.SecondExpression = scalarExpression;
			}
			this.match(7);
			scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanTernaryExpression.ThirdExpression = scalarExpression;
				if (vNotDefined)
				{
					booleanTernaryExpression.TernaryExpressionType = BooleanTernaryExpressionType.NotBetween;
				}
				else
				{
					booleanTernaryExpression.TernaryExpressionType = BooleanTernaryExpressionType.Between;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanTernaryExpression, token);
				booleanTernaryExpression.FirstExpression = vExpressionFirst;
			}
			return booleanTernaryExpression;
		}

		// Token: 0x06000EE2 RID: 3810 RVA: 0x00071710 File Offset: 0x0006F910
		public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			LikePredicate likePredicate = base.FragmentFactory.CreateFragment<LikePredicate>();
			IToken token = this.LT(1);
			this.match(94);
			if (this.inputState.guessing == 0)
			{
				if (vNotDefined)
				{
					likePredicate.NotDefined = true;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(likePredicate, token);
				likePredicate.FirstExpression = vExpressionFirst;
			}
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				likePredicate.SecondExpression = scalarExpression;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 28)
				{
					if (num <= 17)
					{
						switch (num)
						{
						case 1:
						case 4:
						case 6:
						case 7:
							return likePredicate;
						case 2:
						case 3:
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return likePredicate;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return likePredicate;
						default:
							if (num == 28)
							{
								return likePredicate;
							}
							break;
						}
					}
				}
				else if (num <= 64)
				{
					switch (num)
					{
					case 33:
					case 35:
					case 36:
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 59:
					case 60:
					case 61:
						return likePredicate;
					case 34:
					case 37:
					case 38:
					case 39:
					case 40:
					case 41:
					case 42:
					case 43:
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
						break;
					case 58:
						this.escapeExpression(likePredicate, expressionFlags);
						return likePredicate;
					default:
						if (num == 64)
						{
							return likePredicate;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 67:
					case 72:
					case 74:
					case 75:
					case 76:
					case 77:
						return likePredicate;
					case 68:
					case 69:
					case 70:
					case 71:
					case 73:
						break;
					default:
						switch (num)
						{
						case 82:
						case 85:
						case 86:
						case 87:
						case 90:
						case 92:
						case 93:
						case 95:
							return likePredicate;
						}
						break;
					}
				}
			}
			else if (num <= 182)
			{
				if (num <= 144)
				{
					switch (num)
					{
					case 105:
					case 106:
					case 111:
					case 112:
					case 113:
					case 114:
						return likePredicate;
					case 107:
					case 108:
					case 109:
					case 110:
						break;
					default:
						switch (num)
						{
						case 119:
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 133:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return likePredicate;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 150:
					case 156:
					case 158:
					case 160:
					case 161:
					case 162:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 176:
					case 177:
					case 178:
						return likePredicate;
					case 151:
					case 152:
					case 153:
					case 154:
					case 155:
					case 157:
					case 159:
					case 163:
					case 164:
					case 165:
					case 166:
					case 173:
					case 174:
					case 175:
						break;
					default:
						if (num == 182)
						{
							return likePredicate;
						}
						break;
					}
				}
			}
			else if (num <= 204)
			{
				switch (num)
				{
				case 191:
				case 192:
				case 194:
				case 198:
					return likePredicate;
				case 193:
				{
					this.match(193);
					if (this.inputState.guessing == 0)
					{
						likePredicate.OdbcEscape = true;
					}
					this.escapeExpression(likePredicate, expressionFlags);
					IToken token2 = this.LT(1);
					this.match(194);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(likePredicate, token2);
						return likePredicate;
					}
					return likePredicate;
				}
				case 195:
				case 196:
				case 197:
					break;
				default:
					if (num == 204)
					{
						return likePredicate;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					return likePredicate;
				default:
					if (num == 232)
					{
						return likePredicate;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000EE3 RID: 3811 RVA: 0x00071B40 File Offset: 0x0006FD40
		public FullTextPredicate fulltextPredicate()
		{
			FullTextPredicate fullTextPredicate = base.FragmentFactory.CreateFragment<FullTextPredicate>();
			int num = this.LA(1);
			if (num != 31)
			{
				if (num != 69)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(69);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token);
					fullTextPredicate.FullTextFunctionType = FullTextFunctionType.FreeText;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(31);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token2);
					fullTextPredicate.FullTextFunctionType = FullTextFunctionType.Contains;
				}
			}
			this.match(191);
			if (TSql110ParserInternal.tokenSet_167_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_168_.member(this.LA(2)))
			{
				ColumnReferenceExpression columnReferenceExpression = this.fulltextColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, columnReferenceExpression);
				}
			}
			else if (this.LA(1) == 191)
			{
				this.match(191);
				bool flag = false;
				if (TSql110ParserInternal.tokenSet_96_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_169_.member(this.LA(2)))
				{
					int num2 = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.starColumn();
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(num2);
					this.inputState.guessing--;
				}
				if (flag)
				{
					ColumnReferenceExpression columnReferenceExpression = this.starColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, columnReferenceExpression);
					}
				}
				else
				{
					if (!TSql110ParserInternal.tokenSet_33_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_170_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					ColumnReferenceExpression columnReferenceExpression = this.column();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, columnReferenceExpression);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						columnReferenceExpression = this.column();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, columnReferenceExpression);
						}
					}
				}
				this.match(192);
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(191);
				ColumnReferenceExpression columnReferenceExpression = this.identifierColumnReferenceExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "PROPERTY");
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, columnReferenceExpression);
				}
				this.match(198);
				StringLiteral stringLiteral = this.stringLiteral();
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					fullTextPredicate.PropertyName = stringLiteral;
				}
			}
			this.match(198);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				fullTextPredicate.Value = valueExpression;
			}
			int num3 = this.LA(1);
			if (num3 != 192)
			{
				if (num3 != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ValueExpression valueExpression2 = this.languageExpression();
				if (this.inputState.guessing == 0)
				{
					fullTextPredicate.LanguageTerm = valueExpression2;
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token4);
			}
			return fullTextPredicate;
		}

		// Token: 0x06000EE4 RID: 3812 RVA: 0x00071F18 File Offset: 0x00070118
		public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ExistsPredicate existsPredicate = base.FragmentFactory.CreateFragment<ExistsPredicate>();
			this.match(62);
			ScalarSubquery scalarSubquery = this.subquery(SubDmlFlags.SelectNotForInsert, expressionFlags);
			if (this.inputState.guessing == 0)
			{
				existsPredicate.Subquery = scalarSubquery;
			}
			return existsPredicate;
		}

		// Token: 0x06000EE5 RID: 3813 RVA: 0x00071F58 File Offset: 0x00070158
		public TSEqualCall tsEqualCall()
		{
			TSEqualCall tsequalCall = base.FragmentFactory.CreateFragment<TSEqualCall>();
			IToken token = this.LT(1);
			this.match(157);
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsequalCall, token);
				tsequalCall.FirstExpression = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.expression(ExpressionFlags.None);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				tsequalCall.SecondExpression = scalarExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(tsequalCall, token2);
			}
			return tsequalCall;
		}

		// Token: 0x06000EE6 RID: 3814 RVA: 0x00071FF8 File Offset: 0x000701F8
		public UpdateCall updateCall()
		{
			UpdateCall updateCall = base.FragmentFactory.CreateFragment<UpdateCall>();
			IToken token = this.LT(1);
			this.match(160);
			this.match(191);
			Identifier identifier = this.identifier();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateCall, token);
				updateCall.Identifier = identifier;
				TSql80ParserBaseInternal.UpdateTokenInfo(updateCall, token2);
			}
			return updateCall;
		}

		// Token: 0x06000EE7 RID: 3815 RVA: 0x00072070 File Offset: 0x00070270
		public ColumnReferenceExpression fulltextColumn()
		{
			bool flag = false;
			if (TSql110ParserInternal.tokenSet_96_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_168_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.starColumn();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			ColumnReferenceExpression columnReferenceExpression;
			if (flag)
			{
				columnReferenceExpression = this.starColumn();
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_33_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_168_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				columnReferenceExpression = this.column();
			}
			return columnReferenceExpression;
		}

		// Token: 0x06000EE8 RID: 3816 RVA: 0x0007214C File Offset: 0x0007034C
		public ColumnReferenceExpression starColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			columnReferenceExpression.ColumnType = ColumnType.Wildcard;
			int num = this.LA(1);
			if (num != 195)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.inputState.guessing == 0)
				{
					columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				}
				this.match(200);
				IToken token = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token);
					columnReferenceExpression.ColumnType = ColumnType.Wildcard;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token2);
					columnReferenceExpression.ColumnType = ColumnType.Wildcard;
				}
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06000EE9 RID: 3817 RVA: 0x0007225C File Offset: 0x0007045C
		public SubqueryComparisonPredicateType subqueryComparisonPredicateType()
		{
			SubqueryComparisonPredicateType subqueryComparisonPredicateType = SubqueryComparisonPredicateType.None;
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 8)
				{
					if (num != 145)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(145);
					if (this.inputState.guessing == 0)
					{
						subqueryComparisonPredicateType = SubqueryComparisonPredicateType.Any;
					}
				}
				else
				{
					this.match(8);
					if (this.inputState.guessing == 0)
					{
						subqueryComparisonPredicateType = SubqueryComparisonPredicateType.Any;
					}
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					subqueryComparisonPredicateType = SubqueryComparisonPredicateType.All;
				}
			}
			return subqueryComparisonPredicateType;
		}

		// Token: 0x06000EEA RID: 3818 RVA: 0x000722E8 File Offset: 0x000704E8
		public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			this.match(58);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				vParent.EscapeExpression = scalarExpression;
			}
		}

		// Token: 0x06000EEB RID: 3819 RVA: 0x0007231C File Offset: 0x0007051C
		public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ScalarExpression scalarExpression = null;
			scalarExpression = this.expressionBinaryPri1(expressionFlags);
			for (;;)
			{
				int num = this.LA(1);
				if (num != 190)
				{
					switch (num)
					{
					case 197:
					{
						this.match(197);
						ScalarExpression scalarExpression2 = this.expressionBinaryPri1(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.Add);
						}
						break;
					}
					case 198:
						return scalarExpression;
					case 199:
					{
						this.match(199);
						ScalarExpression scalarExpression2 = this.expressionBinaryPri1(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.Subtract);
						}
						break;
					}
					default:
						switch (num)
						{
						case 209:
						{
							this.match(209);
							ScalarExpression scalarExpression2 = this.expressionBinaryPri1(expressionFlags);
							if (this.inputState.guessing == 0)
							{
								base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.BitwiseXor);
								continue;
							}
							continue;
						}
						case 210:
						{
							this.match(210);
							ScalarExpression scalarExpression2 = this.expressionBinaryPri1(expressionFlags);
							if (this.inputState.guessing == 0)
							{
								base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.BitwiseOr);
								continue;
							}
							continue;
						}
						}
						return scalarExpression;
					}
				}
				else
				{
					this.match(190);
					ScalarExpression scalarExpression2 = this.expressionBinaryPri1(expressionFlags);
					if (this.inputState.guessing == 0)
					{
						base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.BitwiseAnd);
					}
				}
			}
			return scalarExpression;
		}

		// Token: 0x06000EEC RID: 3820 RVA: 0x0007246C File Offset: 0x0007066C
		public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ScalarExpression scalarExpression = null;
			scalarExpression = this.expressionUnary(expressionFlags);
			for (;;)
			{
				int num = this.LA(1);
				if (num != 189)
				{
					if (num != 195)
					{
						if (num != 201)
						{
							break;
						}
						this.match(201);
						ScalarExpression scalarExpression2 = this.expressionUnary(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.Divide);
						}
					}
					else
					{
						this.match(195);
						ScalarExpression scalarExpression2 = this.expressionUnary(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.Multiply);
						}
					}
				}
				else
				{
					this.match(189);
					ScalarExpression scalarExpression2 = this.expressionUnary(expressionFlags);
					if (this.inputState.guessing == 0)
					{
						base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.Modulo);
					}
				}
			}
			return scalarExpression;
		}

		// Token: 0x06000EED RID: 3821 RVA: 0x00072534 File Offset: 0x00070734
		public ScalarExpression expressionUnary(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ScalarExpression scalarExpression = null;
			UnaryExpression unaryExpression = null;
			int num = this.LA(1);
			if (num <= 133)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_02EF;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_02EF;
						}
					}
				}
				else if (num <= 93)
				{
					if (num != 81 && num != 93)
					{
						goto IL_02EF;
					}
				}
				else
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_02EF;
						}
						break;
					}
				}
			}
			else if (num <= 163)
			{
				if (num <= 141)
				{
					if (num != 136 && num != 141)
					{
						goto IL_02EF;
					}
				}
				else if (num != 147 && num != 163)
				{
					goto IL_02EF;
				}
			}
			else if (num <= 193)
			{
				if (num != 187)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_02EF;
					default:
						goto IL_02EF;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
					break;
				case 198:
					goto IL_02EF;
				case 200:
					goto IL_02E5;
				default:
					switch (num)
					{
					case 211:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_02EF;
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_02E5;
					default:
						goto IL_02EF;
					}
					break;
				}
				int num2 = this.LA(1);
				switch (num2)
				{
				case 197:
				{
					IToken token = this.LT(1);
					this.match(197);
					if (this.inputState.guessing == 0)
					{
						unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
						TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
						unaryExpression.UnaryExpressionType = UnaryExpressionType.Positive;
						goto IL_02C1;
					}
					goto IL_02C1;
				}
				case 198:
					break;
				case 199:
				{
					IToken token2 = this.LT(1);
					this.match(199);
					if (this.inputState.guessing == 0)
					{
						unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
						TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token2);
						unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
						goto IL_02C1;
					}
					goto IL_02C1;
				}
				default:
					if (num2 == 211)
					{
						IToken token3 = this.LT(1);
						this.match(211);
						if (this.inputState.guessing == 0)
						{
							unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
							TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token3);
							unaryExpression.UnaryExpressionType = UnaryExpressionType.BitwiseNot;
							goto IL_02C1;
						}
						goto IL_02C1;
					}
					break;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_02C1:
				ScalarExpression scalarExpression2 = this.expressionUnary(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					scalarExpression = unaryExpression;
					unaryExpression.Expression = scalarExpression2;
					return scalarExpression;
				}
				return scalarExpression;
			}
			IL_02E5:
			return this.expressionWithClrElements(expressionFlags);
			IL_02EF:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000EEE RID: 3822 RVA: 0x00072844 File Offset: 0x00070A44
		public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ExpressionCallTarget expressionCallTarget = null;
			bool flag = false;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql110ParserInternal.tokenSet_171_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.schemaObjectTwoPartName();
					this.match(203);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			PrimaryExpression primaryExpression;
			if (flag)
			{
				primaryExpression = this.udtExpression();
			}
			else
			{
				if (!TSql110ParserInternal.tokenSet_172_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_173_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				primaryExpression = this.expressionPrimary(expressionFlags);
			}
			while (this.LA(1) == 200)
			{
				this.match(200);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					expressionCallTarget = base.FragmentFactory.CreateFragment<ExpressionCallTarget>();
					expressionCallTarget.Expression = primaryExpression;
				}
				bool flag2 = false;
				if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_123_.member(this.LA(2)))
				{
					int num2 = this.mark();
					flag2 = true;
					this.inputState.guessing++;
					try
					{
						this.match(191);
					}
					catch (RecognitionException)
					{
						flag2 = false;
					}
					this.rewind(num2);
					this.inputState.guessing--;
				}
				if (flag2)
				{
					FunctionCall functionCall = this.expressionWithClrElementsFunctionCallPart();
					if (this.inputState.guessing == 0)
					{
						functionCall.CallTarget = expressionCallTarget;
						functionCall.FunctionName = identifier;
						primaryExpression = functionCall;
					}
				}
				else
				{
					if (!TSql110ParserInternal.tokenSet_174_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.inputState.guessing == 0)
					{
						UserDefinedTypePropertyAccess userDefinedTypePropertyAccess = base.FragmentFactory.CreateFragment<UserDefinedTypePropertyAccess>();
						userDefinedTypePropertyAccess.CallTarget = expressionCallTarget;
						userDefinedTypePropertyAccess.PropertyName = identifier;
						primaryExpression = userDefinedTypePropertyAccess;
					}
					this.collationOpt(primaryExpression);
				}
			}
			return primaryExpression;
		}

		// Token: 0x06000EEF RID: 3823 RVA: 0x00072AAC File Offset: 0x00070CAC
		public PrimaryExpression udtExpression()
		{
			UserDefinedTypeCallTarget userDefinedTypeCallTarget = this.userDefinedTypeCallTarget();
			bool flag = false;
			if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 191)
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.identifier();
					this.match(191);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			PrimaryExpression primaryExpression;
			if (flag)
			{
				primaryExpression = this.udtFunctionExpression(userDefinedTypeCallTarget);
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || !TSql110ParserInternal.tokenSet_174_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				primaryExpression = this.udtPropertyExpression(userDefinedTypeCallTarget);
			}
			return primaryExpression;
		}

		// Token: 0x06000EF0 RID: 3824 RVA: 0x00072BA8 File Offset: 0x00070DA8
		public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			PrimaryExpression primaryExpression = null;
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num == 20)
					{
						primaryExpression = this.caseExpression(expressionFlags);
						goto IL_0478;
					}
					if (num == 25)
					{
						primaryExpression = this.coalesceExpression(expressionFlags);
						goto IL_0478;
					}
					if (num != 34)
					{
						goto IL_0127;
					}
					primaryExpression = this.convertCall();
					goto IL_0478;
				}
				else
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num == 93)
						{
							primaryExpression = this.leftFunctionCall();
							goto IL_0478;
						}
						if (num != 101)
						{
							goto IL_0127;
						}
						primaryExpression = this.nullIfExpression(expressionFlags);
						goto IL_0478;
					}
				}
			}
			else if (num <= 147)
			{
				if (num == 133)
				{
					primaryExpression = this.rightFunctionCall();
					goto IL_0478;
				}
				if (num != 141 && num != 147)
				{
					goto IL_0127;
				}
			}
			else if (num <= 187)
			{
				if (num != 163)
				{
					if (num != 187)
					{
						goto IL_0127;
					}
					primaryExpression = this.tryConvertCall();
					goto IL_0478;
				}
			}
			else
			{
				if (num == 191)
				{
					primaryExpression = this.parenthesisDisambiguatorForExpressions(expressionFlags);
					goto IL_0478;
				}
				if (num == 235)
				{
					this.odbcInitiator();
					goto IL_0478;
				}
				goto IL_0127;
			}
			primaryExpression = this.parameterlessCall();
			goto IL_0478;
			IL_0127:
			if (this.LA(1) == 193 && this.LA(2) == 232 && this.LA(1) == 193 && base.NextTokenMatches("FN", 2))
			{
				primaryExpression = this.odbcFunctionCall();
			}
			else if (TSql110ParserInternal.tokenSet_175_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_174_.member(this.LA(2)))
			{
				primaryExpression = this.literal();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CAST") && this.LA(2) == 191)
			{
				primaryExpression = this.castCall();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("TRY_CAST") && this.LA(2) == 191)
			{
				primaryExpression = this.tryCastCall();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("PARSE") && this.LA(2) == 191)
			{
				primaryExpression = this.parseCall();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("TRY_PARSE") && this.LA(2) == 191)
			{
				primaryExpression = this.tryParseCall();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("IIF") && this.LA(2) == 191)
			{
				primaryExpression = this.iIfCall();
			}
			else
			{
				bool flag = false;
				if (this.LA(1) == 232 && this.LA(2) == 191)
				{
					int num2 = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.match(232);
						this.match(191);
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(num2);
					this.inputState.guessing--;
				}
				if (flag)
				{
					primaryExpression = this.builtInFunctionCall();
				}
				else if ((this.LA(1) == 228 || this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 200 && (((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 200 && this.LA(3) == 228) || this.LA(1) == 228))
				{
					primaryExpression = this.partitionFunctionCall();
				}
				else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("NEXT") && base.NextTokenMatches("VALUE", 2))
				{
					primaryExpression = this.nextValueForCall();
				}
				else
				{
					if (!TSql110ParserInternal.tokenSet_33_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_174_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					primaryExpression = this.columnOrFunctionCall();
				}
			}
			IL_0478:
			this.collationOpt(primaryExpression);
			return primaryExpression;
		}

		// Token: 0x06000EF1 RID: 3825 RVA: 0x00073048 File Offset: 0x00071248
		public FunctionCall expressionWithClrElementsFunctionCallPart()
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			return functionCall;
		}

		// Token: 0x06000EF2 RID: 3826 RVA: 0x00073070 File Offset: 0x00071270
		public CastCall castCall()
		{
			CastCall castCall = base.FragmentFactory.CreateFragment<CastCall>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(9);
			DataTypeReference dataTypeReference = this.scalarDataType();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CAST");
				TSql80ParserBaseInternal.UpdateTokenInfo(castCall, token);
				castCall.DataType = dataTypeReference;
				castCall.Parameter = scalarExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(castCall, token2);
			}
			return castCall;
		}

		// Token: 0x06000EF3 RID: 3827 RVA: 0x0007310C File Offset: 0x0007130C
		public TryCastCall tryCastCall()
		{
			TryCastCall tryCastCall = base.FragmentFactory.CreateFragment<TryCastCall>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(9);
			DataTypeReference dataTypeReference = this.scalarDataType();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TRY_CAST");
				TSql80ParserBaseInternal.UpdateTokenInfo(tryCastCall, token);
				tryCastCall.DataType = dataTypeReference;
				tryCastCall.Parameter = scalarExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(tryCastCall, token2);
			}
			return tryCastCall;
		}

		// Token: 0x06000EF4 RID: 3828 RVA: 0x000731A8 File Offset: 0x000713A8
		public ParseCall parseCall()
		{
			ParseCall parseCall = base.FragmentFactory.CreateFragment<ParseCall>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(9);
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARSE");
				TSql80ParserBaseInternal.UpdateTokenInfo(parseCall, token);
				parseCall.StringValue = scalarExpression;
				parseCall.DataType = dataTypeReference;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "USING");
				}
				ScalarExpression scalarExpression2 = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					parseCall.Culture = scalarExpression2;
				}
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(parseCall, token3);
			}
			return parseCall;
		}

		// Token: 0x06000EF5 RID: 3829 RVA: 0x000732D0 File Offset: 0x000714D0
		public TryParseCall tryParseCall()
		{
			TryParseCall tryParseCall = base.FragmentFactory.CreateFragment<TryParseCall>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(9);
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TRY_PARSE");
				TSql80ParserBaseInternal.UpdateTokenInfo(tryParseCall, token);
				tryParseCall.StringValue = scalarExpression;
				tryParseCall.DataType = dataTypeReference;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "USING");
				}
				ScalarExpression scalarExpression2 = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					tryParseCall.Culture = scalarExpression2;
				}
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tryParseCall, token3);
			}
			return tryParseCall;
		}

		// Token: 0x06000EF6 RID: 3830 RVA: 0x000733F8 File Offset: 0x000715F8
		public IIfCall iIfCall()
		{
			IIfCall ifCall = base.FragmentFactory.CreateFragment<IIfCall>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "IIF");
				TSql80ParserBaseInternal.UpdateTokenInfo(ifCall, token);
			}
			this.match(191);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				ifCall.Predicate = booleanExpression;
			}
			this.match(198);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				ifCall.ThenExpression = scalarExpression;
			}
			this.match(198);
			ScalarExpression scalarExpression2 = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				ifCall.ElseExpression = scalarExpression2;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(ifCall, token2);
			}
			return ifCall;
		}

		// Token: 0x06000EF7 RID: 3831 RVA: 0x000734F0 File Offset: 0x000716F0
		public FunctionCall builtInFunctionCall()
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			Identifier identifier = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				functionCall.FunctionName = identifier;
			}
			this.match(191);
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num != 20)
							{
								goto IL_01E1;
							}
							goto IL_01CF;
						}
					}
					else
					{
						if (num != 25 && num != 34)
						{
							goto IL_01E1;
						}
						goto IL_01CF;
					}
				}
				else if (num <= 51)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_01CF;
					default:
						if (num != 51)
						{
							goto IL_01E1;
						}
						break;
					}
				}
				else
				{
					if (num != 81 && num != 93)
					{
						goto IL_01E1;
					}
					goto IL_01CF;
				}
				this.aggregateBuiltInFunctionCall(functionCall);
				return functionCall;
			}
			if (num <= 141)
			{
				if (num <= 133)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_01E1;
						}
						break;
					}
				}
				else if (num != 136 && num != 141)
				{
					goto IL_01E1;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_01E1;
				}
			}
			else
			{
				switch (num)
				{
				case 187:
				case 191:
				case 192:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					break;
				case 188:
				case 189:
				case 190:
				case 194:
				case 196:
				case 198:
					goto IL_01E1;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_01E1;
					default:
						goto IL_01E1;
					}
					break;
				}
			}
			IL_01CF:
			this.regularBuiltInFunctionCall(functionCall);
			return functionCall;
			IL_01E1:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000EF8 RID: 3832 RVA: 0x000736F4 File Offset: 0x000718F4
		public LeftFunctionCall leftFunctionCall()
		{
			LeftFunctionCall leftFunctionCall = base.FragmentFactory.CreateFragment<LeftFunctionCall>();
			IToken token = this.LT(1);
			this.match(93);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(leftFunctionCall, token);
			}
			this.reservedBuiltInFunctionCallParameters(leftFunctionCall, leftFunctionCall.Parameters);
			return leftFunctionCall;
		}

		// Token: 0x06000EF9 RID: 3833 RVA: 0x00073744 File Offset: 0x00071944
		public RightFunctionCall rightFunctionCall()
		{
			RightFunctionCall rightFunctionCall = base.FragmentFactory.CreateFragment<RightFunctionCall>();
			IToken token = this.LT(1);
			this.match(133);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rightFunctionCall, token);
			}
			this.reservedBuiltInFunctionCallParameters(rightFunctionCall, rightFunctionCall.Parameters);
			return rightFunctionCall;
		}

		// Token: 0x06000EFA RID: 3834 RVA: 0x00073794 File Offset: 0x00071994
		public PartitionFunctionCall partitionFunctionCall()
		{
			PartitionFunctionCall partitionFunctionCall = base.FragmentFactory.CreateFragment<PartitionFunctionCall>();
			int num = this.LA(1);
			Identifier identifier;
			if (num != 228)
			{
				switch (num)
				{
				case 232:
				case 233:
					identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						partitionFunctionCall.DatabaseName = identifier;
					}
					this.match(200);
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			IToken token = this.LT(1);
			this.match(228);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(partitionFunctionCall, token);
			}
			this.match(200);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				partitionFunctionCall.FunctionName = identifier;
			}
			this.match(191);
			this.expressionList(partitionFunctionCall, partitionFunctionCall.Parameters);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(partitionFunctionCall, token2);
			}
			return partitionFunctionCall;
		}

		// Token: 0x06000EFB RID: 3835 RVA: 0x000738A4 File Offset: 0x00071AA4
		public NextValueForExpression nextValueForCall()
		{
			NextValueForExpression nextValueForExpression = base.FragmentFactory.CreateFragment<NextValueForExpression>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			this.LT(1);
			this.match(67);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NEXT");
				TSql80ParserBaseInternal.Match(token2, "VALUE");
				TSql80ParserBaseInternal.UpdateTokenInfo(nextValueForExpression, token);
				nextValueForExpression.SequenceName = schemaObjectName;
			}
			switch (this.LA(1))
			{
			case 1:
			case 4:
			case 6:
			case 7:
			case 9:
			case 10:
			case 12:
			case 13:
			case 14:
			case 15:
			case 17:
			case 21:
			case 22:
			case 23:
			case 26:
			case 28:
			case 30:
			case 33:
			case 35:
			case 36:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case 49:
			case 50:
			case 54:
			case 55:
			case 56:
			case 58:
			case 59:
			case 60:
			case 61:
			case 64:
			case 67:
			case 68:
			case 71:
			case 72:
			case 74:
			case 75:
			case 76:
			case 77:
			case 79:
			case 82:
			case 83:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 92:
			case 93:
			case 94:
			case 95:
			case 99:
			case 100:
			case 105:
			case 106:
			case 111:
			case 112:
			case 113:
			case 114:
			case 116:
			case 118:
			case 119:
			case 123:
			case 125:
			case 126:
			case 127:
			case 129:
			case 131:
			case 132:
			case 133:
			case 134:
			case 136:
			case 138:
			case 140:
			case 142:
			case 143:
			case 144:
			case 150:
			case 151:
			case 156:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 164:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 176:
			case 177:
			case 178:
			case 182:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 204:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 219:
			case 220:
			case 230:
			case 231:
			case 232:
			case 233:
				return nextValueForExpression;
			case 115:
			{
				OverClause overClause = this.overClause();
				if (this.inputState.guessing == 0)
				{
					nextValueForExpression.OverClause = overClause;
					return nextValueForExpression;
				}
				return nextValueForExpression;
			}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000EFC RID: 3836 RVA: 0x00073D1C File Offset: 0x00071F1C
		public PrimaryExpression columnOrFunctionCall()
		{
			PrimaryExpression primaryExpression = null;
			MultiPartIdentifier multiPartIdentifier = null;
			ColumnReferenceExpression columnReferenceExpression = null;
			int num = this.LA(1);
			if (num <= 136)
			{
				if (num != 81 && num != 136)
				{
					goto IL_014D;
				}
			}
			else
			{
				if (num != 200)
				{
					if (num == 227)
					{
						goto IL_012B;
					}
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_014D;
					}
				}
				multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.LA(1) == 200 && (this.LA(2) == 81 || this.LA(2) == 136 || this.LA(2) == 227))
				{
					if (this.inputState.guessing == 0)
					{
						columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
					}
					this.match(200);
					this.specialColumn(columnReferenceExpression);
					goto IL_0160;
				}
				if (this.LA(1) == 191 && TSql110ParserInternal.tokenSet_176_.member(this.LA(2)))
				{
					primaryExpression = this.userFunctionCall(multiPartIdentifier);
					goto IL_0160;
				}
				if (!TSql110ParserInternal.tokenSet_174_.member(this.LA(1)) || !TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				goto IL_0160;
			}
			IL_012B:
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			}
			this.specialColumn(columnReferenceExpression);
			goto IL_0160;
			IL_014D:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0160:
			if (this.inputState.guessing == 0 && (primaryExpression == null || primaryExpression is ColumnReferenceExpression))
			{
				if (columnReferenceExpression == null)
				{
					columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
				}
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
				primaryExpression = columnReferenceExpression;
			}
			return primaryExpression;
		}

		// Token: 0x06000EFD RID: 3837 RVA: 0x00073EC8 File Offset: 0x000720C8
		public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			NullIfExpression nullIfExpression = base.FragmentFactory.CreateFragment<NullIfExpression>();
			IToken token = this.LT(1);
			this.match(101);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(nullIfExpression, token);
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				nullIfExpression.FirstExpression = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				nullIfExpression.SecondExpression = scalarExpression;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(nullIfExpression, token2);
			}
			return nullIfExpression;
		}

		// Token: 0x06000EFE RID: 3838 RVA: 0x00073F80 File Offset: 0x00072180
		public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			CoalesceExpression coalesceExpression = base.FragmentFactory.CreateFragment<CoalesceExpression>();
			IToken token = this.LT(1);
			this.match(25);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(coalesceExpression, token);
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(coalesceExpression, coalesceExpression.Expressions, scalarExpression);
			}
			int num = 0;
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expression(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(coalesceExpression, coalesceExpression.Expressions, scalarExpression);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(coalesceExpression, token2);
			}
			return coalesceExpression;
		}

		// Token: 0x06000EFF RID: 3839 RVA: 0x00074078 File Offset: 0x00072278
		public CaseExpression caseExpression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			IToken token = this.LT(1);
			this.match(20);
			int num = this.LA(1);
			CaseExpression caseExpression;
			if (num <= 133)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_01E6;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_01E6;
						}
					}
				}
				else if (num <= 93)
				{
					if (num != 81 && num != 93)
					{
						goto IL_01E6;
					}
				}
				else
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_01E6;
						}
						break;
					}
				}
			}
			else if (num <= 163)
			{
				if (num <= 141)
				{
					if (num != 136 && num != 141)
					{
						goto IL_01E6;
					}
				}
				else if (num != 147 && num != 163)
				{
					goto IL_01E6;
				}
			}
			else if (num <= 187)
			{
				if (num == 168)
				{
					caseExpression = this.searchedCaseExpression(expressionFlags);
					goto IL_01F9;
				}
				if (num != 187)
				{
					goto IL_01E6;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
					break;
				case 192:
					goto IL_01E6;
				default:
					switch (num)
					{
					case 197:
					case 199:
					case 200:
						break;
					case 198:
						goto IL_01E6;
					default:
						switch (num)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							break;
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 226:
						case 229:
							goto IL_01E6;
						default:
							goto IL_01E6;
						}
						break;
					}
					break;
				}
			}
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			caseExpression = this.simpleCaseExpression(scalarExpression, expressionFlags);
			goto IL_01F9;
			IL_01E6:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_01F9:
			switch (this.LA(1))
			{
			case 55:
				this.match(55);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					caseExpression.ElseExpression = scalarExpression;
				}
				break;
			case 56:
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(56);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(caseExpression, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(caseExpression, token2);
			}
			return caseExpression;
		}

		// Token: 0x06000F00 RID: 3840 RVA: 0x00074300 File Offset: 0x00072500
		public ConvertCall convertCall()
		{
			ConvertCall convertCall = base.FragmentFactory.CreateFragment<ConvertCall>();
			IToken token = this.LT(1);
			this.match(34);
			this.match(191);
			DataTypeReference dataTypeReference = this.scalarDataType();
			this.match(198);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(convertCall, token);
				convertCall.DataType = dataTypeReference;
				convertCall.Parameter = scalarExpression;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					convertCall.Style = scalarExpression;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(convertCall, token2);
			}
			return convertCall;
		}

		// Token: 0x06000F01 RID: 3841 RVA: 0x000743F8 File Offset: 0x000725F8
		public TryConvertCall tryConvertCall()
		{
			TryConvertCall tryConvertCall = base.FragmentFactory.CreateFragment<TryConvertCall>();
			IToken token = this.LT(1);
			this.match(187);
			this.match(191);
			DataTypeReference dataTypeReference = this.scalarDataType();
			this.match(198);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tryConvertCall, token);
				tryConvertCall.DataType = dataTypeReference;
				tryConvertCall.Parameter = scalarExpression;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					tryConvertCall.Style = scalarExpression;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tryConvertCall, token2);
			}
			return tryConvertCall;
		}

		// Token: 0x06000F02 RID: 3842 RVA: 0x000744F4 File Offset: 0x000726F4
		public ParameterlessCall parameterlessCall()
		{
			ParameterlessCall parameterlessCall = base.FragmentFactory.CreateFragment<ParameterlessCall>();
			int num = this.LA(1);
			if (num <= 141)
			{
				switch (num)
				{
				case 40:
				{
					IToken token = this.LT(1);
					this.match(40);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token);
						parameterlessCall.ParameterlessCallType = ParameterlessCallType.CurrentTimestamp;
						return parameterlessCall;
					}
					return parameterlessCall;
				}
				case 41:
				{
					IToken token2 = this.LT(1);
					this.match(41);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token2);
						parameterlessCall.ParameterlessCallType = ParameterlessCallType.CurrentUser;
						return parameterlessCall;
					}
					return parameterlessCall;
				}
				default:
					if (num == 141)
					{
						IToken token3 = this.LT(1);
						this.match(141);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token3);
							parameterlessCall.ParameterlessCallType = ParameterlessCallType.SessionUser;
							return parameterlessCall;
						}
						return parameterlessCall;
					}
					break;
				}
			}
			else if (num != 147)
			{
				if (num == 163)
				{
					IToken token4 = this.LT(1);
					this.match(163);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token4);
						parameterlessCall.ParameterlessCallType = ParameterlessCallType.User;
						return parameterlessCall;
					}
					return parameterlessCall;
				}
			}
			else
			{
				IToken token5 = this.LT(1);
				this.match(147);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token5);
					parameterlessCall.ParameterlessCallType = ParameterlessCallType.SystemUser;
					return parameterlessCall;
				}
				return parameterlessCall;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000F03 RID: 3843 RVA: 0x00074678 File Offset: 0x00072878
		public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ParenthesisExpression parenthesisExpression = base.FragmentFactory.CreateFragment<ParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token);
				parenthesisExpression.Expression = scalarExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token2);
			}
			return parenthesisExpression;
		}

		// Token: 0x06000F04 RID: 3844 RVA: 0x000746E8 File Offset: 0x000728E8
		public UserDefinedTypeCallTarget userDefinedTypeCallTarget()
		{
			UserDefinedTypeCallTarget userDefinedTypeCallTarget = base.FragmentFactory.CreateFragment<UserDefinedTypeCallTarget>();
			SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
			IToken token = this.LT(1);
			this.match(203);
			if (this.inputState.guessing == 0)
			{
				userDefinedTypeCallTarget.SchemaObjectName = schemaObjectName;
				TSql80ParserBaseInternal.UpdateTokenInfo(userDefinedTypeCallTarget, token);
			}
			return userDefinedTypeCallTarget;
		}

		// Token: 0x06000F05 RID: 3845 RVA: 0x0007473C File Offset: 0x0007293C
		public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget)
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				functionCall.CallTarget = vCallTarget;
				functionCall.FunctionName = identifier;
			}
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			return functionCall;
		}

		// Token: 0x06000F06 RID: 3846 RVA: 0x00074788 File Offset: 0x00072988
		public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget)
		{
			UserDefinedTypePropertyAccess userDefinedTypePropertyAccess = base.FragmentFactory.CreateFragment<UserDefinedTypePropertyAccess>();
			Identifier identifier = this.identifier();
			this.collationOpt(userDefinedTypePropertyAccess);
			if (this.inputState.guessing == 0)
			{
				userDefinedTypePropertyAccess.CallTarget = vCallTarget;
				userDefinedTypePropertyAccess.PropertyName = identifier;
			}
			return userDefinedTypePropertyAccess;
		}

		// Token: 0x06000F07 RID: 3847 RVA: 0x000747CC File Offset: 0x000729CC
		public FunctionCall basicFunctionCall()
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				functionCall.FunctionName = identifier;
			}
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			return functionCall;
		}

		// Token: 0x06000F08 RID: 3848 RVA: 0x00074810 File Offset: 0x00072A10
		public OverClause overClause()
		{
			OverClause overClause = this.overClauseBeginning();
			int num = this.LA(1);
			if (num != 113)
			{
				if (num != 192)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				OrderByClause orderByClause = this.orderByClause();
				if (this.inputState.guessing == 0)
				{
					overClause.OrderByClause = orderByClause;
				}
				int num2 = this.LA(1);
				if (num2 != 192)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					WindowFrameClause windowFrameClause = this.windowFrameClause();
					if (this.inputState.guessing == 0)
					{
						TSql110ParserBaseInternal.CheckWindowFrame(windowFrameClause);
						overClause.WindowFrameClause = windowFrameClause;
					}
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
			}
			return overClause;
		}

		// Token: 0x06000F09 RID: 3849 RVA: 0x000748EC File Offset: 0x00072AEC
		public OverClause overClauseBeginning()
		{
			OverClause overClause = base.FragmentFactory.CreateFragment<OverClause>();
			IToken token = this.LT(1);
			this.match(115);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
			}
			this.match(191);
			int num = this.LA(1);
			if (num != 113 && num != 192)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "PARTITION");
				}
				this.match(18);
				this.expressionList(overClause, overClause.Partitions);
			}
			return overClause;
		}

		// Token: 0x06000F0A RID: 3850 RVA: 0x000749AC File Offset: 0x00072BAC
		public WindowFrameClause windowFrameClause()
		{
			WindowFrameClause windowFrameClause = base.FragmentFactory.CreateFragment<WindowFrameClause>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROWS", "RANGE");
				if (TSql80ParserBaseInternal.TryMatch(token, "ROWS"))
				{
					windowFrameClause.WindowFrameType = WindowFrameType.Rows;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "RANGE");
					windowFrameClause.WindowFrameType = WindowFrameType.Range;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(windowFrameClause, token);
			}
			this.windowFrameExtent(windowFrameClause);
			return windowFrameClause;
		}

		// Token: 0x06000F0B RID: 3851 RVA: 0x00074A30 File Offset: 0x00072C30
		public OverClause overClauseNoOrderBy()
		{
			OverClause overClause = this.overClauseBeginning();
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
			}
			return overClause;
		}

		// Token: 0x06000F0C RID: 3852 RVA: 0x00074A70 File Offset: 0x00072C70
		public void windowFrameExtent(WindowFrameClause vParent)
		{
			int num = this.LA(1);
			WindowDelimiter windowDelimiter;
			if (num <= 37)
			{
				if (num != 14)
				{
					if (num != 37)
					{
						goto IL_0091;
					}
				}
				else
				{
					IToken token = this.LT(1);
					this.match(14);
					windowDelimiter = this.windowFrameDelimiter();
					this.match(7);
					WindowDelimiter windowDelimiter2 = this.windowFrameDelimiter();
					if (this.inputState.guessing == 0)
					{
						vParent.Top = windowDelimiter;
						vParent.Bottom = windowDelimiter2;
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
						return;
					}
					return;
				}
			}
			else if (num != 221 && num != 232)
			{
				goto IL_0091;
			}
			windowDelimiter = this.windowFrameDelimiter();
			if (this.inputState.guessing == 0)
			{
				vParent.Top = windowDelimiter;
				return;
			}
			return;
			IL_0091:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000F0D RID: 3853 RVA: 0x00074B24 File Offset: 0x00072D24
		public WindowDelimiter windowFrameDelimiter()
		{
			WindowDelimiter windowDelimiter = base.FragmentFactory.CreateFragment<WindowDelimiter>();
			int num = this.LA(1);
			if (num != 37)
			{
				if (num != 221)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "UNBOUNDED");
						TSql80ParserBaseInternal.Match(token2, "PRECEDING", "FOLLOWING");
						if (TSql80ParserBaseInternal.TryMatch(token2, "PRECEDING"))
						{
							windowDelimiter.WindowDelimiterType = WindowDelimiterType.UnboundedPreceding;
						}
						else
						{
							TSql80ParserBaseInternal.Match(token2, "FOLLOWING");
							windowDelimiter.WindowDelimiterType = WindowDelimiterType.UnboundedFollowing;
						}
						TSql80ParserBaseInternal.UpdateTokenInfo(windowDelimiter, token);
						TSql80ParserBaseInternal.UpdateTokenInfo(windowDelimiter, token2);
					}
				}
				else
				{
					Literal literal = this.integer();
					IToken token3 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "PRECEDING", "FOLLOWING");
						if (TSql80ParserBaseInternal.TryMatch(token3, "PRECEDING"))
						{
							windowDelimiter.WindowDelimiterType = WindowDelimiterType.ValuePreceding;
						}
						else
						{
							TSql80ParserBaseInternal.Match(token3, "FOLLOWING");
							windowDelimiter.WindowDelimiterType = WindowDelimiterType.ValueFollowing;
						}
						windowDelimiter.OffsetValue = literal;
						TSql80ParserBaseInternal.UpdateTokenInfo(windowDelimiter, token3);
					}
				}
			}
			else
			{
				IToken token4 = this.LT(1);
				this.match(37);
				this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					windowDelimiter.WindowDelimiterType = WindowDelimiterType.CurrentRow;
					TSql80ParserBaseInternal.UpdateTokenInfo(windowDelimiter, token4);
				}
			}
			return windowDelimiter;
		}

		// Token: 0x06000F0E RID: 3854 RVA: 0x00074CCC File Offset: 0x00072ECC
		public WithinGroupClause withinGroupClause()
		{
			WithinGroupClause withinGroupClause = base.FragmentFactory.CreateFragment<WithinGroupClause>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(76);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "WITHIN");
				TSql80ParserBaseInternal.UpdateTokenInfo(withinGroupClause, token);
			}
			IToken token2 = this.LT(1);
			this.match(191);
			OrderByClause orderByClause = this.orderByClause();
			if (this.inputState.guessing == 0)
			{
				withinGroupClause.OrderByClause = orderByClause;
				TSql80ParserBaseInternal.UpdateTokenInfo(withinGroupClause, token2);
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(withinGroupClause, token3);
			}
			return withinGroupClause;
		}

		// Token: 0x06000F0F RID: 3855 RVA: 0x00074D84 File Offset: 0x00072F84
		public void regularBuiltInFunctionCall(FunctionCall vParent)
		{
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_01AB;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_01AB;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_01AB;
					}
				}
			}
			else if (num <= 141)
			{
				if (num != 133 && num != 136 && num != 141)
				{
					goto IL_01AB;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_01AB;
				}
			}
			else
			{
				switch (num)
				{
				case 187:
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 188:
				case 189:
				case 190:
				case 194:
				case 196:
				case 198:
					goto IL_01AB;
				case 192:
					goto IL_01BE;
				case 195:
				{
					ColumnReferenceExpression columnReferenceExpression = this.starColumnReferenceExpression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.Parameters, columnReferenceExpression);
						goto IL_01BE;
					}
					goto IL_01BE;
				}
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_01AB;
					default:
						goto IL_01AB;
					}
					break;
				}
			}
			this.expressionList(vParent, vParent.Parameters);
			goto IL_01BE;
			IL_01AB:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_01BE:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			if ((this.LA(1) == 115 || this.LA(1) == 232) && (this.LA(2) == 76 || this.LA(2) == 191) && ((this.LA(1) == 115 && this.LA(2) == 191) || (base.NextTokenMatches("WITHIN") && this.LA(2) == 76 && this.LA(3) == 191)))
			{
				this.withinGroupOrOverClause(vParent);
				return;
			}
			if (TSql110ParserInternal.tokenSet_174_.member(this.LA(1)) && TSql110ParserInternal.tokenSet_94_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000F10 RID: 3856 RVA: 0x00075028 File Offset: 0x00073228
		public void aggregateBuiltInFunctionCall(FunctionCall vParent)
		{
			IToken token = null;
			UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out token);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				vParent.UniqueRowFilter = uniqueRowFilter;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.Parameters, scalarExpression);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			switch (this.LA(1))
			{
			case 1:
			case 4:
			case 6:
			case 7:
			case 9:
			case 10:
			case 12:
			case 13:
			case 14:
			case 15:
			case 17:
			case 21:
			case 22:
			case 23:
			case 26:
			case 28:
			case 30:
			case 33:
			case 35:
			case 36:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case 49:
			case 50:
			case 54:
			case 55:
			case 56:
			case 58:
			case 59:
			case 60:
			case 61:
			case 64:
			case 67:
			case 68:
			case 71:
			case 72:
			case 74:
			case 75:
			case 76:
			case 77:
			case 79:
			case 82:
			case 83:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 92:
			case 93:
			case 94:
			case 95:
			case 99:
			case 100:
			case 105:
			case 106:
			case 111:
			case 112:
			case 113:
			case 114:
			case 116:
			case 118:
			case 119:
			case 123:
			case 125:
			case 126:
			case 127:
			case 129:
			case 131:
			case 132:
			case 133:
			case 134:
			case 136:
			case 138:
			case 140:
			case 142:
			case 143:
			case 144:
			case 150:
			case 151:
			case 156:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 164:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 176:
			case 177:
			case 178:
			case 182:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 204:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 219:
			case 220:
			case 230:
			case 231:
			case 232:
			case 233:
				return;
			case 115:
			{
				OverClause overClause = this.overClauseNoOrderBy();
				if (this.inputState.guessing == 0)
				{
					vParent.OverClause = overClause;
					TSql90ParserBaseInternal.CheckForDistinctInWindowedAggregate(vParent, token);
					return;
				}
				return;
			}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000F11 RID: 3857 RVA: 0x00075478 File Offset: 0x00073678
		public void withinGroupOrOverClause(FunctionCall vParent)
		{
			int num = this.LA(1);
			if (num != 115)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				WithinGroupClause withinGroupClause = this.withinGroupClause();
				OverClause overClause = this.overClauseNoOrderBy();
				if (this.inputState.guessing == 0)
				{
					vParent.WithinGroupClause = withinGroupClause;
					vParent.OverClause = overClause;
					return;
				}
			}
			else
			{
				OverClause overClause = this.overClause();
				if (this.inputState.guessing == 0)
				{
					vParent.OverClause = overClause;
					return;
				}
			}
		}

		// Token: 0x06000F12 RID: 3858 RVA: 0x000754F4 File Offset: 0x000736F4
		public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList<ScalarExpression> parameters)
		{
			this.match(191);
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_019B;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_019B;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_019B;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_019B;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_019B;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 187:
					case 191:
					case 193:
						break;
					case 188:
					case 189:
					case 190:
						goto IL_019B;
					case 192:
						goto IL_01AE;
					default:
						goto IL_019B;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_019B;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_019B;
					default:
						goto IL_019B;
					}
					break;
				}
			}
			this.expressionList(vParent, parameters);
			goto IL_01AE;
			IL_019B:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_01AE:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06000F13 RID: 3859 RVA: 0x000756D8 File Offset: 0x000738D8
		public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			SimpleWhenClause simpleWhenClause = base.FragmentFactory.CreateFragment<SimpleWhenClause>();
			IToken token = this.LT(1);
			this.match(168);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleWhenClause, token);
			}
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				simpleWhenClause.WhenExpression = scalarExpression;
			}
			this.match(150);
			scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				simpleWhenClause.ThenExpression = scalarExpression;
			}
			return simpleWhenClause;
		}

		// Token: 0x06000F14 RID: 3860 RVA: 0x00075760 File Offset: 0x00073960
		public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			SearchedWhenClause searchedWhenClause = base.FragmentFactory.CreateFragment<SearchedWhenClause>();
			IToken token = this.LT(1);
			this.match(168);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(searchedWhenClause, token);
			}
			BooleanExpression booleanExpression = this.booleanExpression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				searchedWhenClause.WhenExpression = booleanExpression;
			}
			this.match(150);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				searchedWhenClause.ThenExpression = scalarExpression;
			}
			return searchedWhenClause;
		}

		// Token: 0x06000F15 RID: 3861 RVA: 0x000757EC File Offset: 0x000739EC
		public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			SimpleCaseExpression simpleCaseExpression = base.FragmentFactory.CreateFragment<SimpleCaseExpression>();
			simpleCaseExpression.InputExpression = inputExpression;
			int num = 0;
			while (this.LA(1) == 168)
			{
				SimpleWhenClause simpleWhenClause = this.simpleWhenClause(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SimpleWhenClause>(simpleCaseExpression, simpleCaseExpression.WhenClauses, simpleWhenClause);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return simpleCaseExpression;
		}

		// Token: 0x06000F16 RID: 3862 RVA: 0x00075860 File Offset: 0x00073A60
		public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			SearchedCaseExpression searchedCaseExpression = base.FragmentFactory.CreateFragment<SearchedCaseExpression>();
			int num = 0;
			while (this.LA(1) == 168)
			{
				SearchedWhenClause searchedWhenClause = this.searchedWhenClause(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SearchedWhenClause>(searchedCaseExpression, searchedCaseExpression.WhenClauses, searchedWhenClause);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return searchedCaseExpression;
		}

		// Token: 0x06000F17 RID: 3863 RVA: 0x000758CC File Offset: 0x00073ACC
		public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers)
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			IToken token = null;
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				base.PutIdentifiersIntoFunctionCall(functionCall, vIdentifiers);
			}
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num != 20)
							{
								goto IL_03F2;
							}
							goto IL_01F3;
						}
					}
					else
					{
						if (num != 25 && num != 34)
						{
							goto IL_03F2;
						}
						goto IL_01F3;
					}
				}
				else if (num <= 47)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_01F3;
					default:
						if (num != 47)
						{
							goto IL_03F2;
						}
						goto IL_01F3;
					}
				}
				else if (num != 51)
				{
					if (num != 81 && num != 93)
					{
						goto IL_03F2;
					}
					goto IL_01F3;
				}
				UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out token);
				if (this.inputState.guessing == 0)
				{
					functionCall.UniqueRowFilter = uniqueRowFilter;
				}
				this.expressionList(functionCall, functionCall.Parameters);
				goto IL_0405;
			}
			if (num <= 141)
			{
				if (num <= 133)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_03F2;
						}
						break;
					}
				}
				else if (num != 136 && num != 141)
				{
					goto IL_03F2;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_03F2;
				}
			}
			else
			{
				switch (num)
				{
				case 187:
				case 191:
				case 192:
				case 193:
					break;
				case 188:
				case 189:
				case 190:
					goto IL_03F2;
				default:
					switch (num)
					{
					case 197:
					case 199:
					case 200:
						break;
					case 198:
						goto IL_03F2;
					default:
						switch (num)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							break;
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 226:
						case 229:
							goto IL_03F2;
						default:
							goto IL_03F2;
						}
						break;
					}
					break;
				}
			}
			IL_01F3:
			int num2 = this.LA(1);
			if (num2 <= 101)
			{
				if (num2 <= 41)
				{
					if (num2 <= 25)
					{
						if (num2 != 20 && num2 != 25)
						{
							goto IL_03B3;
						}
					}
					else if (num2 != 34)
					{
						switch (num2)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_03B3;
						}
					}
				}
				else if (num2 <= 81)
				{
					if (num2 != 47 && num2 != 81)
					{
						goto IL_03B3;
					}
				}
				else if (num2 != 93)
				{
					switch (num2)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_03B3;
					}
				}
			}
			else if (num2 <= 147)
			{
				if (num2 <= 136)
				{
					if (num2 != 133 && num2 != 136)
					{
						goto IL_03B3;
					}
				}
				else if (num2 != 141 && num2 != 147)
				{
					goto IL_03B3;
				}
			}
			else if (num2 <= 193)
			{
				if (num2 != 163)
				{
					switch (num2)
					{
					case 187:
					case 191:
					case 193:
						break;
					case 188:
					case 189:
					case 190:
						goto IL_03B3;
					case 192:
						goto IL_0405;
					default:
						goto IL_03B3;
					}
				}
			}
			else
			{
				switch (num2)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_03B3;
				default:
					switch (num2)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_03B3;
					default:
						goto IL_03B3;
					}
					break;
				}
			}
			this.expressionWithDefaultList(functionCall, functionCall.Parameters);
			goto IL_0405;
			IL_03B3:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_03F2:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0405:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(functionCall, token2);
			}
			switch (this.LA(1))
			{
			case 1:
			case 4:
			case 6:
			case 7:
			case 9:
			case 10:
			case 12:
			case 13:
			case 14:
			case 15:
			case 17:
			case 21:
			case 22:
			case 23:
			case 26:
			case 28:
			case 30:
			case 33:
			case 35:
			case 36:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case 49:
			case 50:
			case 54:
			case 55:
			case 56:
			case 58:
			case 59:
			case 60:
			case 61:
			case 64:
			case 67:
			case 68:
			case 71:
			case 72:
			case 74:
			case 75:
			case 76:
			case 77:
			case 79:
			case 82:
			case 83:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 92:
			case 93:
			case 94:
			case 95:
			case 99:
			case 100:
			case 105:
			case 106:
			case 111:
			case 112:
			case 113:
			case 114:
			case 116:
			case 118:
			case 119:
			case 123:
			case 125:
			case 126:
			case 127:
			case 129:
			case 131:
			case 132:
			case 133:
			case 134:
			case 136:
			case 138:
			case 140:
			case 142:
			case 143:
			case 144:
			case 150:
			case 151:
			case 156:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 164:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 176:
			case 177:
			case 178:
			case 182:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 204:
			case 205:
			case 206:
			case 208:
			case 209:
			case 210:
			case 219:
			case 220:
			case 230:
			case 231:
			case 232:
			case 233:
				return functionCall;
			case 115:
			{
				OverClause overClause = this.overClauseNoOrderBy();
				if (this.inputState.guessing == 0)
				{
					functionCall.OverClause = overClause;
					TSql90ParserBaseInternal.CheckForDistinctInWindowedAggregate(functionCall, token);
					return functionCall;
				}
				return functionCall;
			}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06000F18 RID: 3864 RVA: 0x000760F8 File Offset: 0x000742F8
		public SchemaObjectNameOrValueExpression objectOrVariable()
		{
			SchemaObjectNameOrValueExpression schemaObjectNameOrValueExpression = base.FragmentFactory.CreateFragment<SchemaObjectNameOrValueExpression>();
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
				{
					VariableReference variableReference = this.variable();
					if (this.inputState.guessing == 0)
					{
						schemaObjectNameOrValueExpression.ValueExpression = variableReference;
						return schemaObjectNameOrValueExpression;
					}
					return schemaObjectNameOrValueExpression;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				schemaObjectNameOrValueExpression.SchemaObjectName = schemaObjectName;
			}
			return schemaObjectNameOrValueExpression;
		}

		// Token: 0x06000F19 RID: 3865 RVA: 0x0007618C File Offset: 0x0007438C
		public MoneyLiteral moneyLiteral()
		{
			MoneyLiteral moneyLiteral = base.FragmentFactory.CreateFragment<MoneyLiteral>();
			IToken token = this.LT(1);
			this.match(225);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(moneyLiteral, token);
				moneyLiteral.Value = token.getText();
			}
			return moneyLiteral;
		}

		// Token: 0x06000F1A RID: 3866 RVA: 0x000761DC File Offset: 0x000743DC
		public ValueExpression globalVariableOrVariableReference()
		{
			ValueExpression valueExpression = null;
			IToken token = this.LT(1);
			this.match(234);
			if (this.inputState.guessing == 0)
			{
				if (token.getText().StartsWith("@@", 4))
				{
					GlobalVariableExpression globalVariableExpression = base.FragmentFactory.CreateFragment<GlobalVariableExpression>();
					globalVariableExpression.Name = token.getText();
					valueExpression = globalVariableExpression;
				}
				else
				{
					VariableReference variableReference = base.FragmentFactory.CreateFragment<VariableReference>();
					variableReference.Name = token.getText();
					valueExpression = variableReference;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(valueExpression, token);
			}
			return valueExpression;
		}

		// Token: 0x06000F1B RID: 3867 RVA: 0x00076260 File Offset: 0x00074460
		public OdbcLiteral odbcLiteral()
		{
			OdbcLiteral odbcLiteral = base.FragmentFactory.CreateFragment<OdbcLiteral>();
			IToken token = this.LT(1);
			this.match(193);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			switch (this.LA(1))
			{
			case 230:
			{
				IToken token3 = this.LT(1);
				this.match(230);
				if (this.inputState.guessing == 0)
				{
					odbcLiteral.OdbcLiteralType = TSql80ParserBaseInternal.ParseOdbcLiteralType(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token3);
					odbcLiteral.Value = TSql80ParserBaseInternal.DecodeAsciiStringLiteral(token3.getText());
				}
				break;
			}
			case 231:
			{
				IToken token4 = this.LT(1);
				this.match(231);
				if (this.inputState.guessing == 0)
				{
					odbcLiteral.OdbcLiteralType = TSql80ParserBaseInternal.ParseOdbcLiteralType(token2);
					odbcLiteral.IsNational = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token4);
					odbcLiteral.Value = TSql80ParserBaseInternal.DecodeUnicodeStringLiteral(token4.getText());
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token5 = this.LT(1);
			this.match(194);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token5);
			}
			return odbcLiteral;
		}

		// Token: 0x06000F1C RID: 3868 RVA: 0x000763B8 File Offset: 0x000745B8
		private void initializeFactory()
		{
		}

		// Token: 0x06000F1D RID: 3869 RVA: 0x000763BC File Offset: 0x000745BC
		private static long[] mk_tokenSet_0_()
		{
			long[] array = new long[8];
			array[0] = 3585973655481528914L;
			array[1] = -1675334557835686887L;
			array[2] = -9204904057318025894L;
			array[3] = 6322594533441L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F1E RID: 3870 RVA: 0x00076414 File Offset: 0x00074614
		private static long[] mk_tokenSet_1_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -517913957147607041L;
			array[3] = 17437434016751L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F1F RID: 3871 RVA: 0x00076460 File Offset: 0x00074660
		private static long[] mk_tokenSet_2_()
		{
			long[] array = new long[8];
			array[0] = 3585973655481528914L;
			array[1] = -1675334557835686887L;
			array[2] = -9204903919879072422L;
			array[3] = 6322594533441L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F20 RID: 3872 RVA: 0x000764B8 File Offset: 0x000746B8
		private static long[] mk_tokenSet_3_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261264L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1099780063232L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F21 RID: 3873 RVA: 0x00076510 File Offset: 0x00074710
		private static long[] mk_tokenSet_4_()
		{
			long[] array = new long[8];
			array[0] = 140737488355328L;
			array[1] = 216172782113784320L;
			array[2] = 275012127232L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F22 RID: 3874 RVA: 0x00076568 File Offset: 0x00074768
		private static long[] mk_tokenSet_5_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261266L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 7696984047872L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F23 RID: 3875 RVA: 0x000765C0 File Offset: 0x000747C0
		private static long[] mk_tokenSet_6_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -8588366688427180033L;
			array[3] = 35029619577258L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F24 RID: 3876 RVA: 0x0007660C File Offset: 0x0007480C
		private static long[] mk_tokenSet_7_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 7696581394688L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F25 RID: 3877 RVA: 0x00076650 File Offset: 0x00074850
		private static long[] mk_tokenSet_8_()
		{
			long[] array = new long[8];
			array[0] = 3549944857319616594L;
			array[1] = 7530023046149835777L;
			array[2] = -9205044796953865126L;
			array[3] = 26130446815618L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F26 RID: 3878 RVA: 0x000766A8 File Offset: 0x000748A8
		private static long[] mk_tokenSet_9_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261266L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914280960L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F27 RID: 3879 RVA: 0x00076700 File Offset: 0x00074900
		private static long[] mk_tokenSet_10_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -8588366688427180033L;
			array[3] = 17437433532842L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F28 RID: 3880 RVA: 0x00076780 File Offset: 0x00074980
		private static long[] mk_tokenSet_11_()
		{
			return new long[] { 16777216L, 17180917760L, 2147483648L, 0L, 0L, 0L };
		}

		// Token: 0x06000F29 RID: 3881 RVA: 0x000767A0 File Offset: 0x000749A0
		private static long[] mk_tokenSet_12_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 8796093022208L;
			array[2] = long.MinValue;
			array[3] = 7696581394688L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F2A RID: 3882 RVA: 0x00076820 File Offset: 0x00074A20
		private static long[] mk_tokenSet_13_()
		{
			return new long[] { 281474976710656L, 4194304L, -9205348837957300224L, 0L, 0L, 0L };
		}

		// Token: 0x06000F2B RID: 3883 RVA: 0x00076840 File Offset: 0x00074A40
		private static long[] mk_tokenSet_14_()
		{
			long[] array = new long[8];
			array[0] = 2255115563040800L;
			array[1] = 2313579177083008L;
			array[2] = -8646911250174299872L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F2C RID: 3884 RVA: 0x00076898 File Offset: 0x00074A98
		private static long[] mk_tokenSet_15_()
		{
			long[] array = new long[8];
			array[0] = 2048L;
			array[1] = 1048576L;
			array[2] = 34359740416L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F2D RID: 3885 RVA: 0x000768E8 File Offset: 0x00074AE8
		private static long[] mk_tokenSet_16_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F2E RID: 3886 RVA: 0x00076940 File Offset: 0x00074B40
		private static long[] mk_tokenSet_17_()
		{
			long[] array = new long[8];
			array[0] = 140737488355328L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 8537858113666L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F2F RID: 3887 RVA: 0x00076990 File Offset: 0x00074B90
		private static long[] mk_tokenSet_18_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9205044796953865126L;
			array[3] = 1112262332481L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F30 RID: 3888 RVA: 0x000769E8 File Offset: 0x00074BE8
		private static long[] mk_tokenSet_19_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285057L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F31 RID: 3889 RVA: 0x00076A40 File Offset: 0x00074C40
		private static long[] mk_tokenSet_20_()
		{
			long[] array = new long[8];
			array[0] = 9011597301252608L;
			array[1] = 4294967296L;
			array[2] = 0L;
			array[3] = 3298534883328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F32 RID: 3890 RVA: 0x00076A90 File Offset: 0x00074C90
		private static long[] mk_tokenSet_21_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 618475290880L;
			array[2] = 0L;
			array[3] = 8537858113666L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F33 RID: 3891 RVA: 0x00076AD8 File Offset: 0x00074CD8
		private static long[] mk_tokenSet_22_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261264L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1099780067328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F34 RID: 3892 RVA: 0x00076B30 File Offset: 0x00074D30
		private static long[] mk_tokenSet_23_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = 0L;
			array[3] = 7696581394432L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F35 RID: 3893 RVA: 0x00076B78 File Offset: 0x00074D78
		private static long[] mk_tokenSet_24_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 7697118265472L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F36 RID: 3894 RVA: 0x00076BBC File Offset: 0x00074DBC
		private static long[] mk_tokenSet_25_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1100451156992L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F37 RID: 3895 RVA: 0x00076C14 File Offset: 0x00074E14
		private static long[] mk_tokenSet_26_()
		{
			long[] array = new long[8];
			array[0] = 32L;
			array[1] = 1048576L;
			array[2] = 128L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F38 RID: 3896 RVA: 0x00076C60 File Offset: 0x00074E60
		private static long[] mk_tokenSet_27_()
		{
			long[] array = new long[8];
			array[0] = 137438953472L;
			for (int i = 1; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3315714752512L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F39 RID: 3897 RVA: 0x00076CB0 File Offset: 0x00074EB0
		private static long[] mk_tokenSet_28_()
		{
			long[] array = new long[8];
			array[0] = 67108880L;
			array[1] = 0L;
			array[2] = 16384L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F3A RID: 3898 RVA: 0x00076CFC File Offset: 0x00074EFC
		private static long[] mk_tokenSet_29_()
		{
			long[] array = new long[8];
			array[0] = 3585832916917334610L;
			array[1] = 7530025176453614601L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F3B RID: 3899 RVA: 0x00076D54 File Offset: 0x00074F54
		private static long[] mk_tokenSet_30_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -8646911250174303968L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F3C RID: 3900 RVA: 0x00076DAC File Offset: 0x00074FAC
		private static long[] mk_tokenSet_31_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 5498497667072L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F3D RID: 3901 RVA: 0x00076E04 File Offset: 0x00075004
		private static long[] mk_tokenSet_32_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530023046149966849L;
			array[2] = -9205044796953864870L;
			array[3] = 8560272478464L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F3E RID: 3902 RVA: 0x00076E5C File Offset: 0x0007505C
		private static long[] mk_tokenSet_33_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 131072L;
			array[2] = 256L;
			array[3] = 3332894621952L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F3F RID: 3903 RVA: 0x00076EA8 File Offset: 0x000750A8
		private static long[] mk_tokenSet_34_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 7700876361984L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F40 RID: 3904 RVA: 0x00076EEC File Offset: 0x000750EC
		private static long[] mk_tokenSet_35_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 5226975199232L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F41 RID: 3905 RVA: 0x00076F34 File Offset: 0x00075134
		private static long[] mk_tokenSet_36_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 825170591872L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F42 RID: 3906 RVA: 0x00076F78 File Offset: 0x00075178
		private static long[] mk_tokenSet_37_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225746L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F43 RID: 3907 RVA: 0x00076FD0 File Offset: 0x000751D0
		private static long[] mk_tokenSet_38_()
		{
			long[] array = new long[8];
			array[0] = -16L;
			array[1] = -2199023257729L;
			array[2] = 58544596124172287L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F44 RID: 3908 RVA: 0x00077020 File Offset: 0x00075220
		private static long[] mk_tokenSet_39_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -8646911250191081184L;
			array[3] = 17437030875554L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F45 RID: 3909 RVA: 0x00077078 File Offset: 0x00075278
		private static long[] mk_tokenSet_40_()
		{
			long[] array = new long[8];
			array[0] = 3585836232666689618L;
			array[1] = 7530023184125791233L;
			array[2] = -1711053883137460870L;
			array[3] = 17437433928618L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F46 RID: 3910 RVA: 0x000770D0 File Offset: 0x000752D0
		private static long[] mk_tokenSet_41_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 3298937540608L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F47 RID: 3911 RVA: 0x00077128 File Offset: 0x00075328
		private static long[] mk_tokenSet_42_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 8537858113667L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F48 RID: 3912 RVA: 0x00077170 File Offset: 0x00075370
		private static long[] mk_tokenSet_43_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714377L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F49 RID: 3913 RVA: 0x000771C8 File Offset: 0x000753C8
		private static long[] mk_tokenSet_44_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530025176453614593L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F4A RID: 3914 RVA: 0x00077220 File Offset: 0x00075420
		private static long[] mk_tokenSet_45_()
		{
			long[] array = new long[8];
			array[0] = 3594840116105228882L;
			array[1] = 7530022981725326337L;
			array[2] = -9205044796953865126L;
			array[3] = 3300548153504L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F4B RID: 3915 RVA: 0x00077278 File Offset: 0x00075478
		private static long[] mk_tokenSet_46_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205042597930609574L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F4C RID: 3916 RVA: 0x000772D0 File Offset: 0x000754D0
		private static long[] mk_tokenSet_47_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205042597922220966L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F4D RID: 3917 RVA: 0x00077328 File Offset: 0x00075528
		private static long[] mk_tokenSet_48_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530025726209428481L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914301504L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F4E RID: 3918 RVA: 0x00077380 File Offset: 0x00075580
		private static long[] mk_tokenSet_49_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285120L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F4F RID: 3919 RVA: 0x000773D8 File Offset: 0x000755D8
		private static long[] mk_tokenSet_50_()
		{
			long[] array = new long[8];
			array[0] = 2306124484190404608L;
			array[1] = -9223372036850581504L;
			array[2] = 4294971392L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F50 RID: 3920 RVA: 0x00077430 File Offset: 0x00075630
		private static long[] mk_tokenSet_51_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -8588366688427180033L;
			array[3] = 17437433549226L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F51 RID: 3921 RVA: 0x0007747C File Offset: 0x0007567C
		private static long[] mk_tokenSet_52_()
		{
			long[] array = new long[8];
			array[0] = 3585832916917334610L;
			array[1] = 7530022977430359049L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F52 RID: 3922 RVA: 0x000774D4 File Offset: 0x000756D4
		private static long[] mk_tokenSet_53_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796945476518L;
			array[3] = 1099914301504L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F53 RID: 3923 RVA: 0x0007752C File Offset: 0x0007572C
		private static long[] mk_tokenSet_54_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796945476518L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F54 RID: 3924 RVA: 0x00077584 File Offset: 0x00075784
		private static long[] mk_tokenSet_55_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359169L;
			array[2] = -9205044796945476518L;
			array[3] = 1099914285120L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F55 RID: 3925 RVA: 0x000775DC File Offset: 0x000757DC
		private static long[] mk_tokenSet_56_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359169L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914301504L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F56 RID: 3926 RVA: 0x00077634 File Offset: 0x00075834
		private static long[] mk_tokenSet_57_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359169L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F57 RID: 3927 RVA: 0x0007768C File Offset: 0x0007588C
		private static long[] mk_tokenSet_58_()
		{
			long[] array = new long[8];
			array[0] = 9007199254740992L;
			array[1] = 4294967296L;
			array[2] = 0L;
			array[3] = 3298534883328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F58 RID: 3928 RVA: 0x000776DC File Offset: 0x000758DC
		private static long[] mk_tokenSet_59_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 103079215104L;
			array[2] = 0L;
			array[3] = 65L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F59 RID: 3929 RVA: 0x00077720 File Offset: 0x00075920
		private static long[] mk_tokenSet_60_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 8537858113666L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F5A RID: 3930 RVA: 0x00077768 File Offset: 0x00075968
		private static long[] mk_tokenSet_61_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 1111859658817L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F5B RID: 3931 RVA: 0x000777AC File Offset: 0x000759AC
		private static long[] mk_tokenSet_62_()
		{
			long[] array = new long[8];
			array[0] = 18014398509482064L;
			for (int i = 1; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 1099511627776L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F5C RID: 3932 RVA: 0x000777FC File Offset: 0x000759FC
		private static long[] mk_tokenSet_63_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359049L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F5D RID: 3933 RVA: 0x00077854 File Offset: 0x00075A54
		private static long[] mk_tokenSet_64_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 1; i++)
			{
				array[i] = 0L;
			}
			array[2] = 2199023271936L;
			array[3] = 1099511627777L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F5E RID: 3934 RVA: 0x000778A4 File Offset: 0x00075AA4
		private static long[] mk_tokenSet_65_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850227794L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F5F RID: 3935 RVA: 0x000778FC File Offset: 0x00075AFC
		private static long[] mk_tokenSet_66_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850227282L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285312L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F60 RID: 3936 RVA: 0x00077954 File Offset: 0x00075B54
		private static long[] mk_tokenSet_67_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850227282L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F61 RID: 3937 RVA: 0x000779AC File Offset: 0x00075BAC
		private static long[] mk_tokenSet_68_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977564576769L;
			array[2] = -9205044796953865126L;
			array[3] = 4128403099713L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F62 RID: 3938 RVA: 0x00077A04 File Offset: 0x00075C04
		private static long[] mk_tokenSet_69_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 4128000442368L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F63 RID: 3939 RVA: 0x00077A48 File Offset: 0x00075C48
		private static long[] mk_tokenSet_70_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977564576769L;
			array[2] = -9205044796953865126L;
			array[3] = 3298937540673L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F64 RID: 3940 RVA: 0x00077AA0 File Offset: 0x00075CA0
		private static long[] mk_tokenSet_71_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F65 RID: 3941 RVA: 0x00077AF8 File Offset: 0x00075CF8
		private static long[] mk_tokenSet_72_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225746L;
			array[1] = 7530022977430359049L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F66 RID: 3942 RVA: 0x00077B50 File Offset: 0x00075D50
		private static long[] mk_tokenSet_73_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 3298937540864L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F67 RID: 3943 RVA: 0x00077BA8 File Offset: 0x00075DA8
		private static long[] mk_tokenSet_74_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850487378L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1101524897952L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F68 RID: 3944 RVA: 0x00077C00 File Offset: 0x00075E00
		private static long[] mk_tokenSet_75_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -8588366688427180033L;
			array[3] = 17437433532906L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F69 RID: 3945 RVA: 0x00077C80 File Offset: 0x00075E80
		private static long[] mk_tokenSet_76_()
		{
			return new long[] { 562984313159680L, 2048L, 16L, 0L, 0L, 0L };
		}

		// Token: 0x06000F6A RID: 3946 RVA: 0x00077CA0 File Offset: 0x00075EA0
		private static long[] mk_tokenSet_77_()
		{
			long[] array = new long[8];
			array[0] = -16L;
			array[1] = -1L;
			array[2] = -8588366688427180033L;
			array[3] = 17437299315114L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F6B RID: 3947 RVA: 0x00077CEC File Offset: 0x00075EEC
		private static long[] mk_tokenSet_78_()
		{
			long[] array = new long[8];
			array[0] = 2255115563040800L;
			array[1] = 206695464960L;
			array[2] = -8646911250174299872L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F6C RID: 3948 RVA: 0x00077D44 File Offset: 0x00075F44
		private static long[] mk_tokenSet_79_()
		{
			long[] array = new long[8];
			array[0] = 8704L;
			array[1] = 562949953421312L;
			array[2] = 140737488355336L;
			array[3] = 64L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F6D RID: 3949 RVA: 0x00077D94 File Offset: 0x00075F94
		private static long[] mk_tokenSet_80_()
		{
			long[] array = new long[8];
			array[0] = -16L;
			array[1] = -2199023257729L;
			array[2] = 58544596124172287L;
			array[3] = 1099511629824L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F6E RID: 3950 RVA: 0x00077DE4 File Offset: 0x00075FE4
		private static long[] mk_tokenSet_81_()
		{
			long[] array = new long[8];
			array[0] = 262144L;
			array[1] = 128L;
			array[2] = -9223372036846387200L;
			array[3] = 3298534883584L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F6F RID: 3951 RVA: 0x00077E34 File Offset: 0x00076034
		private static long[] mk_tokenSet_82_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714935491585L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285057L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F70 RID: 3952 RVA: 0x00077E8C File Offset: 0x0007608C
		private static long[] mk_tokenSet_83_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977447136257L;
			array[2] = -9205044796953865126L;
			array[3] = 3298937540608L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F71 RID: 3953 RVA: 0x00077EE4 File Offset: 0x000760E4
		private static long[] mk_tokenSet_84_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = 0L;
			array[3] = 4398583382144L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F72 RID: 3954 RVA: 0x00077F2C File Offset: 0x0007612C
		private static long[] mk_tokenSet_85_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 3298937540928L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F73 RID: 3955 RVA: 0x00077F84 File Offset: 0x00076184
		private static long[] mk_tokenSet_86_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675334557835686895L;
			array[2] = -9205044794806381222L;
			array[3] = 3298937540673L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F74 RID: 3956 RVA: 0x00077FDC File Offset: 0x000761DC
		private static long[] mk_tokenSet_87_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -8588366688427180033L;
			array[3] = 17437433532907L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F75 RID: 3957 RVA: 0x00078028 File Offset: 0x00076228
		private static long[] mk_tokenSet_88_()
		{
			long[] array = new long[8];
			array[0] = 262144L;
			for (int i = 1; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883584L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F76 RID: 3958 RVA: 0x00078074 File Offset: 0x00076274
		private static long[] mk_tokenSet_89_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 133185552L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F77 RID: 3959 RVA: 0x000780B4 File Offset: 0x000762B4
		private static long[] mk_tokenSet_90_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530025176453614593L;
			array[2] = -9205042597930609574L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F78 RID: 3960 RVA: 0x0007810C File Offset: 0x0007630C
		private static long[] mk_tokenSet_91_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675334557835686895L;
			array[2] = -9205044794806381222L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F79 RID: 3961 RVA: 0x00078164 File Offset: 0x00076364
		private static long[] mk_tokenSet_92_()
		{
			long[] array = new long[8];
			array[0] = 4162293669153648722L;
			array[1] = 7530163714927102985L;
			array[2] = -9205044795880123302L;
			array[3] = 1099914285057L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F7A RID: 3962 RVA: 0x000781BC File Offset: 0x000763BC
		private static long[] mk_tokenSet_93_()
		{
			long[] array = new long[8];
			array[0] = 4162293737873125458L;
			array[1] = 7531854764416711945L;
			array[2] = -9203353746996603782L;
			array[3] = 1099914285125L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F7B RID: 3963 RVA: 0x00078214 File Offset: 0x00076414
		private static long[] mk_tokenSet_94_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -13510798882111489L;
			array[3] = 17437434018799L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F7C RID: 3964 RVA: 0x00078260 File Offset: 0x00076460
		private static long[] mk_tokenSet_95_()
		{
			long[] array = new long[8];
			array[0] = 577023736616583170L;
			array[1] = 8390664L;
			array[2] = 8797166764048L;
			array[3] = 134221825L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F7D RID: 3965 RVA: 0x000782B0 File Offset: 0x000764B0
		private static long[] mk_tokenSet_96_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883592L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F7E RID: 3966 RVA: 0x000782F4 File Offset: 0x000764F4
		private static long[] mk_tokenSet_97_()
		{
			long[] array = new long[8];
			array[0] = 577023736616583170L;
			array[1] = 562949961824392L;
			array[2] = 10996190019600L;
			array[3] = 3298669105473L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F7F RID: 3967 RVA: 0x0007834C File Offset: 0x0007654C
		private static long[] mk_tokenSet_98_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695464960L;
			array[2] = -8646911250191081184L;
			array[3] = 17437030875554L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F80 RID: 3968 RVA: 0x000783A4 File Offset: 0x000765A4
		private static long[] mk_tokenSet_99_()
		{
			long[] array = new long[8];
			array[0] = 577027052433048066L;
			array[1] = 563156657256584L;
			array[2] = -1729370126848347856L;
			array[3] = 17437165509611L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F81 RID: 3969 RVA: 0x000783FC File Offset: 0x000765FC
		private static long[] mk_tokenSet_100_()
		{
			long[] array = new long[8];
			array[0] = 4162293669153648722L;
			array[1] = 7530726664880532489L;
			array[2] = -9205044795880123302L;
			array[3] = 1099914285057L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F82 RID: 3970 RVA: 0x00078454 File Offset: 0x00076654
		private static long[] mk_tokenSet_101_()
		{
			long[] array = new long[8];
			array[0] = 4162293669153648722L;
			array[1] = 7530726664897313929L;
			array[2] = -9205042596856867750L;
			array[3] = 3298937540929L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F83 RID: 3971 RVA: 0x000784AC File Offset: 0x000766AC
		private static long[] mk_tokenSet_102_()
		{
			long[] array = new long[8];
			array[0] = 4162296984970113618L;
			array[1] = 7530726871592746121L;
			array[2] = -1711051683040463494L;
			array[3] = 17437433945067L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F84 RID: 3972 RVA: 0x00078504 File Offset: 0x00076704
		private static long[] mk_tokenSet_103_()
		{
			long[] array = new long[8];
			array[0] = 4162296984970113618L;
			array[1] = 7530726871592746121L;
			array[2] = -1711051683040463494L;
			array[3] = 17437433928683L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F85 RID: 3973 RVA: 0x0007855C File Offset: 0x0007675C
		private static long[] mk_tokenSet_104_()
		{
			long[] array = new long[8];
			array[0] = 512L;
			for (int i = 1; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 4123168604160L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F86 RID: 3974 RVA: 0x000785A8 File Offset: 0x000767A8
		private static long[] mk_tokenSet_105_()
		{
			long[] array = new long[8];
			array[0] = 4162293669153648722L;
			array[1] = 7530726664897313929L;
			array[2] = -9205042596856867750L;
			array[3] = 4123571261505L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F87 RID: 3975 RVA: 0x00078600 File Offset: 0x00076800
		private static long[] mk_tokenSet_106_()
		{
			long[] array = new long[8];
			array[0] = 4162293669153648722L;
			array[1] = 7530726664897313929L;
			array[2] = -9205042596856867750L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F88 RID: 3976 RVA: 0x00078658 File Offset: 0x00076858
		private static long[] mk_tokenSet_107_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714935491713L;
			array[2] = -9205042529211132838L;
			array[3] = 3298937540929L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F89 RID: 3977 RVA: 0x000786B0 File Offset: 0x000768B0
		private static long[] mk_tokenSet_108_()
		{
			long[] array = new long[8];
			array[0] = 3585976970155045458L;
			array[1] = 7530163921630923905L;
			array[2] = -1711051615394728582L;
			array[3] = 17437433928683L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F8A RID: 3978 RVA: 0x00078708 File Offset: 0x00076908
		private static long[] mk_tokenSet_109_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714935491713L;
			array[2] = -9205042529211132838L;
			array[3] = 4123571261505L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F8B RID: 3979 RVA: 0x00078760 File Offset: 0x00076960
		private static long[] mk_tokenSet_110_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714935491713L;
			array[2] = -9205042529211132838L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F8C RID: 3980 RVA: 0x000787B8 File Offset: 0x000769B8
		private static long[] mk_tokenSet_111_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -8083963530161684481L;
			array[3] = 17437433534890L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F8D RID: 3981 RVA: 0x00078804 File Offset: 0x00076A04
		private static long[] mk_tokenSet_112_()
		{
			long[] array = new long[8];
			array[0] = 4162293737873125970L;
			array[1] = 7531854764416728329L;
			array[2] = -9203353746996603782L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F8E RID: 3982 RVA: 0x00078890 File Offset: 0x00076A90
		private static long[] mk_tokenSet_113_()
		{
			return new long[] { 68719476736L, 1125900512919808L, 1688849860263968L, 0L, 0L, 0L };
		}

		// Token: 0x06000F8F RID: 3983 RVA: 0x000788B0 File Offset: 0x00076AB0
		private static long[] mk_tokenSet_114_()
		{
			long[] array = new long[8];
			array[0] = 4294967296L;
			array[1] = 131941395333184L;
			array[2] = -8718968878589280256L;
			array[3] = 7696581396736L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F90 RID: 3984 RVA: 0x00078908 File Offset: 0x00076B08
		private static long[] mk_tokenSet_115_()
		{
			long[] array = new long[8];
			array[0] = 4162293737873125970L;
			array[1] = 7531854764416728329L;
			array[2] = -9201101878463441798L;
			array[3] = 3298937540933L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F91 RID: 3985 RVA: 0x00078960 File Offset: 0x00076B60
		private static long[] mk_tokenSet_116_()
		{
			long[] array = new long[8];
			array[0] = 3315816464384L;
			array[1] = 206695432192L;
			array[2] = -1729381123038367456L;
			array[3] = 17437031271403L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F92 RID: 3986 RVA: 0x000789E8 File Offset: 0x00076BE8
		private static long[] mk_tokenSet_117_()
		{
			return new long[] { 68719476736L, 1125900512919808L, 32L, 0L, 0L, 0L };
		}

		// Token: 0x06000F93 RID: 3987 RVA: 0x00078A08 File Offset: 0x00076C08
		private static long[] mk_tokenSet_118_()
		{
			long[] array = new long[8];
			array[0] = 281543696187904L;
			array[1] = 1125900517130496L;
			array[2] = -9203096969424138208L;
			array[3] = 3298534883584L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F94 RID: 3988 RVA: 0x00078A60 File Offset: 0x00076C60
		private static long[] mk_tokenSet_119_()
		{
			long[] array = new long[8];
			array[0] = 4162293737873125970L;
			array[1] = 7531854764416711945L;
			array[2] = -9203353746996603782L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F95 RID: 3989 RVA: 0x00078AE8 File Offset: 0x00076CE8
		private static long[] mk_tokenSet_120_()
		{
			return new long[] { 281474976710656L, 4194304L, 18014402804449280L, 0L, 0L, 0L };
		}

		// Token: 0x06000F96 RID: 3990 RVA: 0x00078B08 File Offset: 0x00076D08
		private static long[] mk_tokenSet_121_()
		{
			long[] array = new long[8];
			array[0] = 4162293737873125970L;
			array[1] = 7531854764416728329L;
			array[2] = -9201101947182918534L;
			array[3] = 3298937540933L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F97 RID: 3991 RVA: 0x00078B60 File Offset: 0x00076D60
		private static long[] mk_tokenSet_122_()
		{
			long[] array = new long[8];
			array[0] = 4162293737873125970L;
			array[1] = 7531854764416728329L;
			array[2] = -9201101947182918534L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F98 RID: 3992 RVA: 0x00078BB8 File Offset: 0x00076DB8
		private static long[] mk_tokenSet_123_()
		{
			long[] array = new long[8];
			array[0] = 144053237710848L;
			array[1] = 206695432192L;
			array[2] = -8646911250191081184L;
			array[3] = 17437030875555L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F99 RID: 3993 RVA: 0x00078C10 File Offset: 0x00076E10
		private static long[] mk_tokenSet_124_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3332894621952L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000F9A RID: 3994 RVA: 0x00078C54 File Offset: 0x00076E54
		private static long[] mk_tokenSet_125_()
		{
			long[] array = new long[8];
			array[0] = 3458905251308896256L;
			array[1] = 0L;
			array[2] = -9223371968135294976L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F9B RID: 3995 RVA: 0x00078CA4 File Offset: 0x00076EA4
		private static long[] mk_tokenSet_126_()
		{
			long[] array = new long[8];
			array[0] = 2255115563040800L;
			array[1] = 9002788487168L;
			array[2] = -8646911181454823136L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F9C RID: 3996 RVA: 0x00078CFC File Offset: 0x00076EFC
		private static long[] mk_tokenSet_127_()
		{
			long[] array = new long[8];
			array[0] = 4294967296L;
			array[1] = 131941395333184L;
			array[2] = -8718968878589280256L;
			array[3] = 16492674418946L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F9D RID: 3997 RVA: 0x00078D54 File Offset: 0x00076F54
		private static long[] mk_tokenSet_128_()
		{
			long[] array = new long[8];
			array[0] = 4162434475361481298L;
			array[1] = 7531854764416712073L;
			array[2] = -9203353678277127046L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F9E RID: 3998 RVA: 0x00078DAC File Offset: 0x00076FAC
		private static long[] mk_tokenSet_129_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -8646911250191081184L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000F9F RID: 3999 RVA: 0x00078E04 File Offset: 0x00077004
		private static long[] mk_tokenSet_130_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714918714497L;
			array[2] = -9205042529211132838L;
			array[3] = 1099914285057L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FA0 RID: 4000 RVA: 0x00078E5C File Offset: 0x0007705C
		private static long[] mk_tokenSet_131_()
		{
			long[] array = new long[8];
			array[0] = 4611689336324227072L;
			array[1] = 241055170592L;
			array[2] = -8646911245359242976L;
			array[3] = 17437030875554L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FA1 RID: 4001 RVA: 0x00078EB4 File Offset: 0x000770B4
		private static long[] mk_tokenSet_132_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298668069136L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000FA2 RID: 4002 RVA: 0x00078EF8 File Offset: 0x000770F8
		private static long[] mk_tokenSet_133_()
		{
			long[] array = new long[8];
			array[0] = 3585836232666689618L;
			array[1] = 7530163921614146689L;
			array[2] = -1711051684114205318L;
			array[3] = 17437433928683L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FA3 RID: 4003 RVA: 0x00078F50 File Offset: 0x00077150
		private static long[] mk_tokenSet_134_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 1; i++)
			{
				array[i] = 0L;
			}
			array[2] = long.MinValue;
			array[3] = 3298534883584L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000FA4 RID: 4004 RVA: 0x00078FA0 File Offset: 0x000771A0
		private static long[] mk_tokenSet_135_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338581074L;
			array[1] = 7530163714918714497L;
			array[2] = -9205042529211132838L;
			array[3] = 3298937540865L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FA5 RID: 4005 RVA: 0x00078FF8 File Offset: 0x000771F8
		private static long[] mk_tokenSet_136_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338581074L;
			array[1] = 7530163714918714497L;
			array[2] = -9205042529211132838L;
			array[3] = 3298937540609L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FA6 RID: 4006 RVA: 0x00079050 File Offset: 0x00077250
		private static long[] mk_tokenSet_137_()
		{
			long[] array = new long[8];
			array[0] = 4162293737873125458L;
			array[1] = 7531854764416711945L;
			array[2] = -9203353746996603782L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FA7 RID: 4007 RVA: 0x000790A8 File Offset: 0x000772A8
		private static long[] mk_tokenSet_138_()
		{
			long[] array = new long[8];
			array[0] = 4162293737873125458L;
			array[1] = 7531854764416728329L;
			array[2] = -9201101947182918534L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FA8 RID: 4008 RVA: 0x00079100 File Offset: 0x00077300
		private static long[] mk_tokenSet_139_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 1; i++)
			{
				array[i] = 0L;
			}
			array[2] = long.MinValue;
			array[3] = 3298534883592L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000FA9 RID: 4009 RVA: 0x00079150 File Offset: 0x00077350
		private static long[] mk_tokenSet_140_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883656L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000FAA RID: 4010 RVA: 0x00079194 File Offset: 0x00077394
		private static long[] mk_tokenSet_141_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 1064960L;
			array[2] = 0L;
			array[3] = 1099511627840L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FAB RID: 4011 RVA: 0x000791DC File Offset: 0x000773DC
		private static long[] mk_tokenSet_142_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 1064960L;
			array[2] = long.MinValue;
			array[3] = 1099511627841L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FAC RID: 4012 RVA: 0x00079228 File Offset: 0x00077428
		private static long[] mk_tokenSet_143_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 1064960L;
			array[2] = 0L;
			array[3] = 1099511627841L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FAD RID: 4013 RVA: 0x00079270 File Offset: 0x00077470
		private static long[] mk_tokenSet_144_()
		{
			long[] array = new long[8];
			array[0] = 4162296984970113106L;
			array[1] = 7530726871575964681L;
			array[2] = -1711053882063719046L;
			array[3] = 17437433928683L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FAE RID: 4014 RVA: 0x000792C8 File Offset: 0x000774C8
		private static long[] mk_tokenSet_145_()
		{
			long[] array = new long[8];
			array[0] = 4162293669153648722L;
			array[1] = 7530163714927102977L;
			array[2] = -9205044795880123302L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FAF RID: 4015 RVA: 0x00079320 File Offset: 0x00077520
		private static long[] mk_tokenSet_146_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 9570149275275264L;
			array[2] = 1073741824L;
			array[3] = 1099511627841L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FB0 RID: 4016 RVA: 0x0007936C File Offset: 0x0007756C
		private static long[] mk_tokenSet_147_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850487890L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1101524897952L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FB1 RID: 4017 RVA: 0x000793C4 File Offset: 0x000775C4
		private static long[] mk_tokenSet_148_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 1610612896L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000FB2 RID: 4018 RVA: 0x00079404 File Offset: 0x00077604
		private static long[] mk_tokenSet_149_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225746L;
			array[1] = 7530022977430359041L;
			array[2] = -9205044796953865126L;
			array[3] = 1101524897952L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FB3 RID: 4019 RVA: 0x00079490 File Offset: 0x00077690
		private static long[] mk_tokenSet_150_()
		{
			return new long[] { 281474976710656L, 274882101248L, 4294967296L, 0L, 0L, 0L };
		}

		// Token: 0x06000FB4 RID: 4020 RVA: 0x000794B0 File Offset: 0x000776B0
		private static long[] mk_tokenSet_151_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = 0L;
			array[3] = 3298534883648L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FB5 RID: 4021 RVA: 0x000794F8 File Offset: 0x000776F8
		private static long[] mk_tokenSet_152_()
		{
			long[] array = new long[8];
			array[0] = 3315816464896L;
			array[1] = 206695432320L;
			array[2] = -1729381123038367456L;
			array[3] = 17437031271402L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FB6 RID: 4022 RVA: 0x00079550 File Offset: 0x00077750
		private static long[] mk_tokenSet_153_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 8796093022208L;
			array[2] = 0L;
			array[3] = 7696581394688L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FB7 RID: 4023 RVA: 0x00079598 File Offset: 0x00077798
		private static long[] mk_tokenSet_154_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163783638191105L;
			array[2] = -9205044796953865126L;
			array[3] = 26130446815619L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FB8 RID: 4024 RVA: 0x000795F0 File Offset: 0x000777F0
		private static long[] mk_tokenSet_155_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9205044796953865126L;
			array[3] = 1112262316097L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FB9 RID: 4025 RVA: 0x00079648 File Offset: 0x00077848
		private static long[] mk_tokenSet_156_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FBA RID: 4026 RVA: 0x000796A0 File Offset: 0x000778A0
		private static long[] mk_tokenSet_157_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -8588366688427180033L;
			array[3] = 17437433532843L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FBB RID: 4027 RVA: 0x000796EC File Offset: 0x000778EC
		private static long[] mk_tokenSet_158_()
		{
			long[] array = new long[8];
			array[0] = 140738564194304L;
			array[1] = 18014398509482000L;
			array[2] = (long)((ulong)int.MinValue);
			array[3] = 3298534883328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FBC RID: 4028 RVA: 0x00079740 File Offset: 0x00077940
		private static long[] mk_tokenSet_159_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530023080509574153L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FBD RID: 4029 RVA: 0x00079798 File Offset: 0x00077998
		private static long[] mk_tokenSet_160_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530023080509574145L;
			array[2] = -9205044796953865126L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FBE RID: 4030 RVA: 0x000797F0 File Offset: 0x000779F0
		private static long[] mk_tokenSet_161_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675334557835719663L;
			array[2] = -9205044794806381478L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FBF RID: 4031 RVA: 0x00079878 File Offset: 0x00077A78
		private static long[] mk_tokenSet_162_()
		{
			return new long[] { 140738564194304L, -9205357535266078704L, 2147483648L, 0L, 0L, 0L };
		}

		// Token: 0x06000FC0 RID: 4032 RVA: 0x00079898 File Offset: 0x00077A98
		private static long[] mk_tokenSet_163_()
		{
			long[] array = new long[8];
			array[0] = 3585973655481528402L;
			array[1] = -1675334557835686895L;
			array[2] = -9205044657367427750L;
			array[3] = 3298937540929L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FC1 RID: 4033 RVA: 0x000798F0 File Offset: 0x00077AF0
		private static long[] mk_tokenSet_164_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675334557835686887L;
			array[2] = -9205044794806381222L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FC2 RID: 4034 RVA: 0x00079948 File Offset: 0x00077B48
		private static long[] mk_tokenSet_165_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675332358812431343L;
			array[2] = -9205044794806381222L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FC3 RID: 4035 RVA: 0x000799A0 File Offset: 0x00077BA0
		private static long[] mk_tokenSet_166_()
		{
			long[] array = new long[8];
			array[0] = 3315816480768L;
			array[1] = 242162991104L;
			array[2] = -576459618431520480L;
			array[3] = 17437031361450L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FC4 RID: 4036 RVA: 0x000799F8 File Offset: 0x00077BF8
		private static long[] mk_tokenSet_167_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 131072L;
			array[2] = 256L;
			array[3] = 3332894621960L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FC5 RID: 4037 RVA: 0x00079A44 File Offset: 0x00077C44
		private static long[] mk_tokenSet_168_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883648L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000FC6 RID: 4038 RVA: 0x00079A88 File Offset: 0x00077C88
		private static long[] mk_tokenSet_169_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883585L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000FC7 RID: 4039 RVA: 0x00079ACC File Offset: 0x00077CCC
		private static long[] mk_tokenSet_170_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883649L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000FC8 RID: 4040 RVA: 0x00079B10 File Offset: 0x00077D10
		private static long[] mk_tokenSet_171_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534885632L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06000FC9 RID: 4041 RVA: 0x00079B54 File Offset: 0x00077D54
		private static long[] mk_tokenSet_172_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -8646911250191081184L;
			array[3] = 17437030351106L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FCA RID: 4042 RVA: 0x00079BAC File Offset: 0x00077DAC
		private static long[] mk_tokenSet_173_()
		{
			long[] array = new long[8];
			array[0] = 4451794068312356562L;
			array[1] = -1668717557681570407L;
			array[2] = -556441257693809286L;
			array[3] = 17437434016751L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FCB RID: 4043 RVA: 0x00079C04 File Offset: 0x00077E04
		private static long[] mk_tokenSet_174_()
		{
			long[] array = new long[8];
			array[0] = 4451790752563001042L;
			array[1] = -1668717695120654951L;
			array[2] = -1132902044357503622L;
			array[3] = 4123571745775L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FCC RID: 4044 RVA: 0x00079C5C File Offset: 0x00077E5C
		private static long[] mk_tokenSet_175_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 5239323230210L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06000FCD RID: 4045 RVA: 0x00079CA4 File Offset: 0x00077EA4
		private static long[] mk_tokenSet_176_()
		{
			long[] array = new long[8];
			array[0] = 2395853051396128L;
			array[1] = 206695432192L;
			array[2] = -8646911250191081184L;
			array[3] = 17437030875555L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x04000726 RID: 1830
		public const int EOF = 1;

		// Token: 0x04000727 RID: 1831
		public const int NULL_TREE_LOOKAHEAD = 3;

		// Token: 0x04000728 RID: 1832
		public const int Add = 4;

		// Token: 0x04000729 RID: 1833
		public const int All = 5;

		// Token: 0x0400072A RID: 1834
		public const int Alter = 6;

		// Token: 0x0400072B RID: 1835
		public const int And = 7;

		// Token: 0x0400072C RID: 1836
		public const int Any = 8;

		// Token: 0x0400072D RID: 1837
		public const int As = 9;

		// Token: 0x0400072E RID: 1838
		public const int Asc = 10;

		// Token: 0x0400072F RID: 1839
		public const int Authorization = 11;

		// Token: 0x04000730 RID: 1840
		public const int Backup = 12;

		// Token: 0x04000731 RID: 1841
		public const int Begin = 13;

		// Token: 0x04000732 RID: 1842
		public const int Between = 14;

		// Token: 0x04000733 RID: 1843
		public const int Break = 15;

		// Token: 0x04000734 RID: 1844
		public const int Browse = 16;

		// Token: 0x04000735 RID: 1845
		public const int Bulk = 17;

		// Token: 0x04000736 RID: 1846
		public const int By = 18;

		// Token: 0x04000737 RID: 1847
		public const int Cascade = 19;

		// Token: 0x04000738 RID: 1848
		public const int Case = 20;

		// Token: 0x04000739 RID: 1849
		public const int Check = 21;

		// Token: 0x0400073A RID: 1850
		public const int Checkpoint = 22;

		// Token: 0x0400073B RID: 1851
		public const int Close = 23;

		// Token: 0x0400073C RID: 1852
		public const int Clustered = 24;

		// Token: 0x0400073D RID: 1853
		public const int Coalesce = 25;

		// Token: 0x0400073E RID: 1854
		public const int Collate = 26;

		// Token: 0x0400073F RID: 1855
		public const int Column = 27;

		// Token: 0x04000740 RID: 1856
		public const int Commit = 28;

		// Token: 0x04000741 RID: 1857
		public const int Compute = 29;

		// Token: 0x04000742 RID: 1858
		public const int Constraint = 30;

		// Token: 0x04000743 RID: 1859
		public const int Contains = 31;

		// Token: 0x04000744 RID: 1860
		public const int ContainsTable = 32;

		// Token: 0x04000745 RID: 1861
		public const int Continue = 33;

		// Token: 0x04000746 RID: 1862
		public const int Convert = 34;

		// Token: 0x04000747 RID: 1863
		public const int Create = 35;

		// Token: 0x04000748 RID: 1864
		public const int Cross = 36;

		// Token: 0x04000749 RID: 1865
		public const int Current = 37;

		// Token: 0x0400074A RID: 1866
		public const int CurrentDate = 38;

		// Token: 0x0400074B RID: 1867
		public const int CurrentTime = 39;

		// Token: 0x0400074C RID: 1868
		public const int CurrentTimestamp = 40;

		// Token: 0x0400074D RID: 1869
		public const int CurrentUser = 41;

		// Token: 0x0400074E RID: 1870
		public const int Cursor = 42;

		// Token: 0x0400074F RID: 1871
		public const int Database = 43;

		// Token: 0x04000750 RID: 1872
		public const int Dbcc = 44;

		// Token: 0x04000751 RID: 1873
		public const int Deallocate = 45;

		// Token: 0x04000752 RID: 1874
		public const int Declare = 46;

		// Token: 0x04000753 RID: 1875
		public const int Default = 47;

		// Token: 0x04000754 RID: 1876
		public const int Delete = 48;

		// Token: 0x04000755 RID: 1877
		public const int Deny = 49;

		// Token: 0x04000756 RID: 1878
		public const int Desc = 50;

		// Token: 0x04000757 RID: 1879
		public const int Distinct = 51;

		// Token: 0x04000758 RID: 1880
		public const int Distributed = 52;

		// Token: 0x04000759 RID: 1881
		public const int Double = 53;

		// Token: 0x0400075A RID: 1882
		public const int Drop = 54;

		// Token: 0x0400075B RID: 1883
		public const int Else = 55;

		// Token: 0x0400075C RID: 1884
		public const int End = 56;

		// Token: 0x0400075D RID: 1885
		public const int Errlvl = 57;

		// Token: 0x0400075E RID: 1886
		public const int Escape = 58;

		// Token: 0x0400075F RID: 1887
		public const int Except = 59;

		// Token: 0x04000760 RID: 1888
		public const int Exec = 60;

		// Token: 0x04000761 RID: 1889
		public const int Execute = 61;

		// Token: 0x04000762 RID: 1890
		public const int Exists = 62;

		// Token: 0x04000763 RID: 1891
		public const int Exit = 63;

		// Token: 0x04000764 RID: 1892
		public const int Fetch = 64;

		// Token: 0x04000765 RID: 1893
		public const int File = 65;

		// Token: 0x04000766 RID: 1894
		public const int FillFactor = 66;

		// Token: 0x04000767 RID: 1895
		public const int For = 67;

		// Token: 0x04000768 RID: 1896
		public const int Foreign = 68;

		// Token: 0x04000769 RID: 1897
		public const int FreeText = 69;

		// Token: 0x0400076A RID: 1898
		public const int FreeTextTable = 70;

		// Token: 0x0400076B RID: 1899
		public const int From = 71;

		// Token: 0x0400076C RID: 1900
		public const int Full = 72;

		// Token: 0x0400076D RID: 1901
		public const int Function = 73;

		// Token: 0x0400076E RID: 1902
		public const int GoTo = 74;

		// Token: 0x0400076F RID: 1903
		public const int Grant = 75;

		// Token: 0x04000770 RID: 1904
		public const int Group = 76;

		// Token: 0x04000771 RID: 1905
		public const int Having = 77;

		// Token: 0x04000772 RID: 1906
		public const int HoldLock = 78;

		// Token: 0x04000773 RID: 1907
		public const int Identity = 79;

		// Token: 0x04000774 RID: 1908
		public const int IdentityInsert = 80;

		// Token: 0x04000775 RID: 1909
		public const int IdentityColumn = 81;

		// Token: 0x04000776 RID: 1910
		public const int If = 82;

		// Token: 0x04000777 RID: 1911
		public const int In = 83;

		// Token: 0x04000778 RID: 1912
		public const int Index = 84;

		// Token: 0x04000779 RID: 1913
		public const int Inner = 85;

		// Token: 0x0400077A RID: 1914
		public const int Insert = 86;

		// Token: 0x0400077B RID: 1915
		public const int Intersect = 87;

		// Token: 0x0400077C RID: 1916
		public const int Into = 88;

		// Token: 0x0400077D RID: 1917
		public const int Is = 89;

		// Token: 0x0400077E RID: 1918
		public const int Join = 90;

		// Token: 0x0400077F RID: 1919
		public const int Key = 91;

		// Token: 0x04000780 RID: 1920
		public const int Kill = 92;

		// Token: 0x04000781 RID: 1921
		public const int Left = 93;

		// Token: 0x04000782 RID: 1922
		public const int Like = 94;

		// Token: 0x04000783 RID: 1923
		public const int LineNo = 95;

		// Token: 0x04000784 RID: 1924
		public const int National = 96;

		// Token: 0x04000785 RID: 1925
		public const int NoCheck = 97;

		// Token: 0x04000786 RID: 1926
		public const int NonClustered = 98;

		// Token: 0x04000787 RID: 1927
		public const int Not = 99;

		// Token: 0x04000788 RID: 1928
		public const int Null = 100;

		// Token: 0x04000789 RID: 1929
		public const int NullIf = 101;

		// Token: 0x0400078A RID: 1930
		public const int Of = 102;

		// Token: 0x0400078B RID: 1931
		public const int Off = 103;

		// Token: 0x0400078C RID: 1932
		public const int Offsets = 104;

		// Token: 0x0400078D RID: 1933
		public const int On = 105;

		// Token: 0x0400078E RID: 1934
		public const int Open = 106;

		// Token: 0x0400078F RID: 1935
		public const int OpenDataSource = 107;

		// Token: 0x04000790 RID: 1936
		public const int OpenQuery = 108;

		// Token: 0x04000791 RID: 1937
		public const int OpenRowSet = 109;

		// Token: 0x04000792 RID: 1938
		public const int OpenXml = 110;

		// Token: 0x04000793 RID: 1939
		public const int Option = 111;

		// Token: 0x04000794 RID: 1940
		public const int Or = 112;

		// Token: 0x04000795 RID: 1941
		public const int Order = 113;

		// Token: 0x04000796 RID: 1942
		public const int Outer = 114;

		// Token: 0x04000797 RID: 1943
		public const int Over = 115;

		// Token: 0x04000798 RID: 1944
		public const int Percent = 116;

		// Token: 0x04000799 RID: 1945
		public const int Plan = 117;

		// Token: 0x0400079A RID: 1946
		public const int Primary = 118;

		// Token: 0x0400079B RID: 1947
		public const int Print = 119;

		// Token: 0x0400079C RID: 1948
		public const int Proc = 120;

		// Token: 0x0400079D RID: 1949
		public const int Procedure = 121;

		// Token: 0x0400079E RID: 1950
		public const int Public = 122;

		// Token: 0x0400079F RID: 1951
		public const int Raiserror = 123;

		// Token: 0x040007A0 RID: 1952
		public const int Read = 124;

		// Token: 0x040007A1 RID: 1953
		public const int ReadText = 125;

		// Token: 0x040007A2 RID: 1954
		public const int Reconfigure = 126;

		// Token: 0x040007A3 RID: 1955
		public const int References = 127;

		// Token: 0x040007A4 RID: 1956
		public const int Replication = 128;

		// Token: 0x040007A5 RID: 1957
		public const int Restore = 129;

		// Token: 0x040007A6 RID: 1958
		public const int Restrict = 130;

		// Token: 0x040007A7 RID: 1959
		public const int Return = 131;

		// Token: 0x040007A8 RID: 1960
		public const int Revoke = 132;

		// Token: 0x040007A9 RID: 1961
		public const int Right = 133;

		// Token: 0x040007AA RID: 1962
		public const int Rollback = 134;

		// Token: 0x040007AB RID: 1963
		public const int RowCount = 135;

		// Token: 0x040007AC RID: 1964
		public const int RowGuidColumn = 136;

		// Token: 0x040007AD RID: 1965
		public const int Rule = 137;

		// Token: 0x040007AE RID: 1966
		public const int Save = 138;

		// Token: 0x040007AF RID: 1967
		public const int Schema = 139;

		// Token: 0x040007B0 RID: 1968
		public const int Select = 140;

		// Token: 0x040007B1 RID: 1969
		public const int SessionUser = 141;

		// Token: 0x040007B2 RID: 1970
		public const int Set = 142;

		// Token: 0x040007B3 RID: 1971
		public const int SetUser = 143;

		// Token: 0x040007B4 RID: 1972
		public const int Shutdown = 144;

		// Token: 0x040007B5 RID: 1973
		public const int Some = 145;

		// Token: 0x040007B6 RID: 1974
		public const int Statistics = 146;

		// Token: 0x040007B7 RID: 1975
		public const int SystemUser = 147;

		// Token: 0x040007B8 RID: 1976
		public const int Table = 148;

		// Token: 0x040007B9 RID: 1977
		public const int TextSize = 149;

		// Token: 0x040007BA RID: 1978
		public const int Then = 150;

		// Token: 0x040007BB RID: 1979
		public const int To = 151;

		// Token: 0x040007BC RID: 1980
		public const int Top = 152;

		// Token: 0x040007BD RID: 1981
		public const int Tran = 153;

		// Token: 0x040007BE RID: 1982
		public const int Transaction = 154;

		// Token: 0x040007BF RID: 1983
		public const int Trigger = 155;

		// Token: 0x040007C0 RID: 1984
		public const int Truncate = 156;

		// Token: 0x040007C1 RID: 1985
		public const int TSEqual = 157;

		// Token: 0x040007C2 RID: 1986
		public const int Union = 158;

		// Token: 0x040007C3 RID: 1987
		public const int Unique = 159;

		// Token: 0x040007C4 RID: 1988
		public const int Update = 160;

		// Token: 0x040007C5 RID: 1989
		public const int UpdateText = 161;

		// Token: 0x040007C6 RID: 1990
		public const int Use = 162;

		// Token: 0x040007C7 RID: 1991
		public const int User = 163;

		// Token: 0x040007C8 RID: 1992
		public const int Values = 164;

		// Token: 0x040007C9 RID: 1993
		public const int Varying = 165;

		// Token: 0x040007CA RID: 1994
		public const int View = 166;

		// Token: 0x040007CB RID: 1995
		public const int WaitFor = 167;

		// Token: 0x040007CC RID: 1996
		public const int When = 168;

		// Token: 0x040007CD RID: 1997
		public const int Where = 169;

		// Token: 0x040007CE RID: 1998
		public const int While = 170;

		// Token: 0x040007CF RID: 1999
		public const int With = 171;

		// Token: 0x040007D0 RID: 2000
		public const int WriteText = 172;

		// Token: 0x040007D1 RID: 2001
		public const int Disk = 173;

		// Token: 0x040007D2 RID: 2002
		public const int Precision = 174;

		// Token: 0x040007D3 RID: 2003
		public const int External = 175;

		// Token: 0x040007D4 RID: 2004
		public const int Revert = 176;

		// Token: 0x040007D5 RID: 2005
		public const int Pivot = 177;

		// Token: 0x040007D6 RID: 2006
		public const int Unpivot = 178;

		// Token: 0x040007D7 RID: 2007
		public const int TableSample = 179;

		// Token: 0x040007D8 RID: 2008
		public const int Dump = 180;

		// Token: 0x040007D9 RID: 2009
		public const int Load = 181;

		// Token: 0x040007DA RID: 2010
		public const int Merge = 182;

		// Token: 0x040007DB RID: 2011
		public const int StopList = 183;

		// Token: 0x040007DC RID: 2012
		public const int SemanticKeyPhraseTable = 184;

		// Token: 0x040007DD RID: 2013
		public const int SemanticSimilarityTable = 185;

		// Token: 0x040007DE RID: 2014
		public const int SemanticSimilarityDetailsTable = 186;

		// Token: 0x040007DF RID: 2015
		public const int TryConvert = 187;

		// Token: 0x040007E0 RID: 2016
		public const int Bang = 188;

		// Token: 0x040007E1 RID: 2017
		public const int PercentSign = 189;

		// Token: 0x040007E2 RID: 2018
		public const int Ampersand = 190;

		// Token: 0x040007E3 RID: 2019
		public const int LeftParenthesis = 191;

		// Token: 0x040007E4 RID: 2020
		public const int RightParenthesis = 192;

		// Token: 0x040007E5 RID: 2021
		public const int LeftCurly = 193;

		// Token: 0x040007E6 RID: 2022
		public const int RightCurly = 194;

		// Token: 0x040007E7 RID: 2023
		public const int Star = 195;

		// Token: 0x040007E8 RID: 2024
		public const int MultiplyEquals = 196;

		// Token: 0x040007E9 RID: 2025
		public const int Plus = 197;

		// Token: 0x040007EA RID: 2026
		public const int Comma = 198;

		// Token: 0x040007EB RID: 2027
		public const int Minus = 199;

		// Token: 0x040007EC RID: 2028
		public const int Dot = 200;

		// Token: 0x040007ED RID: 2029
		public const int Divide = 201;

		// Token: 0x040007EE RID: 2030
		public const int Colon = 202;

		// Token: 0x040007EF RID: 2031
		public const int DoubleColon = 203;

		// Token: 0x040007F0 RID: 2032
		public const int Semicolon = 204;

		// Token: 0x040007F1 RID: 2033
		public const int LessThan = 205;

		// Token: 0x040007F2 RID: 2034
		public const int EqualsSign = 206;

		// Token: 0x040007F3 RID: 2035
		public const int RightOuterJoin = 207;

		// Token: 0x040007F4 RID: 2036
		public const int GreaterThan = 208;

		// Token: 0x040007F5 RID: 2037
		public const int Circumflex = 209;

		// Token: 0x040007F6 RID: 2038
		public const int VerticalLine = 210;

		// Token: 0x040007F7 RID: 2039
		public const int Tilde = 211;

		// Token: 0x040007F8 RID: 2040
		public const int AddEquals = 212;

		// Token: 0x040007F9 RID: 2041
		public const int SubtractEquals = 213;

		// Token: 0x040007FA RID: 2042
		public const int DivideEquals = 214;

		// Token: 0x040007FB RID: 2043
		public const int ModEquals = 215;

		// Token: 0x040007FC RID: 2044
		public const int BitwiseAndEquals = 216;

		// Token: 0x040007FD RID: 2045
		public const int BitwiseOrEquals = 217;

		// Token: 0x040007FE RID: 2046
		public const int BitwiseXorEquals = 218;

		// Token: 0x040007FF RID: 2047
		public const int Go = 219;

		// Token: 0x04000800 RID: 2048
		public const int Label = 220;

		// Token: 0x04000801 RID: 2049
		public const int Integer = 221;

		// Token: 0x04000802 RID: 2050
		public const int Numeric = 222;

		// Token: 0x04000803 RID: 2051
		public const int Real = 223;

		// Token: 0x04000804 RID: 2052
		public const int HexLiteral = 224;

		// Token: 0x04000805 RID: 2053
		public const int Money = 225;

		// Token: 0x04000806 RID: 2054
		public const int SqlCommandIdentifier = 226;

		// Token: 0x04000807 RID: 2055
		public const int PseudoColumn = 227;

		// Token: 0x04000808 RID: 2056
		public const int DollarPartition = 228;

		// Token: 0x04000809 RID: 2057
		public const int AsciiStringOrQuotedIdentifier = 229;

		// Token: 0x0400080A RID: 2058
		public const int AsciiStringLiteral = 230;

		// Token: 0x0400080B RID: 2059
		public const int UnicodeStringLiteral = 231;

		// Token: 0x0400080C RID: 2060
		public const int Identifier = 232;

		// Token: 0x0400080D RID: 2061
		public const int QuotedIdentifier = 233;

		// Token: 0x0400080E RID: 2062
		public const int Variable = 234;

		// Token: 0x0400080F RID: 2063
		public const int OdbcInitiator = 235;

		// Token: 0x04000810 RID: 2064
		public const int ProcNameSemicolon = 236;

		// Token: 0x04000811 RID: 2065
		public const int SingleLineComment = 237;

		// Token: 0x04000812 RID: 2066
		public const int MultilineComment = 238;

		// Token: 0x04000813 RID: 2067
		public const int WhiteSpace = 239;

		// Token: 0x04000814 RID: 2068
		public static readonly string[] tokenNames_ = new string[]
		{
			"\"<0>\"", "\"EOF\"", "\"<2>\"", "\"NULL_TREE_LOOKAHEAD\"", "\"add\"", "\"all\"", "\"alter\"", "\"and\"", "\"any\"", "\"as\"",
			"\"asc\"", "\"authorization\"", "\"backup\"", "\"begin\"", "\"between\"", "\"break\"", "\"browse\"", "\"bulk\"", "\"by\"", "\"cascade\"",
			"\"case\"", "\"check\"", "\"checkpoint\"", "\"close\"", "\"clustered\"", "\"coalesce\"", "\"collate\"", "\"column\"", "\"commit\"", "\"compute\"",
			"\"constraint\"", "\"contains\"", "\"containstable\"", "\"continue\"", "\"convert\"", "\"create\"", "\"cross\"", "\"current\"", "\"current_date\"", "\"current_time\"",
			"\"current_timestamp\"", "\"current_user\"", "\"cursor\"", "\"database\"", "\"dbcc\"", "\"deallocate\"", "\"declare\"", "\"default\"", "\"delete\"", "\"deny\"",
			"\"desc\"", "\"distinct\"", "\"distributed\"", "\"double\"", "\"drop\"", "\"else\"", "\"end\"", "\"errlvl\"", "\"escape\"", "\"except\"",
			"\"exec\"", "\"execute\"", "\"exists\"", "\"exit\"", "\"fetch\"", "\"file\"", "\"fillfactor\"", "\"for\"", "\"foreign\"", "\"freetext\"",
			"\"freetexttable\"", "\"from\"", "\"full\"", "\"function\"", "\"goto\"", "\"grant\"", "\"group\"", "\"having\"", "\"holdlock\"", "\"identity\"",
			"\"identity_insert\"", "\"identitycol\"", "\"if\"", "\"in\"", "\"index\"", "\"inner\"", "\"insert\"", "\"intersect\"", "\"into\"", "\"is\"",
			"\"join\"", "\"key\"", "\"kill\"", "\"left\"", "\"like\"", "\"lineno\"", "\"national\"", "\"nocheck\"", "\"nonclustered\"", "\"not\"",
			"\"null\"", "\"nullif\"", "\"of\"", "\"off\"", "\"offsets\"", "\"on\"", "\"open\"", "\"opendatasource\"", "\"openquery\"", "\"openrowset\"",
			"\"openxml\"", "\"option\"", "\"or\"", "\"order\"", "\"outer\"", "\"over\"", "\"percent\"", "\"plan\"", "\"primary\"", "\"print\"",
			"\"proc\"", "\"procedure\"", "\"public\"", "\"raiserror\"", "\"read\"", "\"readtext\"", "\"reconfigure\"", "\"references\"", "\"replication\"", "\"restore\"",
			"\"restrict\"", "\"return\"", "\"revoke\"", "\"right\"", "\"rollback\"", "\"rowcount\"", "\"rowguidcol\"", "\"rule\"", "\"save\"", "\"schema\"",
			"\"select\"", "\"session_user\"", "\"set\"", "\"setuser\"", "\"shutdown\"", "\"some\"", "\"statistics\"", "\"system_user\"", "\"table\"", "\"textsize\"",
			"\"then\"", "\"to\"", "\"top\"", "\"tran\"", "\"transaction\"", "\"trigger\"", "\"truncate\"", "\"tsequal\"", "\"union\"", "\"unique\"",
			"\"update\"", "\"updatetext\"", "\"use\"", "\"user\"", "\"values\"", "\"varying\"", "\"view\"", "\"waitfor\"", "\"when\"", "\"where\"",
			"\"while\"", "\"with\"", "\"writetext\"", "\"Disk\"", "\"Precision\"", "\"External\"", "\"Revert\"", "\"Pivot\"", "\"Unpivot\"", "\"TableSample\"",
			"\"Dump\"", "\"Load\"", "\"Merge\"", "\"StopList\"", "\"SemanticKeyPhraseTable\"", "\"SemanticSimilarityTable\"", "\"SemanticSimilarityDetailsTable\"", "\"TryConvert\"", "\"Bang\"", "\"PercentSign\"",
			"\"Ampersand\"", "\"LeftParenthesis\"", "\"RightParenthesis\"", "\"LeftCurly\"", "\"RightCurly\"", "\"Star\"", "\"MultiplyEquals\"", "\"Plus\"", "\"Comma\"", "\"Minus\"",
			"\"Dot\"", "\"Divide\"", "\"Colon\"", "\"DoubleColon\"", "\"Semicolon\"", "\"LessThan\"", "\"EqualsSign\"", "\"RightOuterJoin\"", "\"GreaterThan\"", "\"Circumflex\"",
			"\"VerticalLine\"", "\"Tilde\"", "\"AddEquals\"", "\"SubtractEquals\"", "\"DivideEquals\"", "\"ModEquals\"", "\"BitwiseAndEquals\"", "\"BitwiseOrEquals\"", "\"BitwiseXorEquals\"", "\"Go\"",
			"\"Label\"", "\"Integer\"", "\"Numeric\"", "\"Real\"", "\"HexLiteral\"", "\"Money\"", "\"SqlCommandIdentifier\"", "\"PseudoColumn\"", "\"DollarPartition\"", "\"AsciiStringOrQuotedIdentifier\"",
			"\"AsciiStringLiteral\"", "\"UnicodeStringLiteral\"", "\"Identifier\"", "\"QuotedIdentifier\"", "\"Variable\"", "\"OdbcInitiator\"", "\"ProcNameSemicolon\"", "\"SingleLineComment\"", "\"MultilineComment\"", "\"WhiteSpace\""
		};

		// Token: 0x04000815 RID: 2069
		public static readonly BitSet tokenSet_0_ = new BitSet(TSql110ParserInternal.mk_tokenSet_0_());

		// Token: 0x04000816 RID: 2070
		public static readonly BitSet tokenSet_1_ = new BitSet(TSql110ParserInternal.mk_tokenSet_1_());

		// Token: 0x04000817 RID: 2071
		public static readonly BitSet tokenSet_2_ = new BitSet(TSql110ParserInternal.mk_tokenSet_2_());

		// Token: 0x04000818 RID: 2072
		public static readonly BitSet tokenSet_3_ = new BitSet(TSql110ParserInternal.mk_tokenSet_3_());

		// Token: 0x04000819 RID: 2073
		public static readonly BitSet tokenSet_4_ = new BitSet(TSql110ParserInternal.mk_tokenSet_4_());

		// Token: 0x0400081A RID: 2074
		public static readonly BitSet tokenSet_5_ = new BitSet(TSql110ParserInternal.mk_tokenSet_5_());

		// Token: 0x0400081B RID: 2075
		public static readonly BitSet tokenSet_6_ = new BitSet(TSql110ParserInternal.mk_tokenSet_6_());

		// Token: 0x0400081C RID: 2076
		public static readonly BitSet tokenSet_7_ = new BitSet(TSql110ParserInternal.mk_tokenSet_7_());

		// Token: 0x0400081D RID: 2077
		public static readonly BitSet tokenSet_8_ = new BitSet(TSql110ParserInternal.mk_tokenSet_8_());

		// Token: 0x0400081E RID: 2078
		public static readonly BitSet tokenSet_9_ = new BitSet(TSql110ParserInternal.mk_tokenSet_9_());

		// Token: 0x0400081F RID: 2079
		public static readonly BitSet tokenSet_10_ = new BitSet(TSql110ParserInternal.mk_tokenSet_10_());

		// Token: 0x04000820 RID: 2080
		public static readonly BitSet tokenSet_11_ = new BitSet(TSql110ParserInternal.mk_tokenSet_11_());

		// Token: 0x04000821 RID: 2081
		public static readonly BitSet tokenSet_12_ = new BitSet(TSql110ParserInternal.mk_tokenSet_12_());

		// Token: 0x04000822 RID: 2082
		public static readonly BitSet tokenSet_13_ = new BitSet(TSql110ParserInternal.mk_tokenSet_13_());

		// Token: 0x04000823 RID: 2083
		public static readonly BitSet tokenSet_14_ = new BitSet(TSql110ParserInternal.mk_tokenSet_14_());

		// Token: 0x04000824 RID: 2084
		public static readonly BitSet tokenSet_15_ = new BitSet(TSql110ParserInternal.mk_tokenSet_15_());

		// Token: 0x04000825 RID: 2085
		public static readonly BitSet tokenSet_16_ = new BitSet(TSql110ParserInternal.mk_tokenSet_16_());

		// Token: 0x04000826 RID: 2086
		public static readonly BitSet tokenSet_17_ = new BitSet(TSql110ParserInternal.mk_tokenSet_17_());

		// Token: 0x04000827 RID: 2087
		public static readonly BitSet tokenSet_18_ = new BitSet(TSql110ParserInternal.mk_tokenSet_18_());

		// Token: 0x04000828 RID: 2088
		public static readonly BitSet tokenSet_19_ = new BitSet(TSql110ParserInternal.mk_tokenSet_19_());

		// Token: 0x04000829 RID: 2089
		public static readonly BitSet tokenSet_20_ = new BitSet(TSql110ParserInternal.mk_tokenSet_20_());

		// Token: 0x0400082A RID: 2090
		public static readonly BitSet tokenSet_21_ = new BitSet(TSql110ParserInternal.mk_tokenSet_21_());

		// Token: 0x0400082B RID: 2091
		public static readonly BitSet tokenSet_22_ = new BitSet(TSql110ParserInternal.mk_tokenSet_22_());

		// Token: 0x0400082C RID: 2092
		public static readonly BitSet tokenSet_23_ = new BitSet(TSql110ParserInternal.mk_tokenSet_23_());

		// Token: 0x0400082D RID: 2093
		public static readonly BitSet tokenSet_24_ = new BitSet(TSql110ParserInternal.mk_tokenSet_24_());

		// Token: 0x0400082E RID: 2094
		public static readonly BitSet tokenSet_25_ = new BitSet(TSql110ParserInternal.mk_tokenSet_25_());

		// Token: 0x0400082F RID: 2095
		public static readonly BitSet tokenSet_26_ = new BitSet(TSql110ParserInternal.mk_tokenSet_26_());

		// Token: 0x04000830 RID: 2096
		public static readonly BitSet tokenSet_27_ = new BitSet(TSql110ParserInternal.mk_tokenSet_27_());

		// Token: 0x04000831 RID: 2097
		public static readonly BitSet tokenSet_28_ = new BitSet(TSql110ParserInternal.mk_tokenSet_28_());

		// Token: 0x04000832 RID: 2098
		public static readonly BitSet tokenSet_29_ = new BitSet(TSql110ParserInternal.mk_tokenSet_29_());

		// Token: 0x04000833 RID: 2099
		public static readonly BitSet tokenSet_30_ = new BitSet(TSql110ParserInternal.mk_tokenSet_30_());

		// Token: 0x04000834 RID: 2100
		public static readonly BitSet tokenSet_31_ = new BitSet(TSql110ParserInternal.mk_tokenSet_31_());

		// Token: 0x04000835 RID: 2101
		public static readonly BitSet tokenSet_32_ = new BitSet(TSql110ParserInternal.mk_tokenSet_32_());

		// Token: 0x04000836 RID: 2102
		public static readonly BitSet tokenSet_33_ = new BitSet(TSql110ParserInternal.mk_tokenSet_33_());

		// Token: 0x04000837 RID: 2103
		public static readonly BitSet tokenSet_34_ = new BitSet(TSql110ParserInternal.mk_tokenSet_34_());

		// Token: 0x04000838 RID: 2104
		public static readonly BitSet tokenSet_35_ = new BitSet(TSql110ParserInternal.mk_tokenSet_35_());

		// Token: 0x04000839 RID: 2105
		public static readonly BitSet tokenSet_36_ = new BitSet(TSql110ParserInternal.mk_tokenSet_36_());

		// Token: 0x0400083A RID: 2106
		public static readonly BitSet tokenSet_37_ = new BitSet(TSql110ParserInternal.mk_tokenSet_37_());

		// Token: 0x0400083B RID: 2107
		public static readonly BitSet tokenSet_38_ = new BitSet(TSql110ParserInternal.mk_tokenSet_38_());

		// Token: 0x0400083C RID: 2108
		public static readonly BitSet tokenSet_39_ = new BitSet(TSql110ParserInternal.mk_tokenSet_39_());

		// Token: 0x0400083D RID: 2109
		public static readonly BitSet tokenSet_40_ = new BitSet(TSql110ParserInternal.mk_tokenSet_40_());

		// Token: 0x0400083E RID: 2110
		public static readonly BitSet tokenSet_41_ = new BitSet(TSql110ParserInternal.mk_tokenSet_41_());

		// Token: 0x0400083F RID: 2111
		public static readonly BitSet tokenSet_42_ = new BitSet(TSql110ParserInternal.mk_tokenSet_42_());

		// Token: 0x04000840 RID: 2112
		public static readonly BitSet tokenSet_43_ = new BitSet(TSql110ParserInternal.mk_tokenSet_43_());

		// Token: 0x04000841 RID: 2113
		public static readonly BitSet tokenSet_44_ = new BitSet(TSql110ParserInternal.mk_tokenSet_44_());

		// Token: 0x04000842 RID: 2114
		public static readonly BitSet tokenSet_45_ = new BitSet(TSql110ParserInternal.mk_tokenSet_45_());

		// Token: 0x04000843 RID: 2115
		public static readonly BitSet tokenSet_46_ = new BitSet(TSql110ParserInternal.mk_tokenSet_46_());

		// Token: 0x04000844 RID: 2116
		public static readonly BitSet tokenSet_47_ = new BitSet(TSql110ParserInternal.mk_tokenSet_47_());

		// Token: 0x04000845 RID: 2117
		public static readonly BitSet tokenSet_48_ = new BitSet(TSql110ParserInternal.mk_tokenSet_48_());

		// Token: 0x04000846 RID: 2118
		public static readonly BitSet tokenSet_49_ = new BitSet(TSql110ParserInternal.mk_tokenSet_49_());

		// Token: 0x04000847 RID: 2119
		public static readonly BitSet tokenSet_50_ = new BitSet(TSql110ParserInternal.mk_tokenSet_50_());

		// Token: 0x04000848 RID: 2120
		public static readonly BitSet tokenSet_51_ = new BitSet(TSql110ParserInternal.mk_tokenSet_51_());

		// Token: 0x04000849 RID: 2121
		public static readonly BitSet tokenSet_52_ = new BitSet(TSql110ParserInternal.mk_tokenSet_52_());

		// Token: 0x0400084A RID: 2122
		public static readonly BitSet tokenSet_53_ = new BitSet(TSql110ParserInternal.mk_tokenSet_53_());

		// Token: 0x0400084B RID: 2123
		public static readonly BitSet tokenSet_54_ = new BitSet(TSql110ParserInternal.mk_tokenSet_54_());

		// Token: 0x0400084C RID: 2124
		public static readonly BitSet tokenSet_55_ = new BitSet(TSql110ParserInternal.mk_tokenSet_55_());

		// Token: 0x0400084D RID: 2125
		public static readonly BitSet tokenSet_56_ = new BitSet(TSql110ParserInternal.mk_tokenSet_56_());

		// Token: 0x0400084E RID: 2126
		public static readonly BitSet tokenSet_57_ = new BitSet(TSql110ParserInternal.mk_tokenSet_57_());

		// Token: 0x0400084F RID: 2127
		public static readonly BitSet tokenSet_58_ = new BitSet(TSql110ParserInternal.mk_tokenSet_58_());

		// Token: 0x04000850 RID: 2128
		public static readonly BitSet tokenSet_59_ = new BitSet(TSql110ParserInternal.mk_tokenSet_59_());

		// Token: 0x04000851 RID: 2129
		public static readonly BitSet tokenSet_60_ = new BitSet(TSql110ParserInternal.mk_tokenSet_60_());

		// Token: 0x04000852 RID: 2130
		public static readonly BitSet tokenSet_61_ = new BitSet(TSql110ParserInternal.mk_tokenSet_61_());

		// Token: 0x04000853 RID: 2131
		public static readonly BitSet tokenSet_62_ = new BitSet(TSql110ParserInternal.mk_tokenSet_62_());

		// Token: 0x04000854 RID: 2132
		public static readonly BitSet tokenSet_63_ = new BitSet(TSql110ParserInternal.mk_tokenSet_63_());

		// Token: 0x04000855 RID: 2133
		public static readonly BitSet tokenSet_64_ = new BitSet(TSql110ParserInternal.mk_tokenSet_64_());

		// Token: 0x04000856 RID: 2134
		public static readonly BitSet tokenSet_65_ = new BitSet(TSql110ParserInternal.mk_tokenSet_65_());

		// Token: 0x04000857 RID: 2135
		public static readonly BitSet tokenSet_66_ = new BitSet(TSql110ParserInternal.mk_tokenSet_66_());

		// Token: 0x04000858 RID: 2136
		public static readonly BitSet tokenSet_67_ = new BitSet(TSql110ParserInternal.mk_tokenSet_67_());

		// Token: 0x04000859 RID: 2137
		public static readonly BitSet tokenSet_68_ = new BitSet(TSql110ParserInternal.mk_tokenSet_68_());

		// Token: 0x0400085A RID: 2138
		public static readonly BitSet tokenSet_69_ = new BitSet(TSql110ParserInternal.mk_tokenSet_69_());

		// Token: 0x0400085B RID: 2139
		public static readonly BitSet tokenSet_70_ = new BitSet(TSql110ParserInternal.mk_tokenSet_70_());

		// Token: 0x0400085C RID: 2140
		public static readonly BitSet tokenSet_71_ = new BitSet(TSql110ParserInternal.mk_tokenSet_71_());

		// Token: 0x0400085D RID: 2141
		public static readonly BitSet tokenSet_72_ = new BitSet(TSql110ParserInternal.mk_tokenSet_72_());

		// Token: 0x0400085E RID: 2142
		public static readonly BitSet tokenSet_73_ = new BitSet(TSql110ParserInternal.mk_tokenSet_73_());

		// Token: 0x0400085F RID: 2143
		public static readonly BitSet tokenSet_74_ = new BitSet(TSql110ParserInternal.mk_tokenSet_74_());

		// Token: 0x04000860 RID: 2144
		public static readonly BitSet tokenSet_75_ = new BitSet(TSql110ParserInternal.mk_tokenSet_75_());

		// Token: 0x04000861 RID: 2145
		public static readonly BitSet tokenSet_76_ = new BitSet(TSql110ParserInternal.mk_tokenSet_76_());

		// Token: 0x04000862 RID: 2146
		public static readonly BitSet tokenSet_77_ = new BitSet(TSql110ParserInternal.mk_tokenSet_77_());

		// Token: 0x04000863 RID: 2147
		public static readonly BitSet tokenSet_78_ = new BitSet(TSql110ParserInternal.mk_tokenSet_78_());

		// Token: 0x04000864 RID: 2148
		public static readonly BitSet tokenSet_79_ = new BitSet(TSql110ParserInternal.mk_tokenSet_79_());

		// Token: 0x04000865 RID: 2149
		public static readonly BitSet tokenSet_80_ = new BitSet(TSql110ParserInternal.mk_tokenSet_80_());

		// Token: 0x04000866 RID: 2150
		public static readonly BitSet tokenSet_81_ = new BitSet(TSql110ParserInternal.mk_tokenSet_81_());

		// Token: 0x04000867 RID: 2151
		public static readonly BitSet tokenSet_82_ = new BitSet(TSql110ParserInternal.mk_tokenSet_82_());

		// Token: 0x04000868 RID: 2152
		public static readonly BitSet tokenSet_83_ = new BitSet(TSql110ParserInternal.mk_tokenSet_83_());

		// Token: 0x04000869 RID: 2153
		public static readonly BitSet tokenSet_84_ = new BitSet(TSql110ParserInternal.mk_tokenSet_84_());

		// Token: 0x0400086A RID: 2154
		public static readonly BitSet tokenSet_85_ = new BitSet(TSql110ParserInternal.mk_tokenSet_85_());

		// Token: 0x0400086B RID: 2155
		public static readonly BitSet tokenSet_86_ = new BitSet(TSql110ParserInternal.mk_tokenSet_86_());

		// Token: 0x0400086C RID: 2156
		public static readonly BitSet tokenSet_87_ = new BitSet(TSql110ParserInternal.mk_tokenSet_87_());

		// Token: 0x0400086D RID: 2157
		public static readonly BitSet tokenSet_88_ = new BitSet(TSql110ParserInternal.mk_tokenSet_88_());

		// Token: 0x0400086E RID: 2158
		public static readonly BitSet tokenSet_89_ = new BitSet(TSql110ParserInternal.mk_tokenSet_89_());

		// Token: 0x0400086F RID: 2159
		public static readonly BitSet tokenSet_90_ = new BitSet(TSql110ParserInternal.mk_tokenSet_90_());

		// Token: 0x04000870 RID: 2160
		public static readonly BitSet tokenSet_91_ = new BitSet(TSql110ParserInternal.mk_tokenSet_91_());

		// Token: 0x04000871 RID: 2161
		public static readonly BitSet tokenSet_92_ = new BitSet(TSql110ParserInternal.mk_tokenSet_92_());

		// Token: 0x04000872 RID: 2162
		public static readonly BitSet tokenSet_93_ = new BitSet(TSql110ParserInternal.mk_tokenSet_93_());

		// Token: 0x04000873 RID: 2163
		public static readonly BitSet tokenSet_94_ = new BitSet(TSql110ParserInternal.mk_tokenSet_94_());

		// Token: 0x04000874 RID: 2164
		public static readonly BitSet tokenSet_95_ = new BitSet(TSql110ParserInternal.mk_tokenSet_95_());

		// Token: 0x04000875 RID: 2165
		public static readonly BitSet tokenSet_96_ = new BitSet(TSql110ParserInternal.mk_tokenSet_96_());

		// Token: 0x04000876 RID: 2166
		public static readonly BitSet tokenSet_97_ = new BitSet(TSql110ParserInternal.mk_tokenSet_97_());

		// Token: 0x04000877 RID: 2167
		public static readonly BitSet tokenSet_98_ = new BitSet(TSql110ParserInternal.mk_tokenSet_98_());

		// Token: 0x04000878 RID: 2168
		public static readonly BitSet tokenSet_99_ = new BitSet(TSql110ParserInternal.mk_tokenSet_99_());

		// Token: 0x04000879 RID: 2169
		public static readonly BitSet tokenSet_100_ = new BitSet(TSql110ParserInternal.mk_tokenSet_100_());

		// Token: 0x0400087A RID: 2170
		public static readonly BitSet tokenSet_101_ = new BitSet(TSql110ParserInternal.mk_tokenSet_101_());

		// Token: 0x0400087B RID: 2171
		public static readonly BitSet tokenSet_102_ = new BitSet(TSql110ParserInternal.mk_tokenSet_102_());

		// Token: 0x0400087C RID: 2172
		public static readonly BitSet tokenSet_103_ = new BitSet(TSql110ParserInternal.mk_tokenSet_103_());

		// Token: 0x0400087D RID: 2173
		public static readonly BitSet tokenSet_104_ = new BitSet(TSql110ParserInternal.mk_tokenSet_104_());

		// Token: 0x0400087E RID: 2174
		public static readonly BitSet tokenSet_105_ = new BitSet(TSql110ParserInternal.mk_tokenSet_105_());

		// Token: 0x0400087F RID: 2175
		public static readonly BitSet tokenSet_106_ = new BitSet(TSql110ParserInternal.mk_tokenSet_106_());

		// Token: 0x04000880 RID: 2176
		public static readonly BitSet tokenSet_107_ = new BitSet(TSql110ParserInternal.mk_tokenSet_107_());

		// Token: 0x04000881 RID: 2177
		public static readonly BitSet tokenSet_108_ = new BitSet(TSql110ParserInternal.mk_tokenSet_108_());

		// Token: 0x04000882 RID: 2178
		public static readonly BitSet tokenSet_109_ = new BitSet(TSql110ParserInternal.mk_tokenSet_109_());

		// Token: 0x04000883 RID: 2179
		public static readonly BitSet tokenSet_110_ = new BitSet(TSql110ParserInternal.mk_tokenSet_110_());

		// Token: 0x04000884 RID: 2180
		public static readonly BitSet tokenSet_111_ = new BitSet(TSql110ParserInternal.mk_tokenSet_111_());

		// Token: 0x04000885 RID: 2181
		public static readonly BitSet tokenSet_112_ = new BitSet(TSql110ParserInternal.mk_tokenSet_112_());

		// Token: 0x04000886 RID: 2182
		public static readonly BitSet tokenSet_113_ = new BitSet(TSql110ParserInternal.mk_tokenSet_113_());

		// Token: 0x04000887 RID: 2183
		public static readonly BitSet tokenSet_114_ = new BitSet(TSql110ParserInternal.mk_tokenSet_114_());

		// Token: 0x04000888 RID: 2184
		public static readonly BitSet tokenSet_115_ = new BitSet(TSql110ParserInternal.mk_tokenSet_115_());

		// Token: 0x04000889 RID: 2185
		public static readonly BitSet tokenSet_116_ = new BitSet(TSql110ParserInternal.mk_tokenSet_116_());

		// Token: 0x0400088A RID: 2186
		public static readonly BitSet tokenSet_117_ = new BitSet(TSql110ParserInternal.mk_tokenSet_117_());

		// Token: 0x0400088B RID: 2187
		public static readonly BitSet tokenSet_118_ = new BitSet(TSql110ParserInternal.mk_tokenSet_118_());

		// Token: 0x0400088C RID: 2188
		public static readonly BitSet tokenSet_119_ = new BitSet(TSql110ParserInternal.mk_tokenSet_119_());

		// Token: 0x0400088D RID: 2189
		public static readonly BitSet tokenSet_120_ = new BitSet(TSql110ParserInternal.mk_tokenSet_120_());

		// Token: 0x0400088E RID: 2190
		public static readonly BitSet tokenSet_121_ = new BitSet(TSql110ParserInternal.mk_tokenSet_121_());

		// Token: 0x0400088F RID: 2191
		public static readonly BitSet tokenSet_122_ = new BitSet(TSql110ParserInternal.mk_tokenSet_122_());

		// Token: 0x04000890 RID: 2192
		public static readonly BitSet tokenSet_123_ = new BitSet(TSql110ParserInternal.mk_tokenSet_123_());

		// Token: 0x04000891 RID: 2193
		public static readonly BitSet tokenSet_124_ = new BitSet(TSql110ParserInternal.mk_tokenSet_124_());

		// Token: 0x04000892 RID: 2194
		public static readonly BitSet tokenSet_125_ = new BitSet(TSql110ParserInternal.mk_tokenSet_125_());

		// Token: 0x04000893 RID: 2195
		public static readonly BitSet tokenSet_126_ = new BitSet(TSql110ParserInternal.mk_tokenSet_126_());

		// Token: 0x04000894 RID: 2196
		public static readonly BitSet tokenSet_127_ = new BitSet(TSql110ParserInternal.mk_tokenSet_127_());

		// Token: 0x04000895 RID: 2197
		public static readonly BitSet tokenSet_128_ = new BitSet(TSql110ParserInternal.mk_tokenSet_128_());

		// Token: 0x04000896 RID: 2198
		public static readonly BitSet tokenSet_129_ = new BitSet(TSql110ParserInternal.mk_tokenSet_129_());

		// Token: 0x04000897 RID: 2199
		public static readonly BitSet tokenSet_130_ = new BitSet(TSql110ParserInternal.mk_tokenSet_130_());

		// Token: 0x04000898 RID: 2200
		public static readonly BitSet tokenSet_131_ = new BitSet(TSql110ParserInternal.mk_tokenSet_131_());

		// Token: 0x04000899 RID: 2201
		public static readonly BitSet tokenSet_132_ = new BitSet(TSql110ParserInternal.mk_tokenSet_132_());

		// Token: 0x0400089A RID: 2202
		public static readonly BitSet tokenSet_133_ = new BitSet(TSql110ParserInternal.mk_tokenSet_133_());

		// Token: 0x0400089B RID: 2203
		public static readonly BitSet tokenSet_134_ = new BitSet(TSql110ParserInternal.mk_tokenSet_134_());

		// Token: 0x0400089C RID: 2204
		public static readonly BitSet tokenSet_135_ = new BitSet(TSql110ParserInternal.mk_tokenSet_135_());

		// Token: 0x0400089D RID: 2205
		public static readonly BitSet tokenSet_136_ = new BitSet(TSql110ParserInternal.mk_tokenSet_136_());

		// Token: 0x0400089E RID: 2206
		public static readonly BitSet tokenSet_137_ = new BitSet(TSql110ParserInternal.mk_tokenSet_137_());

		// Token: 0x0400089F RID: 2207
		public static readonly BitSet tokenSet_138_ = new BitSet(TSql110ParserInternal.mk_tokenSet_138_());

		// Token: 0x040008A0 RID: 2208
		public static readonly BitSet tokenSet_139_ = new BitSet(TSql110ParserInternal.mk_tokenSet_139_());

		// Token: 0x040008A1 RID: 2209
		public static readonly BitSet tokenSet_140_ = new BitSet(TSql110ParserInternal.mk_tokenSet_140_());

		// Token: 0x040008A2 RID: 2210
		public static readonly BitSet tokenSet_141_ = new BitSet(TSql110ParserInternal.mk_tokenSet_141_());

		// Token: 0x040008A3 RID: 2211
		public static readonly BitSet tokenSet_142_ = new BitSet(TSql110ParserInternal.mk_tokenSet_142_());

		// Token: 0x040008A4 RID: 2212
		public static readonly BitSet tokenSet_143_ = new BitSet(TSql110ParserInternal.mk_tokenSet_143_());

		// Token: 0x040008A5 RID: 2213
		public static readonly BitSet tokenSet_144_ = new BitSet(TSql110ParserInternal.mk_tokenSet_144_());

		// Token: 0x040008A6 RID: 2214
		public static readonly BitSet tokenSet_145_ = new BitSet(TSql110ParserInternal.mk_tokenSet_145_());

		// Token: 0x040008A7 RID: 2215
		public static readonly BitSet tokenSet_146_ = new BitSet(TSql110ParserInternal.mk_tokenSet_146_());

		// Token: 0x040008A8 RID: 2216
		public static readonly BitSet tokenSet_147_ = new BitSet(TSql110ParserInternal.mk_tokenSet_147_());

		// Token: 0x040008A9 RID: 2217
		public static readonly BitSet tokenSet_148_ = new BitSet(TSql110ParserInternal.mk_tokenSet_148_());

		// Token: 0x040008AA RID: 2218
		public static readonly BitSet tokenSet_149_ = new BitSet(TSql110ParserInternal.mk_tokenSet_149_());

		// Token: 0x040008AB RID: 2219
		public static readonly BitSet tokenSet_150_ = new BitSet(TSql110ParserInternal.mk_tokenSet_150_());

		// Token: 0x040008AC RID: 2220
		public static readonly BitSet tokenSet_151_ = new BitSet(TSql110ParserInternal.mk_tokenSet_151_());

		// Token: 0x040008AD RID: 2221
		public static readonly BitSet tokenSet_152_ = new BitSet(TSql110ParserInternal.mk_tokenSet_152_());

		// Token: 0x040008AE RID: 2222
		public static readonly BitSet tokenSet_153_ = new BitSet(TSql110ParserInternal.mk_tokenSet_153_());

		// Token: 0x040008AF RID: 2223
		public static readonly BitSet tokenSet_154_ = new BitSet(TSql110ParserInternal.mk_tokenSet_154_());

		// Token: 0x040008B0 RID: 2224
		public static readonly BitSet tokenSet_155_ = new BitSet(TSql110ParserInternal.mk_tokenSet_155_());

		// Token: 0x040008B1 RID: 2225
		public static readonly BitSet tokenSet_156_ = new BitSet(TSql110ParserInternal.mk_tokenSet_156_());

		// Token: 0x040008B2 RID: 2226
		public static readonly BitSet tokenSet_157_ = new BitSet(TSql110ParserInternal.mk_tokenSet_157_());

		// Token: 0x040008B3 RID: 2227
		public static readonly BitSet tokenSet_158_ = new BitSet(TSql110ParserInternal.mk_tokenSet_158_());

		// Token: 0x040008B4 RID: 2228
		public static readonly BitSet tokenSet_159_ = new BitSet(TSql110ParserInternal.mk_tokenSet_159_());

		// Token: 0x040008B5 RID: 2229
		public static readonly BitSet tokenSet_160_ = new BitSet(TSql110ParserInternal.mk_tokenSet_160_());

		// Token: 0x040008B6 RID: 2230
		public static readonly BitSet tokenSet_161_ = new BitSet(TSql110ParserInternal.mk_tokenSet_161_());

		// Token: 0x040008B7 RID: 2231
		public static readonly BitSet tokenSet_162_ = new BitSet(TSql110ParserInternal.mk_tokenSet_162_());

		// Token: 0x040008B8 RID: 2232
		public static readonly BitSet tokenSet_163_ = new BitSet(TSql110ParserInternal.mk_tokenSet_163_());

		// Token: 0x040008B9 RID: 2233
		public static readonly BitSet tokenSet_164_ = new BitSet(TSql110ParserInternal.mk_tokenSet_164_());

		// Token: 0x040008BA RID: 2234
		public static readonly BitSet tokenSet_165_ = new BitSet(TSql110ParserInternal.mk_tokenSet_165_());

		// Token: 0x040008BB RID: 2235
		public static readonly BitSet tokenSet_166_ = new BitSet(TSql110ParserInternal.mk_tokenSet_166_());

		// Token: 0x040008BC RID: 2236
		public static readonly BitSet tokenSet_167_ = new BitSet(TSql110ParserInternal.mk_tokenSet_167_());

		// Token: 0x040008BD RID: 2237
		public static readonly BitSet tokenSet_168_ = new BitSet(TSql110ParserInternal.mk_tokenSet_168_());

		// Token: 0x040008BE RID: 2238
		public static readonly BitSet tokenSet_169_ = new BitSet(TSql110ParserInternal.mk_tokenSet_169_());

		// Token: 0x040008BF RID: 2239
		public static readonly BitSet tokenSet_170_ = new BitSet(TSql110ParserInternal.mk_tokenSet_170_());

		// Token: 0x040008C0 RID: 2240
		public static readonly BitSet tokenSet_171_ = new BitSet(TSql110ParserInternal.mk_tokenSet_171_());

		// Token: 0x040008C1 RID: 2241
		public static readonly BitSet tokenSet_172_ = new BitSet(TSql110ParserInternal.mk_tokenSet_172_());

		// Token: 0x040008C2 RID: 2242
		public static readonly BitSet tokenSet_173_ = new BitSet(TSql110ParserInternal.mk_tokenSet_173_());

		// Token: 0x040008C3 RID: 2243
		public static readonly BitSet tokenSet_174_ = new BitSet(TSql110ParserInternal.mk_tokenSet_174_());

		// Token: 0x040008C4 RID: 2244
		public static readonly BitSet tokenSet_175_ = new BitSet(TSql110ParserInternal.mk_tokenSet_175_());

		// Token: 0x040008C5 RID: 2245
		public static readonly BitSet tokenSet_176_ = new BitSet(TSql110ParserInternal.mk_tokenSet_176_());
	}
}
