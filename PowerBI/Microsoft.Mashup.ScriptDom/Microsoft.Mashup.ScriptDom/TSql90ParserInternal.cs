using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using antlr;
using antlr.collections.impl;

namespace Microsoft.Mashup.ScriptDom
{
	// Token: 0x02000153 RID: 339
	internal class TSql90ParserInternal : TSql90ParserBaseInternal
	{
		// Token: 0x060017EB RID: 6123 RVA: 0x000C6E50 File Offset: 0x000C5050
		public TSql90ParserInternal(bool initialQuotedIdentifiersOn)
			: base(initialQuotedIdentifiersOn)
		{
			this.initialize();
		}

		// Token: 0x060017EC RID: 6124 RVA: 0x000C6E5F File Offset: 0x000C505F
		protected void initialize()
		{
			this.tokenNames = TSql90ParserInternal.tokenNames_;
		}

		// Token: 0x060017ED RID: 6125 RVA: 0x000C6E6C File Offset: 0x000C506C
		protected TSql90ParserInternal(TokenBuffer tokenBuf, int k)
			: base(tokenBuf, k)
		{
			this.initialize();
		}

		// Token: 0x060017EE RID: 6126 RVA: 0x000C6E7C File Offset: 0x000C507C
		public TSql90ParserInternal(TokenBuffer tokenBuf)
			: this(tokenBuf, 2)
		{
		}

		// Token: 0x060017EF RID: 6127 RVA: 0x000C6E86 File Offset: 0x000C5086
		protected TSql90ParserInternal(TokenStream lexer, int k)
			: base(lexer, k)
		{
			this.initialize();
		}

		// Token: 0x060017F0 RID: 6128 RVA: 0x000C6E96 File Offset: 0x000C5096
		public TSql90ParserInternal(TokenStream lexer)
			: this(lexer, 2)
		{
		}

		// Token: 0x060017F1 RID: 6129 RVA: 0x000C6EA0 File Offset: 0x000C50A0
		public TSql90ParserInternal(ParserSharedInputState state)
			: base(state, 2)
		{
			this.initialize();
		}

		// Token: 0x060017F2 RID: 6130 RVA: 0x000C6EB0 File Offset: 0x000C50B0
		public ChildObjectName entryPointChildObjectName()
		{
			ChildObjectName childObjectName = this.childObjectNameWithThreePrefixes();
			this.match(1);
			return childObjectName;
		}

		// Token: 0x060017F3 RID: 6131 RVA: 0x000C6ED0 File Offset: 0x000C50D0
		public ChildObjectName childObjectNameWithThreePrefixes()
		{
			ChildObjectName childObjectName = base.FragmentFactory.CreateFragment<ChildObjectName>();
			List<Identifier> list = this.identifierList(4);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(childObjectName, childObjectName.Identifiers, list);
			}
			return childObjectName;
		}

		// Token: 0x060017F4 RID: 6132 RVA: 0x000C6F0C File Offset: 0x000C510C
		public SchemaObjectName entryPointSchemaObjectName()
		{
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			this.match(1);
			return schemaObjectName;
		}

		// Token: 0x060017F5 RID: 6133 RVA: 0x000C6F2C File Offset: 0x000C512C
		public SchemaObjectName schemaObjectFourPartName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			List<Identifier> list = this.identifierList(4);
			if (this.inputState.guessing == 0)
			{
				foreach (Identifier identifier in list)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
				}
			}
			return schemaObjectName;
		}

		// Token: 0x060017F6 RID: 6134 RVA: 0x000C6FA4 File Offset: 0x000C51A4
		public DataTypeReference entryPointScalarDataType()
		{
			DataTypeReference dataTypeReference = this.scalarDataType();
			this.match(1);
			return dataTypeReference;
		}

		// Token: 0x060017F7 RID: 6135 RVA: 0x000C6FC4 File Offset: 0x000C51C4
		public DataTypeReference scalarDataType()
		{
			SqlDataTypeOption sqlDataTypeOption = SqlDataTypeOption.None;
			bool flag = false;
			int num = this.LA(1);
			DataTypeReference dataTypeReference;
			if (num != 53)
			{
				if (num != 96)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						SchemaObjectName schemaObjectName = this.dataTypeSchemaObjectName();
						if (this.inputState.guessing == 0 && (schemaObjectName.SchemaIdentifier == null || (schemaObjectName.SchemaIdentifier != null && TSql90ParserBaseInternal.IsSys(schemaObjectName.SchemaIdentifier))))
						{
							sqlDataTypeOption = TSql80ParserBaseInternal.ParseDataType(schemaObjectName.BaseIdentifier.Value);
							flag = TSql90ParserBaseInternal.IsXml(schemaObjectName.BaseIdentifier);
						}
						if (TSql90ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_1_.member(this.LA(2)) && flag)
						{
							dataTypeReference = this.xmlDataType(schemaObjectName);
						}
						else if (TSql90ParserInternal.tokenSet_2_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_1_.member(this.LA(2)) && sqlDataTypeOption != SqlDataTypeOption.None)
						{
							dataTypeReference = this.sqlDataTypeWithoutNational(schemaObjectName, sqlDataTypeOption);
						}
						else
						{
							if (!TSql90ParserInternal.tokenSet_0_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							dataTypeReference = this.userDataType(schemaObjectName);
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					dataTypeReference = this.sqlDataTypeWithNational();
				}
			}
			else
			{
				dataTypeReference = this.doubleDataType();
			}
			return dataTypeReference;
		}

		// Token: 0x060017F8 RID: 6136 RVA: 0x000C7130 File Offset: 0x000C5330
		public ScalarExpression entryPointExpression()
		{
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(1);
			return scalarExpression;
		}

		// Token: 0x060017F9 RID: 6137 RVA: 0x000C7150 File Offset: 0x000C5350
		public ScalarExpression expression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			return this.expressionBinaryPri2(expressionFlags);
		}

		// Token: 0x060017FA RID: 6138 RVA: 0x000C7168 File Offset: 0x000C5368
		public BooleanExpression entryPointBooleanExpression()
		{
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			this.match(1);
			return booleanExpression;
		}

		// Token: 0x060017FB RID: 6139 RVA: 0x000C7188 File Offset: 0x000C5388
		public BooleanExpression booleanExpression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			return this.booleanExpressionOr(expressionFlags);
		}

		// Token: 0x060017FC RID: 6140 RVA: 0x000C71A0 File Offset: 0x000C53A0
		public StatementList entryPointStatementList()
		{
			bool flag = false;
			StatementList statementList = this.statementList(ref flag);
			if (this.inputState.guessing == 0 && flag)
			{
				statementList = null;
			}
			this.match(1);
			return statementList;
		}

		// Token: 0x060017FD RID: 6141 RVA: 0x000C71D4 File Offset: 0x000C53D4
		public StatementList statementList(ref bool vParseErrorOccurred)
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			int num = 0;
			while (TSql90ParserInternal.tokenSet_3_.member(this.LA(1)))
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
					}
					else
					{
						vParseErrorOccurred = true;
					}
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return statementList;
		}

		// Token: 0x060017FE RID: 6142 RVA: 0x000C724C File Offset: 0x000C544C
		public SelectStatement entryPointSubqueryExpressionWithOptionalCTE()
		{
			SelectStatement selectStatement = this.subqueryExpressionWithOptionalCTE();
			this.match(1);
			return selectStatement;
		}

		// Token: 0x060017FF RID: 6143 RVA: 0x000C726C File Offset: 0x000C546C
		public SelectStatement subqueryExpressionWithOptionalCTE()
		{
			SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
			int num = this.LA(1);
			if (num != 140)
			{
				if (num != 171)
				{
					if (num != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
					if (this.inputState.guessing == 0)
					{
						selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
					}
				}
			}
			QueryExpression queryExpression = this.subqueryExpression();
			if (this.inputState.guessing == 0)
			{
				selectStatement.QueryExpression = queryExpression;
			}
			return selectStatement;
		}

		// Token: 0x06001800 RID: 6144 RVA: 0x000C72F4 File Offset: 0x000C54F4
		public IPv4 entryPointIPv4Address()
		{
			IPv4 pv = this.ipAddressV4();
			this.match(1);
			return pv;
		}

		// Token: 0x06001801 RID: 6145 RVA: 0x000C7314 File Offset: 0x000C5514
		public IPv4 ipAddressV4()
		{
			IPv4 pv = base.FragmentFactory.CreateFragment<IPv4>();
			switch (this.LA(1))
			{
			case 221:
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					pv.OctetOne = literal;
				}
				int num = this.LA(1);
				if (num != 200)
				{
					if (num != 222)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(222);
					if (this.inputState.guessing == 0)
					{
						pv.OctetTwo = base.GetIPv4FragmentFromDotNumberNumeric(token);
					}
					int num2 = this.LA(1);
					if (num2 != 200)
					{
						if (num2 != 222)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token2 = this.LT(1);
						this.match(222);
						this.ipV4DotNumberTail(pv);
						if (this.inputState.guessing == 0)
						{
							pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token2);
						}
					}
					else
					{
						this.ipV4DotLastTwoPartsTail(pv);
					}
				}
				else
				{
					this.match(200);
					switch (this.LA(1))
					{
					case 221:
					{
						Literal literal2 = this.integer();
						if (this.inputState.guessing == 0)
						{
							pv.OctetTwo = literal2;
						}
						int num3 = this.LA(1);
						if (num3 != 200)
						{
							if (num3 != 222)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							IToken token3 = this.LT(1);
							this.match(222);
							this.ipV4DotNumberTail(pv);
							if (this.inputState.guessing == 0)
							{
								pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token3);
							}
						}
						else
						{
							this.ipV4DotLastTwoPartsTail(pv);
						}
						break;
					}
					case 222:
					{
						IToken token4 = this.LT(1);
						this.match(222);
						int num4 = this.LA(1);
						if (num4 != 200)
						{
							switch (num4)
							{
							case 221:
							{
								Literal literal2 = this.integer();
								this.ipV4DotNumberTail(pv);
								if (this.inputState.guessing == 0)
								{
									pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token4);
									pv.OctetThree = literal2;
								}
								break;
							}
							case 222:
							{
								IToken token5 = this.LT(1);
								this.match(222);
								int num5 = this.LA(1);
								if (num5 <= 192)
								{
									if (num5 != 1 && num5 != 192)
									{
										goto IL_0657;
									}
								}
								else if (num5 != 202)
								{
									if (num5 != 221)
									{
										goto IL_0657;
									}
									Literal literal2 = this.integer();
									if (this.inputState.guessing == 0)
									{
										pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token4);
										pv.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token5);
										pv.OctetFour = literal2;
										break;
									}
									break;
								}
								if (this.inputState.guessing != 0)
								{
									break;
								}
								Literal literal3;
								Literal literal4;
								if (base.SplitNumericIntoIpParts(token4, out literal3, out literal4))
								{
									pv.OctetTwo = literal3;
									pv.OctetThree = literal4;
									pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token5);
									break;
								}
								base.GetIPv4FragmentsFromNumberDotNumberNumeric(token5, out literal3, out literal4);
								pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token4);
								pv.OctetThree = literal3;
								pv.OctetFour = literal4;
								break;
								IL_0657:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							default:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(200);
							Literal literal2 = this.integer();
							if (this.inputState.guessing == 0)
							{
								Literal literal3;
								Literal literal4;
								base.GetIPv4FragmentsFromNumberDotNumberNumeric(token4, out literal3, out literal4);
								pv.OctetTwo = literal3;
								pv.OctetThree = literal4;
								pv.OctetFour = literal2;
							}
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				break;
			}
			case 222:
			{
				IToken token6 = this.LT(1);
				this.match(222);
				int num6 = this.LA(1);
				if (num6 != 200)
				{
					switch (num6)
					{
					case 221:
					{
						Literal literal = this.integer();
						if (this.inputState.guessing == 0)
						{
							pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
							pv.OctetTwo = literal;
						}
						int num7 = this.LA(1);
						if (num7 != 200)
						{
							if (num7 != 222)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							IToken token7 = this.LT(1);
							this.match(222);
							this.ipV4DotNumberTail(pv);
							if (this.inputState.guessing == 0)
							{
								pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token7);
							}
						}
						else
						{
							this.ipV4DotLastTwoPartsTail(pv);
						}
						break;
					}
					case 222:
					{
						IToken token8 = this.LT(1);
						this.match(222);
						int num8 = this.LA(1);
						if (num8 != 200)
						{
							switch (num8)
							{
							case 221:
							{
								Literal literal = this.integer();
								this.ipV4DotNumberTail(pv);
								if (this.inputState.guessing == 0)
								{
									pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
									pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token8);
									pv.OctetThree = literal;
								}
								break;
							}
							case 222:
							{
								IToken token9 = this.LT(1);
								this.match(222);
								int num9 = this.LA(1);
								if (num9 <= 192)
								{
									if (num9 != 1 && num9 != 192)
									{
										goto IL_0226;
									}
								}
								else if (num9 != 202)
								{
									if (num9 != 221)
									{
										goto IL_0226;
									}
									Literal literal = this.integer();
									if (this.inputState.guessing == 0)
									{
										pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
										pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token8);
										pv.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token9);
										pv.OctetFour = literal;
										break;
									}
									break;
								}
								if (this.inputState.guessing != 0)
								{
									break;
								}
								Literal literal3;
								Literal literal4;
								if (base.SplitNumericIntoIpParts(token6, out literal3, out literal4))
								{
									pv.OctetOne = literal3;
									pv.OctetTwo = literal4;
									pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token8);
									pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token9);
									break;
								}
								if (base.SplitNumericIntoIpParts(token8, out literal3, out literal4))
								{
									pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
									pv.OctetTwo = literal3;
									pv.OctetThree = literal4;
									pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token9);
									break;
								}
								base.GetIPv4FragmentsFromNumberDotNumberNumeric(token9, out literal3, out literal4);
								pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
								pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token8);
								pv.OctetThree = literal3;
								pv.OctetFour = literal4;
								break;
								IL_0226:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							default:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(200);
							Literal literal = this.integer();
							if (this.inputState.guessing == 0)
							{
								Literal literal3;
								Literal literal4;
								if (base.SplitNumericIntoIpParts(token6, out literal3, out literal4))
								{
									pv.OctetOne = literal3;
									pv.OctetTwo = literal4;
									pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token8);
								}
								else
								{
									base.GetIPv4FragmentsFromNumberDotNumberNumeric(token8, out literal3, out literal4);
									pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
									pv.OctetTwo = literal3;
									pv.OctetThree = literal4;
								}
								pv.OctetFour = literal;
							}
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.ipV4DotLastTwoPartsTail(pv);
					if (this.inputState.guessing == 0)
					{
						Literal literal3;
						Literal literal4;
						base.GetIPv4FragmentsFromNumberDotNumberNumeric(token6, out literal3, out literal4);
						pv.OctetOne = literal3;
						pv.OctetTwo = literal4;
					}
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return pv;
		}

		// Token: 0x06001802 RID: 6146 RVA: 0x000C7AEC File Offset: 0x000C5CEC
		public TSqlFragment entryPointConstantOrIdentifier()
		{
			TSqlFragment tsqlFragment = this.possibleNegativeConstantOrIdentifier();
			this.match(1);
			return tsqlFragment;
		}

		// Token: 0x06001803 RID: 6147 RVA: 0x000C7B0C File Offset: 0x000C5D0C
		public ScalarExpression possibleNegativeConstantOrIdentifier()
		{
			int num = this.LA(1);
			if (num <= 193)
			{
				if (num != 100 && num != 193)
				{
					goto IL_007F;
				}
			}
			else if (num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_007F;
				case 232:
				case 233:
					return this.identifierLiteral();
				default:
					goto IL_007F;
				}
			}
			return this.possibleNegativeConstant();
			IL_007F:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001804 RID: 6148 RVA: 0x000C7BAC File Offset: 0x000C5DAC
		public TSqlFragment entryPointConstantOrIdentifierWithDefault()
		{
			TSqlFragment tsqlFragment = this.possibleNegativeConstantOrIdentifierWithDefault();
			this.match(1);
			return tsqlFragment;
		}

		// Token: 0x06001805 RID: 6149 RVA: 0x000C7BCC File Offset: 0x000C5DCC
		public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault()
		{
			int num = this.LA(1);
			if (num <= 100)
			{
				if (num == 47)
				{
					return this.defaultLiteral();
				}
				if (num != 100)
				{
					goto IL_0081;
				}
			}
			else if (num != 193 && num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_0081;
				default:
					goto IL_0081;
				}
			}
			return this.possibleNegativeConstantOrIdentifier();
			IL_0081:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001806 RID: 6150 RVA: 0x000C7C70 File Offset: 0x000C5E70
		public TSqlScript script()
		{
			TSqlScript tsqlScript = base.FragmentFactory.CreateFragment<TSqlScript>();
			if (tsqlScript.ScriptTokenStream != null && tsqlScript.ScriptTokenStream.Count > 0)
			{
				tsqlScript.UpdateTokenInfo(0, tsqlScript.ScriptTokenStream.Count - 1);
			}
			TSqlBatch tsqlBatch = this.batch();
			if (this.inputState.guessing == 0 && tsqlBatch != null)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlBatch>(tsqlScript, tsqlScript.Batches, tsqlBatch);
			}
			while (this.LA(1) == 219)
			{
				this.match(219);
				if (this.inputState.guessing == 0)
				{
					base.ResetQuotedIdentifiersSettingToInitial();
					base.ThrowPartialAstIfPhaseOne(null);
				}
				tsqlBatch = this.batch();
				if (this.inputState.guessing == 0 && tsqlBatch != null)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlBatch>(tsqlScript, tsqlScript.Batches, tsqlBatch);
				}
			}
			IToken token = this.LT(1);
			this.match(1);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlScript, token);
			}
			return tsqlScript;
		}

		// Token: 0x06001807 RID: 6151 RVA: 0x000C7D58 File Offset: 0x000C5F58
		public TSqlBatch batch()
		{
			TSqlBatch tsqlBatch = null;
			try
			{
				while (this.LA(1) == 204)
				{
					this.LT(1);
					this.match(204);
				}
				bool flag = false;
				if ((this.LA(1) == 6 || this.LA(1) == 35) && TSql90ParserInternal.tokenSet_4_.member(this.LA(2)))
				{
					int num = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						int num2 = this.LA(1);
						if (num2 == 6)
						{
							this.match(6);
							int num3 = this.LA(1);
							if (num3 <= 121)
							{
								if (num3 == 73)
								{
									this.match(73);
									goto IL_021E;
								}
								switch (num3)
								{
								case 120:
									this.match(120);
									goto IL_021E;
								case 121:
									this.match(121);
									goto IL_021E;
								}
							}
							else
							{
								if (num3 == 155)
								{
									this.match(155);
									goto IL_021E;
								}
								if (num3 == 166)
								{
									this.match(166);
									goto IL_021E;
								}
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						if (num2 == 35)
						{
							this.match(35);
							int num4 = this.LA(1);
							if (num4 <= 121)
							{
								if (num4 == 47)
								{
									this.match(47);
									goto IL_021E;
								}
								if (num4 == 73)
								{
									this.match(73);
									goto IL_021E;
								}
								switch (num4)
								{
								case 120:
									this.match(120);
									goto IL_021E;
								case 121:
									this.match(121);
									goto IL_021E;
								}
							}
							else
							{
								switch (num4)
								{
								case 137:
									this.match(137);
									goto IL_021E;
								case 138:
									break;
								case 139:
									this.match(139);
									goto IL_021E;
								default:
									if (num4 == 155)
									{
										this.match(155);
										goto IL_021E;
									}
									if (num4 == 166)
									{
										this.match(166);
										goto IL_021E;
									}
									break;
								}
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						throw new NoViableAltException(this.LT(1), this.getFilename());
						IL_021E:;
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(num);
					this.inputState.guessing--;
				}
				if (flag)
				{
					TSqlStatement tsqlStatement = this.lastStatementOptSemi();
					if (this.inputState.guessing == 0 && tsqlStatement != null)
					{
						if (tsqlBatch == null)
						{
							tsqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
						}
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(tsqlBatch, tsqlBatch.Statements, tsqlStatement);
					}
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_5_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_6_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					TSqlStatement tsqlStatement = this.optSimpleExecute();
					if (this.inputState.guessing == 0 && tsqlStatement != null)
					{
						base.ThrowPartialAstIfPhaseOne(tsqlStatement);
						if (tsqlBatch == null)
						{
							tsqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
						}
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(tsqlBatch, tsqlBatch.Statements, tsqlStatement);
					}
					while (TSql90ParserInternal.tokenSet_3_.member(this.LA(1)))
					{
						tsqlStatement = this.statementOptSemi();
						if (this.inputState.guessing == 0 && tsqlStatement != null)
						{
							if (tsqlBatch == null)
							{
								tsqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
							}
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(tsqlBatch, tsqlBatch.Statements, tsqlStatement);
						}
					}
				}
			}
			catch (TSqlParseErrorException ex)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (!ex.DoNotLog)
				{
					base.AddParseError(ex.ParseError);
				}
				base.RecoverAtBatchLevel();
			}
			catch (NoViableAltException ex2)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex2.token, ex2, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError);
				base.RecoverAtBatchLevel();
			}
			catch (MismatchedTokenException ex3)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError2 = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex3.token, ex3, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError2);
				base.RecoverAtBatchLevel();
			}
			catch (RecognitionException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError unexpectedTokenError = base.GetUnexpectedTokenError();
				base.AddParseError(unexpectedTokenError);
				base.RecoverAtBatchLevel();
			}
			catch (TokenStreamRecognitionException ex4)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError parseError = TSql80ParserBaseInternal.ProcessTokenStreamRecognitionException(ex4, this._tokenSource.LastToken.Offset);
				base.AddParseError(parseError);
				base.RecoverAtBatchLevel();
			}
			catch (ANTLRException ex5)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				base.CreateInternalError("batch", ex5);
			}
			return tsqlBatch;
		}

		// Token: 0x06001808 RID: 6152 RVA: 0x000C82A0 File Offset: 0x000C64A0
		public TSqlStatement lastStatementOptSemi()
		{
			TSqlStatement tsqlStatement = this.lastStatement();
			this.optSemicolons(tsqlStatement);
			return tsqlStatement;
		}

		// Token: 0x06001809 RID: 6153 RVA: 0x000C82C0 File Offset: 0x000C64C0
		public ExecuteStatement optSimpleExecute()
		{
			ExecuteStatement executeStatement = null;
			if (TSql90ParserInternal.tokenSet_7_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_8_.member(this.LA(2)) && !base.NextTokenMatches("DISABLE") && !base.NextTokenMatches("ENABLE") && !base.NextTokenMatches("MOVE") && !base.NextTokenMatches("GET") && !base.NextTokenMatches("RECEIVE") && !base.NextTokenMatches("SEND"))
			{
				ExecutableProcedureReference executableProcedureReference = this.execProc();
				if (this.inputState.guessing == 0)
				{
					executeStatement = base.FragmentFactory.CreateFragment<ExecuteStatement>();
					ExecuteSpecification executeSpecification = base.FragmentFactory.CreateFragment<ExecuteSpecification>();
					executeSpecification.ExecutableEntity = executableProcedureReference;
					executeStatement.ExecuteSpecification = executeSpecification;
				}
				this.optSemicolons(executeStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_9_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executeStatement;
		}

		// Token: 0x0600180A RID: 6154 RVA: 0x000C83CC File Offset: 0x000C65CC
		public TSqlStatement statementOptSemi()
		{
			TSqlStatement tsqlStatement = this.statement();
			this.optSemicolons(tsqlStatement);
			return tsqlStatement;
		}

		// Token: 0x0600180B RID: 6155 RVA: 0x000C83EC File Offset: 0x000C65EC
		public TSqlStatement statement()
		{
			TSqlStatement tsqlStatement = null;
			int line = this.LT(1).getLine();
			int column = this.LT(1).getColumn();
			try
			{
				int num = this.LA(1);
				if (num > 95)
				{
					if (num <= 162)
					{
						if (num <= 134)
						{
							if (num == 106)
							{
								tsqlStatement = this.openStatements();
								goto IL_0661;
							}
							if (num == 119)
							{
								tsqlStatement = this.printStatement();
								goto IL_0661;
							}
							switch (num)
							{
							case 123:
								tsqlStatement = this.raiseErrorStatements();
								goto IL_0661;
							case 124:
							case 127:
							case 128:
							case 130:
							case 133:
								goto IL_043A;
							case 125:
								tsqlStatement = this.readTextStatement();
								goto IL_0661;
							case 126:
								tsqlStatement = this.reconfigureStatement();
								goto IL_0661;
							case 129:
								break;
							case 131:
								tsqlStatement = this.returnStatement();
								goto IL_0661;
							case 132:
								tsqlStatement = this.revokeStatement90();
								goto IL_0661;
							case 134:
								tsqlStatement = this.rollbackTransactionStatement();
								goto IL_0661;
							default:
								goto IL_043A;
							}
						}
						else
						{
							switch (num)
							{
							case 138:
								tsqlStatement = this.saveTransactionStatement();
								goto IL_0661;
							case 139:
							case 140:
							case 141:
								goto IL_043A;
							case 142:
								tsqlStatement = this.setStatements();
								goto IL_0661;
							case 143:
								tsqlStatement = this.setUserStatement();
								goto IL_0661;
							case 144:
								tsqlStatement = this.shutdownStatement();
								goto IL_0661;
							default:
								if (num == 156)
								{
									tsqlStatement = this.truncateTableStatement();
									goto IL_0661;
								}
								switch (num)
								{
								case 161:
									tsqlStatement = this.updateTextStatement();
									goto IL_0661;
								case 162:
									tsqlStatement = this.useStatement();
									goto IL_0661;
								default:
									goto IL_043A;
								}
								break;
							}
						}
					}
					else if (num <= 176)
					{
						if (num == 167)
						{
							tsqlStatement = this.waitForStatement();
							goto IL_0661;
						}
						switch (num)
						{
						case 170:
							tsqlStatement = this.whileStatement();
							goto IL_0661;
						case 171:
							goto IL_043A;
						case 172:
							tsqlStatement = this.writeTextStatement();
							goto IL_0661;
						default:
							if (num != 176)
							{
								goto IL_043A;
							}
							tsqlStatement = this.revertStatement();
							goto IL_0661;
						}
					}
					else
					{
						switch (num)
						{
						case 180:
							goto IL_0296;
						case 181:
							break;
						default:
							if (num == 220)
							{
								tsqlStatement = this.labelStatement();
								goto IL_0661;
							}
							if (num != 232)
							{
								goto IL_043A;
							}
							tsqlStatement = this.identifierStatements();
							goto IL_0661;
						}
					}
					tsqlStatement = this.restoreStatements();
					goto IL_0661;
				}
				if (num <= 49)
				{
					if (num <= 23)
					{
						if (num == 4)
						{
							tsqlStatement = this.addSignatureStatement();
							goto IL_0661;
						}
						switch (num)
						{
						case 12:
							break;
						case 13:
							tsqlStatement = this.beginStatements();
							goto IL_0661;
						case 14:
						case 16:
							goto IL_043A;
						case 15:
							tsqlStatement = this.breakStatement();
							goto IL_0661;
						case 17:
							tsqlStatement = this.bulkInsertStatement();
							goto IL_0661;
						default:
							switch (num)
							{
							case 22:
								tsqlStatement = this.checkpointStatement();
								goto IL_0661;
							case 23:
								tsqlStatement = this.closeStatements();
								goto IL_0661;
							default:
								goto IL_043A;
							}
							break;
						}
					}
					else
					{
						if (num == 28)
						{
							tsqlStatement = this.commitTransactionStatement();
							goto IL_0661;
						}
						if (num == 33)
						{
							tsqlStatement = this.continueStatement();
							goto IL_0661;
						}
						switch (num)
						{
						case 44:
							tsqlStatement = this.dbccStatement();
							goto IL_0661;
						case 45:
							tsqlStatement = this.deallocateCursorStatement();
							goto IL_0661;
						case 46:
							tsqlStatement = this.declareStatements();
							goto IL_0661;
						case 47:
						case 48:
							goto IL_043A;
						case 49:
							tsqlStatement = this.denyStatement90();
							goto IL_0661;
						default:
							goto IL_043A;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 54:
						tsqlStatement = this.dropStatements();
						goto IL_0661;
					case 55:
						goto IL_043A;
					case 56:
						tsqlStatement = this.endConversationStatement();
						goto IL_0661;
					default:
						if (num == 64)
						{
							tsqlStatement = this.fetchCursorStatement();
							goto IL_0661;
						}
						switch (num)
						{
						case 74:
							tsqlStatement = this.gotoStatement();
							goto IL_0661;
						case 75:
							tsqlStatement = this.grantStatement90();
							goto IL_0661;
						default:
							goto IL_043A;
						}
						break;
					}
				}
				else
				{
					if (num == 82)
					{
						tsqlStatement = this.ifStatement();
						goto IL_0661;
					}
					if (num == 92)
					{
						tsqlStatement = this.killStatements();
						goto IL_0661;
					}
					if (num != 95)
					{
						goto IL_043A;
					}
					tsqlStatement = this.lineNoStatement();
					goto IL_0661;
				}
				IL_0296:
				tsqlStatement = this.backupStatements();
				goto IL_0661;
				IL_043A:
				if (this.LA(1) == 35 && this.LA(2) == 148)
				{
					tsqlStatement = this.createTableStatement();
				}
				else if (this.LA(1) == 6 && this.LA(2) == 148)
				{
					tsqlStatement = this.alterTableStatement();
				}
				else if (this.LA(1) == 35 && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					tsqlStatement = this.createIndexStatement();
				}
				else if (this.LA(1) == 35 && this.LA(2) == 146)
				{
					tsqlStatement = this.createStatisticsStatement();
				}
				else if (this.LA(1) == 160 && this.LA(2) == 146)
				{
					tsqlStatement = this.updateStatisticsStatement();
				}
				else if (this.LA(1) == 6 && this.LA(2) == 43)
				{
					tsqlStatement = this.alterDatabaseStatements();
				}
				else if ((this.LA(1) == 60 || this.LA(1) == 61) && TSql90ParserInternal.tokenSet_12_.member(this.LA(2)))
				{
					tsqlStatement = this.executeStatement();
				}
				else if (TSql90ParserInternal.tokenSet_13_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_14_.member(this.LA(2)))
				{
					tsqlStatement = this.withCommonTableExpressionsAndXmlNamespacesStatements();
				}
				else if (this.LA(1) == 6 && TSql90ParserInternal.tokenSet_15_.member(this.LA(2)))
				{
					tsqlStatement = this.alter2005Statements();
				}
				else if (this.LA(1) == 35 && (this.LA(2) == 118 || this.LA(2) == 163 || this.LA(2) == 232))
				{
					tsqlStatement = this.create2005Statements();
				}
				else if (this.LA(1) == 35 && this.LA(2) == 43)
				{
					tsqlStatement = this.createDatabaseStatement();
				}
				else if (this.LA(1) == 86 && this.LA(2) == 17)
				{
					tsqlStatement = this.insertBulkStatement();
				}
				else
				{
					if ((this.LA(1) != 60 && this.LA(1) != 61) || this.LA(2) != 9)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					tsqlStatement = this.executeAsStatement();
				}
				IL_0661:;
			}
			catch (TSqlParseErrorException ex)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (!ex.DoNotLog)
				{
					base.AddParseError(ex.ParseError);
				}
				base.RecoverAtStatementLevel(line, column);
			}
			catch (NoViableAltException ex2)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex2.token, ex2, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (MismatchedTokenException ex3)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError2 = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex3.token, ex3, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError2);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (RecognitionException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError unexpectedTokenError = base.GetUnexpectedTokenError();
				base.AddParseError(unexpectedTokenError);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (TokenStreamRecognitionException ex4)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError parseError = TSql80ParserBaseInternal.ProcessTokenStreamRecognitionException(ex4, this._tokenSource.LastToken.Offset);
				base.AddParseError(parseError);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (ANTLRException ex5)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				base.CreateInternalError("statement", ex5);
			}
			return tsqlStatement;
		}

		// Token: 0x0600180C RID: 6156 RVA: 0x000C8C44 File Offset: 0x000C6E44
		public void optSemicolons(TSqlStatement vParent)
		{
			int num = 0;
			while (this.LA(1) == 204 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				IToken token = this.LT(1);
				this.match(204);
				if (this.inputState.guessing == 0)
				{
					num++;
					if (vParent != null)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					}
				}
			}
		}

		// Token: 0x0600180D RID: 6157 RVA: 0x000C8CA8 File Offset: 0x000C6EA8
		public TSqlStatement lastStatement()
		{
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 35 && (this.LA(2) == 120 || this.LA(2) == 121))
			{
				tsqlStatement = this.createProcedureStatement();
			}
			else if (this.LA(1) == 6 && (this.LA(2) == 120 || this.LA(2) == 121))
			{
				tsqlStatement = this.alterProcedureStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 155)
			{
				tsqlStatement = this.createTriggerStatement();
			}
			else if (this.LA(1) == 6 && this.LA(2) == 155)
			{
				tsqlStatement = this.alterTriggerStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 47)
			{
				tsqlStatement = this.createDefaultStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 137)
			{
				tsqlStatement = this.createRuleStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 166)
			{
				tsqlStatement = this.createViewStatement();
			}
			else if (this.LA(1) == 6 && this.LA(2) == 166)
			{
				tsqlStatement = this.alterViewStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 73)
			{
				tsqlStatement = this.createFunctionStatement();
			}
			else if (this.LA(1) == 6 && this.LA(2) == 73)
			{
				tsqlStatement = this.alterFunctionStatement();
			}
			else
			{
				if (this.LA(1) != 35 || this.LA(2) != 139)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createSchemaStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x0600180E RID: 6158 RVA: 0x000C8E5C File Offset: 0x000C705C
		public ExecutableProcedureReference execProc()
		{
			ExecutableProcedureReference executableProcedureReference = base.FragmentFactory.CreateFragment<ExecutableProcedureReference>();
			int num = this.LA(1);
			ProcedureReferenceName procedureReferenceName;
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
					procedureReferenceName = this.varObjectReference();
					goto IL_005B;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			procedureReferenceName = this.procObjectReference();
			IL_005B:
			if (this.inputState.guessing == 0)
			{
				executableProcedureReference.ProcedureReference = procedureReferenceName;
			}
			if (TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_18_.member(this.LA(2)))
			{
				this.setParamList(executableProcedureReference);
			}
			else if (!TSql90ParserInternal.tokenSet_19_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executableProcedureReference;
		}

		// Token: 0x0600180F RID: 6159 RVA: 0x000C8F44 File Offset: 0x000C7144
		public CreateTableStatement createTableStatement()
		{
			CreateTableStatement createTableStatement = base.FragmentFactory.CreateFragment<CreateTableStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(148);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTableStatement, token);
				createTableStatement.SchemaObjectName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createTableStatement);
			}
			this.match(191);
			TableDefinition tableDefinition = this.tableDefinitionCreateTable();
			if (this.inputState.guessing == 0)
			{
				createTableStatement.Definition = tableDefinition;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTableStatement, token2);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0364;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0364;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0364;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								goto IL_0364;
							default:
								if (num == 28)
								{
									goto IL_0364;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						goto IL_0364;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_0364;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								goto IL_0364;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0364;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						goto IL_0364;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
						if (this.inputState.guessing == 0)
						{
							createTableStatement.OnFileGroupOrPartitionScheme = fileGroupOrPartitionScheme;
							goto IL_0364;
						}
						goto IL_0364;
					}
					case 106:
						goto IL_0364;
					default:
						if (num == 119)
						{
							goto IL_0364;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0364;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0364;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0364;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_0364;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_0364;
				default:
					if (num == 191)
					{
						goto IL_0364;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0364;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0364;
				default:
					if (num == 232)
					{
						goto IL_0364;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0364:
			if (this.LA(1) == 232 && this.LA(2) >= 230 && this.LA(2) <= 233)
			{
				IToken token3 = this.LT(1);
				this.match(232);
				IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "TEXTIMAGE_ON");
					createTableStatement.TextImageOn = identifierOrValueExpression;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createTableStatement;
		}

		// Token: 0x06001810 RID: 6160 RVA: 0x000C9358 File Offset: 0x000C7558
		public AlterTableStatement alterTableStatement()
		{
			AlterTableStatement alterTableStatement = null;
			IToken token = null;
			SchemaObjectName schemaObjectName = null;
			ConstraintEnforcement constraintEnforcement = ConstraintEnforcement.NotSpecified;
			try
			{
				token = this.LT(1);
				this.match(6);
				this.match(148);
				schemaObjectName = this.schemaObjectThreePartName();
				int num = this.LA(1);
				if (num <= 21)
				{
					switch (num)
					{
					case 4:
						break;
					case 5:
						goto IL_0122;
					case 6:
						alterTableStatement = this.alterTableAlterColumnStatement();
						goto IL_018D;
					default:
						if (num != 21)
						{
							goto IL_0122;
						}
						break;
					}
				}
				else
				{
					if (num == 54)
					{
						alterTableStatement = this.alterTableDropTableElementStatement();
						goto IL_018D;
					}
					if (num != 97 && num != 171)
					{
						goto IL_0122;
					}
				}
				int num2 = this.LA(1);
				if (num2 <= 21)
				{
					if (num2 == 4 || num2 == 21)
					{
						goto IL_00DC;
					}
				}
				else
				{
					if (num2 == 97)
					{
						goto IL_00DC;
					}
					if (num2 == 171)
					{
						this.match(171);
						constraintEnforcement = this.constraintEnforcement();
						goto IL_00DC;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_00DC:
				int num3 = this.LA(1);
				if (num3 == 4)
				{
					alterTableStatement = this.alterTableAddTableElementStatement(constraintEnforcement);
					goto IL_018D;
				}
				if (num3 != 21 && num3 != 97)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				alterTableStatement = this.alterTableConstraintModificationStatement(constraintEnforcement);
				goto IL_018D;
				IL_0122:
				if (this.LA(1) == 232 && this.LA(2) == 155)
				{
					alterTableStatement = this.alterTableTriggerModificationStatement();
				}
				else
				{
					if (this.LA(1) != 232 || (this.LA(2) != 151 && this.LA(2) != 232))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					alterTableStatement = this.alterTableSwitchStatement();
				}
				IL_018D:
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableStatement, token);
					alterTableStatement.SchemaObjectName = schemaObjectName;
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					AlterTableStatement alterTableStatement2 = ex.Statement as AlterTableStatement;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableStatement2, token);
					alterTableStatement2.SchemaObjectName = schemaObjectName;
					throw;
				}
				throw;
			}
			return alterTableStatement;
		}

		// Token: 0x06001811 RID: 6161 RVA: 0x000C9560 File Offset: 0x000C7760
		public CreateIndexStatement createIndexStatement()
		{
			CreateIndexStatement createIndexStatement = base.FragmentFactory.CreateFragment<CreateIndexStatement>();
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createIndexStatement, token);
			}
			int num = this.LA(1);
			if (num <= 84)
			{
				if (num == 24 || num == 84)
				{
					goto IL_0094;
				}
			}
			else
			{
				if (num == 98)
				{
					goto IL_0094;
				}
				if (num == 159)
				{
					this.match(159);
					if (this.inputState.guessing == 0)
					{
						createIndexStatement.Unique = true;
						goto IL_0094;
					}
					goto IL_0094;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0094:
			int num2 = this.LA(1);
			if (num2 != 24)
			{
				if (num2 != 84)
				{
					if (num2 != 98)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(98);
					if (this.inputState.guessing == 0)
					{
						createIndexStatement.Clustered = new bool?(false);
					}
				}
			}
			else
			{
				this.match(24);
				if (this.inputState.guessing == 0)
				{
					createIndexStatement.Clustered = new bool?(true);
				}
			}
			this.match(84);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createIndexStatement.Name = identifier;
			}
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				createIndexStatement.OnName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createIndexStatement);
			}
			this.match(191);
			ColumnWithSortOrder columnWithSortOrder = this.columnWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(createIndexStatement, createIndexStatement.Columns, columnWithSortOrder);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnWithSortOrder = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(createIndexStatement, createIndexStatement.Columns, columnWithSortOrder);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createIndexStatement, token2);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("INCLUDE"))
			{
				this.LT(1);
				this.match(232);
				this.identifierColumnList(createIndexStatement, createIndexStatement.IncludeColumns);
			}
			else if (!TSql90ParserInternal.tokenSet_20_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && (this.LA(2) == 66 || this.LA(2) == 191 || this.LA(2) == 232))
			{
				this.match(171);
				int num3 = this.LA(1);
				if (num3 != 66)
				{
					if (num3 == 191)
					{
						this.indexOptionList(IndexAffectingStatement.CreateIndex, createIndexStatement.IndexOptions, createIndexStatement);
						goto IL_034D;
					}
					if (num3 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				this.indexLegacyOptionList(createIndexStatement);
				if (this.inputState.guessing == 0)
				{
					createIndexStatement.Translated80SyntaxTo90 = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_20_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IL_034D:
			int num4 = this.LA(1);
			if (num4 <= 92)
			{
				if (num4 <= 28)
				{
					if (num4 <= 6)
					{
						if (num4 == 1)
						{
							return createIndexStatement;
						}
						switch (num4)
						{
						case 4:
						case 6:
							return createIndexStatement;
						}
					}
					else
					{
						switch (num4)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return createIndexStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num4)
							{
							case 22:
							case 23:
								return createIndexStatement;
							default:
								if (num4 == 28)
								{
									return createIndexStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num4 <= 75)
				{
					switch (num4)
					{
					case 33:
					case 35:
						return createIndexStatement;
					case 34:
						break;
					default:
						switch (num4)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createIndexStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num4)
							{
							case 74:
							case 75:
								return createIndexStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num4 == 82 || num4 == 86 || num4 == 92)
				{
					return createIndexStatement;
				}
			}
			else if (num4 <= 172)
			{
				if (num4 <= 119)
				{
					if (num4 == 95)
					{
						return createIndexStatement;
					}
					switch (num4)
					{
					case 105:
					{
						this.match(105);
						FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
						if (this.inputState.guessing == 0)
						{
							createIndexStatement.OnFileGroupOrPartitionScheme = fileGroupOrPartitionScheme;
							return createIndexStatement;
						}
						return createIndexStatement;
					}
					case 106:
						return createIndexStatement;
					default:
						if (num4 == 119)
						{
							return createIndexStatement;
						}
						break;
					}
				}
				else
				{
					switch (num4)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createIndexStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num4)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createIndexStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num4)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createIndexStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num4 <= 191)
			{
				if (num4 == 176)
				{
					return createIndexStatement;
				}
				switch (num4)
				{
				case 180:
				case 181:
					return createIndexStatement;
				default:
					if (num4 == 191)
					{
						return createIndexStatement;
					}
					break;
				}
			}
			else
			{
				if (num4 == 204)
				{
					return createIndexStatement;
				}
				switch (num4)
				{
				case 219:
				case 220:
					return createIndexStatement;
				default:
					if (num4 == 232)
					{
						return createIndexStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001812 RID: 6162 RVA: 0x000C9B78 File Offset: 0x000C7D78
		public TSqlStatement declareStatements()
		{
			TSqlStatement tsqlStatement = null;
			IToken token = null;
			token = this.LT(1);
			this.match(46);
			bool flag = false;
			if (this.LA(1) == 234 && (this.LA(2) == 9 || this.LA(2) == 148))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(234);
					int num2 = this.LA(1);
					if (num2 != 9)
					{
						if (num2 != 148)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					this.match(148);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				DeclareTableVariableBody declareTableVariableBody = this.declareTableBody(IndexAffectingStatement.DeclareTableVariable);
				if (this.inputState.guessing == 0)
				{
					DeclareTableVariableStatement declareTableVariableStatement = base.FragmentFactory.CreateFragment<DeclareTableVariableStatement>();
					declareTableVariableStatement.Body = declareTableVariableBody;
					tsqlStatement = declareTableVariableStatement;
				}
			}
			else if (this.LA(1) == 234 && TSql90ParserInternal.tokenSet_21_.member(this.LA(2)))
			{
				tsqlStatement = this.declareVariableStatement();
			}
			else
			{
				if (this.LA(1) != 232 && this.LA(1) != 233)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.declareCursorStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06001813 RID: 6163 RVA: 0x000C9D10 File Offset: 0x000C7F10
		public TSqlStatement setStatements()
		{
			IToken token = this.LT(1);
			this.match(142);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 135)
			{
				if (num <= 80)
				{
					if (num == 57)
					{
						tsqlStatement = this.setErrorLevelStatement();
						goto IL_016E;
					}
					if (num == 80)
					{
						tsqlStatement = this.setIdentityInsertStatement();
						goto IL_016E;
					}
				}
				else
				{
					if (num == 104)
					{
						tsqlStatement = this.setOffsetsStatement();
						goto IL_016E;
					}
					if (num == 135)
					{
						tsqlStatement = this.setRowcountStatement();
						goto IL_016E;
					}
				}
			}
			else if (num <= 149)
			{
				if (num == 146)
				{
					tsqlStatement = this.setStatisticsStatement();
					goto IL_016E;
				}
				if (num == 149)
				{
					tsqlStatement = this.setTextSizeStatement();
					goto IL_016E;
				}
			}
			else
			{
				switch (num)
				{
				case 153:
				case 154:
					tsqlStatement = this.setTransactionIsolationLevelStatement();
					goto IL_016E;
				default:
					if (num == 234)
					{
						tsqlStatement = this.setVariableStatement();
						goto IL_016E;
					}
					break;
				}
			}
			if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 105 || this.LA(2) == 198) && !base.NextTokenMatches("FIPS_FLAGGER"))
			{
				tsqlStatement = this.predicateSetStatement();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_22_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.setCommandStatement();
			}
			IL_016E:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06001814 RID: 6164 RVA: 0x000C9EA0 File Offset: 0x000C80A0
		public TSqlStatement beginStatements()
		{
			bool flag = false;
			if (this.LA(1) == 13 && (this.LA(2) == 52 || this.LA(2) == 153 || this.LA(2) == 154))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(13);
					int num2 = this.LA(1);
					if (num2 != 52)
					{
						switch (num2)
						{
						case 153:
						case 154:
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(52);
					}
					switch (this.LA(1))
					{
					case 153:
						this.match(153);
						break;
					case 154:
						this.match(154);
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			TSqlStatement tsqlStatement;
			if (flag)
			{
				tsqlStatement = this.beginTransactionStatement();
			}
			else if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("TRY", 2))
			{
				tsqlStatement = this.tryCatchStatement();
			}
			else if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("CONVERSATION", 2))
			{
				tsqlStatement = this.beginConversationTimerStatement();
			}
			else if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("DIALOG", 2))
			{
				tsqlStatement = this.beginDialogStatement();
			}
			else
			{
				if (this.LA(1) != 13 || !TSql90ParserInternal.tokenSet_23_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.beginEndBlockStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06001815 RID: 6165 RVA: 0x000CA0A8 File Offset: 0x000C82A8
		public BreakStatement breakStatement()
		{
			BreakStatement breakStatement = base.FragmentFactory.CreateFragment<BreakStatement>();
			IToken token = this.LT(1);
			this.match(15);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(breakStatement, token);
			}
			return breakStatement;
		}

		// Token: 0x06001816 RID: 6166 RVA: 0x000CA0E8 File Offset: 0x000C82E8
		public ContinueStatement continueStatement()
		{
			ContinueStatement continueStatement = base.FragmentFactory.CreateFragment<ContinueStatement>();
			IToken token = this.LT(1);
			this.match(33);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(continueStatement, token);
			}
			return continueStatement;
		}

		// Token: 0x06001817 RID: 6167 RVA: 0x000CA128 File Offset: 0x000C8328
		public IfStatement ifStatement()
		{
			IfStatement ifStatement = base.FragmentFactory.CreateFragment<IfStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(82);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(ifStatement, token);
			}
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				ifStatement.Predicate = booleanExpression;
			}
			TSqlStatement tsqlStatement = this.statementOptSemi();
			if (this.inputState.guessing == 0)
			{
				if (tsqlStatement == null)
				{
					flag = true;
				}
				else
				{
					ifStatement.ThenStatement = tsqlStatement;
				}
			}
			if (this.LA(1) == 55 && TSql90ParserInternal.tokenSet_3_.member(this.LA(2)))
			{
				this.match(55);
				tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement == null)
					{
						flag = true;
					}
					else
					{
						ifStatement.ElseStatement = tsqlStatement;
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0 && flag)
			{
				ifStatement = null;
			}
			return ifStatement;
		}

		// Token: 0x06001818 RID: 6168 RVA: 0x000CA244 File Offset: 0x000C8444
		public WhileStatement whileStatement()
		{
			WhileStatement whileStatement = base.FragmentFactory.CreateFragment<WhileStatement>();
			IToken token = this.LT(1);
			this.match(170);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(whileStatement, token);
			}
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				whileStatement.Predicate = booleanExpression;
			}
			TSqlStatement tsqlStatement = this.statementOptSemi();
			if (this.inputState.guessing == 0)
			{
				if (tsqlStatement == null)
				{
					whileStatement = null;
				}
				else
				{
					whileStatement.Statement = tsqlStatement;
				}
			}
			return whileStatement;
		}

		// Token: 0x06001819 RID: 6169 RVA: 0x000CA2C8 File Offset: 0x000C84C8
		public LabelStatement labelStatement()
		{
			LabelStatement labelStatement = base.FragmentFactory.CreateFragment<LabelStatement>();
			IToken token = this.LT(1);
			this.match(220);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(labelStatement, token);
				labelStatement.Value = token.getText();
			}
			return labelStatement;
		}

		// Token: 0x0600181A RID: 6170 RVA: 0x000CA318 File Offset: 0x000C8518
		public TSqlStatement backupStatements()
		{
			IToken token = this.backupStart();
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
			{
				tsqlStatement = this.backupCertificateStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.backupServiceMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				tsqlStatement = this.backupMasterKeyStatement();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_24_.member(this.LA(1)) || this.LA(2) < 232 || this.LA(2) > 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.backupStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x0600181B RID: 6171 RVA: 0x000CA424 File Offset: 0x000C8624
		public TSqlStatement restoreStatements()
		{
			IToken token = this.restoreStart();
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.restoreServiceMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				tsqlStatement = this.restoreMasterKeyStatement();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_24_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_25_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.restoreStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x0600181C RID: 6172 RVA: 0x000CA4E4 File Offset: 0x000C86E4
		public GoToStatement gotoStatement()
		{
			GoToStatement goToStatement = base.FragmentFactory.CreateFragment<GoToStatement>();
			IToken token = this.LT(1);
			this.match(74);
			Identifier identifier = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(goToStatement, token);
				goToStatement.LabelName = identifier;
			}
			return goToStatement;
		}

		// Token: 0x0600181D RID: 6173 RVA: 0x000CA534 File Offset: 0x000C8734
		public SaveTransactionStatement saveTransactionStatement()
		{
			SaveTransactionStatement saveTransactionStatement = base.FragmentFactory.CreateFragment<SaveTransactionStatement>();
			IToken token = this.LT(1);
			this.match(138);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(saveTransactionStatement, token);
			}
			switch (this.LA(1))
			{
			case 153:
				this.match(153);
				break;
			case 154:
				this.match(154);
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.transactionName(saveTransactionStatement);
			return saveTransactionStatement;
		}

		// Token: 0x0600181E RID: 6174 RVA: 0x000CA5CC File Offset: 0x000C87CC
		public RollbackTransactionStatement rollbackTransactionStatement()
		{
			RollbackTransactionStatement rollbackTransactionStatement = base.FragmentFactory.CreateFragment<RollbackTransactionStatement>();
			IToken token = this.LT(1);
			this.match(134);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token);
			}
			bool flag = false;
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(232);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "WORK");
				}
			}
			else if (this.LA(1) == 153 || this.LA(1) == 154)
			{
				switch (this.LA(1))
				{
				case 153:
				{
					IToken token3 = this.LT(1);
					this.match(153);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token3);
					}
					break;
				}
				case 154:
				{
					IToken token4 = this.LT(1);
					this.match(154);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token4);
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (TSql90ParserInternal.tokenSet_26_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_27_.member(this.LA(2)))
				{
					this.transactionName(rollbackTransactionStatement);
				}
				else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return rollbackTransactionStatement;
		}

		// Token: 0x0600181F RID: 6175 RVA: 0x000CA814 File Offset: 0x000C8A14
		public CommitTransactionStatement commitTransactionStatement()
		{
			CommitTransactionStatement commitTransactionStatement = base.FragmentFactory.CreateFragment<CommitTransactionStatement>();
			IToken token = this.LT(1);
			this.match(28);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token);
			}
			bool flag = false;
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(232);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "WORK");
				}
			}
			else if (this.LA(1) == 153 || this.LA(1) == 154)
			{
				switch (this.LA(1))
				{
				case 153:
				{
					IToken token3 = this.LT(1);
					this.match(153);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token3);
					}
					break;
				}
				case 154:
				{
					IToken token4 = this.LT(1);
					this.match(154);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token4);
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (TSql90ParserInternal.tokenSet_26_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_27_.member(this.LA(2)))
				{
					this.transactionName(commitTransactionStatement);
				}
				else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return commitTransactionStatement;
		}

		// Token: 0x06001820 RID: 6176 RVA: 0x000CAA5C File Offset: 0x000C8C5C
		public CreateStatisticsStatement createStatisticsStatement()
		{
			CreateStatisticsStatement createStatisticsStatement = base.FragmentFactory.CreateFragment<CreateStatisticsStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			IToken token2 = this.LT(1);
			this.match(146);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createStatisticsStatement, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(createStatisticsStatement, token2);
				createStatisticsStatement.Name = identifier;
			}
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				createStatisticsStatement.OnName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createStatisticsStatement);
			}
			this.identifierColumnList(createStatisticsStatement, createStatisticsStatement.Columns);
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				StatisticsOption statisticsOption = this.createStatisticsStatementWithOption(ref flag);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(createStatisticsStatement, createStatisticsStatement.StatisticsOptions, statisticsOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					statisticsOption = this.createStatisticsStatementWithOption(ref flag);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(createStatisticsStatement, createStatisticsStatement.StatisticsOptions, statisticsOption);
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createStatisticsStatement;
		}

		// Token: 0x06001821 RID: 6177 RVA: 0x000CABC8 File Offset: 0x000C8DC8
		public UpdateStatisticsStatement updateStatisticsStatement()
		{
			UpdateStatisticsStatement updateStatisticsStatement = base.FragmentFactory.CreateFragment<UpdateStatisticsStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(160);
			this.match(146);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateStatisticsStatement, token);
				updateStatisticsStatement.SchemaObjectName = schemaObjectName;
			}
			bool flag2 = false;
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				int num = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.identifier();
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				this.columnNameList(updateStatisticsStatement, updateStatisticsStatement.SubElements);
			}
			else if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(updateStatisticsStatement, updateStatisticsStatement.SubElements, identifier);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && TSql90ParserInternal.tokenSet_28_.member(this.LA(2)))
			{
				this.match(171);
				StatisticsOption statisticsOption = this.updateStatisticsStatementWithOption(ref flag);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(updateStatisticsStatement, updateStatisticsStatement.StatisticsOptions, statisticsOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					statisticsOption = this.updateStatisticsStatementWithOption(ref flag);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(updateStatisticsStatement, updateStatisticsStatement.StatisticsOptions, statisticsOption);
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return updateStatisticsStatement;
		}

		// Token: 0x06001822 RID: 6178 RVA: 0x000CAE28 File Offset: 0x000C9028
		public AlterDatabaseStatement alterDatabaseStatements()
		{
			AlterDatabaseStatement alterDatabaseStatement = null;
			IToken token = null;
			Identifier identifier = null;
			try
			{
				token = this.LT(1);
				this.match(6);
				this.match(43);
				int num = this.LA(1);
				if (num != 226)
				{
					switch (num)
					{
					case 232:
					case 233:
						identifier = this.identifier();
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					identifier = this.sqlCommandIdentifier();
				}
				int num2 = this.LA(1);
				if (num2 != 4)
				{
					if (num2 != 26)
					{
						if (num2 != 142)
						{
							if (this.LA(1) == 232 && (this.LA(2) == 65 || this.LA(2) == 232) && base.NextTokenMatches("REMOVE"))
							{
								alterDatabaseStatement = this.alterDbRemove();
							}
							else if (this.LA(1) == 232 && (this.LA(2) == 65 || this.LA(2) == 232) && base.NextTokenMatches("MODIFY"))
							{
								alterDatabaseStatement = this.alterDbModify();
							}
							else
							{
								if (this.LA(1) != 232 || this.LA(2) != 232)
								{
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
								alterDatabaseStatement = this.alterDbRebuild();
							}
						}
						else
						{
							alterDatabaseStatement = this.alterDbSet();
						}
					}
					else
					{
						alterDatabaseStatement = this.alterDbCollate();
					}
				}
				else
				{
					alterDatabaseStatement = this.alterDbAdd();
				}
				if (this.inputState.guessing == 0)
				{
					alterDatabaseStatement.DatabaseName = identifier;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseStatement, token);
					base.ThrowPartialAstIfPhaseOne(alterDatabaseStatement);
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(ex.Statement, token);
					(ex.Statement as AlterDatabaseStatement).DatabaseName = identifier;
					throw;
				}
				throw;
			}
			return alterDatabaseStatement;
		}

		// Token: 0x06001823 RID: 6179 RVA: 0x000CB008 File Offset: 0x000C9208
		public ExecuteStatement executeStatement()
		{
			ExecuteStatement executeStatement = base.FragmentFactory.CreateFragment<ExecuteStatement>();
			ExecuteSpecification executeSpecification = this.executeSpecification();
			if (this.inputState.guessing == 0)
			{
				executeStatement.ExecuteSpecification = executeSpecification;
				base.ThrowPartialAstIfPhaseOne(executeStatement);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				ExecuteOption executeOption = this.executeOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExecuteOption>(executeStatement, executeStatement.Options, executeOption);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executeStatement;
		}

		// Token: 0x06001824 RID: 6180 RVA: 0x000CB0C8 File Offset: 0x000C92C8
		public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements()
		{
			WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = null;
			int num = this.LA(1);
			if (num <= 140)
			{
				if (num == 48 || num == 86 || num == 140)
				{
					goto IL_005E;
				}
			}
			else
			{
				if (num == 160)
				{
					goto IL_005E;
				}
				if (num == 171)
				{
					withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
					goto IL_005E;
				}
				if (num == 191)
				{
					goto IL_005E;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_005E:
			int num2 = this.LA(1);
			StatementWithCtesAndXmlNamespaces statementWithCtesAndXmlNamespaces;
			if (num2 > 86)
			{
				if (num2 != 140)
				{
					if (num2 == 160)
					{
						statementWithCtesAndXmlNamespaces = this.updateStatement();
						goto IL_00C6;
					}
					if (num2 != 191)
					{
						goto IL_00B3;
					}
				}
				statementWithCtesAndXmlNamespaces = this.select();
				goto IL_00C6;
			}
			if (num2 == 48)
			{
				statementWithCtesAndXmlNamespaces = this.deleteStatement();
				goto IL_00C6;
			}
			if (num2 == 86)
			{
				statementWithCtesAndXmlNamespaces = this.insertStatement();
				goto IL_00C6;
			}
			IL_00B3:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00C6:
			if (this.inputState.guessing == 0)
			{
				statementWithCtesAndXmlNamespaces.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
			}
			return statementWithCtesAndXmlNamespaces;
		}

		// Token: 0x06001825 RID: 6181 RVA: 0x000CB1B0 File Offset: 0x000C93B0
		public TSqlStatement raiseErrorStatements()
		{
			IToken token = this.LT(1);
			this.match(123);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 199)
			{
				if (num == 191)
				{
					tsqlStatement = this.raiseErrorStatement();
					goto IL_006D;
				}
				if (num != 199)
				{
					goto IL_005A;
				}
			}
			else if (num != 221 && num != 234)
			{
				goto IL_005A;
			}
			tsqlStatement = this.raiseErrorLegacyStatement();
			goto IL_006D;
			IL_005A:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_006D:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06001826 RID: 6182 RVA: 0x000CB240 File Offset: 0x000C9440
		public TSqlStatement alter2005Statements()
		{
			IToken token = this.LT(1);
			this.match(6);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 84)
			{
				if (num == 11)
				{
					tsqlStatement = this.alterAuthorizationStatement();
					goto IL_04C9;
				}
				if (num == 84)
				{
					tsqlStatement = this.alterIndexStatement();
					goto IL_04C9;
				}
			}
			else
			{
				if (num == 139)
				{
					tsqlStatement = this.alterSchemaStatement();
					goto IL_04C9;
				}
				if (num == 163)
				{
					tsqlStatement = this.alterUserStatement();
					goto IL_04C9;
				}
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION"))
			{
				tsqlStatement = this.alterApplicationRoleStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY"))
			{
				tsqlStatement = this.alterAssemblyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC"))
			{
				tsqlStatement = this.alterAsymmetricKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE"))
			{
				tsqlStatement = this.alterRemoteServiceBindingStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
			{
				tsqlStatement = this.alterCertificateStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL"))
			{
				tsqlStatement = this.alterCredentialStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT"))
			{
				tsqlStatement = this.alterEndpointStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT"))
			{
				tsqlStatement = this.alterFulltextStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN"))
			{
				tsqlStatement = this.alterLoginStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.alterMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
			{
				tsqlStatement = this.alterMessageTypeStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION"))
			{
				tsqlStatement = this.alterPartitionStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
			{
				tsqlStatement = this.alterQueueStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE"))
			{
				tsqlStatement = this.alterRoleStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE"))
			{
				tsqlStatement = this.alterRouteStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.alterServiceStatements();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
			{
				tsqlStatement = this.alterSymmetricKeyStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 139 || !base.NextTokenMatches("XML"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterXmlSchemaCollectionStatement();
			}
			IL_04C9:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
				base.ThrowPartialAstIfPhaseOne(tsqlStatement);
			}
			return tsqlStatement;
		}

		// Token: 0x06001827 RID: 6183 RVA: 0x000CB734 File Offset: 0x000C9934
		public TSqlStatement create2005Statements()
		{
			TSqlStatement tsqlStatement = null;
			IToken token = null;
			try
			{
				token = this.LT(1);
				this.match(35);
				int num = this.LA(1);
				if (num != 118)
				{
					if (num != 163)
					{
						if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AGGREGATE"))
						{
							tsqlStatement = this.createAggregateStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION"))
						{
							tsqlStatement = this.createApplicationRoleStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY"))
						{
							tsqlStatement = this.createAssemblyStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC"))
						{
							tsqlStatement = this.createAsymmetricKeyStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
						{
							tsqlStatement = this.createCertificateStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CONTRACT"))
						{
							tsqlStatement = this.createContractStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL"))
						{
							tsqlStatement = this.createCredentialStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT"))
						{
							tsqlStatement = this.createEndpointStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("EVENT"))
						{
							tsqlStatement = this.createEventNotificationStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT"))
						{
							tsqlStatement = this.createFulltextStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 139) && base.NextTokenMatches("XML"))
						{
							tsqlStatement = this.createXmlStatements();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN"))
						{
							tsqlStatement = this.createLoginStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
						{
							tsqlStatement = this.createMessageTypeStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
						{
							tsqlStatement = this.createMasterKeyStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION"))
						{
							tsqlStatement = this.createPartitionStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
						{
							tsqlStatement = this.createQueueStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE"))
						{
							tsqlStatement = this.createRemoteServiceBindingStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE"))
						{
							tsqlStatement = this.createRoleStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE"))
						{
							tsqlStatement = this.createRouteStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE"))
						{
							tsqlStatement = this.createServiceStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
						{
							tsqlStatement = this.createSymmetricKeyStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SYNONYM"))
						{
							tsqlStatement = this.createSynonymStatement();
						}
						else
						{
							if (this.LA(1) != 232 || (this.LA(2) != 200 && this.LA(2) != 232 && this.LA(2) != 233) || !base.NextTokenMatches("TYPE"))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							tsqlStatement = this.createTypeStatement();
						}
					}
					else
					{
						tsqlStatement = this.createUserStatement();
					}
				}
				else
				{
					tsqlStatement = this.createPrimaryXmlIndexStatement();
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
					base.ThrowPartialAstIfPhaseOne(tsqlStatement);
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(ex.Statement, token);
					throw;
				}
				throw;
			}
			return tsqlStatement;
		}

		// Token: 0x06001828 RID: 6184 RVA: 0x000CBDB4 File Offset: 0x000C9FB4
		public CreateDatabaseStatement createDatabaseStatement()
		{
			CreateDatabaseStatement createDatabaseStatement = base.FragmentFactory.CreateFragment<CreateDatabaseStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(43);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createDatabaseStatement.DatabaseName = identifier;
				TSql80ParserBaseInternal.UpdateTokenInfo(createDatabaseStatement, token);
				base.ThrowPartialAstIfPhaseOne(createDatabaseStatement);
			}
			this.recoveryUnitList(createDatabaseStatement);
			this.collationOpt(createDatabaseStatement);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_02E3;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_02E3;
						case 5:
							goto IL_02D0;
						default:
							switch (num)
							{
							case 9:
								break;
							case 10:
							case 11:
							case 14:
							case 16:
								goto IL_02D0;
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_02E3;
							default:
								goto IL_02D0;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_02E3;
						default:
							if (num == 28)
							{
								goto IL_02E3;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_02E3;
							case 34:
								goto IL_02D0;
							default:
								goto IL_02D0;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_02E3;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						goto IL_02D0;
					default:
						if (num != 67)
						{
							switch (num)
							{
							case 74:
							case 75:
								goto IL_02E3;
							default:
								goto IL_02D0;
							}
						}
						break;
					}
				}
				else
				{
					if (num != 82 && num != 86 && num != 92)
					{
						goto IL_02D0;
					}
					goto IL_02E3;
				}
				this.dbAddendums(createDatabaseStatement);
				goto IL_02E3;
			}
			if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						goto IL_02E3;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_02E3;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_02E3;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_02E3;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_02E3;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_02E3;
				default:
					if (num == 191)
					{
						goto IL_02E3;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_02E3;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_02E3;
				default:
					if (num == 232)
					{
						goto IL_02E3;
					}
					break;
				}
			}
			IL_02D0:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_02E3:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.withTrustOptionsOnOff(createDatabaseStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createDatabaseStatement;
		}

		// Token: 0x06001829 RID: 6185 RVA: 0x000CC104 File Offset: 0x000CA304
		public AddSignatureStatement addSignatureStatement()
		{
			AddSignatureStatement addSignatureStatement = base.FragmentFactory.CreateFragment<AddSignatureStatement>();
			IToken token = this.LT(1);
			this.match(4);
			this.signatureType(addSignatureStatement);
			this.match(151);
			this.signableElement(addSignatureStatement);
			this.match(18);
			this.cryptoListWithOptionalPasswordSignature(addSignatureStatement);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(addSignatureStatement, token);
			}
			return addSignatureStatement;
		}

		// Token: 0x0600182A RID: 6186 RVA: 0x000CC16C File Offset: 0x000CA36C
		public TSqlStatement identifierStatements()
		{
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 155 && base.NextTokenMatches("DISABLE"))
			{
				tsqlStatement = this.disableTriggerStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 155 && base.NextTokenMatches("ENABLE"))
			{
				tsqlStatement = this.enableTriggerStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MOVE"))
			{
				tsqlStatement = this.moveConversationStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("GET"))
			{
				tsqlStatement = this.getConversationGroupStatement();
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_29_.member(this.LA(2)) && base.NextTokenMatches("RECEIVE"))
			{
				tsqlStatement = this.receiveStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 105 || !base.NextTokenMatches("SEND"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.sendStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x0600182B RID: 6187 RVA: 0x000CC2C4 File Offset: 0x000CA4C4
		public PrintStatement printStatement()
		{
			PrintStatement printStatement = base.FragmentFactory.CreateFragment<PrintStatement>();
			IToken token = this.LT(1);
			this.match(119);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(printStatement, token);
				printStatement.Expression = scalarExpression;
			}
			return printStatement;
		}

		// Token: 0x0600182C RID: 6188 RVA: 0x000CC314 File Offset: 0x000CA514
		public WaitForStatement waitForStatement()
		{
			WaitForStatement waitForStatement = base.FragmentFactory.CreateFragment<WaitForStatement>();
			IToken token = this.LT(1);
			this.match(167);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(waitForStatement, token);
			}
			int num = this.LA(1);
			if (num == 191)
			{
				this.match(191);
				WaitForSupportedStatement waitForSupportedStatement = this.waitforInnerStatement();
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					waitForStatement.Statement = waitForSupportedStatement;
					waitForStatement.WaitForOption = WaitForOption.Statement;
					TSql80ParserBaseInternal.UpdateTokenInfo(waitForStatement, token2);
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								return waitForStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return waitForStatement;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									return waitForStatement;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								return waitForStatement;
							default:
								if (num2 == 28)
								{
									return waitForStatement;
								}
								switch (num2)
								{
								case 33:
								case 35:
									return waitForStatement;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return waitForStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return waitForStatement;
							default:
								if (num2 == 82)
								{
									return waitForStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						return waitForStatement;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 == 106 || num2 == 119)
						{
							return waitForStatement;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return waitForStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return waitForStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return waitForStatement;
							case 168:
							case 169:
								break;
							default:
								if (num2 == 176)
								{
									return waitForStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					switch (num2)
					{
					case 180:
					case 181:
						return waitForStatement;
					default:
						if (num2 == 191)
						{
							return waitForStatement;
						}
						if (num2 == 198)
						{
							this.match(198);
							IToken token3 = this.LT(1);
							this.match(232);
							ScalarExpression scalarExpression = this.signedIntegerOrVariable();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token3, "TIMEOUT");
								waitForStatement.Timeout = scalarExpression;
								return waitForStatement;
							}
							return waitForStatement;
						}
						break;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return waitForStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return waitForStatement;
					default:
						if (num2 == 232)
						{
							return waitForStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token4 = this.LT(1);
			this.match(232);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				waitForStatement.WaitForOption = WaitForOptionHelper.Instance.ParseOption(token4);
				waitForStatement.Parameter = valueExpression;
			}
			return waitForStatement;
		}

		// Token: 0x0600182D RID: 6189 RVA: 0x000CC70C File Offset: 0x000CA90C
		public ReadTextStatement readTextStatement()
		{
			ReadTextStatement readTextStatement = base.FragmentFactory.CreateFragment<ReadTextStatement>();
			IToken token = this.LT(1);
			this.match(125);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(readTextStatement, token);
			}
			ColumnReferenceExpression columnReferenceExpression = this.column();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, true);
				readTextStatement.Column = columnReferenceExpression;
			}
			ValueExpression valueExpression = this.binaryOrVariable();
			if (this.inputState.guessing == 0)
			{
				readTextStatement.TextPointer = valueExpression;
			}
			valueExpression = this.integerOrVariable();
			if (this.inputState.guessing == 0)
			{
				readTextStatement.Offset = valueExpression;
			}
			valueExpression = this.integerOrVariable();
			if (this.inputState.guessing == 0)
			{
				readTextStatement.Size = valueExpression;
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return readTextStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return readTextStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return readTextStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return readTextStatement;
							default:
								if (num == 28)
								{
									return readTextStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 78)
				{
					switch (num)
					{
					case 33:
					case 35:
						return readTextStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return readTextStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return readTextStatement;
							case 78:
							{
								IToken token2 = this.LT(1);
								this.match(78);
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.UpdateTokenInfo(readTextStatement, token2);
									readTextStatement.HoldLock = true;
									return readTextStatement;
								}
								return readTextStatement;
							}
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return readTextStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return readTextStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return readTextStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return readTextStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return readTextStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return readTextStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return readTextStatement;
				default:
					if (num == 191)
					{
						return readTextStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return readTextStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return readTextStatement;
				default:
					if (num == 232)
					{
						return readTextStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600182E RID: 6190 RVA: 0x000CCA90 File Offset: 0x000CAC90
		public UpdateTextStatement updateTextStatement()
		{
			UpdateTextStatement updateTextStatement = base.FragmentFactory.CreateFragment<UpdateTextStatement>();
			IToken token = this.LT(1);
			this.match(161);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateTextStatement, token);
			}
			this.modificationTextStatement(updateTextStatement);
			ScalarExpression scalarExpression = this.signedIntegerOrVariableOrNull();
			if (this.inputState.guessing == 0)
			{
				updateTextStatement.InsertOffset = scalarExpression;
			}
			scalarExpression = this.signedIntegerOrVariableOrNull();
			if (this.inputState.guessing == 0)
			{
				updateTextStatement.DeleteLength = scalarExpression;
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.modificationTextStatementWithLog(updateTextStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_30_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (TSql90ParserInternal.tokenSet_31_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_32_.member(this.LA(2)))
			{
				ColumnReferenceExpression columnReferenceExpression = this.column();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, true);
					updateTextStatement.SourceColumn = columnReferenceExpression;
				}
				ValueExpression valueExpression = this.binaryOrVariable();
				if (this.inputState.guessing == 0)
				{
					updateTextStatement.SourceParameter = valueExpression;
				}
			}
			else if (TSql90ParserInternal.tokenSet_33_.member(this.LA(1)))
			{
				ValueExpression valueExpression = this.writeString();
				if (this.inputState.guessing == 0)
				{
					updateTextStatement.SourceParameter = valueExpression;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return updateTextStatement;
		}

		// Token: 0x0600182F RID: 6191 RVA: 0x000CCC40 File Offset: 0x000CAE40
		public WriteTextStatement writeTextStatement()
		{
			WriteTextStatement writeTextStatement = base.FragmentFactory.CreateFragment<WriteTextStatement>();
			IToken token = this.LT(1);
			this.match(172);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(writeTextStatement, token);
			}
			this.modificationTextStatement(writeTextStatement);
			int num = this.LA(1);
			if (num <= 171)
			{
				if (num == 100)
				{
					goto IL_00A1;
				}
				if (num == 171)
				{
					this.modificationTextStatementWithLog(writeTextStatement);
					goto IL_00A1;
				}
			}
			else
			{
				if (num == 224)
				{
					goto IL_00A1;
				}
				switch (num)
				{
				case 230:
				case 231:
				case 234:
					goto IL_00A1;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00A1:
			ValueExpression valueExpression = this.writeString();
			if (this.inputState.guessing == 0)
			{
				writeTextStatement.SourceParameter = valueExpression;
			}
			return writeTextStatement;
		}

		// Token: 0x06001830 RID: 6192 RVA: 0x000CCD0C File Offset: 0x000CAF0C
		public LineNoStatement lineNoStatement()
		{
			LineNoStatement lineNoStatement = base.FragmentFactory.CreateFragment<LineNoStatement>();
			IToken token = this.LT(1);
			this.match(95);
			IntegerLiteral integerLiteral = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(lineNoStatement, token);
				lineNoStatement.LineNo = integerLiteral;
			}
			return lineNoStatement;
		}

		// Token: 0x06001831 RID: 6193 RVA: 0x000CCD5C File Offset: 0x000CAF5C
		public UseStatement useStatement()
		{
			UseStatement useStatement = base.FragmentFactory.CreateFragment<UseStatement>();
			IToken token = this.LT(1);
			this.match(162);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(useStatement, token);
				useStatement.DatabaseName = identifier;
			}
			return useStatement;
		}

		// Token: 0x06001832 RID: 6194 RVA: 0x000CCDB0 File Offset: 0x000CAFB0
		public TSqlStatement killStatements()
		{
			IToken token = this.LT(1);
			this.match(92);
			TSqlStatement tsqlStatement;
			if (TSql90ParserInternal.tokenSet_34_.member(this.LA(1)))
			{
				tsqlStatement = this.killStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("QUERY"))
			{
				tsqlStatement = this.killQueryNotificationSubscriptionStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.killStatsJobStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06001833 RID: 6195 RVA: 0x000CCE6C File Offset: 0x000CB06C
		public BulkInsertStatement bulkInsertStatement()
		{
			BulkInsertStatement bulkInsertStatement = base.FragmentFactory.CreateFragment<BulkInsertStatement>();
			IToken token = this.LT(1);
			this.match(17);
			this.match(86);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertStatement, token);
				bulkInsertStatement.To = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(bulkInsertStatement);
			}
			this.match(71);
			IdentifierOrValueExpression identifierOrValueExpression = this.bulkInsertFrom();
			if (this.inputState.guessing == 0)
			{
				bulkInsertStatement.From = identifierOrValueExpression;
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.bulkInsertOptions(bulkInsertStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return bulkInsertStatement;
		}

		// Token: 0x06001834 RID: 6196 RVA: 0x000CCF4C File Offset: 0x000CB14C
		public InsertBulkStatement insertBulkStatement()
		{
			InsertBulkStatement insertBulkStatement = base.FragmentFactory.CreateFragment<InsertBulkStatement>();
			IToken token = this.LT(1);
			this.match(86);
			this.match(17);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				insertBulkStatement.To = schemaObjectName;
				TSql80ParserBaseInternal.UpdateTokenInfo(insertBulkStatement, token);
				base.ThrowPartialAstIfPhaseOne(insertBulkStatement);
			}
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.coldefList(insertBulkStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.insertBulkOptions(insertBulkStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return insertBulkStatement;
		}

		// Token: 0x06001835 RID: 6197 RVA: 0x000CD074 File Offset: 0x000CB274
		public CheckpointStatement checkpointStatement()
		{
			CheckpointStatement checkpointStatement = base.FragmentFactory.CreateFragment<CheckpointStatement>();
			IToken token = this.LT(1);
			this.match(22);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(checkpointStatement, token);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return checkpointStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return checkpointStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return checkpointStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return checkpointStatement;
							default:
								if (num == 28)
								{
									return checkpointStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return checkpointStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return checkpointStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return checkpointStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return checkpointStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return checkpointStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return checkpointStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return checkpointStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return checkpointStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return checkpointStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return checkpointStatement;
				default:
					if (num == 191)
					{
						return checkpointStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return checkpointStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return checkpointStatement;
				case 221:
				{
					Literal literal = this.integer();
					if (this.inputState.guessing == 0)
					{
						checkpointStatement.Duration = literal;
						return checkpointStatement;
					}
					return checkpointStatement;
				}
				default:
					if (num == 232)
					{
						return checkpointStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001836 RID: 6198 RVA: 0x000CD340 File Offset: 0x000CB540
		public ReconfigureStatement reconfigureStatement()
		{
			ReconfigureStatement reconfigureStatement = base.FragmentFactory.CreateFragment<ReconfigureStatement>();
			IToken token = this.LT(1);
			this.match(126);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(reconfigureStatement, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "OVERRIDE");
					reconfigureStatement.WithOverride = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(reconfigureStatement, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return reconfigureStatement;
		}

		// Token: 0x06001837 RID: 6199 RVA: 0x000CD420 File Offset: 0x000CB620
		public ShutdownStatement shutdownStatement()
		{
			ShutdownStatement shutdownStatement = base.FragmentFactory.CreateFragment<ShutdownStatement>();
			IToken token = this.LT(1);
			this.match(144);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(shutdownStatement, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NOWAIT");
					shutdownStatement.WithNoWait = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(shutdownStatement, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return shutdownStatement;
		}

		// Token: 0x06001838 RID: 6200 RVA: 0x000CD500 File Offset: 0x000CB700
		public SetUserStatement setUserStatement()
		{
			SetUserStatement setUserStatement = base.FragmentFactory.CreateFragment<SetUserStatement>();
			IToken token = this.LT(1);
			this.match(143);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(setUserStatement, token);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return setUserStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return setUserStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return setUserStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return setUserStatement;
							default:
								if (num == 28)
								{
									return setUserStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return setUserStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return setUserStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return setUserStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return setUserStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return setUserStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return setUserStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return setUserStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return setUserStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return setUserStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return setUserStatement;
				default:
					if (num == 191)
					{
						return setUserStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return setUserStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return setUserStatement;
				default:
					switch (num)
					{
					case 230:
					case 231:
					case 234:
					{
						ValueExpression valueExpression = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							setUserStatement.UserName = valueExpression;
						}
						if (this.LA(1) == 171 && this.LA(2) == 232)
						{
							this.match(171);
							IToken token2 = this.LT(1);
							this.match(232);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token2, "NORESET");
								setUserStatement.WithNoReset = true;
								TSql80ParserBaseInternal.UpdateTokenInfo(setUserStatement, token2);
								return setUserStatement;
							}
							return setUserStatement;
						}
						else
						{
							if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							return setUserStatement;
						}
						break;
					}
					case 232:
						return setUserStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001839 RID: 6201 RVA: 0x000CD8AC File Offset: 0x000CBAAC
		public TruncateTableStatement truncateTableStatement()
		{
			TruncateTableStatement truncateTableStatement = base.FragmentFactory.CreateFragment<TruncateTableStatement>();
			IToken token = this.LT(1);
			this.match(156);
			this.match(148);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(truncateTableStatement, token);
				truncateTableStatement.TableName = schemaObjectName;
			}
			return truncateTableStatement;
		}

		// Token: 0x0600183A RID: 6202 RVA: 0x000CD908 File Offset: 0x000CBB08
		public GrantStatement grantStatement90()
		{
			GrantStatement grantStatement = base.FragmentFactory.CreateFragment<GrantStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(75);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(grantStatement, token);
			}
			this.permissionsList(grantStatement, ref flag);
			this.securityStatementTargetObjectOpt(grantStatement, flag);
			this.match(151);
			this.securityStatementPrincipalList(grantStatement);
			if (this.LA(1) == 171 && this.LA(2) == 75)
			{
				this.match(171);
				this.match(75);
				IToken token2 = this.LT(1);
				this.match(111);
				if (this.inputState.guessing == 0)
				{
					grantStatement.WithGrantOption = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(grantStatement, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_35_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.securityStatementAsClauseOpt(grantStatement);
			return grantStatement;
		}

		// Token: 0x0600183B RID: 6203 RVA: 0x000CDA08 File Offset: 0x000CBC08
		public DenyStatement denyStatement90()
		{
			DenyStatement denyStatement = base.FragmentFactory.CreateFragment<DenyStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(49);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(denyStatement, token);
			}
			this.permissionsList(denyStatement, ref flag);
			this.securityStatementTargetObjectOpt(denyStatement, flag);
			this.match(151);
			this.securityStatementPrincipalList(denyStatement);
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0325;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0325;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_0325;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 20:
						case 21:
							break;
						case 19:
						{
							IToken token2 = this.LT(1);
							this.match(19);
							if (this.inputState.guessing == 0)
							{
								denyStatement.CascadeOption = true;
								TSql80ParserBaseInternal.UpdateTokenInfo(denyStatement, token2);
								goto IL_0325;
							}
							goto IL_0325;
						}
						default:
							if (num == 28)
							{
								goto IL_0325;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0325;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0325;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0325;
						default:
							if (num == 82)
							{
								goto IL_0325;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_0325;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 119)
					{
						goto IL_0325;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0325;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0325;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0325;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_0325;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_0325;
				default:
					if (num == 191)
					{
						goto IL_0325;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0325;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0325;
				default:
					if (num == 232)
					{
						goto IL_0325;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0325:
			this.securityStatementAsClauseOpt(denyStatement);
			return denyStatement;
		}

		// Token: 0x0600183C RID: 6204 RVA: 0x000CDD44 File Offset: 0x000CBF44
		public RevokeStatement revokeStatement90()
		{
			RevokeStatement revokeStatement = base.FragmentFactory.CreateFragment<RevokeStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(132);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(revokeStatement, token);
			}
			if (this.LA(1) == 75)
			{
				this.match(75);
				this.match(111);
				this.match(67);
				if (this.inputState.guessing == 0)
				{
					revokeStatement.GrantOptionFor = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_36_.member(this.LA(1)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.permissionsList(revokeStatement, ref flag);
			this.securityStatementTargetObjectOpt(revokeStatement, flag);
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 151)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(151);
			}
			else
			{
				this.match(71);
			}
			this.securityStatementPrincipalList(revokeStatement);
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 35)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_03BE;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_03BE;
						}
					}
					else
					{
						switch (num2)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_03BE;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 20:
						case 21:
							break;
						case 19:
						{
							IToken token2 = this.LT(1);
							this.match(19);
							if (this.inputState.guessing == 0)
							{
								revokeStatement.CascadeOption = true;
								TSql80ParserBaseInternal.UpdateTokenInfo(revokeStatement, token2);
								goto IL_03BE;
							}
							goto IL_03BE;
						}
						default:
							if (num2 == 28)
							{
								goto IL_03BE;
							}
							switch (num2)
							{
							case 33:
							case 35:
								goto IL_03BE;
							}
							break;
						}
					}
				}
				else if (num2 <= 82)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_03BE;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num2)
						{
						case 74:
						case 75:
							goto IL_03BE;
						default:
							if (num2 == 82)
							{
								goto IL_03BE;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 86 || num2 == 92 || num2 == 95)
				{
					goto IL_03BE;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 119)
				{
					if (num2 == 106 || num2 == 119)
					{
						goto IL_03BE;
					}
				}
				else
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_03BE;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_03BE;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_03BE;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176)
				{
					goto IL_03BE;
				}
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_03BE;
				default:
					if (num2 == 191)
					{
						goto IL_03BE;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_03BE;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_03BE;
				default:
					if (num2 == 232)
					{
						goto IL_03BE;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_03BE:
			this.securityStatementAsClauseOpt(revokeStatement);
			return revokeStatement;
		}

		// Token: 0x0600183D RID: 6205 RVA: 0x000CE118 File Offset: 0x000CC318
		public ReturnStatement returnStatement()
		{
			ReturnStatement returnStatement = base.FragmentFactory.CreateFragment<ReturnStatement>();
			IToken token = this.LT(1);
			this.match(131);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(returnStatement, token);
			}
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_37_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_38_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.expression(ExpressionFlags.None);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					returnStatement.Expression = scalarExpression;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return returnStatement;
		}

		// Token: 0x0600183E RID: 6206 RVA: 0x000CE234 File Offset: 0x000CC434
		public TSqlStatement openStatements()
		{
			IToken token = this.LT(1);
			this.match(106);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.openMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
			{
				tsqlStatement = this.openSymmetricKeyStatement();
			}
			else
			{
				if (this.LA(1) < 232 || this.LA(1) > 234 || !TSql90ParserInternal.tokenSet_39_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.openCursorStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x0600183F RID: 6207 RVA: 0x000CE314 File Offset: 0x000CC514
		public TSqlStatement closeStatements()
		{
			IToken token = this.LT(1);
			this.match(23);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.closeMasterKeyStatement();
			}
			else if ((this.LA(1) == 5 || this.LA(1) == 232) && (this.LA(2) == 91 || this.LA(2) == 232) && (base.NextTokenMatches("SYMMETRIC") || this.LA(1) == 5))
			{
				tsqlStatement = this.closeSymmetricKeyStatement();
			}
			else
			{
				if (this.LA(1) < 232 || this.LA(1) > 234 || !TSql90ParserInternal.tokenSet_39_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.closeCursorStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06001840 RID: 6208 RVA: 0x000CE418 File Offset: 0x000CC618
		public DeallocateCursorStatement deallocateCursorStatement()
		{
			DeallocateCursorStatement deallocateCursorStatement = base.FragmentFactory.CreateFragment<DeallocateCursorStatement>();
			IToken token = this.LT(1);
			this.match(45);
			CursorId cursorId = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(deallocateCursorStatement, token);
				deallocateCursorStatement.Cursor = cursorId;
			}
			return deallocateCursorStatement;
		}

		// Token: 0x06001841 RID: 6209 RVA: 0x000CE468 File Offset: 0x000CC668
		public FetchCursorStatement fetchCursorStatement()
		{
			IToken token = this.LT(1);
			this.match(64);
			FetchCursorStatement fetchCursorStatement = this.rowSelector();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fetchCursorStatement, token);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return fetchCursorStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return fetchCursorStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return fetchCursorStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return fetchCursorStatement;
							default:
								if (num == 28)
								{
									return fetchCursorStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return fetchCursorStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return fetchCursorStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return fetchCursorStatement;
							}
							break;
						}
						break;
					}
				}
				else
				{
					if (num == 82)
					{
						return fetchCursorStatement;
					}
					switch (num)
					{
					case 86:
						return fetchCursorStatement;
					case 87:
						break;
					case 88:
					{
						this.match(88);
						VariableReference variableReference = this.variable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableReference>(fetchCursorStatement, fetchCursorStatement.IntoVariables, variableReference);
						}
						while (this.LA(1) == 198)
						{
							this.match(198);
							variableReference = this.variable();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableReference>(fetchCursorStatement, fetchCursorStatement.IntoVariables, variableReference);
							}
						}
						return fetchCursorStatement;
					}
					default:
						if (num == 92)
						{
							return fetchCursorStatement;
						}
						break;
					}
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return fetchCursorStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return fetchCursorStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return fetchCursorStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return fetchCursorStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return fetchCursorStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return fetchCursorStatement;
				default:
					if (num == 191)
					{
						return fetchCursorStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return fetchCursorStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return fetchCursorStatement;
				default:
					if (num == 232)
					{
						return fetchCursorStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001842 RID: 6210 RVA: 0x000CE78C File Offset: 0x000CC98C
		public TSqlStatement dropStatements()
		{
			IToken token = this.LT(1);
			this.match(54);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 121)
			{
				if (num <= 47)
				{
					if (num == 43)
					{
						tsqlStatement = this.dropDatabaseStatement();
						goto IL_0775;
					}
					if (num == 47)
					{
						tsqlStatement = this.dropDefaultStatement();
						goto IL_0775;
					}
				}
				else
				{
					if (num == 73)
					{
						tsqlStatement = this.dropFunctionStatement();
						goto IL_0775;
					}
					if (num == 84)
					{
						tsqlStatement = this.dropIndexStatement();
						goto IL_0775;
					}
					switch (num)
					{
					case 120:
					case 121:
						tsqlStatement = this.dropProcedureStatement();
						goto IL_0775;
					}
				}
			}
			else if (num <= 148)
			{
				switch (num)
				{
				case 137:
					tsqlStatement = this.dropRuleStatement();
					goto IL_0775;
				case 138:
					break;
				case 139:
					tsqlStatement = this.dropSchemaStatement();
					goto IL_0775;
				default:
					switch (num)
					{
					case 146:
						tsqlStatement = this.dropStatisticsStatement();
						goto IL_0775;
					case 148:
						tsqlStatement = this.dropTableStatement();
						goto IL_0775;
					}
					break;
				}
			}
			else
			{
				if (num == 155)
				{
					tsqlStatement = this.dropTriggerStatement();
					goto IL_0775;
				}
				if (num == 163)
				{
					tsqlStatement = this.dropUserStatement();
					goto IL_0775;
				}
				if (num == 166)
				{
					tsqlStatement = this.dropViewStatement();
					goto IL_0775;
				}
			}
			if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AGGREGATE"))
			{
				tsqlStatement = this.dropAggregateStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY"))
			{
				tsqlStatement = this.dropAssemblyStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION"))
			{
				tsqlStatement = this.dropPartitionStatements();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SYNONYM"))
			{
				tsqlStatement = this.dropSynonymStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION"))
			{
				tsqlStatement = this.dropApplicationRoleStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT"))
			{
				tsqlStatement = this.dropFulltextStatements();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN"))
			{
				tsqlStatement = this.dropLoginStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE"))
			{
				tsqlStatement = this.dropRoleStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.dropMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
			{
				tsqlStatement = this.dropSymmetricKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC"))
			{
				tsqlStatement = this.dropAsymmetricKeyStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
			{
				tsqlStatement = this.dropCertificateStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL"))
			{
				tsqlStatement = this.dropCredentialStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("TYPE"))
			{
				tsqlStatement = this.dropTypeStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 139 && base.NextTokenMatches("XML"))
			{
				tsqlStatement = this.dropXmlSchemaCollectionStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CONTRACT"))
			{
				tsqlStatement = this.dropContractStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
			{
				tsqlStatement = this.dropQueueStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.dropServiceStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE"))
			{
				tsqlStatement = this.dropRouteStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
			{
				tsqlStatement = this.dropMessageTypeStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE"))
			{
				tsqlStatement = this.dropRemoteServiceBindingStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT"))
			{
				tsqlStatement = this.dropEndpointStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 71 || this.LA(2) == 232) && (base.NextTokenMatches("SIGNATURE") || base.NextTokenMatches("COUNTER")))
			{
				tsqlStatement = this.dropSignatureStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232 || !base.NextTokenMatches("EVENT"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.dropEventNotificationStatement();
			}
			IL_0775:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x06001843 RID: 6211 RVA: 0x000CEF24 File Offset: 0x000CD124
		public DbccStatement dbccStatement()
		{
			DbccStatement dbccStatement = base.FragmentFactory.CreateFragment<DbccStatement>();
			IToken token = this.LT(1);
			this.match(44);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				DbccCommand dbccCommand;
				if (DbccCommandsHelper.Instance.TryParseOption(token2, out dbccCommand))
				{
					dbccStatement.Command = dbccCommand;
				}
				else
				{
					dbccStatement.Command = DbccCommand.Free;
					dbccStatement.DllName = token2.getText();
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccStatement, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccStatement, token2);
			}
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_40_.member(this.LA(2)))
			{
				this.dbccNamedLiteralList(dbccStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.dbccOptions(dbccStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return dbccStatement;
		}

		// Token: 0x06001844 RID: 6212 RVA: 0x000CF070 File Offset: 0x000CD270
		public RevertStatement revertStatement()
		{
			RevertStatement revertStatement = base.FragmentFactory.CreateFragment<RevertStatement>();
			IToken token = this.LT(1);
			this.match(176);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(revertStatement, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "COOKIE");
					revertStatement.Cookie = scalarExpression;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return revertStatement;
		}

		// Token: 0x06001845 RID: 6213 RVA: 0x000CF15C File Offset: 0x000CD35C
		public ExecuteAsStatement executeAsStatement()
		{
			ExecuteAsStatement executeAsStatement = base.FragmentFactory.CreateFragment<ExecuteAsStatement>();
			this.execStart(executeAsStatement);
			this.match(9);
			ExecuteContext executeContext = this.executeAsStatementContext();
			if (this.inputState.guessing == 0)
			{
				executeAsStatement.ExecuteContext = executeContext;
			}
			this.executeContextStatementOptionsOpt(executeAsStatement);
			return executeAsStatement;
		}

		// Token: 0x06001846 RID: 6214 RVA: 0x000CF1A8 File Offset: 0x000CD3A8
		public EndConversationStatement endConversationStatement()
		{
			EndConversationStatement endConversationStatement = base.FragmentFactory.CreateFragment<EndConversationStatement>();
			this.match(56);
			IToken token = this.LT(1);
			this.match(232);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONVERSATION");
				endConversationStatement.Conversation = scalarExpression;
			}
			this.endConversationArgumentsOpt(endConversationStatement);
			return endConversationStatement;
		}

		// Token: 0x06001847 RID: 6215 RVA: 0x000CF210 File Offset: 0x000CD410
		public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces()
		{
			WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = base.FragmentFactory.CreateFragment<WithCtesAndXmlNamespaces>();
			IToken token = this.LT(1);
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(withCtesAndXmlNamespaces, token);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("XMLNAMESPACES"))
			{
				XmlNamespaces xmlNamespaces = this.xmlNamespaces();
				if (this.inputState.guessing == 0)
				{
					withCtesAndXmlNamespaces.XmlNamespaces = xmlNamespaces;
				}
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 9 && this.LA(2) != 191))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				CommonTableExpression commonTableExpression = this.commonTableExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CommonTableExpression>(withCtesAndXmlNamespaces, withCtesAndXmlNamespaces.CommonTableExpressions, commonTableExpression);
				}
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				CommonTableExpression commonTableExpression = this.commonTableExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CommonTableExpression>(withCtesAndXmlNamespaces, withCtesAndXmlNamespaces.CommonTableExpressions, commonTableExpression);
				}
			}
			return withCtesAndXmlNamespaces;
		}

		// Token: 0x06001848 RID: 6216 RVA: 0x000CF340 File Offset: 0x000CD540
		public SelectStatement select()
		{
			SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
			QueryExpression queryExpression = this.queryExpression(selectStatement);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num != 1)
						{
							switch (num)
							{
							case 4:
							case 6:
								break;
							case 5:
								goto IL_02DF;
							default:
								switch (num)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									break;
								case 14:
								case 16:
									goto IL_02DF;
								default:
									goto IL_02DF;
								}
								break;
							}
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							break;
						default:
							switch (num)
							{
							case 28:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									break;
								case 34:
									goto IL_02DF;
								default:
									goto IL_02DF;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						break;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						goto IL_02DF;
					default:
						if (num != 67)
						{
							switch (num)
							{
							case 74:
							case 75:
								break;
							default:
								goto IL_02DF;
							}
						}
						break;
					}
				}
				else if (num != 82 && num != 86 && num != 92)
				{
					goto IL_02DF;
				}
			}
			else if (num <= 162)
			{
				if (num <= 113)
				{
					if (num != 95 && num != 106)
					{
						switch (num)
						{
						case 111:
							break;
						case 112:
							goto IL_02DF;
						case 113:
						{
							OrderByClause orderByClause = this.orderByClause();
							if (this.inputState.guessing == 0)
							{
								queryExpression.OrderByClause = orderByClause;
							}
							break;
						}
						default:
							goto IL_02DF;
						}
					}
				}
				else if (num != 119)
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						goto IL_02DF;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							break;
						case 157:
						case 158:
						case 159:
							goto IL_02DF;
						default:
							goto IL_02DF;
						}
						break;
					}
				}
			}
			else if (num <= 181)
			{
				switch (num)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					break;
				case 168:
				case 169:
					goto IL_02DF;
				default:
					if (num != 176)
					{
						switch (num)
						{
						case 180:
						case 181:
							break;
						default:
							goto IL_02DF;
						}
					}
					break;
				}
			}
			else if (num <= 204)
			{
				if (num != 191 && num != 204)
				{
					goto IL_02DF;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					break;
				default:
					if (num != 232)
					{
						goto IL_02DF;
					}
					break;
				}
			}
			while (this.LA(1) == 29)
			{
				ComputeClause computeClause = this.computeClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ComputeClause>(selectStatement, selectStatement.ComputeClauses, computeClause);
				}
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							goto IL_05EA;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_05EA;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_05EA;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							goto IL_05EA;
						default:
							if (num2 == 28)
							{
								goto IL_05EA;
							}
							switch (num2)
							{
							case 33:
							case 35:
								goto IL_05EA;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_05EA;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num2 != 67)
						{
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_05EA;
							}
						}
						else
						{
							ForClause forClause = this.forClause();
							if (this.inputState.guessing == 0)
							{
								queryExpression.ForClause = forClause;
								goto IL_05EA;
							}
							goto IL_05EA;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					goto IL_05EA;
				}
			}
			else if (num2 <= 162)
			{
				if (num2 <= 111)
				{
					if (num2 == 95 || num2 == 106 || num2 == 111)
					{
						goto IL_05EA;
					}
				}
				else
				{
					if (num2 == 119)
					{
						goto IL_05EA;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_05EA;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_05EA;
						}
						break;
					}
				}
			}
			else if (num2 <= 181)
			{
				switch (num2)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					goto IL_05EA;
				case 168:
				case 169:
					break;
				default:
					if (num2 == 176)
					{
						goto IL_05EA;
					}
					switch (num2)
					{
					case 180:
					case 181:
						goto IL_05EA;
					}
					break;
				}
			}
			else if (num2 <= 204)
			{
				if (num2 == 191 || num2 == 204)
				{
					goto IL_05EA;
				}
			}
			else
			{
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_05EA;
				default:
					if (num2 == 232)
					{
						goto IL_05EA;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_05EA:
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 35)
				{
					if (num3 <= 17)
					{
						if (num3 == 1)
						{
							goto IL_088A;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_088A;
						case 5:
							break;
						default:
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_088A;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 22:
						case 23:
							goto IL_088A;
						default:
							if (num3 == 28)
							{
								goto IL_088A;
							}
							switch (num3)
							{
							case 33:
							case 35:
								goto IL_088A;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_088A;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							goto IL_088A;
						default:
							if (num3 == 82)
							{
								goto IL_088A;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					goto IL_088A;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 119)
				{
					if (num3 == 106)
					{
						goto IL_088A;
					}
					if (num3 == 111)
					{
						this.optimizerHints(selectStatement, selectStatement.OptimizerHints);
						goto IL_088A;
					}
					if (num3 == 119)
					{
						goto IL_088A;
					}
				}
				else
				{
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_088A;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_088A;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num3)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_088A;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176)
				{
					goto IL_088A;
				}
				switch (num3)
				{
				case 180:
				case 181:
					goto IL_088A;
				default:
					if (num3 == 191)
					{
						goto IL_088A;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_088A;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_088A;
				default:
					if (num3 == 232)
					{
						goto IL_088A;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_088A:
			if (this.inputState.guessing == 0)
			{
				selectStatement.QueryExpression = queryExpression;
			}
			return selectStatement;
			IL_02DF:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001849 RID: 6217 RVA: 0x000CFBEC File Offset: 0x000CDDEC
		public DeleteStatement deleteStatement()
		{
			DeleteStatement deleteStatement = base.FragmentFactory.CreateFragment<DeleteStatement>();
			DeleteSpecification deleteSpecification = this.deleteSpecification();
			if (this.inputState.guessing == 0)
			{
				deleteStatement.DeleteSpecification = deleteSpecification;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return deleteStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return deleteStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return deleteStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return deleteStatement;
						default:
							if (num == 28)
							{
								return deleteStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return deleteStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return deleteStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return deleteStatement;
						default:
							if (num == 82)
							{
								return deleteStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return deleteStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						return deleteStatement;
					}
					if (num == 111)
					{
						this.optimizerHints(deleteStatement, deleteStatement.OptimizerHints);
						return deleteStatement;
					}
					if (num == 119)
					{
						return deleteStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return deleteStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return deleteStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return deleteStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return deleteStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return deleteStatement;
				default:
					if (num == 191)
					{
						return deleteStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return deleteStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return deleteStatement;
				default:
					if (num == 232)
					{
						return deleteStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600184A RID: 6218 RVA: 0x000CFEA0 File Offset: 0x000CE0A0
		public InsertStatement insertStatement()
		{
			InsertStatement insertStatement = base.FragmentFactory.CreateFragment<InsertStatement>();
			InsertSpecification insertSpecification = this.insertSpecification();
			if (this.inputState.guessing == 0)
			{
				insertStatement.InsertSpecification = insertSpecification;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return insertStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return insertStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return insertStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return insertStatement;
						default:
							if (num == 28)
							{
								return insertStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return insertStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return insertStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return insertStatement;
						default:
							if (num == 82)
							{
								return insertStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return insertStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						return insertStatement;
					}
					if (num == 111)
					{
						this.optimizerHints(insertStatement, insertStatement.OptimizerHints);
						return insertStatement;
					}
					if (num == 119)
					{
						return insertStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return insertStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return insertStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return insertStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return insertStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return insertStatement;
				default:
					if (num == 191)
					{
						return insertStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return insertStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return insertStatement;
				default:
					if (num == 232)
					{
						return insertStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600184B RID: 6219 RVA: 0x000D0154 File Offset: 0x000CE354
		public UpdateStatement updateStatement()
		{
			UpdateStatement updateStatement = base.FragmentFactory.CreateFragment<UpdateStatement>();
			UpdateSpecification updateSpecification = this.updateSpecification();
			if (this.inputState.guessing == 0)
			{
				updateStatement.UpdateSpecification = updateSpecification;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return updateStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return updateStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return updateStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return updateStatement;
						default:
							if (num == 28)
							{
								return updateStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return updateStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return updateStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return updateStatement;
						default:
							if (num == 82)
							{
								return updateStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return updateStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						return updateStatement;
					}
					if (num == 111)
					{
						this.optimizerHints(updateStatement, updateStatement.OptimizerHints);
						return updateStatement;
					}
					if (num == 119)
					{
						return updateStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return updateStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return updateStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return updateStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return updateStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return updateStatement;
				default:
					if (num == 191)
					{
						return updateStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return updateStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return updateStatement;
				default:
					if (num == 232)
					{
						return updateStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600184C RID: 6220 RVA: 0x000D0408 File Offset: 0x000CE608
		public CreateProcedureStatement createProcedureStatement()
		{
			CreateProcedureStatement createProcedureStatement = base.FragmentFactory.CreateFragment<CreateProcedureStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createProcedureStatement, token);
			}
			this.procedureStatementBody(createProcedureStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				createProcedureStatement = null;
			}
			return createProcedureStatement;
		}

		// Token: 0x0600184D RID: 6221 RVA: 0x000D0468 File Offset: 0x000CE668
		public AlterProcedureStatement alterProcedureStatement()
		{
			AlterProcedureStatement alterProcedureStatement = base.FragmentFactory.CreateFragment<AlterProcedureStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterProcedureStatement, token);
			}
			this.procedureStatementBody(alterProcedureStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				alterProcedureStatement = null;
			}
			return alterProcedureStatement;
		}

		// Token: 0x0600184E RID: 6222 RVA: 0x000D04C4 File Offset: 0x000CE6C4
		public CreateTriggerStatement createTriggerStatement()
		{
			CreateTriggerStatement createTriggerStatement = base.FragmentFactory.CreateFragment<CreateTriggerStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTriggerStatement, token);
			}
			this.triggerStatementBody(createTriggerStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				createTriggerStatement = null;
			}
			return createTriggerStatement;
		}

		// Token: 0x0600184F RID: 6223 RVA: 0x000D0524 File Offset: 0x000CE724
		public AlterTriggerStatement alterTriggerStatement()
		{
			AlterTriggerStatement alterTriggerStatement = base.FragmentFactory.CreateFragment<AlterTriggerStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterTriggerStatement, token);
			}
			this.triggerStatementBody(alterTriggerStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				alterTriggerStatement = null;
			}
			return alterTriggerStatement;
		}

		// Token: 0x06001850 RID: 6224 RVA: 0x000D0580 File Offset: 0x000CE780
		public CreateDefaultStatement createDefaultStatement()
		{
			CreateDefaultStatement createDefaultStatement = base.FragmentFactory.CreateFragment<CreateDefaultStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(47);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createDefaultStatement, token);
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "DEFAULT");
				createDefaultStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createDefaultStatement);
			}
			this.match(9);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				createDefaultStatement.Expression = scalarExpression;
			}
			return createDefaultStatement;
		}

		// Token: 0x06001851 RID: 6225 RVA: 0x000D061C File Offset: 0x000CE81C
		public CreateRuleStatement createRuleStatement()
		{
			CreateRuleStatement createRuleStatement = base.FragmentFactory.CreateFragment<CreateRuleStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(137);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createRuleStatement, token);
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "RULE");
				createRuleStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createRuleStatement);
			}
			this.match(9);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				createRuleStatement.Expression = booleanExpression;
			}
			return createRuleStatement;
		}

		// Token: 0x06001852 RID: 6226 RVA: 0x000D06B8 File Offset: 0x000CE8B8
		public CreateViewStatement createViewStatement()
		{
			CreateViewStatement createViewStatement = base.FragmentFactory.CreateFragment<CreateViewStatement>();
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createViewStatement, token);
			}
			this.viewStatementBody(createViewStatement);
			return createViewStatement;
		}

		// Token: 0x06001853 RID: 6227 RVA: 0x000D0700 File Offset: 0x000CE900
		public AlterViewStatement alterViewStatement()
		{
			AlterViewStatement alterViewStatement = base.FragmentFactory.CreateFragment<AlterViewStatement>();
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterViewStatement, token);
			}
			this.viewStatementBody(alterViewStatement);
			return alterViewStatement;
		}

		// Token: 0x06001854 RID: 6228 RVA: 0x000D0748 File Offset: 0x000CE948
		public CreateFunctionStatement createFunctionStatement()
		{
			CreateFunctionStatement createFunctionStatement = base.FragmentFactory.CreateFragment<CreateFunctionStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createFunctionStatement, token);
			}
			this.functionStatementBody(createFunctionStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				createFunctionStatement = null;
			}
			return createFunctionStatement;
		}

		// Token: 0x06001855 RID: 6229 RVA: 0x000D07A8 File Offset: 0x000CE9A8
		public AlterFunctionStatement alterFunctionStatement()
		{
			AlterFunctionStatement alterFunctionStatement = base.FragmentFactory.CreateFragment<AlterFunctionStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterFunctionStatement, token);
			}
			this.functionStatementBody(alterFunctionStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				alterFunctionStatement = null;
			}
			return alterFunctionStatement;
		}

		// Token: 0x06001856 RID: 6230 RVA: 0x000D0804 File Offset: 0x000CEA04
		public CreateSchemaStatement createSchemaStatement()
		{
			CreateSchemaStatement createSchemaStatement = base.FragmentFactory.CreateFragment<CreateSchemaStatement>();
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createSchemaStatement, token);
			}
			this.match(139);
			int num = this.LA(1);
			if (num != 11)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						createSchemaStatement.Name = identifier;
					}
					this.authorizationOpt(createSchemaStatement);
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.authorization(createSchemaStatement);
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(createSchemaStatement);
			}
			StatementList statementList = this.createSchemaElementList();
			if (this.inputState.guessing == 0)
			{
				createSchemaStatement.StatementList = statementList;
			}
			return createSchemaStatement;
		}

		// Token: 0x06001857 RID: 6231 RVA: 0x000D08E4 File Offset: 0x000CEAE4
		public EnableDisableTriggerStatement disableTriggerStatement()
		{
			EnableDisableTriggerStatement enableDisableTriggerStatement = base.FragmentFactory.CreateFragment<EnableDisableTriggerStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "DISABLE");
				TSql80ParserBaseInternal.UpdateTokenInfo(enableDisableTriggerStatement, token);
				enableDisableTriggerStatement.TriggerEnforcement = TriggerEnforcement.Disable;
			}
			this.enableDisableTriggerBody(enableDisableTriggerStatement);
			return enableDisableTriggerStatement;
		}

		// Token: 0x06001858 RID: 6232 RVA: 0x000D0940 File Offset: 0x000CEB40
		public EnableDisableTriggerStatement enableTriggerStatement()
		{
			EnableDisableTriggerStatement enableDisableTriggerStatement = base.FragmentFactory.CreateFragment<EnableDisableTriggerStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENABLE");
				TSql80ParserBaseInternal.UpdateTokenInfo(enableDisableTriggerStatement, token);
				enableDisableTriggerStatement.TriggerEnforcement = TriggerEnforcement.Enable;
			}
			this.enableDisableTriggerBody(enableDisableTriggerStatement);
			return enableDisableTriggerStatement;
		}

		// Token: 0x06001859 RID: 6233 RVA: 0x000D099C File Offset: 0x000CEB9C
		public MoveConversationStatement moveConversationStatement()
		{
			MoveConversationStatement moveConversationStatement = base.FragmentFactory.CreateFragment<MoveConversationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(151);
			ScalarExpression scalarExpression2 = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MOVE");
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(moveConversationStatement, token);
				moveConversationStatement.Conversation = scalarExpression;
				moveConversationStatement.Group = scalarExpression2;
			}
			return moveConversationStatement;
		}

		// Token: 0x0600185A RID: 6234 RVA: 0x000D0A38 File Offset: 0x000CEC38
		public GetConversationGroupStatement getConversationGroupStatement()
		{
			GetConversationGroupStatement getConversationGroupStatement = base.FragmentFactory.CreateFragment<GetConversationGroupStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(76);
			VariableReference variableReference = this.variable();
			this.match(71);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "GET");
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(getConversationGroupStatement, token);
				getConversationGroupStatement.GroupId = variableReference;
				getConversationGroupStatement.Queue = schemaObjectName;
			}
			return getConversationGroupStatement;
		}

		// Token: 0x0600185B RID: 6235 RVA: 0x000D0AD4 File Offset: 0x000CECD4
		public ReceiveStatement receiveStatement()
		{
			ReceiveStatement receiveStatement = base.FragmentFactory.CreateFragment<ReceiveStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RECEIVE");
				TSql80ParserBaseInternal.UpdateTokenInfo(receiveStatement, token);
			}
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num == 20 || num == 25 || num == 34)
					{
						goto IL_0229;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_0229;
					default:
						if (num == 81)
						{
							goto IL_0229;
						}
						break;
					}
				}
				else
				{
					if (num == 93)
					{
						goto IL_0229;
					}
					switch (num)
					{
					case 100:
					case 101:
						goto IL_0229;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num == 133 || num == 136)
					{
						goto IL_0229;
					}
				}
				else if (num == 141 || num == 147)
				{
					goto IL_0229;
				}
			}
			else if (num <= 163)
			{
				if (num != 152)
				{
					if (num == 163)
					{
						goto IL_0229;
					}
				}
				else
				{
					this.match(152);
					this.match(191);
					ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
					this.match(192);
					if (this.inputState.guessing == 0)
					{
						receiveStatement.Top = scalarExpression;
						goto IL_0229;
					}
					goto IL_0229;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_0229;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_0229;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0229:
			SelectElement selectElement = this.receiveSelectExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(receiveStatement, receiveStatement.SelectElements, selectElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				selectElement = this.receiveSelectExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(receiveStatement, receiveStatement.SelectElements, selectElement);
				}
			}
			this.match(71);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				receiveStatement.Queue = schemaObjectName;
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_057F;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_057F;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_057F;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_057F;
							default:
								if (num2 == 28)
								{
									goto IL_057F;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 33:
					case 35:
						goto IL_057F;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_057F;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_057F;
							}
							break;
						}
						break;
					}
				}
				else
				{
					if (num2 == 82)
					{
						goto IL_057F;
					}
					switch (num2)
					{
					case 86:
						goto IL_057F;
					case 87:
						break;
					case 88:
					{
						this.match(88);
						VariableTableReference variableTableReference = this.variableDmlTarget();
						if (this.inputState.guessing == 0)
						{
							receiveStatement.Into = variableTableReference;
							goto IL_057F;
						}
						goto IL_057F;
					}
					default:
						if (num2 == 92)
						{
							goto IL_057F;
						}
						break;
					}
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 106)
				{
					if (num2 == 95 || num2 == 106)
					{
						goto IL_057F;
					}
				}
				else
				{
					if (num2 == 119)
					{
						goto IL_057F;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_057F;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 169:
						case 170:
						case 171:
						case 172:
							goto IL_057F;
						}
						break;
					}
				}
			}
			else if (num2 <= 192)
			{
				if (num2 == 176)
				{
					goto IL_057F;
				}
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_057F;
				default:
					switch (num2)
					{
					case 191:
					case 192:
						goto IL_057F;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_057F;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_057F;
				default:
					if (num2 == 232)
					{
						goto IL_057F;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_057F:
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 28)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							return receiveStatement;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return receiveStatement;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return receiveStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								return receiveStatement;
							default:
								if (num3 == 28)
								{
									return receiveStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 75)
				{
					switch (num3)
					{
					case 33:
					case 35:
						return receiveStatement;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return receiveStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num3)
							{
							case 74:
							case 75:
								return receiveStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					return receiveStatement;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 106)
				{
					if (num3 == 95 || num3 == 106)
					{
						return receiveStatement;
					}
				}
				else
				{
					if (num3 == 119)
					{
						return receiveStatement;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return receiveStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return receiveStatement;
						case 169:
						{
							this.match(169);
							IToken token2 = this.LT(1);
							this.match(232);
							this.match(206);
							ValueExpression valueExpression = this.stringOrVariable();
							if (this.inputState.guessing == 0)
							{
								if (TSql80ParserBaseInternal.TryMatch(token2, "CONVERSATION_GROUP_ID"))
								{
									receiveStatement.IsConversationGroupIdWhere = true;
								}
								else
								{
									TSql80ParserBaseInternal.Match(token2, "CONVERSATION_HANDLE");
									receiveStatement.IsConversationGroupIdWhere = false;
								}
								receiveStatement.Where = valueExpression;
								return receiveStatement;
							}
							return receiveStatement;
						}
						}
						break;
					}
				}
			}
			else if (num3 <= 192)
			{
				if (num3 == 176)
				{
					return receiveStatement;
				}
				switch (num3)
				{
				case 180:
				case 181:
					return receiveStatement;
				default:
					switch (num3)
					{
					case 191:
					case 192:
						return receiveStatement;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return receiveStatement;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return receiveStatement;
				default:
					if (num3 == 232)
					{
						return receiveStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600185C RID: 6236 RVA: 0x000D1378 File Offset: 0x000CF578
		public SendStatement sendStatement()
		{
			SendStatement sendStatement = base.FragmentFactory.CreateFragment<SendStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(105);
			IToken token2 = this.LT(1);
			this.match(232);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SEND");
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(sendStatement, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(sendStatement, sendStatement.ConversationHandles, scalarExpression);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
			{
				IToken token3 = this.LT(1);
				this.match(232);
				IToken token4 = this.LT(1);
				this.match(232);
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "MESSAGE");
					TSql80ParserBaseInternal.Match(token4, "TYPE");
					sendStatement.MessageTypeName = identifierOrValueExpression;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_37_.member(this.LA(2)))
			{
				this.match(191);
				scalarExpression = this.expression(ExpressionFlags.None);
				IToken token5 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					sendStatement.MessageBody = scalarExpression;
					TSql80ParserBaseInternal.UpdateTokenInfo(sendStatement, token5);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return sendStatement;
		}

		// Token: 0x0600185D RID: 6237 RVA: 0x000D1570 File Offset: 0x000CF770
		public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent)
		{
			this.match(155);
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.TriggerNames, schemaObjectName);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					schemaObjectName = this.schemaObjectThreePartName();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.TriggerNames, schemaObjectName);
					}
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					vParent.All = true;
				}
			}
			this.match(105);
			TriggerObject triggerObject = this.triggerObject();
			if (this.inputState.guessing == 0)
			{
				vParent.TriggerObject = triggerObject;
			}
		}

		// Token: 0x0600185E RID: 6238 RVA: 0x000D1664 File Offset: 0x000CF864
		public SchemaObjectName schemaObjectThreePartName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			List<Identifier> list = this.identifierList(3);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, list);
			}
			return schemaObjectName;
		}

		// Token: 0x0600185F RID: 6239 RVA: 0x000D16A0 File Offset: 0x000CF8A0
		public TriggerObject triggerObject()
		{
			TriggerObject triggerObject = base.FragmentFactory.CreateFragment<TriggerObject>();
			int num = this.LA(1);
			if (num <= 43)
			{
				if (num == 5 || num == 43)
				{
					TriggerScope triggerScope = this.triggerScope(triggerObject);
					if (this.inputState.guessing == 0)
					{
						triggerObject.TriggerScope = triggerScope;
						return triggerObject;
					}
					return triggerObject;
				}
			}
			else
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_0084;
					}
				}
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					triggerObject.Name = schemaObjectName;
					triggerObject.TriggerScope = TriggerScope.Normal;
					return triggerObject;
				}
				return triggerObject;
			}
			IL_0084:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001860 RID: 6240 RVA: 0x000D1748 File Offset: 0x000CF948
		public CreateAggregateStatement createAggregateStatement()
		{
			CreateAggregateStatement createAggregateStatement = base.FragmentFactory.CreateFragment<CreateAggregateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AGGREGATE");
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "AGGREGATE");
				createAggregateStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createAggregateStatement);
			}
			this.match(191);
			ProcedureParameter procedureParameter = this.aggregateParameter();
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(createAggregateStatement, createAggregateStatement.Parameters, procedureParameter);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "RETURNS");
				createAggregateStatement.ReturnType = dataTypeReference;
			}
			this.match(175);
			AssemblyName assemblyName = this.assemblyName();
			if (this.inputState.guessing == 0)
			{
				createAggregateStatement.AssemblyName = assemblyName;
			}
			return createAggregateStatement;
		}

		// Token: 0x06001861 RID: 6241 RVA: 0x000D1850 File Offset: 0x000CFA50
		public CreateApplicationRoleStatement createApplicationRoleStatement()
		{
			CreateApplicationRoleStatement createApplicationRoleStatement = base.FragmentFactory.CreateFragment<CreateApplicationRoleStatement>();
			this.applicationRoleStatement(createApplicationRoleStatement, true);
			return createApplicationRoleStatement;
		}

		// Token: 0x06001862 RID: 6242 RVA: 0x000D1874 File Offset: 0x000CFA74
		public CreateAssemblyStatement createAssemblyStatement()
		{
			CreateAssemblyStatement createAssemblyStatement = base.FragmentFactory.CreateFragment<CreateAssemblyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
				createAssemblyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createAssemblyStatement);
			}
			this.authorizationOpt(createAssemblyStatement);
			this.match(71);
			this.expressionList(createAssemblyStatement, createAssemblyStatement.Parameters);
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				AssemblyOption assemblyOption = this.assemblyPermissionSetOption(token2);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AssemblyOption>(createAssemblyStatement, createAssemblyStatement.Options, assemblyOption);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createAssemblyStatement;
		}

		// Token: 0x06001863 RID: 6243 RVA: 0x000D1994 File Offset: 0x000CFB94
		public CreateAsymmetricKeyStatement createAsymmetricKeyStatement()
		{
			CreateAsymmetricKeyStatement createAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<CreateAsymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				createAsymmetricKeyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createAsymmetricKeyStatement);
			}
			this.authorizationOpt(createAsymmetricKeyStatement);
			this.createAsymmetricKeyParams(createAsymmetricKeyStatement);
			if (this.LA(1) == 232 && this.LA(2) == 18)
			{
				Literal literal = this.encryptClause();
				if (this.inputState.guessing == 0)
				{
					createAsymmetricKeyStatement.Password = literal;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createAsymmetricKeyStatement;
		}

		// Token: 0x06001864 RID: 6244 RVA: 0x000D1A78 File Offset: 0x000CFC78
		public CreateCertificateStatement createCertificateStatement()
		{
			CreateCertificateStatement createCertificateStatement = base.FragmentFactory.CreateFragment<CreateCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				createCertificateStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createCertificateStatement);
			}
			this.authorizationOpt(createCertificateStatement);
			this.createCertificateParams(createCertificateStatement);
			if (this.LA(1) == 232 && this.LA(2) == 67)
			{
				this.createCertificateActivityFlag(createCertificateStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createCertificateStatement;
		}

		// Token: 0x06001865 RID: 6245 RVA: 0x000D1B40 File Offset: 0x000CFD40
		public CreateContractStatement createContractStatement()
		{
			CreateContractStatement createContractStatement = base.FragmentFactory.CreateFragment<CreateContractStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONTRACT");
				createContractStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createContractStatement);
			}
			this.authorizationOpt(createContractStatement);
			this.match(191);
			ContractMessage contractMessage = this.contractMessage();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ContractMessage>(createContractStatement, createContractStatement.Messages, contractMessage);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				contractMessage = this.contractMessage();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ContractMessage>(createContractStatement, createContractStatement.Messages, contractMessage);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createContractStatement, token2);
			}
			return createContractStatement;
		}

		// Token: 0x06001866 RID: 6246 RVA: 0x000D1C38 File Offset: 0x000CFE38
		public CreateCredentialStatement createCredentialStatement()
		{
			CreateCredentialStatement createCredentialStatement = base.FragmentFactory.CreateFragment<CreateCredentialStatement>();
			this.credentialStatementBody(createCredentialStatement);
			return createCredentialStatement;
		}

		// Token: 0x06001867 RID: 6247 RVA: 0x000D1C5C File Offset: 0x000CFE5C
		public CreateEndpointStatement createEndpointStatement()
		{
			CreateEndpointStatement createEndpointStatement = base.FragmentFactory.CreateFragment<CreateEndpointStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENDPOINT");
				createEndpointStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createEndpointStatement);
			}
			this.authorizationOpt(createEndpointStatement);
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.endpointOptions(createEndpointStatement);
			}
			this.protocolInfo(createEndpointStatement);
			this.payloadInfo(createEndpointStatement);
			return createEndpointStatement;
		}

		// Token: 0x06001868 RID: 6248 RVA: 0x000D1D00 File Offset: 0x000CFF00
		public CreateEventNotificationStatement createEventNotificationStatement()
		{
			CreateEventNotificationStatement createEventNotificationStatement = base.FragmentFactory.CreateFragment<CreateEventNotificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EVENT");
				TSql80ParserBaseInternal.Match(token2, "NOTIFICATION");
				createEventNotificationStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createEventNotificationStatement);
			}
			EventNotificationObjectScope eventNotificationObjectScope = this.eventNotificationObjectScope();
			if (this.inputState.guessing == 0)
			{
				createEventNotificationStatement.Scope = eventNotificationObjectScope;
			}
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FAN_IN");
					createEventNotificationStatement.WithFanIn = true;
				}
			}
			this.match(67);
			EventTypeGroupContainer eventTypeGroupContainer = this.eventTypeGroupContainer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventTypeGroupContainer>(createEventNotificationStatement, createEventNotificationStatement.EventTypeGroups, eventTypeGroupContainer);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				eventTypeGroupContainer = this.eventTypeGroupContainer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventTypeGroupContainer>(createEventNotificationStatement, createEventNotificationStatement.EventTypeGroups, eventTypeGroupContainer);
				}
			}
			this.match(151);
			IToken token4 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "SERVICE");
			}
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				createEventNotificationStatement.BrokerService = literal;
			}
			this.match(198);
			literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				createEventNotificationStatement.BrokerInstanceSpecifier = literal;
			}
			return createEventNotificationStatement;
		}

		// Token: 0x06001869 RID: 6249 RVA: 0x000D1EF0 File Offset: 0x000D00F0
		public TSqlStatement createFulltextStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FULLTEXT");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 84)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createFulltextCatalogStatement();
			}
			else
			{
				tsqlStatement = this.createFulltextIndexStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x0600186A RID: 6250 RVA: 0x000D1F68 File Offset: 0x000D0168
		public CreateXmlIndexStatement createPrimaryXmlIndexStatement()
		{
			this.match(118);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
			}
			return this.createXmlIndexStatement(true);
		}

		// Token: 0x0600186B RID: 6251 RVA: 0x000D1FB8 File Offset: 0x000D01B8
		public TSqlStatement createXmlStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 84)
			{
				if (num != 139)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createXmlSchemaCollectionStatement();
			}
			else
			{
				tsqlStatement = this.createXmlIndexStatement(false);
			}
			return tsqlStatement;
		}

		// Token: 0x0600186C RID: 6252 RVA: 0x000D2034 File Offset: 0x000D0234
		public CreateLoginStatement createLoginStatement()
		{
			CreateLoginStatement createLoginStatement = base.FragmentFactory.CreateFragment<CreateLoginStatement>();
			this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createLoginStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createLoginStatement);
			}
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				CreateLoginSource createLoginSource = this.passwordLoginSource();
				if (this.inputState.guessing == 0)
				{
					createLoginStatement.Source = createLoginSource;
				}
			}
			else
			{
				this.match(71);
				CreateLoginSource createLoginSource;
				if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)) && base.NextTokenMatches("WINDOWS"))
				{
					createLoginSource = this.windowsLoginSource();
				}
				else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
				{
					createLoginSource = this.certificateLoginSource();
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 91)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					createLoginSource = this.asymmetricKeyLoginSource();
				}
				if (this.inputState.guessing == 0)
				{
					createLoginStatement.Source = createLoginSource;
				}
			}
			return createLoginStatement;
		}

		// Token: 0x0600186D RID: 6253 RVA: 0x000D2190 File Offset: 0x000D0390
		public CreateMessageTypeStatement createMessageTypeStatement()
		{
			CreateMessageTypeStatement createMessageTypeStatement = base.FragmentFactory.CreateFragment<CreateMessageTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MESSAGE");
				TSql80ParserBaseInternal.Match(token2, "TYPE");
				createMessageTypeStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createMessageTypeStatement);
			}
			this.authorizationOpt(createMessageTypeStatement);
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				this.messageTypeValidation(createMessageTypeStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createMessageTypeStatement;
		}

		// Token: 0x0600186E RID: 6254 RVA: 0x000D2274 File Offset: 0x000D0474
		public CreateMasterKeyStatement createMasterKeyStatement()
		{
			CreateMasterKeyStatement createMasterKeyStatement = base.FragmentFactory.CreateFragment<CreateMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			this.match(91);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "ENCRYPTION");
			}
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
			}
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				createMasterKeyStatement.Password = literal;
			}
			return createMasterKeyStatement;
		}

		// Token: 0x0600186F RID: 6255 RVA: 0x000D2350 File Offset: 0x000D0550
		public TSqlStatement createPartitionStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 73)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.createPartitionScheme();
			}
			else
			{
				tsqlStatement = this.createPartitionFunction();
			}
			return tsqlStatement;
		}

		// Token: 0x06001870 RID: 6256 RVA: 0x000D23CC File Offset: 0x000D05CC
		public CreateQueueStatement createQueueStatement()
		{
			CreateQueueStatement createQueueStatement = base.FragmentFactory.CreateFragment<CreateQueueStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				createQueueStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createQueueStatement);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.queueOptionList(createQueueStatement, false);
			}
			else if (!TSql90ParserInternal.tokenSet_20_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return createQueueStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createQueueStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return createQueueStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return createQueueStatement;
							default:
								if (num == 28)
								{
									return createQueueStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return createQueueStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createQueueStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return createQueueStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return createQueueStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return createQueueStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
						if (this.inputState.guessing == 0)
						{
							createQueueStatement.OnFileGroup = identifierOrValueExpression;
							return createQueueStatement;
						}
						return createQueueStatement;
					}
					case 106:
						return createQueueStatement;
					default:
						if (num == 119)
						{
							return createQueueStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createQueueStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createQueueStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createQueueStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return createQueueStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return createQueueStatement;
				default:
					if (num == 191)
					{
						return createQueueStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return createQueueStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createQueueStatement;
				default:
					if (num == 232)
					{
						return createQueueStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001871 RID: 6257 RVA: 0x000D2744 File Offset: 0x000D0944
		public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement()
		{
			CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<CreateRemoteServiceBindingStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOTE");
				TSql80ParserBaseInternal.Match(token2, "SERVICE");
				TSql80ParserBaseInternal.Match(token3, "BINDING");
				createRemoteServiceBindingStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createRemoteServiceBindingStatement);
			}
			this.authorizationOpt(createRemoteServiceBindingStatement);
			this.match(151);
			IToken token4 = this.LT(1);
			this.match(232);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "SERVICE");
				createRemoteServiceBindingStatement.Service = literal;
			}
			this.match(171);
			int num = this.LA(1);
			RemoteServiceBindingOption remoteServiceBindingOption;
			if (num == 163)
			{
				remoteServiceBindingOption = this.bindingUserOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								return createRemoteServiceBindingStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return createRemoteServiceBindingStatement;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									return createRemoteServiceBindingStatement;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								return createRemoteServiceBindingStatement;
							default:
								if (num2 == 28)
								{
									return createRemoteServiceBindingStatement;
								}
								switch (num2)
								{
								case 33:
								case 35:
									return createRemoteServiceBindingStatement;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createRemoteServiceBindingStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return createRemoteServiceBindingStatement;
							default:
								if (num2 == 82)
								{
									return createRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						return createRemoteServiceBindingStatement;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 == 106 || num2 == 119)
						{
							return createRemoteServiceBindingStatement;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return createRemoteServiceBindingStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createRemoteServiceBindingStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createRemoteServiceBindingStatement;
							case 168:
							case 169:
								break;
							default:
								if (num2 == 176)
								{
									return createRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					switch (num2)
					{
					case 180:
					case 181:
						return createRemoteServiceBindingStatement;
					default:
						if (num2 == 191)
						{
							return createRemoteServiceBindingStatement;
						}
						if (num2 == 198)
						{
							this.match(198);
							remoteServiceBindingOption = this.bindingAnonymousOption();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
								return createRemoteServiceBindingStatement;
							}
							return createRemoteServiceBindingStatement;
						}
						break;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return createRemoteServiceBindingStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return createRemoteServiceBindingStatement;
					default:
						if (num2 == 232)
						{
							return createRemoteServiceBindingStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			remoteServiceBindingOption = this.bindingAnonymousOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
			}
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 35)
				{
					if (num3 <= 17)
					{
						if (num3 == 1)
						{
							return createRemoteServiceBindingStatement;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return createRemoteServiceBindingStatement;
						case 5:
							break;
						default:
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return createRemoteServiceBindingStatement;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 22:
						case 23:
							return createRemoteServiceBindingStatement;
						default:
							if (num3 == 28)
							{
								return createRemoteServiceBindingStatement;
							}
							switch (num3)
							{
							case 33:
							case 35:
								return createRemoteServiceBindingStatement;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return createRemoteServiceBindingStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							return createRemoteServiceBindingStatement;
						default:
							if (num3 == 82)
							{
								return createRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					return createRemoteServiceBindingStatement;
				}
			}
			else if (num3 <= 176)
			{
				if (num3 <= 144)
				{
					if (num3 == 106 || num3 == 119)
					{
						return createRemoteServiceBindingStatement;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createRemoteServiceBindingStatement;
					}
				}
				else
				{
					switch (num3)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return createRemoteServiceBindingStatement;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num3)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return createRemoteServiceBindingStatement;
						case 168:
						case 169:
							break;
						default:
							if (num3 == 176)
							{
								return createRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 198)
			{
				switch (num3)
				{
				case 180:
				case 181:
					return createRemoteServiceBindingStatement;
				default:
					if (num3 == 191)
					{
						return createRemoteServiceBindingStatement;
					}
					if (num3 == 198)
					{
						this.match(198);
						remoteServiceBindingOption = this.bindingUserOption();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
							return createRemoteServiceBindingStatement;
						}
						return createRemoteServiceBindingStatement;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return createRemoteServiceBindingStatement;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return createRemoteServiceBindingStatement;
				default:
					if (num3 == 232)
					{
						return createRemoteServiceBindingStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001872 RID: 6258 RVA: 0x000D2E64 File Offset: 0x000D1064
		public CreateRoleStatement createRoleStatement()
		{
			CreateRoleStatement createRoleStatement = base.FragmentFactory.CreateFragment<CreateRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				createRoleStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createRoleStatement);
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return createRoleStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createRoleStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 11:
							this.match(11);
							identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								createRoleStatement.Owner = identifier;
								return createRoleStatement;
							}
							return createRoleStatement;
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							return createRoleStatement;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
						case 21:
							break;
						default:
							if (num == 28)
							{
								return createRoleStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return createRoleStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return createRoleStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return createRoleStatement;
						default:
							if (num == 82)
							{
								return createRoleStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return createRoleStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 119)
					{
						return createRoleStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createRoleStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createRoleStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createRoleStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return createRoleStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return createRoleStatement;
				default:
					if (num == 191)
					{
						return createRoleStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return createRoleStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createRoleStatement;
				default:
					if (num == 232)
					{
						return createRoleStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001873 RID: 6259 RVA: 0x000D3158 File Offset: 0x000D1358
		public CreateRouteStatement createRouteStatement()
		{
			CreateRouteStatement createRouteStatement = base.FragmentFactory.CreateFragment<CreateRouteStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROUTE");
				createRouteStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createRouteStatement);
			}
			this.authorizationOpt(createRouteStatement);
			this.routeOptionList(createRouteStatement);
			return createRouteStatement;
		}

		// Token: 0x06001874 RID: 6260 RVA: 0x000D31C4 File Offset: 0x000D13C4
		public CreateServiceStatement createServiceStatement()
		{
			CreateServiceStatement createServiceStatement = base.FragmentFactory.CreateFragment<CreateServiceStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
				createServiceStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createServiceStatement);
			}
			this.authorizationOpt(createServiceStatement);
			this.onQueueClause(createServiceStatement);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.match(191);
				ServiceContract serviceContract = this.serviceContract();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(createServiceStatement, createServiceStatement.ServiceContracts, serviceContract);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					serviceContract = this.serviceContract();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(createServiceStatement, createServiceStatement.ServiceContracts, serviceContract);
					}
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(createServiceStatement, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createServiceStatement;
		}

		// Token: 0x06001875 RID: 6261 RVA: 0x000D3330 File Offset: 0x000D1530
		public CreateSymmetricKeyStatement createSymmetricKeyStatement()
		{
			CreateSymmetricKeyStatement createSymmetricKeyStatement = base.FragmentFactory.CreateFragment<CreateSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				createSymmetricKeyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createSymmetricKeyStatement);
			}
			this.authorizationOpt(createSymmetricKeyStatement);
			this.match(171);
			this.keySpecList(createSymmetricKeyStatement);
			this.encryptorListWithNoPassword(createSymmetricKeyStatement);
			return createSymmetricKeyStatement;
		}

		// Token: 0x06001876 RID: 6262 RVA: 0x000D33B4 File Offset: 0x000D15B4
		public CreateSynonymStatement createSynonymStatement()
		{
			CreateSynonymStatement createSynonymStatement = base.FragmentFactory.CreateFragment<CreateSynonymStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYNONYM");
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "SYNONYM");
				createSynonymStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createSynonymStatement);
			}
			this.match(67);
			schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				createSynonymStatement.ForName = schemaObjectName;
			}
			return createSynonymStatement;
		}

		// Token: 0x06001877 RID: 6263 RVA: 0x000D344C File Offset: 0x000D164C
		public CreateTypeStatement createTypeStatement()
		{
			CreateTypeStatement createTypeStatement = null;
			SchemaObjectName schemaObjectName = null;
			try
			{
				IToken token = this.LT(1);
				this.match(232);
				schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "TYPE");
					TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "TYPE");
				}
				int num = this.LA(1);
				if (num != 71)
				{
					if (num != 175)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					createTypeStatement = this.createTypeUdtStatement();
				}
				else
				{
					createTypeStatement = this.createTypeUddtStatement();
				}
				if (this.inputState.guessing == 0)
				{
					createTypeStatement.Name = schemaObjectName;
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					CreateTypeStatement createTypeStatement2 = ex.Statement as CreateTypeStatement;
					createTypeStatement2.Name = schemaObjectName;
					throw;
				}
				throw;
			}
			return createTypeStatement;
		}

		// Token: 0x06001878 RID: 6264 RVA: 0x000D352C File Offset: 0x000D172C
		public CreateUserStatement createUserStatement()
		{
			CreateUserStatement createUserStatement = base.FragmentFactory.CreateFragment<CreateUserStatement>();
			this.match(163);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createUserStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createUserStatement);
			}
			if ((this.LA(1) == 67 || this.LA(1) == 71 || this.LA(1) == 232) && this.LA(2) == 232)
			{
				UserLoginOption userLoginOption = this.userLoginOption();
				if (this.inputState.guessing == 0)
				{
					createUserStatement.UserLoginOption = userLoginOption;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.createUserDefaultSchemaOpt(createUserStatement);
			return createUserStatement;
		}

		// Token: 0x06001879 RID: 6265 RVA: 0x000D3604 File Offset: 0x000D1804
		public ProcedureParameter aggregateParameter()
		{
			ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
			Identifier identifier = this.identifierVariable();
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				procedureParameter.VariableName = identifier;
				procedureParameter.DataType = dataTypeReference;
			}
			return procedureParameter;
		}

		// Token: 0x0600187A RID: 6266 RVA: 0x000D3648 File Offset: 0x000D1848
		public AssemblyName assemblyName()
		{
			AssemblyName assemblyName = base.FragmentFactory.CreateFragment<AssemblyName>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NAME");
			}
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				assemblyName.Name = identifier;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return assemblyName;
						}
						switch (num)
						{
						case 4:
						case 6:
							return assemblyName;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return assemblyName;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return assemblyName;
						default:
							if (num == 28)
							{
								return assemblyName;
							}
							switch (num)
							{
							case 33:
							case 35:
								return assemblyName;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return assemblyName;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return assemblyName;
						default:
							if (num == 82)
							{
								return assemblyName;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return assemblyName;
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						return assemblyName;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return assemblyName;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return assemblyName;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return assemblyName;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return assemblyName;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 200)
			{
				switch (num)
				{
				case 180:
				case 181:
					return assemblyName;
				default:
					if (num == 191)
					{
						return assemblyName;
					}
					if (num == 200)
					{
						this.match(200);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							assemblyName.ClassName = identifier;
							return assemblyName;
						}
						return assemblyName;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return assemblyName;
				}
				switch (num)
				{
				case 219:
				case 220:
					return assemblyName;
				default:
					if (num == 232)
					{
						return assemblyName;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600187B RID: 6267 RVA: 0x000D3948 File Offset: 0x000D1B48
		public Identifier identifierVariable()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			IToken token = this.LT(1);
			this.match(234);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
				identifier.SetIdentifier(token.getText());
			}
			return identifier;
		}

		// Token: 0x0600187C RID: 6268 RVA: 0x000D3998 File Offset: 0x000D1B98
		public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly)
		{
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "APPLICATION");
				TSql80ParserBaseInternal.Match(token2, "ROLE");
				vParent.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(vParent);
			}
			this.match(171);
			ApplicationRoleOption applicationRoleOption = this.applicationRoleOption(defaultSchemaAndPasswordOnly);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ApplicationRoleOption>(vParent, vParent.ApplicationRoleOptions, applicationRoleOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				applicationRoleOption = this.applicationRoleOption(defaultSchemaAndPasswordOnly);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ApplicationRoleOption>(vParent, vParent.ApplicationRoleOptions, applicationRoleOption);
				}
			}
		}

		// Token: 0x0600187D RID: 6269 RVA: 0x000D3A74 File Offset: 0x000D1C74
		public Identifier identifier()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
					identifier.SetUnquotedIdentifier(token.getText());
					TSql80ParserBaseInternal.CheckIdentifierLength(identifier);
				}
				break;
			}
			case 233:
			{
				IToken token2 = this.LT(1);
				this.match(233);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token2);
					identifier.SetIdentifier(token2.getText());
					TSql80ParserBaseInternal.CheckIdentifierLength(identifier);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifier;
		}

		// Token: 0x0600187E RID: 6270 RVA: 0x000D3B3C File Offset: 0x000D1D3C
		public void authorizationOpt(IAuthorization vParent)
		{
			int num = this.LA(1);
			if (num <= 106)
			{
				if (num <= 64)
				{
					if (num <= 23)
					{
						switch (num)
						{
						case 1:
						case 4:
						case 6:
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
							return;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						case 11:
							this.authorization(vParent);
							return;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return;
							}
							break;
						}
					}
					else
					{
						if (num == 28)
						{
							return;
						}
						switch (num)
						{
						case 33:
						case 35:
							return;
						case 34:
							break;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								return;
							}
							break;
						}
					}
				}
				else if (num <= 86)
				{
					switch (num)
					{
					case 71:
					case 74:
					case 75:
						return;
					case 72:
					case 73:
						break;
					default:
						if (num == 82 || num == 86)
						{
							return;
						}
						break;
					}
				}
				else
				{
					if (num == 92 || num == 95)
					{
						return;
					}
					switch (num)
					{
					case 105:
					case 106:
						return;
					}
				}
			}
			else if (num <= 172)
			{
				if (num <= 144)
				{
					if (num == 119)
					{
						return;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					}
				}
				else
				{
					if (num == 151)
					{
						return;
					}
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return;
				}
				switch (num)
				{
				case 180:
				case 181:
					return;
				default:
					if (num == 191)
					{
						return;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return;
				}
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600187F RID: 6271 RVA: 0x000D3DF0 File Offset: 0x000D1FF0
		public void expressionList(TSqlFragment vParent, IList<ScalarExpression> expressions)
		{
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, scalarExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, scalarExpression);
				}
			}
		}

		// Token: 0x06001880 RID: 6272 RVA: 0x000D3E54 File Offset: 0x000D2054
		public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility)
		{
			PermissionSetAssemblyOption permissionSetAssemblyOption = base.FragmentFactory.CreateFragment<PermissionSetAssemblyOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tPermissionSetVisibility, "PERMISSION_SET");
				TSql80ParserBaseInternal.UpdateTokenInfo(permissionSetAssemblyOption, tPermissionSetVisibility);
				permissionSetAssemblyOption.OptionKind = AssemblyOptionKind.PermissionSet;
				TSql80ParserBaseInternal.UpdateTokenInfo(permissionSetAssemblyOption, token);
				permissionSetAssemblyOption.PermissionSetOption = PermissionSetOptionHelper.Instance.ParseOption(token);
			}
			return permissionSetAssemblyOption;
		}

		// Token: 0x06001881 RID: 6273 RVA: 0x000D3EC4 File Offset: 0x000D20C4
		public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent)
		{
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				this.asymKeySpec(vParent);
				return;
			}
			else
			{
				this.match(71);
				EncryptionSource encryptionSource = this.asymKeySource();
				if (this.inputState.guessing == 0)
				{
					vParent.KeySource = encryptionSource;
					return;
				}
				return;
			}
		}

		// Token: 0x06001882 RID: 6274 RVA: 0x000D3F34 File Offset: 0x000D2134
		public Literal encryptClause()
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token2, "PASSWORD");
			}
			return literal;
		}

		// Token: 0x06001883 RID: 6275 RVA: 0x000D3FAC File Offset: 0x000D21AC
		public EncryptionSource asymKeySource()
		{
			EncryptionSource encryptionSource;
			if ((this.LA(1) == 65 || this.LA(1) == 232) && (this.LA(2) == 65 || this.LA(2) == 206))
			{
				encryptionSource = this.fileEncryptionSource();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				encryptionSource = this.assemblyEncryptionSource();
			}
			return encryptionSource;
		}

		// Token: 0x06001884 RID: 6276 RVA: 0x000D403C File Offset: 0x000D223C
		public void asymKeySpec(CreateAsymmetricKeyStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ALGORITHM");
				vParent.EncryptionAlgorithm = EncryptionAlgorithmsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001885 RID: 6277 RVA: 0x000D40B0 File Offset: 0x000D22B0
		public FileEncryptionSource fileEncryptionSource()
		{
			FileEncryptionSource fileEncryptionSource = base.FragmentFactory.CreateFragment<FileEncryptionSource>();
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "EXECUTABLE");
					fileEncryptionSource.IsExecutable = true;
				}
			}
			this.match(65);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				fileEncryptionSource.File = literal;
			}
			return fileEncryptionSource;
		}

		// Token: 0x06001886 RID: 6278 RVA: 0x000D4158 File Offset: 0x000D2358
		public AssemblyEncryptionSource assemblyEncryptionSource()
		{
			AssemblyEncryptionSource assemblyEncryptionSource = base.FragmentFactory.CreateFragment<AssemblyEncryptionSource>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
				assemblyEncryptionSource.Assembly = identifier;
			}
			return assemblyEncryptionSource;
		}

		// Token: 0x06001887 RID: 6279 RVA: 0x000D41B0 File Offset: 0x000D23B0
		public StringLiteral stringLiteral()
		{
			StringLiteral stringLiteral = base.FragmentFactory.CreateFragment<StringLiteral>();
			switch (this.LA(1))
			{
			case 230:
			{
				IToken token = this.LT(1);
				this.match(230);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(stringLiteral, token);
					stringLiteral.Value = TSql80ParserBaseInternal.DecodeAsciiStringLiteral(token.getText());
					stringLiteral.IsLargeObject = TSql80ParserBaseInternal.IsAsciiStringLob(stringLiteral.Value);
				}
				break;
			}
			case 231:
			{
				IToken token2 = this.LT(1);
				this.match(231);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(stringLiteral, token2);
					stringLiteral.IsNational = true;
					stringLiteral.Value = TSql80ParserBaseInternal.DecodeUnicodeStringLiteral(token2.getText());
					stringLiteral.IsLargeObject = TSql80ParserBaseInternal.IsUnicodeStringLob(stringLiteral.Value);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return stringLiteral;
		}

		// Token: 0x06001888 RID: 6280 RVA: 0x000D42A4 File Offset: 0x000D24A4
		public void createCertificateParams(CreateCertificateStatement vParent)
		{
			CertificateOptionKinds certificateOptionKinds = CertificateOptionKinds.None;
			int num = this.LA(1);
			if (num == 71)
			{
				this.match(71);
				this.certificateSource(vParent);
				return;
			}
			if (num != 171 && num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num2 = this.LA(1);
			if (num2 != 171)
			{
				if (num2 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Literal literal = this.encryptClause();
				if (this.inputState.guessing == 0)
				{
					vParent.EncryptionPassword = literal;
				}
			}
			this.match(171);
			CertificateOption certificateOption = this.certificateOption(certificateOptionKinds);
			if (this.inputState.guessing == 0)
			{
				certificateOptionKinds |= certificateOption.Kind;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CertificateOption>(vParent, vParent.CertificateOptions, certificateOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				certificateOption = this.certificateOption(certificateOptionKinds);
				if (this.inputState.guessing == 0)
				{
					certificateOptionKinds |= certificateOption.Kind;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CertificateOption>(vParent, vParent.CertificateOptions, certificateOption);
				}
			}
		}

		// Token: 0x06001889 RID: 6281 RVA: 0x000D43C0 File Offset: 0x000D25C0
		public void createCertificateActivityFlag(CertificateStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(67);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(vParent);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ACTIVE");
				TSql80ParserBaseInternal.Match(token2, "BEGIN_DIALOG");
				vParent.ActiveForBeginDialog = optionState;
			}
		}

		// Token: 0x0600188A RID: 6282 RVA: 0x000D443C File Offset: 0x000D263C
		public void certificateSource(CreateCertificateStatement vParent)
		{
			EncryptionSource encryptionSource;
			if ((this.LA(1) == 65 || this.LA(1) == 232) && (this.LA(2) == 65 || this.LA(2) == 206))
			{
				encryptionSource = this.fileEncryptionSource();
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					this.match(171);
					this.privateKeySpec(vParent);
				}
				else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				encryptionSource = this.assemblyEncryptionSource();
			}
			if (this.inputState.guessing == 0)
			{
				vParent.CertificateSource = encryptionSource;
			}
		}

		// Token: 0x0600188B RID: 6283 RVA: 0x000D4548 File Offset: 0x000D2748
		public CertificateOption certificateOption(CertificateOptionKinds encountered)
		{
			CertificateOption certificateOption = base.FragmentFactory.CreateFragment<CertificateOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				certificateOption.Kind = CertificateOptionKindsHelper.Instance.ParseOption(token);
				certificateOption.Value = literal;
				TSql90ParserBaseInternal.CheckCertificateOptionDupication(encountered, certificateOption.Kind, token);
			}
			return certificateOption;
		}

		// Token: 0x0600188C RID: 6284 RVA: 0x000D45BC File Offset: 0x000D27BC
		public OptionState optionOnOff(TSqlFragment vParent)
		{
			OptionState optionState = OptionState.NotSet;
			switch (this.LA(1))
			{
			case 103:
			{
				IToken token = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					optionState = OptionState.Off;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return optionState;
				}
				return optionState;
			}
			case 105:
			{
				IToken token2 = this.LT(1);
				this.match(105);
				if (this.inputState.guessing == 0)
				{
					optionState = OptionState.On;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return optionState;
				}
				return optionState;
			}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600188D RID: 6285 RVA: 0x000D4654 File Offset: 0x000D2854
		public void privateKeySpec(CertificateStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			this.match(191);
			this.certificatePrivateKeySpec(vParent);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.certificatePrivateKeySpec(vParent);
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PRIVATE");
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x0600188E RID: 6286 RVA: 0x000D46E8 File Offset: 0x000D28E8
		public void certificatePrivateKeySpec(CertificateStatementBase vParent)
		{
			int num = this.LA(1);
			if (num != 65)
			{
				if (num == 232)
				{
					this.passwordChangeOption(vParent);
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				IToken token = this.LT(1);
				this.match(65);
				this.match(206);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing != 0)
				{
					return;
				}
				if (vParent.PrivateKeyPath != null)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				vParent.PrivateKeyPath = literal;
				return;
			}
		}

		// Token: 0x0600188F RID: 6287 RVA: 0x000D4770 File Offset: 0x000D2970
		public void passwordChangeOption(IPasswordChangeOption vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "ENCRYPTION"))
				{
					if (vParent.EncryptionPassword != null)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.EncryptionPassword = literal;
					return;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "DECRYPTION");
					if (vParent.DecryptionPassword != null)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.DecryptionPassword = literal;
				}
			}
		}

		// Token: 0x06001890 RID: 6288 RVA: 0x000D4814 File Offset: 0x000D2A14
		public ContractMessage contractMessage()
		{
			ContractMessage contractMessage = base.FragmentFactory.CreateFragment<ContractMessage>();
			Identifier identifier = this.identifier();
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SENT");
				contractMessage.Name = identifier;
			}
			int num = this.LA(1);
			if (num != 8)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "INITIATOR"))
					{
						contractMessage.SentBy = MessageSender.Initiator;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "TARGET");
						contractMessage.SentBy = MessageSender.Target;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(contractMessage, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(8);
				if (this.inputState.guessing == 0)
				{
					contractMessage.SentBy = MessageSender.Any;
					TSql80ParserBaseInternal.UpdateTokenInfo(contractMessage, token3);
				}
			}
			return contractMessage;
		}

		// Token: 0x06001891 RID: 6289 RVA: 0x000D4920 File Offset: 0x000D2B20
		public void credentialStatementBody(CredentialStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
				vParent.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(vParent);
			}
			this.match(171);
			this.match(79);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				vParent.Identity = literal;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return;
						}
						switch (num)
						{
						case 4:
						case 6:
							return;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return;
						default:
							if (num == 28)
							{
								return;
							}
							switch (num)
							{
							case 33:
							case 35:
								return;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return;
						default:
							if (num == 82)
							{
								return;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return;
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						return;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					return;
				default:
					if (num == 191)
					{
						return;
					}
					if (num == 198)
					{
						this.match(198);
						IToken token2 = this.LT(1);
						this.match(232);
						this.match(206);
						literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "SECRET");
							vParent.Secret = literal;
							return;
						}
						return;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return;
				}
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001892 RID: 6290 RVA: 0x000D4C9C File Offset: 0x000D2E9C
		public SqlCommandIdentifier sqlCommandIdentifier()
		{
			SqlCommandIdentifier sqlCommandIdentifier = base.FragmentFactory.CreateFragment<SqlCommandIdentifier>();
			IToken token = this.LT(1);
			this.match(226);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(sqlCommandIdentifier, token);
				sqlCommandIdentifier.SetUnquotedIdentifier(token.getText());
			}
			return sqlCommandIdentifier;
		}

		// Token: 0x06001893 RID: 6291 RVA: 0x000D4CEC File Offset: 0x000D2EEC
		public AlterDatabaseStatement alterDbAdd()
		{
			this.match(4);
			AlterDatabaseStatement alterDatabaseStatement;
			if ((this.LA(1) == 65 || this.LA(1) == 232) && (this.LA(2) == 65 || this.LA(2) == 191))
			{
				alterDatabaseStatement = this.alterDbAddFile();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				alterDatabaseStatement = this.alterDbAddFilegroup();
			}
			return alterDatabaseStatement;
		}

		// Token: 0x06001894 RID: 6292 RVA: 0x000D4D84 File Offset: 0x000D2F84
		public AlterDatabaseStatement alterDbRemove()
		{
			AlterDatabaseStatement alterDatabaseStatement = null;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOVE");
			}
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FILEGROUP");
					AlterDatabaseRemoveFileGroupStatement alterDatabaseRemoveFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRemoveFileGroupStatement>();
					alterDatabaseRemoveFileGroupStatement.FileGroup = identifier;
					alterDatabaseStatement = alterDatabaseRemoveFileGroupStatement;
				}
			}
			else
			{
				this.match(65);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					AlterDatabaseRemoveFileStatement alterDatabaseRemoveFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRemoveFileStatement>();
					alterDatabaseRemoveFileStatement.File = identifier;
					alterDatabaseStatement = alterDatabaseRemoveFileStatement;
				}
			}
			return alterDatabaseStatement;
		}

		// Token: 0x06001895 RID: 6293 RVA: 0x000D4E78 File Offset: 0x000D3078
		public AlterDatabaseStatement alterDbModify()
		{
			AlterDatabaseStatement alterDatabaseStatement = null;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MODIFY");
			}
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAME"))
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NAME");
					AlterDatabaseModifyNameStatement alterDatabaseModifyNameStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyNameStatement>();
					alterDatabaseModifyNameStatement.NewDatabaseName = identifier;
					alterDatabaseStatement = alterDatabaseModifyNameStatement;
				}
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FILEGROUP");
				}
				alterDatabaseStatement = this.alterDbModifyFilegroup();
			}
			else
			{
				if (this.LA(1) != 65)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				alterDatabaseStatement = this.alterDbModifyFile();
			}
			return alterDatabaseStatement;
		}

		// Token: 0x06001896 RID: 6294 RVA: 0x000D4FC8 File Offset: 0x000D31C8
		public AlterDatabaseSetStatement alterDbSet()
		{
			this.match(142);
			AlterDatabaseSetStatement alterDatabaseSetStatement = this.dbOptionStateList();
			if (this.LA(1) == 171 && (this.LA(2) == 134 || this.LA(2) == 232))
			{
				AlterDatabaseTermination alterDatabaseTermination = this.xactTermination();
				if (this.inputState.guessing == 0)
				{
					alterDatabaseSetStatement.Termination = alterDatabaseTermination;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterDatabaseSetStatement;
		}

		// Token: 0x06001897 RID: 6295 RVA: 0x000D5068 File Offset: 0x000D3268
		public AlterDatabaseCollateStatement alterDbCollate()
		{
			AlterDatabaseCollateStatement alterDatabaseCollateStatement = base.FragmentFactory.CreateFragment<AlterDatabaseCollateStatement>();
			this.collation(alterDatabaseCollateStatement);
			return alterDatabaseCollateStatement;
		}

		// Token: 0x06001898 RID: 6296 RVA: 0x000D508C File Offset: 0x000D328C
		public AlterDatabaseRebuildLogStatement alterDbRebuild()
		{
			AlterDatabaseRebuildLogStatement alterDatabaseRebuildLogStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRebuildLogStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REBUILD");
				TSql80ParserBaseInternal.Match(token2, "LOG");
				TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseRebuildLogStatement, token2);
				base.ThrowPartialAstIfPhaseOne(alterDatabaseRebuildLogStatement);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return alterDatabaseRebuildLogStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return alterDatabaseRebuildLogStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return alterDatabaseRebuildLogStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return alterDatabaseRebuildLogStatement;
							default:
								if (num == 28)
								{
									return alterDatabaseRebuildLogStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return alterDatabaseRebuildLogStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return alterDatabaseRebuildLogStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return alterDatabaseRebuildLogStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return alterDatabaseRebuildLogStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return alterDatabaseRebuildLogStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						FileDeclaration fileDeclaration = this.fileDecl(false);
						if (this.inputState.guessing == 0)
						{
							alterDatabaseRebuildLogStatement.FileDeclaration = fileDeclaration;
							return alterDatabaseRebuildLogStatement;
						}
						return alterDatabaseRebuildLogStatement;
					}
					case 106:
						return alterDatabaseRebuildLogStatement;
					default:
						if (num == 119)
						{
							return alterDatabaseRebuildLogStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterDatabaseRebuildLogStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterDatabaseRebuildLogStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterDatabaseRebuildLogStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return alterDatabaseRebuildLogStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return alterDatabaseRebuildLogStatement;
				default:
					if (num == 191)
					{
						return alterDatabaseRebuildLogStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return alterDatabaseRebuildLogStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return alterDatabaseRebuildLogStatement;
				default:
					if (num == 232)
					{
						return alterDatabaseRebuildLogStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001899 RID: 6297 RVA: 0x000D53C0 File Offset: 0x000D35C0
		public void collation(ICollationSetter vParent)
		{
			this.match(26);
			Identifier identifier = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				vParent.Collation = identifier;
			}
		}

		// Token: 0x0600189A RID: 6298 RVA: 0x000D53F0 File Offset: 0x000D35F0
		public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement)
		{
			int num = this.LA(1);
			FileDeclaration fileDeclaration;
			if (num != 118)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				fileDeclaration = this.fileDeclBody(isAlterDbModifyFileStatement);
			}
			else
			{
				IToken token = this.LT(1);
				this.match(118);
				fileDeclaration = this.fileDeclBody(isAlterDbModifyFileStatement);
				if (this.inputState.guessing == 0)
				{
					fileDeclaration.IsPrimary = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token);
				}
			}
			return fileDeclaration;
		}

		// Token: 0x0600189B RID: 6299 RVA: 0x000D546C File Offset: 0x000D366C
		public AlterDatabaseAddFileStatement alterDbAddFile()
		{
			AlterDatabaseAddFileStatement alterDatabaseAddFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseAddFileStatement>();
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOG");
					alterDatabaseAddFileStatement.IsLog = true;
				}
			}
			this.match(65);
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterDatabaseAddFileStatement);
			}
			this.fileDeclBodyList(alterDatabaseAddFileStatement, alterDatabaseAddFileStatement.FileDeclarations);
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							return alterDatabaseAddFileStatement;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return alterDatabaseAddFileStatement;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterDatabaseAddFileStatement;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							return alterDatabaseAddFileStatement;
						default:
							if (num2 == 28)
							{
								return alterDatabaseAddFileStatement;
							}
							switch (num2)
							{
							case 33:
							case 35:
								return alterDatabaseAddFileStatement;
							}
							break;
						}
					}
				}
				else if (num2 <= 82)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterDatabaseAddFileStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num2)
						{
						case 74:
						case 75:
							return alterDatabaseAddFileStatement;
						default:
							if (num2 == 82)
							{
								return alterDatabaseAddFileStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 86 || num2 == 92 || num2 == 95)
				{
					return alterDatabaseAddFileStatement;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 144)
				{
					if (num2 == 106 || num2 == 119)
					{
						return alterDatabaseAddFileStatement;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterDatabaseAddFileStatement;
					}
				}
				else if (num2 != 151)
				{
					switch (num2)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return alterDatabaseAddFileStatement;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num2)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return alterDatabaseAddFileStatement;
						}
						break;
					}
				}
				else
				{
					Identifier identifier = this.toFilegroup();
					if (this.inputState.guessing == 0)
					{
						alterDatabaseAddFileStatement.FileGroup = identifier;
						return alterDatabaseAddFileStatement;
					}
					return alterDatabaseAddFileStatement;
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176)
				{
					return alterDatabaseAddFileStatement;
				}
				switch (num2)
				{
				case 180:
				case 181:
					return alterDatabaseAddFileStatement;
				default:
					if (num2 == 191)
					{
						return alterDatabaseAddFileStatement;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return alterDatabaseAddFileStatement;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return alterDatabaseAddFileStatement;
				default:
					if (num2 == 232)
					{
						return alterDatabaseAddFileStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600189C RID: 6300 RVA: 0x000D57C4 File Offset: 0x000D39C4
		public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup()
		{
			AlterDatabaseAddFileGroupStatement alterDatabaseAddFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseAddFileGroupStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROUP");
				alterDatabaseAddFileGroupStatement.FileGroup = identifier;
			}
			return alterDatabaseAddFileGroupStatement;
		}

		// Token: 0x0600189D RID: 6301 RVA: 0x000D581C File Offset: 0x000D3A1C
		public void fileDeclBodyList(TSqlFragment vParent, IList<FileDeclaration> fileDeclarations)
		{
			FileDeclaration fileDeclaration = this.fileDeclBody(false);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclaration>(vParent, fileDeclarations, fileDeclaration);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				fileDeclaration = this.fileDeclBody(false);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclaration>(vParent, fileDeclarations, fileDeclaration);
				}
			}
		}

		// Token: 0x0600189E RID: 6302 RVA: 0x000D5880 File Offset: 0x000D3A80
		public Identifier toFilegroup()
		{
			this.match(151);
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROUP");
			}
			return identifier;
		}

		// Token: 0x0600189F RID: 6303 RVA: 0x000D58D0 File Offset: 0x000D3AD0
		public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup()
		{
			AlterDatabaseModifyFileGroupStatement alterDatabaseModifyFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyFileGroupStatement>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterDatabaseModifyFileGroupStatement.FileGroup = identifier;
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier identifier2 = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "NAME");
					alterDatabaseModifyFileGroupStatement.NewFileGroupName = identifier2;
					base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileGroupStatement);
				}
			}
			else if (this.LA(1) == 47)
			{
				IToken token2 = this.LT(1);
				this.match(47);
				if (this.inputState.guessing == 0)
				{
					alterDatabaseModifyFileGroupStatement.MakeDefault = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseModifyFileGroupStatement, token2);
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileGroupStatement);
					alterDatabaseModifyFileGroupStatement.UpdatabilityOption = ModifyFilegroupOptionsHelper.Instance.ParseOption(token3);
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseModifyFileGroupStatement, token3);
				}
				if (this.LA(1) == 171 && (this.LA(2) == 134 || this.LA(2) == 232))
				{
					AlterDatabaseTermination alterDatabaseTermination = this.xactTermination();
					if (this.inputState.guessing == 0)
					{
						alterDatabaseModifyFileGroupStatement.Termination = alterDatabaseTermination;
					}
				}
				else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return alterDatabaseModifyFileGroupStatement;
		}

		// Token: 0x060018A0 RID: 6304 RVA: 0x000D5AB8 File Offset: 0x000D3CB8
		public AlterDatabaseModifyFileStatement alterDbModifyFile()
		{
			AlterDatabaseModifyFileStatement alterDatabaseModifyFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyFileStatement>();
			this.match(65);
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileStatement);
			}
			FileDeclaration fileDeclaration = this.fileDecl(true);
			if (this.inputState.guessing == 0)
			{
				alterDatabaseModifyFileStatement.FileDeclaration = fileDeclaration;
			}
			return alterDatabaseModifyFileStatement;
		}

		// Token: 0x060018A1 RID: 6305 RVA: 0x000D5B0C File Offset: 0x000D3D0C
		public AlterDatabaseTermination xactTermination()
		{
			AlterDatabaseTermination alterDatabaseTermination = base.FragmentFactory.CreateFragment<AlterDatabaseTermination>();
			IToken token = this.LT(1);
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token);
			}
			int num = this.LA(1);
			if (num != 134)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NO_WAIT");
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token2);
					alterDatabaseTermination.NoWait = true;
				}
			}
			else
			{
				this.match(134);
				if (this.LA(1) == 232 && this.LA(2) == 221)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					Literal literal = this.integer();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "AFTER");
						alterDatabaseTermination.RollbackAfter = literal;
					}
					if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
					{
						IToken token4 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token4, "SECONDS");
							TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token4);
						}
					}
					else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token5 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "IMMEDIATE");
						TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token5);
						alterDatabaseTermination.ImmediateRollback = true;
					}
				}
			}
			return alterDatabaseTermination;
		}

		// Token: 0x060018A2 RID: 6306 RVA: 0x000D5D44 File Offset: 0x000D3F44
		public AlterDatabaseSetStatement dbOptionStateList()
		{
			AlterDatabaseSetStatement alterDatabaseSetStatement = base.FragmentFactory.CreateFragment<AlterDatabaseSetStatement>();
			DatabaseOption databaseOption = this.dbOptionStateItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(alterDatabaseSetStatement, alterDatabaseSetStatement.Options, databaseOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				databaseOption = this.dbOptionStateItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(alterDatabaseSetStatement, alterDatabaseSetStatement.Options, databaseOption);
				}
			}
			return alterDatabaseSetStatement;
		}

		// Token: 0x060018A3 RID: 6307 RVA: 0x000D5DBC File Offset: 0x000D3FBC
		public IntegerLiteral integer()
		{
			IntegerLiteral integerLiteral = base.FragmentFactory.CreateFragment<IntegerLiteral>();
			IToken token = this.LT(1);
			this.match(221);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(integerLiteral, token);
				integerLiteral.Value = token.getText();
			}
			return integerLiteral;
		}

		// Token: 0x060018A4 RID: 6308 RVA: 0x000D5E0C File Offset: 0x000D400C
		public DatabaseOption dbOptionStateItem()
		{
			DatabaseOption databaseOption;
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CURSOR_DEFAULT"))
			{
				databaseOption = this.cursorDefaultDbOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 232) && base.NextTokenMatches("RECOVERY"))
			{
				databaseOption = this.recoveryDbOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("PAGE_VERIFY"))
			{
				databaseOption = this.pageVerifyDbOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206 || this.LA(2) == 232) && base.NextTokenMatches("PARTNER"))
			{
				databaseOption = this.partnerOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206) && base.NextTokenMatches("WITNESS"))
			{
				databaseOption = this.witnessOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("PARAMETERIZATION"))
			{
				databaseOption = this.parameterizationOption();
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
			{
				databaseOption = this.dbSingleIdentOption();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 103 && this.LA(2) != 105))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				databaseOption = this.alterDbOnOffOption();
			}
			return databaseOption;
		}

		// Token: 0x060018A5 RID: 6309 RVA: 0x000D5FF0 File Offset: 0x000D41F0
		public CursorDefaultDatabaseOption cursorDefaultDbOption()
		{
			CursorDefaultDatabaseOption cursorDefaultDatabaseOption = base.FragmentFactory.CreateFragment<CursorDefaultDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CURSOR_DEFAULT");
				cursorDefaultDatabaseOption.OptionKind = DatabaseOptionKind.CursorDefault;
				if (TSql80ParserBaseInternal.TryMatch(token2, "LOCAL"))
				{
					cursorDefaultDatabaseOption.IsLocal = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "GLOBAL");
					cursorDefaultDatabaseOption.IsLocal = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(cursorDefaultDatabaseOption, token2);
			}
			return cursorDefaultDatabaseOption;
		}

		// Token: 0x060018A6 RID: 6310 RVA: 0x000D6084 File Offset: 0x000D4284
		public RecoveryDatabaseOption recoveryDbOption()
		{
			RecoveryDatabaseOption recoveryDatabaseOption = base.FragmentFactory.CreateFragment<RecoveryDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RECOVERY");
				recoveryDatabaseOption.OptionKind = DatabaseOptionKind.Recovery;
			}
			int num = this.LA(1);
			if (num != 72)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					recoveryDatabaseOption.Value = RecoveryDbOptionsHelper.Instance.ParseOption(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(recoveryDatabaseOption, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(72);
				if (this.inputState.guessing == 0)
				{
					recoveryDatabaseOption.Value = RecoveryDatabaseOptionKind.Full;
					TSql80ParserBaseInternal.UpdateTokenInfo(recoveryDatabaseOption, token3);
				}
			}
			return recoveryDatabaseOption;
		}

		// Token: 0x060018A7 RID: 6311 RVA: 0x000D616C File Offset: 0x000D436C
		public PageVerifyDatabaseOption pageVerifyDbOption()
		{
			PageVerifyDatabaseOption pageVerifyDatabaseOption = base.FragmentFactory.CreateFragment<PageVerifyDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PAGE_VERIFY");
				pageVerifyDatabaseOption.OptionKind = DatabaseOptionKind.PageVerify;
				pageVerifyDatabaseOption.Value = PageVerifyDbOptionsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(pageVerifyDatabaseOption, token2);
			}
			return pageVerifyDatabaseOption;
		}

		// Token: 0x060018A8 RID: 6312 RVA: 0x000D61E8 File Offset: 0x000D43E8
		public PartnerDatabaseOption partnerOption()
		{
			PartnerDatabaseOption partnerDatabaseOption = base.FragmentFactory.CreateFragment<PartnerDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTNER");
				partnerDatabaseOption.OptionKind = DatabaseOptionKind.Partner;
			}
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 206)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.LA(1) == 232 && this.LA(2) == 221 && base.NextTokenMatches("TIMEOUT"))
					{
						IToken token2 = this.LT(1);
						this.match(232);
						Literal literal = this.integer();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "TIMEOUT");
							partnerDatabaseOption.Timeout = literal;
							partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.Timeout;
						}
					}
					else if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 103) && base.NextTokenMatches("SAFETY"))
					{
						IToken token3 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token3, "SAFETY");
						}
						int num2 = this.LA(1);
						if (num2 != 72)
						{
							if (num2 != 103)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							IToken token4 = this.LT(1);
							this.match(103);
							if (this.inputState.guessing == 0)
							{
								partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.SafetyOff;
								TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token4);
							}
						}
						else
						{
							IToken token5 = this.LT(1);
							this.match(72);
							if (this.inputState.guessing == 0)
							{
								partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.SafetyFull;
								TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token5);
							}
						}
					}
					else
					{
						if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token6 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							partnerDatabaseOption.PartnerOption = PartnerDbOptionsHelper.Instance.ParseOption(token6);
							TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token6);
						}
					}
				}
				else
				{
					this.match(206);
					Literal literal2 = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						partnerDatabaseOption.PartnerServer = literal2;
						partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.PartnerServer;
					}
				}
			}
			else
			{
				IToken token7 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.Off;
					TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token7);
				}
			}
			return partnerDatabaseOption;
		}

		// Token: 0x060018A9 RID: 6313 RVA: 0x000D64C8 File Offset: 0x000D46C8
		public WitnessDatabaseOption witnessOption()
		{
			WitnessDatabaseOption witnessDatabaseOption = base.FragmentFactory.CreateFragment<WitnessDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "WITNESS");
				witnessDatabaseOption.OptionKind = DatabaseOptionKind.Witness;
			}
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					witnessDatabaseOption.WitnessServer = literal;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					witnessDatabaseOption.IsOff = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(witnessDatabaseOption, token2);
				}
			}
			return witnessDatabaseOption;
		}

		// Token: 0x060018AA RID: 6314 RVA: 0x000D659C File Offset: 0x000D479C
		public ParameterizationDatabaseOption parameterizationOption()
		{
			ParameterizationDatabaseOption parameterizationDatabaseOption = base.FragmentFactory.CreateFragment<ParameterizationDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARAMETERIZATION");
				parameterizationDatabaseOption.OptionKind = DatabaseOptionKind.Parameterization;
				if (TSql80ParserBaseInternal.TryMatch(token2, "SIMPLE"))
				{
					parameterizationDatabaseOption.IsSimple = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "FORCED");
					parameterizationDatabaseOption.IsSimple = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(parameterizationDatabaseOption, token2);
			}
			return parameterizationDatabaseOption;
		}

		// Token: 0x060018AB RID: 6315 RVA: 0x000D6630 File Offset: 0x000D4830
		public DatabaseOption dbSingleIdentOption()
		{
			DatabaseOption databaseOption = base.FragmentFactory.CreateFragment<DatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				databaseOption.OptionKind = SimpleDbOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
			}
			return databaseOption;
		}

		// Token: 0x060018AC RID: 6316 RVA: 0x000D6688 File Offset: 0x000D4888
		public OnOffDatabaseOption alterDbOnOffOption()
		{
			OnOffDatabaseOption onOffDatabaseOption = base.FragmentFactory.CreateFragment<OnOffDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			OptionState optionState = this.optionOnOff(onOffDatabaseOption);
			if (this.inputState.guessing == 0)
			{
				onOffDatabaseOption.OptionKind = OnOffSimpleDbOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				onOffDatabaseOption.OptionState = optionState;
			}
			return onOffDatabaseOption;
		}

		// Token: 0x060018AD RID: 6317 RVA: 0x000D66E8 File Offset: 0x000D48E8
		public void recoveryUnitList(CreateDatabaseStatement vParent)
		{
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_029C;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_029C;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_029C;
						case 10:
						case 11:
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
							case 26:
							case 28:
								goto IL_029C;
							case 24:
							case 25:
							case 27:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_029C;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_029C;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num == 67)
						{
							goto IL_029C;
						}
						switch (num)
						{
						case 74:
						case 75:
							goto IL_029C;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_029C;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						goto IL_029C;
					}
					switch (num)
					{
					case 105:
						this.onDisk(vParent);
						goto IL_029C;
					case 106:
						goto IL_029C;
					default:
						if (num == 119)
						{
							goto IL_029C;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_029C;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_029C;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_029C;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_029C;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_029C;
				default:
					if (num == 191)
					{
						goto IL_029C;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_029C;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_029C;
				default:
					if (num == 232)
					{
						goto IL_029C;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_029C:
			if (this.LA(1) == 232 && this.LA(2) == 105 && base.NextTokenMatches("LOG"))
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(105);
				this.fileDeclBodyList(vParent, vParent.LogOn);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOG");
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x060018AE RID: 6318 RVA: 0x000D6A32 File Offset: 0x000D4C32
		public void collationOpt(ICollationSetter vParent)
		{
			if (TSql90ParserInternal.tokenSet_43_.member(this.LA(1)))
			{
				return;
			}
			if (this.LA(1) == 26)
			{
				this.collation(vParent);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060018AF RID: 6319 RVA: 0x000D6A70 File Offset: 0x000D4C70
		public void dbAddendums(CreateDatabaseStatement vParent)
		{
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 67)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(67);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					vParent.AttachMode = AttachModeHelper.Instance.ParseOption(token);
					if (vParent.AttachMode == AttachMode.Load)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				}
				if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
				{
					this.match(232);
					return;
				}
				if (TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				this.match(9);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(102);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SNAPSHOT");
					vParent.DatabaseSnapshot = identifier;
					return;
				}
				return;
			}
		}

		// Token: 0x060018B0 RID: 6320 RVA: 0x000D6BAC File Offset: 0x000D4DAC
		public void withTrustOptionsOnOff(CreateDatabaseStatement vParent)
		{
			int num = 0;
			this.match(171);
			DatabaseOption databaseOption = this.createDbOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)databaseOption.OptionKind, databaseOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(vParent, vParent.Options, databaseOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				databaseOption = this.createDbOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)databaseOption.OptionKind, databaseOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(vParent, vParent.Options, databaseOption);
				}
			}
		}

		// Token: 0x060018B1 RID: 6321 RVA: 0x000D6C40 File Offset: 0x000D4E40
		public void onDisk(CreateDatabaseStatement vParent)
		{
			FileGroupDefinition fileGroupDefinition = base.FragmentFactory.CreateFragment<FileGroupDefinition>();
			vParent.FileGroups.Add(fileGroupDefinition);
			this.match(105);
			FileDeclaration fileDeclaration = this.fileDecl(false);
			if (this.inputState.guessing == 0)
			{
				fileGroupDefinition.FileDeclarations.Add(fileDeclaration);
				vParent.UpdateTokenInfo(fileDeclaration);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				int num = this.LA(1);
				if (num != 118 && num != 191)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					FileGroupDefinition fileGroupDefinition2 = this.fileGroupDecl();
					if (this.inputState.guessing == 0)
					{
						fileGroupDefinition = fileGroupDefinition2;
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileGroupDefinition>(vParent, vParent.FileGroups, fileGroupDefinition);
					}
				}
				else
				{
					fileDeclaration = this.fileDecl(false);
					if (this.inputState.guessing == 0)
					{
						fileGroupDefinition.FileDeclarations.Add(fileDeclaration);
						vParent.UpdateTokenInfo(fileDeclaration);
					}
				}
			}
		}

		// Token: 0x060018B2 RID: 6322 RVA: 0x000D6D38 File Offset: 0x000D4F38
		public FileGroupDefinition fileGroupDecl()
		{
			FileGroupDefinition fileGroupDefinition = base.FragmentFactory.CreateFragment<FileGroupDefinition>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROUP");
				TSql80ParserBaseInternal.UpdateTokenInfo(fileGroupDefinition, token);
				fileGroupDefinition.Name = identifier;
			}
			int num = this.LA(1);
			if (num != 47)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(47);
				if (this.inputState.guessing == 0)
				{
					fileGroupDefinition.IsDefault = true;
				}
			}
			FileDeclaration fileDeclaration = this.fileDeclBody(false);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclaration>(fileGroupDefinition, fileGroupDefinition.FileDeclarations, fileDeclaration);
			}
			return fileGroupDefinition;
		}

		// Token: 0x060018B3 RID: 6323 RVA: 0x000D6E04 File Offset: 0x000D5004
		public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement)
		{
			FileDeclaration fileDeclaration = base.FragmentFactory.CreateFragment<FileDeclaration>();
			int num = 0;
			IToken token = this.LT(1);
			this.match(191);
			FileDeclarationOption fileDeclarationOption = this.fileOption(isAlterDbModifyFileStatement);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token);
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fileDeclarationOption.OptionKind, fileDeclarationOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclarationOption>(fileDeclaration, fileDeclaration.Options, fileDeclarationOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				fileDeclarationOption = this.fileOption(isAlterDbModifyFileStatement);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fileDeclarationOption.OptionKind, fileDeclarationOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclarationOption>(fileDeclaration, fileDeclaration.Options, fileDeclarationOption);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token2);
				if (!isAlterDbModifyFileStatement && (num & 8) == 0)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46065", fileDeclaration, TSqlParserResource.SQL46065Message, new string[0]);
				}
			}
			return fileDeclaration;
		}

		// Token: 0x060018B4 RID: 6324 RVA: 0x000D6F00 File Offset: 0x000D5100
		public FileDeclarationOption fileOption(bool newNameAllowed)
		{
			FileDeclarationOption fileDeclarationOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAME"))
			{
				fileDeclarationOption = this.nameFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILENAME"))
			{
				fileDeclarationOption = this.fileNameFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SIZE"))
			{
				fileDeclarationOption = this.sizeFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXSIZE"))
			{
				fileDeclarationOption = this.maxSizeFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILEGROWTH"))
			{
				fileDeclarationOption = this.fileGrowthFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NEWNAME"))
			{
				fileDeclarationOption = this.newNameFileOption();
				if (this.inputState.guessing == 0 && !newNameAllowed)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46062", fileDeclarationOption, TSqlParserResource.SQL46062Message, new string[0]);
				}
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 192 && this.LA(2) != 198) || !base.NextTokenMatches("OFFLINE"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				fileDeclarationOption = this.offlineFileOption();
			}
			return fileDeclarationOption;
		}

		// Token: 0x060018B5 RID: 6325 RVA: 0x000D70C4 File Offset: 0x000D52C4
		public NameFileDeclarationOption nameFileOption()
		{
			NameFileDeclarationOption nameFileDeclarationOption = base.FragmentFactory.CreateFragment<NameFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IdentifierOrValueExpression identifierOrValueExpression = this.nonEmptyStringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				nameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.Name;
				TSql80ParserBaseInternal.Match(token, "NAME");
				TSql80ParserBaseInternal.UpdateTokenInfo(nameFileDeclarationOption, token);
				nameFileDeclarationOption.LogicalFileName = identifierOrValueExpression;
				nameFileDeclarationOption.IsNewName = false;
			}
			return nameFileDeclarationOption;
		}

		// Token: 0x060018B6 RID: 6326 RVA: 0x000D713C File Offset: 0x000D533C
		public FileNameFileDeclarationOption fileNameFileOption()
		{
			FileNameFileDeclarationOption fileNameFileDeclarationOption = base.FragmentFactory.CreateFragment<FileNameFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.nonEmptyString();
			if (this.inputState.guessing == 0)
			{
				fileNameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.FileName;
				TSql80ParserBaseInternal.Match(token, "FILENAME");
				TSql80ParserBaseInternal.UpdateTokenInfo(fileNameFileDeclarationOption, token);
				fileNameFileDeclarationOption.OSFileName = literal;
			}
			return fileNameFileDeclarationOption;
		}

		// Token: 0x060018B7 RID: 6327 RVA: 0x000D71AC File Offset: 0x000D53AC
		public SizeFileDeclarationOption sizeFileOption()
		{
			SizeFileDeclarationOption sizeFileDeclarationOption = base.FragmentFactory.CreateFragment<SizeFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				sizeFileDeclarationOption.OptionKind = FileDeclarationOptionKind.Size;
				TSql80ParserBaseInternal.Match(token, "SIZE");
				TSql80ParserBaseInternal.UpdateTokenInfo(sizeFileDeclarationOption, token);
				sizeFileDeclarationOption.Size = literal;
			}
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				MemoryUnit memoryUnit = this.memUnit();
				if (this.inputState.guessing == 0)
				{
					sizeFileDeclarationOption.Units = memoryUnit;
				}
			}
			return sizeFileDeclarationOption;
		}

		// Token: 0x060018B8 RID: 6328 RVA: 0x000D7270 File Offset: 0x000D5470
		public MaxSizeFileDeclarationOption maxSizeFileOption()
		{
			MaxSizeFileDeclarationOption maxSizeFileDeclarationOption = base.FragmentFactory.CreateFragment<MaxSizeFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MAXSIZE");
				maxSizeFileDeclarationOption.OptionKind = FileDeclarationOptionKind.MaxSize;
				TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeFileDeclarationOption, token);
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "UNLIMITED");
					maxSizeFileDeclarationOption.Unlimited = true;
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					maxSizeFileDeclarationOption.MaxSize = literal;
				}
				int num2 = this.LA(1);
				if (num2 != 192 && num2 != 198)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					MemoryUnit memoryUnit = this.memUnit();
					if (this.inputState.guessing == 0)
					{
						maxSizeFileDeclarationOption.Units = memoryUnit;
					}
				}
			}
			return maxSizeFileDeclarationOption;
		}

		// Token: 0x060018B9 RID: 6329 RVA: 0x000D73B0 File Offset: 0x000D55B0
		public FileGrowthFileDeclarationOption fileGrowthFileOption()
		{
			FileGrowthFileDeclarationOption fileGrowthFileDeclarationOption = base.FragmentFactory.CreateFragment<FileGrowthFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROWTH");
				fileGrowthFileDeclarationOption.OptionKind = FileDeclarationOptionKind.FileGrowth;
				TSql80ParserBaseInternal.UpdateTokenInfo(fileGrowthFileDeclarationOption, token);
			}
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				fileGrowthFileDeclarationOption.GrowthIncrement = literal;
			}
			int num = this.LA(1);
			if (num <= 192)
			{
				if (num != 189)
				{
					if (num == 192)
					{
						return fileGrowthFileDeclarationOption;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(189);
					if (this.inputState.guessing == 0)
					{
						fileGrowthFileDeclarationOption.Units = MemoryUnit.Percent;
						TSql80ParserBaseInternal.UpdateTokenInfo(fileGrowthFileDeclarationOption, token2);
						return fileGrowthFileDeclarationOption;
					}
					return fileGrowthFileDeclarationOption;
				}
			}
			else
			{
				if (num == 198)
				{
					return fileGrowthFileDeclarationOption;
				}
				if (num == 232)
				{
					MemoryUnit memoryUnit = this.memUnit();
					if (this.inputState.guessing == 0)
					{
						fileGrowthFileDeclarationOption.Units = memoryUnit;
						return fileGrowthFileDeclarationOption;
					}
					return fileGrowthFileDeclarationOption;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060018BA RID: 6330 RVA: 0x000D74C8 File Offset: 0x000D56C8
		public NameFileDeclarationOption newNameFileOption()
		{
			NameFileDeclarationOption nameFileDeclarationOption = base.FragmentFactory.CreateFragment<NameFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IdentifierOrValueExpression identifierOrValueExpression = this.nonEmptyStringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NEWNAME");
				nameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.NewName;
				TSql80ParserBaseInternal.UpdateTokenInfo(nameFileDeclarationOption, token);
				nameFileDeclarationOption.LogicalFileName = identifierOrValueExpression;
				nameFileDeclarationOption.IsNewName = true;
			}
			return nameFileDeclarationOption;
		}

		// Token: 0x060018BB RID: 6331 RVA: 0x000D7540 File Offset: 0x000D5740
		public FileDeclarationOption offlineFileOption()
		{
			FileDeclarationOption fileDeclarationOption = base.FragmentFactory.CreateFragment<FileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OFFLINE");
				fileDeclarationOption.OptionKind = FileDeclarationOptionKind.Offline;
				TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclarationOption, token);
			}
			return fileDeclarationOption;
		}

		// Token: 0x060018BC RID: 6332 RVA: 0x000D7598 File Offset: 0x000D5798
		public IdentifierOrValueExpression nonEmptyStringOrIdentifier()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.nonEmptyString();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = literal;
				}
				break;
			}
			case 232:
			case 233:
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.Identifier = identifier;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierOrValueExpression;
		}

		// Token: 0x060018BD RID: 6333 RVA: 0x000D7628 File Offset: 0x000D5828
		public StringLiteral nonEmptyString()
		{
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0 && (stringLiteral.Value == null || stringLiteral.Value.Length == 0))
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46063", stringLiteral, TSqlParserResource.SQL46063Message, new string[0]);
			}
			return stringLiteral;
		}

		// Token: 0x060018BE RID: 6334 RVA: 0x000D7678 File Offset: 0x000D5878
		public MemoryUnit memUnit()
		{
			MemoryUnit memoryUnit = MemoryUnit.Unspecified;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				memoryUnit = MemoryUnitsHelper.Instance.ParseOption(token);
			}
			return memoryUnit;
		}

		// Token: 0x060018BF RID: 6335 RVA: 0x000D76B8 File Offset: 0x000D58B8
		public DatabaseOption createDbOption()
		{
			DatabaseOption databaseOption;
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
			{
				databaseOption = this.createDbServiceBrokerOption();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 103 && this.LA(2) != 105))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				databaseOption = this.createDbOnOffOption();
			}
			return databaseOption;
		}

		// Token: 0x060018C0 RID: 6336 RVA: 0x000D7730 File Offset: 0x000D5930
		public DatabaseOption createDbServiceBrokerOption()
		{
			DatabaseOption databaseOption = base.FragmentFactory.CreateFragment<DatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				switch (ServiceBrokerOptionsHelper.Instance.ParseOption(token))
				{
				case ServiceBrokerOption.EnableBroker:
					databaseOption.OptionKind = DatabaseOptionKind.EnableBroker;
					break;
				case ServiceBrokerOption.NewBroker:
					databaseOption.OptionKind = DatabaseOptionKind.NewBroker;
					break;
				case ServiceBrokerOption.ErrorBrokerConversations:
					databaseOption.OptionKind = DatabaseOptionKind.ErrorBrokerConversations;
					break;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
			}
			return databaseOption;
		}

		// Token: 0x060018C1 RID: 6337 RVA: 0x000D77B4 File Offset: 0x000D59B4
		public OnOffDatabaseOption createDbOnOffOption()
		{
			OnOffDatabaseOption onOffDatabaseOption = base.FragmentFactory.CreateFragment<OnOffDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			OptionState optionState = this.optionOnOff(onOffDatabaseOption);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "DB_CHAINING"))
				{
					onOffDatabaseOption.OptionKind = DatabaseOptionKind.DBChaining;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "TRUSTWORTHY");
					onOffDatabaseOption.OptionKind = DatabaseOptionKind.Trustworthy;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(onOffDatabaseOption, token);
				onOffDatabaseOption.OptionState = optionState;
			}
			return onOffDatabaseOption;
		}

		// Token: 0x060018C2 RID: 6338 RVA: 0x000D7830 File Offset: 0x000D5A30
		public IToken backupStart()
		{
			IToken token = null;
			int num = this.LA(1);
			if (num != 12)
			{
				if (num != 180)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(180);
				if (this.inputState.guessing == 0)
				{
					token = token2;
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(12);
				if (this.inputState.guessing == 0)
				{
					token = token3;
				}
			}
			return token;
		}

		// Token: 0x060018C3 RID: 6339 RVA: 0x000D78B4 File Offset: 0x000D5AB4
		public BackupCertificateStatement backupCertificateStatement()
		{
			BackupCertificateStatement backupCertificateStatement = base.FragmentFactory.CreateFragment<BackupCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			this.match(151);
			this.match(65);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				backupCertificateStatement.Name = identifier;
				backupCertificateStatement.File = literal;
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				this.privateKeySpec(backupCertificateStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return backupCertificateStatement;
		}

		// Token: 0x060018C4 RID: 6340 RVA: 0x000D79A0 File Offset: 0x000D5BA0
		public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement()
		{
			BackupServiceMasterKeyStatement backupServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<BackupServiceMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
			}
			this.backupMasterKeyBody(backupServiceMasterKeyStatement);
			return backupServiceMasterKeyStatement;
		}

		// Token: 0x060018C5 RID: 6341 RVA: 0x000D79F0 File Offset: 0x000D5BF0
		public BackupMasterKeyStatement backupMasterKeyStatement()
		{
			BackupMasterKeyStatement backupMasterKeyStatement = base.FragmentFactory.CreateFragment<BackupMasterKeyStatement>();
			this.backupMasterKeyBody(backupMasterKeyStatement);
			return backupMasterKeyStatement;
		}

		// Token: 0x060018C6 RID: 6342 RVA: 0x000D7A14 File Offset: 0x000D5C14
		public BackupStatement backupStatement()
		{
			BackupStatement backupStatement = this.backupMain();
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_0284;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0284;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_0284;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_0284;
						default:
							if (num == 28)
							{
								goto IL_0284;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0284;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0284;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0284;
						default:
							if (num == 82)
							{
								goto IL_0284;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_0284;
				}
			}
			else if (num <= 172)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						goto IL_0284;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0284;
					}
				}
				else
				{
					if (num == 151)
					{
						this.backupDevices(backupStatement);
						goto IL_0284;
					}
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_0284;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_0284;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_0284;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_0284;
				default:
					if (num == 191)
					{
						goto IL_0284;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0284;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0284;
				default:
					if (num == 232)
					{
						goto IL_0284;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0284:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.backupOptions(backupStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return backupStatement;
		}

		// Token: 0x060018C7 RID: 6343 RVA: 0x000D7D04 File Offset: 0x000D5F04
		public BackupStatement backupMain()
		{
			int num = this.LA(1);
			BackupStatement backupStatement;
			if (num != 43)
			{
				switch (num)
				{
				case 153:
				case 154:
					break;
				default:
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					break;
				}
				backupStatement = this.backupTransactionLog();
			}
			else
			{
				backupStatement = this.backupDatabase();
			}
			return backupStatement;
		}

		// Token: 0x060018C8 RID: 6344 RVA: 0x000D7D64 File Offset: 0x000D5F64
		public void backupDevices(BackupStatement vParent)
		{
			this.match(151);
			this.devList(vParent, vParent.Devices);
			while (this.LA(1) == 232 && this.LA(2) == 151)
			{
				MirrorToClause mirrorToClause = this.mirrorTo();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<MirrorToClause>(vParent, vParent.MirrorToClauses, mirrorToClause);
				}
			}
		}

		// Token: 0x060018C9 RID: 6345 RVA: 0x000D7DC8 File Offset: 0x000D5FC8
		public void backupOptions(BackupStatement vParent)
		{
			this.match(171);
			BackupOption backupOption = this.backupOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupOption>(vParent, vParent.Options, backupOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				backupOption = this.backupOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupOption>(vParent, vParent.Options, backupOption);
				}
			}
		}

		// Token: 0x060018CA RID: 6346 RVA: 0x000D7E40 File Offset: 0x000D6040
		public IToken restoreStart()
		{
			IToken token = null;
			int num = this.LA(1);
			if (num != 129)
			{
				if (num != 181)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(181);
				if (this.inputState.guessing == 0)
				{
					token = token2;
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(129);
				if (this.inputState.guessing == 0)
				{
					token = token3;
				}
			}
			return token;
		}

		// Token: 0x060018CB RID: 6347 RVA: 0x000D7ECC File Offset: 0x000D60CC
		public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement()
		{
			RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<RestoreServiceMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
			}
			this.restoreMasterKeyBody(restoreServiceMasterKeyStatement);
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FORCE");
					restoreServiceMasterKeyStatement.IsForce = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(restoreServiceMasterKeyStatement, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return restoreServiceMasterKeyStatement;
		}

		// Token: 0x060018CC RID: 6348 RVA: 0x000D7FB4 File Offset: 0x000D61B4
		public RestoreMasterKeyStatement restoreMasterKeyStatement()
		{
			RestoreMasterKeyStatement restoreMasterKeyStatement = base.FragmentFactory.CreateFragment<RestoreMasterKeyStatement>();
			this.restoreMasterKeyBody(restoreMasterKeyStatement);
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token2, "PASSWORD");
				restoreMasterKeyStatement.EncryptionPassword = literal;
			}
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FORCE");
					restoreMasterKeyStatement.IsForce = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(restoreMasterKeyStatement, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return restoreMasterKeyStatement;
		}

		// Token: 0x060018CD RID: 6349 RVA: 0x000D80DC File Offset: 0x000D62DC
		public RestoreStatement restoreStatement()
		{
			RestoreStatement restoreStatement = base.FragmentFactory.CreateFragment<RestoreStatement>();
			if (TSql90ParserInternal.tokenSet_24_.member(this.LA(1)) && this.LA(2) >= 232 && this.LA(2) <= 234)
			{
				this.restoreMain(restoreStatement);
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 28)
					{
						if (num <= 6)
						{
							if (num == 1)
							{
								goto IL_035B;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_035B;
							}
						}
						else
						{
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_035B;
							case 14:
							case 16:
								break;
							default:
								switch (num)
								{
								case 22:
								case 23:
									goto IL_035B;
								default:
									if (num == 28)
									{
										goto IL_035B;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num <= 75)
					{
						switch (num)
						{
						case 33:
						case 35:
							goto IL_035B;
						case 34:
							break;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_035B;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								break;
							default:
								switch (num)
								{
								case 71:
									this.match(71);
									this.devList(restoreStatement, restoreStatement.Devices);
									goto IL_035B;
								case 74:
								case 75:
									goto IL_035B;
								}
								break;
							}
							break;
						}
					}
					else if (num == 82 || num == 86 || num == 92)
					{
						goto IL_035B;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num == 95 || num == 106 || num == 119)
						{
							goto IL_035B;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_035B;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_035B;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_035B;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num == 176)
					{
						goto IL_035B;
					}
					switch (num)
					{
					case 180:
					case 181:
						goto IL_035B;
					default:
						if (num == 191)
						{
							goto IL_035B;
						}
						break;
					}
				}
				else
				{
					if (num == 204)
					{
						goto IL_035B;
					}
					switch (num)
					{
					case 219:
					case 220:
						goto IL_035B;
					default:
						if (num == 232)
						{
							goto IL_035B;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) != 232 || this.LA(2) != 71)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token = this.LT(1);
			this.match(232);
			this.match(71);
			this.devList(restoreStatement, restoreStatement.Devices);
			if (this.inputState.guessing == 0)
			{
				restoreStatement.Kind = RestoreStatementKindsHelper.Instance.ParseOption(token);
			}
			IL_035B:
			if (this.LA(1) == 171 && (this.LA(2) == 65 || this.LA(2) == 232))
			{
				this.restoreOptions(restoreStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return restoreStatement;
		}

		// Token: 0x060018CE RID: 6350 RVA: 0x000D84B0 File Offset: 0x000D66B0
		public void restoreMain(RestoreStatement vParent)
		{
			int num = this.LA(1);
			if (num == 43)
			{
				this.match(43);
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					vParent.DatabaseName = identifierOrValueExpression;
					vParent.Kind = RestoreStatementKind.Database;
					base.ThrowPartialAstIfPhaseOne(vParent);
				}
				this.restoreFileListOpt(vParent);
				return;
			}
			switch (num)
			{
			case 153:
			case 154:
			{
				switch (this.LA(1))
				{
				case 153:
					this.match(153);
					break;
				case 154:
					this.match(154);
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					vParent.DatabaseName = identifierOrValueExpression;
					vParent.Kind = RestoreStatementKind.TransactionLog;
					base.ThrowPartialAstIfPhaseOne(vParent);
					return;
				}
				return;
			}
			default:
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOG");
					vParent.DatabaseName = identifierOrValueExpression;
					vParent.Kind = RestoreStatementKind.TransactionLog;
					base.ThrowPartialAstIfPhaseOne(vParent);
				}
				this.restoreFileListOpt(vParent);
				return;
			}
			}
		}

		// Token: 0x060018CF RID: 6351 RVA: 0x000D8600 File Offset: 0x000D6800
		public void devList(TSqlFragment vParent, IList<DeviceInfo> deviceInfos)
		{
			DeviceInfo deviceInfo = this.deviceInfo();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeviceInfo>(vParent, deviceInfos, deviceInfo);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				deviceInfo = this.deviceInfo();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeviceInfo>(vParent, deviceInfos, deviceInfo);
				}
			}
		}

		// Token: 0x060018D0 RID: 6352 RVA: 0x000D8660 File Offset: 0x000D6860
		public void restoreOptions(RestoreStatement vParent)
		{
			this.match(171);
			this.restoreOptionsList(vParent);
		}

		// Token: 0x060018D1 RID: 6353 RVA: 0x000D8674 File Offset: 0x000D6874
		public BackupDatabaseStatement backupDatabase()
		{
			BackupDatabaseStatement backupDatabaseStatement = base.FragmentFactory.CreateFragment<BackupDatabaseStatement>();
			this.match(43);
			IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
			if (this.inputState.guessing == 0)
			{
				backupDatabaseStatement.DatabaseName = identifierOrValueExpression;
				base.ThrowPartialAstIfPhaseOne(backupDatabaseStatement);
			}
			this.backupFileListOpt(backupDatabaseStatement);
			return backupDatabaseStatement;
		}

		// Token: 0x060018D2 RID: 6354 RVA: 0x000D86C0 File Offset: 0x000D68C0
		public BackupTransactionLogStatement backupTransactionLog()
		{
			BackupTransactionLogStatement backupTransactionLogStatement = base.FragmentFactory.CreateFragment<BackupTransactionLogStatement>();
			int num = this.LA(1);
			switch (num)
			{
			case 153:
				this.match(153);
				break;
			case 154:
				this.match(154);
				break;
			default:
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOG");
				}
				break;
			}
			}
			IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
			if (this.inputState.guessing == 0)
			{
				backupTransactionLogStatement.DatabaseName = identifierOrValueExpression;
				base.ThrowPartialAstIfPhaseOne(backupTransactionLogStatement);
			}
			return backupTransactionLogStatement;
		}

		// Token: 0x060018D3 RID: 6355 RVA: 0x000D8780 File Offset: 0x000D6980
		public IdentifierOrValueExpression identifierOrVariable()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			switch (this.LA(1))
			{
			case 232:
			case 233:
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.Identifier = identifier;
				}
				break;
			}
			case 234:
			{
				ValueExpression valueExpression = this.variable();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = valueExpression;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierOrValueExpression;
		}

		// Token: 0x060018D4 RID: 6356 RVA: 0x000D880C File Offset: 0x000D6A0C
		public void backupFileListOpt(BackupDatabaseStatement vParent)
		{
			if ((this.LA(1) == 65 || this.LA(1) == 232) && TSql90ParserInternal.tokenSet_44_.member(this.LA(2)))
			{
				BackupRestoreFileInfo backupRestoreFileInfo = this.backupRestoreFile();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, backupRestoreFileInfo);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					backupRestoreFileInfo = this.backupRestoreFile();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, backupRestoreFileInfo);
					}
				}
				return;
			}
			if (TSql90ParserInternal.tokenSet_45_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060018D5 RID: 6357 RVA: 0x000D88DC File Offset: 0x000D6ADC
		public BackupRestoreFileInfo backupRestoreFile()
		{
			BackupRestoreFileInfo backupRestoreFileInfo = base.FragmentFactory.CreateFragment<BackupRestoreFileInfo>();
			if (this.LA(1) == 65)
			{
				this.LT(1);
				this.match(65);
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.Files;
				}
				int num = this.LA(1);
				if (num != 191)
				{
					switch (num)
					{
					case 230:
					case 231:
					case 234:
					{
						ValueExpression valueExpression = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(backupRestoreFileInfo, backupRestoreFileInfo.Items, valueExpression);
							return backupRestoreFileInfo;
						}
						return backupRestoreFileInfo;
					}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.backupRestoreFileNameList(backupRestoreFileInfo);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				int num2 = this.LA(1);
				if (num2 != 191)
				{
					switch (num2)
					{
					case 230:
					case 231:
					case 234:
					{
						ValueExpression valueExpression = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							if (TSql80ParserBaseInternal.TryMatch(token, "PAGE"))
							{
								backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.Page;
							}
							else
							{
								TSql80ParserBaseInternal.Match(token, "FILEGROUP");
								backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.FileGroups;
							}
							TSql80ParserBaseInternal.UpdateTokenInfo(backupRestoreFileInfo, token);
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(backupRestoreFileInfo, backupRestoreFileInfo.Items, valueExpression);
							return backupRestoreFileInfo;
						}
						return backupRestoreFileInfo;
					}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.backupRestoreFileNameList(backupRestoreFileInfo);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "FILEGROUP");
					backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.FileGroups;
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_46_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "READ_WRITE_FILEGROUPS");
					backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.ReadWriteFileGroups;
					TSql80ParserBaseInternal.UpdateTokenInfo(backupRestoreFileInfo, token2);
				}
			}
			return backupRestoreFileInfo;
		}

		// Token: 0x060018D6 RID: 6358 RVA: 0x000D8B34 File Offset: 0x000D6D34
		public void restoreFileListOpt(RestoreStatement vParent)
		{
			if ((this.LA(1) == 65 || this.LA(1) == 232) && TSql90ParserInternal.tokenSet_47_.member(this.LA(2)))
			{
				BackupRestoreFileInfo backupRestoreFileInfo = this.backupRestoreFile();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, backupRestoreFileInfo);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					backupRestoreFileInfo = this.backupRestoreFile();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, backupRestoreFileInfo);
					}
				}
				return;
			}
			if (TSql90ParserInternal.tokenSet_48_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060018D7 RID: 6359 RVA: 0x000D8C04 File Offset: 0x000D6E04
		public ValueExpression stringOrVariable()
		{
			switch (this.LA(1))
			{
			case 230:
			case 231:
				return this.stringLiteral();
			case 234:
				return this.variable();
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060018D8 RID: 6360 RVA: 0x000D8C64 File Offset: 0x000D6E64
		public void backupRestoreFileNameList(BackupRestoreFileInfo vParent)
		{
			this.LT(1);
			this.match(191);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(vParent, vParent.Items, valueExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				valueExpression = this.stringOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(vParent, vParent.Items, valueExpression);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060018D9 RID: 6361 RVA: 0x000D8D0C File Offset: 0x000D6F0C
		public MirrorToClause mirrorTo()
		{
			MirrorToClause mirrorToClause = base.FragmentFactory.CreateFragment<MirrorToClause>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(151);
			this.devList(mirrorToClause, mirrorToClause.Devices);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MIRROR");
			}
			return mirrorToClause;
		}

		// Token: 0x060018DA RID: 6362 RVA: 0x000D8D6C File Offset: 0x000D6F6C
		public DeviceInfo deviceInfo()
		{
			DeviceInfo deviceInfo = base.FragmentFactory.CreateFragment<DeviceInfo>();
			if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
			{
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					deviceInfo.LogicalDevice = identifierOrValueExpression;
				}
			}
			else
			{
				if ((this.LA(1) != 173 && this.LA(1) != 232) || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				int num = this.LA(1);
				if (num != 173)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						deviceInfo.DeviceType = DeviceTypesHelper.Instance.ParseOption(token);
					}
				}
				else
				{
					this.match(173);
					if (this.inputState.guessing == 0)
					{
						deviceInfo.DeviceType = DeviceType.Disk;
					}
				}
				this.match(206);
				ValueExpression valueExpression = this.stringOrVariable();
				if (this.inputState.guessing == 0)
				{
					deviceInfo.PhysicalDevice = valueExpression;
				}
			}
			return deviceInfo;
		}

		// Token: 0x060018DB RID: 6363 RVA: 0x000D8EC8 File Offset: 0x000D70C8
		public BackupOption backupOption()
		{
			BackupOption backupOption = base.FragmentFactory.CreateFragment<BackupOption>();
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					backupOption.OptionKind = BackupOptionsNoValueHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
					TSql80ParserBaseInternal.UpdateTokenInfo(backupOption, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				int num = this.LA(1);
				ScalarExpression scalarExpression;
				if (num != 199 && num != 221)
				{
					switch (num)
					{
					case 230:
					case 231:
						scalarExpression = this.stringLiteral();
						goto IL_0115;
					case 234:
						goto IL_00F0;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IL_00F0:
				scalarExpression = this.signedIntegerOrVariable();
				IL_0115:
				if (this.inputState.guessing == 0)
				{
					backupOption.OptionKind = BackupOptionsWithValueHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql90);
					backupOption.Value = scalarExpression;
				}
			}
			return backupOption;
		}

		// Token: 0x060018DC RID: 6364 RVA: 0x000D9028 File Offset: 0x000D7228
		public ScalarExpression signedIntegerOrVariable()
		{
			int num = this.LA(1);
			ScalarExpression scalarExpression;
			if (num != 199 && num != 221)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				scalarExpression = this.variable();
			}
			else
			{
				scalarExpression = this.signedInteger();
			}
			return scalarExpression;
		}

		// Token: 0x060018DD RID: 6365 RVA: 0x000D9080 File Offset: 0x000D7280
		public void restoreOptionsList(RestoreStatement vParent)
		{
			RestoreOption restoreOption = this.restoreOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RestoreOption>(vParent, vParent.Options, restoreOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				restoreOption = this.restoreOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RestoreOption>(vParent, vParent.Options, restoreOption);
				}
			}
		}

		// Token: 0x060018DE RID: 6366 RVA: 0x000D90EC File Offset: 0x000D72EC
		public RestoreOption restoreOption()
		{
			RestoreOption restoreOption = null;
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
			{
				restoreOption = this.simpleRestoreOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				if ((this.LA(1) == 230 || this.LA(1) == 231 || this.LA(1) == 234) && this.LA(2) == 232 && TSql80ParserBaseInternal.IsStopAtBeforeMarkRestoreOption(token))
				{
					ValueExpression valueExpression = this.stringOrVariable();
					ValueExpression valueExpression2 = this.afterClause();
					if (this.inputState.guessing == 0)
					{
						restoreOption = base.CreateStopRestoreOption(token, valueExpression, valueExpression2);
					}
				}
				else if (this.LA(1) == 199 || this.LA(1) == 221)
				{
					ScalarExpression scalarExpression = this.signedInteger();
					if (this.inputState.guessing == 0)
					{
						restoreOption = base.CreateSimpleRestoreOptionWithValue(token, scalarExpression);
					}
				}
				else
				{
					if ((this.LA(1) != 230 && this.LA(1) != 231 && this.LA(1) != 234) || !TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					ValueExpression valueExpression = this.stringOrVariable();
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.IsStopAtBeforeMarkRestoreOption(token))
						{
							restoreOption = base.CreateStopRestoreOption(token, valueExpression, null);
						}
						else
						{
							restoreOption = base.CreateSimpleRestoreOptionWithValue(token, valueExpression);
						}
					}
				}
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 230 || this.LA(2) == 231 || this.LA(2) == 234))
			{
				restoreOption = this.moveRestoreOption();
			}
			else
			{
				if (this.LA(1) != 65)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				restoreOption = this.fileRestoreOption();
			}
			return restoreOption;
		}

		// Token: 0x060018DF RID: 6367 RVA: 0x000D930C File Offset: 0x000D750C
		public RestoreOption simpleRestoreOption()
		{
			RestoreOption restoreOption = base.FragmentFactory.CreateFragment<RestoreOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				restoreOption.OptionKind = RestoreOptionNoValueHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				TSql80ParserBaseInternal.UpdateTokenInfo(restoreOption, token);
			}
			return restoreOption;
		}

		// Token: 0x060018E0 RID: 6368 RVA: 0x000D9364 File Offset: 0x000D7564
		public ValueExpression afterClause()
		{
			IToken token = this.LT(1);
			this.match(232);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AFTER");
			}
			return valueExpression;
		}

		// Token: 0x060018E1 RID: 6369 RVA: 0x000D93A8 File Offset: 0x000D75A8
		public ScalarExpression signedInteger()
		{
			ScalarExpression scalarExpression = null;
			UnaryExpression unaryExpression = null;
			int num = this.LA(1);
			if (num != 199)
			{
				if (num != 221)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(199);
				if (this.inputState.guessing == 0)
				{
					unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
				}
			}
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				if (unaryExpression == null)
				{
					scalarExpression = literal;
				}
				else
				{
					unaryExpression.Expression = literal;
					scalarExpression = unaryExpression;
				}
			}
			return scalarExpression;
		}

		// Token: 0x060018E2 RID: 6370 RVA: 0x000D944C File Offset: 0x000D764C
		public MoveRestoreOption moveRestoreOption()
		{
			MoveRestoreOption moveRestoreOption = base.FragmentFactory.CreateFragment<MoveRestoreOption>();
			IToken token = this.LT(1);
			this.match(232);
			ValueExpression valueExpression = this.stringOrVariable();
			this.match(151);
			ValueExpression valueExpression2 = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MOVE");
				moveRestoreOption.OptionKind = RestoreOptionKind.Move;
				moveRestoreOption.LogicalFileName = valueExpression;
				moveRestoreOption.OSFileName = valueExpression2;
			}
			return moveRestoreOption;
		}

		// Token: 0x060018E3 RID: 6371 RVA: 0x000D94C4 File Offset: 0x000D76C4
		public ScalarExpressionRestoreOption fileRestoreOption()
		{
			ScalarExpressionRestoreOption scalarExpressionRestoreOption = base.FragmentFactory.CreateFragment<ScalarExpressionRestoreOption>();
			this.match(65);
			this.match(206);
			ScalarExpression scalarExpression = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				scalarExpressionRestoreOption.OptionKind = RestoreOptionKind.File;
				scalarExpressionRestoreOption.Value = scalarExpression;
			}
			return scalarExpressionRestoreOption;
		}

		// Token: 0x060018E4 RID: 6372 RVA: 0x000D9514 File Offset: 0x000D7714
		public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			this.match(151);
			this.match(65);
			this.match(206);
			Literal literal = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal2 = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				vParent.File = literal;
				TSql80ParserBaseInternal.Match(token2, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
				vParent.Password = literal2;
			}
		}

		// Token: 0x060018E5 RID: 6373 RVA: 0x000D95E8 File Offset: 0x000D77E8
		public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			this.match(71);
			this.match(65);
			this.match(206);
			Literal literal = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal2 = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				vParent.File = literal;
				TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
				vParent.Password = literal2;
			}
		}

		// Token: 0x060018E6 RID: 6374 RVA: 0x000D96B8 File Offset: 0x000D78B8
		public IdentifierOrValueExpression bulkInsertFrom()
		{
			IdentifierOrValueExpression identifierOrValueExpression = null;
			int num = this.LA(1);
			if (num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
				case 232:
				case 233:
					identifierOrValueExpression = this.stringOrIdentifier();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression = base.IdentifierOrValueExpression(literal);
				}
			}
			return identifierOrValueExpression;
		}

		// Token: 0x060018E7 RID: 6375 RVA: 0x000D9730 File Offset: 0x000D7930
		public void bulkInsertOptions(BulkInsertStatement vParent)
		{
			int num = 0;
			this.match(171);
			this.match(191);
			BulkInsertOption bulkInsertOption = this.bulkInsertOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				bulkInsertOption = this.bulkInsertOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060018E8 RID: 6376 RVA: 0x000D97F8 File Offset: 0x000D79F8
		public IdentifierOrValueExpression stringOrIdentifier()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = literal;
				}
				break;
			}
			case 232:
			case 233:
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.Identifier = identifier;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierOrValueExpression;
		}

		// Token: 0x060018E9 RID: 6377 RVA: 0x000D9888 File Offset: 0x000D7A88
		public BulkInsertOption bulkInsertOption()
		{
			BulkInsertOption bulkInsertOption;
			if (this.LA(1) == 113)
			{
				bulkInsertOption = this.bulkInsertSortOrderOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				bulkInsertOption = this.simpleBulkInsertOptionWithValue();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 192 && this.LA(2) != 198))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				bulkInsertOption = this.simpleBulkInsertOptionNoValue();
			}
			return bulkInsertOption;
		}

		// Token: 0x060018EA RID: 6378 RVA: 0x000D9918 File Offset: 0x000D7B18
		public OrderBulkInsertOption bulkInsertSortOrderOption()
		{
			OrderBulkInsertOption orderBulkInsertOption = base.FragmentFactory.CreateFragment<OrderBulkInsertOption>();
			IToken token = this.LT(1);
			this.match(113);
			this.match(191);
			ColumnWithSortOrder columnWithSortOrder = this.columnWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				orderBulkInsertOption.OptionKind = BulkInsertOptionKind.Order;
				TSql80ParserBaseInternal.UpdateTokenInfo(orderBulkInsertOption, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(orderBulkInsertOption, orderBulkInsertOption.Columns, columnWithSortOrder);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnWithSortOrder = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(orderBulkInsertOption, orderBulkInsertOption.Columns, columnWithSortOrder);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(orderBulkInsertOption, token2);
			}
			return orderBulkInsertOption;
		}

		// Token: 0x060018EB RID: 6379 RVA: 0x000D99E4 File Offset: 0x000D7BE4
		public LiteralBulkInsertOption simpleBulkInsertOptionWithValue()
		{
			LiteralBulkInsertOption literalBulkInsertOption = base.FragmentFactory.CreateFragment<LiteralBulkInsertOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 221:
			case 222:
			{
				Literal literal = this.integerOrNumeric();
				if (this.inputState.guessing == 0)
				{
					literalBulkInsertOption.OptionKind = BulkInsertIntOptionsHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
					literalBulkInsertOption.Value = literal;
				}
				break;
			}
			default:
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						literalBulkInsertOption.OptionKind = BulkInsertStringOptionsHelper.Instance.ParseOption(token);
						TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
						if (literalBulkInsertOption.OptionKind == BulkInsertOptionKind.CodePage)
						{
							TSql80ParserBaseInternal.MatchString(literal, new string[] { "ACP", "OEM", "RAW" });
						}
						else if (literalBulkInsertOption.OptionKind == BulkInsertOptionKind.DataFileType)
						{
							TSql80ParserBaseInternal.MatchString(literal, new string[] { "CHAR", "NATIVE", "WIDECHAR", "WIDENATIVE", "WIDECHAR_ANSI", "DTS_BUFFERS" });
						}
						literalBulkInsertOption.Value = literal;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				break;
			}
			return literalBulkInsertOption;
		}

		// Token: 0x060018EC RID: 6380 RVA: 0x000D9B60 File Offset: 0x000D7D60
		public BulkInsertOption simpleBulkInsertOptionNoValue()
		{
			BulkInsertOption bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				bulkInsertOption.OptionKind = BulkInsertFlagOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
			}
			return bulkInsertOption;
		}

		// Token: 0x060018ED RID: 6381 RVA: 0x000D9BB4 File Offset: 0x000D7DB4
		public BulkInsertOption insertBulkOption()
		{
			int num = this.LA(1);
			BulkInsertOption bulkInsertOption;
			if (num != 113)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				bulkInsertOption = this.simpleInsertBulkOption();
			}
			else
			{
				bulkInsertOption = this.bulkInsertSortOrderOption();
			}
			return bulkInsertOption;
		}

		// Token: 0x060018EE RID: 6382 RVA: 0x000D9C00 File Offset: 0x000D7E00
		public BulkInsertOption simpleInsertBulkOption()
		{
			BulkInsertOption bulkInsertOption = null;
			IToken token = this.LT(1);
			this.match(232);
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				Literal literal = this.integerOrNumeric();
				if (this.inputState.guessing == 0)
				{
					LiteralBulkInsertOption literalBulkInsertOption = base.FragmentFactory.CreateFragment<LiteralBulkInsertOption>();
					if (TSql80ParserBaseInternal.TryMatch(token, "ROWS_PER_BATCH"))
					{
						literalBulkInsertOption.OptionKind = BulkInsertOptionKind.RowsPerBatch;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "KILOBYTES_PER_BATCH");
						literalBulkInsertOption.OptionKind = BulkInsertOptionKind.KilobytesPerBatch;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
					literalBulkInsertOption.Value = literal;
					bulkInsertOption = literalBulkInsertOption;
				}
			}
			else if (this.inputState.guessing == 0)
			{
				bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
				bulkInsertOption.OptionKind = BulkInsertFlagOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
				if (bulkInsertOption.OptionKind == BulkInsertOptionKind.KeepIdentity)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
			}
			return bulkInsertOption;
		}

		// Token: 0x060018EF RID: 6383 RVA: 0x000D9D0C File Offset: 0x000D7F0C
		public Literal integerOrNumeric()
		{
			Literal literal;
			switch (this.LA(1))
			{
			case 221:
				literal = this.integer();
				break;
			case 222:
				literal = this.numeric();
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literal;
		}

		// Token: 0x060018F0 RID: 6384 RVA: 0x000D9D60 File Offset: 0x000D7F60
		public void coldefList(InsertBulkStatement vParent)
		{
			this.match(191);
			InsertBulkColumnDefinition insertBulkColumnDefinition = this.coldefItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<InsertBulkColumnDefinition>(vParent, vParent.ColumnDefinitions, insertBulkColumnDefinition);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				insertBulkColumnDefinition = this.coldefItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<InsertBulkColumnDefinition>(vParent, vParent.ColumnDefinitions, insertBulkColumnDefinition);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060018F1 RID: 6385 RVA: 0x000D9E00 File Offset: 0x000D8000
		public void insertBulkOptions(InsertBulkStatement vParent)
		{
			int num = 0;
			this.match(171);
			this.match(191);
			BulkInsertOption bulkInsertOption = this.insertBulkOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				bulkInsertOption = this.insertBulkOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060018F2 RID: 6386 RVA: 0x000D9EC8 File Offset: 0x000D80C8
		public InsertBulkColumnDefinition coldefItem()
		{
			InsertBulkColumnDefinition insertBulkColumnDefinition = base.FragmentFactory.CreateFragment<InsertBulkColumnDefinition>();
			ColumnDefinitionBase columnDefinitionBase = this.columnDefinitionEx();
			if (this.inputState.guessing == 0)
			{
				insertBulkColumnDefinition.Column = columnDefinitionBase;
			}
			int num = this.LA(1);
			switch (num)
			{
			case 99:
			case 100:
			{
				bool flag = this.nullNotNull(insertBulkColumnDefinition);
				if (this.inputState.guessing == 0)
				{
					insertBulkColumnDefinition.NullNotNull = (flag ? NullNotNull.Null : NullNotNull.NotNull);
				}
				break;
			}
			default:
				if (num != 192 && num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				break;
			}
			return insertBulkColumnDefinition;
		}

		// Token: 0x060018F3 RID: 6387 RVA: 0x000D9F60 File Offset: 0x000D8160
		public ColumnDefinitionBase columnDefinitionEx()
		{
			ColumnDefinitionBase columnDefinitionBase = null;
			if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_49_.member(this.LA(2)))
			{
				columnDefinitionBase = this.columnDefinitionBasic();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_50_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "TIMESTAMP");
					columnDefinitionBase = base.FragmentFactory.CreateFragment<ColumnDefinitionBase>();
					Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
					identifier.SetUnquotedIdentifier("TIMESTAMP");
					columnDefinitionBase.ColumnIdentifier = identifier;
				}
			}
			return columnDefinitionBase;
		}

		// Token: 0x060018F4 RID: 6388 RVA: 0x000DA040 File Offset: 0x000D8240
		public bool nullNotNull(TSqlFragment vParent)
		{
			bool flag = true;
			switch (this.LA(1))
			{
			case 99:
			{
				IToken token = this.LT(1);
				this.match(99);
				if (this.inputState.guessing == 0)
				{
					flag = false;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				}
				break;
			}
			case 100:
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(100);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			return flag;
		}

		// Token: 0x060018F5 RID: 6389 RVA: 0x000DA0D0 File Offset: 0x000D82D0
		public ColumnWithSortOrder columnWithSortOrder()
		{
			ColumnWithSortOrder columnWithSortOrder = base.FragmentFactory.CreateFragment<ColumnWithSortOrder>();
			ColumnReferenceExpression columnReferenceExpression = this.identifierColumnReferenceExpression();
			if (this.inputState.guessing == 0)
			{
				columnWithSortOrder.Column = columnReferenceExpression;
			}
			int num = this.LA(1);
			if (num <= 50)
			{
				if (num == 10 || num == 50)
				{
					SortOrder sortOrder = this.orderByOption(columnWithSortOrder);
					if (this.inputState.guessing == 0)
					{
						columnWithSortOrder.SortOrder = sortOrder;
						return columnWithSortOrder;
					}
					return columnWithSortOrder;
				}
			}
			else if (num == 192 || num == 198)
			{
				return columnWithSortOrder;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060018F6 RID: 6390 RVA: 0x000DA164 File Offset: 0x000D8364
		public void dbccNamedLiteralList(DbccStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			int num = this.LA(1);
			if (num <= 193)
			{
				if (num != 100)
				{
					switch (num)
					{
					case 192:
						if (this.inputState.guessing == 0)
						{
							vParent.ParenthesisRequired = true;
							goto IL_012D;
						}
						goto IL_012D;
					case 193:
						break;
					default:
						goto IL_011A;
					}
				}
			}
			else if (num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_011A;
				default:
					goto IL_011A;
				}
			}
			DbccNamedLiteral dbccNamedLiteral = this.dbccNamedLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccNamedLiteral>(vParent, vParent.Literals, dbccNamedLiteral);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				dbccNamedLiteral = this.dbccNamedLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccNamedLiteral>(vParent, vParent.Literals, dbccNamedLiteral);
				}
			}
			goto IL_012D;
			IL_011A:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_012D:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x060018F7 RID: 6391 RVA: 0x000DA2C5 File Offset: 0x000D84C5
		public void dbccOptions(DbccStatement vParent)
		{
			this.match(171);
			this.dbccOptionsList(vParent);
		}

		// Token: 0x060018F8 RID: 6392 RVA: 0x000DA2DC File Offset: 0x000D84DC
		public void dbccOptionsList(DbccStatement vParent)
		{
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
			{
				this.dbccOptionsListItems(vParent);
				return;
			}
			if (this.LA(1) == 232 && this.LA(2) == 90)
			{
				this.dbccOptionsJoin(vParent);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060018F9 RID: 6393 RVA: 0x000DA348 File Offset: 0x000D8548
		public void dbccOptionsListItems(DbccStatement vParent)
		{
			DbccOption dbccOption = this.dbccOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, dbccOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				dbccOption = this.dbccOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, dbccOption);
				}
			}
		}

		// Token: 0x060018FA RID: 6394 RVA: 0x000DA3B4 File Offset: 0x000D85B4
		public void dbccOptionsJoin(DbccStatement vParent)
		{
			DbccOption dbccOption = this.dbccJoinOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, dbccOption);
			}
			int num = 0;
			while (this.LA(1) == 90)
			{
				this.match(90);
				dbccOption = this.dbccJoinOption();
				if (this.inputState.guessing == 0)
				{
					vParent.OptionsUseJoin = true;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, dbccOption);
				}
				num++;
			}
			if (num >= 1)
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060018FB RID: 6395 RVA: 0x000DA440 File Offset: 0x000D8640
		public DbccOption dbccOption()
		{
			DbccOption dbccOption = base.FragmentFactory.CreateFragment<DbccOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				dbccOption.OptionKind = DbccOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccOption, token);
			}
			return dbccOption;
		}

		// Token: 0x060018FC RID: 6396 RVA: 0x000DA498 File Offset: 0x000D8698
		public DbccOption dbccJoinOption()
		{
			DbccOption dbccOption = base.FragmentFactory.CreateFragment<DbccOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				dbccOption.OptionKind = DbccJoinOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccOption, token);
			}
			return dbccOption;
		}

		// Token: 0x060018FD RID: 6397 RVA: 0x000DA4EC File Offset: 0x000D86EC
		public DbccNamedLiteral dbccNamedLiteral()
		{
			DbccNamedLiteral dbccNamedLiteral = base.FragmentFactory.CreateFragment<DbccNamedLiteral>();
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					dbccNamedLiteral.Name = token.getText();
					TSql80ParserBaseInternal.UpdateTokenInfo(dbccNamedLiteral, token);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_51_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_52_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			ScalarExpression scalarExpression = this.possibleNegativeConstantOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				dbccNamedLiteral.Value = scalarExpression;
			}
			return dbccNamedLiteral;
		}

		// Token: 0x060018FE RID: 6398 RVA: 0x000DA5B8 File Offset: 0x000D87B8
		public void endpointOptions(AlterCreateEndpointStatementBase vParent)
		{
			this.endpointOption(vParent);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.endpointOption(vParent);
			}
		}

		// Token: 0x060018FF RID: 6399 RVA: 0x000DA5E4 File Offset: 0x000D87E4
		public void protocolInfo(AlterCreateEndpointStatementBase vParent)
		{
			EndpointProtocolOptions endpointProtocolOptions = EndpointProtocolOptions.None;
			this.match(9);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				vParent.Protocol = EndpointProtocolsHelper.Instance.ParseOption(token);
			}
			this.match(191);
			EndpointProtocolOption endpointProtocolOption = this.protocolOptionsItem(vParent.Protocol, endpointProtocolOptions);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EndpointProtocolOption>(vParent, vParent.ProtocolOptions, endpointProtocolOption);
				endpointProtocolOptions = endpointProtocolOption.Kind;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				endpointProtocolOption = this.protocolOptionsItem(vParent.Protocol, endpointProtocolOptions);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EndpointProtocolOption>(vParent, vParent.ProtocolOptions, endpointProtocolOption);
					endpointProtocolOptions |= endpointProtocolOption.Kind;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001900 RID: 6400 RVA: 0x000DA6E0 File Offset: 0x000D88E0
		public void payloadInfo(AlterCreateEndpointStatementBase vParent)
		{
			PayloadOptionKinds payloadOptionKinds = PayloadOptionKinds.None;
			this.match(67);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "DATA_MIRRORING"))
				{
					vParent.EndpointType = EndpointType.DatabaseMirroring;
				}
				else
				{
					vParent.EndpointType = EndpointTypesHelper.Instance.ParseOption(token);
				}
			}
			this.match(191);
			int num = this.LA(1);
			if (num <= 54)
			{
				switch (num)
				{
				case 4:
				case 6:
					break;
				case 5:
					goto IL_012E;
				default:
					if (num != 43 && num != 54)
					{
						goto IL_012E;
					}
					break;
				}
			}
			else if (num != 139)
			{
				if (num == 192)
				{
					goto IL_0141;
				}
				if (num != 232)
				{
					goto IL_012E;
				}
			}
			PayloadOption payloadOption = this.payloadOption(vParent.EndpointType, payloadOptionKinds);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PayloadOption>(vParent, vParent.PayloadOptions, payloadOption);
				payloadOptionKinds = payloadOption.Kind;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				payloadOption = this.payloadOption(vParent.EndpointType, payloadOptionKinds);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PayloadOption>(vParent, vParent.PayloadOptions, payloadOption);
					payloadOptionKinds |= payloadOption.Kind;
				}
			}
			goto IL_0141;
			IL_012E:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0141:
			if (this.inputState.guessing == 0 && vParent.EndpointType == EndpointType.DatabaseMirroring && (payloadOptionKinds & PayloadOptionKinds.Role) != PayloadOptionKinds.Role)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46080", token, TSqlParserResource.SQL46080Message, new string[0]);
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001901 RID: 6401 RVA: 0x000DA890 File Offset: 0x000D8A90
		public void endpointOption(AlterCreateEndpointStatementBase vParent)
		{
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("STATE"))
			{
				this.endpointState(vParent);
				return;
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				this.endpointAffinity(vParent);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001902 RID: 6402 RVA: 0x000DA904 File Offset: 0x000D8B04
		public void endpointState(AlterCreateEndpointStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (vParent.State != EndpointState.NotSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				vParent.State = EndpointStateHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001903 RID: 6403 RVA: 0x000DA97C File Offset: 0x000D8B7C
		public void endpointAffinity(AlterCreateEndpointStatementBase vParent)
		{
			EndpointAffinity endpointAffinity = base.FragmentFactory.CreateFragment<EndpointAffinity>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AFFINITY");
				if (vParent.Affinity != null)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(endpointAffinity, token);
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "NONE"))
					{
						endpointAffinity.Kind = AffinityKind.None;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "ADMIN");
						endpointAffinity.Kind = AffinityKind.Admin;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(endpointAffinity, token2);
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					endpointAffinity.Kind = AffinityKind.Integer;
					endpointAffinity.Value = literal;
				}
			}
			if (this.inputState.guessing == 0)
			{
				vParent.Affinity = endpointAffinity;
			}
		}

		// Token: 0x06001904 RID: 6404 RVA: 0x000DAA9C File Offset: 0x000D8C9C
		public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			EndpointProtocolOption endpointProtocolOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LISTENER_IP"))
			{
				endpointProtocolOption = this.listenerIpProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LISTENER_PORT"))
			{
				endpointProtocolOption = this.listenerPortProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PATH"))
			{
				endpointProtocolOption = this.pathProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SITE"))
			{
				endpointProtocolOption = this.siteProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CLEAR_PORT"))
			{
				endpointProtocolOption = this.clearPortProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SSL_PORT"))
			{
				endpointProtocolOption = this.sslPortProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTHENTICATION"))
			{
				endpointProtocolOption = this.authenticationProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PORTS"))
			{
				endpointProtocolOption = this.portsProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTH_REALM"))
			{
				endpointProtocolOption = this.authenticationRealmProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DEFAULT_LOGON_DOMAIN"))
			{
				endpointProtocolOption = this.defaultLogonDomainProtocolOption(protocol, encountered);
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				endpointProtocolOption = this.compressionProtocolOption(protocol, encountered);
			}
			return endpointProtocolOption;
		}

		// Token: 0x06001905 RID: 6405 RVA: 0x000DAD08 File Offset: 0x000D8F08
		public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			ListenerIPEndpointProtocolOption listenerIPEndpointProtocolOption = base.FragmentFactory.CreateFragment<ListenerIPEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				listenerIPEndpointProtocolOption.Kind = EndpointProtocolOptions.TcpListenerIP;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, listenerIPEndpointProtocolOption.Kind, protocol, token);
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				int num2 = this.LA(1);
				switch (num2)
				{
				case 221:
				case 222:
				{
					IPv4 pv = this.ipAddressV4();
					if (this.inputState.guessing == 0)
					{
						listenerIPEndpointProtocolOption.IPv4PartOne = pv;
					}
					int num3 = this.LA(1);
					if (num3 != 192)
					{
						if (num3 != 202)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(202);
						pv = this.ipAddressV4();
						if (this.inputState.guessing == 0)
						{
							listenerIPEndpointProtocolOption.IPv4PartTwo = pv;
						}
					}
					break;
				}
				default:
					switch (num2)
					{
					case 230:
					case 231:
					{
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							listenerIPEndpointProtocolOption.IPv6 = literal;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					break;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(listenerIPEndpointProtocolOption, token2);
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					listenerIPEndpointProtocolOption.IsAll = true;
				}
			}
			return listenerIPEndpointProtocolOption;
		}

		// Token: 0x06001906 RID: 6406 RVA: 0x000DAEC8 File Offset: 0x000D90C8
		public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.TcpListenerPort;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				TSql90ParserBaseInternal.ThrowIfInvalidListenerPortValue(literal);
				literalEndpointProtocolOption.Value = literal;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x06001907 RID: 6407 RVA: 0x000DAF3C File Offset: 0x000D913C
		public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpPath;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = literal;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x06001908 RID: 6408 RVA: 0x000DAFA8 File Offset: 0x000D91A8
		public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpSite;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = literal;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x06001909 RID: 6409 RVA: 0x000DB018 File Offset: 0x000D9218
		public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpClearPort;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = literal;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x0600190A RID: 6410 RVA: 0x000DB084 File Offset: 0x000D9284
		public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpSslPort;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = literal;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x0600190B RID: 6411 RVA: 0x000DB0F4 File Offset: 0x000D92F4
		public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			AuthenticationEndpointProtocolOption authenticationEndpointProtocolOption = base.FragmentFactory.CreateFragment<AuthenticationEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				authenticationEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpAuthentication;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, authenticationEndpointProtocolOption.Kind, protocol, token);
			}
			this.match(191);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				authenticationEndpointProtocolOption.AuthenticationTypes = AuthenticationTypesHelper.Instance.ParseOption(token2);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					authenticationEndpointProtocolOption.AuthenticationTypes = TSql90ParserBaseInternal.AggregateAuthenticationType(authenticationEndpointProtocolOption.AuthenticationTypes, AuthenticationTypesHelper.Instance.ParseOption(token3), token3);
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(authenticationEndpointProtocolOption, token4);
			}
			return authenticationEndpointProtocolOption;
		}

		// Token: 0x0600190C RID: 6412 RVA: 0x000DB214 File Offset: 0x000D9414
		public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			PortsEndpointProtocolOption portsEndpointProtocolOption = base.FragmentFactory.CreateFragment<PortsEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				portsEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpPorts;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, portsEndpointProtocolOption.Kind, protocol, token);
			}
			this.match(191);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				portsEndpointProtocolOption.PortTypes = PortTypesHelper.Instance.ParseOption(token2);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					portsEndpointProtocolOption.PortTypes = TSql90ParserBaseInternal.AggregatePortType(portsEndpointProtocolOption.PortTypes, PortTypesHelper.Instance.ParseOption(token3), token3);
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(portsEndpointProtocolOption, token4);
			}
			return portsEndpointProtocolOption;
		}

		// Token: 0x0600190D RID: 6413 RVA: 0x000DB338 File Offset: 0x000D9538
		public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpAuthenticationRealm;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
			}
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.nonEmptyString();
				if (this.inputState.guessing == 0)
				{
					literalEndpointProtocolOption.Value = literal;
				}
				break;
			}
			case 232:
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NONE");
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x0600190E RID: 6414 RVA: 0x000DB418 File Offset: 0x000D9618
		public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpDefaultLogonDomain;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
			}
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.nonEmptyString();
				if (this.inputState.guessing == 0)
				{
					literalEndpointProtocolOption.Value = literal;
				}
				break;
			}
			case 232:
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NONE");
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x0600190F RID: 6415 RVA: 0x000DB4F8 File Offset: 0x000D96F8
		public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			CompressionEndpointProtocolOption compressionEndpointProtocolOption = base.FragmentFactory.CreateFragment<CompressionEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				compressionEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpCompression;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, compressionEndpointProtocolOption.Kind, protocol, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "ENABLED"))
				{
					compressionEndpointProtocolOption.IsEnabled = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "DISABLED");
					compressionEndpointProtocolOption.IsEnabled = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(compressionEndpointProtocolOption, token2);
			}
			return compressionEndpointProtocolOption;
		}

		// Token: 0x06001910 RID: 6416 RVA: 0x000DB598 File Offset: 0x000D9798
		public void ipV4DotNumberTail(IPv4 vParent)
		{
			int num = this.LA(1);
			if (num != 200)
			{
				if (num != 222)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(222);
				if (this.inputState.guessing == 0)
				{
					vParent.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token);
					return;
				}
			}
			else
			{
				this.match(200);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					vParent.OctetFour = literal;
					return;
				}
			}
		}

		// Token: 0x06001911 RID: 6417 RVA: 0x000DB628 File Offset: 0x000D9828
		public void ipV4DotLastTwoPartsTail(IPv4 vParent)
		{
			this.match(200);
			switch (this.LA(1))
			{
			case 221:
			{
				Literal literal = this.integer();
				this.ipV4DotNumberTail(vParent);
				if (this.inputState.guessing == 0)
				{
					vParent.OctetThree = literal;
					return;
				}
				return;
			}
			case 222:
				this.ipV4NumericOrNumericIntegerTail(vParent);
				return;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001912 RID: 6418 RVA: 0x000DB69C File Offset: 0x000D989C
		public void ipV4NumericOrNumericIntegerTail(IPv4 vParent)
		{
			IToken token = this.LT(1);
			this.match(222);
			int num = this.LA(1);
			if (num <= 192)
			{
				if (num != 1 && num != 192)
				{
					goto IL_0099;
				}
			}
			else if (num != 202)
			{
				if (num != 221)
				{
					goto IL_0099;
				}
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					vParent.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token);
					vParent.OctetFour = literal;
					return;
				}
				return;
			}
			if (this.inputState.guessing == 0)
			{
				Literal literal2;
				Literal literal3;
				base.GetIPv4FragmentsFromNumberDotNumberNumeric(token, out literal2, out literal3);
				vParent.OctetThree = literal2;
				vParent.OctetFour = literal3;
				return;
			}
			return;
			IL_0099:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001913 RID: 6419 RVA: 0x000DB758 File Offset: 0x000D9958
		public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			int num = this.LA(1);
			PayloadOption payloadOption;
			if (num != 43)
			{
				if (num != 139)
				{
					if (TSql90ParserInternal.tokenSet_53_.member(this.LA(1)) && this.LA(2) >= 230 && this.LA(2) <= 232)
					{
						payloadOption = this.soapMethod(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("BATCHES"))
					{
						payloadOption = this.batchesPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("WSDL"))
					{
						payloadOption = this.wsdlPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SESSIONS"))
					{
						payloadOption = this.sessionsPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LOGIN_TYPE"))
					{
						payloadOption = this.loginTypePayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SESSION_TIMEOUT"))
					{
						payloadOption = this.sessionTimeoutPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAMESPACE"))
					{
						payloadOption = this.namespacePayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CHARACTER_SET"))
					{
						payloadOption = this.characterSetPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("HEADER_LIMIT"))
					{
						payloadOption = this.headerLimitPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTHENTICATION"))
					{
						payloadOption = this.authenticationPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ENCRYPTION"))
					{
						payloadOption = this.encryptionPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MESSAGE_FORWARDING"))
					{
						payloadOption = this.messageForwardingPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MESSAGE_FORWARD_SIZE"))
					{
						payloadOption = this.messageForwardSizePayloadOption(type, encountered);
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 206)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						payloadOption = this.rolePayloadOption(type, encountered);
					}
				}
				else
				{
					payloadOption = this.schemaPayloadOption(type, encountered);
				}
			}
			else
			{
				payloadOption = this.databasePayloadOption(type, encountered);
			}
			return payloadOption;
		}

		// Token: 0x06001914 RID: 6420 RVA: 0x000DBAA0 File Offset: 0x000D9CA0
		public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered)
		{
			SoapMethod soapMethod = base.FragmentFactory.CreateFragment<SoapMethod>();
			int num = this.LA(1);
			switch (num)
			{
			case 4:
			case 6:
				break;
			case 5:
				goto IL_01A2;
			default:
				if (num != 54)
				{
					if (num != 232)
					{
						goto IL_01A2;
					}
				}
				else
				{
					this.match(54);
					IToken token = this.LT(1);
					this.match(232);
					this.soapMethodAlias(soapMethod);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "WEBMETHOD");
						soapMethod.Action = SoapMethodAction.Drop;
						return soapMethod;
					}
					return soapMethod;
				}
				break;
			}
			int num2 = this.LA(1);
			switch (num2)
			{
			case 4:
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					soapMethod.Action = SoapMethodAction.Add;
					goto IL_00BB;
				}
				goto IL_00BB;
			case 5:
				break;
			case 6:
				this.match(6);
				if (this.inputState.guessing == 0)
				{
					soapMethod.Action = SoapMethodAction.Alter;
					goto IL_00BB;
				}
				goto IL_00BB;
			default:
				if (num2 == 232)
				{
					goto IL_00BB;
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00BB:
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "WEBMETHOD");
				soapMethod.Kind = PayloadOptionKinds.WebMethod;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, soapMethod.Kind, type, token2);
			}
			this.soapMethodAlias(soapMethod);
			this.match(191);
			this.soapMethodOption(soapMethod);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.soapMethodOption(soapMethod);
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(soapMethod, token3);
				return soapMethod;
			}
			return soapMethod;
			IL_01A2:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001915 RID: 6421 RVA: 0x000DBC64 File Offset: 0x000D9E64
		public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			this.enabledDisabled(enabledDisabledPayloadOption);
			if (this.inputState.guessing == 0)
			{
				enabledDisabledPayloadOption.Kind = PayloadOptionKinds.Batches;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
			}
			return enabledDisabledPayloadOption;
		}

		// Token: 0x06001916 RID: 6422 RVA: 0x000DBCC8 File Offset: 0x000D9EC8
		public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			WsdlPayloadOption wsdlPayloadOption = base.FragmentFactory.CreateFragment<WsdlPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				wsdlPayloadOption.Kind = PayloadOptionKinds.Wsdl;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, wsdlPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						wsdlPayloadOption.Value = literal;
					}
					break;
				}
				case 232:
				{
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "NONE");
						wsdlPayloadOption.IsNone = true;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Literal literal = this.defaultLiteral();
				if (this.inputState.guessing == 0)
				{
					wsdlPayloadOption.Value = literal;
				}
			}
			return wsdlPayloadOption;
		}

		// Token: 0x06001917 RID: 6423 RVA: 0x000DBDD4 File Offset: 0x000D9FD4
		public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			this.enabledDisabled(enabledDisabledPayloadOption);
			if (this.inputState.guessing == 0)
			{
				enabledDisabledPayloadOption.Kind = PayloadOptionKinds.Sessions;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
			}
			return enabledDisabledPayloadOption;
		}

		// Token: 0x06001918 RID: 6424 RVA: 0x000DBE38 File Offset: 0x000DA038
		public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LoginTypePayloadOption loginTypePayloadOption = base.FragmentFactory.CreateFragment<LoginTypePayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				loginTypePayloadOption.Kind = PayloadOptionKinds.LoginType;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, loginTypePayloadOption.Kind, type, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "WINDOWS"))
				{
					loginTypePayloadOption.IsWindows = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "MIXED");
					loginTypePayloadOption.IsWindows = false;
				}
			}
			return loginTypePayloadOption;
		}

		// Token: 0x06001919 RID: 6425 RVA: 0x000DBED4 File Offset: 0x000DA0D4
		public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			SessionTimeoutPayloadOption sessionTimeoutPayloadOption = base.FragmentFactory.CreateFragment<SessionTimeoutPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				sessionTimeoutPayloadOption.Kind = PayloadOptionKinds.SessionTimeout;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, sessionTimeoutPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NEVER");
					sessionTimeoutPayloadOption.IsNever = true;
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					sessionTimeoutPayloadOption.Timeout = literal;
				}
			}
			return sessionTimeoutPayloadOption;
		}

		// Token: 0x0600191A RID: 6426 RVA: 0x000DBFB4 File Offset: 0x000DA1B4
		public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(43);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.Database;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			Literal literal;
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
					literal = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				literal = this.defaultLiteral();
			}
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Value = literal;
			}
			return literalPayloadOption;
		}

		// Token: 0x0600191B RID: 6427 RVA: 0x000DC06C File Offset: 0x000DA26C
		public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.Namespace;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			Literal literal;
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
					literal = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				literal = this.defaultLiteral();
			}
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Value = literal;
			}
			return literalPayloadOption;
		}

		// Token: 0x0600191C RID: 6428 RVA: 0x000DC128 File Offset: 0x000DA328
		public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			SchemaPayloadOption schemaPayloadOption = base.FragmentFactory.CreateFragment<SchemaPayloadOption>();
			IToken token = this.LT(1);
			this.match(139);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				schemaPayloadOption.Kind = PayloadOptionKinds.Schema;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, schemaPayloadOption.Kind, type, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "STANDARD"))
				{
					schemaPayloadOption.IsStandard = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "NONE");
					schemaPayloadOption.IsStandard = false;
				}
			}
			return schemaPayloadOption;
		}

		// Token: 0x0600191D RID: 6429 RVA: 0x000DC1C8 File Offset: 0x000DA3C8
		public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			CharacterSetPayloadOption characterSetPayloadOption = base.FragmentFactory.CreateFragment<CharacterSetPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				characterSetPayloadOption.Kind = PayloadOptionKinds.CharacterSet;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, characterSetPayloadOption.Kind, type, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "SQL"))
				{
					characterSetPayloadOption.IsSql = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "XML");
					characterSetPayloadOption.IsSql = false;
				}
			}
			return characterSetPayloadOption;
		}

		// Token: 0x0600191E RID: 6430 RVA: 0x000DC268 File Offset: 0x000DA468
		public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.HeaderLimit;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
				literalPayloadOption.Value = literal;
			}
			return literalPayloadOption;
		}

		// Token: 0x0600191F RID: 6431 RVA: 0x000DC2D8 File Offset: 0x000DA4D8
		public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			AuthenticationPayloadOption authenticationPayloadOption = base.FragmentFactory.CreateFragment<AuthenticationPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				authenticationPayloadOption.Kind = PayloadOptionKinds.Authentication;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, authenticationPayloadOption.Kind, type, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.LA(1) == 192 || this.LA(1) == 198)
			{
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "WINDOWS");
					authenticationPayloadOption.Protocol = AuthenticationProtocol.Windows;
				}
			}
			else if ((this.LA(1) == 232 || this.LA(1) == 233) && (this.LA(2) == 192 || this.LA(2) == 198))
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE"))
					{
						authenticationPayloadOption.Certificate = identifier;
						authenticationPayloadOption.TryCertificateFirst = true;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "WINDOWS");
						authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier, token2);
					}
				}
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Identifier identifier = this.identifier();
				Identifier identifier2 = this.identifier();
				int num = this.LA(1);
				if (num != 192 && num != 198)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						Identifier identifier3 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE"))
							{
								authenticationPayloadOption.Certificate = identifier;
								TSql80ParserBaseInternal.Match(identifier2, "WINDOWS", token2);
								authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier3, token2);
								authenticationPayloadOption.TryCertificateFirst = true;
							}
							else
							{
								TSql80ParserBaseInternal.Match(token2, "WINDOWS");
								authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier, token2);
								TSql80ParserBaseInternal.Match(identifier2, "CERTIFICATE", token2);
								authenticationPayloadOption.Certificate = identifier3;
							}
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE"))
					{
						authenticationPayloadOption.Certificate = identifier;
						TSql80ParserBaseInternal.Match(identifier2, "WINDOWS", token2);
						authenticationPayloadOption.TryCertificateFirst = true;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "WINDOWS");
						TSql80ParserBaseInternal.Match(identifier, "CERTIFICATE", token2);
						authenticationPayloadOption.Certificate = identifier2;
					}
					authenticationPayloadOption.Protocol = AuthenticationProtocol.Windows;
				}
			}
			return authenticationPayloadOption;
		}

		// Token: 0x06001920 RID: 6432 RVA: 0x000DC5A8 File Offset: 0x000DA7A8
		public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EncryptionPayloadOption encryptionPayloadOption = base.FragmentFactory.CreateFragment<EncryptionPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				encryptionPayloadOption.Kind = PayloadOptionKinds.Encryption;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, encryptionPayloadOption.Kind, type, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				encryptionPayloadOption.EncryptionSupport = EndpointEncryptionSupportHelper.Instance.ParseOption(token2);
			}
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0 && (encryptionPayloadOption.EncryptionSupport == EndpointEncryptionSupport.Disabled || !string.Equals(TSql90ParserBaseInternal.Unquote(identifier.Value), "ALGORITHM", 5)))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
					}
					if ((this.LA(1) == 232 || this.LA(1) == 233) && (this.LA(2) == 192 || this.LA(2) == 198))
					{
						Identifier identifier2 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							encryptionPayloadOption.AlgorithmPartOne = TSql90ParserBaseInternal.RecognizeAesOrRc4(identifier2, token2);
						}
					}
					else
					{
						if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 232 && this.LA(2) != 233))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						Identifier identifier2 = this.identifier();
						Identifier identifier3 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							encryptionPayloadOption.AlgorithmPartOne = TSql90ParserBaseInternal.RecognizeAesOrRc4(identifier2, token2);
							encryptionPayloadOption.AlgorithmPartTwo = TSql90ParserBaseInternal.RecognizeAesOrRc4(identifier3, token2);
							if (encryptionPayloadOption.AlgorithmPartOne == encryptionPayloadOption.AlgorithmPartTwo)
							{
								throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
							}
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return encryptionPayloadOption;
		}

		// Token: 0x06001921 RID: 6433 RVA: 0x000DC7C4 File Offset: 0x000DA9C4
		public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			this.enabledDisabled(enabledDisabledPayloadOption);
			if (this.inputState.guessing == 0)
			{
				enabledDisabledPayloadOption.Kind = PayloadOptionKinds.MessageForwarding;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
			}
			return enabledDisabledPayloadOption;
		}

		// Token: 0x06001922 RID: 6434 RVA: 0x000DC82C File Offset: 0x000DAA2C
		public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.MessageForwardSize;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
				literalPayloadOption.Value = literal;
			}
			return literalPayloadOption;
		}

		// Token: 0x06001923 RID: 6435 RVA: 0x000DC89C File Offset: 0x000DAA9C
		public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			RolePayloadOption rolePayloadOption = base.FragmentFactory.CreateFragment<RolePayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				rolePayloadOption.Kind = PayloadOptionKinds.Role;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, rolePayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "WITNESS"))
					{
						rolePayloadOption.Role = DatabaseMirroringEndpointRole.Witness;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "PARTNER");
						rolePayloadOption.Role = DatabaseMirroringEndpointRole.Partner;
					}
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					rolePayloadOption.Role = DatabaseMirroringEndpointRole.All;
				}
			}
			return rolePayloadOption;
		}

		// Token: 0x06001924 RID: 6436 RVA: 0x000DC998 File Offset: 0x000DAB98
		public void enabledDisabled(EnabledDisabledPayloadOption vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "ENABLED"))
				{
					vParent.IsEnabled = true;
					return;
				}
				TSql80ParserBaseInternal.Match(token, "DISABLED");
				vParent.IsEnabled = false;
			}
		}

		// Token: 0x06001925 RID: 6437 RVA: 0x000DC9F0 File Offset: 0x000DABF0
		public DefaultLiteral defaultLiteral()
		{
			DefaultLiteral defaultLiteral = base.FragmentFactory.CreateFragment<DefaultLiteral>();
			IToken token = this.LT(1);
			this.match(47);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(defaultLiteral, token);
				defaultLiteral.Value = token.getText();
			}
			return defaultLiteral;
		}

		// Token: 0x06001926 RID: 6438 RVA: 0x000DCA3C File Offset: 0x000DAC3C
		public void soapMethodAlias(SoapMethod vParent)
		{
			if ((this.LA(1) == 230 || this.LA(1) == 231) && (this.LA(2) == 191 || this.LA(2) == 192 || this.LA(2) == 198))
			{
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					vParent.Alias = literal;
					return;
				}
			}
			else
			{
				if ((this.LA(1) != 230 && this.LA(1) != 231) || this.LA(2) != 200)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Literal literal2 = this.stringLiteral();
				this.match(200);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					vParent.Alias = literal;
					vParent.Namespace = literal2;
					return;
				}
			}
		}

		// Token: 0x06001927 RID: 6439 RVA: 0x000DCB20 File Offset: 0x000DAD20
		public void soapMethodOption(SoapMethod vParent)
		{
			int num = this.LA(1);
			if (num != 139)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				switch (this.LA(1))
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "NAME");
						if (vParent.Name != null)
						{
							throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
						}
						vParent.Name = literal;
						return;
					}
					break;
				}
				case 232:
				{
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						if (vParent.Format != SoapMethodFormat.NotSpecified)
						{
							throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
						}
						TSql80ParserBaseInternal.Match(token, "FORMAT");
						vParent.Format = SoapMethodFormatsHelper.Instance.ParseOption(token2);
						return;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(139);
				this.match(206);
				if (this.inputState.guessing == 0 && vParent.Schema != SoapMethodSchemas.NotSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
				}
				int num2 = this.LA(1);
				if (num2 != 47)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token4 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.TryMatch(token4, "NONE"))
						{
							vParent.Schema = SoapMethodSchemas.None;
							return;
						}
						TSql80ParserBaseInternal.Match(token4, "STANDARD");
						vParent.Schema = SoapMethodSchemas.Standard;
						return;
					}
				}
				else
				{
					this.match(47);
					if (this.inputState.guessing == 0)
					{
						vParent.Schema = SoapMethodSchemas.Default;
						return;
					}
				}
			}
		}

		// Token: 0x06001928 RID: 6440 RVA: 0x000DCD1C File Offset: 0x000DAF1C
		public EventNotificationObjectScope eventNotificationObjectScope()
		{
			EventNotificationObjectScope eventNotificationObjectScope = base.FragmentFactory.CreateFragment<EventNotificationObjectScope>();
			this.match(105);
			if (this.LA(1) == 43)
			{
				IToken token = this.LT(1);
				this.match(43);
				if (this.inputState.guessing == 0)
				{
					eventNotificationObjectScope.Target = EventNotificationTarget.Database;
					TSql80ParserBaseInternal.UpdateTokenInfo(eventNotificationObjectScope, token);
				}
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
			{
				this.LT(1);
				this.match(232);
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					eventNotificationObjectScope.Target = EventNotificationTarget.Queue;
					eventNotificationObjectScope.QueueName = schemaObjectName;
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_54_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SERVER");
					eventNotificationObjectScope.Target = EventNotificationTarget.Server;
					TSql80ParserBaseInternal.UpdateTokenInfo(eventNotificationObjectScope, token2);
				}
			}
			return eventNotificationObjectScope;
		}

		// Token: 0x06001929 RID: 6441 RVA: 0x000DCE6C File Offset: 0x000DB06C
		public EventTypeGroupContainer eventTypeGroupContainer()
		{
			EventTypeGroupContainer eventTypeGroupContainer = null;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				EventNotificationEventType eventNotificationEventType;
				EventNotificationEventGroup eventNotificationEventGroup;
				if (TriggerEventTypeHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql90, out eventNotificationEventType))
				{
					eventTypeGroupContainer = base.CreateEventTypeContainer(eventNotificationEventType, token);
				}
				else if (AuditEventTypeHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql90, out eventNotificationEventType))
				{
					eventTypeGroupContainer = base.CreateEventTypeContainer(eventNotificationEventType, token);
				}
				else if (TriggerEventGroupHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql90, out eventNotificationEventGroup))
				{
					eventTypeGroupContainer = base.CreateEventGroupContainer(eventNotificationEventGroup, token);
				}
				else
				{
					eventNotificationEventGroup = AuditEventGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
					eventTypeGroupContainer = base.CreateEventGroupContainer(eventNotificationEventGroup, token);
				}
			}
			return eventTypeGroupContainer;
		}

		// Token: 0x0600192A RID: 6442 RVA: 0x000DCF08 File Offset: 0x000DB108
		public CreateFullTextCatalogStatement createFulltextCatalogStatement()
		{
			CreateFullTextCatalogStatement createFullTextCatalogStatement = base.FragmentFactory.CreateFragment<CreateFullTextCatalogStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CATALOG");
				createFullTextCatalogStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createFullTextCatalogStatement);
			}
			int num = this.LA(1);
			if (num <= 106)
			{
				if (num <= 64)
				{
					if (num <= 23)
					{
						switch (num)
						{
						case 1:
						case 4:
						case 6:
						case 9:
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0353;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								goto IL_0353;
							}
							break;
						}
					}
					else
					{
						if (num == 28)
						{
							goto IL_0353;
						}
						switch (num)
						{
						case 33:
						case 35:
							goto IL_0353;
						case 34:
							break;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_0353;
							}
							break;
						}
					}
				}
				else if (num <= 86)
				{
					switch (num)
					{
					case 74:
					case 75:
						goto IL_0353;
					default:
						switch (num)
						{
						case 82:
						case 83:
						case 86:
							goto IL_0353;
						}
						break;
					}
				}
				else
				{
					if (num == 92 || num == 95)
					{
						goto IL_0353;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						IToken token2 = this.LT(1);
						this.match(232);
						Identifier identifier2 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "FILEGROUP");
							createFullTextCatalogStatement.FileGroup = identifier2;
							goto IL_0353;
						}
						goto IL_0353;
					}
					case 106:
						goto IL_0353;
					}
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 119)
					{
						goto IL_0353;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0353;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_0353;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_0353;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								goto IL_0353;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				switch (num)
				{
				case 180:
				case 181:
					goto IL_0353;
				default:
					if (num == 191)
					{
						goto IL_0353;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0353;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0353;
				default:
					if (num == 232)
					{
						goto IL_0353;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0353:
			int num2 = this.LA(1);
			if (num2 <= 106)
			{
				if (num2 <= 64)
				{
					if (num2 <= 23)
					{
						switch (num2)
						{
						case 1:
						case 4:
						case 6:
						case 9:
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0646;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_0646;
							}
							break;
						}
					}
					else
					{
						if (num2 == 28)
						{
							goto IL_0646;
						}
						switch (num2)
						{
						case 33:
						case 35:
							goto IL_0646;
						case 34:
							break;
						default:
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_0646;
							}
							break;
						}
					}
				}
				else if (num2 <= 86)
				{
					switch (num2)
					{
					case 74:
					case 75:
						goto IL_0646;
					default:
						switch (num2)
						{
						case 82:
						case 86:
							goto IL_0646;
						case 83:
						{
							this.match(83);
							IToken token3 = this.LT(1);
							this.match(232);
							Literal literal = this.stringLiteral();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token3, "PATH");
								createFullTextCatalogStatement.Path = literal;
								goto IL_0646;
							}
							goto IL_0646;
						}
						}
						break;
					}
				}
				else if (num2 == 92 || num2 == 95 || num2 == 106)
				{
					goto IL_0646;
				}
			}
			else if (num2 <= 176)
			{
				if (num2 <= 144)
				{
					if (num2 == 119)
					{
						goto IL_0646;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0646;
					}
				}
				else
				{
					switch (num2)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_0646;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num2)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_0646;
						case 168:
						case 169:
							break;
						default:
							if (num2 == 176)
							{
								goto IL_0646;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_0646;
				default:
					if (num2 == 191)
					{
						goto IL_0646;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_0646;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_0646;
				default:
					if (num2 == 232)
					{
						goto IL_0646;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0646:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				FullTextCatalogOption fullTextCatalogOption = this.accentSensitivity();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextCatalogOption>(createFullTextCatalogStatement, createFullTextCatalogStatement.Options, fullTextCatalogOption);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_55_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 64)
				{
					if (num3 <= 23)
					{
						switch (num3)
						{
						case 1:
						case 4:
						case 6:
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_099E;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						case 9:
						{
							this.match(9);
							IToken token4 = this.LT(1);
							this.match(47);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.UpdateTokenInfo(createFullTextCatalogStatement, token4);
								createFullTextCatalogStatement.IsDefault = true;
								goto IL_099E;
							}
							goto IL_099E;
						}
						default:
							switch (num3)
							{
							case 22:
							case 23:
								goto IL_099E;
							}
							break;
						}
					}
					else
					{
						if (num3 == 28)
						{
							goto IL_099E;
						}
						switch (num3)
						{
						case 33:
						case 35:
							goto IL_099E;
						case 34:
							break;
						default:
							switch (num3)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_099E;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 74:
					case 75:
						goto IL_099E;
					default:
						if (num3 == 82)
						{
							goto IL_099E;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					goto IL_099E;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 119)
				{
					if (num3 == 106 || num3 == 119)
					{
						goto IL_099E;
					}
				}
				else
				{
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_099E;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_099E;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num3)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_099E;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176)
				{
					goto IL_099E;
				}
				switch (num3)
				{
				case 180:
				case 181:
					goto IL_099E;
				default:
					if (num3 == 191)
					{
						goto IL_099E;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_099E;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_099E;
				default:
					if (num3 == 232)
					{
						goto IL_099E;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_099E:
			this.authorizationOpt(createFullTextCatalogStatement);
			return createFullTextCatalogStatement;
		}

		// Token: 0x0600192B RID: 6443 RVA: 0x000DD8BC File Offset: 0x000DBABC
		public CreateFullTextIndexStatement createFulltextIndexStatement()
		{
			CreateFullTextIndexStatement createFullTextIndexStatement = base.FragmentFactory.CreateFragment<CreateFullTextIndexStatement>();
			this.match(84);
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				createFullTextIndexStatement.OnName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createFullTextIndexStatement);
			}
			int num = this.LA(1);
			if (num != 91)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				FullTextIndexColumn fullTextIndexColumn = this.fulltextIndexColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(createFullTextIndexStatement, createFullTextIndexStatement.FullTextIndexColumns, fullTextIndexColumn);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					fullTextIndexColumn = this.fulltextIndexColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(createFullTextIndexStatement, createFullTextIndexStatement.FullTextIndexColumns, fullTextIndexColumn);
					}
				}
				this.match(192);
			}
			this.match(91);
			this.match(84);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createFullTextIndexStatement.KeyIndexName = identifier;
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_03BB;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_03BB;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_03BB;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_03BB;
							default:
								if (num2 == 28)
								{
									goto IL_03BB;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 33:
					case 35:
						goto IL_03BB;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_03BB;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_03BB;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					goto IL_03BB;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 119)
				{
					if (num2 == 95)
					{
						goto IL_03BB;
					}
					switch (num2)
					{
					case 105:
					{
						FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup = this.fullTextCatalogAndFileGroup();
						if (this.inputState.guessing == 0)
						{
							createFullTextIndexStatement.CatalogAndFileGroup = fullTextCatalogAndFileGroup;
							goto IL_03BB;
						}
						goto IL_03BB;
					}
					case 106:
						goto IL_03BB;
					default:
						if (num2 == 119)
						{
							goto IL_03BB;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_03BB;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_03BB;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_03BB;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176)
				{
					goto IL_03BB;
				}
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_03BB;
				default:
					if (num2 == 191)
					{
						goto IL_03BB;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_03BB;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_03BB;
				default:
					if (num2 == 232)
					{
						goto IL_03BB;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_03BB:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				ChangeTrackingFullTextIndexOption changeTrackingFullTextIndexOption = this.fulltextChangeTrackingOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexOption>(createFullTextIndexStatement, createFullTextIndexStatement.Options, changeTrackingFullTextIndexOption);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createFullTextIndexStatement;
		}

		// Token: 0x0600192C RID: 6444 RVA: 0x000DDD0C File Offset: 0x000DBF0C
		public OnOffFullTextCatalogOption accentSensitivity()
		{
			OnOffFullTextCatalogOption onOffFullTextCatalogOption = base.FragmentFactory.CreateFragment<OnOffFullTextCatalogOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(onOffFullTextCatalogOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ACCENT_SENSITIVITY");
				onOffFullTextCatalogOption.OptionKind = FullTextCatalogOptionKind.AccentSensitivity;
				onOffFullTextCatalogOption.OptionState = optionState;
			}
			return onOffFullTextCatalogOption;
		}

		// Token: 0x0600192D RID: 6445 RVA: 0x000DDD74 File Offset: 0x000DBF74
		public FullTextIndexColumn fulltextIndexColumn()
		{
			FullTextIndexColumn fullTextIndexColumn = base.FragmentFactory.CreateFragment<FullTextIndexColumn>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				fullTextIndexColumn.Name = identifier;
			}
			if (this.LA(1) == 232 && this.LA(2) == 27 && base.NextTokenMatches("TYPE"))
			{
				this.match(232);
				this.match(27);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					fullTextIndexColumn.TypeColumn = identifier;
				}
			}
			else if ((this.LA(1) != 192 && this.LA(1) != 198 && this.LA(1) != 232) || !TSql90ParserInternal.tokenSet_56_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 232 && base.NextTokenMatches("LANGUAGE"))
			{
				IdentifierOrValueExpression identifierOrValueExpression = this.languageTerm();
				if (this.inputState.guessing == 0)
				{
					fullTextIndexColumn.LanguageTerm = identifierOrValueExpression;
				}
			}
			else if (this.LA(1) != 192 && this.LA(1) != 198)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return fullTextIndexColumn;
		}

		// Token: 0x0600192E RID: 6446 RVA: 0x000DDEB8 File Offset: 0x000DC0B8
		public IdentifierOrValueExpression languageTerm()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LANGUAGE");
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
					{
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.CheckIfValidLanguageString(literal);
							identifierOrValueExpression.ValueExpression = literal;
						}
						break;
					}
					case 232:
					case 233:
					{
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.CheckIfValidLanguageIdentifier(identifier);
							identifierOrValueExpression.Identifier = identifier;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					Literal literal = this.binary();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.CheckIfValidLanguageHex(literal);
						identifierOrValueExpression.ValueExpression = literal;
					}
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckIfValidLanguageInteger(literal);
					identifierOrValueExpression.ValueExpression = literal;
				}
			}
			return identifierOrValueExpression;
		}

		// Token: 0x0600192F RID: 6447 RVA: 0x000DDFE4 File Offset: 0x000DC1E4
		public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup()
		{
			FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup = base.FragmentFactory.CreateFragment<FullTextCatalogAndFileGroup>();
			IToken token = this.LT(1);
			this.match(105);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fullTextCatalogAndFileGroup, token);
				fullTextCatalogAndFileGroup.CatalogName = identifier;
			}
			return fullTextCatalogAndFileGroup;
		}

		// Token: 0x06001930 RID: 6448 RVA: 0x000DE034 File Offset: 0x000DC234
		public ChangeTrackingFullTextIndexOption fulltextChangeTrackingOption()
		{
			ChangeTrackingFullTextIndexOption changeTrackingFullTextIndexOption = base.FragmentFactory.CreateFragment<ChangeTrackingFullTextIndexOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING");
				changeTrackingFullTextIndexOption.OptionKind = FullTextIndexOptionKind.ChangeTracking;
			}
			int num = this.LA(1);
			if (num == 103)
			{
				IToken token2 = this.LT(1);
				this.match(103);
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 != 1)
							{
								switch (num2)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_039A;
								default:
									switch (num2)
									{
									case 12:
									case 13:
									case 15:
									case 17:
										break;
									case 14:
									case 16:
										goto IL_039A;
									default:
										goto IL_039A;
									}
									break;
								}
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								break;
							default:
								if (num2 != 28)
								{
									switch (num2)
									{
									case 33:
									case 35:
										break;
									case 34:
										goto IL_039A;
									default:
										goto IL_039A;
									}
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							break;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							goto IL_039A;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								break;
							default:
								if (num2 != 82)
								{
									goto IL_039A;
								}
								break;
							}
							break;
						}
					}
					else if (num2 != 86 && num2 != 92 && num2 != 95)
					{
						goto IL_039A;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 != 106 && num2 != 119)
						{
							switch (num2)
							{
							case 123:
							case 125:
							case 126:
							case 129:
							case 131:
							case 132:
							case 134:
							case 138:
							case 140:
							case 142:
							case 143:
							case 144:
								break;
							case 124:
							case 127:
							case 128:
							case 130:
							case 133:
							case 135:
							case 136:
							case 137:
							case 139:
							case 141:
								goto IL_039A;
							default:
								goto IL_039A;
							}
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							break;
						case 157:
						case 158:
						case 159:
							goto IL_039A;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								break;
							case 168:
							case 169:
								goto IL_039A;
							default:
								if (num2 != 176)
								{
									goto IL_039A;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					switch (num2)
					{
					case 180:
					case 181:
						break;
					default:
						if (num2 != 191)
						{
							if (num2 != 198)
							{
								goto IL_039A;
							}
							this.match(198);
							IToken token3 = this.LT(1);
							this.match(232);
							IToken token4 = this.LT(1);
							this.match(232);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token3, "NO");
								TSql80ParserBaseInternal.Match(token4, "POPULATION");
								TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token4);
								changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.OffNoPopulation;
								return changeTrackingFullTextIndexOption;
							}
							return changeTrackingFullTextIndexOption;
						}
						break;
					}
				}
				else if (num2 != 204)
				{
					switch (num2)
					{
					case 219:
					case 220:
						break;
					default:
						if (num2 != 232)
						{
							goto IL_039A;
						}
						break;
					}
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token2);
					changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Off;
					return changeTrackingFullTextIndexOption;
				}
				return changeTrackingFullTextIndexOption;
				IL_039A:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token5 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token5);
				if (TSql80ParserBaseInternal.TryMatch(token5, "MANUAL"))
				{
					changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Manual;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token5, "AUTO");
					changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Auto;
				}
			}
			return changeTrackingFullTextIndexOption;
		}

		// Token: 0x06001931 RID: 6449 RVA: 0x000DE458 File Offset: 0x000DC658
		public CreateXmlIndexStatement createXmlIndexStatement(bool vPrimary)
		{
			CreateXmlIndexStatement createXmlIndexStatement = base.FragmentFactory.CreateFragment<CreateXmlIndexStatement>();
			createXmlIndexStatement.Primary = vPrimary;
			this.match(84);
			Identifier identifier = this.identifier();
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				createXmlIndexStatement.Name = identifier;
				createXmlIndexStatement.OnName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createXmlIndexStatement);
			}
			this.match(191);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createXmlIndexStatement.XmlColumn = identifier;
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createXmlIndexStatement, token);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("USING"))
			{
				this.LT(1);
				this.match(232);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(84);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "XML");
				}
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					createXmlIndexStatement.SecondaryXmlIndexName = identifier;
				}
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 35)
					{
						if (num <= 17)
						{
							if (num == 1)
							{
								goto IL_045C;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_045C;
							case 5:
								break;
							default:
								switch (num)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_045C;
								}
								break;
							}
						}
						else
						{
							switch (num)
							{
							case 22:
							case 23:
								goto IL_045C;
							default:
								if (num == 28)
								{
									goto IL_045C;
								}
								switch (num)
								{
								case 33:
								case 35:
									goto IL_045C;
								}
								break;
							}
						}
					}
					else if (num <= 75)
					{
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_045C;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							if (num != 67)
							{
								switch (num)
								{
								case 74:
								case 75:
									goto IL_045C;
								}
							}
							else
							{
								this.match(67);
								IToken token3 = this.LT(1);
								this.match(232);
								if (this.inputState.guessing == 0)
								{
									createXmlIndexStatement.SecondaryXmlIndexType = SecondaryXmlIndexTypeHelper.Instance.ParseOption(token3);
									TSql80ParserBaseInternal.UpdateTokenInfo(createXmlIndexStatement, token3);
									goto IL_045C;
								}
								goto IL_045C;
							}
							break;
						}
					}
					else if (num == 82 || num == 86 || num == 92)
					{
						goto IL_045C;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num == 95 || num == 106 || num == 119)
						{
							goto IL_045C;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_045C;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_045C;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_045C;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num == 176)
					{
						goto IL_045C;
					}
					switch (num)
					{
					case 180:
					case 181:
						goto IL_045C;
					default:
						if (num == 191)
						{
							goto IL_045C;
						}
						break;
					}
				}
				else
				{
					if (num == 204)
					{
						goto IL_045C;
					}
					switch (num)
					{
					case 219:
					case 220:
						goto IL_045C;
					default:
						if (num == 232)
						{
							goto IL_045C;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IL_045C:
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.indexOptionList(IndexAffectingStatement.CreateXmlIndex, createXmlIndexStatement.IndexOptions, createXmlIndexStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createXmlIndexStatement;
		}

		// Token: 0x06001932 RID: 6450 RVA: 0x000DE934 File Offset: 0x000DCB34
		public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement()
		{
			CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<CreateXmlSchemaCollectionStatement>();
			this.match(139);
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "COLLECTION");
				createXmlSchemaCollectionStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createXmlSchemaCollectionStatement);
			}
			this.match(9);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				createXmlSchemaCollectionStatement.Expression = scalarExpression;
			}
			return createXmlSchemaCollectionStatement;
		}

		// Token: 0x06001933 RID: 6451 RVA: 0x000DE9C0 File Offset: 0x000DCBC0
		public SchemaObjectName schemaObjectNonEmptyTwoPartName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return schemaObjectName;
						}
						switch (num)
						{
						case 4:
						case 6:
							return schemaObjectName;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
							return schemaObjectName;
						case 10:
						case 11:
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return schemaObjectName;
							default:
								if (num == 28)
								{
									return schemaObjectName;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return schemaObjectName;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return schemaObjectName;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return schemaObjectName;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return schemaObjectName;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return schemaObjectName;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return schemaObjectName;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return schemaObjectName;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return schemaObjectName;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return schemaObjectName;
				}
				switch (num)
				{
				case 180:
				case 181:
					return schemaObjectName;
				default:
					if (num == 191)
					{
						return schemaObjectName;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 200:
					this.match(200);
					identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
						return schemaObjectName;
					}
					return schemaObjectName;
				case 201:
				case 202:
					break;
				case 203:
				case 204:
					return schemaObjectName;
				default:
					switch (num)
					{
					case 219:
					case 220:
						return schemaObjectName;
					default:
						if (num == 232)
						{
							return schemaObjectName;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001934 RID: 6452 RVA: 0x000DECC0 File Offset: 0x000DCEC0
		public void indexOptionList(IndexAffectingStatement statement, IList<IndexOption> optionsList, TSqlFragment vParent)
		{
			this.match(191);
			IndexOption indexOption = this.indexOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.VerifyAllowedIndexOption(statement, indexOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, optionsList, indexOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				indexOption = this.indexOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.VerifyAllowedIndexOption(statement, indexOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, optionsList, indexOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06001935 RID: 6453 RVA: 0x000DED64 File Offset: 0x000DCF64
		public PasswordCreateLoginSource passwordLoginSource()
		{
			PasswordCreateLoginSource passwordCreateLoginSource = base.FragmentFactory.CreateFragment<PasswordCreateLoginSource>();
			int num = 0;
			this.match(171);
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.loginPassword();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PASSWORD");
				passwordCreateLoginSource.Password = literal;
			}
			while (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
			{
				this.createLoginPasswordOption(passwordCreateLoginSource);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				PrincipalOption principalOption = this.createLoginParam();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(passwordCreateLoginSource, passwordCreateLoginSource.Options, principalOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
				}
			}
			return passwordCreateLoginSource;
		}

		// Token: 0x06001936 RID: 6454 RVA: 0x000DEE48 File Offset: 0x000DD048
		public WindowsCreateLoginSource windowsLoginSource()
		{
			WindowsCreateLoginSource windowsCreateLoginSource = base.FragmentFactory.CreateFragment<WindowsCreateLoginSource>();
			int num = 0;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "WINDOWS");
				TSql80ParserBaseInternal.UpdateTokenInfo(windowsCreateLoginSource, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IdentifierPrincipalOption identifierPrincipalOption = this.createLoginParamWin();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(windowsCreateLoginSource, windowsCreateLoginSource.Options, identifierPrincipalOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)identifierPrincipalOption.OptionKind, identifierPrincipalOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					identifierPrincipalOption = this.createLoginParamWin();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(windowsCreateLoginSource, windowsCreateLoginSource.Options, identifierPrincipalOption);
						TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)identifierPrincipalOption.OptionKind, identifierPrincipalOption);
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return windowsCreateLoginSource;
		}

		// Token: 0x06001937 RID: 6455 RVA: 0x000DEF78 File Offset: 0x000DD178
		public CertificateCreateLoginSource certificateLoginSource()
		{
			CertificateCreateLoginSource certificateCreateLoginSource = base.FragmentFactory.CreateFragment<CertificateCreateLoginSource>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			Identifier identifier2 = this.createLoginParamCertOpt();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				certificateCreateLoginSource.Certificate = identifier;
				if (identifier2 != null)
				{
					certificateCreateLoginSource.Credential = identifier2;
				}
			}
			return certificateCreateLoginSource;
		}

		// Token: 0x06001938 RID: 6456 RVA: 0x000DEFE0 File Offset: 0x000DD1E0
		public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource()
		{
			AsymmetricKeyCreateLoginSource asymmetricKeyCreateLoginSource = base.FragmentFactory.CreateFragment<AsymmetricKeyCreateLoginSource>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			Identifier identifier2 = this.createLoginParamCertOpt();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				asymmetricKeyCreateLoginSource.Key = identifier;
				if (identifier2 != null)
				{
					asymmetricKeyCreateLoginSource.Credential = identifier2;
				}
			}
			return asymmetricKeyCreateLoginSource;
		}

		// Token: 0x06001939 RID: 6457 RVA: 0x000DF050 File Offset: 0x000DD250
		public Literal loginPassword()
		{
			int num = this.LA(1);
			Literal literal;
			if (num != 224)
			{
				switch (num)
				{
				case 230:
				case 231:
					literal = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				literal = this.binary();
			}
			return literal;
		}

		// Token: 0x0600193A RID: 6458 RVA: 0x000DF0AC File Offset: 0x000DD2AC
		public void createLoginPasswordOption(PasswordCreateLoginSource vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "HASHED"))
				{
					if (vParent.Hashed)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.Hashed = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "MUST_CHANGE");
					if (vParent.MustChange)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.MustChange = true;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x0600193B RID: 6459 RVA: 0x000DF128 File Offset: 0x000DD328
		public PrincipalOption createLoginParam()
		{
			PrincipalOption principalOption = null;
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 103:
			case 105:
				principalOption = this.onOffPrincipalOption(token);
				goto IL_0108;
			case 104:
				break;
			default:
				if (num != 224)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
							identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
							identifierPrincipalOption.Identifier = identifier;
							principalOption = identifierPrincipalOption;
							goto IL_0108;
						}
						goto IL_0108;
					}
					}
				}
				else
				{
					Literal literal = this.binary();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "SID");
						LiteralPrincipalOption literalPrincipalOption = base.FragmentFactory.CreateFragment<LiteralPrincipalOption>();
						literalPrincipalOption.OptionKind = PrincipalOptionKind.Sid;
						literalPrincipalOption.Value = literal;
						principalOption = literalPrincipalOption;
						goto IL_0108;
					}
					goto IL_0108;
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0108:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(principalOption, token);
			}
			return principalOption;
		}

		// Token: 0x0600193C RID: 6460 RVA: 0x000DF254 File Offset: 0x000DD454
		public BinaryLiteral binary()
		{
			BinaryLiteral binaryLiteral = base.FragmentFactory.CreateFragment<BinaryLiteral>();
			IToken token = this.LT(1);
			this.match(224);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(binaryLiteral, token);
				binaryLiteral.Value = token.getText();
				binaryLiteral.IsLargeObject = TSql80ParserBaseInternal.IsBinaryLiteralLob(binaryLiteral.Value);
			}
			return binaryLiteral;
		}

		// Token: 0x0600193D RID: 6461 RVA: 0x000DF2B4 File Offset: 0x000DD4B4
		public OnOffPrincipalOption onOffPrincipalOption(IToken tOption)
		{
			OnOffPrincipalOption onOffPrincipalOption = base.FragmentFactory.CreateFragment<OnOffPrincipalOption>();
			OptionState optionState = this.optionOnOff(onOffPrincipalOption);
			if (this.inputState.guessing == 0)
			{
				onOffPrincipalOption.OptionKind = SecurityLoginOptionsHelper.Instance.ParseOption(tOption);
				onOffPrincipalOption.OptionState = optionState;
			}
			return onOffPrincipalOption;
		}

		// Token: 0x0600193E RID: 6462 RVA: 0x000DF2FC File Offset: 0x000DD4FC
		public IdentifierPrincipalOption createLoginParamWin()
		{
			IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
				if (identifierPrincipalOption.OptionKind == PrincipalOptionKind.Credential)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				identifierPrincipalOption.Identifier = identifier;
			}
			return identifierPrincipalOption;
		}

		// Token: 0x0600193F RID: 6463 RVA: 0x000DF374 File Offset: 0x000DD574
		public Identifier createLoginParamCertOpt()
		{
			Identifier identifier = null;
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifier;
		}

		// Token: 0x06001940 RID: 6464 RVA: 0x000DF428 File Offset: 0x000DD628
		public void messageTypeValidation(MessageTypeStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "VALIDATION");
				vParent.ValidationMethod = MessageValidationMethodsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			if (this.LA(1) == 171 && this.LA(2) == 139)
			{
				IToken token3 = this.LT(1);
				this.match(171);
				this.match(139);
				IToken token4 = this.LT(1);
				this.match(232);
				SchemaObjectName schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
				if (this.inputState.guessing != 0)
				{
					return;
				}
				if (vParent.ValidationMethod != MessageValidationMethod.ValidXml)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
				}
				TSql80ParserBaseInternal.Match(token4, "COLLECTION");
				vParent.XmlSchemaCollectionName = schemaObjectName;
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001941 RID: 6465 RVA: 0x000DF560 File Offset: 0x000DD760
		public CreatePartitionFunctionStatement createPartitionFunction()
		{
			CreatePartitionFunctionStatement createPartitionFunctionStatement = base.FragmentFactory.CreateFragment<CreatePartitionFunctionStatement>();
			this.match(73);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createPartitionFunctionStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createPartitionFunctionStatement);
			}
			this.match(191);
			PartitionParameterType partitionParameterType = this.partitionParameterType();
			if (this.inputState.guessing == 0)
			{
				createPartitionFunctionStatement.ParameterType = partitionParameterType;
			}
			this.match(192);
			this.match(9);
			this.partitionFunctionTypes(createPartitionFunctionStatement);
			return createPartitionFunctionStatement;
		}

		// Token: 0x06001942 RID: 6466 RVA: 0x000DF5E4 File Offset: 0x000DD7E4
		public CreatePartitionSchemeStatement createPartitionScheme()
		{
			CreatePartitionSchemeStatement createPartitionSchemeStatement = base.FragmentFactory.CreateFragment<CreatePartitionSchemeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SCHEME");
				createPartitionSchemeStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createPartitionSchemeStatement);
			}
			this.match(9);
			IToken token2 = this.LT(1);
			this.match(232);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "PARTITION");
				createPartitionSchemeStatement.PartitionFunction = identifier;
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 151)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					createPartitionSchemeStatement.IsAll = true;
				}
			}
			this.match(151);
			this.match(191);
			IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(createPartitionSchemeStatement, createPartitionSchemeStatement.FileGroups, identifierOrValueExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifierOrValueExpression = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(createPartitionSchemeStatement, createPartitionSchemeStatement.FileGroups, identifierOrValueExpression);
				}
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createPartitionSchemeStatement, token3);
			}
			return createPartitionSchemeStatement;
		}

		// Token: 0x06001943 RID: 6467 RVA: 0x000DF770 File Offset: 0x000DD970
		public PartitionParameterType partitionParameterType()
		{
			PartitionParameterType partitionParameterType = base.FragmentFactory.CreateFragment<PartitionParameterType>();
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				partitionParameterType.DataType = dataTypeReference;
			}
			this.collationOpt(partitionParameterType);
			return partitionParameterType;
		}

		// Token: 0x06001944 RID: 6468 RVA: 0x000DF7AC File Offset: 0x000DD9AC
		public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.partitionFunctionRange(vParent);
			this.match(67);
			this.match(164);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RANGE");
			}
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_021A;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_021A;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_021A;
					}
				}
			}
			else if (num <= 141)
			{
				if (num != 133 && num != 136 && num != 141)
				{
					goto IL_021A;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_021A;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_022D;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_021A;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_021A;
					default:
						goto IL_021A;
					}
					break;
				}
			}
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.BoundaryValues, scalarExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.BoundaryValues, scalarExpression);
				}
			}
			goto IL_022D;
			IL_021A:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_022D:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001945 RID: 6469 RVA: 0x000DFA10 File Offset: 0x000DDC10
		public void partitionFunctionRange(CreatePartitionFunctionStatement vParent)
		{
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 93)
				{
					if (num != 133)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(133);
					if (this.inputState.guessing == 0)
					{
						vParent.Range = PartitionFunctionRange.Right;
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
						return;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(93);
					if (this.inputState.guessing == 0)
					{
						vParent.Range = PartitionFunctionRange.Left;
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
						return;
					}
				}
			}
		}

		// Token: 0x06001946 RID: 6470 RVA: 0x000DFAAB File Offset: 0x000DDCAB
		public void queueOptionList(QueueStatement vParent, bool vDropAccepted)
		{
			this.match(171);
			this.queueOption(vParent, vDropAccepted);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.queueOption(vParent, vDropAccepted);
			}
		}

		// Token: 0x06001947 RID: 6471 RVA: 0x000DFAE4 File Offset: 0x000DDCE4
		public UserRemoteServiceBindingOption bindingUserOption()
		{
			UserRemoteServiceBindingOption userRemoteServiceBindingOption = base.FragmentFactory.CreateFragment<UserRemoteServiceBindingOption>();
			this.match(163);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				userRemoteServiceBindingOption.OptionKind = RemoteServiceBindingOptionKind.User;
				userRemoteServiceBindingOption.User = identifier;
			}
			return userRemoteServiceBindingOption;
		}

		// Token: 0x06001948 RID: 6472 RVA: 0x000DFB38 File Offset: 0x000DDD38
		public OnOffRemoteServiceBindingOption bindingAnonymousOption()
		{
			OnOffRemoteServiceBindingOption onOffRemoteServiceBindingOption = base.FragmentFactory.CreateFragment<OnOffRemoteServiceBindingOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(onOffRemoteServiceBindingOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ANONYMOUS");
				onOffRemoteServiceBindingOption.OptionKind = RemoteServiceBindingOptionKind.Anonymous;
				onOffRemoteServiceBindingOption.OptionState = optionState;
			}
			return onOffRemoteServiceBindingOption;
		}

		// Token: 0x06001949 RID: 6473 RVA: 0x000DFBA0 File Offset: 0x000DDDA0
		public void routeOptionList(RouteStatement vParent)
		{
			int num = 0;
			this.match(171);
			RouteOption routeOption = this.routeOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)routeOption.OptionKind, routeOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RouteOption>(vParent, vParent.RouteOptions, routeOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				routeOption = this.routeOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)routeOption.OptionKind, routeOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RouteOption>(vParent, vParent.RouteOptions, routeOption);
				}
			}
		}

		// Token: 0x0600194A RID: 6474 RVA: 0x000DFC34 File Offset: 0x000DDE34
		public void onQueueClause(AlterCreateServiceStatementBase vParent)
		{
			this.match(105);
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "QUEUE");
				vParent.QueueName = schemaObjectName;
			}
		}

		// Token: 0x0600194B RID: 6475 RVA: 0x000DFC90 File Offset: 0x000DDE90
		public ServiceContract serviceContract()
		{
			ServiceContract serviceContract = base.FragmentFactory.CreateFragment<ServiceContract>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				serviceContract.Name = identifier;
			}
			return serviceContract;
		}

		// Token: 0x0600194C RID: 6476 RVA: 0x000DFCC8 File Offset: 0x000DDEC8
		public AlterServiceStatement alterServiceStatement()
		{
			AlterServiceStatement alterServiceStatement = base.FragmentFactory.CreateFragment<AlterServiceStatement>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterServiceStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterServiceStatement);
			}
			int num = this.LA(1);
			if (num != 105)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.addDropServiceContractList(alterServiceStatement);
			}
			else
			{
				this.onQueueClause(alterServiceStatement);
				if (this.LA(1) == 191 && (this.LA(2) == 4 || this.LA(2) == 54))
				{
					this.addDropServiceContractList(alterServiceStatement);
				}
				else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return alterServiceStatement;
		}

		// Token: 0x0600194D RID: 6477 RVA: 0x000DFDA4 File Offset: 0x000DDFA4
		public void addDropServiceContractList(AlterServiceStatement vParent)
		{
			this.match(191);
			ServiceContract serviceContract = this.addDropServiceContract();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(vParent, vParent.ServiceContracts, serviceContract);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				serviceContract = this.addDropServiceContract();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(vParent, vParent.ServiceContracts, serviceContract);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x0600194E RID: 6478 RVA: 0x000DFE44 File Offset: 0x000DE044
		public ServiceContract addDropServiceContract()
		{
			ServiceContract serviceContract = base.FragmentFactory.CreateFragment<ServiceContract>();
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(54);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(serviceContract, token);
					serviceContract.Action = AlterAction.Drop;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(serviceContract, token2);
					serviceContract.Action = AlterAction.Add;
				}
			}
			this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				serviceContract.Name = identifier;
			}
			return serviceContract;
		}

		// Token: 0x0600194F RID: 6479 RVA: 0x000DFF10 File Offset: 0x000DE110
		public void keySpecList(CreateSymmetricKeyStatement vParent)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			KeyOption keyOption = this.keySpec(ref flag, ref flag2, ref flag3);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<KeyOption>(vParent, vParent.KeyOptions, keyOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				keyOption = this.keySpec(ref flag, ref flag2, ref flag3);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<KeyOption>(vParent, vParent.KeyOptions, keyOption);
				}
			}
		}

		// Token: 0x06001950 RID: 6480 RVA: 0x000DFF8C File Offset: 0x000DE18C
		public void encryptorListWithNoPassword(SymmetricKeyStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			CryptoMechanism cryptoMechanism = this.cryptoWithNoPasswordOrJustPassword();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.EncryptingMechanisms, cryptoMechanism);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				cryptoMechanism = this.cryptoWithNoPasswordOrJustPassword();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.EncryptingMechanisms, cryptoMechanism);
				}
			}
		}

		// Token: 0x06001951 RID: 6481 RVA: 0x000E0020 File Offset: 0x000DE220
		public KeyOption keySpec(ref bool keySourceSpecified, ref bool algorithmSpecified, ref bool identityValueSpecified)
		{
			KeyOption keyOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("KEY_SOURCE"))
			{
				keyOption = this.keySourceKeySpec(ref keySourceSpecified);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ALGORITHM"))
			{
				keyOption = this.algorithmKeySpec(ref algorithmSpecified);
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				keyOption = this.identityValueKeySpec(ref identityValueSpecified);
			}
			return keyOption;
		}

		// Token: 0x06001952 RID: 6482 RVA: 0x000E00D0 File Offset: 0x000DE2D0
		public KeySourceKeyOption keySourceKeySpec(ref bool keySourceSpecified)
		{
			KeySourceKeyOption keySourceKeyOption = base.FragmentFactory.CreateFragment<KeySourceKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "KEY_SOURCE");
				keySourceKeyOption.OptionKind = KeyOptionKind.KeySource;
				if (keySourceSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				keySourceSpecified = true;
				TSql80ParserBaseInternal.UpdateTokenInfo(keySourceKeyOption, token);
				keySourceKeyOption.PassPhrase = literal;
			}
			return keySourceKeyOption;
		}

		// Token: 0x06001953 RID: 6483 RVA: 0x000E014C File Offset: 0x000DE34C
		public AlgorithmKeyOption algorithmKeySpec(ref bool algorithmSpecified)
		{
			AlgorithmKeyOption algorithmKeyOption = base.FragmentFactory.CreateFragment<AlgorithmKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ALGORITHM");
				algorithmKeyOption.OptionKind = KeyOptionKind.Algorithm;
				if (algorithmSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				algorithmSpecified = true;
				algorithmKeyOption.Algorithm = EncryptionAlgorithmsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(algorithmKeyOption, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(algorithmKeyOption, token2);
			}
			return algorithmKeyOption;
		}

		// Token: 0x06001954 RID: 6484 RVA: 0x000E01E8 File Offset: 0x000DE3E8
		public IdentityValueKeyOption identityValueKeySpec(ref bool identityValueSpecified)
		{
			IdentityValueKeyOption identityValueKeyOption = base.FragmentFactory.CreateFragment<IdentityValueKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "IDENTITY_VALUE");
				identityValueKeyOption.OptionKind = KeyOptionKind.IdentityValue;
				if (identityValueSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				identityValueSpecified = true;
				TSql80ParserBaseInternal.UpdateTokenInfo(identityValueKeyOption, token);
				identityValueKeyOption.IdentityPhrase = literal;
			}
			return identityValueKeyOption;
		}

		// Token: 0x06001955 RID: 6485 RVA: 0x000E0264 File Offset: 0x000DE464
		public CryptoMechanism cryptoWithNoPasswordOrJustPassword()
		{
			CryptoMechanism cryptoMechanism;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				cryptoMechanism = this.certificateCrypto();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				cryptoMechanism = this.keyCrypto();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				cryptoMechanism = this.passwordCrypto();
			}
			return cryptoMechanism;
		}

		// Token: 0x06001956 RID: 6486 RVA: 0x000E0304 File Offset: 0x000DE504
		public CryptoMechanism certificateCrypto()
		{
			CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				cryptoMechanism.Identifier = identifier;
				cryptoMechanism.CryptoMechanismType = CryptoMechanismType.Certificate;
			}
			return cryptoMechanism;
		}

		// Token: 0x06001957 RID: 6487 RVA: 0x000E0360 File Offset: 0x000DE560
		public CryptoMechanism keyCrypto()
		{
			CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "SYMMETRIC"))
				{
					cryptoMechanism.CryptoMechanismType = CryptoMechanismType.SymmetricKey;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
					cryptoMechanism.CryptoMechanismType = CryptoMechanismType.AsymmetricKey;
				}
				cryptoMechanism.Identifier = identifier;
			}
			return cryptoMechanism;
		}

		// Token: 0x06001958 RID: 6488 RVA: 0x000E03DC File Offset: 0x000DE5DC
		public CryptoMechanism passwordCrypto()
		{
			CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PASSWORD");
				cryptoMechanism.PasswordOrSignature = literal;
				cryptoMechanism.CryptoMechanismType = CryptoMechanismType.Password;
			}
			return cryptoMechanism;
		}

		// Token: 0x06001959 RID: 6489 RVA: 0x000E0444 File Offset: 0x000DE644
		public AlterSymmetricKeyStatement alterSymmetricKeyStatement()
		{
			AlterSymmetricKeyStatement alterSymmetricKeyStatement = base.FragmentFactory.CreateFragment<AlterSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				alterSymmetricKeyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterSymmetricKeyStatement);
			}
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(54);
				if (this.inputState.guessing == 0)
				{
					alterSymmetricKeyStatement.IsAdd = false;
				}
			}
			else
			{
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					alterSymmetricKeyStatement.IsAdd = true;
				}
			}
			this.encryptorListWithNoPassword(alterSymmetricKeyStatement);
			return alterSymmetricKeyStatement;
		}

		// Token: 0x0600195A RID: 6490 RVA: 0x000E0510 File Offset: 0x000DE710
		public CreateTypeUddtStatement createTypeUddtStatement()
		{
			CreateTypeUddtStatement createTypeUddtStatement = base.FragmentFactory.CreateFragment<CreateTypeUddtStatement>();
			IToken token = this.LT(1);
			this.match(71);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTypeUddtStatement, token);
				base.ThrowPartialAstIfPhaseOne(createTypeUddtStatement);
			}
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				createTypeUddtStatement.DataType = dataTypeReference;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return createTypeUddtStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createTypeUddtStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return createTypeUddtStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return createTypeUddtStatement;
						default:
							if (num == 28)
							{
								return createTypeUddtStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return createTypeUddtStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return createTypeUddtStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return createTypeUddtStatement;
						default:
							if (num == 82)
							{
								return createTypeUddtStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return createTypeUddtStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					switch (num)
					{
					case 99:
					case 100:
					{
						NullableConstraintDefinition nullableConstraintDefinition = this.nullableConstraint();
						if (this.inputState.guessing == 0)
						{
							createTypeUddtStatement.NullableConstraint = nullableConstraintDefinition;
							return createTypeUddtStatement;
						}
						return createTypeUddtStatement;
					}
					default:
						if (num == 106 || num == 119)
						{
							return createTypeUddtStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createTypeUddtStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createTypeUddtStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createTypeUddtStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return createTypeUddtStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return createTypeUddtStatement;
				default:
					if (num == 191)
					{
						return createTypeUddtStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return createTypeUddtStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createTypeUddtStatement;
				default:
					if (num == 232)
					{
						return createTypeUddtStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600195B RID: 6491 RVA: 0x000E082C File Offset: 0x000DEA2C
		public CreateTypeUdtStatement createTypeUdtStatement()
		{
			CreateTypeUdtStatement createTypeUdtStatement = base.FragmentFactory.CreateFragment<CreateTypeUdtStatement>();
			IToken token = this.LT(1);
			this.match(175);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTypeUdtStatement, token);
				base.ThrowPartialAstIfPhaseOne(createTypeUdtStatement);
			}
			AssemblyName assemblyName = this.assemblyName();
			if (this.inputState.guessing == 0)
			{
				createTypeUdtStatement.AssemblyName = assemblyName;
			}
			return createTypeUdtStatement;
		}

		// Token: 0x0600195C RID: 6492 RVA: 0x000E0894 File Offset: 0x000DEA94
		public NullableConstraintDefinition nullableConstraint()
		{
			NullableConstraintDefinition nullableConstraintDefinition = base.FragmentFactory.CreateFragment<NullableConstraintDefinition>();
			bool flag = this.nullNotNull(nullableConstraintDefinition);
			if (this.inputState.guessing == 0)
			{
				nullableConstraintDefinition.Nullable = flag;
			}
			return nullableConstraintDefinition;
		}

		// Token: 0x0600195D RID: 6493 RVA: 0x000E08CC File Offset: 0x000DEACC
		public UserLoginOption userLoginOption()
		{
			UserLoginOption userLoginOption = base.FragmentFactory.CreateFragment<UserLoginOption>();
			int num = this.LA(1);
			if (num != 67 && num != 71)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "WITHOUT");
					TSql80ParserBaseInternal.Match(token2, "LOGIN");
					TSql80ParserBaseInternal.UpdateTokenInfo(userLoginOption, token2);
					userLoginOption.UserLoginOptionType = UserLoginOptionType.WithoutLogin;
				}
			}
			else
			{
				int num2 = this.LA(1);
				if (num2 != 67)
				{
					if (num2 != 71)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(71);
				}
				else
				{
					this.match(67);
				}
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "ASYMMETRIC");
						userLoginOption.UserLoginOptionType = UserLoginOptionType.AsymmetricKey;
					}
				}
				else
				{
					if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token4 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						userLoginOption.UserLoginOptionType = UserLoginOptionHelper.Instance.ParseOption(token4);
					}
				}
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					userLoginOption.Identifier = identifier;
				}
			}
			return userLoginOption;
		}

		// Token: 0x0600195E RID: 6494 RVA: 0x000E0AAC File Offset: 0x000DECAC
		public void createUserDefaultSchemaOpt(CreateUserStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "DEFAULT_SCHEMA");
					IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
					identifierPrincipalOption.OptionKind = PrincipalOptionKind.DefaultSchema;
					identifierPrincipalOption.Identifier = identifier;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(vParent, vParent.UserOptions, identifierPrincipalOption);
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x0600195F RID: 6495 RVA: 0x000E0B84 File Offset: 0x000DED84
		public AlterApplicationRoleStatement alterApplicationRoleStatement()
		{
			AlterApplicationRoleStatement alterApplicationRoleStatement = base.FragmentFactory.CreateFragment<AlterApplicationRoleStatement>();
			this.applicationRoleStatement(alterApplicationRoleStatement, false);
			return alterApplicationRoleStatement;
		}

		// Token: 0x06001960 RID: 6496 RVA: 0x000E0BA8 File Offset: 0x000DEDA8
		public AlterAssemblyStatement alterAssemblyStatement()
		{
			AlterAssemblyStatement alterAssemblyStatement = base.FragmentFactory.CreateFragment<AlterAssemblyStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
				alterAssemblyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterAssemblyStatement);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0310;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0310;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0310;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								goto IL_0310;
							default:
								if (num == 28)
								{
									goto IL_0310;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						goto IL_0310;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_0310;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 71:
							{
								ScalarExpression scalarExpression = this.alterAssemblyFromClause();
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(alterAssemblyStatement, alterAssemblyStatement.Parameters, scalarExpression);
									flag = true;
									goto IL_0310;
								}
								goto IL_0310;
							}
							case 74:
							case 75:
								goto IL_0310;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0310;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						goto IL_0310;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0310;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0310;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0310;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_0310;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_0310;
				default:
					if (num == 191)
					{
						goto IL_0310;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0310;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0310;
				default:
					if (num == 232)
					{
						goto IL_0310;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0310:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.alterAssemblyWith(alterAssemblyStatement);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			bool flag2 = false;
			if (this.LA(1) == 54 && this.LA(2) == 65)
			{
				int num2 = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(54);
					this.match(65);
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(num2);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				this.alterAssemblyDropFile(alterAssemblyStatement);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 4 && this.LA(2) == 65)
			{
				this.alterAssemblyAddFile(alterAssemblyStatement);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0 && !flag)
			{
				throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(identifier);
			}
			return alterAssemblyStatement;
		}

		// Token: 0x06001961 RID: 6497 RVA: 0x000E1084 File Offset: 0x000DF284
		public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement()
		{
			AlterAsymmetricKeyStatement alterAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<AlterAsymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				alterAsymmetricKeyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterAsymmetricKeyStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "REMOVE");
				}
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					IToken token4 = this.LT(1);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "PRIVATE");
						alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.RemovePrivateKey;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token4);
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 111)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token5 = this.LT(1);
					this.match(232);
					IToken token6 = this.LT(1);
					this.match(111);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "ATTESTED");
						alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.RemoveAttestedOption;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token6);
					}
				}
			}
			else if (this.LA(1) == 171)
			{
				this.match(171);
				IToken token7 = this.LT(1);
				this.match(232);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token7, "PRIVATE");
					alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.WithPrivateKey;
				}
				this.match(191);
				this.passwordChangeOption(alterAsymmetricKeyStatement);
				while (this.LA(1) == 198)
				{
					this.match(198);
					this.passwordChangeOption(alterAsymmetricKeyStatement);
				}
				IToken token8 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token8);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 18)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.LT(1);
				this.match(232);
				this.match(18);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					alterAsymmetricKeyStatement.AttestedBy = literal;
					alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.AttestedBy;
				}
			}
			return alterAsymmetricKeyStatement;
		}

		// Token: 0x06001962 RID: 6498 RVA: 0x000E135C File Offset: 0x000DF55C
		public AlterAuthorizationStatement alterAuthorizationStatement()
		{
			AlterAuthorizationStatement alterAuthorizationStatement = base.FragmentFactory.CreateFragment<AlterAuthorizationStatement>();
			this.match(11);
			SecurityTargetObject securityTargetObject = this.authorizationTargetObject();
			if (this.inputState.guessing == 0)
			{
				alterAuthorizationStatement.SecurityTargetObject = securityTargetObject;
			}
			this.match(151);
			int num = this.LA(1);
			if (num != 139)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						alterAuthorizationStatement.PrincipalName = identifier;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(139);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "OWNER");
					TSql80ParserBaseInternal.UpdateTokenInfo(alterAuthorizationStatement, token);
					alterAuthorizationStatement.ToSchemaOwner = true;
				}
			}
			return alterAuthorizationStatement;
		}

		// Token: 0x06001963 RID: 6499 RVA: 0x000E1448 File Offset: 0x000DF648
		public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement()
		{
			AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<AlterRemoteServiceBindingStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOTE");
				TSql80ParserBaseInternal.Match(token2, "SERVICE");
				TSql80ParserBaseInternal.Match(token3, "BINDING");
				alterRemoteServiceBindingStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterRemoteServiceBindingStatement);
			}
			this.match(171);
			int num = this.LA(1);
			RemoteServiceBindingOption remoteServiceBindingOption;
			if (num == 163)
			{
				remoteServiceBindingOption = this.bindingUserOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								return alterRemoteServiceBindingStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return alterRemoteServiceBindingStatement;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								return alterRemoteServiceBindingStatement;
							default:
								if (num2 == 28)
								{
									return alterRemoteServiceBindingStatement;
								}
								switch (num2)
								{
								case 33:
								case 35:
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return alterRemoteServiceBindingStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return alterRemoteServiceBindingStatement;
							default:
								if (num2 == 82)
								{
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						return alterRemoteServiceBindingStatement;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 == 106 || num2 == 119)
						{
							return alterRemoteServiceBindingStatement;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return alterRemoteServiceBindingStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterRemoteServiceBindingStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterRemoteServiceBindingStatement;
							case 168:
							case 169:
								break;
							default:
								if (num2 == 176)
								{
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					switch (num2)
					{
					case 180:
					case 181:
						return alterRemoteServiceBindingStatement;
					default:
						if (num2 == 191)
						{
							return alterRemoteServiceBindingStatement;
						}
						if (num2 == 198)
						{
							this.match(198);
							remoteServiceBindingOption = this.bindingAnonymousOption();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
								return alterRemoteServiceBindingStatement;
							}
							return alterRemoteServiceBindingStatement;
						}
						break;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return alterRemoteServiceBindingStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return alterRemoteServiceBindingStatement;
					default:
						if (num2 == 232)
						{
							return alterRemoteServiceBindingStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			remoteServiceBindingOption = this.bindingAnonymousOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
			}
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 35)
				{
					if (num3 <= 17)
					{
						if (num3 == 1)
						{
							return alterRemoteServiceBindingStatement;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return alterRemoteServiceBindingStatement;
						case 5:
							break;
						default:
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 22:
						case 23:
							return alterRemoteServiceBindingStatement;
						default:
							if (num3 == 28)
							{
								return alterRemoteServiceBindingStatement;
							}
							switch (num3)
							{
							case 33:
							case 35:
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterRemoteServiceBindingStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							return alterRemoteServiceBindingStatement;
						default:
							if (num3 == 82)
							{
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					return alterRemoteServiceBindingStatement;
				}
			}
			else if (num3 <= 176)
			{
				if (num3 <= 144)
				{
					if (num3 == 106 || num3 == 119)
					{
						return alterRemoteServiceBindingStatement;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterRemoteServiceBindingStatement;
					}
				}
				else
				{
					switch (num3)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return alterRemoteServiceBindingStatement;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num3)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return alterRemoteServiceBindingStatement;
						case 168:
						case 169:
							break;
						default:
							if (num3 == 176)
							{
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 198)
			{
				switch (num3)
				{
				case 180:
				case 181:
					return alterRemoteServiceBindingStatement;
				default:
					if (num3 == 191)
					{
						return alterRemoteServiceBindingStatement;
					}
					if (num3 == 198)
					{
						this.match(198);
						remoteServiceBindingOption = this.bindingUserOption();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, remoteServiceBindingOption);
							return alterRemoteServiceBindingStatement;
						}
						return alterRemoteServiceBindingStatement;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return alterRemoteServiceBindingStatement;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return alterRemoteServiceBindingStatement;
				default:
					if (num3 == 232)
					{
						return alterRemoteServiceBindingStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001964 RID: 6500 RVA: 0x000E1B14 File Offset: 0x000DFD14
		public AlterCertificateStatement alterCertificateStatement()
		{
			AlterCertificateStatement alterCertificateStatement = base.FragmentFactory.CreateFragment<AlterCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				alterCertificateStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterCertificateStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "REMOVE");
				}
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					IToken token4 = this.LT(1);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "PRIVATE");
						alterCertificateStatement.Kind = AlterCertificateStatementKind.RemovePrivateKey;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterCertificateStatement, token4);
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 111)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token5 = this.LT(1);
					this.match(232);
					IToken token6 = this.LT(1);
					this.match(111);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "ATTESTED");
						alterCertificateStatement.Kind = AlterCertificateStatementKind.RemoveAttestedOption;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterCertificateStatement, token6);
					}
				}
			}
			else if (this.LA(1) == 171)
			{
				this.match(171);
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					this.privateKeySpec(alterCertificateStatement);
					if (this.inputState.guessing == 0)
					{
						alterCertificateStatement.Kind = AlterCertificateStatementKind.WithPrivateKey;
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 67)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.createCertificateActivityFlag(alterCertificateStatement);
					if (this.inputState.guessing == 0)
					{
						alterCertificateStatement.Kind = AlterCertificateStatementKind.WithActiveForBeginDialog;
					}
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 18)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token7 = this.LT(1);
				this.match(232);
				this.match(18);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token7, "ATTESTED");
					alterCertificateStatement.Kind = AlterCertificateStatementKind.AttestedBy;
					alterCertificateStatement.AttestedBy = literal;
				}
			}
			return alterCertificateStatement;
		}

		// Token: 0x06001965 RID: 6501 RVA: 0x000E1DE0 File Offset: 0x000DFFE0
		public AlterCredentialStatement alterCredentialStatement()
		{
			AlterCredentialStatement alterCredentialStatement = base.FragmentFactory.CreateFragment<AlterCredentialStatement>();
			this.credentialStatementBody(alterCredentialStatement);
			return alterCredentialStatement;
		}

		// Token: 0x06001966 RID: 6502 RVA: 0x000E1E04 File Offset: 0x000E0004
		public AlterEndpointStatement alterEndpointStatement()
		{
			AlterEndpointStatement alterEndpointStatement = base.FragmentFactory.CreateFragment<AlterEndpointStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENDPOINT");
				alterEndpointStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterEndpointStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				this.endpointOptions(alterEndpointStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_57_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_0332;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0332;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
								this.protocolInfo(alterEndpointStatement);
								goto IL_0332;
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_0332;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_0332;
						default:
							if (num == 28)
							{
								goto IL_0332;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0332;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0332;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num == 67)
						{
							goto IL_0332;
						}
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0332;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0332;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						goto IL_0332;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0332;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0332;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0332;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_0332;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_0332;
				default:
					if (num == 191)
					{
						goto IL_0332;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0332;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0332;
				default:
					if (num == 232)
					{
						goto IL_0332;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0332:
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							return alterEndpointStatement;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return alterEndpointStatement;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterEndpointStatement;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							return alterEndpointStatement;
						default:
							if (num2 == 28)
							{
								return alterEndpointStatement;
							}
							switch (num2)
							{
							case 33:
							case 35:
								return alterEndpointStatement;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterEndpointStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num2 == 67)
						{
							this.payloadInfo(alterEndpointStatement);
							return alterEndpointStatement;
						}
						switch (num2)
						{
						case 74:
						case 75:
							return alterEndpointStatement;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					return alterEndpointStatement;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 119)
				{
					if (num2 == 95 || num2 == 106 || num2 == 119)
					{
						return alterEndpointStatement;
					}
				}
				else
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterEndpointStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterEndpointStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterEndpointStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176)
				{
					return alterEndpointStatement;
				}
				switch (num2)
				{
				case 180:
				case 181:
					return alterEndpointStatement;
				default:
					if (num2 == 191)
					{
						return alterEndpointStatement;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return alterEndpointStatement;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return alterEndpointStatement;
				default:
					if (num2 == 232)
					{
						return alterEndpointStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001967 RID: 6503 RVA: 0x000E23E0 File Offset: 0x000E05E0
		public TSqlStatement alterFulltextStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FULLTEXT");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 84)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterFulltextCatalogStatement();
			}
			else
			{
				tsqlStatement = this.alterFulltextIndexStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06001968 RID: 6504 RVA: 0x000E2458 File Offset: 0x000E0658
		public AlterIndexStatement alterIndexStatement()
		{
			AlterIndexStatement alterIndexStatement = base.FragmentFactory.CreateFragment<AlterIndexStatement>();
			IndexAffectingStatement indexAffectingStatement = IndexAffectingStatement.AlterIndexSet;
			this.match(84);
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						alterIndexStatement.Name = identifier;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.All = true;
				}
			}
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				alterIndexStatement.OnName = schemaObjectName;
			}
			if (this.LA(1) == 142)
			{
				this.match(142);
				this.indexOptionList(indexAffectingStatement, alterIndexStatement.IndexOptions, alterIndexStatement);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.AlterIndexType = AlterIndexType.Set;
				}
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)) && base.NextTokenMatches("DISABLE"))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.AlterIndexType = AlterIndexType.Disable;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.AlterIndexType = AlterIndexTypeHelper.Instance.ParseOption(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token2);
				}
				if (this.LA(1) == 232 && this.LA(2) == 206)
				{
					PartitionSpecifier partitionSpecifier = this.partitionSpecifier();
					if (this.inputState.guessing == 0)
					{
						alterIndexStatement.Partition = partitionSpecifier;
					}
				}
				else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (this.inputState.guessing == 0)
				{
					indexAffectingStatement = TSql90ParserBaseInternal.GetAlterIndexStatementKind(alterIndexStatement);
				}
				if (this.LA(1) == 171 && this.LA(2) == 191)
				{
					this.match(171);
					this.indexOptionList(indexAffectingStatement, alterIndexStatement.IndexOptions, alterIndexStatement);
				}
				else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return alterIndexStatement;
		}

		// Token: 0x06001969 RID: 6505 RVA: 0x000E272C File Offset: 0x000E092C
		public AlterLoginStatement alterLoginStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOGIN");
			}
			int num = this.LA(1);
			AlterLoginStatement alterLoginStatement;
			if (num != 171)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				alterLoginStatement = this.alterLoginEnableDisable(identifier);
			}
			else
			{
				alterLoginStatement = this.alterLoginOptions(identifier);
			}
			return alterLoginStatement;
		}

		// Token: 0x0600196A RID: 6506 RVA: 0x000E27B0 File Offset: 0x000E09B0
		public AlterMasterKeyStatement alterMasterKeyStatement()
		{
			AlterMasterKeyStatement alterMasterKeyStatement = base.FragmentFactory.CreateFragment<AlterMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					if (this.LA(1) == 232 && this.LA(2) == 171)
					{
						IToken token2 = this.LT(1);
						this.match(232);
						this.match(171);
						IToken token3 = this.LT(1);
						this.match(232);
						this.match(18);
						IToken token4 = this.LT(1);
						this.match(232);
						this.match(206);
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "REGENERATE");
							TSql80ParserBaseInternal.Match(token3, "ENCRYPTION");
							TSql80ParserBaseInternal.Match(token4, "PASSWORD");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.Regenerate;
							alterMasterKeyStatement.Password = literal;
						}
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token5 = this.LT(1);
						this.match(232);
						IToken token6 = this.LT(1);
						this.match(232);
						this.match(171);
						IToken token7 = this.LT(1);
						this.match(232);
						this.match(18);
						IToken token8 = this.LT(1);
						this.match(232);
						this.match(206);
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token5, "FORCE");
							TSql80ParserBaseInternal.Match(token6, "REGENERATE");
							TSql80ParserBaseInternal.Match(token7, "ENCRYPTION");
							TSql80ParserBaseInternal.Match(token8, "PASSWORD");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.ForceRegenerate;
							alterMasterKeyStatement.Password = literal;
						}
					}
				}
				else
				{
					this.match(54);
					IToken token9 = this.LT(1);
					this.match(232);
					this.match(18);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token9, "ENCRYPTION");
					}
					if (this.LA(1) == 232 && this.LA(2) == 232)
					{
						IToken token10 = this.LT(1);
						this.match(232);
						IToken token11 = this.LT(1);
						this.match(232);
						IToken token12 = this.LT(1);
						this.match(91);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token10, "SERVICE");
							TSql80ParserBaseInternal.Match(token11, "MASTER");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.DropEncryptionByServiceMasterKey;
							TSql80ParserBaseInternal.UpdateTokenInfo(alterMasterKeyStatement, token12);
						}
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 206)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token13 = this.LT(1);
						this.match(232);
						this.match(206);
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token13, "PASSWORD");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.DropEncryptionByPassword;
							alterMasterKeyStatement.Password = literal;
						}
					}
				}
			}
			else
			{
				this.match(4);
				IToken token14 = this.LT(1);
				this.match(232);
				this.match(18);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token14, "ENCRYPTION");
				}
				if (this.LA(1) == 232 && this.LA(2) == 232)
				{
					IToken token15 = this.LT(1);
					this.match(232);
					IToken token16 = this.LT(1);
					this.match(232);
					IToken token17 = this.LT(1);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token15, "SERVICE");
						TSql80ParserBaseInternal.Match(token16, "MASTER");
						alterMasterKeyStatement.Option = AlterMasterKeyOption.AddEncryptionByServiceMasterKey;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterMasterKeyStatement, token17);
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 206)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token18 = this.LT(1);
					this.match(232);
					this.match(206);
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token18, "PASSWORD");
						alterMasterKeyStatement.Option = AlterMasterKeyOption.AddEncryptionByPassword;
						alterMasterKeyStatement.Password = literal;
					}
				}
			}
			return alterMasterKeyStatement;
		}

		// Token: 0x0600196B RID: 6507 RVA: 0x000E2CBC File Offset: 0x000E0EBC
		public AlterMessageTypeStatement alterMessageTypeStatement()
		{
			AlterMessageTypeStatement alterMessageTypeStatement = base.FragmentFactory.CreateFragment<AlterMessageTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MESSAGE");
				TSql80ParserBaseInternal.Match(token2, "TYPE");
				alterMessageTypeStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterMessageTypeStatement);
			}
			this.messageTypeValidation(alterMessageTypeStatement);
			return alterMessageTypeStatement;
		}

		// Token: 0x0600196C RID: 6508 RVA: 0x000E2D40 File Offset: 0x000E0F40
		public TSqlStatement alterPartitionStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 73)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterPartitionSchemeStatement();
			}
			else
			{
				tsqlStatement = this.alterPartitionFunctionStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x0600196D RID: 6509 RVA: 0x000E2DB8 File Offset: 0x000E0FB8
		public AlterQueueStatement alterQueueStatement()
		{
			AlterQueueStatement alterQueueStatement = base.FragmentFactory.CreateFragment<AlterQueueStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				alterQueueStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(alterQueueStatement);
			}
			this.queueOptionList(alterQueueStatement, true);
			return alterQueueStatement;
		}

		// Token: 0x0600196E RID: 6510 RVA: 0x000E2E1C File Offset: 0x000E101C
		public AlterRoleStatement alterRoleStatement()
		{
			AlterRoleStatement alterRoleStatement = base.FragmentFactory.CreateFragment<AlterRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				alterRoleStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterRoleStatement);
			}
			AlterRoleAction alterRoleAction = this.renameAlterRoleAction();
			if (this.inputState.guessing == 0)
			{
				alterRoleStatement.Action = alterRoleAction;
			}
			return alterRoleStatement;
		}

		// Token: 0x0600196F RID: 6511 RVA: 0x000E2E94 File Offset: 0x000E1094
		public AlterRouteStatement alterRouteStatement()
		{
			AlterRouteStatement alterRouteStatement = base.FragmentFactory.CreateFragment<AlterRouteStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROUTE");
				alterRouteStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterRouteStatement);
			}
			this.routeOptionList(alterRouteStatement);
			return alterRouteStatement;
		}

		// Token: 0x06001970 RID: 6512 RVA: 0x000E2EF8 File Offset: 0x000E10F8
		public AlterSchemaStatement alterSchemaStatement()
		{
			AlterSchemaStatement alterSchemaStatement = base.FragmentFactory.CreateFragment<AlterSchemaStatement>();
			this.match(139);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterSchemaStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterSchemaStatement);
			}
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TRANSFER");
			}
			if (this.LA(1) == 232 && this.LA(2) == 203)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(203);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "OBJECT"))
					{
						alterSchemaStatement.ObjectKind = SecurityObjectKind.Object;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "TYPE");
						alterSchemaStatement.ObjectKind = SecurityObjectKind.Type;
					}
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 139)
			{
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(139);
				IToken token4 = this.LT(1);
				this.match(232);
				this.match(203);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "XML");
					TSql80ParserBaseInternal.Match(token4, "COLLECTION");
					alterSchemaStatement.ObjectKind = SecurityObjectKind.XmlSchemaCollection;
				}
			}
			else if ((this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) || !TSql90ParserInternal.tokenSet_58_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
			if (this.inputState.guessing == 0)
			{
				alterSchemaStatement.ObjectName = schemaObjectName;
			}
			return alterSchemaStatement;
		}

		// Token: 0x06001971 RID: 6513 RVA: 0x000E30E8 File Offset: 0x000E12E8
		public TSqlStatement alterServiceStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
			}
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				tsqlStatement = this.alterServiceMasterKeyStatement();
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 105 && this.LA(2) != 191))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterServiceStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x06001972 RID: 6514 RVA: 0x000E3198 File Offset: 0x000E1398
		public AlterUserStatement alterUserStatement()
		{
			AlterUserStatement alterUserStatement = base.FragmentFactory.CreateFragment<AlterUserStatement>();
			this.match(163);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterUserStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterUserStatement);
			}
			this.match(171);
			PrincipalOption principalOption = this.userOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterUserStatement, alterUserStatement.UserOptions, principalOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				principalOption = this.userOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterUserStatement, alterUserStatement.UserOptions, principalOption);
				}
			}
			return alterUserStatement;
		}

		// Token: 0x06001973 RID: 6515 RVA: 0x000E3248 File Offset: 0x000E1448
		public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement()
		{
			AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<AlterXmlSchemaCollectionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(139);
			IToken token2 = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
				TSql80ParserBaseInternal.Match(token2, "COLLECTION");
				alterXmlSchemaCollectionStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(alterXmlSchemaCollectionStatement);
			}
			this.match(4);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				alterXmlSchemaCollectionStatement.Expression = scalarExpression;
			}
			return alterXmlSchemaCollectionStatement;
		}

		// Token: 0x06001974 RID: 6516 RVA: 0x000E32F4 File Offset: 0x000E14F4
		public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly)
		{
			ApplicationRoleOption applicationRoleOption = base.FragmentFactory.CreateFragment<ApplicationRoleOption>();
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PASSWORD"))
			{
				this.match(232);
				this.match(206);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					applicationRoleOption.OptionKind = ApplicationRoleOptionKind.Password;
					applicationRoleOption.Value = base.IdentifierOrValueExpression(literal);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					applicationRoleOption.OptionKind = ApplicationRoleOptionHelper.Instance.ParseOption(token);
					if (defaultSchemaAndPasswordOnly && applicationRoleOption.OptionKind != ApplicationRoleOptionKind.DefaultSchema)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					applicationRoleOption.Value = base.IdentifierOrValueExpression(identifier);
				}
			}
			return applicationRoleOption;
		}

		// Token: 0x06001975 RID: 6517 RVA: 0x000E3414 File Offset: 0x000E1614
		public ScalarExpression alterAssemblyFromClause()
		{
			this.match(71);
			return this.expression(ExpressionFlags.None);
		}

		// Token: 0x06001976 RID: 6518 RVA: 0x000E3434 File Offset: 0x000E1634
		public void alterAssemblyWith(AlterAssemblyStatement vParent)
		{
			int num = 0;
			this.match(171);
			AssemblyOption assemblyOption = this.alterAssemblyWithItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)assemblyOption.OptionKind, assemblyOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AssemblyOption>(vParent, vParent.Options, assemblyOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				assemblyOption = this.alterAssemblyWithItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)assemblyOption.OptionKind, assemblyOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AssemblyOption>(vParent, vParent.Options, assemblyOption);
				}
			}
		}

		// Token: 0x06001977 RID: 6519 RVA: 0x000E34C8 File Offset: 0x000E16C8
		public void alterAssemblyDropFile(AlterAssemblyStatement vParent)
		{
			this.match(54);
			this.match(65);
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.DropFiles, literal);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.DropFiles, literal);
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.IsDropAll = true;
					return;
				}
			}
		}

		// Token: 0x06001978 RID: 6520 RVA: 0x000E35A8 File Offset: 0x000E17A8
		public void alterAssemblyAddFile(AlterAssemblyStatement vParent)
		{
			this.match(4);
			this.match(65);
			this.match(71);
			AddFileSpec addFileSpec = this.alterAssemblyAddFileSpec();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AddFileSpec>(vParent, vParent.AddFiles, addFileSpec);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				addFileSpec = this.alterAssemblyAddFileSpec();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AddFileSpec>(vParent, vParent.AddFiles, addFileSpec);
				}
			}
		}

		// Token: 0x06001979 RID: 6521 RVA: 0x000E362C File Offset: 0x000E182C
		public AssemblyOption alterAssemblyWithItem()
		{
			AssemblyOption assemblyOption;
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				assemblyOption = this.assemblyPermissionSetOrVisibilityOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				assemblyOption = this.assemblyUncheckedDataOption();
			}
			return assemblyOption;
		}

		// Token: 0x0600197A RID: 6522 RVA: 0x000E3698 File Offset: 0x000E1898
		public AssemblyOption assemblyPermissionSetOrVisibilityOption()
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 103:
			case 105:
				return this.assemblyVisibilityOption(token);
			case 104:
				break;
			default:
				if (num == 232)
				{
					return this.assemblyPermissionSetOption(token);
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600197B RID: 6523 RVA: 0x000E3714 File Offset: 0x000E1914
		public AssemblyOption assemblyUncheckedDataOption()
		{
			AssemblyOption assemblyOption = base.FragmentFactory.CreateFragment<AssemblyOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "UNCHECKED");
				TSql80ParserBaseInternal.UpdateTokenInfo(assemblyOption, token);
				TSql80ParserBaseInternal.Match(token2, "DATA");
				assemblyOption.OptionKind = AssemblyOptionKind.UncheckedData;
				TSql80ParserBaseInternal.UpdateTokenInfo(assemblyOption, token2);
			}
			return assemblyOption;
		}

		// Token: 0x0600197C RID: 6524 RVA: 0x000E3790 File Offset: 0x000E1990
		public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility)
		{
			OnOffAssemblyOption onOffAssemblyOption = base.FragmentFactory.CreateFragment<OnOffAssemblyOption>();
			OptionState optionState = this.optionOnOff(onOffAssemblyOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tPermissionSetVisibility, "VISIBILITY");
				TSql80ParserBaseInternal.UpdateTokenInfo(onOffAssemblyOption, tPermissionSetVisibility);
				onOffAssemblyOption.OptionKind = AssemblyOptionKind.Visibility;
				onOffAssemblyOption.OptionState = optionState;
			}
			return onOffAssemblyOption;
		}

		// Token: 0x0600197D RID: 6525 RVA: 0x000E37E0 File Offset: 0x000E19E0
		public AddFileSpec alterAssemblyAddFileSpec()
		{
			AddFileSpec addFileSpec = base.FragmentFactory.CreateFragment<AddFileSpec>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				addFileSpec.File = scalarExpression;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return addFileSpec;
						}
						switch (num)
						{
						case 4:
						case 6:
							return addFileSpec;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
							{
								this.match(9);
								Literal literal = this.stringLiteral();
								if (this.inputState.guessing == 0)
								{
									addFileSpec.FileName = literal;
									return addFileSpec;
								}
								return addFileSpec;
							}
							case 12:
							case 13:
							case 15:
							case 17:
								return addFileSpec;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return addFileSpec;
						default:
							if (num == 28)
							{
								return addFileSpec;
							}
							switch (num)
							{
							case 33:
							case 35:
								return addFileSpec;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return addFileSpec;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return addFileSpec;
						default:
							if (num == 82)
							{
								return addFileSpec;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return addFileSpec;
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						return addFileSpec;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return addFileSpec;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return addFileSpec;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return addFileSpec;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return addFileSpec;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					return addFileSpec;
				default:
					if (num == 191 || num == 198)
					{
						return addFileSpec;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return addFileSpec;
				}
				switch (num)
				{
				case 219:
				case 220:
					return addFileSpec;
				default:
					if (num == 232)
					{
						return addFileSpec;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600197E RID: 6526 RVA: 0x000E3AC0 File Offset: 0x000E1CC0
		public AlterFullTextCatalogStatement alterFulltextCatalogStatement()
		{
			AlterFullTextCatalogStatement alterFullTextCatalogStatement = base.FragmentFactory.CreateFragment<AlterFullTextCatalogStatement>();
			this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterFullTextCatalogStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterFullTextCatalogStatement);
			}
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					this.match(171);
					FullTextCatalogOption fullTextCatalogOption = this.accentSensitivity();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextCatalogOption>(alterFullTextCatalogStatement, alterFullTextCatalogStatement.Options, fullTextCatalogOption);
						TSql80ParserBaseInternal.Match(token, "REBUILD");
						alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Rebuild;
					}
				}
				else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (this.inputState.guessing == 0)
				{
					if (alterFullTextCatalogStatement.Action == AlterFullTextCatalogAction.None)
					{
						if (TSql80ParserBaseInternal.TryMatch(token, "REORGANIZE"))
						{
							alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Reorganize;
						}
						else
						{
							TSql80ParserBaseInternal.Match(token, "REBUILD");
							alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Rebuild;
						}
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(alterFullTextCatalogStatement, token);
				}
			}
			else
			{
				this.match(9);
				IToken token2 = this.LT(1);
				this.match(47);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(alterFullTextCatalogStatement, token2);
					alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.AsDefault;
				}
			}
			return alterFullTextCatalogStatement;
		}

		// Token: 0x0600197F RID: 6527 RVA: 0x000E3C6C File Offset: 0x000E1E6C
		public AlterFullTextIndexStatement alterFulltextIndexStatement()
		{
			AlterFullTextIndexStatement alterFullTextIndexStatement = base.FragmentFactory.CreateFragment<AlterFullTextIndexStatement>();
			this.match(84);
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				alterFullTextIndexStatement.OnName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(alterFullTextIndexStatement);
			}
			AlterFullTextIndexAction alterFullTextIndexAction = this.alterFulltextIndexAction();
			if (this.inputState.guessing == 0)
			{
				alterFullTextIndexStatement.Action = alterFullTextIndexAction;
			}
			return alterFullTextIndexStatement;
		}

		// Token: 0x06001980 RID: 6528 RVA: 0x000E3CD4 File Offset: 0x000E1ED4
		public AlterFullTextIndexAction alterFulltextIndexAction()
		{
			int num = this.LA(1);
			AlterFullTextIndexAction alterFullTextIndexAction;
			if (num != 4)
			{
				if (num != 54)
				{
					if (num == 142)
					{
						alterFullTextIndexAction = this.setChangeTrackingAlterFulltextIndexAction();
					}
					else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)) && (base.NextTokenMatches("ENABLE") || base.NextTokenMatches("DISABLE")))
					{
						alterFullTextIndexAction = this.enableDisableAlterFulltextIndexAction();
					}
					else if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 160 || this.LA(2) == 232) && base.NextTokenMatches("START"))
					{
						alterFullTextIndexAction = this.startPopulationAlterFulltextIndexAction();
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						alterFullTextIndexAction = this.otherPopulationAlterFulltextIndexAction();
					}
				}
				else
				{
					alterFullTextIndexAction = this.dropAlterFulltextIndexAction();
				}
			}
			else
			{
				alterFullTextIndexAction = this.addAlterFulltextIndexAction();
			}
			return alterFullTextIndexAction;
		}

		// Token: 0x06001981 RID: 6529 RVA: 0x000E3DEC File Offset: 0x000E1FEC
		public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				simpleAlterFullTextIndexAction.ActionKind = TSql90ParserBaseInternal.EnableDisableMatcher<SimpleAlterFullTextIndexActionKind>(token, SimpleAlterFullTextIndexActionKind.Enable, SimpleAlterFullTextIndexActionKind.Disable);
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token);
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06001982 RID: 6530 RVA: 0x000E3E40 File Offset: 0x000E2040
		public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			this.match(142);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING");
			}
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "MANUAL"))
					{
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingManual;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "AUTO");
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingAuto;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingOff;
					TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token3);
				}
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06001983 RID: 6531 RVA: 0x000E3F40 File Offset: 0x000E2140
		public AddAlterFullTextIndexAction addAlterFulltextIndexAction()
		{
			AddAlterFullTextIndexAction addAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<AddAlterFullTextIndexAction>();
			this.match(4);
			this.match(191);
			FullTextIndexColumn fullTextIndexColumn = this.fulltextIndexColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(addAlterFullTextIndexAction, addAlterFullTextIndexAction.Columns, fullTextIndexColumn);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				fullTextIndexColumn = this.fulltextIndexColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(addAlterFullTextIndexAction, addAlterFullTextIndexAction.Columns, fullTextIndexColumn);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(addAlterFullTextIndexAction, token);
			}
			bool flag = this.populationOption(addAlterFullTextIndexAction);
			if (this.inputState.guessing == 0)
			{
				addAlterFullTextIndexAction.WithNoPopulation = flag;
			}
			return addAlterFullTextIndexAction;
		}

		// Token: 0x06001984 RID: 6532 RVA: 0x000E4010 File Offset: 0x000E2210
		public DropAlterFullTextIndexAction dropAlterFulltextIndexAction()
		{
			DropAlterFullTextIndexAction dropAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<DropAlterFullTextIndexAction>();
			this.match(54);
			this.match(191);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropAlterFullTextIndexAction, dropAlterFullTextIndexAction.Columns, identifier);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropAlterFullTextIndexAction, dropAlterFullTextIndexAction.Columns, identifier);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(dropAlterFullTextIndexAction, token);
			}
			bool flag = this.populationOption(dropAlterFullTextIndexAction);
			if (this.inputState.guessing == 0)
			{
				dropAlterFullTextIndexAction.WithNoPopulation = flag;
			}
			return dropAlterFullTextIndexAction;
		}

		// Token: 0x06001985 RID: 6533 RVA: 0x000E40E0 File Offset: 0x000E22E0
		public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "START");
			}
			int num = this.LA(1);
			if (num != 72)
			{
				if (num != 160)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "INCREMENTAL");
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartIncrementalPopulation;
					}
				}
				else
				{
					this.match(160);
					if (this.inputState.guessing == 0)
					{
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartUpdatePopulation;
					}
				}
			}
			else
			{
				this.match(72);
				if (this.inputState.guessing == 0)
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartFullPopulation;
				}
			}
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "POPULATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token3);
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06001986 RID: 6534 RVA: 0x000E4204 File Offset: 0x000E2404
		public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "STOP"))
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StopPopulation;
				}
				else if (TSql80ParserBaseInternal.TryMatch(token, "PAUSE"))
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.PausePopulation;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "RESUME");
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.ResumePopulation;
				}
				TSql80ParserBaseInternal.Match(token2, "POPULATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token2);
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06001987 RID: 6535 RVA: 0x000E42A8 File Offset: 0x000E24A8
		public bool populationOption(TSqlFragment vParent)
		{
			bool flag = false;
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "NO");
					TSql80ParserBaseInternal.Match(token2, "POPULATION");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					flag = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return flag;
		}

		// Token: 0x06001988 RID: 6536 RVA: 0x000E4370 File Offset: 0x000E2570
		public PartitionSpecifier partitionSpecifier()
		{
			PartitionSpecifier partitionSpecifier = base.FragmentFactory.CreateFragment<PartitionSpecifier>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
				partitionSpecifier.Number = scalarExpression;
			}
			return partitionSpecifier;
		}

		// Token: 0x06001989 RID: 6537 RVA: 0x000E43D4 File Offset: 0x000E25D4
		public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName)
		{
			AlterLoginEnableDisableStatement alterLoginEnableDisableStatement = base.FragmentFactory.CreateFragment<AlterLoginEnableDisableStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				alterLoginEnableDisableStatement.Name = vName;
				alterLoginEnableDisableStatement.IsEnable = TSql90ParserBaseInternal.EnableDisableMatcher<bool>(token, true, false);
				TSql80ParserBaseInternal.UpdateTokenInfo(alterLoginEnableDisableStatement, token);
				base.ThrowPartialAstIfPhaseOne(alterLoginEnableDisableStatement);
			}
			return alterLoginEnableDisableStatement;
		}

		// Token: 0x0600198A RID: 6538 RVA: 0x000E4434 File Offset: 0x000E2634
		public AlterLoginOptionsStatement alterLoginOptions(Identifier vName)
		{
			AlterLoginOptionsStatement alterLoginOptionsStatement = base.FragmentFactory.CreateFragment<AlterLoginOptionsStatement>();
			int num = 0;
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				alterLoginOptionsStatement.Name = vName;
				base.ThrowPartialAstIfPhaseOne(alterLoginOptionsStatement);
			}
			PrincipalOption principalOption = this.alterLoginParam();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterLoginOptionsStatement, alterLoginOptionsStatement.Options, principalOption);
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				principalOption = this.alterLoginParam();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterLoginOptionsStatement, alterLoginOptionsStatement.Options, principalOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
				}
			}
			return alterLoginOptionsStatement;
		}

		// Token: 0x0600198B RID: 6539 RVA: 0x000E44F0 File Offset: 0x000E26F0
		public PrincipalOption alterLoginParam()
		{
			PrincipalOption principalOption = null;
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				int num = this.LA(1);
				switch (num)
				{
				case 103:
				case 105:
					principalOption = this.onOffPrincipalOption(token);
					goto IL_012C;
				case 104:
					break;
				default:
					if (num != 224)
					{
						switch (num)
						{
						case 230:
						case 231:
							break;
						case 232:
						case 233:
						{
							Identifier identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
								if (TSql80ParserBaseInternal.TryMatch(token, "NAME"))
								{
									identifierPrincipalOption.OptionKind = PrincipalOptionKind.Name;
								}
								else
								{
									identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
								}
								identifierPrincipalOption.Identifier = identifier;
								principalOption = identifierPrincipalOption;
								goto IL_012C;
							}
							goto IL_012C;
						}
						default:
							goto IL_0119;
						}
					}
					principalOption = this.passwordAlterLoginOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "PASSWORD");
						goto IL_012C;
					}
					goto IL_012C;
				}
				IL_0119:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_012C:
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(principalOption, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NO");
					TSql80ParserBaseInternal.Match(token3, "CREDENTIAL");
					PrincipalOption principalOption2 = base.FragmentFactory.CreateFragment<PrincipalOption>();
					principalOption2.OptionKind = PrincipalOptionKind.NoCredential;
					TSql80ParserBaseInternal.UpdateTokenInfo(principalOption2, token3);
					principalOption = principalOption2;
				}
			}
			return principalOption;
		}

		// Token: 0x0600198C RID: 6540 RVA: 0x000E46E0 File Offset: 0x000E28E0
		public PasswordAlterPrincipalOption passwordAlterLoginOption()
		{
			PasswordAlterPrincipalOption passwordAlterPrincipalOption = base.FragmentFactory.CreateFragment<PasswordAlterPrincipalOption>();
			Literal literal = this.loginPassword();
			if (this.inputState.guessing == 0)
			{
				passwordAlterPrincipalOption.Password = literal;
				passwordAlterPrincipalOption.OptionKind = PrincipalOptionKind.Password;
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal2 = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "OLD_PASSWORD");
					passwordAlterPrincipalOption.OldPassword = literal2;
				}
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_41_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_59_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				while (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
				{
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql90ParserBaseInternal.RecognizeAlterLoginSecAdminPasswordOption(token2, passwordAlterPrincipalOption);
					}
				}
			}
			return passwordAlterPrincipalOption;
		}

		// Token: 0x0600198D RID: 6541 RVA: 0x000E4810 File Offset: 0x000E2A10
		public AlterPartitionFunctionStatement alterPartitionFunctionStatement()
		{
			AlterPartitionFunctionStatement alterPartitionFunctionStatement = base.FragmentFactory.CreateFragment<AlterPartitionFunctionStatement>();
			this.match(73);
			Identifier identifier = this.identifier();
			this.match(191);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				alterPartitionFunctionStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterPartitionFunctionStatement);
			}
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "SPLIT"))
				{
					alterPartitionFunctionStatement.IsSplit = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "MERGE");
					alterPartitionFunctionStatement.IsSplit = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionFunctionStatement, token);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(191);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "RANGE");
					alterPartitionFunctionStatement.Boundary = scalarExpression;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionFunctionStatement, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterPartitionFunctionStatement;
		}

		// Token: 0x0600198E RID: 6542 RVA: 0x000E497C File Offset: 0x000E2B7C
		public AlterPartitionSchemeStatement alterPartitionSchemeStatement()
		{
			AlterPartitionSchemeStatement alterPartitionSchemeStatement = base.FragmentFactory.CreateFragment<AlterPartitionSchemeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SCHEME");
				alterPartitionSchemeStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterPartitionSchemeStatement);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "NEXT");
				TSql80ParserBaseInternal.Match(token3, "USED");
				TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionSchemeStatement, token3);
			}
			if (this.LA(1) >= 230 && this.LA(1) <= 233 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					alterPartitionSchemeStatement.FileGroup = identifierOrValueExpression;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterPartitionSchemeStatement;
		}

		// Token: 0x0600198F RID: 6543 RVA: 0x000E4AB8 File Offset: 0x000E2CB8
		public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited)
		{
			ExecuteAsClause executeAsClause = base.FragmentFactory.CreateFragment<ExecuteAsClause>();
			switch (this.LA(1))
			{
			case 60:
			{
				IToken token = this.LT(1);
				this.match(60);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(executeAsClause, token);
				}
				break;
			}
			case 61:
			{
				IToken token2 = this.LT(1);
				this.match(61);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(executeAsClause, token2);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.match(9);
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					executeAsClause.ExecuteAsOption = ExecuteAsOption.String;
					executeAsClause.Literal = literal;
				}
				break;
			}
			case 232:
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					executeAsClause.ExecuteAsOption = ExecuteAsOptionHelper.Instance.ParseOption(token3);
					if ((vCallerProhibited && executeAsClause.ExecuteAsOption == ExecuteAsOption.Caller) || (vOwnerProhibited && executeAsClause.ExecuteAsOption == ExecuteAsOption.Owner))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
					}
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executeAsClause;
		}

		// Token: 0x06001990 RID: 6544 RVA: 0x000E4C08 File Offset: 0x000E2E08
		public void queueOption(QueueStatement vParent, bool vDropAccepted)
		{
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				QueueOption queueOption = this.stateQueueOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<QueueOption>(vParent, vParent.QueueOptions, queueOption);
					return;
				}
				return;
			}
			else
			{
				if (this.LA(1) == 232 && this.LA(2) == 191)
				{
					this.queueActivationOption(vParent, vDropAccepted);
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001991 RID: 6545 RVA: 0x000E4C8C File Offset: 0x000E2E8C
		public QueueStateOption stateQueueOption()
		{
			QueueStateOption queueStateOption = base.FragmentFactory.CreateFragment<QueueStateOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(queueStateOption);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "STATUS"))
				{
					queueStateOption.OptionKind = QueueOptionKind.Status;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "RETENTION");
					queueStateOption.OptionKind = QueueOptionKind.Retention;
				}
				queueStateOption.OptionState = optionState;
			}
			return queueStateOption;
		}

		// Token: 0x06001992 RID: 6546 RVA: 0x000E4D0C File Offset: 0x000E2F0C
		public void queueActivationOption(QueueStatement vParent, bool vDropAccepted)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ACTIVATION");
			}
			QueueOption queueOption = this.activationQueueOptionArgument(vDropAccepted, ref flag, ref flag2, ref flag3);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<QueueOption>(vParent, vParent.QueueOptions, queueOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				queueOption = this.activationQueueOptionArgument(vDropAccepted, ref flag, ref flag2, ref flag3);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<QueueOption>(vParent, vParent.QueueOptions, queueOption);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
				if (vParent is CreateQueueStatement && (flag || flag2 || flag3) && (!flag || !flag2 || !flag3))
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46069", vParent, TSqlParserResource.SQL46069Message, new string[0]);
				}
			}
		}

		// Token: 0x06001993 RID: 6547 RVA: 0x000E4E24 File Offset: 0x000E3024
		public QueueOption activationQueueOptionArgument(bool vDropAccepted, ref bool procedureName, ref bool maxQueueReaders, ref bool executeAs)
		{
			int num = this.LA(1);
			QueueOption queueOption;
			if (num != 54)
			{
				switch (num)
				{
				case 60:
				case 61:
					queueOption = this.executeAsQueueOptionArgument();
					if (this.inputState.guessing == 0)
					{
						executeAs = true;
					}
					break;
				default:
					if (num == 232)
					{
						IToken token = this.LT(1);
						this.match(232);
						this.match(206);
						int num2 = this.LA(1);
						if (num2 <= 200)
						{
							switch (num2)
							{
							case 103:
							case 105:
								return this.statusQueueOptionArgument(token);
							case 104:
								goto IL_00D7;
							default:
								if (num2 != 200)
								{
									goto IL_00D7;
								}
								break;
							}
						}
						else if (num2 != 221)
						{
							switch (num2)
							{
							case 232:
							case 233:
								break;
							default:
								goto IL_00D7;
							}
						}
						else
						{
							queueOption = this.maxQueueReadersQueueOptionArgument(token);
							if (this.inputState.guessing == 0)
							{
								maxQueueReaders = true;
								break;
							}
							break;
						}
						queueOption = this.procedureNameQueueOptionArgument(token);
						if (this.inputState.guessing == 0)
						{
							procedureName = true;
							break;
						}
						break;
						IL_00D7:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				queueOption = this.dropQueueOptionArgument(vDropAccepted);
			}
			return queueOption;
		}

		// Token: 0x06001994 RID: 6548 RVA: 0x000E4F54 File Offset: 0x000E3154
		public QueueStateOption statusQueueOptionArgument(IToken vStartToken)
		{
			QueueStateOption queueStateOption = base.FragmentFactory.CreateFragment<QueueStateOption>();
			OptionState optionState = this.optionOnOff(queueStateOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(vStartToken, "STATUS");
				TSql80ParserBaseInternal.UpdateTokenInfo(queueStateOption, vStartToken);
				queueStateOption.OptionState = optionState;
				queueStateOption.OptionKind = QueueOptionKind.ActivationStatus;
			}
			return queueStateOption;
		}

		// Token: 0x06001995 RID: 6549 RVA: 0x000E4FA4 File Offset: 0x000E31A4
		public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken)
		{
			QueueProcedureOption queueProcedureOption = base.FragmentFactory.CreateFragment<QueueProcedureOption>();
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(vStartToken, "PROCEDURE_NAME");
				TSql80ParserBaseInternal.UpdateTokenInfo(queueProcedureOption, vStartToken);
				queueProcedureOption.OptionValue = schemaObjectName;
				queueProcedureOption.OptionKind = QueueOptionKind.ActivationProcedureName;
			}
			return queueProcedureOption;
		}

		// Token: 0x06001996 RID: 6550 RVA: 0x000E4FF4 File Offset: 0x000E31F4
		public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken)
		{
			QueueValueOption queueValueOption = base.FragmentFactory.CreateFragment<QueueValueOption>();
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(vStartToken, "MAX_QUEUE_READERS");
				TSql80ParserBaseInternal.UpdateTokenInfo(queueValueOption, vStartToken);
				queueValueOption.OptionValue = literal;
				queueValueOption.OptionKind = QueueOptionKind.ActivationMaxQueueReaders;
			}
			return queueValueOption;
		}

		// Token: 0x06001997 RID: 6551 RVA: 0x000E5044 File Offset: 0x000E3244
		public QueueOption dropQueueOptionArgument(bool vDropAccepted)
		{
			QueueOption queueOption = base.FragmentFactory.CreateFragment<QueueOption>();
			IToken token = this.LT(1);
			this.match(54);
			if (this.inputState.guessing == 0)
			{
				if (!vDropAccepted)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(queueOption, token);
				queueOption.OptionKind = QueueOptionKind.ActivationDrop;
			}
			return queueOption;
		}

		// Token: 0x06001998 RID: 6552 RVA: 0x000E5098 File Offset: 0x000E3298
		public QueueExecuteAsOption executeAsQueueOptionArgument()
		{
			QueueExecuteAsOption queueExecuteAsOption = base.FragmentFactory.CreateFragment<QueueExecuteAsOption>();
			ExecuteAsClause executeAsClause = this.executeAsClause(true, false);
			if (this.inputState.guessing == 0)
			{
				queueExecuteAsOption.OptionValue = executeAsClause;
				queueExecuteAsOption.OptionKind = QueueOptionKind.ActivationExecuteAs;
			}
			return queueExecuteAsOption;
		}

		// Token: 0x06001999 RID: 6553 RVA: 0x000E50D8 File Offset: 0x000E32D8
		public RenameAlterRoleAction renameAlterRoleAction()
		{
			RenameAlterRoleAction renameAlterRoleAction = base.FragmentFactory.CreateFragment<RenameAlterRoleAction>();
			this.match(171);
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NAME");
				renameAlterRoleAction.NewName = identifier;
			}
			return renameAlterRoleAction;
		}

		// Token: 0x0600199A RID: 6554 RVA: 0x000E5144 File Offset: 0x000E3344
		public RouteOption routeOption()
		{
			RouteOption routeOption = base.FragmentFactory.CreateFragment<RouteOption>();
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LIFETIME"))
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					routeOption.OptionKind = RouteOptionKind.Lifetime;
					routeOption.Literal = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(routeOption, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					routeOption.OptionKind = RouteOptionHelper.Instance.ParseOption(token2);
					routeOption.Literal = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(routeOption, token2);
				}
			}
			return routeOption;
		}

		// Token: 0x0600199B RID: 6555 RVA: 0x000E525C File Offset: 0x000E345C
		public SchemaObjectName schemaObjectTwoPartName()
		{
			SchemaObjectName schemaObjectName = null;
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(200);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
				}
			}
			return schemaObjectName;
		}

		// Token: 0x0600199C RID: 6556 RVA: 0x000E52E8 File Offset: 0x000E34E8
		public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement()
		{
			AlterServiceMasterKeyStatement alterServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<AlterServiceMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				base.ThrowPartialAstIfPhaseOne(alterServiceMasterKeyStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("FORCE"))
			{
				IToken token2 = this.LT(1);
				this.match(232);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FORCE");
					TSql80ParserBaseInternal.Match(token3, "REGENERATE");
					alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.ForceRegenerate;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterServiceMasterKeyStatement, token3);
				}
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
			{
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "REGENERATE");
					alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.Regenerate;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterServiceMasterKeyStatement, token4);
				}
			}
			else
			{
				if (this.LA(1) != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				IToken token5 = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.stringLiteral();
				this.match(198);
				IToken token6 = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal2 = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token5, "OLD_ACCOUNT"))
					{
						TSql80ParserBaseInternal.Match(token6, "OLD_PASSWORD");
						alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.WithOldAccount;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token5, "NEW_ACCOUNT");
						TSql80ParserBaseInternal.Match(token6, "NEW_PASSWORD");
						alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.WithNewAccount;
					}
					alterServiceMasterKeyStatement.Account = literal;
					alterServiceMasterKeyStatement.Password = literal2;
				}
			}
			return alterServiceMasterKeyStatement;
		}

		// Token: 0x0600199D RID: 6557 RVA: 0x000E5524 File Offset: 0x000E3724
		public IdentifierPrincipalOption userOption()
		{
			IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifierPrincipalOption, token);
				identifierPrincipalOption.OptionKind = UserOptionHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				identifierPrincipalOption.Identifier = identifier;
			}
			return identifierPrincipalOption;
		}

		// Token: 0x0600199E RID: 6558 RVA: 0x000E5594 File Offset: 0x000E3794
		public void authorization(IAuthorization vParent)
		{
			this.match(11);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				vParent.Owner = identifier;
			}
		}

		// Token: 0x0600199F RID: 6559 RVA: 0x000E55C4 File Offset: 0x000E37C4
		public StatementList createSchemaElementList()
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			while (TSql90ParserInternal.tokenSet_60_.member(this.LA(1)))
			{
				TSqlStatement tsqlStatement = this.createSchemaElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
				}
			}
			return statementList;
		}

		// Token: 0x060019A0 RID: 6560 RVA: 0x000E5614 File Offset: 0x000E3814
		public TSqlStatement createSchemaElement()
		{
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 49)
			{
				if (num != 75)
				{
					if (num != 132)
					{
						if (this.LA(1) == 35 && this.LA(2) == 166)
						{
							tsqlStatement = this.createViewStatement();
						}
						else
						{
							if (this.LA(1) != 35 || this.LA(2) != 148)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							tsqlStatement = this.createTableStatement();
						}
					}
					else
					{
						tsqlStatement = this.revokeStatement90();
					}
				}
				else
				{
					tsqlStatement = this.grantStatement90();
				}
			}
			else
			{
				tsqlStatement = this.denyStatement90();
			}
			this.optSemicolons(tsqlStatement);
			return tsqlStatement;
		}

		// Token: 0x060019A1 RID: 6561 RVA: 0x000E56BC File Offset: 0x000E38BC
		public void functionStatementBody(FunctionStatementBody vResult, out bool vParseErrorOccurred)
		{
			this.match(73);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "TRIGGER");
				vResult.Name = schemaObjectName;
				TSql80ParserBaseInternal.CheckForTemporaryFunction(schemaObjectName);
				base.ThrowPartialAstIfPhaseOne(vResult);
			}
			this.match(191);
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.functionParameterList(vResult);
			}
			this.match(192);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RETURNS");
			}
			this.functionReturnTypeAndBody(vResult, out vParseErrorOccurred);
		}

		// Token: 0x060019A2 RID: 6562 RVA: 0x000E5784 File Offset: 0x000E3984
		public void functionParameterList(FunctionStatementBody vResult)
		{
			ProcedureParameter procedureParameter = this.functionParameter();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, procedureParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				procedureParameter = this.functionParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, procedureParameter);
				}
			}
		}

		// Token: 0x060019A3 RID: 6563 RVA: 0x000E57F0 File Offset: 0x000E39F0
		public void functionReturnTypeAndBody(FunctionStatementBody vParent, out bool vParseErrorOccurred)
		{
			vParseErrorOccurred = false;
			int num = this.LA(1);
			if (num != 53 && num != 96)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
				{
					DeclareTableVariableBody declareTableVariableBody = this.declareTableBody(IndexAffectingStatement.CreateOrAlterFunction);
					if (this.inputState.guessing == 0)
					{
						TableValuedFunctionReturnType tableValuedFunctionReturnType = base.FragmentFactory.CreateFragment<TableValuedFunctionReturnType>();
						tableValuedFunctionReturnType.DeclareTableVariableBody = declareTableVariableBody;
						vParent.ReturnType = tableValuedFunctionReturnType;
					}
					int num2 = this.LA(1);
					if (num2 != 9 && num2 != 13)
					{
						if (num2 != 171)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.functionAttributes(vParent);
					}
					int num3 = this.LA(1);
					if (num3 != 9)
					{
						if (num3 != 13)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					BeginEndBlockStatement beginEndBlockStatement = this.beginEndBlockStatement();
					if (this.inputState.guessing == 0)
					{
						base.SetFunctionBodyStatement(vParent, beginEndBlockStatement);
						vParseErrorOccurred = beginEndBlockStatement == null;
						return;
					}
					return;
				}
				default:
					if (this.LA(1) == 148 && (this.LA(2) == 9 || this.LA(2) == 131 || this.LA(2) == 171))
					{
						this.match(148);
						int num4 = this.LA(1);
						if (num4 != 9 && num4 != 131)
						{
							if (num4 != 171)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							this.functionAttributesNoExecuteAs(vParent);
						}
						int num5 = this.LA(1);
						if (num5 != 9)
						{
							if (num5 != 131)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(9);
						}
						this.match(131);
						SelectFunctionReturnType selectFunctionReturnType = this.functionReturnClauseRelational();
						if (this.inputState.guessing == 0)
						{
							vParent.ReturnType = selectFunctionReturnType;
							return;
						}
						return;
					}
					else
					{
						if (this.LA(1) != 148 || this.LA(2) != 191)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(148);
						DeclareTableVariableBody declareTableVariableBody = this.declareTableBodyMain(IndexAffectingStatement.CreateOrAlterFunction);
						if (this.inputState.guessing == 0)
						{
							TableValuedFunctionReturnType tableValuedFunctionReturnType2 = base.FragmentFactory.CreateFragment<TableValuedFunctionReturnType>();
							tableValuedFunctionReturnType2.DeclareTableVariableBody = declareTableVariableBody;
							vParent.ReturnType = tableValuedFunctionReturnType2;
						}
						int num6 = this.LA(1);
						if (num6 != 9)
						{
							if (num6 != 171)
							{
								if (num6 != 175)
								{
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
							}
							else
							{
								this.functionAttributes(vParent);
							}
						}
						int num7 = this.LA(1);
						if (num7 != 9)
						{
							if (num7 != 175)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(9);
						}
						MethodSpecifier methodSpecifier = this.methodSpecifier();
						this.optSemicolons(vParent);
						if (this.inputState.guessing == 0)
						{
							vParent.MethodSpecifier = methodSpecifier;
							return;
						}
						return;
					}
					break;
				}
			}
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				ScalarFunctionReturnType scalarFunctionReturnType = base.FragmentFactory.CreateFragment<ScalarFunctionReturnType>();
				scalarFunctionReturnType.DataType = dataTypeReference;
				vParent.ReturnType = scalarFunctionReturnType;
			}
			int num8 = this.LA(1);
			if (num8 <= 13)
			{
				if (num8 == 9 || num8 == 13)
				{
					goto IL_00B4;
				}
			}
			else
			{
				if (num8 == 171)
				{
					this.functionAttributes(vParent);
					goto IL_00B4;
				}
				if (num8 == 175)
				{
					goto IL_00B4;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00B4:
			int num9 = this.LA(1);
			if (num9 != 9)
			{
				if (num9 != 13 && num9 != 175)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
			}
			int num10 = this.LA(1);
			if (num10 != 13)
			{
				if (num10 != 175)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				MethodSpecifier methodSpecifier = this.methodSpecifier();
				this.optSemicolons(vParent);
				if (this.inputState.guessing == 0)
				{
					vParent.MethodSpecifier = methodSpecifier;
					return;
				}
			}
			else
			{
				BeginEndBlockStatement beginEndBlockStatement = this.beginEndBlockStatement();
				if (this.inputState.guessing == 0)
				{
					base.SetFunctionBodyStatement(vParent, beginEndBlockStatement);
					vParseErrorOccurred = beginEndBlockStatement == null;
					return;
				}
			}
		}

		// Token: 0x060019A4 RID: 6564 RVA: 0x000E5C24 File Offset: 0x000E3E24
		public ProcedureParameter functionParameter()
		{
			ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
			Identifier identifier = this.identifierVariable();
			int num = this.LA(1);
			if (num <= 53)
			{
				if (num == 9)
				{
					this.match(9);
					goto IL_0064;
				}
				if (num == 53)
				{
					goto IL_0064;
				}
			}
			else
			{
				if (num == 96)
				{
					goto IL_0064;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_0064;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0064:
			if (this.inputState.guessing == 0)
			{
				procedureParameter.VariableName = identifier;
			}
			this.scalarProcedureParameter(procedureParameter, false);
			return procedureParameter;
		}

		// Token: 0x060019A5 RID: 6565 RVA: 0x000E5CB4 File Offset: 0x000E3EB4
		public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed)
		{
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				vParent.DataType = dataTypeReference;
			}
			int num = this.LA(1);
			if (num <= 171)
			{
				if (num == 9 || num == 67 || num == 171)
				{
					goto IL_00A8;
				}
			}
			else if (num <= 198)
			{
				if (num == 192 || num == 198)
				{
					goto IL_00A8;
				}
			}
			else if (num != 206)
			{
				if (num == 232)
				{
					goto IL_00A8;
				}
			}
			else
			{
				this.match(206);
				ScalarExpression scalarExpression = this.possibleNegativeConstantOrIdentifierWithDefault();
				if (this.inputState.guessing == 0)
				{
					vParent.Value = scalarExpression;
					goto IL_00A8;
				}
				goto IL_00A8;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00A8:
			int num2 = this.LA(1);
			if (num2 <= 171)
			{
				if (num2 == 9 || num2 == 67 || num2 == 171)
				{
					return;
				}
			}
			else
			{
				if (num2 == 192 || num2 == 198)
				{
					return;
				}
				if (num2 == 232)
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing != 0)
					{
						return;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					TSql80ParserBaseInternal.Match(token, "OUTPUT", "OUT");
					if (outputAllowed)
					{
						vParent.Modifier = ParameterModifier.Output;
						return;
					}
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46039", token, TSqlParserResource.SQL46039Message, new string[0]);
					return;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060019A6 RID: 6566 RVA: 0x000E5E24 File Offset: 0x000E4024
		public void functionAttributes(FunctionStatementBody vParent)
		{
			int num = 0;
			this.match(171);
			FunctionOption functionOption = this.functionAttribute();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				functionOption = this.functionAttribute();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
				}
			}
		}

		// Token: 0x060019A7 RID: 6567 RVA: 0x000E5EB8 File Offset: 0x000E40B8
		public BeginEndBlockStatement beginEndBlockStatement()
		{
			BeginEndBlockStatement beginEndBlockStatement = base.FragmentFactory.CreateFragment<BeginEndBlockStatement>();
			bool flag = false;
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			IToken token = this.LT(1);
			this.match(13);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(beginEndBlockStatement, token);
			}
			while (this.LA(1) == 204)
			{
				this.LT(1);
				this.match(204);
			}
			int num = 0;
			while (TSql90ParserInternal.tokenSet_3_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_61_.member(this.LA(2)) && base.IsStatementIsNext())
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						statementList.Statements.Add(tsqlStatement);
					}
					else
					{
						flag = true;
						base.ThrowIfEndOfFileOrBatch();
					}
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(56);
			if (this.inputState.guessing == 0)
			{
				beginEndBlockStatement.StatementList = statementList;
				TSql80ParserBaseInternal.UpdateTokenInfo(beginEndBlockStatement, token2);
				if (flag)
				{
					beginEndBlockStatement = null;
				}
			}
			return beginEndBlockStatement;
		}

		// Token: 0x060019A8 RID: 6568 RVA: 0x000E5FE4 File Offset: 0x000E41E4
		public MethodSpecifier methodSpecifier()
		{
			MethodSpecifier methodSpecifier = base.FragmentFactory.CreateFragment<MethodSpecifier>();
			this.LT(1);
			this.match(175);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NAME");
			}
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				methodSpecifier.AssemblyName = identifier;
			}
			this.match(200);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				methodSpecifier.ClassName = identifier;
			}
			this.match(200);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				methodSpecifier.MethodName = identifier;
			}
			return methodSpecifier;
		}

		// Token: 0x060019A9 RID: 6569 RVA: 0x000E60A8 File Offset: 0x000E42A8
		public void functionAttributesNoExecuteAs(FunctionStatementBody vParent)
		{
			int num = 0;
			this.match(171);
			FunctionOption functionOption = this.functionAttributeNoExecuteAs();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				functionOption = this.functionAttributeNoExecuteAs();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
				}
			}
		}

		// Token: 0x060019AA RID: 6570 RVA: 0x000E613C File Offset: 0x000E433C
		public SelectFunctionReturnType functionReturnClauseRelational()
		{
			SelectFunctionReturnType selectFunctionReturnType = base.FragmentFactory.CreateFragment<SelectFunctionReturnType>();
			if ((this.LA(1) == 140 || this.LA(1) == 171 || this.LA(1) == 191) && TSql90ParserInternal.tokenSet_62_.member(this.LA(2)))
			{
				SelectStatement selectStatement = this.subqueryExpressionWithOptionalCTE();
				if (this.inputState.guessing == 0)
				{
					selectFunctionReturnType.SelectStatement = selectStatement;
				}
			}
			else
			{
				if (this.LA(1) != 191 || this.LA(2) != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(191);
				WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
				QueryExpression queryExpression = this.subqueryExpression();
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(selectFunctionReturnType, token);
					SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
					selectStatement.QueryExpression = queryExpression;
					selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
					selectFunctionReturnType.SelectStatement = selectStatement;
					TSql80ParserBaseInternal.UpdateTokenInfo(selectFunctionReturnType, token2);
				}
			}
			return selectFunctionReturnType;
		}

		// Token: 0x060019AB RID: 6571 RVA: 0x000E6268 File Offset: 0x000E4468
		public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType)
		{
			bool flag = false;
			Identifier identifier = this.identifierVariable();
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 148)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			this.match(148);
			DeclareTableVariableBody declareTableVariableBody = this.declareTableBodyMain(statementType);
			if (this.inputState.guessing == 0)
			{
				declareTableVariableBody.VariableName = identifier;
				declareTableVariableBody.AsDefined = flag;
			}
			return declareTableVariableBody;
		}

		// Token: 0x060019AC RID: 6572 RVA: 0x000E62F0 File Offset: 0x000E44F0
		public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType)
		{
			DeclareTableVariableBody declareTableVariableBody = base.FragmentFactory.CreateFragment<DeclareTableVariableBody>();
			this.match(191);
			TableDefinition tableDefinition = this.tableDefinition(statementType, null);
			if (this.inputState.guessing == 0)
			{
				declareTableVariableBody.Definition = tableDefinition;
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(declareTableVariableBody, token);
			}
			return declareTableVariableBody;
		}

		// Token: 0x060019AD RID: 6573 RVA: 0x000E635C File Offset: 0x000E455C
		public QueryExpression subqueryExpression()
		{
			BinaryQueryExpression binaryQueryExpression = null;
			QueryExpression queryExpression = this.subqueryExpressionUnit();
			while (this.LA(1) == 59 || this.LA(1) == 87 || this.LA(1) == 158)
			{
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression = base.FragmentFactory.CreateFragment<BinaryQueryExpression>();
					binaryQueryExpression.FirstQueryExpression = queryExpression;
				}
				int num = this.LA(1);
				if (num != 59)
				{
					if (num != 87)
					{
						if (num != 158)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(158);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Union;
						}
					}
					else
					{
						this.match(87);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Intersect;
						}
					}
				}
				else
				{
					this.match(59);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Except;
					}
				}
				int num2 = this.LA(1);
				if (num2 != 5)
				{
					if (num2 != 140 && num2 != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(5);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.All = true;
					}
				}
				queryExpression = this.subqueryExpressionUnit();
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression.SecondQueryExpression = queryExpression;
					queryExpression = binaryQueryExpression;
				}
			}
			return queryExpression;
		}

		// Token: 0x060019AE RID: 6574 RVA: 0x000E64BC File Offset: 0x000E46BC
		public FunctionOption functionAttribute()
		{
			int num = this.LA(1);
			FunctionOption functionOption;
			switch (num)
			{
			case 60:
			case 61:
				functionOption = this.functionExecuteAsOption();
				break;
			default:
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				functionOption = this.functionAttributeNoExecuteAs();
				break;
			}
			return functionOption;
		}

		// Token: 0x060019AF RID: 6575 RVA: 0x000E6510 File Offset: 0x000E4710
		public FunctionOption functionAttributeNoExecuteAs()
		{
			FunctionOption functionOption = base.FragmentFactory.CreateFragment<FunctionOption>();
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_63_.member(this.LA(2)))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					functionOption.OptionKind = TSql80ParserBaseInternal.ParseAlterCreateFunctionWithOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 100)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(100);
				this.match(105);
				this.match(100);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "RETURNS");
					TSql80ParserBaseInternal.Match(token3, "INPUT");
					functionOption.OptionKind = FunctionOptionKind.ReturnsNullOnNullInput;
					TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token3);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 105)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token4 = this.LT(1);
				this.match(232);
				this.match(105);
				this.match(100);
				IToken token5 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "CALLED");
					TSql80ParserBaseInternal.Match(token5, "INPUT");
					functionOption.OptionKind = FunctionOptionKind.CalledOnNullInput;
					TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token5);
				}
			}
			return functionOption;
		}

		// Token: 0x060019B0 RID: 6576 RVA: 0x000E66C0 File Offset: 0x000E48C0
		public ExecuteAsFunctionOption functionExecuteAsOption()
		{
			ExecuteAsFunctionOption executeAsFunctionOption = base.FragmentFactory.CreateFragment<ExecuteAsFunctionOption>();
			ExecuteAsClause executeAsClause = this.executeAsClause(false, false);
			if (this.inputState.guessing == 0)
			{
				executeAsFunctionOption.OptionKind = FunctionOptionKind.ExecuteAs;
				executeAsFunctionOption.ExecuteAs = executeAsClause;
			}
			return executeAsFunctionOption;
		}

		// Token: 0x060019B1 RID: 6577 RVA: 0x000E6700 File Offset: 0x000E4900
		public void identifierColumnList(TSqlFragment vParent, IList<ColumnReferenceExpression> columns)
		{
			this.match(191);
			ColumnReferenceExpression columnReferenceExpression = this.identifierColumnReferenceExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, columnReferenceExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnReferenceExpression = this.identifierColumnReferenceExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, columnReferenceExpression);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060019B2 RID: 6578 RVA: 0x000E6794 File Offset: 0x000E4994
		public StatisticsOption createStatisticsStatementWithOption(ref bool isConflictingOption)
		{
			StatisticsOption statisticsOption;
			if (this.LA(1) == 232 && this.LA(2) == 221)
			{
				statisticsOption = this.sampleStatisticsOption(ref isConflictingOption);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				statisticsOption = this.statsStreamStatisticsOption();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				statisticsOption = this.simpleStatisticsOption(ref isConflictingOption);
			}
			return statisticsOption;
		}

		// Token: 0x060019B3 RID: 6579 RVA: 0x000E682C File Offset: 0x000E4A2C
		public LiteralStatisticsOption sampleStatisticsOption(ref bool isConflictingOption)
		{
			LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
			IToken token = this.LT(1);
			this.match(232);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SAMPLE");
				if (isConflictingOption)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message, new string[0]);
				}
				else
				{
					isConflictingOption = true;
				}
				literalStatisticsOption.Literal = literal;
			}
			int num = this.LA(1);
			if (num != 116)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token2);
					literalStatisticsOption.OptionKind = TSql80ParserBaseInternal.ParseSampleOptionsWithOption(token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(116);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token3);
					literalStatisticsOption.OptionKind = StatisticsOptionKind.SamplePercent;
				}
			}
			return literalStatisticsOption;
		}

		// Token: 0x060019B4 RID: 6580 RVA: 0x000E6934 File Offset: 0x000E4B34
		public LiteralStatisticsOption statsStreamStatisticsOption()
		{
			LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.binary();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "STATS_STREAM");
				literalStatisticsOption.OptionKind = StatisticsOptionKind.StatsStream;
				literalStatisticsOption.Literal = literal;
			}
			return literalStatisticsOption;
		}

		// Token: 0x060019B5 RID: 6581 RVA: 0x000E699C File Offset: 0x000E4B9C
		public StatisticsOption simpleStatisticsOption(ref bool isConflictingOption)
		{
			StatisticsOption statisticsOption = base.FragmentFactory.CreateFragment<StatisticsOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "FULLSCAN"))
				{
					if (isConflictingOption)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message, new string[0]);
					}
					else
					{
						isConflictingOption = true;
					}
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token);
				statisticsOption.OptionKind = TSql80ParserBaseInternal.ParseCreateStatisticsWithOption(token);
			}
			return statisticsOption;
		}

		// Token: 0x060019B6 RID: 6582 RVA: 0x000E6A18 File Offset: 0x000E4C18
		public void columnNameList(TSqlFragment vParent, IList<Identifier> columnNames)
		{
			this.match(191);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(vParent, columnNames, identifier);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(vParent, columnNames, identifier);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060019B7 RID: 6583 RVA: 0x000E6AAC File Offset: 0x000E4CAC
		public StatisticsOption updateStatisticsStatementWithOption(ref bool isConflictingOption)
		{
			StatisticsOption statisticsOption;
			if (this.LA(1) == 232 && this.LA(2) == 221)
			{
				statisticsOption = this.sampleStatisticsOption(ref isConflictingOption);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("STATS_STREAM"))
			{
				statisticsOption = this.statsStreamStatisticsOption();
			}
			else if ((this.LA(1) == 135 || this.LA(1) == 232) && this.LA(2) == 206)
			{
				statisticsOption = this.updateStatisticsLiteralOption();
			}
			else
			{
				if ((this.LA(1) != 5 && this.LA(1) != 84 && this.LA(1) != 232) || !TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				statisticsOption = this.updateStatisticsSimpleOption(ref isConflictingOption);
			}
			return statisticsOption;
		}

		// Token: 0x060019B8 RID: 6584 RVA: 0x000E6BA0 File Offset: 0x000E4DA0
		public LiteralStatisticsOption updateStatisticsLiteralOption()
		{
			LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
			int num = this.LA(1);
			if (num != 135)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "PAGECOUNT");
					literalStatisticsOption.OptionKind = StatisticsOptionKind.PageCount;
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token);
					literalStatisticsOption.Literal = literal;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(135);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token2);
					literalStatisticsOption.OptionKind = StatisticsOptionKind.RowCount;
					literalStatisticsOption.Literal = literal;
				}
			}
			return literalStatisticsOption;
		}

		// Token: 0x060019B9 RID: 6585 RVA: 0x000E6C8C File Offset: 0x000E4E8C
		public StatisticsOption updateStatisticsSimpleOption(ref bool isConflictingOption)
		{
			StatisticsOption statisticsOption = base.FragmentFactory.CreateFragment<StatisticsOption>();
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 84)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.TryMatch(token, "FULLSCAN"))
						{
							if (isConflictingOption)
							{
								TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message, new string[0]);
							}
							else
							{
								isConflictingOption = true;
							}
						}
						TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token);
						statisticsOption.OptionKind = StatisticsOptionHelper.Instance.ParseOption(token);
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(84);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token2);
						statisticsOption.OptionKind = StatisticsOptionKind.Index;
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token3);
					statisticsOption.OptionKind = StatisticsOptionKind.All;
				}
			}
			return statisticsOption;
		}

		// Token: 0x060019BA RID: 6586 RVA: 0x000E6DA8 File Offset: 0x000E4FA8
		public KillStatement killStatement()
		{
			KillStatement killStatement = base.FragmentFactory.CreateFragment<KillStatement>();
			int num = this.LA(1);
			ScalarExpression scalarExpression;
			if (num != 199 && num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
					scalarExpression = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				scalarExpression = this.signedInteger();
			}
			if (this.inputState.guessing == 0)
			{
				killStatement.Parameter = scalarExpression;
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "STATUSONLY");
					killStatement.WithStatusOnly = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(killStatement, token);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return killStatement;
		}

		// Token: 0x060019BB RID: 6587 RVA: 0x000E6EC8 File Offset: 0x000E50C8
		public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement()
		{
			KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement = base.FragmentFactory.CreateFragment<KillQueryNotificationSubscriptionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUERY");
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "NOTIFICATION");
			}
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "SUBSCRIPTION");
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 221)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					killQueryNotificationSubscriptionStatement.SubscriptionId = literal;
				}
			}
			else
			{
				IToken token4 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					killQueryNotificationSubscriptionStatement.All = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(killQueryNotificationSubscriptionStatement, token4);
				}
			}
			return killQueryNotificationSubscriptionStatement;
		}

		// Token: 0x060019BC RID: 6588 RVA: 0x000E6FE8 File Offset: 0x000E51E8
		public KillStatsJobStatement killStatsJobStatement()
		{
			KillStatsJobStatement killStatsJobStatement = base.FragmentFactory.CreateFragment<KillStatsJobStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "STATS");
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "JOB");
			}
			ScalarExpression scalarExpression = this.signedInteger();
			if (this.inputState.guessing == 0)
			{
				killStatsJobStatement.JobId = scalarExpression;
			}
			return killStatsJobStatement;
		}

		// Token: 0x060019BD RID: 6589 RVA: 0x000E7078 File Offset: 0x000E5278
		public Permission permission()
		{
			Permission permission = base.FragmentFactory.CreateFragment<Permission>();
			int num = 0;
			while (TSql90ParserInternal.tokenSet_36_.member(this.LA(1)))
			{
				Identifier identifier = this.securityStatementPermission();
				if (this.inputState.guessing == 0)
				{
					if (permission.Identifiers.Count >= 5)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(identifier);
					}
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(permission, permission.Identifiers, identifier);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num2 = this.LA(1);
			if (num2 <= 105)
			{
				if (num2 == 71 || num2 == 105)
				{
					return permission;
				}
			}
			else
			{
				if (num2 == 151)
				{
					return permission;
				}
				if (num2 == 191)
				{
					this.columnNameList(permission, permission.Columns);
					return permission;
				}
				if (num2 == 198)
				{
					return permission;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060019BE RID: 6590 RVA: 0x000E7154 File Offset: 0x000E5354
		public Identifier securityStatementPermission()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			TSql80ParserBaseInternal.UpdateTokenInfo(identifier, this.LT(1));
			identifier.SetUnquotedIdentifier(this.LT(1).getText());
			switch (this.LA(1))
			{
			case 4:
				this.match(4);
				return identifier;
			case 5:
				this.match(5);
				return identifier;
			case 6:
				this.match(6);
				return identifier;
			case 7:
				this.match(7);
				return identifier;
			case 8:
				this.match(8);
				return identifier;
			case 9:
				this.match(9);
				return identifier;
			case 10:
				this.match(10);
				return identifier;
			case 11:
				this.match(11);
				return identifier;
			case 12:
				this.match(12);
				return identifier;
			case 13:
				this.match(13);
				return identifier;
			case 14:
				this.match(14);
				return identifier;
			case 15:
				this.match(15);
				return identifier;
			case 16:
				this.match(16);
				return identifier;
			case 17:
				this.match(17);
				return identifier;
			case 18:
				this.match(18);
				return identifier;
			case 19:
				this.match(19);
				return identifier;
			case 20:
				this.match(20);
				return identifier;
			case 21:
				this.match(21);
				return identifier;
			case 22:
				this.match(22);
				return identifier;
			case 23:
				this.match(23);
				return identifier;
			case 24:
				this.match(24);
				return identifier;
			case 25:
				this.match(25);
				return identifier;
			case 26:
				this.match(26);
				return identifier;
			case 27:
				this.match(27);
				return identifier;
			case 28:
				this.match(28);
				return identifier;
			case 29:
				this.match(29);
				return identifier;
			case 30:
				this.match(30);
				return identifier;
			case 31:
				this.match(31);
				return identifier;
			case 32:
				this.match(32);
				return identifier;
			case 33:
				this.match(33);
				return identifier;
			case 34:
				this.match(34);
				return identifier;
			case 35:
				this.match(35);
				return identifier;
			case 36:
				this.match(36);
				return identifier;
			case 37:
				this.match(37);
				return identifier;
			case 38:
				this.match(38);
				return identifier;
			case 39:
				this.match(39);
				return identifier;
			case 40:
				this.match(40);
				return identifier;
			case 41:
				this.match(41);
				return identifier;
			case 42:
				this.match(42);
				return identifier;
			case 43:
				this.match(43);
				return identifier;
			case 44:
				this.match(44);
				return identifier;
			case 45:
				this.match(45);
				return identifier;
			case 46:
				this.match(46);
				return identifier;
			case 47:
				this.match(47);
				return identifier;
			case 48:
				this.match(48);
				return identifier;
			case 49:
				this.match(49);
				return identifier;
			case 50:
				this.match(50);
				return identifier;
			case 51:
				this.match(51);
				return identifier;
			case 52:
				this.match(52);
				return identifier;
			case 53:
				this.match(53);
				return identifier;
			case 54:
				this.match(54);
				return identifier;
			case 55:
				this.match(55);
				return identifier;
			case 56:
				this.match(56);
				return identifier;
			case 57:
				this.match(57);
				return identifier;
			case 58:
				this.match(58);
				return identifier;
			case 59:
				this.match(59);
				return identifier;
			case 60:
				this.match(60);
				return identifier;
			case 61:
				this.match(61);
				return identifier;
			case 62:
				this.match(62);
				return identifier;
			case 63:
				this.match(63);
				return identifier;
			case 64:
				this.match(64);
				return identifier;
			case 65:
				this.match(65);
				return identifier;
			case 66:
				this.match(66);
				return identifier;
			case 67:
				this.match(67);
				return identifier;
			case 68:
				this.match(68);
				return identifier;
			case 69:
				this.match(69);
				return identifier;
			case 70:
				this.match(70);
				return identifier;
			case 72:
				this.match(72);
				return identifier;
			case 73:
				this.match(73);
				return identifier;
			case 74:
				this.match(74);
				return identifier;
			case 76:
				this.match(76);
				return identifier;
			case 77:
				this.match(77);
				return identifier;
			case 78:
				this.match(78);
				return identifier;
			case 79:
				this.match(79);
				return identifier;
			case 80:
				this.match(80);
				return identifier;
			case 81:
				this.match(81);
				return identifier;
			case 82:
				this.match(82);
				return identifier;
			case 83:
				this.match(83);
				return identifier;
			case 84:
				this.match(84);
				return identifier;
			case 85:
				this.match(85);
				return identifier;
			case 86:
				this.match(86);
				return identifier;
			case 87:
				this.match(87);
				return identifier;
			case 88:
				this.match(88);
				return identifier;
			case 89:
				this.match(89);
				return identifier;
			case 90:
				this.match(90);
				return identifier;
			case 91:
				this.match(91);
				return identifier;
			case 92:
				this.match(92);
				return identifier;
			case 93:
				this.match(93);
				return identifier;
			case 94:
				this.match(94);
				return identifier;
			case 95:
				this.match(95);
				return identifier;
			case 96:
				this.match(96);
				return identifier;
			case 97:
				this.match(97);
				return identifier;
			case 98:
				this.match(98);
				return identifier;
			case 99:
				this.match(99);
				return identifier;
			case 100:
				this.match(100);
				return identifier;
			case 101:
				this.match(101);
				return identifier;
			case 102:
				this.match(102);
				return identifier;
			case 103:
				this.match(103);
				return identifier;
			case 104:
				this.match(104);
				return identifier;
			case 106:
				this.match(106);
				return identifier;
			case 107:
				this.match(107);
				return identifier;
			case 108:
				this.match(108);
				return identifier;
			case 109:
				this.match(109);
				return identifier;
			case 110:
				this.match(110);
				return identifier;
			case 111:
				this.match(111);
				return identifier;
			case 112:
				this.match(112);
				return identifier;
			case 113:
				this.match(113);
				return identifier;
			case 114:
				this.match(114);
				return identifier;
			case 115:
				this.match(115);
				return identifier;
			case 116:
				this.match(116);
				return identifier;
			case 117:
				this.match(117);
				return identifier;
			case 118:
				this.match(118);
				return identifier;
			case 119:
				this.match(119);
				return identifier;
			case 120:
				this.match(120);
				return identifier;
			case 121:
				this.match(121);
				return identifier;
			case 122:
				this.match(122);
				return identifier;
			case 123:
				this.match(123);
				return identifier;
			case 124:
				this.match(124);
				return identifier;
			case 125:
				this.match(125);
				return identifier;
			case 126:
				this.match(126);
				return identifier;
			case 127:
				this.match(127);
				return identifier;
			case 128:
				this.match(128);
				return identifier;
			case 129:
				this.match(129);
				return identifier;
			case 130:
				this.match(130);
				return identifier;
			case 131:
				this.match(131);
				return identifier;
			case 132:
				this.match(132);
				return identifier;
			case 133:
				this.match(133);
				return identifier;
			case 134:
				this.match(134);
				return identifier;
			case 135:
				this.match(135);
				return identifier;
			case 136:
				this.match(136);
				return identifier;
			case 137:
				this.match(137);
				return identifier;
			case 138:
				this.match(138);
				return identifier;
			case 139:
				this.match(139);
				return identifier;
			case 140:
				this.match(140);
				return identifier;
			case 141:
				this.match(141);
				return identifier;
			case 142:
				this.match(142);
				return identifier;
			case 143:
				this.match(143);
				return identifier;
			case 144:
				this.match(144);
				return identifier;
			case 145:
				this.match(145);
				return identifier;
			case 146:
				this.match(146);
				return identifier;
			case 147:
				this.match(147);
				return identifier;
			case 148:
				this.match(148);
				return identifier;
			case 149:
				this.match(149);
				return identifier;
			case 150:
				this.match(150);
				return identifier;
			case 152:
				this.match(152);
				return identifier;
			case 153:
				this.match(153);
				return identifier;
			case 154:
				this.match(154);
				return identifier;
			case 155:
				this.match(155);
				return identifier;
			case 156:
				this.match(156);
				return identifier;
			case 157:
				this.match(157);
				return identifier;
			case 158:
				this.match(158);
				return identifier;
			case 159:
				this.match(159);
				return identifier;
			case 160:
				this.match(160);
				return identifier;
			case 161:
				this.match(161);
				return identifier;
			case 162:
				this.match(162);
				return identifier;
			case 163:
				this.match(163);
				return identifier;
			case 164:
				this.match(164);
				return identifier;
			case 165:
				this.match(165);
				return identifier;
			case 166:
				this.match(166);
				return identifier;
			case 167:
				this.match(167);
				return identifier;
			case 168:
				this.match(168);
				return identifier;
			case 170:
				this.match(170);
				return identifier;
			case 171:
				this.match(171);
				return identifier;
			case 172:
				this.match(172);
				return identifier;
			case 173:
				this.match(173);
				return identifier;
			case 174:
				this.match(174);
				return identifier;
			case 175:
				this.match(175);
				return identifier;
			case 176:
				this.match(176);
				return identifier;
			case 177:
				this.match(177);
				return identifier;
			case 178:
				this.match(178);
				return identifier;
			case 179:
				this.match(179);
				return identifier;
			case 180:
				this.match(180);
				return identifier;
			case 181:
				this.match(181);
				return identifier;
			case 232:
				this.LT(1);
				this.match(232);
				return identifier;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060019BF RID: 6591 RVA: 0x000E7EA8 File Offset: 0x000E60A8
		public void securityTargetObjectCommon(SecurityTargetObject vParent)
		{
			SecurityTargetObjectName securityTargetObjectName = base.FragmentFactory.CreateFragment<SecurityTargetObjectName>();
			IToken token = this.LT(1);
			this.match(105);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_36_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_64_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					int num2 = 0;
					while (TSql90ParserInternal.tokenSet_36_.member(this.LA(1)))
					{
						this.securityStatementPermission();
						num2++;
					}
					if (num2 < 1)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(203);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				if (TSql90ParserInternal.tokenSet_36_.member(this.LA(1)) && this.LA(2) == 203)
				{
					Identifier identifier = this.securityStatementPermission();
					if (this.inputState.guessing == 0)
					{
						vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier);
					}
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_36_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_36_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					Identifier identifier = this.securityStatementPermission();
					if (TSql90ParserInternal.tokenSet_36_.member(this.LA(1)) && this.LA(2) == 203)
					{
						Identifier identifier2 = this.securityStatementPermission();
						if (this.inputState.guessing == 0)
						{
							vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier, identifier2);
						}
					}
					else
					{
						if (!TSql90ParserInternal.tokenSet_36_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_36_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						Identifier identifier2 = this.securityStatementPermission();
						Identifier identifier3 = this.securityStatementPermission();
						if (this.inputState.guessing == 0)
						{
							vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier, identifier2, identifier3);
						}
					}
				}
				this.match(203);
			}
			else if ((this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) || !TSql90ParserInternal.tokenSet_65_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
			if (this.inputState.guessing == 0)
			{
				securityTargetObjectName.MultiPartIdentifier = multiPartIdentifier;
				vParent.ObjectName = securityTargetObjectName;
			}
		}

		// Token: 0x060019C0 RID: 6592 RVA: 0x000E8178 File Offset: 0x000E6378
		public MultiPartIdentifier multiPartIdentifier(int vMaxNumber)
		{
			MultiPartIdentifier multiPartIdentifier = base.FragmentFactory.CreateFragment<MultiPartIdentifier>();
			List<Identifier> list = this.identifierList(vMaxNumber);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(multiPartIdentifier, multiPartIdentifier.Identifiers, list);
			}
			return multiPartIdentifier;
		}

		// Token: 0x060019C1 RID: 6593 RVA: 0x000E81B4 File Offset: 0x000E63B4
		public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed)
		{
			SecurityTargetObject securityTargetObject = base.FragmentFactory.CreateFragment<SecurityTargetObject>();
			this.securityTargetObjectCommon(securityTargetObject);
			int num = this.LA(1);
			if (num != 71 && num != 151)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.columnNameList(securityTargetObject, securityTargetObject.Columns);
				if (this.inputState.guessing == 0 && vColumnsDisallowed)
				{
					TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(securityTargetObject.Columns[0]);
				}
			}
			return securityTargetObject;
		}

		// Token: 0x060019C2 RID: 6594 RVA: 0x000E8238 File Offset: 0x000E6438
		public SecurityTargetObject authorizationTargetObject()
		{
			SecurityTargetObject securityTargetObject = base.FragmentFactory.CreateFragment<SecurityTargetObject>();
			this.securityTargetObjectCommon(securityTargetObject);
			return securityTargetObject;
		}

		// Token: 0x060019C3 RID: 6595 RVA: 0x000E825C File Offset: 0x000E645C
		public SecurityPrincipal principal()
		{
			SecurityPrincipal securityPrincipal = base.FragmentFactory.CreateFragment<SecurityPrincipal>();
			int num = this.LA(1);
			if (num != 100)
			{
				if (num != 122)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							securityPrincipal.PrincipalType = PrincipalType.Identifier;
							securityPrincipal.Identifier = identifier;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					IToken token = this.LT(1);
					this.match(122);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(securityPrincipal, token);
						securityPrincipal.PrincipalType = PrincipalType.Public;
					}
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(100);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(securityPrincipal, token2);
					securityPrincipal.PrincipalType = PrincipalType.Null;
				}
			}
			return securityPrincipal;
		}

		// Token: 0x060019C4 RID: 6596 RVA: 0x000E8338 File Offset: 0x000E6538
		public void permissionsList(SecurityStatement vParent, ref bool vContainsColumnList)
		{
			Permission permission = this.permission();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Permission>(vParent, vParent.Permissions, permission);
				vContainsColumnList = vContainsColumnList || (permission.Columns != null && permission.Columns.Count > 0);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				permission = this.permission();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Permission>(vParent, vParent.Permissions, permission);
					vContainsColumnList = vContainsColumnList || (permission.Columns != null && permission.Columns.Count > 0);
				}
			}
		}

		// Token: 0x060019C5 RID: 6597 RVA: 0x000E83E8 File Offset: 0x000E65E8
		public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vPermissionContainsColumns)
		{
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 105)
				{
					if (num != 151)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					SecurityTargetObject securityTargetObject = this.securityTargetObject(vPermissionContainsColumns);
					if (this.inputState.guessing == 0)
					{
						vParent.SecurityTargetObject = securityTargetObject;
						return;
					}
				}
			}
		}

		// Token: 0x060019C6 RID: 6598 RVA: 0x000E8444 File Offset: 0x000E6644
		public void securityStatementPrincipalList(SecurityStatement vParent)
		{
			SecurityPrincipal securityPrincipal = this.principal();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SecurityPrincipal>(vParent, vParent.Principals, securityPrincipal);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				securityPrincipal = this.principal();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SecurityPrincipal>(vParent, vParent.Principals, securityPrincipal);
				}
			}
		}

		// Token: 0x060019C7 RID: 6599 RVA: 0x000E84B0 File Offset: 0x000E66B0
		public void securityStatementAsClauseOpt(SecurityStatement vParent)
		{
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return;
						}
						switch (num)
						{
						case 4:
						case 6:
							return;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						{
							this.match(9);
							Identifier identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								vParent.AsClause = identifier;
								return;
							}
							return;
						}
						case 10:
						case 11:
						case 14:
						case 16:
							break;
						case 12:
						case 13:
						case 15:
						case 17:
							return;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return;
							default:
								if (num == 28)
								{
									return;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return;
				}
				switch (num)
				{
				case 180:
				case 181:
					return;
				default:
					if (num == 191)
					{
						return;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return;
				}
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060019C8 RID: 6600 RVA: 0x000E8758 File Offset: 0x000E6958
		public WaitForSupportedStatement waitforInnerStatement()
		{
			WaitForSupportedStatement waitForSupportedStatement;
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_29_.member(this.LA(2)) && base.NextTokenMatches("RECEIVE"))
			{
				waitForSupportedStatement = this.receiveStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				waitForSupportedStatement = this.getConversationGroupStatement();
			}
			return waitForSupportedStatement;
		}

		// Token: 0x060019C9 RID: 6601 RVA: 0x000E87D8 File Offset: 0x000E69D8
		public ColumnReferenceExpression column()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			columnReferenceExpression.ColumnType = ColumnType.Regular;
			int num = this.LA(1);
			if (num > 136)
			{
				if (num != 200)
				{
					if (num == 227)
					{
						goto IL_035C;
					}
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_0365;
					}
				}
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.inputState.guessing == 0)
				{
					columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								goto IL_0378;
							}
							switch (num2)
							{
							case 4:
							case 6:
								goto IL_0378;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_0378;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_0378;
							default:
								if (num2 == 28)
								{
									goto IL_0378;
								}
								switch (num2)
								{
								case 33:
								case 35:
									goto IL_0378;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_0378;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_0378;
							default:
								if (num2 == 82)
								{
									goto IL_0378;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						goto IL_0378;
					}
				}
				else if (num2 <= 172)
				{
					if (num2 <= 119)
					{
						if (num2 == 106 || num2 == 111 || num2 == 119)
						{
							goto IL_0378;
						}
					}
					else
					{
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_0378;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num2)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_0378;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num2)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_0378;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 192)
				{
					if (num2 == 176)
					{
						goto IL_0378;
					}
					switch (num2)
					{
					case 180:
					case 181:
						goto IL_0378;
					default:
						switch (num2)
						{
						case 191:
						case 192:
							goto IL_0378;
						}
						break;
					}
				}
				else if (num2 <= 204)
				{
					switch (num2)
					{
					case 198:
						goto IL_0378;
					case 199:
						break;
					case 200:
						this.match(200);
						this.specialColumn(columnReferenceExpression);
						goto IL_0378;
					default:
						if (num2 == 204)
						{
							goto IL_0378;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 219:
					case 220:
					case 221:
					case 224:
						goto IL_0378;
					case 222:
					case 223:
						break;
					default:
						switch (num2)
						{
						case 232:
						case 234:
							goto IL_0378;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 81 && num != 136)
			{
				goto IL_0365;
			}
			IL_035C:
			this.specialColumn(columnReferenceExpression);
			goto IL_0378;
			IL_0365:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0378:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
			}
			return columnReferenceExpression;
		}

		// Token: 0x060019CA RID: 6602 RVA: 0x000E8B78 File Offset: 0x000E6D78
		public ValueExpression binaryOrVariable()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 224)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.variable();
			}
			else
			{
				valueExpression = this.binary();
			}
			return valueExpression;
		}

		// Token: 0x060019CB RID: 6603 RVA: 0x000E8BC8 File Offset: 0x000E6DC8
		public ValueExpression integerOrVariable()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 221)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.variable();
			}
			else
			{
				valueExpression = this.integer();
			}
			return valueExpression;
		}

		// Token: 0x060019CC RID: 6604 RVA: 0x000E8C18 File Offset: 0x000E6E18
		public void modificationTextStatement(TextModificationStatement vParent)
		{
			int num = this.LA(1);
			if (num <= 136)
			{
				if (num != 17)
				{
					if (num == 81 || num == 136)
					{
						goto IL_0085;
					}
				}
				else
				{
					this.match(17);
					if (this.inputState.guessing == 0)
					{
						vParent.Bulk = true;
						goto IL_0085;
					}
					goto IL_0085;
				}
			}
			else
			{
				if (num == 200 || num == 227)
				{
					goto IL_0085;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_0085;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0085:
			ColumnReferenceExpression columnReferenceExpression = this.column();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, true);
				vParent.Column = columnReferenceExpression;
			}
			int num2 = this.LA(1);
			ValueExpression valueExpression;
			if (num2 != 221)
			{
				if (num2 != 224 && num2 != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.binaryOrVariable();
			}
			else
			{
				valueExpression = this.integer();
			}
			if (this.inputState.guessing == 0)
			{
				vParent.TextId = valueExpression;
			}
			int num3 = this.LA(1);
			if (num3 <= 199)
			{
				if (num3 == 100 || num3 == 171 || num3 == 199)
				{
					return;
				}
			}
			else
			{
				if (num3 == 221 || num3 == 224)
				{
					return;
				}
				switch (num3)
				{
				case 230:
				case 231:
				case 234:
					return;
				case 232:
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "TIMESTAMP");
					}
					this.match(206);
					Literal literal = this.binary();
					if (this.inputState.guessing == 0)
					{
						vParent.Timestamp = literal;
						return;
					}
					return;
				}
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060019CD RID: 6605 RVA: 0x000E8E04 File Offset: 0x000E7004
		public ScalarExpression signedIntegerOrVariableOrNull()
		{
			int num = this.LA(1);
			if (num <= 199)
			{
				if (num == 100)
				{
					return this.nullLiteral();
				}
				if (num != 199)
				{
					goto IL_0041;
				}
			}
			else if (num != 221 && num != 234)
			{
				goto IL_0041;
			}
			return this.signedIntegerOrVariable();
			IL_0041:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060019CE RID: 6606 RVA: 0x000E8E68 File Offset: 0x000E7068
		public void modificationTextStatementWithLog(TextModificationStatement vParent)
		{
			this.match(171);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOG");
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.WithLog = true;
			}
		}

		// Token: 0x060019CF RID: 6607 RVA: 0x000E8EBC File Offset: 0x000E70BC
		public ValueExpression writeString()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 100)
			{
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
						return this.stringLiteral();
					case 234:
						return this.variable();
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.binary();
			}
			else
			{
				valueExpression = this.nullLiteral();
			}
			return valueExpression;
		}

		// Token: 0x060019D0 RID: 6608 RVA: 0x000E8F38 File Offset: 0x000E7138
		public NullLiteral nullLiteral()
		{
			NullLiteral nullLiteral = base.FragmentFactory.CreateFragment<NullLiteral>();
			IToken token = this.LT(1);
			this.match(100);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(nullLiteral, token);
				nullLiteral.Value = token.getText();
			}
			return nullLiteral;
		}

		// Token: 0x060019D1 RID: 6609 RVA: 0x000E8F84 File Offset: 0x000E7184
		public VariableReference variable()
		{
			VariableReference variableReference = base.FragmentFactory.CreateFragment<VariableReference>();
			IToken token = this.LT(1);
			this.match(234);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(variableReference, token);
				variableReference.Name = token.getText();
			}
			return variableReference;
		}

		// Token: 0x060019D2 RID: 6610 RVA: 0x000E8FD4 File Offset: 0x000E71D4
		public OpenMasterKeyStatement openMasterKeyStatement()
		{
			OpenMasterKeyStatement openMasterKeyStatement = base.FragmentFactory.CreateFragment<OpenMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			this.match(91);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
			}
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
			}
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				openMasterKeyStatement.Password = literal;
			}
			return openMasterKeyStatement;
		}

		// Token: 0x060019D3 RID: 6611 RVA: 0x000E90B0 File Offset: 0x000E72B0
		public OpenSymmetricKeyStatement openSymmetricKeyStatement()
		{
			OpenSymmetricKeyStatement openSymmetricKeyStatement = base.FragmentFactory.CreateFragment<OpenSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
			}
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				openSymmetricKeyStatement.Name = identifier;
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
			}
			this.match(18);
			CryptoMechanism cryptoMechanism = this.decryptionMechanism();
			if (this.inputState.guessing == 0)
			{
				openSymmetricKeyStatement.DecryptionMechanism = cryptoMechanism;
			}
			return openSymmetricKeyStatement;
		}

		// Token: 0x060019D4 RID: 6612 RVA: 0x000E916C File Offset: 0x000E736C
		public OpenCursorStatement openCursorStatement()
		{
			OpenCursorStatement openCursorStatement = base.FragmentFactory.CreateFragment<OpenCursorStatement>();
			CursorId cursorId = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				openCursorStatement.Cursor = cursorId;
			}
			return openCursorStatement;
		}

		// Token: 0x060019D5 RID: 6613 RVA: 0x000E91A4 File Offset: 0x000E73A4
		public CryptoMechanism decryptionMechanism()
		{
			CryptoMechanism cryptoMechanism;
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				cryptoMechanism = this.passwordCrypto();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				cryptoMechanism = this.certificateCrypto();
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					this.match(171);
					this.decryptionMechanismPassword(cryptoMechanism);
				}
				else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 91)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				cryptoMechanism = this.keyCrypto();
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					IToken token = this.LT(1);
					this.match(171);
					this.decryptionMechanismPassword(cryptoMechanism);
					if (this.inputState.guessing == 0 && cryptoMechanism.CryptoMechanismType == CryptoMechanismType.SymmetricKey)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
				}
				else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return cryptoMechanism;
		}

		// Token: 0x060019D6 RID: 6614 RVA: 0x000E9344 File Offset: 0x000E7544
		public void decryptionMechanismPassword(CryptoMechanism vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PASSWORD");
				vParent.PasswordOrSignature = literal;
			}
		}

		// Token: 0x060019D7 RID: 6615 RVA: 0x000E9398 File Offset: 0x000E7598
		public CursorId cursorId()
		{
			CursorId cursorId = base.FragmentFactory.CreateFragment<CursorId>();
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("GLOBAL"))
			{
				IToken token = this.LT(1);
				this.match(232);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "GLOBAL");
					cursorId.Name = base.IdentifierOrValueExpression(identifier);
					cursorId.IsGlobal = true;
				}
			}
			else
			{
				if (this.LA(1) < 232 || this.LA(1) > 234 || !TSql90ParserInternal.tokenSet_66_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					cursorId.Name = identifierOrValueExpression;
					cursorId.IsGlobal = false;
				}
			}
			return cursorId;
		}

		// Token: 0x060019D8 RID: 6616 RVA: 0x000E949C File Offset: 0x000E769C
		public CloseMasterKeyStatement closeMasterKeyStatement()
		{
			CloseMasterKeyStatement closeMasterKeyStatement = base.FragmentFactory.CreateFragment<CloseMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			IToken token2 = this.LT(1);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(closeMasterKeyStatement, token2);
			}
			return closeMasterKeyStatement;
		}

		// Token: 0x060019D9 RID: 6617 RVA: 0x000E950C File Offset: 0x000E770C
		public CloseSymmetricKeyStatement closeSymmetricKeyStatement()
		{
			CloseSymmetricKeyStatement closeSymmetricKeyStatement = base.FragmentFactory.CreateFragment<CloseSymmetricKeyStatement>();
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				}
				this.match(91);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					closeSymmetricKeyStatement.Name = identifier;
				}
			}
			else
			{
				this.match(5);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SYMMETRIC");
					closeSymmetricKeyStatement.All = true;
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "KEYS");
					TSql80ParserBaseInternal.UpdateTokenInfo(closeSymmetricKeyStatement, token3);
				}
			}
			return closeSymmetricKeyStatement;
		}

		// Token: 0x060019DA RID: 6618 RVA: 0x000E9620 File Offset: 0x000E7820
		public CloseCursorStatement closeCursorStatement()
		{
			CloseCursorStatement closeCursorStatement = base.FragmentFactory.CreateFragment<CloseCursorStatement>();
			CursorId cursorId = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				closeCursorStatement.Cursor = cursorId;
			}
			return closeCursorStatement;
		}

		// Token: 0x060019DB RID: 6619 RVA: 0x000E9658 File Offset: 0x000E7858
		public FetchCursorStatement rowSelector()
		{
			FetchCursorStatement fetchCursorStatement = base.FragmentFactory.CreateFragment<FetchCursorStatement>();
			if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql90ParserInternal.tokenSet_67_.member(this.LA(2)))
			{
				CursorId cursorId = this.cursorId();
				if (this.inputState.guessing == 0)
				{
					fetchCursorStatement.Cursor = cursorId;
				}
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_68_.member(this.LA(2)))
			{
				FetchType fetchType = this.fetchType();
				this.match(71);
				CursorId cursorId = this.cursorId();
				if (this.inputState.guessing == 0)
				{
					fetchCursorStatement.Cursor = cursorId;
					fetchCursorStatement.FetchType = fetchType;
				}
			}
			else
			{
				if (this.LA(1) != 71)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(71);
				CursorId cursorId = this.cursorId();
				if (this.inputState.guessing == 0)
				{
					fetchCursorStatement.Cursor = cursorId;
				}
			}
			return fetchCursorStatement;
		}

		// Token: 0x060019DC RID: 6620 RVA: 0x000E975C File Offset: 0x000E795C
		public FetchType fetchType()
		{
			FetchType fetchType = base.FragmentFactory.CreateFragment<FetchType>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				fetchType.Orientation = FetchOrientationHelper.Instance.ParseOption(token);
			}
			int num = this.LA(1);
			ScalarExpression scalarExpression;
			if (num <= 199)
			{
				if (num != 71)
				{
					if (num != 199)
					{
						goto IL_010E;
					}
				}
				else
				{
					if (this.inputState.guessing == 0 && (fetchType.Orientation == FetchOrientation.Relative || fetchType.Orientation == FetchOrientation.Absolute))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					return fetchType;
				}
			}
			else if (num != 221)
			{
				if (num != 234)
				{
					goto IL_010E;
				}
				scalarExpression = this.variable();
				if (this.inputState.guessing != 0)
				{
					return fetchType;
				}
				if (fetchType.Orientation != FetchOrientation.Relative && fetchType.Orientation != FetchOrientation.Absolute)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				fetchType.RowOffset = scalarExpression;
				return fetchType;
			}
			scalarExpression = this.signedInteger();
			if (this.inputState.guessing != 0)
			{
				return fetchType;
			}
			if (fetchType.Orientation != FetchOrientation.Relative && fetchType.Orientation != FetchOrientation.Absolute)
			{
				throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
			}
			fetchType.RowOffset = scalarExpression;
			return fetchType;
			IL_010E:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060019DD RID: 6621 RVA: 0x000E988C File Offset: 0x000E7A8C
		public DropDatabaseStatement dropDatabaseStatement()
		{
			DropDatabaseStatement dropDatabaseStatement = base.FragmentFactory.CreateFragment<DropDatabaseStatement>();
			this.match(43);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropDatabaseStatement, dropDatabaseStatement.Databases, identifier);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropDatabaseStatement, dropDatabaseStatement.Databases, identifier);
				}
			}
			return dropDatabaseStatement;
		}

		// Token: 0x060019DE RID: 6622 RVA: 0x000E990C File Offset: 0x000E7B0C
		public DropIndexStatement dropIndexStatement()
		{
			DropIndexStatement dropIndexStatement = base.FragmentFactory.CreateFragment<DropIndexStatement>();
			this.match(84);
			DropIndexClauseBase dropIndexClauseBase = this.dropIndexClause();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropIndexClauseBase>(dropIndexStatement, dropIndexStatement.DropIndexClauses, dropIndexClauseBase);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				dropIndexClauseBase = this.dropIndexClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropIndexClauseBase>(dropIndexStatement, dropIndexStatement.DropIndexClauses, dropIndexClauseBase);
				}
			}
			return dropIndexStatement;
		}

		// Token: 0x060019DF RID: 6623 RVA: 0x000E998C File Offset: 0x000E7B8C
		public DropStatisticsStatement dropStatisticsStatement()
		{
			DropStatisticsStatement dropStatisticsStatement = base.FragmentFactory.CreateFragment<DropStatisticsStatement>();
			this.match(146);
			ChildObjectName childObjectName = this.statisticsDropObject();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ChildObjectName>(dropStatisticsStatement, dropStatisticsStatement.Objects, childObjectName);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				childObjectName = this.statisticsDropObject();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ChildObjectName>(dropStatisticsStatement, dropStatisticsStatement.Objects, childObjectName);
				}
			}
			return dropStatisticsStatement;
		}

		// Token: 0x060019E0 RID: 6624 RVA: 0x000E9A10 File Offset: 0x000E7C10
		public DropTableStatement dropTableStatement()
		{
			DropTableStatement dropTableStatement = base.FragmentFactory.CreateFragment<DropTableStatement>();
			this.match(148);
			this.dropObjectList(dropTableStatement, false);
			return dropTableStatement;
		}

		// Token: 0x060019E1 RID: 6625 RVA: 0x000E9A40 File Offset: 0x000E7C40
		public DropProcedureStatement dropProcedureStatement()
		{
			DropProcedureStatement dropProcedureStatement = base.FragmentFactory.CreateFragment<DropProcedureStatement>();
			switch (this.LA(1))
			{
			case 120:
				this.match(120);
				break;
			case 121:
				this.match(121);
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.dropObjectList(dropProcedureStatement, true);
			return dropProcedureStatement;
		}

		// Token: 0x060019E2 RID: 6626 RVA: 0x000E9AA4 File Offset: 0x000E7CA4
		public DropFunctionStatement dropFunctionStatement()
		{
			DropFunctionStatement dropFunctionStatement = base.FragmentFactory.CreateFragment<DropFunctionStatement>();
			this.match(73);
			this.dropObjectList(dropFunctionStatement, true);
			return dropFunctionStatement;
		}

		// Token: 0x060019E3 RID: 6627 RVA: 0x000E9AD0 File Offset: 0x000E7CD0
		public DropViewStatement dropViewStatement()
		{
			DropViewStatement dropViewStatement = base.FragmentFactory.CreateFragment<DropViewStatement>();
			this.match(166);
			this.dropObjectList(dropViewStatement, true);
			return dropViewStatement;
		}

		// Token: 0x060019E4 RID: 6628 RVA: 0x000E9B00 File Offset: 0x000E7D00
		public DropDefaultStatement dropDefaultStatement()
		{
			DropDefaultStatement dropDefaultStatement = base.FragmentFactory.CreateFragment<DropDefaultStatement>();
			this.match(47);
			this.dropObjectList(dropDefaultStatement, true);
			return dropDefaultStatement;
		}

		// Token: 0x060019E5 RID: 6629 RVA: 0x000E9B2C File Offset: 0x000E7D2C
		public DropRuleStatement dropRuleStatement()
		{
			DropRuleStatement dropRuleStatement = base.FragmentFactory.CreateFragment<DropRuleStatement>();
			this.match(137);
			this.dropObjectList(dropRuleStatement, true);
			return dropRuleStatement;
		}

		// Token: 0x060019E6 RID: 6630 RVA: 0x000E9B5C File Offset: 0x000E7D5C
		public DropTriggerStatement dropTriggerStatement()
		{
			DropTriggerStatement dropTriggerStatement = base.FragmentFactory.CreateFragment<DropTriggerStatement>();
			this.match(155);
			this.dropObjectList(dropTriggerStatement, true);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return dropTriggerStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return dropTriggerStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return dropTriggerStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return dropTriggerStatement;
							default:
								if (num == 28)
								{
									return dropTriggerStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return dropTriggerStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return dropTriggerStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return dropTriggerStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return dropTriggerStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return dropTriggerStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						TriggerScope triggerScope = this.triggerScope(dropTriggerStatement);
						if (this.inputState.guessing == 0)
						{
							dropTriggerStatement.TriggerScope = triggerScope;
							return dropTriggerStatement;
						}
						return dropTriggerStatement;
					}
					case 106:
						return dropTriggerStatement;
					default:
						if (num == 119)
						{
							return dropTriggerStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return dropTriggerStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return dropTriggerStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return dropTriggerStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return dropTriggerStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return dropTriggerStatement;
				default:
					if (num == 191)
					{
						return dropTriggerStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return dropTriggerStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return dropTriggerStatement;
				default:
					if (num == 232)
					{
						return dropTriggerStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060019E7 RID: 6631 RVA: 0x000E9E20 File Offset: 0x000E8020
		public DropSchemaStatement dropSchemaStatement()
		{
			DropSchemaStatement dropSchemaStatement = base.FragmentFactory.CreateFragment<DropSchemaStatement>();
			this.match(139);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				dropSchemaStatement.Schema = schemaObjectName;
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0336;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0336;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_0336;
						case 14:
						case 16:
						case 18:
						case 20:
						case 21:
							break;
						case 19:
						{
							IToken token = this.LT(1);
							this.match(19);
							if (this.inputState.guessing == 0)
							{
								dropSchemaStatement.DropBehavior = DropSchemaBehavior.Cascade;
								TSql80ParserBaseInternal.UpdateTokenInfo(dropSchemaStatement, token);
								goto IL_0336;
							}
							goto IL_0336;
						}
						default:
							if (num == 28)
							{
								goto IL_0336;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_0336;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_0336;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0336;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_0336;
				}
			}
			else if (num <= 172)
			{
				if (num <= 106)
				{
					if (num == 95 || num == 106)
					{
						goto IL_0336;
					}
				}
				else
				{
					switch (num)
					{
					case 119:
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0336;
					case 120:
					case 121:
					case 122:
					case 124:
					case 127:
					case 128:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					case 130:
					{
						IToken token2 = this.LT(1);
						this.match(130);
						if (this.inputState.guessing == 0)
						{
							dropSchemaStatement.DropBehavior = DropSchemaBehavior.Restrict;
							TSql80ParserBaseInternal.UpdateTokenInfo(dropSchemaStatement, token2);
							goto IL_0336;
						}
						goto IL_0336;
					}
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_0336;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_0336;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_0336;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_0336;
				default:
					if (num == 191)
					{
						goto IL_0336;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_0336;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_0336;
				default:
					if (num == 232)
					{
						goto IL_0336;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0336:
			if (this.inputState.guessing == 0 && dropSchemaStatement.Schema.SchemaIdentifier != null && dropSchemaStatement.DropBehavior == DropSchemaBehavior.None)
			{
				throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(dropSchemaStatement.Schema.SchemaIdentifier);
			}
			return dropSchemaStatement;
		}

		// Token: 0x060019E8 RID: 6632 RVA: 0x000EA198 File Offset: 0x000E8398
		public DropAggregateStatement dropAggregateStatement()
		{
			DropAggregateStatement dropAggregateStatement = base.FragmentFactory.CreateFragment<DropAggregateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.dropObjectList(dropAggregateStatement, true);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AGGREGATE");
			}
			return dropAggregateStatement;
		}

		// Token: 0x060019E9 RID: 6633 RVA: 0x000EA1E8 File Offset: 0x000E83E8
		public DropAssemblyStatement dropAssemblyStatement()
		{
			DropAssemblyStatement dropAssemblyStatement = base.FragmentFactory.CreateFragment<DropAssemblyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.dropObjectList(dropAssemblyStatement, true);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NO");
					TSql80ParserBaseInternal.Match(token3, "DEPENDENTS");
					dropAssemblyStatement.WithNoDependents = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(dropAssemblyStatement, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return dropAssemblyStatement;
		}

		// Token: 0x060019EA RID: 6634 RVA: 0x000EA2F4 File Offset: 0x000E84F4
		public TSqlStatement dropPartitionStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 73)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.dropPartitionSchemeStatement();
			}
			else
			{
				tsqlStatement = this.dropPartitionFunctionStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x060019EB RID: 6635 RVA: 0x000EA36C File Offset: 0x000E856C
		public DropSynonymStatement dropSynonymStatement()
		{
			DropSynonymStatement dropSynonymStatement = base.FragmentFactory.CreateFragment<DropSynonymStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.dropObjectList(dropSynonymStatement, true);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYNONYM");
			}
			return dropSynonymStatement;
		}

		// Token: 0x060019EC RID: 6636 RVA: 0x000EA3BC File Offset: 0x000E85BC
		public DropApplicationRoleStatement dropApplicationRoleStatement()
		{
			DropApplicationRoleStatement dropApplicationRoleStatement = base.FragmentFactory.CreateFragment<DropApplicationRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "APPLICATION");
				TSql80ParserBaseInternal.Match(token2, "ROLE");
				dropApplicationRoleStatement.Name = identifier;
			}
			return dropApplicationRoleStatement;
		}

		// Token: 0x060019ED RID: 6637 RVA: 0x000EA434 File Offset: 0x000E8634
		public TSqlStatement dropFulltextStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FULLTEXT");
			}
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 84)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.dropFulltextCatalogStatement();
			}
			else
			{
				tsqlStatement = this.dropFulltextIndexStatement();
			}
			return tsqlStatement;
		}

		// Token: 0x060019EE RID: 6638 RVA: 0x000EA4AC File Offset: 0x000E86AC
		public DropLoginStatement dropLoginStatement()
		{
			DropLoginStatement dropLoginStatement = base.FragmentFactory.CreateFragment<DropLoginStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOGIN");
				dropLoginStatement.Name = identifier;
			}
			return dropLoginStatement;
		}

		// Token: 0x060019EF RID: 6639 RVA: 0x000EA504 File Offset: 0x000E8704
		public DropRoleStatement dropRoleStatement()
		{
			DropRoleStatement dropRoleStatement = base.FragmentFactory.CreateFragment<DropRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				dropRoleStatement.Name = identifier;
			}
			return dropRoleStatement;
		}

		// Token: 0x060019F0 RID: 6640 RVA: 0x000EA55C File Offset: 0x000E875C
		public DropMasterKeyStatement dropMasterKeyStatement()
		{
			DropMasterKeyStatement dropMasterKeyStatement = base.FragmentFactory.CreateFragment<DropMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				TSql80ParserBaseInternal.UpdateTokenInfo(dropMasterKeyStatement, token2);
			}
			return dropMasterKeyStatement;
		}

		// Token: 0x060019F1 RID: 6641 RVA: 0x000EA5BC File Offset: 0x000E87BC
		public DropSymmetricKeyStatement dropSymmetricKeyStatement()
		{
			DropSymmetricKeyStatement dropSymmetricKeyStatement = base.FragmentFactory.CreateFragment<DropSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				dropSymmetricKeyStatement.Name = identifier;
			}
			return dropSymmetricKeyStatement;
		}

		// Token: 0x060019F2 RID: 6642 RVA: 0x000EA61C File Offset: 0x000E881C
		public DropAsymmetricKeyStatement dropAsymmetricKeyStatement()
		{
			DropAsymmetricKeyStatement dropAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<DropAsymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				dropAsymmetricKeyStatement.Name = identifier;
			}
			return dropAsymmetricKeyStatement;
		}

		// Token: 0x060019F3 RID: 6643 RVA: 0x000EA67C File Offset: 0x000E887C
		public DropCertificateStatement dropCertificateStatement()
		{
			DropCertificateStatement dropCertificateStatement = base.FragmentFactory.CreateFragment<DropCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				dropCertificateStatement.Name = identifier;
			}
			return dropCertificateStatement;
		}

		// Token: 0x060019F4 RID: 6644 RVA: 0x000EA6D4 File Offset: 0x000E88D4
		public DropCredentialStatement dropCredentialStatement()
		{
			DropCredentialStatement dropCredentialStatement = base.FragmentFactory.CreateFragment<DropCredentialStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
				dropCredentialStatement.Name = identifier;
			}
			return dropCredentialStatement;
		}

		// Token: 0x060019F5 RID: 6645 RVA: 0x000EA72C File Offset: 0x000E892C
		public DropTypeStatement dropTypeStatement()
		{
			DropTypeStatement dropTypeStatement = base.FragmentFactory.CreateFragment<DropTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.dropObject(false);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TYPE");
				dropTypeStatement.Name = schemaObjectName;
			}
			return dropTypeStatement;
		}

		// Token: 0x060019F6 RID: 6646 RVA: 0x000EA784 File Offset: 0x000E8984
		public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement()
		{
			DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<DropXmlSchemaCollectionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(139);
			IToken token2 = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
				TSql80ParserBaseInternal.Match(token2, "COLLECTION");
				dropXmlSchemaCollectionStatement.Name = schemaObjectName;
			}
			return dropXmlSchemaCollectionStatement;
		}

		// Token: 0x060019F7 RID: 6647 RVA: 0x000EA804 File Offset: 0x000E8A04
		public DropContractStatement dropContractStatement()
		{
			DropContractStatement dropContractStatement = base.FragmentFactory.CreateFragment<DropContractStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONTRACT");
				dropContractStatement.Name = identifier;
			}
			return dropContractStatement;
		}

		// Token: 0x060019F8 RID: 6648 RVA: 0x000EA85C File Offset: 0x000E8A5C
		public DropQueueStatement dropQueueStatement()
		{
			DropQueueStatement dropQueueStatement = base.FragmentFactory.CreateFragment<DropQueueStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				dropQueueStatement.Name = schemaObjectName;
			}
			return dropQueueStatement;
		}

		// Token: 0x060019F9 RID: 6649 RVA: 0x000EA8B4 File Offset: 0x000E8AB4
		public DropServiceStatement dropServiceStatement()
		{
			DropServiceStatement dropServiceStatement = base.FragmentFactory.CreateFragment<DropServiceStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
				dropServiceStatement.Name = identifier;
			}
			return dropServiceStatement;
		}

		// Token: 0x060019FA RID: 6650 RVA: 0x000EA90C File Offset: 0x000E8B0C
		public DropRouteStatement dropRouteStatement()
		{
			DropRouteStatement dropRouteStatement = base.FragmentFactory.CreateFragment<DropRouteStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROUTE");
				dropRouteStatement.Name = identifier;
			}
			return dropRouteStatement;
		}

		// Token: 0x060019FB RID: 6651 RVA: 0x000EA964 File Offset: 0x000E8B64
		public DropMessageTypeStatement dropMessageTypeStatement()
		{
			DropMessageTypeStatement dropMessageTypeStatement = base.FragmentFactory.CreateFragment<DropMessageTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MESSAGE");
				TSql80ParserBaseInternal.Match(token2, "TYPE");
				dropMessageTypeStatement.Name = identifier;
			}
			return dropMessageTypeStatement;
		}

		// Token: 0x060019FC RID: 6652 RVA: 0x000EA9DC File Offset: 0x000E8BDC
		public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement()
		{
			DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<DropRemoteServiceBindingStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOTE");
				TSql80ParserBaseInternal.Match(token2, "SERVICE");
				TSql80ParserBaseInternal.Match(token3, "BINDING");
				dropRemoteServiceBindingStatement.Name = identifier;
			}
			return dropRemoteServiceBindingStatement;
		}

		// Token: 0x060019FD RID: 6653 RVA: 0x000EAA74 File Offset: 0x000E8C74
		public DropEndpointStatement dropEndpointStatement()
		{
			DropEndpointStatement dropEndpointStatement = base.FragmentFactory.CreateFragment<DropEndpointStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENDPOINT");
				dropEndpointStatement.Name = identifier;
			}
			return dropEndpointStatement;
		}

		// Token: 0x060019FE RID: 6654 RVA: 0x000EAACC File Offset: 0x000E8CCC
		public DropSignatureStatement dropSignatureStatement()
		{
			DropSignatureStatement dropSignatureStatement = base.FragmentFactory.CreateFragment<DropSignatureStatement>();
			this.signatureType(dropSignatureStatement);
			this.match(71);
			this.signableElement(dropSignatureStatement);
			this.match(18);
			this.cryptoListWithOptionalPasswordSignature(dropSignatureStatement);
			return dropSignatureStatement;
		}

		// Token: 0x060019FF RID: 6655 RVA: 0x000EAB0C File Offset: 0x000E8D0C
		public DropEventNotificationStatement dropEventNotificationStatement()
		{
			DropEventNotificationStatement dropEventNotificationStatement = base.FragmentFactory.CreateFragment<DropEventNotificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EVENT");
				TSql80ParserBaseInternal.Match(token2, "NOTIFICATION");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropEventNotificationStatement, dropEventNotificationStatement.Notifications, identifier);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropEventNotificationStatement, dropEventNotificationStatement.Notifications, identifier);
				}
			}
			EventNotificationObjectScope eventNotificationObjectScope = this.eventNotificationObjectScope();
			if (this.inputState.guessing == 0)
			{
				dropEventNotificationStatement.Scope = eventNotificationObjectScope;
			}
			return dropEventNotificationStatement;
		}

		// Token: 0x06001A00 RID: 6656 RVA: 0x000EABE0 File Offset: 0x000E8DE0
		public DropUserStatement dropUserStatement()
		{
			DropUserStatement dropUserStatement = base.FragmentFactory.CreateFragment<DropUserStatement>();
			this.match(163);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				dropUserStatement.Name = identifier;
			}
			return dropUserStatement;
		}

		// Token: 0x06001A01 RID: 6657 RVA: 0x000EAC20 File Offset: 0x000E8E20
		public DropIndexClauseBase dropIndexClause()
		{
			DropIndexClauseBase dropIndexClauseBase;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_69_.member(this.LA(2)))
			{
				dropIndexClauseBase = this.indexDropObject();
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || this.LA(2) != 105)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				dropIndexClauseBase = this.indexDropObjectNewNameFormat();
			}
			return dropIndexClauseBase;
		}

		// Token: 0x06001A02 RID: 6658 RVA: 0x000EACB8 File Offset: 0x000E8EB8
		public BackwardsCompatibleDropIndexClause indexDropObject()
		{
			BackwardsCompatibleDropIndexClause backwardsCompatibleDropIndexClause = base.FragmentFactory.CreateFragment<BackwardsCompatibleDropIndexClause>();
			ChildObjectName childObjectName = this.childObjectNameWithThreePrefixes();
			if (this.inputState.guessing == 0)
			{
				if (childObjectName.BaseIdentifier == null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46027", childObjectName, TSqlParserResource.SQL46027Message, new string[0]);
				}
				backwardsCompatibleDropIndexClause.Index = childObjectName;
			}
			return backwardsCompatibleDropIndexClause;
		}

		// Token: 0x06001A03 RID: 6659 RVA: 0x000EAD0C File Offset: 0x000E8F0C
		public DropIndexClause indexDropObjectNewNameFormat()
		{
			DropIndexClause dropIndexClause = base.FragmentFactory.CreateFragment<DropIndexClause>();
			Identifier identifier = this.identifier();
			this.match(105);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				dropIndexClause.Index = identifier;
				dropIndexClause.Object = schemaObjectName;
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.dropClusteredIndexOptions(dropIndexClause);
			}
			else if (!TSql90ParserInternal.tokenSet_41_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return dropIndexClause;
		}

		// Token: 0x06001A04 RID: 6660 RVA: 0x000EADB8 File Offset: 0x000E8FB8
		public void dropClusteredIndexOptions(DropIndexClause vParent)
		{
			int num = 0;
			this.match(171);
			this.match(191);
			this.dropClusteredIndexOption(vParent, ref num);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.dropClusteredIndexOption(vParent, ref num);
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06001A05 RID: 6661 RVA: 0x000EAE34 File Offset: 0x000E9034
		public void dropClusteredIndexOption(DropIndexClause vParent, ref int encounteredOptions)
		{
			IndexOption indexOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP"))
			{
				indexOption = this.maxDopOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ONLINE"))
			{
				indexOption = this.onlineIndexOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 151)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				indexOption = this.dropIndexMoveToOption();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)indexOption.OptionKind, indexOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.Options, indexOption);
			}
		}

		// Token: 0x06001A06 RID: 6662 RVA: 0x000EAF04 File Offset: 0x000E9104
		public IndexExpressionOption maxDopOption()
		{
			IndexExpressionOption indexExpressionOption = base.FragmentFactory.CreateFragment<IndexExpressionOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql90ParserBaseInternal.ThrowIfMaxdopValueOutOfRange(literal);
				TSql80ParserBaseInternal.Match(token, "MAXDOP");
				TSql80ParserBaseInternal.UpdateTokenInfo(indexExpressionOption, token);
				indexExpressionOption.OptionKind = IndexOptionKind.MaxDop;
				indexExpressionOption.Expression = literal;
			}
			return indexExpressionOption;
		}

		// Token: 0x06001A07 RID: 6663 RVA: 0x000EAF7C File Offset: 0x000E917C
		public IndexStateOption onlineIndexOption()
		{
			IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ONLINE");
				indexStateOption.OptionKind = IndexOptionKind.Online;
				TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
			}
			this.match(206);
			OptionState optionState = this.optionOnOff(indexStateOption);
			if (this.inputState.guessing == 0)
			{
				indexStateOption.OptionState = optionState;
			}
			return indexStateOption;
		}

		// Token: 0x06001A08 RID: 6664 RVA: 0x000EAFF8 File Offset: 0x000E91F8
		public MoveToDropIndexOption dropIndexMoveToOption()
		{
			MoveToDropIndexOption moveToDropIndexOption = base.FragmentFactory.CreateFragment<MoveToDropIndexOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(151);
			FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MOVE");
				TSql80ParserBaseInternal.UpdateTokenInfo(moveToDropIndexOption, token);
				moveToDropIndexOption.OptionKind = IndexOptionKind.MoveTo;
				moveToDropIndexOption.MoveTo = fileGroupOrPartitionScheme;
			}
			return moveToDropIndexOption;
		}

		// Token: 0x06001A09 RID: 6665 RVA: 0x000EB068 File Offset: 0x000E9268
		public FileGroupOrPartitionScheme filegroupOrPartitionScheme()
		{
			FileGroupOrPartitionScheme fileGroupOrPartitionScheme = base.FragmentFactory.CreateFragment<FileGroupOrPartitionScheme>();
			IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				fileGroupOrPartitionScheme.Name = identifierOrValueExpression;
			}
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(fileGroupOrPartitionScheme, fileGroupOrPartitionScheme.PartitionSchemeColumns);
			}
			else if (!TSql90ParserInternal.tokenSet_70_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return fileGroupOrPartitionScheme;
		}

		// Token: 0x06001A0A RID: 6666 RVA: 0x000EB110 File Offset: 0x000E9310
		public ChildObjectName statisticsDropObject()
		{
			ChildObjectName childObjectName = this.childObjectNameWithThreePrefixes();
			if (this.inputState.guessing == 0 && childObjectName.BaseIdentifier == null)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46038", childObjectName, TSqlParserResource.SQL46038Message, new string[0]);
			}
			return childObjectName;
		}

		// Token: 0x06001A0B RID: 6667 RVA: 0x000EB150 File Offset: 0x000E9350
		public List<Identifier> identifierList(int vMaxNumber)
		{
			List<Identifier> list = new List<Identifier>();
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddIdentifierToListWithCheck(list, identifier, vMaxNumber);
					}
					while (this.LA(1) == 200 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
					{
						this.identifierListElement(list, vMaxNumber, false);
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.identifierListElement(list, vMaxNumber, true);
				while (this.LA(1) == 200 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
				{
					this.identifierListElement(list, vMaxNumber, false);
				}
			}
			return list;
		}

		// Token: 0x06001A0C RID: 6668 RVA: 0x000EB250 File Offset: 0x000E9450
		public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames)
		{
			SchemaObjectName schemaObjectName = this.dropObject(onlyTwoPartNames);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.Objects, schemaObjectName);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				schemaObjectName = this.dropObject(onlyTwoPartNames);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.Objects, schemaObjectName);
				}
			}
		}

		// Token: 0x06001A0D RID: 6669 RVA: 0x000EB2BC File Offset: 0x000E94BC
		public TriggerScope triggerScope(TSqlFragment vParent)
		{
			TriggerScope triggerScope = TriggerScope.Normal;
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 43)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(43);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					triggerScope = TriggerScope.Database;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(5);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "SERVER");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
					triggerScope = TriggerScope.AllServer;
				}
			}
			return triggerScope;
		}

		// Token: 0x06001A0E RID: 6670 RVA: 0x000EB370 File Offset: 0x000E9570
		public SchemaObjectName dropObject(bool onlyTwoPartNames)
		{
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0 && onlyTwoPartNames)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "DROP");
			}
			return schemaObjectName;
		}

		// Token: 0x06001A0F RID: 6671 RVA: 0x000EB3A0 File Offset: 0x000E95A0
		public DropPartitionFunctionStatement dropPartitionFunctionStatement()
		{
			DropPartitionFunctionStatement dropPartitionFunctionStatement = base.FragmentFactory.CreateFragment<DropPartitionFunctionStatement>();
			this.match(73);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				dropPartitionFunctionStatement.Name = identifier;
			}
			return dropPartitionFunctionStatement;
		}

		// Token: 0x06001A10 RID: 6672 RVA: 0x000EB3E0 File Offset: 0x000E95E0
		public DropPartitionSchemeStatement dropPartitionSchemeStatement()
		{
			DropPartitionSchemeStatement dropPartitionSchemeStatement = base.FragmentFactory.CreateFragment<DropPartitionSchemeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SCHEME");
				dropPartitionSchemeStatement.Name = identifier;
			}
			return dropPartitionSchemeStatement;
		}

		// Token: 0x06001A11 RID: 6673 RVA: 0x000EB438 File Offset: 0x000E9638
		public DropFullTextCatalogStatement dropFulltextCatalogStatement()
		{
			DropFullTextCatalogStatement dropFullTextCatalogStatement = base.FragmentFactory.CreateFragment<DropFullTextCatalogStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CATALOG");
				dropFullTextCatalogStatement.Name = identifier;
			}
			return dropFullTextCatalogStatement;
		}

		// Token: 0x06001A12 RID: 6674 RVA: 0x000EB490 File Offset: 0x000E9690
		public DropFullTextIndexStatement dropFulltextIndexStatement()
		{
			DropFullTextIndexStatement dropFullTextIndexStatement = base.FragmentFactory.CreateFragment<DropFullTextIndexStatement>();
			this.match(84);
			this.match(105);
			SchemaObjectName schemaObjectName = this.dropObject(false);
			if (this.inputState.guessing == 0)
			{
				dropFullTextIndexStatement.TableName = schemaObjectName;
			}
			return dropFullTextIndexStatement;
		}

		// Token: 0x06001A13 RID: 6675 RVA: 0x000EB4D8 File Offset: 0x000E96D8
		public void signatureType(SignatureStatementBase vParent)
		{
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "COUNTER");
					vParent.IsCounter = true;
				}
			}
			else if (this.LA(1) != 232 || (this.LA(2) != 71 && this.LA(2) != 151))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "SIGNATURE");
			}
		}

		// Token: 0x06001A14 RID: 6676 RVA: 0x000EB5A0 File Offset: 0x000E97A0
		public void signableElement(SignatureStatementBase vParent)
		{
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_72_.member(this.LA(2)))
			{
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					vParent.Element = schemaObjectName;
					return;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 203)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(203);
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token, "OBJECT"))
					{
						vParent.ElementKind = SignableElementKind.Object;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
						vParent.ElementKind = SignableElementKind.Assembly;
					}
					vParent.Element = schemaObjectName;
					return;
				}
			}
			else
			{
				if (this.LA(1) != 43)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(43);
				this.match(203);
				SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					vParent.ElementKind = SignableElementKind.Database;
					vParent.Element = schemaObjectName;
					return;
				}
			}
		}

		// Token: 0x06001A15 RID: 6677 RVA: 0x000EB6E0 File Offset: 0x000E98E0
		public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent)
		{
			CryptoMechanism cryptoMechanism = this.cryptoWithOptionalPasswordSignature();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.Cryptos, cryptoMechanism);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				cryptoMechanism = this.cryptoWithOptionalPasswordSignature();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.Cryptos, cryptoMechanism);
				}
			}
		}

		// Token: 0x06001A16 RID: 6678 RVA: 0x000EB74C File Offset: 0x000E994C
		public CryptoMechanism cryptoWithOptionalPasswordSignature()
		{
			CryptoMechanism cryptoMechanism;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				cryptoMechanism = this.certificateCrypto();
				Literal literal = this.withSignatureOrPasswordOpt();
				if (this.inputState.guessing == 0 && literal != null)
				{
					cryptoMechanism.PasswordOrSignature = literal;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				cryptoMechanism = this.keyCrypto();
				Literal literal = this.withSignatureOrPasswordOpt();
				if (this.inputState.guessing == 0 && literal != null)
				{
					cryptoMechanism.PasswordOrSignature = literal;
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				cryptoMechanism = this.passwordCrypto();
			}
			return cryptoMechanism;
		}

		// Token: 0x06001A17 RID: 6679 RVA: 0x000EB82C File Offset: 0x000E9A2C
		public Literal withSignatureOrPasswordOpt()
		{
			Literal literal = null;
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				this.LT(1);
				this.match(232);
				this.match(206);
				int num = this.LA(1);
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
						literal = this.stringLiteral();
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					literal = this.binary();
				}
			}
			else if (!TSql90ParserInternal.tokenSet_41_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literal;
		}

		// Token: 0x06001A18 RID: 6680 RVA: 0x000EB908 File Offset: 0x000E9B08
		public Identifier nonQuotedIdentifier()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
				identifier.SetUnquotedIdentifier(token.getText());
			}
			return identifier;
		}

		// Token: 0x06001A19 RID: 6681 RVA: 0x000EB958 File Offset: 0x000E9B58
		public BeginTransactionStatement beginTransactionStatement()
		{
			BeginTransactionStatement beginTransactionStatement = base.FragmentFactory.CreateFragment<BeginTransactionStatement>();
			IToken token = this.LT(1);
			this.match(13);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token);
			}
			int num = this.LA(1);
			if (num != 52)
			{
				switch (num)
				{
				case 153:
				case 154:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(52);
				if (this.inputState.guessing == 0)
				{
					beginTransactionStatement.Distributed = true;
				}
			}
			switch (this.LA(1))
			{
			case 153:
			{
				IToken token2 = this.LT(1);
				this.match(153);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token2);
				}
				break;
			}
			case 154:
			{
				IToken token3 = this.LT(1);
				this.match(154);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token3);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (TSql90ParserInternal.tokenSet_26_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_27_.member(this.LA(2)))
			{
				this.transactionName(beginTransactionStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "MARK");
					TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token4);
					beginTransactionStatement.MarkDefined = true;
				}
				int num2 = this.LA(1);
				if (num2 <= 92)
				{
					if (num2 <= 28)
					{
						if (num2 <= 6)
						{
							if (num2 == 1)
							{
								return beginTransactionStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return beginTransactionStatement;
							}
						}
						else
						{
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return beginTransactionStatement;
							case 14:
							case 16:
								break;
							default:
								switch (num2)
								{
								case 22:
								case 23:
									return beginTransactionStatement;
								default:
									if (num2 == 28)
									{
										return beginTransactionStatement;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num2 <= 75)
					{
						switch (num2)
						{
						case 33:
						case 35:
							return beginTransactionStatement;
						case 34:
							break;
						default:
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								return beginTransactionStatement;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								break;
							default:
								switch (num2)
								{
								case 74:
								case 75:
									return beginTransactionStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 82 || num2 == 86 || num2 == 92)
					{
						return beginTransactionStatement;
					}
				}
				else if (num2 <= 172)
				{
					if (num2 <= 119)
					{
						if (num2 == 95 || num2 == 106 || num2 == 119)
						{
							return beginTransactionStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return beginTransactionStatement;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num2)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								return beginTransactionStatement;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num2)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									return beginTransactionStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 191)
				{
					if (num2 == 176)
					{
						return beginTransactionStatement;
					}
					switch (num2)
					{
					case 180:
					case 181:
						return beginTransactionStatement;
					default:
						if (num2 == 191)
						{
							return beginTransactionStatement;
						}
						break;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return beginTransactionStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return beginTransactionStatement;
					default:
						switch (num2)
						{
						case 230:
						case 231:
						case 234:
						{
							ValueExpression valueExpression = this.stringOrVariable();
							if (this.inputState.guessing == 0)
							{
								beginTransactionStatement.MarkDescription = valueExpression;
								return beginTransactionStatement;
							}
							return beginTransactionStatement;
						}
						case 232:
							return beginTransactionStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return beginTransactionStatement;
		}

		// Token: 0x06001A1A RID: 6682 RVA: 0x000EBE50 File Offset: 0x000EA050
		public TryCatchStatement tryCatchStatement()
		{
			TryCatchStatement tryCatchStatement = base.FragmentFactory.CreateFragment<TryCatchStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(13);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tryCatchStatement, token);
				TSql80ParserBaseInternal.Match(token2, "TRY");
			}
			StatementList statementList = this.tryStatementList(ref flag);
			if (this.inputState.guessing == 0)
			{
				tryCatchStatement.TryStatements = statementList;
			}
			this.match(56);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "TRY");
			}
			this.LT(1);
			this.match(13);
			IToken token4 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "CATCH");
			}
			statementList = this.catchStatementList(ref flag);
			if (this.inputState.guessing == 0)
			{
				tryCatchStatement.CatchStatements = statementList;
			}
			this.match(56);
			IToken token5 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token5, "CATCH");
				TSql80ParserBaseInternal.UpdateTokenInfo(tryCatchStatement, token5);
				if (flag)
				{
					tryCatchStatement = null;
				}
			}
			return tryCatchStatement;
		}

		// Token: 0x06001A1B RID: 6683 RVA: 0x000EBFAC File Offset: 0x000EA1AC
		public BeginConversationTimerStatement beginConversationTimerStatement()
		{
			BeginConversationTimerStatement beginConversationTimerStatement = base.FragmentFactory.CreateFragment<BeginConversationTimerStatement>();
			IToken token = this.LT(1);
			this.match(13);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.Match(token3, "TIMER");
				TSql80ParserBaseInternal.UpdateTokenInfo(beginConversationTimerStatement, token);
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(192);
			IToken token4 = this.LT(1);
			this.match(232);
			this.match(206);
			ScalarExpression scalarExpression2 = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				beginConversationTimerStatement.Handle = scalarExpression;
				TSql80ParserBaseInternal.Match(token4, "TIMEOUT");
				beginConversationTimerStatement.Timeout = scalarExpression2;
			}
			return beginConversationTimerStatement;
		}

		// Token: 0x06001A1C RID: 6684 RVA: 0x000EC0A0 File Offset: 0x000EA2A0
		public BeginDialogStatement beginDialogStatement()
		{
			BeginDialogStatement beginDialogStatement = base.FragmentFactory.CreateFragment<BeginDialogStatement>();
			int num = 0;
			IToken token = this.LT(1);
			this.match(13);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "DIALOG");
				TSql80ParserBaseInternal.UpdateTokenInfo(beginDialogStatement, token);
			}
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "CONVERSATION");
					beginDialogStatement.IsConversation = true;
					goto IL_00CB;
				}
				goto IL_00CB;
			}
			case 234:
				goto IL_00CB;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00CB:
			VariableReference variableReference = this.variable();
			this.match(71);
			IToken token4 = this.LT(1);
			this.match(232);
			IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
			this.match(151);
			IToken token5 = this.LT(1);
			this.match(232);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "SERVICE");
				TSql80ParserBaseInternal.Match(token5, "SERVICE");
				beginDialogStatement.Handle = variableReference;
				beginDialogStatement.InitiatorServiceName = identifierOrValueExpression;
				beginDialogStatement.TargetServiceName = valueExpression;
			}
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							goto IL_042B;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_042B;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_042B;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							goto IL_042B;
						default:
							if (num2 == 28)
							{
								goto IL_042B;
							}
							switch (num2)
							{
							case 33:
							case 35:
								goto IL_042B;
							}
							break;
						}
					}
				}
				else if (num2 <= 82)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_042B;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num2)
						{
						case 74:
						case 75:
							goto IL_042B;
						default:
							if (num2 == 82)
							{
								goto IL_042B;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 86 || num2 == 92 || num2 == 95)
				{
					goto IL_042B;
				}
			}
			else if (num2 <= 176)
			{
				if (num2 <= 144)
				{
					switch (num2)
					{
					case 105:
					case 106:
						goto IL_042B;
					default:
						if (num2 == 119)
						{
							goto IL_042B;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_042B;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_042B;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num2)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_042B;
						case 168:
						case 169:
							break;
						default:
							if (num2 == 176)
							{
								goto IL_042B;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 198)
			{
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_042B;
				default:
					if (num2 == 191)
					{
						goto IL_042B;
					}
					if (num2 == 198)
					{
						this.match(198);
						ValueExpression valueExpression2 = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							beginDialogStatement.InstanceSpec = valueExpression2;
							goto IL_042B;
						}
						goto IL_042B;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_042B;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_042B;
				default:
					if (num2 == 232)
					{
						goto IL_042B;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_042B:
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 28)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							goto IL_070B;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_070B;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_070B;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								goto IL_070B;
							default:
								if (num3 == 28)
								{
									goto IL_070B;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 75)
				{
					switch (num3)
					{
					case 33:
					case 35:
						goto IL_070B;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_070B;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num3)
							{
							case 74:
							case 75:
								goto IL_070B;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					goto IL_070B;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 119)
				{
					if (num3 == 95)
					{
						goto IL_070B;
					}
					switch (num3)
					{
					case 105:
					{
						this.match(105);
						IToken token6 = this.LT(1);
						this.match(232);
						IdentifierOrValueExpression identifierOrValueExpression2 = this.identifierOrVariable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token6, "CONTRACT");
							beginDialogStatement.ContractName = identifierOrValueExpression2;
							goto IL_070B;
						}
						goto IL_070B;
					}
					case 106:
						goto IL_070B;
					default:
						if (num3 == 119)
						{
							goto IL_070B;
						}
						break;
					}
				}
				else
				{
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_070B;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_070B;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num3)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_070B;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176)
				{
					goto IL_070B;
				}
				switch (num3)
				{
				case 180:
				case 181:
					goto IL_070B;
				default:
					if (num3 == 191)
					{
						goto IL_070B;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_070B;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_070B;
				default:
					if (num3 == 232)
					{
						goto IL_070B;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_070B:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				DialogOption dialogOption = this.beginConversationArgument(ref num);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DialogOption>(beginDialogStatement, beginDialogStatement.Options, dialogOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					dialogOption = this.beginConversationArgument(ref num);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DialogOption>(beginDialogStatement, beginDialogStatement.Options, dialogOption);
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return beginDialogStatement;
		}

		// Token: 0x06001A1D RID: 6685 RVA: 0x000EC880 File Offset: 0x000EAA80
		public void transactionName(TransactionStatement vParent)
		{
			int num = this.LA(1);
			if (num != 199 && num != 221)
			{
				switch (num)
				{
				case 232:
				case 233:
				case 234:
				{
					IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrVariable();
					if (this.inputState.guessing == 0)
					{
						vParent.Name = identifierOrValueExpression;
						return;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Identifier identifier = this.weirdTransactionName();
				if (this.inputState.guessing == 0)
				{
					vParent.Name = base.IdentifierOrValueExpression(identifier);
					return;
				}
			}
		}

		// Token: 0x06001A1E RID: 6686 RVA: 0x000EC910 File Offset: 0x000EAB10
		public Identifier weirdTransactionName()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			StringBuilder stringBuilder = new StringBuilder();
			int num = this.LA(1);
			if (num != 199)
			{
				if (num != 221)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(199);
				if (this.inputState.guessing == 0)
				{
					stringBuilder.Append(token.getText());
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
				}
			}
			IToken token2 = this.LT(1);
			this.match(221);
			IToken token3 = this.LT(1);
			this.match(202);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token2);
				stringBuilder.Append(token2.getText());
				stringBuilder.Append(token3.getText());
			}
			this.tranIdentifier(stringBuilder, identifier);
			IToken token4 = this.LT(1);
			this.match(200);
			if (this.inputState.guessing == 0)
			{
				stringBuilder.Append(token4.getText());
			}
			this.tranIdentifier(stringBuilder, identifier);
			if (this.inputState.guessing == 0)
			{
				identifier.Value = stringBuilder.ToString();
			}
			return identifier;
		}

		// Token: 0x06001A1F RID: 6687 RVA: 0x000ECA54 File Offset: 0x000EAC54
		public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent)
		{
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					vStringBuilder.Append(token.getText());
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				break;
			}
			case 233:
			{
				IToken token2 = this.LT(1);
				this.match(233);
				if (this.inputState.guessing == 0)
				{
					vStringBuilder.Append(token2.getText());
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001A20 RID: 6688 RVA: 0x000ECB00 File Offset: 0x000EAD00
		public StatementList tryStatementList(ref bool vParseErrorOccurred)
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			while (this.LA(1) == 204)
			{
				this.match(204);
			}
			int num = 0;
			while (TSql90ParserInternal.tokenSet_3_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_61_.member(this.LA(2)) && base.IsStatementIsNext())
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
					}
					else
					{
						vParseErrorOccurred = true;
						base.ThrowIfEndOfFileOrBatch();
					}
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return statementList;
		}

		// Token: 0x06001A21 RID: 6689 RVA: 0x000ECBB4 File Offset: 0x000EADB4
		public StatementList catchStatementList(ref bool vParseErrorOccurred)
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			while (this.LA(1) == 204)
			{
				this.match(204);
			}
			while (TSql90ParserInternal.tokenSet_3_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_61_.member(this.LA(2)) && base.IsStatementIsNext())
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
					}
					else
					{
						vParseErrorOccurred = true;
						base.ThrowIfEndOfFileOrBatch();
					}
				}
			}
			return statementList;
		}

		// Token: 0x06001A22 RID: 6690 RVA: 0x000ECC48 File Offset: 0x000EAE48
		public DeclareVariableElement declareVariableElement()
		{
			DeclareVariableElement declareVariableElement = base.FragmentFactory.CreateFragment<DeclareVariableElement>();
			Identifier identifier = this.identifierVariable();
			int num = this.LA(1);
			if (num <= 42)
			{
				if (num == 9)
				{
					this.match(9);
					goto IL_0069;
				}
				if (num == 42)
				{
					goto IL_0069;
				}
			}
			else
			{
				if (num == 53 || num == 96)
				{
					goto IL_0069;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_0069;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0069:
			int num2 = this.LA(1);
			DataTypeReference dataTypeReference;
			if (num2 <= 53)
			{
				if (num2 == 42)
				{
					dataTypeReference = this.cursorDataType();
					goto IL_00C8;
				}
				if (num2 != 53)
				{
					goto IL_00B5;
				}
			}
			else if (num2 != 96)
			{
				switch (num2)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_00B5;
				}
			}
			dataTypeReference = this.scalarDataType();
			goto IL_00C8;
			IL_00B5:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00C8:
			if (this.inputState.guessing == 0)
			{
				declareVariableElement.VariableName = identifier;
				declareVariableElement.DataType = dataTypeReference;
			}
			return declareVariableElement;
		}

		// Token: 0x06001A23 RID: 6691 RVA: 0x000ECD3C File Offset: 0x000EAF3C
		public SqlDataTypeReference cursorDataType()
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			IToken token = this.LT(1);
			this.match(42);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
				sqlDataTypeReference.SqlDataTypeOption = SqlDataTypeOption.Cursor;
			}
			return sqlDataTypeReference;
		}

		// Token: 0x06001A24 RID: 6692 RVA: 0x000ECD84 File Offset: 0x000EAF84
		public DeclareVariableStatement declareVariableStatement()
		{
			DeclareVariableStatement declareVariableStatement = base.FragmentFactory.CreateFragment<DeclareVariableStatement>();
			DeclareVariableElement declareVariableElement = this.declareVariableElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeclareVariableElement>(declareVariableStatement, declareVariableStatement.Declarations, declareVariableElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				declareVariableElement = this.declareVariableElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeclareVariableElement>(declareVariableStatement, declareVariableStatement.Declarations, declareVariableElement);
				}
			}
			return declareVariableStatement;
		}

		// Token: 0x06001A25 RID: 6693 RVA: 0x000ECDFC File Offset: 0x000EAFFC
		public DeclareCursorStatement declareCursorStatement()
		{
			DeclareCursorStatement declareCursorStatement = base.FragmentFactory.CreateFragment<DeclareCursorStatement>();
			List<CursorOption> list = new List<CursorOption>();
			Identifier identifier = this.identifier();
			this.cursorOpts(true, list);
			CursorDefinition cursorDefinition = this.cursorDefinitionOptions(list);
			if (this.inputState.guessing == 0)
			{
				declareCursorStatement.Name = identifier;
				declareCursorStatement.CursorDefinition = cursorDefinition;
			}
			return declareCursorStatement;
		}

		// Token: 0x06001A26 RID: 6694 RVA: 0x000ECE50 File Offset: 0x000EB050
		public PredicateSetStatement predicateSetStatement()
		{
			PredicateSetStatement predicateSetStatement = base.FragmentFactory.CreateFragment<PredicateSetStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				predicateSetStatement.Options = PredicateSetOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					predicateSetStatement.Options |= PredicateSetOptionsHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql90);
				}
			}
			this.setOnOff(predicateSetStatement);
			if (this.inputState.guessing == 0 && (predicateSetStatement.Options & SetOptions.QuotedIdentifier) == SetOptions.QuotedIdentifier)
			{
				this._tokenSource.QuotedIdentifier = predicateSetStatement.IsOn;
			}
			return predicateSetStatement;
		}

		// Token: 0x06001A27 RID: 6695 RVA: 0x000ECF24 File Offset: 0x000EB124
		public SetVariableStatement setVariableStatement()
		{
			SetVariableStatement setVariableStatement = base.FragmentFactory.CreateFragment<SetVariableStatement>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				setVariableStatement.Variable = variableReference;
			}
			int num = this.LA(1);
			if (num != 200 && num != 203)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				int num2 = this.LA(1);
				if (num2 <= 101)
				{
					if (num2 <= 34)
					{
						if (num2 != 20 && num2 != 25 && num2 != 34)
						{
							goto IL_033E;
						}
					}
					else if (num2 <= 81)
					{
						switch (num2)
						{
						case 40:
						case 41:
							break;
						case 42:
						{
							CursorDefinition cursorDefinition = this.cursorDefinition();
							if (this.inputState.guessing == 0)
							{
								setVariableStatement.CursorDefinition = cursorDefinition;
								return setVariableStatement;
							}
							return setVariableStatement;
						}
						default:
							if (num2 != 81)
							{
								goto IL_033E;
							}
							break;
						}
					}
					else if (num2 != 93)
					{
						switch (num2)
						{
						case 100:
						case 101:
							break;
						default:
							goto IL_033E;
						}
					}
				}
				else if (num2 <= 147)
				{
					if (num2 <= 136)
					{
						if (num2 != 133 && num2 != 136)
						{
							goto IL_033E;
						}
					}
					else if (num2 != 141 && num2 != 147)
					{
						goto IL_033E;
					}
				}
				else if (num2 <= 193)
				{
					if (num2 != 163)
					{
						switch (num2)
						{
						case 191:
						case 193:
							break;
						case 192:
							goto IL_033E;
						default:
							goto IL_033E;
						}
					}
				}
				else
				{
					switch (num2)
					{
					case 197:
					case 199:
					case 200:
						break;
					case 198:
						goto IL_033E;
					default:
						switch (num2)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							break;
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 226:
						case 229:
							goto IL_033E;
						default:
							goto IL_033E;
						}
						break;
					}
				}
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					setVariableStatement.Expression = scalarExpression;
					return setVariableStatement;
				}
				return setVariableStatement;
				IL_033E:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				int num3 = this.LA(1);
				if (num3 != 200)
				{
					if (num3 != 203)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(203);
					if (this.inputState.guessing == 0)
					{
						setVariableStatement.SeparatorType = SeparatorType.DoubleColon;
					}
				}
				else
				{
					this.match(200);
					if (this.inputState.guessing == 0)
					{
						setVariableStatement.SeparatorType = SeparatorType.Dot;
					}
				}
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					setVariableStatement.Identifier = identifier;
				}
				int num4 = this.LA(1);
				if (num4 != 191)
				{
					if (num4 != 206)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(206);
					ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
					if (this.inputState.guessing == 0)
					{
						setVariableStatement.Expression = scalarExpression;
					}
				}
				else
				{
					this.parenthesizedOptExpressionWithDefaultList(setVariableStatement, setVariableStatement.Parameters);
					if (this.inputState.guessing == 0)
					{
						setVariableStatement.FunctionCallExists = true;
					}
				}
			}
			return setVariableStatement;
		}

		// Token: 0x06001A28 RID: 6696 RVA: 0x000ED298 File Offset: 0x000EB498
		public SetStatisticsStatement setStatisticsStatement()
		{
			SetStatisticsStatement setStatisticsStatement = base.FragmentFactory.CreateFragment<SetStatisticsStatement>();
			this.match(146);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				setStatisticsStatement.Options = SetStatisticsOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					setStatisticsStatement.Options |= SetStatisticsOptionsHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql90);
				}
			}
			this.setOnOff(setStatisticsStatement);
			return setStatisticsStatement;
		}

		// Token: 0x06001A29 RID: 6697 RVA: 0x000ED350 File Offset: 0x000EB550
		public SetRowCountStatement setRowcountStatement()
		{
			SetRowCountStatement setRowCountStatement = base.FragmentFactory.CreateFragment<SetRowCountStatement>();
			this.match(135);
			ValueExpression valueExpression = this.integerOrVariable();
			if (this.inputState.guessing == 0)
			{
				setRowCountStatement.NumberRows = valueExpression;
			}
			return setRowCountStatement;
		}

		// Token: 0x06001A2A RID: 6698 RVA: 0x000ED390 File Offset: 0x000EB590
		public SetOffsetsStatement setOffsetsStatement()
		{
			SetOffsetsStatement setOffsetsStatement = base.FragmentFactory.CreateFragment<SetOffsetsStatement>();
			this.match(104);
			SetOffsets setOffsets = this.offsetItem();
			if (this.inputState.guessing == 0)
			{
				setOffsetsStatement.Options = setOffsets;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				setOffsets = this.offsetItem();
				if (this.inputState.guessing == 0)
				{
					setOffsetsStatement.Options |= setOffsets;
				}
			}
			this.setOnOff(setOffsetsStatement);
			return setOffsetsStatement;
		}

		// Token: 0x06001A2B RID: 6699 RVA: 0x000ED414 File Offset: 0x000EB614
		public SetCommandStatement setCommandStatement()
		{
			SetCommandStatement setCommandStatement = base.FragmentFactory.CreateFragment<SetCommandStatement>();
			SetCommand setCommand = this.setCommand();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetCommand>(setCommandStatement, setCommandStatement.Commands, setCommand);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				setCommand = this.setCommand();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetCommand>(setCommandStatement, setCommandStatement.Commands, setCommand);
				}
			}
			return setCommandStatement;
		}

		// Token: 0x06001A2C RID: 6700 RVA: 0x000ED48C File Offset: 0x000EB68C
		public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement()
		{
			SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement = base.FragmentFactory.CreateFragment<SetTransactionIsolationLevelStatement>();
			switch (this.LA(1))
			{
			case 153:
				this.match(153);
				break;
			case 154:
				this.match(154);
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ISOLATION");
				TSql80ParserBaseInternal.Match(token2, "LEVEL");
			}
			if (this.LA(1) == 124)
			{
				this.match(124);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token3, "COMMITTED"))
					{
						setTransactionIsolationLevelStatement.Level = IsolationLevel.ReadCommitted;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token3, "UNCOMMITTED");
						setTransactionIsolationLevelStatement.Level = IsolationLevel.ReadUncommitted;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(setTransactionIsolationLevelStatement, token3);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 124)
			{
				IToken token4 = this.LT(1);
				this.match(232);
				IToken token5 = this.LT(1);
				this.match(124);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "REPEATABLE");
					setTransactionIsolationLevelStatement.Level = IsolationLevel.RepeatableRead;
					TSql80ParserBaseInternal.UpdateTokenInfo(setTransactionIsolationLevelStatement, token5);
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token6 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token6, "SNAPSHOT"))
					{
						setTransactionIsolationLevelStatement.Level = IsolationLevel.Snapshot;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token6, "SERIALIZABLE");
						setTransactionIsolationLevelStatement.Level = IsolationLevel.Serializable;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(setTransactionIsolationLevelStatement, token6);
				}
			}
			return setTransactionIsolationLevelStatement;
		}

		// Token: 0x06001A2D RID: 6701 RVA: 0x000ED6AC File Offset: 0x000EB8AC
		public SetTextSizeStatement setTextSizeStatement()
		{
			SetTextSizeStatement setTextSizeStatement = base.FragmentFactory.CreateFragment<SetTextSizeStatement>();
			this.match(149);
			ScalarExpression scalarExpression = this.signedInteger();
			if (this.inputState.guessing == 0)
			{
				setTextSizeStatement.TextSize = scalarExpression;
			}
			return setTextSizeStatement;
		}

		// Token: 0x06001A2E RID: 6702 RVA: 0x000ED6EC File Offset: 0x000EB8EC
		public SetIdentityInsertStatement setIdentityInsertStatement()
		{
			SetIdentityInsertStatement setIdentityInsertStatement = base.FragmentFactory.CreateFragment<SetIdentityInsertStatement>();
			this.match(80);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				setIdentityInsertStatement.Table = schemaObjectName;
			}
			this.setOnOff(setIdentityInsertStatement);
			return setIdentityInsertStatement;
		}

		// Token: 0x06001A2F RID: 6703 RVA: 0x000ED730 File Offset: 0x000EB930
		public SetErrorLevelStatement setErrorLevelStatement()
		{
			SetErrorLevelStatement setErrorLevelStatement = base.FragmentFactory.CreateFragment<SetErrorLevelStatement>();
			this.match(57);
			ScalarExpression scalarExpression = this.signedInteger();
			if (this.inputState.guessing == 0)
			{
				setErrorLevelStatement.Level = scalarExpression;
			}
			return setErrorLevelStatement;
		}

		// Token: 0x06001A30 RID: 6704 RVA: 0x000ED770 File Offset: 0x000EB970
		public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList<ScalarExpression> expressions)
		{
			this.match(191);
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_0193;
					}
				}
				else if (num <= 47)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 47)
						{
							goto IL_0193;
						}
						break;
					}
				}
				else if (num != 81 && num != 93)
				{
					goto IL_0193;
				}
			}
			else if (num <= 141)
			{
				if (num <= 133)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_0193;
						}
						break;
					}
				}
				else if (num != 136 && num != 141)
				{
					goto IL_0193;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_0193;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_01A6;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_0193;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_0193;
					default:
						goto IL_0193;
					}
					break;
				}
			}
			this.expressionWithDefaultList(vParent, expressions);
			goto IL_01A6;
			IL_0193:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_01A6:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06001A31 RID: 6705 RVA: 0x000ED94C File Offset: 0x000EBB4C
		public CursorDefinition cursorDefinition()
		{
			List<CursorOption> list = new List<CursorOption>();
			return this.cursorDefinitionOptions(list);
		}

		// Token: 0x06001A32 RID: 6706 RVA: 0x000ED968 File Offset: 0x000EBB68
		public void setOnOff(SetOnOffStatement vParent)
		{
			switch (this.LA(1))
			{
			case 103:
			{
				IToken token = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.IsOn = false;
					return;
				}
				return;
			}
			case 105:
			{
				IToken token2 = this.LT(1);
				this.match(105);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					vParent.IsOn = true;
					return;
				}
				return;
			}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A33 RID: 6707 RVA: 0x000EDA04 File Offset: 0x000EBC04
		public SetOffsets offsetItem()
		{
			SetOffsets setOffsets = SetOffsets.None;
			int num = this.LA(1);
			if (num <= 113)
			{
				if (num <= 61)
				{
					if (num != 29)
					{
						switch (num)
						{
						case 60:
						case 61:
							switch (this.LA(1))
							{
							case 60:
								this.match(60);
								break;
							case 61:
								this.match(61);
								break;
							default:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							if (this.inputState.guessing == 0)
							{
								return SetOffsets.Execute;
							}
							return setOffsets;
						}
					}
					else
					{
						this.match(29);
						if (this.inputState.guessing == 0)
						{
							return SetOffsets.Compute;
						}
						return setOffsets;
					}
				}
				else if (num != 71)
				{
					if (num == 113)
					{
						this.match(113);
						if (this.inputState.guessing == 0)
						{
							return SetOffsets.Order;
						}
						return setOffsets;
					}
				}
				else
				{
					this.match(71);
					if (this.inputState.guessing == 0)
					{
						return SetOffsets.From;
					}
					return setOffsets;
				}
			}
			else if (num <= 140)
			{
				switch (num)
				{
				case 120:
				case 121:
					switch (this.LA(1))
					{
					case 120:
						this.match(120);
						break;
					case 121:
						this.match(121);
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.inputState.guessing == 0)
					{
						return SetOffsets.Procedure;
					}
					return setOffsets;
				default:
					if (num == 140)
					{
						this.match(140);
						if (this.inputState.guessing == 0)
						{
							return SetOffsets.Select;
						}
						return setOffsets;
					}
					break;
				}
			}
			else if (num != 148)
			{
				if (num == 232)
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing != 0)
					{
						return setOffsets;
					}
					if (TSql80ParserBaseInternal.TryMatch(token, "STATEMENT"))
					{
						return SetOffsets.Statement;
					}
					TSql80ParserBaseInternal.Match(token, "PARAM");
					return SetOffsets.Param;
				}
			}
			else
			{
				this.match(148);
				if (this.inputState.guessing == 0)
				{
					return SetOffsets.Table;
				}
				return setOffsets;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A34 RID: 6708 RVA: 0x000EDC48 File Offset: 0x000EBE48
		public SetCommand setCommand()
		{
			SetCommand setCommand = null;
			if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 103 || this.LA(2) == 232) && base.NextTokenMatches("FIPS_FLAGGER"))
			{
				this.LT(1);
				this.match(232);
				setCommand = this.fipsFlaggerLevel();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_51_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				ScalarExpression scalarExpression = this.possibleNegativeConstantOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					GeneralSetCommand generalSetCommand = base.FragmentFactory.CreateFragment<GeneralSetCommand>();
					generalSetCommand.CommandType = GeneralSetCommandTypeHelper.Instance.ParseOption(token);
					generalSetCommand.Parameter = scalarExpression;
					setCommand = generalSetCommand;
				}
			}
			return setCommand;
		}

		// Token: 0x06001A35 RID: 6709 RVA: 0x000EDD3C File Offset: 0x000EBF3C
		public SetFipsFlaggerCommand fipsFlaggerLevel()
		{
			SetFipsFlaggerCommand setFipsFlaggerCommand = base.FragmentFactory.CreateFragment<SetFipsFlaggerCommand>();
			int num = this.LA(1);
			if (num != 72)
			{
				if (num != 103)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						setFipsFlaggerCommand.ComplianceLevel = FipsComplianceLevelHelper.Instance.ParseOption(token);
						TSql80ParserBaseInternal.UpdateTokenInfo(setFipsFlaggerCommand, token);
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(103);
					if (this.inputState.guessing == 0)
					{
						setFipsFlaggerCommand.ComplianceLevel = FipsComplianceLevel.Off;
						TSql80ParserBaseInternal.UpdateTokenInfo(setFipsFlaggerCommand, token2);
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(72);
				if (this.inputState.guessing == 0)
				{
					setFipsFlaggerCommand.ComplianceLevel = FipsComplianceLevel.Full;
					TSql80ParserBaseInternal.UpdateTokenInfo(setFipsFlaggerCommand, token3);
				}
			}
			return setFipsFlaggerCommand;
		}

		// Token: 0x06001A36 RID: 6710 RVA: 0x000EDE28 File Offset: 0x000EC028
		public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement)
		{
			TableDefinition tableDefinition = base.FragmentFactory.CreateFragment<TableDefinition>();
			if (base.PhaseOne && vStatement != null)
			{
				vStatement.Definition = tableDefinition;
			}
			this.tableElement(statementType, tableDefinition, vStatement);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.tableElement(statementType, tableDefinition, vStatement);
			}
			return tableDefinition;
		}

		// Token: 0x06001A37 RID: 6711 RVA: 0x000EDE84 File Offset: 0x000EC084
		public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement)
		{
			int num = this.LA(1);
			if (num <= 47)
			{
				if (num != 21 && num != 30 && num != 47)
				{
					goto IL_0095;
				}
			}
			else if (num <= 118)
			{
				if (num != 68 && num != 118)
				{
					goto IL_0095;
				}
			}
			else if (num != 159)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					ColumnDefinition columnDefinition = this.columnDefinition(statementType, vStatement);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnDefinition>(vParent, vParent.ColumnDefinitions, columnDefinition);
						return;
					}
					return;
				}
				default:
					goto IL_0095;
				}
			}
			ConstraintDefinition constraintDefinition = this.tableConstraint(statementType, vStatement);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ConstraintDefinition>(vParent, vParent.TableConstraints, constraintDefinition);
				return;
			}
			return;
			IL_0095:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A38 RID: 6712 RVA: 0x000EDF3C File Offset: 0x000EC13C
		public void cursorOpts(bool oldSyntax, IList<CursorOption> vOptions)
		{
			while (this.LA(1) == 232)
			{
				CursorOption cursorOption = this.cursorOption();
				if (this.inputState.guessing == 0)
				{
					if (oldSyntax)
					{
						if (cursorOption.OptionKind != CursorOptionKind.Insensitive && cursorOption.OptionKind != CursorOptionKind.Scroll)
						{
							TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(cursorOption);
						}
					}
					else if (cursorOption.OptionKind == CursorOptionKind.Insensitive)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(cursorOption);
					}
					vOptions.Add(cursorOption);
				}
			}
		}

		// Token: 0x06001A39 RID: 6713 RVA: 0x000EDFA0 File Offset: 0x000EC1A0
		public CursorDefinition cursorDefinitionOptions(IList<CursorOption> vOptions)
		{
			CursorDefinition cursorDefinition = base.FragmentFactory.CreateFragment<CursorDefinition>();
			this.match(42);
			this.cursorOpts(false, vOptions);
			this.match(67);
			SelectStatement selectStatement = this.selectStatement();
			if (this.inputState.guessing == 0)
			{
				cursorDefinition.Select = selectStatement;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CursorOption>(cursorDefinition, cursorDefinition.Options, vOptions);
			}
			return cursorDefinition;
		}

		// Token: 0x06001A3A RID: 6714 RVA: 0x000EDFFC File Offset: 0x000EC1FC
		public SelectStatement selectStatement()
		{
			WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = null;
			int num = this.LA(1);
			if (num != 140)
			{
				if (num != 171)
				{
					if (num != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
				}
			}
			SelectStatement selectStatement = this.select();
			if (this.inputState.guessing == 0)
			{
				selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
			}
			return selectStatement;
		}

		// Token: 0x06001A3B RID: 6715 RVA: 0x000EE068 File Offset: 0x000EC268
		public CursorOption cursorOption()
		{
			CursorOption cursorOption = base.FragmentFactory.CreateFragment<CursorOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				cursorOption.OptionKind = CursorOptionsHelper.Instance.ParseOption(token);
			}
			return cursorOption;
		}

		// Token: 0x06001A3C RID: 6716 RVA: 0x000EE0B8 File Offset: 0x000EC2B8
		public void indexLegacyOptionList(CreateIndexStatement vParent)
		{
			IndexOption indexOption = this.indexLegacyOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.VerifyAllowedIndexOption(IndexAffectingStatement.CreateIndex, indexOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, indexOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				indexOption = this.indexLegacyOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.VerifyAllowedIndexOption(IndexAffectingStatement.CreateIndex, indexOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, indexOption);
				}
			}
		}

		// Token: 0x06001A3D RID: 6717 RVA: 0x000EE130 File Offset: 0x000EC330
		public IndexOption indexLegacyOption()
		{
			IndexOption indexOption = null;
			int num = this.LA(1);
			if (num != 66)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
					indexOption = indexStateOption;
					indexStateOption.OptionKind = TSql80ParserBaseInternal.ParseIndexLegacyWithOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
					indexStateOption.OptionState = OptionState.On;
				}
			}
			else
			{
				indexOption = this.fillFactorOption();
			}
			return indexOption;
		}

		// Token: 0x06001A3E RID: 6718 RVA: 0x000EE1C0 File Offset: 0x000EC3C0
		public IndexExpressionOption fillFactorOption()
		{
			IndexExpressionOption indexExpressionOption = base.FragmentFactory.CreateFragment<IndexExpressionOption>();
			IToken token = this.LT(1);
			this.match(66);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckFillFactorRange(literal);
				indexExpressionOption.OptionKind = IndexOptionKind.FillFactor;
				indexExpressionOption.Expression = literal;
				TSql80ParserBaseInternal.UpdateTokenInfo(indexExpressionOption, token);
			}
			return indexExpressionOption;
		}

		// Token: 0x06001A3F RID: 6719 RVA: 0x000EE228 File Offset: 0x000EC428
		public IndexOption indexOption()
		{
			IndexOption indexOption;
			if (this.LA(1) == 66)
			{
				indexOption = this.fillFactorOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP"))
			{
				indexOption = this.maxDopOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				indexOption = this.indexStateOption();
			}
			return indexOption;
		}

		// Token: 0x06001A40 RID: 6720 RVA: 0x000EE2B8 File Offset: 0x000EC4B8
		public IndexStateOption indexStateOption()
		{
			IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				indexStateOption.OptionKind = IndexOptionHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
			}
			this.match(206);
			OptionState optionState = this.optionOnOff(indexStateOption);
			if (this.inputState.guessing == 0)
			{
				indexStateOption.OptionState = optionState;
			}
			return indexStateOption;
		}

		// Token: 0x06001A41 RID: 6721 RVA: 0x000EE334 File Offset: 0x000EC534
		public XmlNamespaces xmlNamespaces()
		{
			XmlNamespaces xmlNamespaces = base.FragmentFactory.CreateFragment<XmlNamespaces>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XMLNAMESPACES");
			}
			this.match(191);
			XmlNamespacesElement xmlNamespacesElement = this.xmlNamespacesElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlNamespacesElement>(xmlNamespaces, xmlNamespaces.XmlNamespacesElements, xmlNamespacesElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				xmlNamespacesElement = this.xmlNamespacesElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlNamespacesElement>(xmlNamespaces, xmlNamespaces.XmlNamespacesElements, xmlNamespacesElement);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(xmlNamespaces, token2);
			}
			return xmlNamespaces;
		}

		// Token: 0x06001A42 RID: 6722 RVA: 0x000EE40C File Offset: 0x000EC60C
		public CommonTableExpression commonTableExpression()
		{
			CommonTableExpression commonTableExpression = base.FragmentFactory.CreateFragment<CommonTableExpression>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				commonTableExpression.ExpressionName = identifier;
			}
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.columnNameList(commonTableExpression, commonTableExpression.Columns);
			}
			this.match(9);
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				commonTableExpression.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(commonTableExpression, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(commonTableExpression, token2);
			}
			return commonTableExpression;
		}

		// Token: 0x06001A43 RID: 6723 RVA: 0x000EE4D8 File Offset: 0x000EC6D8
		public XmlNamespacesElement xmlNamespacesElement()
		{
			int num = this.LA(1);
			XmlNamespacesElement xmlNamespacesElement;
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
					xmlNamespacesElement = this.xmlNamespacesAliasElement();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				xmlNamespacesElement = this.xmlNamespacesDefaultElement();
			}
			return xmlNamespacesElement;
		}

		// Token: 0x06001A44 RID: 6724 RVA: 0x000EE530 File Offset: 0x000EC730
		public XmlNamespacesDefaultElement xmlNamespacesDefaultElement()
		{
			XmlNamespacesDefaultElement xmlNamespacesDefaultElement = base.FragmentFactory.CreateFragment<XmlNamespacesDefaultElement>();
			IToken token = this.LT(1);
			this.match(47);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(xmlNamespacesDefaultElement, token);
			}
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				xmlNamespacesDefaultElement.String = stringLiteral;
			}
			return xmlNamespacesDefaultElement;
		}

		// Token: 0x06001A45 RID: 6725 RVA: 0x000EE58C File Offset: 0x000EC78C
		public XmlNamespacesAliasElement xmlNamespacesAliasElement()
		{
			XmlNamespacesAliasElement xmlNamespacesAliasElement = base.FragmentFactory.CreateFragment<XmlNamespacesAliasElement>();
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				xmlNamespacesAliasElement.String = stringLiteral;
			}
			this.match(9);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				xmlNamespacesAliasElement.Identifier = identifier;
			}
			return xmlNamespacesAliasElement;
		}

		// Token: 0x06001A46 RID: 6726 RVA: 0x000EE5E4 File Offset: 0x000EC7E4
		public QueryExpression queryExpression(SelectStatement vSelectStatement)
		{
			BinaryQueryExpression binaryQueryExpression = null;
			QueryExpression queryExpression = this.queryExpressionUnit(vSelectStatement);
			while (this.LA(1) == 59 || this.LA(1) == 87 || this.LA(1) == 158)
			{
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression = base.FragmentFactory.CreateFragment<BinaryQueryExpression>();
					binaryQueryExpression.FirstQueryExpression = queryExpression;
				}
				int num = this.LA(1);
				if (num != 59)
				{
					if (num != 87)
					{
						if (num != 158)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(158);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Union;
						}
					}
					else
					{
						this.match(87);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Intersect;
						}
					}
				}
				else
				{
					this.match(59);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Except;
					}
				}
				int num2 = this.LA(1);
				if (num2 != 5)
				{
					if (num2 != 140 && num2 != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(5);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.All = true;
					}
				}
				queryExpression = this.queryExpressionUnit(null);
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression.SecondQueryExpression = queryExpression;
					queryExpression = binaryQueryExpression;
				}
			}
			return queryExpression;
		}

		// Token: 0x06001A47 RID: 6727 RVA: 0x000EE744 File Offset: 0x000EC944
		public OrderByClause orderByClause()
		{
			OrderByClause orderByClause = base.FragmentFactory.CreateFragment<OrderByClause>();
			IToken token = this.LT(1);
			this.match(113);
			this.match(18);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(orderByClause, token);
			}
			ExpressionWithSortOrder expressionWithSortOrder = this.expressionWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExpressionWithSortOrder>(orderByClause, orderByClause.OrderByElements, expressionWithSortOrder);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				expressionWithSortOrder = this.expressionWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExpressionWithSortOrder>(orderByClause, orderByClause.OrderByElements, expressionWithSortOrder);
				}
			}
			return orderByClause;
		}

		// Token: 0x06001A48 RID: 6728 RVA: 0x000EE7EC File Offset: 0x000EC9EC
		public ComputeClause computeClause()
		{
			ComputeClause computeClause = base.FragmentFactory.CreateFragment<ComputeClause>();
			IToken token = this.LT(1);
			this.match(29);
			ComputeFunction computeFunction = this.computeFunction();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(computeClause, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ComputeFunction>(computeClause, computeClause.ComputeFunctions, computeFunction);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				computeFunction = this.computeFunction();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ComputeFunction>(computeClause, computeClause.ComputeFunctions, computeFunction);
				}
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 64)
				{
					if (num <= 23)
					{
						if (num == 1)
						{
							return computeClause;
						}
						switch (num)
						{
						case 4:
						case 6:
							return computeClause;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
							case 22:
							case 23:
								return computeClause;
							case 18:
								this.match(18);
								this.expressionList(computeClause, computeClause.ByExpressions);
								return computeClause;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 28:
						case 29:
							return computeClause;
						default:
							switch (num)
							{
							case 33:
							case 35:
								return computeClause;
							case 34:
								break;
							default:
								switch (num)
								{
								case 44:
								case 45:
								case 46:
								case 48:
								case 49:
								case 54:
								case 55:
								case 56:
								case 60:
								case 61:
								case 64:
									return computeClause;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					if (num == 67)
					{
						return computeClause;
					}
					switch (num)
					{
					case 74:
					case 75:
						return computeClause;
					default:
						if (num == 82)
						{
							return computeClause;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return computeClause;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 111 || num == 119)
					{
						return computeClause;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return computeClause;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return computeClause;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return computeClause;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return computeClause;
				}
				switch (num)
				{
				case 180:
				case 181:
					return computeClause;
				default:
					if (num == 191)
					{
						return computeClause;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return computeClause;
				}
				switch (num)
				{
				case 219:
				case 220:
					return computeClause;
				default:
					if (num == 232)
					{
						return computeClause;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A49 RID: 6729 RVA: 0x000EEB1C File Offset: 0x000ECD1C
		public ForClause forClause()
		{
			ForClause forClause = null;
			IToken token = this.LT(1);
			this.match(67);
			int num = this.LA(1);
			if (num <= 124)
			{
				if (num != 16)
				{
					if (num == 124)
					{
						this.match(124);
						IToken token2 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "ONLY");
							forClause = base.FragmentFactory.CreateFragment<ReadOnlyForClause>();
							TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token2);
							return forClause;
						}
						return forClause;
					}
				}
				else
				{
					forClause = this.browseForClause();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
						return forClause;
					}
					return forClause;
				}
			}
			else if (num != 160)
			{
				if (num == 232)
				{
					forClause = this.xmlForClause();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
						return forClause;
					}
					return forClause;
				}
			}
			else
			{
				forClause = this.updateForClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
					return forClause;
				}
				return forClause;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A4A RID: 6730 RVA: 0x000EEC2C File Offset: 0x000ECE2C
		public void optimizerHints(TSqlFragment vParent, IList<OptimizerHint> hintsCollection)
		{
			IToken token = this.LT(1);
			this.match(111);
			this.match(191);
			OptimizerHint optimizerHint = this.hint();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<OptimizerHint>(vParent, hintsCollection, optimizerHint);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				optimizerHint = this.hint();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<OptimizerHint>(vParent, hintsCollection, optimizerHint);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001A4B RID: 6731 RVA: 0x000EECDC File Offset: 0x000ECEDC
		public QueryDerivedTable derivedTable()
		{
			QueryDerivedTable queryDerivedTable = base.FragmentFactory.CreateFragment<QueryDerivedTable>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				queryDerivedTable.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(queryDerivedTable, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(queryDerivedTable, token2);
			}
			this.simpleTableReferenceAlias(queryDerivedTable);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(queryDerivedTable, queryDerivedTable.Columns);
			}
			else if (!TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return queryDerivedTable;
		}

		// Token: 0x06001A4C RID: 6732 RVA: 0x000EEDC4 File Offset: 0x000ECFC4
		public void simpleTableReferenceAlias(TableReferenceWithAlias vParent)
		{
			int num = this.LA(1);
			if (num != 9)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
			}
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				vParent.Alias = identifier;
			}
		}

		// Token: 0x06001A4D RID: 6733 RVA: 0x000EEE2C File Offset: 0x000ED02C
		public ScalarSubquery subquery(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ScalarSubquery scalarSubquery = base.FragmentFactory.CreateFragment<ScalarSubquery>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				if (ExpressionFlags.ScalarSubqueriesDisallowed == (expressionFlags & ExpressionFlags.ScalarSubqueriesDisallowed))
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46098", queryExpression, TSqlParserResource.SQL46098Message, new string[0]);
				}
				scalarSubquery.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarSubquery, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarSubquery, token2);
			}
			return scalarSubquery;
		}

		// Token: 0x06001A4E RID: 6734 RVA: 0x000EEEB8 File Offset: 0x000ED0B8
		public QueryExpression subqueryExpressionUnit()
		{
			int num = this.LA(1);
			QueryExpression queryExpression;
			if (num != 140)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				queryExpression = this.subqueryParenthesis();
			}
			else
			{
				queryExpression = this.subquerySpecification();
			}
			return queryExpression;
		}

		// Token: 0x06001A4F RID: 6735 RVA: 0x000EEF08 File Offset: 0x000ED108
		public QuerySpecification subquerySpecification()
		{
			QuerySpecification querySpecification = base.FragmentFactory.CreateFragment<QuerySpecification>();
			IToken token = this.LT(1);
			this.match(140);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(querySpecification, token);
			}
			this.uniqueRowFilterOpt(querySpecification);
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num == 20 || num == 25 || num == 34)
					{
						goto IL_0210;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_0210;
					default:
						switch (num)
						{
						case 79:
						case 81:
							goto IL_0210;
						}
						break;
					}
				}
				else
				{
					if (num == 93)
					{
						goto IL_0210;
					}
					switch (num)
					{
					case 100:
					case 101:
						goto IL_0210;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num == 133 || num == 136)
					{
						goto IL_0210;
					}
				}
				else if (num == 141 || num == 147)
				{
					goto IL_0210;
				}
			}
			else if (num <= 163)
			{
				if (num != 152)
				{
					if (num == 163)
					{
						goto IL_0210;
					}
				}
				else
				{
					TopRowFilter topRowFilter = this.topRowFilter();
					if (this.inputState.guessing == 0)
					{
						querySpecification.TopRowFilter = topRowFilter;
						goto IL_0210;
					}
					goto IL_0210;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_0210;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_0210;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0210:
			SelectElement selectElement = this.selectColumnOrStarExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(querySpecification, querySpecification.SelectElements, selectElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				selectElement = this.selectColumnOrStarExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(querySpecification, querySpecification.SelectElements, selectElement);
				}
			}
			FromClause fromClause = this.fromClauseOpt();
			if (this.inputState.guessing == 0)
			{
				querySpecification.FromClause = fromClause;
			}
			int num2 = this.LA(1);
			if (num2 <= 87)
			{
				if (num2 <= 49)
				{
					if (num2 == 1 || num2 == 35 || num2 == 49)
					{
						goto IL_039C;
					}
				}
				else if (num2 <= 67)
				{
					if (num2 == 59 || num2 == 67)
					{
						goto IL_039C;
					}
				}
				else
				{
					switch (num2)
					{
					case 75:
					case 76:
					case 77:
						goto IL_039C;
					default:
						if (num2 == 87)
						{
							goto IL_039C;
						}
						break;
					}
				}
			}
			else if (num2 <= 158)
			{
				if (num2 == 113 || num2 == 132 || num2 == 158)
				{
					goto IL_039C;
				}
			}
			else if (num2 <= 192)
			{
				switch (num2)
				{
				case 169:
				{
					WhereClause whereClause = this.whereClause();
					if (this.inputState.guessing == 0)
					{
						querySpecification.WhereClause = whereClause;
						goto IL_039C;
					}
					goto IL_039C;
				}
				case 170:
					break;
				case 171:
					goto IL_039C;
				default:
					if (num2 == 192)
					{
						goto IL_039C;
					}
					break;
				}
			}
			else if (num2 == 204 || num2 == 219)
			{
				goto IL_039C;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_039C:
			int num3 = this.LA(1);
			if (num3 <= 87)
			{
				if (num3 <= 49)
				{
					if (num3 == 1 || num3 == 35 || num3 == 49)
					{
						goto IL_0494;
					}
				}
				else if (num3 <= 67)
				{
					if (num3 == 59 || num3 == 67)
					{
						goto IL_0494;
					}
				}
				else
				{
					switch (num3)
					{
					case 75:
					case 77:
						goto IL_0494;
					case 76:
					{
						GroupByClause groupByClause = this.groupByClause();
						if (this.inputState.guessing == 0)
						{
							querySpecification.GroupByClause = groupByClause;
							goto IL_0494;
						}
						goto IL_0494;
					}
					default:
						if (num3 == 87)
						{
							goto IL_0494;
						}
						break;
					}
				}
			}
			else if (num3 <= 158)
			{
				if (num3 == 113 || num3 == 132 || num3 == 158)
				{
					goto IL_0494;
				}
			}
			else if (num3 <= 192)
			{
				if (num3 == 171 || num3 == 192)
				{
					goto IL_0494;
				}
			}
			else if (num3 == 204 || num3 == 219)
			{
				goto IL_0494;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0494:
			int num4 = this.LA(1);
			if (num4 <= 87)
			{
				if (num4 <= 49)
				{
					if (num4 == 1 || num4 == 35 || num4 == 49)
					{
						goto IL_058C;
					}
				}
				else if (num4 <= 67)
				{
					if (num4 == 59 || num4 == 67)
					{
						goto IL_058C;
					}
				}
				else
				{
					switch (num4)
					{
					case 75:
						goto IL_058C;
					case 76:
						break;
					case 77:
					{
						HavingClause havingClause = this.havingClause();
						if (this.inputState.guessing == 0)
						{
							querySpecification.HavingClause = havingClause;
							goto IL_058C;
						}
						goto IL_058C;
					}
					default:
						if (num4 == 87)
						{
							goto IL_058C;
						}
						break;
					}
				}
			}
			else if (num4 <= 158)
			{
				if (num4 == 113 || num4 == 132 || num4 == 158)
				{
					goto IL_058C;
				}
			}
			else if (num4 <= 192)
			{
				if (num4 == 171 || num4 == 192)
				{
					goto IL_058C;
				}
			}
			else if (num4 == 204 || num4 == 219)
			{
				goto IL_058C;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_058C:
			int num5 = this.LA(1);
			if (num5 <= 87)
			{
				if (num5 <= 49)
				{
					if (num5 == 1 || num5 == 35 || num5 == 49)
					{
						goto IL_0677;
					}
				}
				else if (num5 <= 67)
				{
					if (num5 == 59 || num5 == 67)
					{
						goto IL_0677;
					}
				}
				else if (num5 == 75 || num5 == 87)
				{
					goto IL_0677;
				}
			}
			else if (num5 <= 158)
			{
				if (num5 != 113)
				{
					if (num5 == 132 || num5 == 158)
					{
						goto IL_0677;
					}
				}
				else
				{
					OrderByClause orderByClause = this.orderByClause();
					if (this.inputState.guessing == 0)
					{
						querySpecification.OrderByClause = orderByClause;
						goto IL_0677;
					}
					goto IL_0677;
				}
			}
			else if (num5 <= 192)
			{
				if (num5 == 171 || num5 == 192)
				{
					goto IL_0677;
				}
			}
			else if (num5 == 204 || num5 == 219)
			{
				goto IL_0677;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0677:
			if (this.LA(1) == 67 && this.LA(2) == 16 && this.LA(1) == 67 && this.LA(2) == 16)
			{
				this.match(67);
				BrowseForClause browseForClause = this.browseForClause();
				if (this.inputState.guessing == 0)
				{
					querySpecification.ForClause = browseForClause;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_75_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num6 = this.LA(1);
			if (num6 <= 75)
			{
				if (num6 <= 49)
				{
					if (num6 == 1 || num6 == 35 || num6 == 49)
					{
						goto IL_0801;
					}
				}
				else
				{
					if (num6 == 59)
					{
						goto IL_0801;
					}
					if (num6 != 67)
					{
						if (num6 == 75)
						{
							goto IL_0801;
						}
					}
					else
					{
						IToken token2 = this.LT(1);
						this.match(67);
						XmlForClause xmlForClause = this.xmlForClause();
						if (this.inputState.guessing == 0)
						{
							if (querySpecification.ForClause != null)
							{
								TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
							}
							querySpecification.ForClause = xmlForClause;
							goto IL_0801;
						}
						goto IL_0801;
					}
				}
			}
			else if (num6 <= 158)
			{
				if (num6 == 87 || num6 == 132 || num6 == 158)
				{
					goto IL_0801;
				}
			}
			else if (num6 <= 192)
			{
				if (num6 == 171 || num6 == 192)
				{
					goto IL_0801;
				}
			}
			else if (num6 == 204 || num6 == 219)
			{
				goto IL_0801;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0801:
			if (this.inputState.guessing == 0)
			{
				if (querySpecification.OrderByClause != null && querySpecification.TopRowFilter == null && querySpecification.ForClause == null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46047", querySpecification, TSqlParserResource.SQL46047Message, new string[0]);
				}
				if (querySpecification.TopRowFilter != null && querySpecification.TopRowFilter.WithTies && querySpecification.OrderByClause == null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46048", querySpecification, TSqlParserResource.SQL46048Message, new string[0]);
				}
			}
			return querySpecification;
		}

		// Token: 0x06001A50 RID: 6736 RVA: 0x000EF788 File Offset: 0x000ED988
		public QueryParenthesisExpression subqueryParenthesis()
		{
			QueryParenthesisExpression queryParenthesisExpression = base.FragmentFactory.CreateFragment<QueryParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token);
				queryParenthesisExpression.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token2);
			}
			return queryParenthesisExpression;
		}

		// Token: 0x06001A51 RID: 6737 RVA: 0x000EF7F8 File Offset: 0x000ED9F8
		public QueryExpression queryExpressionUnit(SelectStatement vSelectStatement)
		{
			int num = this.LA(1);
			QueryExpression queryExpression;
			if (num != 140)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				queryExpression = this.queryParenthesis(vSelectStatement);
			}
			else
			{
				queryExpression = this.querySpecification(vSelectStatement);
			}
			return queryExpression;
		}

		// Token: 0x06001A52 RID: 6738 RVA: 0x000EF84C File Offset: 0x000EDA4C
		public QuerySpecification querySpecification(SelectStatement vSelectStatement)
		{
			QuerySpecification querySpecification = base.FragmentFactory.CreateFragment<QuerySpecification>();
			IToken token = this.LT(1);
			this.match(140);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(querySpecification, token);
			}
			this.uniqueRowFilterOpt(querySpecification);
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num == 20 || num == 25 || num == 34)
					{
						goto IL_0210;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_0210;
					default:
						switch (num)
						{
						case 79:
						case 81:
							goto IL_0210;
						}
						break;
					}
				}
				else
				{
					if (num == 93)
					{
						goto IL_0210;
					}
					switch (num)
					{
					case 100:
					case 101:
						goto IL_0210;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num == 133 || num == 136)
					{
						goto IL_0210;
					}
				}
				else if (num == 141 || num == 147)
				{
					goto IL_0210;
				}
			}
			else if (num <= 163)
			{
				if (num != 152)
				{
					if (num == 163)
					{
						goto IL_0210;
					}
				}
				else
				{
					TopRowFilter topRowFilter = this.topRowFilter();
					if (this.inputState.guessing == 0)
					{
						querySpecification.TopRowFilter = topRowFilter;
						goto IL_0210;
					}
					goto IL_0210;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_0210;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_0210;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0210:
			this.selectExpression(querySpecification);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.selectExpression(querySpecification);
			}
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 29)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_0566;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_0566;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0566;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_0566;
							default:
								switch (num2)
								{
								case 28:
								case 29:
									goto IL_0566;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 77)
				{
					switch (num2)
					{
					case 33:
					case 35:
						goto IL_0566;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 71:
						case 74:
						case 75:
						case 76:
						case 77:
							goto IL_0566;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 82:
					case 86:
					case 87:
						goto IL_0566;
					case 83:
					case 84:
					case 85:
						break;
					case 88:
					{
						IToken token2 = this.LT(1);
						this.match(88);
						SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
						if (this.inputState.guessing == 0)
						{
							if (vSelectStatement == null)
							{
								TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
							}
							vSelectStatement.Into = schemaObjectName;
							goto IL_0566;
						}
						goto IL_0566;
					}
					default:
						if (num2 == 92 || num2 == 95)
						{
							goto IL_0566;
						}
						break;
					}
				}
			}
			else if (num2 <= 176)
			{
				if (num2 <= 113)
				{
					if (num2 == 106)
					{
						goto IL_0566;
					}
					switch (num2)
					{
					case 111:
					case 113:
						goto IL_0566;
					}
				}
				else
				{
					if (num2 == 119)
					{
						goto IL_0566;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0566;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 169:
						case 170:
						case 171:
						case 172:
						case 176:
							goto IL_0566;
						}
						break;
					}
				}
			}
			else if (num2 <= 192)
			{
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_0566;
				default:
					switch (num2)
					{
					case 191:
					case 192:
						goto IL_0566;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_0566;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_0566;
				default:
					if (num2 == 232)
					{
						goto IL_0566;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0566:
			FromClause fromClause = this.fromClauseOpt();
			if (this.inputState.guessing == 0)
			{
				querySpecification.FromClause = fromClause;
			}
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 29)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							goto IL_088C;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_088C;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_088C;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								goto IL_088C;
							default:
								switch (num3)
								{
								case 28:
								case 29:
									goto IL_088C;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 67)
				{
					switch (num3)
					{
					case 33:
					case 35:
						goto IL_088C;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
							goto IL_088C;
						}
						break;
					}
				}
				else
				{
					switch (num3)
					{
					case 74:
					case 75:
					case 76:
					case 77:
					case 82:
						goto IL_088C;
					case 78:
					case 79:
					case 80:
					case 81:
						break;
					default:
						switch (num3)
						{
						case 86:
						case 87:
							goto IL_088C;
						default:
							if (num3 == 92)
							{
								goto IL_088C;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 144)
			{
				if (num3 <= 106)
				{
					if (num3 == 95 || num3 == 106)
					{
						goto IL_088C;
					}
				}
				else
				{
					switch (num3)
					{
					case 111:
					case 113:
						goto IL_088C;
					case 112:
						break;
					default:
						if (num3 == 119)
						{
							goto IL_088C;
						}
						switch (num3)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_088C;
						}
						break;
					}
				}
			}
			else if (num3 <= 192)
			{
				switch (num3)
				{
				case 156:
				case 158:
				case 160:
				case 161:
				case 162:
				case 167:
				case 170:
				case 171:
				case 172:
				case 176:
					goto IL_088C;
				case 157:
				case 159:
				case 163:
				case 164:
				case 165:
				case 166:
				case 168:
				case 173:
				case 174:
				case 175:
					break;
				case 169:
				{
					WhereClause whereClause = this.whereClause();
					if (this.inputState.guessing == 0)
					{
						querySpecification.WhereClause = whereClause;
						goto IL_088C;
					}
					goto IL_088C;
				}
				default:
					switch (num3)
					{
					case 180:
					case 181:
						goto IL_088C;
					default:
						switch (num3)
						{
						case 191:
						case 192:
							goto IL_088C;
						}
						break;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_088C;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_088C;
				default:
					if (num3 == 232)
					{
						goto IL_088C;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_088C:
			int num4 = this.LA(1);
			if (num4 <= 95)
			{
				if (num4 <= 29)
				{
					if (num4 <= 6)
					{
						if (num4 == 1)
						{
							goto IL_0B8E;
						}
						switch (num4)
						{
						case 4:
						case 6:
							goto IL_0B8E;
						}
					}
					else
					{
						switch (num4)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_0B8E;
						case 14:
						case 16:
							break;
						default:
							switch (num4)
							{
							case 22:
							case 23:
								goto IL_0B8E;
							default:
								switch (num4)
								{
								case 28:
								case 29:
									goto IL_0B8E;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num4 <= 82)
				{
					switch (num4)
					{
					case 33:
					case 35:
						goto IL_0B8E;
					case 34:
						break;
					default:
						switch (num4)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
							goto IL_0B8E;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 62:
						case 63:
						case 65:
						case 66:
							break;
						default:
							switch (num4)
							{
							case 74:
							case 75:
							case 77:
							case 82:
								goto IL_0B8E;
							case 76:
							{
								GroupByClause groupByClause = this.groupByClause();
								if (this.inputState.guessing == 0)
								{
									querySpecification.GroupByClause = groupByClause;
									goto IL_0B8E;
								}
								goto IL_0B8E;
							}
							}
							break;
						}
						break;
					}
				}
				else
				{
					switch (num4)
					{
					case 86:
					case 87:
						goto IL_0B8E;
					default:
						if (num4 == 92 || num4 == 95)
						{
							goto IL_0B8E;
						}
						break;
					}
				}
			}
			else if (num4 <= 172)
			{
				if (num4 <= 113)
				{
					if (num4 == 106)
					{
						goto IL_0B8E;
					}
					switch (num4)
					{
					case 111:
					case 113:
						goto IL_0B8E;
					}
				}
				else
				{
					if (num4 == 119)
					{
						goto IL_0B8E;
					}
					switch (num4)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_0B8E;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num4)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_0B8E;
						}
						break;
					}
				}
			}
			else if (num4 <= 192)
			{
				if (num4 == 176)
				{
					goto IL_0B8E;
				}
				switch (num4)
				{
				case 180:
				case 181:
					goto IL_0B8E;
				default:
					switch (num4)
					{
					case 191:
					case 192:
						goto IL_0B8E;
					}
					break;
				}
			}
			else
			{
				if (num4 == 204)
				{
					goto IL_0B8E;
				}
				switch (num4)
				{
				case 219:
				case 220:
					goto IL_0B8E;
				default:
					if (num4 == 232)
					{
						goto IL_0B8E;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0B8E:
			int num5 = this.LA(1);
			if (num5 <= 92)
			{
				if (num5 <= 29)
				{
					if (num5 <= 6)
					{
						if (num5 == 1)
						{
							return querySpecification;
						}
						switch (num5)
						{
						case 4:
						case 6:
							return querySpecification;
						}
					}
					else
					{
						switch (num5)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return querySpecification;
						case 14:
						case 16:
							break;
						default:
							switch (num5)
							{
							case 22:
							case 23:
								return querySpecification;
							default:
								switch (num5)
								{
								case 28:
								case 29:
									return querySpecification;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num5 <= 77)
				{
					switch (num5)
					{
					case 33:
					case 35:
						return querySpecification;
					case 34:
						break;
					default:
						switch (num5)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
							return querySpecification;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 62:
						case 63:
						case 65:
						case 66:
							break;
						default:
							switch (num5)
							{
							case 74:
							case 75:
								return querySpecification;
							case 77:
							{
								HavingClause havingClause = this.havingClause();
								if (this.inputState.guessing == 0)
								{
									querySpecification.HavingClause = havingClause;
									return querySpecification;
								}
								return querySpecification;
							}
							}
							break;
						}
						break;
					}
				}
				else
				{
					if (num5 == 82)
					{
						return querySpecification;
					}
					switch (num5)
					{
					case 86:
					case 87:
						return querySpecification;
					default:
						if (num5 == 92)
						{
							return querySpecification;
						}
						break;
					}
				}
			}
			else if (num5 <= 172)
			{
				if (num5 <= 113)
				{
					if (num5 == 95 || num5 == 106)
					{
						return querySpecification;
					}
					switch (num5)
					{
					case 111:
					case 113:
						return querySpecification;
					}
				}
				else
				{
					if (num5 == 119)
					{
						return querySpecification;
					}
					switch (num5)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return querySpecification;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num5)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return querySpecification;
						}
						break;
					}
				}
			}
			else if (num5 <= 192)
			{
				if (num5 == 176)
				{
					return querySpecification;
				}
				switch (num5)
				{
				case 180:
				case 181:
					return querySpecification;
				default:
					switch (num5)
					{
					case 191:
					case 192:
						return querySpecification;
					}
					break;
				}
			}
			else
			{
				if (num5 == 204)
				{
					return querySpecification;
				}
				switch (num5)
				{
				case 219:
				case 220:
					return querySpecification;
				default:
					if (num5 == 232)
					{
						return querySpecification;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A53 RID: 6739 RVA: 0x000F06E0 File Offset: 0x000EE8E0
		public QueryParenthesisExpression queryParenthesis(SelectStatement vSelectStatement)
		{
			QueryParenthesisExpression queryParenthesisExpression = base.FragmentFactory.CreateFragment<QueryParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.queryExpression(vSelectStatement);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token);
				queryParenthesisExpression.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token2);
			}
			return queryParenthesisExpression;
		}

		// Token: 0x06001A54 RID: 6740 RVA: 0x000F0750 File Offset: 0x000EE950
		public void uniqueRowFilterOpt(QuerySpecification vParent)
		{
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num != 20)
							{
								goto IL_01C3;
							}
							return;
						}
					}
					else
					{
						if (num != 25 && num != 34)
						{
							goto IL_01C3;
						}
						return;
					}
				}
				else if (num <= 51)
				{
					switch (num)
					{
					case 40:
					case 41:
						return;
					default:
						if (num != 51)
						{
							goto IL_01C3;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 79:
					case 81:
						return;
					case 80:
						goto IL_01C3;
					default:
						if (num != 93)
						{
							goto IL_01C3;
						}
						return;
					}
				}
				IToken token;
				UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out token);
				if (this.inputState.guessing == 0)
				{
					vParent.UniqueRowFilter = uniqueRowFilter;
					return;
				}
				return;
			}
			else if (num <= 141)
			{
				if (num <= 133)
				{
					switch (num)
					{
					case 100:
					case 101:
						return;
					default:
						if (num == 133)
						{
							return;
						}
						break;
					}
				}
				else if (num == 136 || num == 141)
				{
					return;
				}
			}
			else if (num <= 152)
			{
				if (num == 147 || num == 152)
				{
					return;
				}
			}
			else
			{
				if (num == 163)
				{
					return;
				}
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					return;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						return;
					}
					break;
				}
			}
			IL_01C3:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A55 RID: 6741 RVA: 0x000F0934 File Offset: 0x000EEB34
		public TopRowFilter topRowFilter()
		{
			TopRowFilter topRowFilter = base.FragmentFactory.CreateFragment<TopRowFilter>();
			IToken token = this.LT(1);
			this.match(152);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token);
			}
			int num = this.LA(1);
			ScalarExpression scalarExpression;
			if (num != 191)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
					scalarExpression = this.integerOrRealOrNumeric();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				scalarExpression = this.paranthesisDisambiguatorForExpressions(ExpressionFlags.None);
			}
			if (this.inputState.guessing == 0)
			{
				topRowFilter.Expression = scalarExpression;
			}
			int num2 = this.LA(1);
			if (num2 <= 116)
			{
				if (num2 <= 41)
				{
					if (num2 <= 25)
					{
						if (num2 == 20 || num2 == 25)
						{
							goto IL_02A3;
						}
					}
					else
					{
						if (num2 == 34)
						{
							goto IL_02A3;
						}
						switch (num2)
						{
						case 40:
						case 41:
							goto IL_02A3;
						}
					}
				}
				else if (num2 <= 93)
				{
					switch (num2)
					{
					case 79:
					case 81:
						goto IL_02A3;
					case 80:
						break;
					default:
						if (num2 == 93)
						{
							goto IL_02A3;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 100:
					case 101:
						goto IL_02A3;
					default:
						if (num2 == 116)
						{
							IToken token2 = this.LT(1);
							this.match(116);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.ThrowIfPercentValueOutOfRange(scalarExpression);
								TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token2);
								topRowFilter.Percent = true;
								goto IL_02A3;
							}
							goto IL_02A3;
						}
						break;
					}
				}
			}
			else if (num2 <= 147)
			{
				if (num2 <= 136)
				{
					if (num2 == 133 || num2 == 136)
					{
						goto IL_02A3;
					}
				}
				else if (num2 == 141 || num2 == 147)
				{
					goto IL_02A3;
				}
			}
			else if (num2 <= 171)
			{
				if (num2 == 163 || num2 == 171)
				{
					goto IL_02A3;
				}
			}
			else
			{
				switch (num2)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_02A3;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num2)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_02A3;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_02A3:
			int num3 = this.LA(1);
			if (num3 <= 101)
			{
				if (num3 <= 34)
				{
					if (num3 == 20 || num3 == 25 || num3 == 34)
					{
						return topRowFilter;
					}
				}
				else if (num3 <= 81)
				{
					switch (num3)
					{
					case 40:
					case 41:
						return topRowFilter;
					default:
						switch (num3)
						{
						case 79:
						case 81:
							return topRowFilter;
						}
						break;
					}
				}
				else
				{
					if (num3 == 93)
					{
						return topRowFilter;
					}
					switch (num3)
					{
					case 100:
					case 101:
						return topRowFilter;
					}
				}
			}
			else if (num3 <= 147)
			{
				if (num3 <= 136)
				{
					if (num3 == 133 || num3 == 136)
					{
						return topRowFilter;
					}
				}
				else if (num3 == 141 || num3 == 147)
				{
					return topRowFilter;
				}
			}
			else if (num3 <= 171)
			{
				if (num3 == 163)
				{
					return topRowFilter;
				}
				if (num3 == 171)
				{
					this.match(171);
					IToken token3 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "TIES");
						TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token3);
						topRowFilter.WithTies = true;
						return topRowFilter;
					}
					return topRowFilter;
				}
			}
			else
			{
				switch (num3)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					return topRowFilter;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num3)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						return topRowFilter;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A56 RID: 6742 RVA: 0x000F0DE0 File Offset: 0x000EEFE0
		public SelectElement selectColumnOrStarExpression()
		{
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_77_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.selectStarExpression();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			SelectElement selectElement;
			if (flag)
			{
				selectElement = this.selectStarExpression();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_78_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_79_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				selectElement = this.selectColumn();
			}
			return selectElement;
		}

		// Token: 0x06001A57 RID: 6743 RVA: 0x000F0EB8 File Offset: 0x000EF0B8
		public FromClause fromClauseOpt()
		{
			FromClause fromClause = null;
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 29)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return fromClause;
						}
						switch (num)
						{
						case 4:
						case 6:
							return fromClause;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return fromClause;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return fromClause;
							default:
								switch (num)
								{
								case 28:
								case 29:
									return fromClause;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 77)
				{
					switch (num)
					{
					case 33:
					case 35:
						return fromClause;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 74:
						case 75:
						case 76:
						case 77:
							return fromClause;
						case 71:
							return this.fromClause();
						}
						break;
					}
				}
				else
				{
					if (num == 82)
					{
						return fromClause;
					}
					switch (num)
					{
					case 86:
					case 87:
						return fromClause;
					default:
						if (num == 92)
						{
							return fromClause;
						}
						break;
					}
				}
			}
			else if (num <= 144)
			{
				if (num <= 106)
				{
					if (num == 95 || num == 106)
					{
						return fromClause;
					}
				}
				else
				{
					switch (num)
					{
					case 111:
					case 113:
						return fromClause;
					case 112:
						break;
					default:
						if (num == 119)
						{
							return fromClause;
						}
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return fromClause;
						}
						break;
					}
				}
			}
			else if (num <= 192)
			{
				switch (num)
				{
				case 156:
				case 158:
				case 160:
				case 161:
				case 162:
				case 167:
				case 169:
				case 170:
				case 171:
				case 172:
				case 176:
					return fromClause;
				case 157:
				case 159:
				case 163:
				case 164:
				case 165:
				case 166:
				case 168:
				case 173:
				case 174:
				case 175:
					break;
				default:
					switch (num)
					{
					case 180:
					case 181:
						return fromClause;
					default:
						switch (num)
						{
						case 191:
						case 192:
							return fromClause;
						}
						break;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return fromClause;
				}
				switch (num)
				{
				case 219:
				case 220:
					return fromClause;
				default:
					if (num == 232)
					{
						return fromClause;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A58 RID: 6744 RVA: 0x000F11A4 File Offset: 0x000EF3A4
		public WhereClause whereClause()
		{
			WhereClause whereClause = base.FragmentFactory.CreateFragment<WhereClause>();
			IToken token = this.LT(1);
			this.match(169);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(whereClause, token);
				whereClause.SearchCondition = booleanExpression;
			}
			return whereClause;
		}

		// Token: 0x06001A59 RID: 6745 RVA: 0x000F11F8 File Offset: 0x000EF3F8
		public GroupByClause groupByClause()
		{
			GroupByClause groupByClause = base.FragmentFactory.CreateFragment<GroupByClause>();
			IToken token = this.LT(1);
			this.match(76);
			this.match(18);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(groupByClause, token);
			}
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num == 20)
							{
								goto IL_0209;
							}
						}
						else
						{
							this.match(5);
							if (this.inputState.guessing == 0)
							{
								groupByClause.All = true;
								goto IL_0209;
							}
							goto IL_0209;
						}
					}
					else if (num == 25 || num == 34)
					{
						goto IL_0209;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_0209;
					default:
						if (num == 81)
						{
							goto IL_0209;
						}
						break;
					}
				}
				else
				{
					if (num == 93)
					{
						goto IL_0209;
					}
					switch (num)
					{
					case 100:
					case 101:
						goto IL_0209;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num == 133 || num == 136)
					{
						goto IL_0209;
					}
				}
				else if (num == 141 || num == 147)
				{
					goto IL_0209;
				}
			}
			else if (num <= 193)
			{
				if (num == 163)
				{
					goto IL_0209;
				}
				switch (num)
				{
				case 191:
				case 193:
					goto IL_0209;
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					goto IL_0209;
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_0209;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0209:
			ExpressionGroupingSpecification expressionGroupingSpecification = this.simpleGroupByItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(groupByClause, groupByClause.GroupingSpecifications, expressionGroupingSpecification);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				expressionGroupingSpecification = this.simpleGroupByItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(groupByClause, groupByClause.GroupingSpecifications, expressionGroupingSpecification);
				}
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (groupByClause.All)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46084", token2, TSqlParserResource.SQL46084Message, new string[0]);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(groupByClause, token2);
					groupByClause.GroupByOption = GroupByOptionHelper.Instance.ParseOption(token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_80_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return groupByClause;
		}

		// Token: 0x06001A5A RID: 6746 RVA: 0x000F1524 File Offset: 0x000EF724
		public HavingClause havingClause()
		{
			HavingClause havingClause = base.FragmentFactory.CreateFragment<HavingClause>();
			IToken token = this.LT(1);
			this.match(77);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(havingClause, token);
			}
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				havingClause.SearchCondition = booleanExpression;
			}
			return havingClause;
		}

		// Token: 0x06001A5B RID: 6747 RVA: 0x000F1580 File Offset: 0x000EF780
		public BrowseForClause browseForClause()
		{
			BrowseForClause browseForClause = base.FragmentFactory.CreateFragment<BrowseForClause>();
			IToken token = this.LT(1);
			this.match(16);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(browseForClause, token);
			}
			return browseForClause;
		}

		// Token: 0x06001A5C RID: 6748 RVA: 0x000F15C0 File Offset: 0x000EF7C0
		public XmlForClause xmlForClause()
		{
			XmlForClause xmlForClause = base.FragmentFactory.CreateFragment<XmlForClause>();
			XmlForClauseOptions xmlForClauseOptions = XmlForClauseOptions.None;
			IToken token = this.LT(1);
			this.match(232);
			XmlForClauseOption xmlForClauseOption = this.xmlForClauseMode();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlForClauseOption>(xmlForClause, xmlForClause.Options, xmlForClauseOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				xmlForClauseOption = this.xmlParam(xmlForClauseOptions);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlForClauseOption>(xmlForClause, xmlForClause.Options, xmlForClauseOption);
					xmlForClauseOptions |= xmlForClauseOption.OptionKind;
				}
			}
			return xmlForClause;
		}

		// Token: 0x06001A5D RID: 6749 RVA: 0x000F1664 File Offset: 0x000EF864
		public void selectExpression(QuerySpecification vParent)
		{
			bool flag = false;
			if (this.LA(1) == 234 && this.LA(2) == 206)
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(234);
					this.match(206);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				SelectSetVariable selectSetVariable = this.selectSetVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(vParent, vParent.SelectElements, selectSetVariable);
					return;
				}
			}
			else
			{
				bool flag2 = false;
				if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_81_.member(this.LA(2)))
				{
					int num2 = this.mark();
					flag2 = true;
					this.inputState.guessing++;
					try
					{
						this.selectStarExpression();
					}
					catch (RecognitionException)
					{
						flag2 = false;
					}
					this.rewind(num2);
					this.inputState.guessing--;
				}
				if (flag2)
				{
					SelectStarExpression selectStarExpression = this.selectStarExpression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(vParent, vParent.SelectElements, selectStarExpression);
						return;
					}
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_78_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_82_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					SelectScalarExpression selectScalarExpression = this.selectColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(vParent, vParent.SelectElements, selectScalarExpression);
						return;
					}
				}
			}
		}

		// Token: 0x06001A5E RID: 6750 RVA: 0x000F181C File Offset: 0x000EFA1C
		public UniqueRowFilter uniqueRowFilter(out IToken token)
		{
			UniqueRowFilter uniqueRowFilter = UniqueRowFilter.NotSpecified;
			token = null;
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 51)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(51);
				if (this.inputState.guessing == 0)
				{
					uniqueRowFilter = UniqueRowFilter.Distinct;
					token = token2;
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					uniqueRowFilter = UniqueRowFilter.All;
					token = token3;
				}
			}
			return uniqueRowFilter;
		}

		// Token: 0x06001A5F RID: 6751 RVA: 0x000F18A0 File Offset: 0x000EFAA0
		public Literal integerOrRealOrNumeric()
		{
			Literal literal;
			switch (this.LA(1))
			{
			case 221:
				literal = this.integer();
				break;
			case 222:
				literal = this.numeric();
				break;
			case 223:
				literal = this.real();
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literal;
		}

		// Token: 0x06001A60 RID: 6752 RVA: 0x000F1900 File Offset: 0x000EFB00
		public PrimaryExpression paranthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			PrimaryExpression primaryExpression;
			if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 191) && base.IsNextRuleSelectParenthesis())
			{
				primaryExpression = this.subquery(expressionFlags);
			}
			else
			{
				if (this.LA(1) != 191 || !TSql90ParserInternal.tokenSet_37_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				primaryExpression = this.expressionParenthesis(expressionFlags);
			}
			return primaryExpression;
		}

		// Token: 0x06001A61 RID: 6753 RVA: 0x000F198C File Offset: 0x000EFB8C
		public TopRowFilter topRowFilterForInsertUpdateDelete()
		{
			TopRowFilter topRowFilter = base.FragmentFactory.CreateFragment<TopRowFilter>();
			IToken token = this.LT(1);
			this.match(152);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token);
			}
			ScalarExpression scalarExpression = this.paranthesisDisambiguatorForExpressions(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				topRowFilter.Expression = scalarExpression;
			}
			int num = this.LA(1);
			if (num <= 109)
			{
				if (num == 71 || num == 88)
				{
					return topRowFilter;
				}
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					return topRowFilter;
				}
			}
			else
			{
				switch (num)
				{
				case 115:
					return topRowFilter;
				case 116:
				{
					IToken token2 = this.LT(1);
					this.match(116);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token2);
						topRowFilter.Percent = true;
						return topRowFilter;
					}
					return topRowFilter;
				}
				default:
					if (num == 200)
					{
						return topRowFilter;
					}
					switch (num)
					{
					case 232:
					case 233:
					case 234:
						return topRowFilter;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A62 RID: 6754 RVA: 0x000F1A9C File Offset: 0x000EFC9C
		public SelectSetVariable selectSetVariable()
		{
			SelectSetVariable selectSetVariable = base.FragmentFactory.CreateFragment<SelectSetVariable>();
			VariableReference variableReference = this.variable();
			this.match(206);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				selectSetVariable.Variable = variableReference;
				selectSetVariable.Expression = scalarExpression;
			}
			return selectSetVariable;
		}

		// Token: 0x06001A63 RID: 6755 RVA: 0x000F1AEC File Offset: 0x000EFCEC
		public SelectStarExpression selectStarExpression()
		{
			SelectStarExpression selectStarExpression = base.FragmentFactory.CreateFragment<SelectStarExpression>();
			int num = this.LA(1);
			if (num != 195)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.inputState.guessing == 0)
				{
					selectStarExpression.Qualifier = multiPartIdentifier;
				}
				this.match(200);
				IToken token = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(selectStarExpression, token);
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(selectStarExpression, token2);
				}
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckStarQualifier(selectStarExpression);
			}
			return selectStarExpression;
		}

		// Token: 0x06001A64 RID: 6756 RVA: 0x000F1BDC File Offset: 0x000EFDDC
		public SelectScalarExpression selectColumn()
		{
			SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
			if (TSql90ParserInternal.tokenSet_78_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_83_.member(this.LA(2)))
			{
				ScalarExpression scalarExpression = this.selectColumnExpression();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.Expression = scalarExpression;
				}
				if (TSql90ParserInternal.tokenSet_84_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_85_.member(this.LA(2)))
				{
					int num = this.LA(1);
					if (num != 9)
					{
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 233:
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
					if (this.inputState.guessing == 0)
					{
						selectScalarExpression.ColumnName = identifierOrValueExpression;
					}
				}
				else if (!TSql90ParserInternal.tokenSet_86_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) < 230 || this.LA(1) > 233 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.ColumnName = identifierOrValueExpression;
				}
				this.match(206);
				ScalarExpression scalarExpression = this.selectColumnExpression();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.Expression = scalarExpression;
				}
			}
			return selectScalarExpression;
		}

		// Token: 0x06001A65 RID: 6757 RVA: 0x000F1D8C File Offset: 0x000EFF8C
		public SelectElement outputClauseSelectElement()
		{
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.selectStarExpression();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			SelectElement selectElement;
			if (flag)
			{
				selectElement = this.selectStarExpression();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_88_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_89_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				selectElement = this.outputClauseSelectColumn();
			}
			return selectElement;
		}

		// Token: 0x06001A66 RID: 6758 RVA: 0x000F1E64 File Offset: 0x000F0064
		public SelectScalarExpression outputClauseSelectColumn()
		{
			SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.starColumn();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				ScalarExpression scalarExpression = this.starColumn();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.Expression = scalarExpression;
				}
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_37_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_89_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.Expression = scalarExpression;
				}
				if (TSql90ParserInternal.tokenSet_84_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_90_.member(this.LA(2)))
				{
					int num2 = this.LA(1);
					if (num2 != 9)
					{
						switch (num2)
						{
						case 230:
						case 231:
						case 232:
						case 233:
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
					if (this.inputState.guessing == 0)
					{
						selectScalarExpression.ColumnName = identifierOrValueExpression;
					}
				}
				else if (!TSql90ParserInternal.tokenSet_91_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return selectScalarExpression;
		}

		// Token: 0x06001A67 RID: 6759 RVA: 0x000F2044 File Offset: 0x000F0244
		public ColumnReferenceExpression starColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			columnReferenceExpression.ColumnType = ColumnType.Wildcard;
			int num = this.LA(1);
			if (num != 195)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.inputState.guessing == 0)
				{
					columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				}
				this.match(200);
				IToken token = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token);
					columnReferenceExpression.ColumnType = ColumnType.Wildcard;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token2);
					columnReferenceExpression.ColumnType = ColumnType.Wildcard;
				}
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06001A68 RID: 6760 RVA: 0x000F2154 File Offset: 0x000F0354
		public ScalarExpression selectColumnExpression()
		{
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_0196;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						switch (num)
						{
						case 79:
							return this.identityFunction();
						case 80:
							goto IL_0196;
						case 81:
							break;
						default:
							goto IL_0196;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_0196;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_0196;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_0196;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_0196;
					default:
						goto IL_0196;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_0196;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_0196;
					default:
						goto IL_0196;
					}
					break;
				}
			}
			return this.expression(ExpressionFlags.None);
			IL_0196:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A69 RID: 6761 RVA: 0x000F230C File Offset: 0x000F050C
		public IdentityFunctionCall identityFunction()
		{
			IdentityFunctionCall identityFunctionCall = base.FragmentFactory.CreateFragment<IdentityFunctionCall>();
			IToken token = this.LT(1);
			this.match(79);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identityFunctionCall, token);
			}
			this.match(191);
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				identityFunctionCall.DataType = dataTypeReference;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ScalarExpression scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityFunctionCall.Seed = scalarExpression;
				}
				this.match(198);
				scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityFunctionCall.Increment = scalarExpression;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identityFunctionCall, token2);
			}
			return identityFunctionCall;
		}

		// Token: 0x06001A6A RID: 6762 RVA: 0x000F241C File Offset: 0x000F061C
		public ScalarExpression seedIncrement()
		{
			ScalarExpression scalarExpression = null;
			UnaryExpression unaryExpression = null;
			int num = this.LA(1);
			switch (num)
			{
			case 197:
			{
				IToken token = this.LT(1);
				this.match(197);
				if (this.inputState.guessing == 0)
				{
					unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Positive;
					goto IL_00D3;
				}
				goto IL_00D3;
			}
			case 198:
				break;
			case 199:
			{
				IToken token2 = this.LT(1);
				this.match(199);
				if (this.inputState.guessing == 0)
				{
					unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token2);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
					goto IL_00D3;
				}
				goto IL_00D3;
			}
			default:
				switch (num)
				{
				case 221:
				case 222:
					goto IL_00D3;
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00D3:
			Literal literal = this.integerOrNumeric();
			if (this.inputState.guessing == 0)
			{
				if (unaryExpression != null)
				{
					unaryExpression.Expression = literal;
					scalarExpression = unaryExpression;
				}
				else
				{
					scalarExpression = literal;
				}
			}
			return scalarExpression;
		}

		// Token: 0x06001A6B RID: 6763 RVA: 0x000F2524 File Offset: 0x000F0724
		public TableSampleClause tableSampleClause()
		{
			TableSampleClause tableSampleClause = base.FragmentFactory.CreateFragment<TableSampleClause>();
			IToken token = this.LT(1);
			this.match(179);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token);
			}
			int num = this.LA(1);
			if (num != 191)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SYSTEM");
					tableSampleClause.System = true;
				}
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				tableSampleClause.SampleNumber = scalarExpression;
			}
			int num2 = this.LA(1);
			if (num2 != 116)
			{
				if (num2 != 192)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token3 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "ROWS");
						tableSampleClause.TableSampleClauseOption = TableSampleClauseOption.Rows;
					}
				}
			}
			else
			{
				this.match(116);
				if (this.inputState.guessing == 0)
				{
					tableSampleClause.TableSampleClauseOption = TableSampleClauseOption.Percent;
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token4);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("REPEATABLE"))
			{
				this.LT(1);
				this.match(232);
				this.match(191);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					tableSampleClause.RepeatSeed = scalarExpression;
				}
				IToken token5 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token5);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_93_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return tableSampleClause;
		}

		// Token: 0x06001A6C RID: 6764 RVA: 0x000F2778 File Offset: 0x000F0978
		public FromClause fromClause()
		{
			FromClause fromClause = base.FragmentFactory.CreateFragment<FromClause>();
			IToken token = this.LT(1);
			this.match(71);
			TableReference tableReference = this.selectTableReferenceWithOdbc();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fromClause, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableReference>(fromClause, fromClause.TableReferences, tableReference);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				tableReference = this.selectTableReferenceWithOdbc();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableReference>(fromClause, fromClause.TableReferences, tableReference);
				}
			}
			return fromClause;
		}

		// Token: 0x06001A6D RID: 6765 RVA: 0x000F2808 File Offset: 0x000F0A08
		public TableReference selectTableReferenceWithOdbc()
		{
			int num = this.LA(1);
			if (num > 110)
			{
				if (num <= 200)
				{
					switch (num)
					{
					case 191:
						goto IL_0084;
					case 192:
						goto IL_0096;
					case 193:
						break;
					default:
						if (num != 200)
						{
							goto IL_0096;
						}
						goto IL_0084;
					}
				}
				else
				{
					if (num == 203)
					{
						goto IL_0084;
					}
					switch (num)
					{
					case 232:
					case 233:
					case 234:
						goto IL_0084;
					case 235:
						break;
					default:
						goto IL_0096;
					}
				}
				return this.odbcQualifiedJoin();
			}
			if (num != 32 && num != 70)
			{
				switch (num)
				{
				case 107:
				case 108:
				case 109:
				case 110:
					break;
				default:
					goto IL_0096;
				}
			}
			IL_0084:
			return this.selectTableReference();
			IL_0096:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A6E RID: 6766 RVA: 0x000F28C0 File Offset: 0x000F0AC0
		public TableReference selectTableReference()
		{
			TableReference tableReference = null;
			tableReference = this.selectTableReferenceElement();
			while (TSql90ParserInternal.tokenSet_94_.member(this.LA(1)))
			{
				this.selectTableReferenceAdditionalElement(ref tableReference);
			}
			return tableReference;
		}

		// Token: 0x06001A6F RID: 6767 RVA: 0x000F28F4 File Offset: 0x000F0AF4
		public OdbcQualifiedJoinTableReference odbcQualifiedJoin()
		{
			OdbcQualifiedJoinTableReference odbcQualifiedJoinTableReference = base.FragmentFactory.CreateFragment<OdbcQualifiedJoinTableReference>();
			IToken token = null;
			int num = this.LA(1);
			if (num != 193)
			{
				if (num != 235)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.odbcInitiator();
			}
			else
			{
				token = this.LT(1);
				this.match(193);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(odbcQualifiedJoinTableReference, token);
				}
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "OJ");
			}
			int num2 = this.LA(1);
			TableReference tableReference;
			if (num2 > 110)
			{
				if (num2 <= 200)
				{
					switch (num2)
					{
					case 191:
						goto IL_013A;
					case 192:
						goto IL_0170;
					case 193:
						break;
					default:
						if (num2 != 200)
						{
							goto IL_0170;
						}
						goto IL_013A;
					}
				}
				else
				{
					if (num2 == 203)
					{
						goto IL_013A;
					}
					switch (num2)
					{
					case 232:
					case 233:
					case 234:
						goto IL_013A;
					case 235:
						break;
					default:
						goto IL_0170;
					}
				}
				tableReference = this.odbcQualifiedJoin();
				goto IL_0183;
			}
			if (num2 != 32 && num2 != 70)
			{
				switch (num2)
				{
				case 107:
				case 108:
				case 109:
				case 110:
					break;
				default:
					goto IL_0170;
				}
			}
			IL_013A:
			tableReference = this.selectTableReference();
			if (this.inputState.guessing == 0 && !(tableReference is QualifiedJoin))
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46035", token, TSqlParserResource.SQL46035Message, new string[0]);
				goto IL_0183;
			}
			goto IL_0183;
			IL_0170:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0183:
			if (this.inputState.guessing == 0)
			{
				odbcQualifiedJoinTableReference.TableReference = tableReference;
			}
			IToken token3 = this.LT(1);
			this.match(194);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcQualifiedJoinTableReference, token3);
			}
			return odbcQualifiedJoinTableReference;
		}

		// Token: 0x06001A70 RID: 6768 RVA: 0x000F2AC4 File Offset: 0x000F0CC4
		public TableReference selectTableReferenceElement()
		{
			bool flag = false;
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_95_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.joinParenthesis();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			TableReference tableReference;
			if (flag)
			{
				tableReference = this.joinParenthesis();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_95_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_96_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReference = this.selectTableReferenceElementWithOutJoinParenthesis();
			}
			return tableReference;
		}

		// Token: 0x06001A71 RID: 6769 RVA: 0x000F2B9C File Offset: 0x000F0D9C
		public void selectTableReferenceAdditionalElement(ref TableReference vResult)
		{
			int num = this.LA(1);
			if (num <= 90)
			{
				if (num <= 72)
				{
					if (num != 36 && num != 72)
					{
						goto IL_0071;
					}
				}
				else if (num != 85 && num != 90)
				{
					goto IL_0071;
				}
			}
			else if (num <= 114)
			{
				if (num != 93 && num != 114)
				{
					goto IL_0071;
				}
			}
			else if (num != 133)
			{
				switch (num)
				{
				case 177:
					this.pivotedTableReference(ref vResult);
					return;
				case 178:
					this.unpivotedTableReference(ref vResult);
					return;
				default:
					goto IL_0071;
				}
			}
			this.joinElement(ref vResult);
			return;
			IL_0071:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A72 RID: 6770 RVA: 0x000F2C2C File Offset: 0x000F0E2C
		public void odbcInitiator()
		{
			IToken token = this.LT(1);
			this.match(235);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46036", token, TSqlParserResource.SQL46036Message, new string[0]);
			}
		}

		// Token: 0x06001A73 RID: 6771 RVA: 0x000F2C74 File Offset: 0x000F0E74
		public OdbcConvertSpecification odbcConvertSpecification()
		{
			OdbcConvertSpecification odbcConvertSpecification = base.FragmentFactory.CreateFragment<OdbcConvertSpecification>();
			Identifier identifier = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				odbcConvertSpecification.Identifier = identifier;
			}
			return odbcConvertSpecification;
		}

		// Token: 0x06001A74 RID: 6772 RVA: 0x000F2CAC File Offset: 0x000F0EAC
		public ExtractFromExpression extractFromExpression()
		{
			ExtractFromExpression extractFromExpression = base.FragmentFactory.CreateFragment<ExtractFromExpression>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(71);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EXTRACT");
				extractFromExpression.Expression = scalarExpression;
			}
			return extractFromExpression;
		}

		// Token: 0x06001A75 RID: 6773 RVA: 0x000F2D0C File Offset: 0x000F0F0C
		public OdbcFunctionCall odbcFunctionCall()
		{
			OdbcFunctionCall odbcFunctionCall = base.FragmentFactory.CreateFragment<OdbcFunctionCall>();
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			odbcFunctionCall.ParametersUsed = true;
			IToken token = this.LT(1);
			this.match(193);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcFunctionCall, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "FN");
			}
			if (this.inputState.guessing == 0 && this.LA(1) != 1)
			{
				identifier.SetUnquotedIdentifier(this.LT(1).getText());
				odbcFunctionCall.Name = identifier;
			}
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 43)
				{
					switch (num)
					{
					case 34:
					{
						this.match(34);
						this.match(191);
						ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, scalarExpression);
						}
						this.match(198);
						scalarExpression = this.odbcConvertSpecification();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, scalarExpression);
						}
						this.match(192);
						goto IL_064B;
					}
					case 35:
					case 36:
					case 37:
						goto IL_0638;
					case 38:
						break;
					case 39:
					case 40:
					{
						switch (this.LA(1))
						{
						case 39:
							this.match(39);
							break;
						case 40:
							this.match(40);
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						int num2 = this.LA(1);
						if (num2 == 191)
						{
							this.match(191);
							int num3 = this.LA(1);
							if (num3 <= 101)
							{
								if (num3 <= 34)
								{
									if (num3 != 20 && num3 != 25 && num3 != 34)
									{
										goto IL_0522;
									}
								}
								else if (num3 <= 81)
								{
									switch (num3)
									{
									case 40:
									case 41:
										break;
									default:
										if (num3 != 81)
										{
											goto IL_0522;
										}
										break;
									}
								}
								else if (num3 != 93)
								{
									switch (num3)
									{
									case 100:
									case 101:
										break;
									default:
										goto IL_0522;
									}
								}
							}
							else if (num3 <= 141)
							{
								if (num3 != 133 && num3 != 136 && num3 != 141)
								{
									goto IL_0522;
								}
							}
							else if (num3 <= 163)
							{
								if (num3 != 147 && num3 != 163)
								{
									goto IL_0522;
								}
							}
							else
							{
								switch (num3)
								{
								case 191:
								case 193:
								case 197:
								case 199:
								case 200:
									break;
								case 192:
									goto IL_0535;
								case 194:
								case 195:
								case 196:
								case 198:
									goto IL_0522;
								default:
									switch (num3)
									{
									case 211:
									case 221:
									case 222:
									case 223:
									case 224:
									case 225:
									case 227:
									case 228:
									case 230:
									case 231:
									case 232:
									case 233:
									case 234:
									case 235:
										break;
									case 212:
									case 213:
									case 214:
									case 215:
									case 216:
									case 217:
									case 218:
									case 219:
									case 220:
									case 226:
									case 229:
										goto IL_0522;
									default:
										goto IL_0522;
									}
									break;
								}
							}
							this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
							goto IL_0535;
							IL_0522:
							throw new NoViableAltException(this.LT(1), this.getFilename());
							IL_0535:
							this.match(192);
							goto IL_064B;
						}
						if (num2 != 194)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						if (this.inputState.guessing == 0)
						{
							odbcFunctionCall.ParametersUsed = false;
							goto IL_064B;
						}
						goto IL_064B;
					}
					default:
						if (num != 43)
						{
							goto IL_0638;
						}
						break;
					}
				}
				else
				{
					if (num != 86 && num != 93)
					{
						goto IL_0638;
					}
					goto IL_02AA;
				}
			}
			else if (num <= 156)
			{
				if (num == 133)
				{
					goto IL_02AA;
				}
				if (num != 156)
				{
					goto IL_0638;
				}
				this.match(156);
				this.match(191);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, scalarExpression);
				}
				this.match(198);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, scalarExpression);
				}
				this.match(192);
				goto IL_064B;
			}
			else if (num != 163)
			{
				if (num != 232)
				{
					goto IL_0638;
				}
				this.match(232);
				this.match(191);
				if (this.LA(1) == 232 && this.LA(2) == 71 && base.NextTokenMatches("EXTRACT"))
				{
					ScalarExpression scalarExpression = this.extractFromExpression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, scalarExpression);
					}
				}
				else if (TSql90ParserInternal.tokenSet_37_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_97_.member(this.LA(2)))
				{
					this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
				}
				else if (this.LA(1) != 192)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(192);
				goto IL_064B;
			}
			int num4 = this.LA(1);
			if (num4 != 38)
			{
				if (num4 != 43)
				{
					if (num4 != 163)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(163);
				}
				else
				{
					this.match(43);
				}
			}
			else
			{
				this.match(38);
			}
			this.match(191);
			this.match(192);
			goto IL_064B;
			IL_02AA:
			int num5 = this.LA(1);
			if (num5 != 86)
			{
				if (num5 != 93)
				{
					if (num5 != 133)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(133);
				}
				else
				{
					this.match(93);
				}
			}
			else
			{
				this.match(86);
			}
			this.match(191);
			this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
			this.match(192);
			goto IL_064B;
			IL_0638:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_064B:
			IToken token3 = this.LT(1);
			this.match(194);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcFunctionCall, token3);
			}
			return odbcFunctionCall;
		}

		// Token: 0x06001A76 RID: 6774 RVA: 0x000F338C File Offset: 0x000F158C
		public TableReference joinTableReference()
		{
			TableReference tableReference = null;
			bool flag = false;
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_95_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.joinParenthesis();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				tableReference = this.joinParenthesis();
				while (TSql90ParserInternal.tokenSet_98_.member(this.LA(1)))
				{
					this.joinElement(ref tableReference);
				}
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_95_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_99_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReference = this.selectTableReferenceElementWithOutJoinParenthesis();
				int num2 = 0;
				while (TSql90ParserInternal.tokenSet_98_.member(this.LA(1)))
				{
					this.joinElement(ref tableReference);
					num2++;
				}
				if (num2 < 1)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return tableReference;
		}

		// Token: 0x06001A77 RID: 6775 RVA: 0x000F34BC File Offset: 0x000F16BC
		public JoinParenthesisTableReference joinParenthesis()
		{
			JoinParenthesisTableReference joinParenthesisTableReference = base.FragmentFactory.CreateFragment<JoinParenthesisTableReference>();
			IToken token = this.LT(1);
			this.match(191);
			TableReference tableReference = this.joinTableReference();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(joinParenthesisTableReference, token);
				joinParenthesisTableReference.Join = tableReference;
				TSql80ParserBaseInternal.UpdateTokenInfo(joinParenthesisTableReference, token2);
			}
			return joinParenthesisTableReference;
		}

		// Token: 0x06001A78 RID: 6776 RVA: 0x000F352C File Offset: 0x000F172C
		public void joinElement(ref TableReference vResult)
		{
			int num = this.LA(1);
			if (num <= 85)
			{
				if (num != 36)
				{
					if (num != 72 && num != 85)
					{
						goto IL_004E;
					}
					goto IL_0046;
				}
			}
			else if (num <= 93)
			{
				if (num != 90 && num != 93)
				{
					goto IL_004E;
				}
				goto IL_0046;
			}
			else if (num != 114)
			{
				if (num != 133)
				{
					goto IL_004E;
				}
				goto IL_0046;
			}
			this.unqualifiedJoin(ref vResult);
			return;
			IL_0046:
			this.qualifiedJoin(ref vResult);
			return;
			IL_004E:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A79 RID: 6777 RVA: 0x000F359C File Offset: 0x000F179C
		public TableReference selectTableReferenceElementWithOutJoinParenthesis()
		{
			int num = this.LA(1);
			if (num > 110)
			{
				if (num <= 200)
				{
					if (num == 191)
					{
						return this.derivedTable();
					}
					if (num != 200)
					{
						goto IL_00AB;
					}
				}
				else
				{
					if (num == 203)
					{
						return this.builtInFunctionTableReference();
					}
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_00AB;
					}
				}
				return this.schemaObjectOrFunctionTableReference();
			}
			if (num == 32 || num == 70)
			{
				return this.fulltextTableReference();
			}
			switch (num)
			{
			case 107:
			case 108:
			case 109:
				return this.openRowset();
			case 110:
				return this.openXmlTableReference();
			}
			IL_00AB:
			TableReference tableReference;
			if (this.LA(1) == 234 && TSql90ParserInternal.tokenSet_100_.member(this.LA(2)))
			{
				tableReference = this.variableTableReference();
			}
			else
			{
				if (this.LA(1) != 234 || this.LA(2) != 200)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReference = this.variableMethodCallTableReference();
			}
			return tableReference;
		}

		// Token: 0x06001A7A RID: 6778 RVA: 0x000F36B8 File Offset: 0x000F18B8
		public void pivotedTableReference(ref TableReference vResult)
		{
			PivotedTableReference pivotedTableReference = base.FragmentFactory.CreateFragment<PivotedTableReference>();
			pivotedTableReference.TableReference = vResult;
			vResult = pivotedTableReference;
			this.match(177);
			this.match(191);
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(4);
			if (this.inputState.guessing == 0)
			{
				pivotedTableReference.AggregateFunctionIdentifier = multiPartIdentifier;
			}
			this.match(191);
			ColumnReferenceExpression columnReferenceExpression = this.fixedColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(pivotedTableReference, pivotedTableReference.ValueColumns, columnReferenceExpression);
			}
			this.match(192);
			this.match(67);
			columnReferenceExpression = this.fixedColumn();
			if (this.inputState.guessing == 0)
			{
				pivotedTableReference.PivotColumn = columnReferenceExpression;
			}
			this.match(83);
			this.columnNameList(pivotedTableReference, pivotedTableReference.InColumns);
			this.match(192);
			this.simpleTableReferenceAlias(pivotedTableReference);
		}

		// Token: 0x06001A7B RID: 6779 RVA: 0x000F3790 File Offset: 0x000F1990
		public void unpivotedTableReference(ref TableReference vResult)
		{
			UnpivotedTableReference unpivotedTableReference = base.FragmentFactory.CreateFragment<UnpivotedTableReference>();
			unpivotedTableReference.TableReference = vResult;
			vResult = unpivotedTableReference;
			this.match(178);
			this.match(191);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				unpivotedTableReference.ValueColumn = identifier;
			}
			this.match(67);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				unpivotedTableReference.PivotColumn = identifier;
			}
			this.match(83);
			this.columnListWithParenthesis(unpivotedTableReference, unpivotedTableReference.InColumns);
			this.match(192);
			this.simpleTableReferenceAlias(unpivotedTableReference);
		}

		// Token: 0x06001A7C RID: 6780 RVA: 0x000F3830 File Offset: 0x000F1A30
		public ColumnReferenceExpression fixedColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			columnReferenceExpression.ColumnType = ColumnType.Regular;
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(4);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06001A7D RID: 6781 RVA: 0x000F3874 File Offset: 0x000F1A74
		public void columnListWithParenthesis(TSqlFragment vParent, IList<ColumnReferenceExpression> columns)
		{
			this.match(191);
			ColumnReferenceExpression columnReferenceExpression = this.fixedColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, columnReferenceExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnReferenceExpression = this.fixedColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, columnReferenceExpression);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06001A7E RID: 6782 RVA: 0x000F3908 File Offset: 0x000F1B08
		public void unqualifiedJoin(ref TableReference vResult)
		{
			UnqualifiedJoin unqualifiedJoin = base.FragmentFactory.CreateFragment<UnqualifiedJoin>();
			int num = this.LA(1);
			if (num != 36)
			{
				if (num != 114)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(114);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "APPLY");
					unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.OuterApply;
				}
			}
			else
			{
				this.match(36);
				int num2 = this.LA(1);
				if (num2 != 90)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "APPLY");
						unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.CrossApply;
					}
				}
				else
				{
					this.match(90);
					if (this.inputState.guessing == 0)
					{
						unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.CrossJoin;
					}
				}
			}
			TableReference tableReference = this.selectTableReferenceElement();
			if (this.inputState.guessing == 0)
			{
				unqualifiedJoin.FirstTableReference = vResult;
				unqualifiedJoin.SecondTableReference = tableReference;
				vResult = unqualifiedJoin;
			}
		}

		// Token: 0x06001A7F RID: 6783 RVA: 0x000F3A44 File Offset: 0x000F1C44
		public void qualifiedJoin(ref TableReference vResult)
		{
			QualifiedJoin qualifiedJoin = base.FragmentFactory.CreateFragment<QualifiedJoin>();
			int num = this.LA(1);
			if (num <= 85)
			{
				if (num != 72 && num != 85)
				{
					goto IL_022C;
				}
			}
			else if (num != 90)
			{
				if (num != 93 && num != 133)
				{
					goto IL_022C;
				}
			}
			else
			{
				this.match(90);
				if (this.inputState.guessing == 0)
				{
					qualifiedJoin.QualifiedJoinType = QualifiedJoinType.Inner;
					goto IL_023F;
				}
				goto IL_023F;
			}
			int num2 = this.LA(1);
			if (num2 <= 85)
			{
				if (num2 != 72)
				{
					if (num2 == 85)
					{
						this.match(85);
						if (this.inputState.guessing == 0)
						{
							qualifiedJoin.QualifiedJoinType = QualifiedJoinType.Inner;
							goto IL_01EE;
						}
						goto IL_01EE;
					}
				}
				else
				{
					this.match(72);
					int num3 = this.LA(1);
					if (num3 != 90)
					{
						if (num3 != 114)
						{
							if (num3 != 232)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(114);
						}
					}
					if (this.inputState.guessing == 0)
					{
						qualifiedJoin.QualifiedJoinType = QualifiedJoinType.FullOuter;
						goto IL_01EE;
					}
					goto IL_01EE;
				}
			}
			else if (num2 != 93)
			{
				if (num2 == 133)
				{
					this.match(133);
					int num4 = this.LA(1);
					if (num4 != 90)
					{
						if (num4 != 114)
						{
							if (num4 != 232)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(114);
						}
					}
					if (this.inputState.guessing == 0)
					{
						qualifiedJoin.QualifiedJoinType = QualifiedJoinType.RightOuter;
						goto IL_01EE;
					}
					goto IL_01EE;
				}
			}
			else
			{
				this.match(93);
				int num5 = this.LA(1);
				if (num5 != 90)
				{
					if (num5 != 114)
					{
						if (num5 != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(114);
					}
				}
				if (this.inputState.guessing == 0)
				{
					qualifiedJoin.QualifiedJoinType = QualifiedJoinType.LeftOuter;
					goto IL_01EE;
				}
				goto IL_01EE;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_01EE:
			int num6 = this.LA(1);
			if (num6 != 90)
			{
				if (num6 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.joinHint(qualifiedJoin);
			}
			this.match(90);
			goto IL_023F;
			IL_022C:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_023F:
			TableReference tableReference = this.selectTableReferenceWithOdbc();
			if (this.inputState.guessing == 0)
			{
				qualifiedJoin.FirstTableReference = vResult;
				qualifiedJoin.SecondTableReference = tableReference;
			}
			this.match(105);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				qualifiedJoin.SearchCondition = booleanExpression;
				vResult = qualifiedJoin;
			}
		}

		// Token: 0x06001A80 RID: 6784 RVA: 0x000F3CDC File Offset: 0x000F1EDC
		public TableReference schemaObjectOrFunctionTableReference()
		{
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			TableReference tableReference;
			if (TSql90ParserInternal.tokenSet_101_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_74_.member(this.LA(2)) && base.IsTableReference(false))
			{
				tableReference = this.schemaObjectTableReference(schemaObjectName);
			}
			else
			{
				if (this.LA(1) != 191 || !TSql90ParserInternal.tokenSet_102_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReference = this.schemaObjectFunctionTableReference(schemaObjectName);
			}
			return tableReference;
		}

		// Token: 0x06001A81 RID: 6785 RVA: 0x000F3D68 File Offset: 0x000F1F68
		public BuiltInFunctionTableReference builtInFunctionTableReference()
		{
			BuiltInFunctionTableReference builtInFunctionTableReference = base.FragmentFactory.CreateFragment<BuiltInFunctionTableReference>();
			IToken token = this.LT(1);
			this.match(203);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(builtInFunctionTableReference, token);
				builtInFunctionTableReference.Name = identifier;
			}
			this.match(191);
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_0243;
					}
				}
				else if (num <= 47)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 47)
						{
							goto IL_0243;
						}
						break;
					}
				}
				else if (num != 81 && num != 93)
				{
					goto IL_0243;
				}
			}
			else if (num <= 141)
			{
				if (num <= 133)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_0243;
						}
						break;
					}
				}
				else if (num != 136 && num != 141)
				{
					goto IL_0243;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_0243;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_0256;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_0243;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_0243;
					default:
						goto IL_0243;
					}
					break;
				}
			}
			ScalarExpression scalarExpression = this.expressionWithDefault();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(builtInFunctionTableReference, builtInFunctionTableReference.Parameters, scalarExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(builtInFunctionTableReference, builtInFunctionTableReference.Parameters, scalarExpression);
				}
			}
			goto IL_0256;
			IL_0243:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0256:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(builtInFunctionTableReference, token2);
			}
			this.simpleTableReferenceAliasOpt(builtInFunctionTableReference);
			return builtInFunctionTableReference;
		}

		// Token: 0x06001A82 RID: 6786 RVA: 0x000F3FFC File Offset: 0x000F21FC
		public VariableTableReference variableTableReference()
		{
			VariableTableReference variableTableReference = base.FragmentFactory.CreateFragment<VariableTableReference>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				variableTableReference.Variable = variableReference;
			}
			this.simpleTableReferenceAliasOpt(variableTableReference);
			return variableTableReference;
		}

		// Token: 0x06001A83 RID: 6787 RVA: 0x000F4038 File Offset: 0x000F2238
		public VariableMethodCallTableReference variableMethodCallTableReference()
		{
			VariableMethodCallTableReference variableMethodCallTableReference = base.FragmentFactory.CreateFragment<VariableMethodCallTableReference>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				variableMethodCallTableReference.Variable = variableReference;
			}
			this.match(200);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				variableMethodCallTableReference.MethodName = identifier;
			}
			this.parenthesizedOptExpressionWithDefaultList(variableMethodCallTableReference, variableMethodCallTableReference.Parameters);
			this.simpleTableReferenceAlias(variableMethodCallTableReference);
			this.columnNameList(variableMethodCallTableReference, variableMethodCallTableReference.Columns);
			return variableMethodCallTableReference;
		}

		// Token: 0x06001A84 RID: 6788 RVA: 0x000F40B4 File Offset: 0x000F22B4
		public TableReferenceWithAlias openRowset()
		{
			TableReferenceWithAlias tableReferenceWithAlias;
			switch (this.LA(1))
			{
			case 107:
				tableReferenceWithAlias = this.adhocRowset();
				this.simpleTableReferenceAliasOpt(tableReferenceWithAlias);
				break;
			case 108:
				tableReferenceWithAlias = this.openQueryRowset();
				this.simpleTableReferenceAliasOpt(tableReferenceWithAlias);
				break;
			case 109:
				tableReferenceWithAlias = this.openRowsetRowset();
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return tableReferenceWithAlias;
		}

		// Token: 0x06001A85 RID: 6789 RVA: 0x000F4120 File Offset: 0x000F2320
		public FullTextTableReference fulltextTableReference()
		{
			FullTextTableReference fullTextTableReference = base.FragmentFactory.CreateFragment<FullTextTableReference>();
			this.fullTextTable(fullTextTableReference);
			this.match(191);
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				fullTextTableReference.TableName = schemaObjectName;
			}
			this.match(198);
			this.fulltextTableColumnList(fullTextTableReference);
			this.match(198);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				fullTextTableReference.SearchCondition = valueExpression;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.fulltextTableOptions(fullTextTableReference);
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fullTextTableReference, token);
			}
			this.simpleTableReferenceAliasOpt(fullTextTableReference);
			return fullTextTableReference;
		}

		// Token: 0x06001A86 RID: 6790 RVA: 0x000F4208 File Offset: 0x000F2408
		public OpenXmlTableReference openXmlTableReference()
		{
			IToken token = this.LT(1);
			this.match(110);
			this.match(191);
			OpenXmlTableReference openXmlTableReference = this.openXmlParams();
			IToken token2 = this.LT(1);
			this.match(192);
			this.openXmlWithClauseOpt(openXmlTableReference);
			this.simpleTableReferenceAliasOpt(openXmlTableReference);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(openXmlTableReference, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(openXmlTableReference, token2);
			}
			return openXmlTableReference;
		}

		// Token: 0x06001A87 RID: 6791 RVA: 0x000F4278 File Offset: 0x000F2478
		public void joinHint(QualifiedJoin vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			int num = this.LA(1);
			if (num != 90)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOCAL");
					vParent.JoinHint = JoinHintHelper.Instance.ParseOption(token2);
					if (vParent.JoinHint == JoinHint.Remote)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
						return;
					}
				}
			}
			else if (this.inputState.guessing == 0)
			{
				vParent.JoinHint = JoinHintHelper.Instance.ParseOption(token);
				return;
			}
		}

		// Token: 0x06001A88 RID: 6792 RVA: 0x000F4330 File Offset: 0x000F2530
		public ScalarExpression expressionWithDefault()
		{
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_0199;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_0199;
						}
					}
				}
				else if (num <= 81)
				{
					if (num == 47)
					{
						return this.defaultLiteral();
					}
					if (num != 81)
					{
						goto IL_0199;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_0199;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_0199;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_0199;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_0199;
					default:
						goto IL_0199;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_0199;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_0199;
					default:
						goto IL_0199;
					}
					break;
				}
			}
			return this.expression(ExpressionFlags.None);
			IL_0199:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A89 RID: 6793 RVA: 0x000F44EC File Offset: 0x000F26EC
		public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent)
		{
			if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_103_.member(this.LA(2)))
			{
				this.simpleTableReferenceAlias(vParent);
				return;
			}
			if (TSql90ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A8A RID: 6794 RVA: 0x000F4574 File Offset: 0x000F2774
		public RaiseErrorStatement raiseErrorStatement()
		{
			RaiseErrorStatement raiseErrorStatement = base.FragmentFactory.CreateFragment<RaiseErrorStatement>();
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token);
			}
			ScalarExpression scalarExpression = this.signedIntegerOrStringOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorStatement.FirstParameter = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorStatement.SecondParameter = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorStatement.ThirdParameter = scalarExpression;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.possibleNegativeConstant();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(raiseErrorStatement, raiseErrorStatement.OptionalParameters, scalarExpression);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token2);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token3);
					raiseErrorStatement.RaiseErrorOptions |= RaiseErrorOptionsHelper.Instance.ParseOption(token3);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					IToken token4 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token4);
						raiseErrorStatement.RaiseErrorOptions |= RaiseErrorOptionsHelper.Instance.ParseOption(token4);
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return raiseErrorStatement;
		}

		// Token: 0x06001A8B RID: 6795 RVA: 0x000F4798 File Offset: 0x000F2998
		public RaiseErrorLegacyStatement raiseErrorLegacyStatement()
		{
			RaiseErrorLegacyStatement raiseErrorLegacyStatement = base.FragmentFactory.CreateFragment<RaiseErrorLegacyStatement>();
			ScalarExpression scalarExpression = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorLegacyStatement.FirstParameter = scalarExpression;
			}
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorLegacyStatement.SecondParameter = valueExpression;
			}
			return raiseErrorLegacyStatement;
		}

		// Token: 0x06001A8C RID: 6796 RVA: 0x000F47E8 File Offset: 0x000F29E8
		public ScalarExpression signedIntegerOrStringOrVariable()
		{
			int num = this.LA(1);
			if (num != 199 && num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
				case 234:
					return this.stringOrVariable();
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return this.signedInteger();
		}

		// Token: 0x06001A8D RID: 6797 RVA: 0x000F4858 File Offset: 0x000F2A58
		public ScalarExpression possibleNegativeConstant()
		{
			int num = this.LA(1);
			if (num <= 193)
			{
				if (num != 100 && num != 193)
				{
					goto IL_007F;
				}
			}
			else
			{
				if (num == 199)
				{
					return this.negativeConstant();
				}
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
				case 232:
				case 233:
					goto IL_007F;
				default:
					goto IL_007F;
				}
			}
			return this.literal();
			IL_007F:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A8E RID: 6798 RVA: 0x000F48F8 File Offset: 0x000F2AF8
		public void outputIntoOutputClause(DataModificationSpecification vParent)
		{
			List<SelectElement> list = new List<SelectElement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OUTPUT");
			}
			SelectElement selectElement = this.outputClauseSelectElement();
			if (this.inputState.guessing == 0)
			{
				list.Add(selectElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				selectElement = this.outputClauseSelectElement();
				if (this.inputState.guessing == 0)
				{
					list.Add(selectElement);
				}
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num != 1)
						{
							switch (num)
							{
							case 4:
							case 6:
								break;
							case 5:
								goto IL_0419;
							default:
								goto IL_0419;
							}
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							break;
						case 14:
						case 16:
							goto IL_0419;
						default:
							switch (num)
							{
							case 22:
							case 23:
								break;
							default:
								if (num != 28)
								{
									goto IL_0419;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						break;
					case 34:
						goto IL_0419;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 47:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							break;
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							goto IL_0419;
						default:
							switch (num)
							{
							case 71:
							case 74:
							case 75:
								break;
							case 72:
							case 73:
								goto IL_0419;
							default:
								goto IL_0419;
							}
							break;
						}
						break;
					}
				}
				else if (num != 82)
				{
					switch (num)
					{
					case 86:
						break;
					case 87:
						goto IL_0419;
					case 88:
					{
						OutputIntoClause outputIntoClause = this.outputIntoClause(token, list);
						if (this.inputState.guessing == 0)
						{
							vParent.OutputIntoClause = outputIntoClause;
						}
						if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_88_.member(this.LA(2)) && base.NextTokenMatches("OUTPUT"))
						{
							OutputClause outputClause = this.outputClause();
							if (this.inputState.guessing == 0)
							{
								vParent.OutputClause = outputClause;
								return;
							}
							return;
						}
						else
						{
							if (TSql90ParserInternal.tokenSet_105_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
							{
								return;
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						break;
					}
					default:
						if (num != 92)
						{
							goto IL_0419;
						}
						break;
					}
				}
			}
			else if (num <= 144)
			{
				if (num <= 106)
				{
					if (num != 95 && num != 106)
					{
						goto IL_0419;
					}
				}
				else if (num != 111 && num != 119)
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						goto IL_0419;
					default:
						goto IL_0419;
					}
				}
			}
			else if (num <= 191)
			{
				switch (num)
				{
				case 156:
				case 160:
				case 161:
				case 162:
				case 164:
				case 167:
				case 169:
				case 170:
				case 171:
				case 172:
				case 176:
					break;
				case 157:
				case 158:
				case 159:
				case 163:
				case 165:
				case 166:
				case 168:
				case 173:
				case 174:
				case 175:
					goto IL_0419;
				default:
					switch (num)
					{
					case 180:
					case 181:
						break;
					default:
						if (num != 191)
						{
							goto IL_0419;
						}
						break;
					}
					break;
				}
			}
			else if (num != 204)
			{
				switch (num)
				{
				case 219:
				case 220:
					break;
				default:
					if (num != 232)
					{
						goto IL_0419;
					}
					break;
				}
			}
			if (this.inputState.guessing == 0)
			{
				OutputClause outputClause = base.FragmentFactory.CreateFragment<OutputClause>();
				TSql80ParserBaseInternal.UpdateTokenInfo(outputClause, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputClause, outputClause.SelectColumns, list);
				vParent.OutputClause = outputClause;
				return;
			}
			return;
			IL_0419:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A8F RID: 6799 RVA: 0x000F4D34 File Offset: 0x000F2F34
		public OutputIntoClause outputIntoClause(IToken tOutput, IList<SelectElement> vSelectElements)
		{
			OutputIntoClause outputIntoClause = base.FragmentFactory.CreateFragment<OutputIntoClause>();
			TSql80ParserBaseInternal.UpdateTokenInfo(outputIntoClause, tOutput);
			TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputIntoClause, outputIntoClause.SelectColumns, vSelectElements);
			this.match(88);
			int num = this.LA(1);
			TableReference tableReference;
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
					tableReference = this.variableDmlTarget();
					goto IL_0077;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			tableReference = this.intoSchemaObjectTable();
			IL_0077:
			if (this.inputState.guessing == 0)
			{
				outputIntoClause.IntoTable = tableReference;
			}
			if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.identifierColumnList(outputIntoClause, outputIntoClause.IntoTableColumns);
			}
			else if (!TSql90ParserInternal.tokenSet_105_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return outputIntoClause;
		}

		// Token: 0x06001A90 RID: 6800 RVA: 0x000F4E50 File Offset: 0x000F3050
		public OutputClause outputClause()
		{
			OutputClause outputClause = base.FragmentFactory.CreateFragment<OutputClause>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OUTPUT");
				TSql80ParserBaseInternal.UpdateTokenInfo(outputClause, token);
			}
			SelectElement selectElement = this.outputClauseSelectElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputClause, outputClause.SelectColumns, selectElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				selectElement = this.outputClauseSelectElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputClause, outputClause.SelectColumns, selectElement);
				}
			}
			return outputClause;
		}

		// Token: 0x06001A91 RID: 6801 RVA: 0x000F4EFC File Offset: 0x000F30FC
		public VariableTableReference variableDmlTarget()
		{
			VariableTableReference variableTableReference = base.FragmentFactory.CreateFragment<VariableTableReference>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				variableTableReference.Variable = variableReference;
			}
			return variableTableReference;
		}

		// Token: 0x06001A92 RID: 6802 RVA: 0x000F4F34 File Offset: 0x000F3134
		public NamedTableReference intoSchemaObjectTable()
		{
			NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				namedTableReference.SchemaObject = schemaObjectName;
			}
			return namedTableReference;
		}

		// Token: 0x06001A93 RID: 6803 RVA: 0x000F4F6C File Offset: 0x000F316C
		public DeleteSpecification deleteSpecification()
		{
			DeleteSpecification deleteSpecification = base.FragmentFactory.CreateFragment<DeleteSpecification>();
			IToken token = this.LT(1);
			this.match(48);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(deleteSpecification, token);
			}
			int num = this.LA(1);
			if (num <= 109)
			{
				if (num == 71)
				{
					goto IL_00BE;
				}
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					goto IL_00BE;
				}
			}
			else if (num != 152)
			{
				if (num == 200)
				{
					goto IL_00BE;
				}
				switch (num)
				{
				case 232:
				case 233:
				case 234:
					goto IL_00BE;
				}
			}
			else
			{
				TopRowFilter topRowFilter = this.topRowFilterForInsertUpdateDelete();
				if (this.inputState.guessing == 0)
				{
					deleteSpecification.TopRowFilter = topRowFilter;
					goto IL_00BE;
				}
				goto IL_00BE;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00BE:
			int num2 = this.LA(1);
			if (num2 <= 109)
			{
				if (num2 == 71)
				{
					this.match(71);
					goto IL_012C;
				}
				switch (num2)
				{
				case 107:
				case 108:
				case 109:
					goto IL_012C;
				}
			}
			else
			{
				if (num2 == 200)
				{
					goto IL_012C;
				}
				switch (num2)
				{
				case 232:
				case 233:
				case 234:
					goto IL_012C;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_012C:
			TableReference tableReference = this.dmlTarget();
			if (this.inputState.guessing == 0)
			{
				deleteSpecification.Target = tableReference;
			}
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_88_.member(this.LA(2)) && base.NextTokenMatches("OUTPUT"))
			{
				this.outputIntoOutputClause(deleteSpecification);
			}
			else if (!TSql90ParserInternal.tokenSet_106_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			FromClause fromClause = this.fromClauseOpt();
			if (this.inputState.guessing == 0)
			{
				deleteSpecification.FromClause = fromClause;
			}
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 28)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							return deleteSpecification;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return deleteSpecification;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return deleteSpecification;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								return deleteSpecification;
							default:
								if (num3 == 28)
								{
									return deleteSpecification;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 75)
				{
					switch (num3)
					{
					case 33:
					case 35:
						return deleteSpecification;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return deleteSpecification;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num3)
							{
							case 74:
							case 75:
								return deleteSpecification;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					return deleteSpecification;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 111)
				{
					if (num3 == 95 || num3 == 106 || num3 == 111)
					{
						return deleteSpecification;
					}
				}
				else
				{
					if (num3 == 119)
					{
						return deleteSpecification;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return deleteSpecification;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return deleteSpecification;
						case 169:
						{
							WhereClause whereClause = this.dmlWhereClause();
							if (this.inputState.guessing == 0)
							{
								deleteSpecification.WhereClause = whereClause;
								return deleteSpecification;
							}
							return deleteSpecification;
						}
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176)
				{
					return deleteSpecification;
				}
				switch (num3)
				{
				case 180:
				case 181:
					return deleteSpecification;
				default:
					if (num3 == 191)
					{
						return deleteSpecification;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return deleteSpecification;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return deleteSpecification;
				default:
					if (num3 == 232)
					{
						return deleteSpecification;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A94 RID: 6804 RVA: 0x000F5400 File Offset: 0x000F3600
		public TableReference dmlTarget()
		{
			int num = this.LA(1);
			TableReference tableReference;
			switch (num)
			{
			case 107:
			case 108:
			case 109:
				tableReference = this.openRowset();
				break;
			default:
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					case 234:
						return this.variableDmlTarget();
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				tableReference = this.schemaObjectDmlTarget();
				break;
			}
			return tableReference;
		}

		// Token: 0x06001A95 RID: 6805 RVA: 0x000F5480 File Offset: 0x000F3680
		public WhereClause dmlWhereClause()
		{
			WhereClause whereClause;
			if (this.LA(1) == 169 && TSql90ParserInternal.tokenSet_107_.member(this.LA(2)))
			{
				whereClause = this.whereClause();
			}
			else
			{
				if (this.LA(1) != 169 || this.LA(2) != 37)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				whereClause = this.whereCurrentOfCursorClause();
			}
			return whereClause;
		}

		// Token: 0x06001A96 RID: 6806 RVA: 0x000F54F0 File Offset: 0x000F36F0
		public InsertSpecification insertSpecification()
		{
			InsertSpecification insertSpecification = base.FragmentFactory.CreateFragment<InsertSpecification>();
			IToken token = this.LT(1);
			this.match(86);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token);
			}
			int num = this.LA(1);
			if (num <= 115)
			{
				if (num == 88)
				{
					goto IL_00CB;
				}
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					goto IL_00CB;
				default:
					if (num == 115)
					{
						goto IL_00CB;
					}
					break;
				}
			}
			else if (num != 152)
			{
				if (num == 200)
				{
					goto IL_00CB;
				}
				switch (num)
				{
				case 232:
				case 233:
				case 234:
					goto IL_00CB;
				}
			}
			else
			{
				TopRowFilter topRowFilter = this.topRowFilterForInsertUpdateDelete();
				if (this.inputState.guessing == 0)
				{
					insertSpecification.TopRowFilter = topRowFilter;
					goto IL_00CB;
				}
				goto IL_00CB;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00CB:
			int num2 = this.LA(1);
			if (num2 <= 109)
			{
				if (num2 != 88)
				{
					switch (num2)
					{
					case 107:
					case 108:
					case 109:
						goto IL_0171;
					}
				}
				else
				{
					this.match(88);
					if (this.inputState.guessing == 0)
					{
						insertSpecification.InsertOption = InsertOption.Into;
						goto IL_0171;
					}
					goto IL_0171;
				}
			}
			else if (num2 != 115)
			{
				if (num2 == 200)
				{
					goto IL_0171;
				}
				switch (num2)
				{
				case 232:
				case 233:
				case 234:
					goto IL_0171;
				}
			}
			else
			{
				this.match(115);
				if (this.inputState.guessing == 0)
				{
					insertSpecification.InsertOption = InsertOption.Over;
					goto IL_0171;
				}
				goto IL_0171;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0171:
			TableReference tableReference = this.dmlTarget();
			if (this.inputState.guessing == 0)
			{
				insertSpecification.Target = tableReference;
			}
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
			{
				int num3 = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					int num4 = this.LA(1);
					if (num4 != 200)
					{
						switch (num4)
						{
						case 232:
							this.match(232);
							break;
						case 233:
							this.match(233);
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(200);
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num3);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken token2 = this.LT(1);
				this.match(191);
				ColumnReferenceExpression columnReferenceExpression = this.insertColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token2);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(insertSpecification, insertSpecification.Columns, columnReferenceExpression);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					columnReferenceExpression = this.insertColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(insertSpecification, insertSpecification.Columns, columnReferenceExpression);
					}
				}
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_108_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_109_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 232 && base.NextTokenMatches("OUTPUT"))
			{
				this.outputIntoOutputClause(insertSpecification);
			}
			else if (!TSql90ParserInternal.tokenSet_110_.member(this.LA(1)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num5 = this.LA(1);
			InsertSource insertSource;
			if (num5 > 61)
			{
				if (num5 != 140)
				{
					if (num5 == 164)
					{
						goto IL_03F2;
					}
					if (num5 != 191)
					{
						goto IL_0410;
					}
				}
				insertSource = this.selectInsertSource();
				goto IL_0423;
			}
			if (num5 != 47)
			{
				switch (num5)
				{
				case 60:
				case 61:
					insertSource = this.executeInsertSource();
					goto IL_0423;
				default:
					goto IL_0410;
				}
			}
			IL_03F2:
			insertSource = this.valuesInsertSource();
			goto IL_0423;
			IL_0410:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0423:
			if (this.inputState.guessing == 0)
			{
				insertSpecification.InsertSource = insertSource;
			}
			return insertSpecification;
		}

		// Token: 0x06001A97 RID: 6807 RVA: 0x000F5948 File Offset: 0x000F3B48
		public ColumnReferenceExpression insertColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
			}
			return columnReferenceExpression;
		}

		// Token: 0x06001A98 RID: 6808 RVA: 0x000F5980 File Offset: 0x000F3B80
		public ValuesInsertSource valuesInsertSource()
		{
			ValuesInsertSource valuesInsertSource = base.FragmentFactory.CreateFragment<ValuesInsertSource>();
			int num = this.LA(1);
			if (num != 47)
			{
				if (num != 164)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(164);
				RowValue rowValue = this.rowValueExpressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(valuesInsertSource, token);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RowValue>(valuesInsertSource, valuesInsertSource.RowValues, rowValue);
				}
			}
			else
			{
				this.match(47);
				IToken token2 = this.LT(1);
				this.match(164);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(valuesInsertSource, token2);
					valuesInsertSource.IsDefaultValues = true;
				}
			}
			return valuesInsertSource;
		}

		// Token: 0x06001A99 RID: 6809 RVA: 0x000F5A40 File Offset: 0x000F3C40
		public ExecuteInsertSource executeInsertSource()
		{
			ExecuteInsertSource executeInsertSource = base.FragmentFactory.CreateFragment<ExecuteInsertSource>();
			ExecuteSpecification executeSpecification = this.executeSpecification();
			if (this.inputState.guessing == 0)
			{
				executeInsertSource.Execute = executeSpecification;
			}
			return executeInsertSource;
		}

		// Token: 0x06001A9A RID: 6810 RVA: 0x000F5A78 File Offset: 0x000F3C78
		public SelectInsertSource selectInsertSource()
		{
			SelectInsertSource selectInsertSource = base.FragmentFactory.CreateFragment<SelectInsertSource>();
			QueryExpression queryExpression = this.queryExpression(null);
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_02AC;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_02AC;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_02AC;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_02AC;
						default:
							if (num == 28)
							{
								goto IL_02AC;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_02AC;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_02AC;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_02AC;
						default:
							if (num == 82)
							{
								goto IL_02AC;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_02AC;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						goto IL_02AC;
					}
					switch (num)
					{
					case 111:
						goto IL_02AC;
					case 112:
						break;
					case 113:
					{
						OrderByClause orderByClause = this.orderByClause();
						if (this.inputState.guessing == 0)
						{
							queryExpression.OrderByClause = orderByClause;
							goto IL_02AC;
						}
						goto IL_02AC;
					}
					default:
						if (num == 119)
						{
							goto IL_02AC;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_02AC;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_02AC;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_02AC;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_02AC;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_02AC;
				default:
					if (num == 191)
					{
						goto IL_02AC;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_02AC;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_02AC;
				default:
					if (num == 232)
					{
						goto IL_02AC;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_02AC:
			if (this.inputState.guessing == 0)
			{
				selectInsertSource.Select = queryExpression;
			}
			return selectInsertSource;
		}

		// Token: 0x06001A9B RID: 6811 RVA: 0x000F5D48 File Offset: 0x000F3F48
		public UpdateSpecification updateSpecification()
		{
			UpdateSpecification updateSpecification = base.FragmentFactory.CreateFragment<UpdateSpecification>();
			IToken token = this.LT(1);
			this.match(160);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateSpecification, token);
			}
			int num = this.LA(1);
			if (num <= 152)
			{
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					goto IL_00BE;
				default:
					if (num == 152)
					{
						TopRowFilter topRowFilter = this.topRowFilterForInsertUpdateDelete();
						if (this.inputState.guessing == 0)
						{
							updateSpecification.TopRowFilter = topRowFilter;
							goto IL_00BE;
						}
						goto IL_00BE;
					}
					break;
				}
			}
			else
			{
				if (num == 200)
				{
					goto IL_00BE;
				}
				switch (num)
				{
				case 232:
				case 233:
				case 234:
					goto IL_00BE;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00BE:
			TableReference tableReference = this.dmlTarget();
			if (this.inputState.guessing == 0)
			{
				updateSpecification.Target = tableReference;
			}
			this.setClausesList(updateSpecification, updateSpecification.SetClauses);
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_88_.member(this.LA(2)) && base.NextTokenMatches("OUTPUT"))
			{
				this.outputIntoOutputClause(updateSpecification);
			}
			else if (!TSql90ParserInternal.tokenSet_106_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			FromClause fromClause = this.fromClauseOpt();
			if (this.inputState.guessing == 0)
			{
				updateSpecification.FromClause = fromClause;
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							return updateSpecification;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return updateSpecification;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return updateSpecification;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								return updateSpecification;
							default:
								if (num2 == 28)
								{
									return updateSpecification;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 33:
					case 35:
						return updateSpecification;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return updateSpecification;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return updateSpecification;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					return updateSpecification;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 111)
				{
					if (num2 == 95 || num2 == 106 || num2 == 111)
					{
						return updateSpecification;
					}
				}
				else
				{
					if (num2 == 119)
					{
						return updateSpecification;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return updateSpecification;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return updateSpecification;
						case 169:
						{
							WhereClause whereClause = this.dmlWhereClause();
							if (this.inputState.guessing == 0)
							{
								updateSpecification.WhereClause = whereClause;
								return updateSpecification;
							}
							return updateSpecification;
						}
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176)
				{
					return updateSpecification;
				}
				switch (num2)
				{
				case 180:
				case 181:
					return updateSpecification;
				default:
					if (num2 == 191)
					{
						return updateSpecification;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return updateSpecification;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return updateSpecification;
				default:
					if (num2 == 232)
					{
						return updateSpecification;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001A9C RID: 6812 RVA: 0x000F617C File Offset: 0x000F437C
		public void setClausesList(TSqlFragment vParent, IList<SetClause> setClauses)
		{
			IToken token = this.LT(1);
			this.match(142);
			SetClause setClause = this.setClause();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetClause>(vParent, setClauses, setClause);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				setClause = this.setClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetClause>(vParent, setClauses, setClause);
				}
			}
		}

		// Token: 0x06001A9D RID: 6813 RVA: 0x000F61F8 File Offset: 0x000F43F8
		public SetClause setClause()
		{
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
					return this.setClauseStartingWithVariable();
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
			int num2 = this.LA(1);
			SetClause setClause;
			if (num2 != 191)
			{
				if (num2 != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				setClause = this.setClauseColumnAssignment(multiPartIdentifier);
			}
			else
			{
				setClause = this.setClauseFunctionCall(multiPartIdentifier);
			}
			return setClause;
		}

		// Token: 0x06001A9E RID: 6814 RVA: 0x000F6294 File Offset: 0x000F4494
		public AssignmentSetClause setClauseStartingWithVariable()
		{
			AssignmentSetClause assignmentSetClause = base.FragmentFactory.CreateFragment<AssignmentSetClause>();
			VariableReference variableReference = this.variable();
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				assignmentSetClause.Variable = variableReference;
			}
			bool flag = false;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_111_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.multiPartIdentifier(-1);
					this.match(206);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				this.match(206);
				ScalarExpression scalarExpression = this.expressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					base.CreateSetClauseColumn(assignmentSetClause, multiPartIdentifier);
					assignmentSetClause.NewValue = scalarExpression;
				}
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_37_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_112_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					assignmentSetClause.NewValue = scalarExpression;
				}
			}
			return assignmentSetClause;
		}

		// Token: 0x06001A9F RID: 6815 RVA: 0x000F640C File Offset: 0x000F460C
		public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier)
		{
			AssignmentSetClause assignmentSetClause = base.FragmentFactory.CreateFragment<AssignmentSetClause>();
			this.match(206);
			ScalarExpression scalarExpression = this.expressionWithDefault();
			if (this.inputState.guessing == 0)
			{
				base.CreateSetClauseColumn(assignmentSetClause, vMultiPartIdentifier);
				assignmentSetClause.NewValue = scalarExpression;
			}
			return assignmentSetClause;
		}

		// Token: 0x06001AA0 RID: 6816 RVA: 0x000F6454 File Offset: 0x000F4654
		public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier)
		{
			FunctionCallSetClause functionCallSetClause = base.FragmentFactory.CreateFragment<FunctionCallSetClause>();
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			base.PutIdentifiersIntoFunctionCall(functionCall, vMultiPartIdentifier);
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			if (this.inputState.guessing == 0)
			{
				functionCallSetClause.MutatorFunction = functionCall;
			}
			return functionCallSetClause;
		}

		// Token: 0x06001AA1 RID: 6817 RVA: 0x000F64A4 File Offset: 0x000F46A4
		public ExecuteSpecification executeSpecification()
		{
			ExecuteSpecification executeSpecification = base.FragmentFactory.CreateFragment<ExecuteSpecification>();
			this.execStart(executeSpecification);
			this.execTypes(executeSpecification);
			return executeSpecification;
		}

		// Token: 0x06001AA2 RID: 6818 RVA: 0x000F64CC File Offset: 0x000F46CC
		public RowValue rowValueExpressionWithDefault()
		{
			RowValue rowValue = base.FragmentFactory.CreateFragment<RowValue>();
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token);
			}
			this.expressionWithDefaultList(rowValue, rowValue.ColumnValues);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token2);
			}
			return rowValue;
		}

		// Token: 0x06001AA3 RID: 6819 RVA: 0x000F6548 File Offset: 0x000F4748
		public void expressionWithDefaultList(TSqlFragment vParent, IList<ScalarExpression> expressions)
		{
			ScalarExpression scalarExpression = this.expressionWithDefault();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, scalarExpression);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, scalarExpression);
				}
			}
		}

		// Token: 0x06001AA4 RID: 6820 RVA: 0x000F65A8 File Offset: 0x000F47A8
		public TableReferenceWithAlias schemaObjectDmlTarget()
		{
			bool flag = false;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_113_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.schemaObjectFourPartName();
					this.match(191);
					int num2 = this.LA(1);
					if (num2 <= 100)
					{
						if (num2 != 47 && num2 != 100)
						{
							goto IL_0106;
						}
					}
					else
					{
						switch (num2)
						{
						case 192:
							this.match(192);
							goto IL_0119;
						case 193:
							break;
						default:
							if (num2 != 199)
							{
								switch (num2)
								{
								case 221:
								case 222:
								case 223:
								case 224:
								case 225:
								case 230:
								case 231:
								case 234:
									break;
								case 226:
								case 227:
								case 228:
								case 229:
								case 232:
								case 233:
									goto IL_0106;
								default:
									goto IL_0106;
								}
							}
							break;
						}
					}
					this.possibleNegativeConstantWithDefault();
					goto IL_0119;
					IL_0106:
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_0119:;
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			TableReferenceWithAlias tableReferenceWithAlias;
			if (flag)
			{
				tableReferenceWithAlias = this.schemaObjectFunctionDmlTarget();
			}
			else
			{
				if ((this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) || !TSql90ParserInternal.tokenSet_114_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tableReferenceWithAlias = this.schemaObjectTableDmlTarget();
			}
			return tableReferenceWithAlias;
		}

		// Token: 0x06001AA5 RID: 6821 RVA: 0x000F6768 File Offset: 0x000F4968
		public ScalarExpression possibleNegativeConstantWithDefault()
		{
			int num = this.LA(1);
			if (num <= 100)
			{
				if (num == 47)
				{
					return this.defaultLiteral();
				}
				if (num != 100)
				{
					goto IL_0083;
				}
			}
			else if (num != 193 && num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
				case 232:
				case 233:
					goto IL_0083;
				default:
					goto IL_0083;
				}
			}
			return this.possibleNegativeConstant();
			IL_0083:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AA6 RID: 6822 RVA: 0x000F680C File Offset: 0x000F4A0C
		public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget()
		{
			SchemaObjectFunctionTableReference schemaObjectFunctionTableReference = base.FragmentFactory.CreateFragment<SchemaObjectFunctionTableReference>();
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				schemaObjectFunctionTableReference.SchemaObject = schemaObjectName;
			}
			this.parenthesizedOptExpressionWithDefaultList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Parameters);
			return schemaObjectFunctionTableReference;
		}

		// Token: 0x06001AA7 RID: 6823 RVA: 0x000F6850 File Offset: 0x000F4A50
		public NamedTableReference schemaObjectTableDmlTarget()
		{
			NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				namedTableReference.SchemaObject = schemaObjectName;
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.tableHints(namedTableReference, namedTableReference.TableHints, false);
			}
			else if (!TSql90ParserInternal.tokenSet_105_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return namedTableReference;
		}

		// Token: 0x06001AA8 RID: 6824 RVA: 0x000F68F8 File Offset: 0x000F4AF8
		public void tableHints(TSqlFragment vParent, IList<TableHint> hints, bool indexHintAllowed)
		{
			IToken token = this.LT(1);
			this.match(191);
			TableHint tableHint = this.tableHint(indexHintAllowed);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, tableHint);
			}
			while (TSql90ParserInternal.tokenSet_115_.member(this.LA(1)))
			{
				int num = this.LA(1);
				if (num <= 84)
				{
					if (num != 78 && num != 84)
					{
						goto IL_0086;
					}
				}
				else if (num != 198)
				{
					if (num != 232)
					{
						goto IL_0086;
					}
				}
				else
				{
					this.match(198);
				}
				tableHint = this.tableHint(indexHintAllowed);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, tableHint);
					continue;
				}
				continue;
				IL_0086:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001AA9 RID: 6825 RVA: 0x000F69E4 File Offset: 0x000F4BE4
		public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName)
		{
			NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
			namedTableReference.SchemaObject = vSchemaObjectName;
			if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232))
			{
				this.singleOldStyleTableHint(namedTableReference, namedTableReference.TableHints);
				if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_116_.member(this.LA(2)))
				{
					this.simpleTableReferenceAlias(namedTableReference);
				}
				else if (!TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_101_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				int num = this.LA(1);
				if (num <= 106)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_0460;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0460;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_0460;
							}
							break;
						}
					}
					else if (num <= 36)
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_0460;
						default:
							switch (num)
							{
							case 28:
							case 29:
							case 33:
							case 35:
							case 36:
								goto IL_0460;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 72:
						case 74:
						case 75:
						case 76:
						case 77:
						case 78:
						case 82:
						case 85:
						case 86:
						case 87:
						case 90:
						case 92:
						case 93:
						case 95:
							goto IL_0460;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 62:
						case 63:
						case 65:
						case 66:
						case 68:
						case 69:
						case 70:
						case 71:
						case 73:
						case 79:
						case 80:
						case 81:
						case 83:
						case 84:
						case 88:
						case 89:
						case 91:
						case 94:
							break;
						default:
							switch (num)
							{
							case 105:
							case 106:
								goto IL_0460;
							}
							break;
						}
					}
				}
				else if (num <= 194)
				{
					if (num <= 144)
					{
						switch (num)
						{
						case 111:
						case 113:
						case 114:
							goto IL_0460;
						case 112:
							break;
						default:
							switch (num)
							{
							case 119:
							case 123:
							case 125:
							case 126:
							case 129:
							case 131:
							case 132:
							case 133:
							case 134:
							case 138:
							case 140:
							case 142:
							case 143:
							case 144:
								goto IL_0460;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 169:
						case 170:
						case 171:
						case 172:
						case 176:
						case 177:
						case 178:
						case 180:
						case 181:
							goto IL_0460;
						case 157:
						case 159:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 173:
						case 174:
						case 175:
							break;
						case 179:
						{
							TableSampleClause tableSampleClause = this.tableSampleClause();
							if (this.inputState.guessing == 0)
							{
								namedTableReference.TableSampleClause = tableSampleClause;
								goto IL_0460;
							}
							goto IL_0460;
						}
						default:
							switch (num)
							{
							case 191:
							case 192:
							case 194:
								goto IL_0460;
							}
							break;
						}
					}
				}
				else if (num <= 204)
				{
					if (num == 198 || num == 204)
					{
						goto IL_0460;
					}
				}
				else
				{
					switch (num)
					{
					case 219:
					case 220:
						goto IL_0460;
					default:
						switch (num)
						{
						case 232:
						case 233:
							goto IL_0460;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0460:
				if ((this.LA(1) == 78 || this.LA(1) == 171) && TSql90ParserInternal.tokenSet_73_.member(this.LA(2)))
				{
					this.nonParameterTableHints(namedTableReference, namedTableReference.TableHints);
				}
				else if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_117_.member(this.LA(2)))
				{
					if (this.inputState.guessing == 0 && namedTableReference.TableSampleClause != null)
					{
						throw base.GetUnexpectedTokenErrorException();
					}
					this.simpleTableReferenceAlias(namedTableReference);
					int num2 = this.LA(1);
					if (num2 <= 106)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								goto IL_0843;
							}
							switch (num2)
							{
							case 4:
							case 6:
								goto IL_0843;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_0843;
								}
								break;
							}
						}
						else if (num2 <= 36)
						{
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_0843;
							default:
								switch (num2)
								{
								case 28:
								case 29:
								case 33:
								case 35:
								case 36:
									goto IL_0843;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 59:
							case 60:
							case 61:
							case 64:
							case 67:
							case 72:
							case 74:
							case 75:
							case 76:
							case 77:
							case 78:
							case 82:
							case 85:
							case 86:
							case 87:
							case 90:
							case 92:
							case 93:
							case 95:
								goto IL_0843;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 62:
							case 63:
							case 65:
							case 66:
							case 68:
							case 69:
							case 70:
							case 71:
							case 73:
							case 79:
							case 80:
							case 81:
							case 83:
							case 84:
							case 88:
							case 89:
							case 91:
							case 94:
								break;
							default:
								switch (num2)
								{
								case 105:
								case 106:
									goto IL_0843;
								}
								break;
							}
						}
					}
					else if (num2 <= 194)
					{
						if (num2 <= 144)
						{
							switch (num2)
							{
							case 111:
							case 113:
							case 114:
								goto IL_0843;
							case 112:
								break;
							default:
								switch (num2)
								{
								case 119:
								case 123:
								case 125:
								case 126:
								case 129:
								case 131:
								case 132:
								case 133:
								case 134:
								case 138:
								case 140:
								case 142:
								case 143:
								case 144:
									goto IL_0843;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 156:
							case 158:
							case 160:
							case 161:
							case 162:
							case 167:
							case 169:
							case 170:
							case 171:
							case 172:
							case 176:
							case 177:
							case 178:
							case 180:
							case 181:
								goto IL_0843;
							case 157:
							case 159:
							case 163:
							case 164:
							case 165:
							case 166:
							case 168:
							case 173:
							case 174:
							case 175:
								break;
							case 179:
							{
								TableSampleClause tableSampleClause = this.tableSampleClause();
								if (this.inputState.guessing == 0)
								{
									namedTableReference.TableSampleClause = tableSampleClause;
									goto IL_0843;
								}
								goto IL_0843;
							}
							default:
								switch (num2)
								{
								case 191:
								case 192:
								case 194:
									goto IL_0843;
								}
								break;
							}
						}
					}
					else if (num2 <= 204)
					{
						if (num2 == 198 || num2 == 204)
						{
							goto IL_0843;
						}
					}
					else
					{
						switch (num2)
						{
						case 219:
						case 220:
							goto IL_0843;
						default:
							if (num2 == 232)
							{
								goto IL_0843;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_0843:
					bool flag = false;
					if (this.LA(1) == 191 && this.LA(2) == 221)
					{
						int num3 = this.mark();
						flag = true;
						this.inputState.guessing++;
						try
						{
							this.match(191);
							this.integer();
						}
						catch (RecognitionException)
						{
							flag = false;
						}
						this.rewind(num3);
						this.inputState.guessing--;
					}
					if (flag)
					{
						IndexTableHint indexTableHint = this.oldForceIndex();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(namedTableReference, namedTableReference.TableHints, indexTableHint);
						}
					}
					else
					{
						bool flag2 = false;
						if ((this.LA(1) == 78 || this.LA(1) == 171) && TSql90ParserInternal.tokenSet_73_.member(this.LA(2)))
						{
							int num4 = this.mark();
							flag2 = true;
							this.inputState.guessing++;
							try
							{
								int num5 = this.LA(1);
								if (num5 != 78)
								{
									if (num5 != 171)
									{
										if (num5 != 191)
										{
											throw new NoViableAltException(this.LT(1), this.getFilename());
										}
										this.match(191);
										int num6 = this.LA(1);
										if (num6 != 78)
										{
											if (num6 != 84)
											{
												throw new NoViableAltException(this.LT(1), this.getFilename());
											}
											this.match(84);
										}
										else
										{
											this.match(78);
										}
									}
									else
									{
										this.match(171);
									}
								}
								else
								{
									this.match(78);
								}
							}
							catch (RecognitionException)
							{
								flag2 = false;
							}
							this.rewind(num4);
							this.inputState.guessing--;
						}
						if (flag2)
						{
							this.nonParameterTableHints(namedTableReference, namedTableReference.TableHints);
						}
						else if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232))
						{
							this.singleOldStyleTableHint(namedTableReference, namedTableReference.TableHints);
						}
						else if (!TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
				}
				else if (!TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return namedTableReference;
		}

		// Token: 0x06001AAA RID: 6826 RVA: 0x000F74D8 File Offset: 0x000F56D8
		public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName)
		{
			SchemaObjectFunctionTableReference schemaObjectFunctionTableReference = base.FragmentFactory.CreateFragment<SchemaObjectFunctionTableReference>();
			schemaObjectFunctionTableReference.SchemaObject = vSchemaObjectName;
			this.parenthesizedOptExpressionWithDefaultList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Parameters);
			this.simpleTableReferenceAliasOpt(schemaObjectFunctionTableReference);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Columns);
			}
			else if (!TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return schemaObjectFunctionTableReference;
		}

		// Token: 0x06001AAB RID: 6827 RVA: 0x000F7580 File Offset: 0x000F5780
		public void singleOldStyleTableHint(TSqlFragment vParent, IList<TableHint> hints)
		{
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			TableHint tableHint = this.tableHint(true);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, tableHint);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001AAC RID: 6828 RVA: 0x000F75F0 File Offset: 0x000F57F0
		public void nonParameterTableHints(TSqlFragment vParent, IList<TableHint> hints)
		{
			int num = this.LA(1);
			if (num != 78)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.simpleTableHints(vParent, hints);
				return;
			}
			else
			{
				IToken token = this.LT(1);
				this.match(78);
				if (this.inputState.guessing == 0)
				{
					TableHint tableHint = base.FragmentFactory.CreateFragment<TableHint>();
					TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token);
					tableHint.HintKind = TableHintKind.HoldLock;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, tableHint);
				}
				bool flag = false;
				if (this.LA(1) == 191 && this.LA(2) == 221)
				{
					int num2 = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.match(191);
						this.integer();
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(num2);
					this.inputState.guessing--;
				}
				if (flag)
				{
					IndexTableHint indexTableHint = this.oldForceIndex();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, indexTableHint);
						return;
					}
					return;
				}
				else
				{
					bool flag2 = false;
					if (this.LA(1) == 171 && this.LA(2) == 191)
					{
						int num3 = this.mark();
						flag2 = true;
						this.inputState.guessing++;
						try
						{
							this.match(191);
							int num4 = this.LA(1);
							if (num4 != 84)
							{
								switch (num4)
								{
								case 232:
								case 233:
									this.identifier();
									break;
								default:
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
							}
							else
							{
								this.match(84);
							}
						}
						catch (RecognitionException)
						{
							flag2 = false;
						}
						this.rewind(num3);
						this.inputState.guessing--;
					}
					if (flag2)
					{
						this.simpleTableHints(vParent, hints);
						return;
					}
					if (TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
					{
						return;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
		}

		// Token: 0x06001AAD RID: 6829 RVA: 0x000F782C File Offset: 0x000F5A2C
		public IndexTableHint oldForceIndex()
		{
			IndexTableHint indexTableHint = base.FragmentFactory.CreateFragment<IndexTableHint>();
			IToken token = this.LT(1);
			this.match(191);
			Literal literal = this.integer();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, base.IdentifierOrValueExpression(literal));
				TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token2);
				indexTableHint.HintKind = TableHintKind.Index;
			}
			return indexTableHint;
		}

		// Token: 0x06001AAE RID: 6830 RVA: 0x000F78B0 File Offset: 0x000F5AB0
		public void fullTextTable(FullTextTableReference vParent)
		{
			int num = this.LA(1);
			if (num != 32)
			{
				if (num != 70)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(70);
				if (this.inputState.guessing == 0)
				{
					vParent.FullTextFunctionType = FullTextFunctionType.FreeText;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(32);
				if (this.inputState.guessing == 0)
				{
					vParent.FullTextFunctionType = FullTextFunctionType.Contains;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
			}
		}

		// Token: 0x06001AAF RID: 6831 RVA: 0x000F7940 File Offset: 0x000F5B40
		public void fulltextTableColumnList(FullTextTableReference vParent)
		{
			int num = this.LA(1);
			if (num != 195)
			{
				ColumnReferenceExpression columnReferenceExpression;
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						if (this.LA(1) == 191 && this.LA(2) == 195)
						{
							this.match(191);
							columnReferenceExpression = this.starColumnReferenceExpression();
							this.match(192);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, columnReferenceExpression);
								return;
							}
							return;
						}
						else
						{
							if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
							{
								this.match(191);
								columnReferenceExpression = this.identifierColumnReferenceExpression();
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, columnReferenceExpression);
								}
								while (this.LA(1) == 198)
								{
									this.match(198);
									columnReferenceExpression = this.identifierColumnReferenceExpression();
									if (this.inputState.guessing == 0)
									{
										TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, columnReferenceExpression);
									}
								}
								this.match(192);
								return;
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						break;
					}
				}
				columnReferenceExpression = this.identifierColumnReferenceExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, columnReferenceExpression);
					return;
				}
			}
			else
			{
				ColumnReferenceExpression columnReferenceExpression = this.starColumnReferenceExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, columnReferenceExpression);
					return;
				}
			}
		}

		// Token: 0x06001AB0 RID: 6832 RVA: 0x000F7AE0 File Offset: 0x000F5CE0
		public void fulltextTableOptions(FullTextTableReference vParent)
		{
			if (this.LA(1) == 198 && this.LA(2) == 232)
			{
				this.match(198);
				ValueExpression valueExpression = this.languageExpression();
				if (this.inputState.guessing == 0)
				{
					vParent.Language = valueExpression;
				}
				int num = this.LA(1);
				if (num != 192)
				{
					if (num != 198)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(198);
					ValueExpression valueExpression2 = this.unsignedInteger();
					if (this.inputState.guessing == 0)
					{
						vParent.TopN = valueExpression2;
						return;
					}
				}
			}
			else
			{
				if (this.LA(1) != 198 || (this.LA(2) != 221 && this.LA(2) != 234))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ValueExpression valueExpression2 = this.unsignedInteger();
				if (this.inputState.guessing == 0)
				{
					vParent.TopN = valueExpression2;
				}
				int num2 = this.LA(1);
				if (num2 != 192)
				{
					if (num2 != 198)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(198);
					ValueExpression valueExpression = this.languageExpression();
					if (this.inputState.guessing == 0)
					{
						vParent.Language = valueExpression;
						return;
					}
				}
			}
		}

		// Token: 0x06001AB1 RID: 6833 RVA: 0x000F7C44 File Offset: 0x000F5E44
		public ColumnReferenceExpression identifierColumnReferenceExpression()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(1);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.ColumnType = ColumnType.Regular;
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
			}
			return columnReferenceExpression;
		}

		// Token: 0x06001AB2 RID: 6834 RVA: 0x000F7C84 File Offset: 0x000F5E84
		public ColumnReferenceExpression starColumnReferenceExpression()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			IToken token = this.LT(1);
			this.match(195);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.ColumnType = ColumnType.Wildcard;
				TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06001AB3 RID: 6835 RVA: 0x000F7CD0 File Offset: 0x000F5ED0
		public ValueExpression languageExpression()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LANGUAGE");
			}
			return this.binaryOrIntegerOrStringOrVariable();
		}

		// Token: 0x06001AB4 RID: 6836 RVA: 0x000F7D14 File Offset: 0x000F5F14
		public ValueExpression unsignedInteger()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 221)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.variable();
			}
			else
			{
				valueExpression = this.integer();
			}
			return valueExpression;
		}

		// Token: 0x06001AB5 RID: 6837 RVA: 0x000F7D64 File Offset: 0x000F5F64
		public ValueExpression binaryOrIntegerOrStringOrVariable()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 221)
			{
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
						return this.stringLiteral();
					case 234:
						return this.variable();
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.binary();
			}
			else
			{
				valueExpression = this.integer();
			}
			return valueExpression;
		}

		// Token: 0x06001AB6 RID: 6838 RVA: 0x000F7DE4 File Offset: 0x000F5FE4
		public OpenXmlTableReference openXmlParams()
		{
			OpenXmlTableReference openXmlTableReference = base.FragmentFactory.CreateFragment<OpenXmlTableReference>();
			VariableReference variableReference = this.variable();
			this.match(198);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				openXmlTableReference.Variable = variableReference;
				openXmlTableReference.RowPattern = valueExpression;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ValueExpression valueExpression2 = this.unsignedInteger();
				if (this.inputState.guessing == 0)
				{
					openXmlTableReference.Flags = valueExpression2;
				}
			}
			return openXmlTableReference;
		}

		// Token: 0x06001AB7 RID: 6839 RVA: 0x000F7E88 File Offset: 0x000F6088
		public void openXmlWithClauseOpt(OpenXmlTableReference vParent)
		{
			bool flag = false;
			if (this.LA(1) == 171 && TSql90ParserInternal.tokenSet_113_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(171);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				if (this.LA(1) == 171 && this.LA(2) == 191)
				{
					this.match(171);
					this.match(191);
					this.openXmlSchemaItemList(vParent);
					IToken token = this.LT(1);
					this.match(192);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
						return;
					}
				}
				else
				{
					if (this.LA(1) != 171 || (this.LA(2) != 200 && this.LA(2) != 232 && this.LA(2) != 233))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(171);
					SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
					if (this.inputState.guessing == 0)
					{
						vParent.TableName = schemaObjectName;
						return;
					}
				}
				return;
			}
			if (TSql90ParserInternal.tokenSet_100_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AB8 RID: 6840 RVA: 0x000F8028 File Offset: 0x000F6228
		public void openXmlSchemaItemList(OpenXmlTableReference vParent)
		{
			SchemaDeclarationItem schemaDeclarationItem = this.openXmlSchemaItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaDeclarationItem>(vParent, vParent.SchemaDeclarationItems, schemaDeclarationItem);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				schemaDeclarationItem = this.openXmlSchemaItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaDeclarationItem>(vParent, vParent.SchemaDeclarationItems, schemaDeclarationItem);
				}
			}
		}

		// Token: 0x06001AB9 RID: 6841 RVA: 0x000F8094 File Offset: 0x000F6294
		public SchemaDeclarationItem openXmlSchemaItem()
		{
			SchemaDeclarationItem schemaDeclarationItem = base.FragmentFactory.CreateFragment<SchemaDeclarationItem>();
			ColumnDefinitionBase columnDefinitionBase = this.columnDefinitionBasic();
			if (this.inputState.guessing == 0)
			{
				schemaDeclarationItem.ColumnDefinition = columnDefinitionBase;
			}
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				switch (num)
				{
				case 230:
				case 231:
				case 234:
				{
					ValueExpression valueExpression = this.stringOrVariable();
					if (this.inputState.guessing == 0)
					{
						schemaDeclarationItem.Mapping = valueExpression;
						return schemaDeclarationItem;
					}
					return schemaDeclarationItem;
				}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return schemaDeclarationItem;
		}

		// Token: 0x06001ABA RID: 6842 RVA: 0x000F8134 File Offset: 0x000F6334
		public ColumnDefinitionBase columnDefinitionBasic()
		{
			ColumnDefinitionBase columnDefinitionBase = base.FragmentFactory.CreateFragment<ColumnDefinitionBase>();
			Identifier identifier = this.identifier();
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				columnDefinitionBase.ColumnIdentifier = identifier;
				columnDefinitionBase.DataType = dataTypeReference;
			}
			this.collationOpt(columnDefinitionBase);
			return columnDefinitionBase;
		}

		// Token: 0x06001ABB RID: 6843 RVA: 0x000F8180 File Offset: 0x000F6380
		public TableReferenceWithAlias openRowsetRowset()
		{
			IToken token = this.LT(1);
			this.match(109);
			this.match(191);
			int num = this.LA(1);
			TableReferenceWithAlias tableReferenceWithAlias;
			if (num != 17)
			{
				switch (num)
				{
				case 230:
				case 231:
					tableReferenceWithAlias = this.openRowsetParams();
					break;
				case 232:
				case 233:
					tableReferenceWithAlias = this.internalOpenRowsetArgs();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				tableReferenceWithAlias = this.openRowsetBulk();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableReferenceWithAlias, token);
			}
			return tableReferenceWithAlias;
		}

		// Token: 0x06001ABC RID: 6844 RVA: 0x000F8218 File Offset: 0x000F6418
		public OpenQueryTableReference openQueryRowset()
		{
			OpenQueryTableReference openQueryTableReference = base.FragmentFactory.CreateFragment<OpenQueryTableReference>();
			IToken token = this.LT(1);
			this.match(108);
			this.match(191);
			Identifier identifier = this.identifier();
			this.match(198);
			StringLiteral stringLiteral = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(openQueryTableReference, token);
				openQueryTableReference.LinkedServer = identifier;
				openQueryTableReference.Query = stringLiteral;
				TSql80ParserBaseInternal.UpdateTokenInfo(openQueryTableReference, token2);
			}
			return openQueryTableReference;
		}

		// Token: 0x06001ABD RID: 6845 RVA: 0x000F82A8 File Offset: 0x000F64A8
		public AdHocTableReference adhocRowset()
		{
			AdHocTableReference adHocTableReference = base.FragmentFactory.CreateFragment<AdHocTableReference>();
			AdHocDataSource adHocDataSource = this.adhocDataSource();
			this.match(200);
			if (this.inputState.guessing == 0)
			{
				adHocTableReference.DataSource = adHocDataSource;
			}
			SchemaObjectNameOrValueExpression schemaObjectNameOrValueExpression = this.objectOrString();
			if (this.inputState.guessing == 0)
			{
				adHocTableReference.Object = schemaObjectNameOrValueExpression;
			}
			return adHocTableReference;
		}

		// Token: 0x06001ABE RID: 6846 RVA: 0x000F8304 File Offset: 0x000F6504
		public OpenRowsetTableReference openRowsetParams()
		{
			OpenRowsetTableReference openRowsetTableReference = base.FragmentFactory.CreateFragment<OpenRowsetTableReference>();
			StringLiteral stringLiteral = this.stringLiteral();
			this.match(198);
			if (this.inputState.guessing == 0)
			{
				openRowsetTableReference.ProviderName = stringLiteral;
			}
			if ((this.LA(1) == 230 || this.LA(1) == 231) && this.LA(2) == 204)
			{
				StringLiteral stringLiteral2 = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					openRowsetTableReference.DataSource = stringLiteral2;
				}
				this.match(204);
				int num = this.LA(1);
				if (num != 204)
				{
					switch (num)
					{
					case 230:
					case 231:
					{
						StringLiteral stringLiteral3 = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							openRowsetTableReference.UserId = stringLiteral3;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				this.match(204);
				int num2 = this.LA(1);
				if (num2 != 198)
				{
					switch (num2)
					{
					case 230:
					case 231:
					{
						StringLiteral stringLiteral4 = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							openRowsetTableReference.Password = stringLiteral4;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
			}
			else
			{
				if ((this.LA(1) != 230 && this.LA(1) != 231) || this.LA(2) != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				StringLiteral stringLiteral5 = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					openRowsetTableReference.ProviderString = stringLiteral5;
				}
			}
			this.match(198);
			int num3 = this.LA(1);
			if (num3 != 200)
			{
				switch (num3)
				{
				case 230:
				case 231:
				{
					StringLiteral stringLiteral6 = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						openRowsetTableReference.Query = stringLiteral6;
						goto IL_0237;
					}
					goto IL_0237;
				}
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				openRowsetTableReference.Object = schemaObjectName;
			}
			IL_0237:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(openRowsetTableReference, token);
			}
			this.simpleTableReferenceAliasOpt(openRowsetTableReference);
			return openRowsetTableReference;
		}

		// Token: 0x06001ABF RID: 6847 RVA: 0x000F8578 File Offset: 0x000F6778
		public InternalOpenRowset internalOpenRowsetArgs()
		{
			InternalOpenRowset internalOpenRowset = base.FragmentFactory.CreateFragment<InternalOpenRowset>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				internalOpenRowset.Identifier = identifier;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				ScalarExpression scalarExpression = this.possibleNegativeConstant();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(internalOpenRowset, internalOpenRowset.VarArgs, scalarExpression);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(internalOpenRowset, token);
			}
			this.simpleTableReferenceAliasOpt(internalOpenRowset);
			return internalOpenRowset;
		}

		// Token: 0x06001AC0 RID: 6848 RVA: 0x000F861C File Offset: 0x000F681C
		public BulkOpenRowset openRowsetBulk()
		{
			BulkOpenRowset bulkOpenRowset = base.FragmentFactory.CreateFragment<BulkOpenRowset>();
			int num = 34866;
			this.match(17);
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				bulkOpenRowset.DataFile = stringLiteral;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				BulkInsertOption bulkInsertOption = this.openRowsetBulkHint();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(bulkOpenRowset, bulkOpenRowset.Options, bulkInsertOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql90ParserBaseInternal.CheckForFormatFileOptionInOpenRowsetBulk(num, stringLiteral);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkOpenRowset, token);
			}
			this.simpleTableReferenceAliasOpt(bulkOpenRowset);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(bulkOpenRowset, bulkOpenRowset.Columns);
			}
			else if (!TSql90ParserInternal.tokenSet_104_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return bulkOpenRowset;
		}

		// Token: 0x06001AC1 RID: 6849 RVA: 0x000F8758 File Offset: 0x000F6958
		public BulkInsertOption openRowsetBulkHint()
		{
			BulkInsertOption bulkInsertOption;
			if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198))
			{
				bulkInsertOption = this.openRowsetBulkHintNoValue();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				bulkInsertOption = this.simpleBulkInsertOptionWithValue();
			}
			return bulkInsertOption;
		}

		// Token: 0x06001AC2 RID: 6850 RVA: 0x000F87D4 File Offset: 0x000F69D4
		public BulkInsertOption openRowsetBulkHintNoValue()
		{
			BulkInsertOption bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				bulkInsertOption.OptionKind = OpenRowsetBulkHintOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
			}
			return bulkInsertOption;
		}

		// Token: 0x06001AC3 RID: 6851 RVA: 0x000F8828 File Offset: 0x000F6A28
		public AdHocDataSource adhocDataSource()
		{
			AdHocDataSource adHocDataSource = base.FragmentFactory.CreateFragment<AdHocDataSource>();
			IToken token = this.LT(1);
			this.match(107);
			this.match(191);
			StringLiteral stringLiteral = this.stringLiteral();
			this.match(198);
			StringLiteral stringLiteral2 = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(adHocDataSource, token);
				adHocDataSource.ProviderName = stringLiteral;
				adHocDataSource.InitString = stringLiteral2;
				TSql80ParserBaseInternal.UpdateTokenInfo(adHocDataSource, token2);
			}
			return adHocDataSource;
		}

		// Token: 0x06001AC4 RID: 6852 RVA: 0x000F88B8 File Offset: 0x000F6AB8
		public SchemaObjectNameOrValueExpression objectOrString()
		{
			SchemaObjectNameOrValueExpression schemaObjectNameOrValueExpression = base.FragmentFactory.CreateFragment<SchemaObjectNameOrValueExpression>();
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						schemaObjectNameOrValueExpression.ValueExpression = literal;
						return schemaObjectNameOrValueExpression;
					}
					return schemaObjectNameOrValueExpression;
				}
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				schemaObjectNameOrValueExpression.SchemaObjectName = schemaObjectName;
			}
			return schemaObjectNameOrValueExpression;
		}

		// Token: 0x06001AC5 RID: 6853 RVA: 0x000F8950 File Offset: 0x000F6B50
		public void simpleTableHints(TSqlFragment vParent, IList<TableHint> hints)
		{
			IToken token = this.LT(1);
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			if (this.LA(1) == 191 && this.LA(2) == 221)
			{
				IndexTableHint indexTableHint = this.oldForceIndex();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, indexTableHint);
					return;
				}
				return;
			}
			else
			{
				if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232))
				{
					this.tableHints(vParent, hints, true);
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001AC6 RID: 6854 RVA: 0x000F8A10 File Offset: 0x000F6C10
		public TableHint tableHint(bool indexHintAllowed)
		{
			int num = this.LA(1);
			if (num != 78)
			{
				if (num == 84)
				{
					return this.indexTableHint(indexHintAllowed);
				}
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return this.simpleTableHint();
		}

		// Token: 0x06001AC7 RID: 6855 RVA: 0x000F8A60 File Offset: 0x000F6C60
		public TableHint simpleTableHint()
		{
			TableHint tableHint = base.FragmentFactory.CreateFragment<TableHint>();
			int num = this.LA(1);
			if (num != 78)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					tableHint.HintKind = TableHintOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
					TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token);
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(78);
				if (this.inputState.guessing == 0)
				{
					tableHint.HintKind = TableHintKind.HoldLock;
					TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token2);
				}
			}
			return tableHint;
		}

		// Token: 0x06001AC8 RID: 6856 RVA: 0x000F8B10 File Offset: 0x000F6D10
		public IndexTableHint indexTableHint(bool indexHintAllowed)
		{
			IndexTableHint indexTableHint = base.FragmentFactory.CreateFragment<IndexTableHint>();
			IToken token = this.LT(1);
			this.match(84);
			if (this.inputState.guessing == 0)
			{
				if (!indexHintAllowed)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46074", token, TSqlParserResource.SQL46074Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token);
				indexTableHint.HintKind = TableHintKind.Index;
			}
			int num = this.LA(1);
			if (num != 191)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrInteger();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, identifierOrValueExpression);
				}
			}
			else
			{
				this.match(191);
				IdentifierOrValueExpression identifierOrValueExpression = this.identifierOrInteger();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, identifierOrValueExpression);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					identifierOrValueExpression = this.identifierOrInteger();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, identifierOrValueExpression);
					}
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token2);
				}
			}
			return indexTableHint;
		}

		// Token: 0x06001AC9 RID: 6857 RVA: 0x000F8C6C File Offset: 0x000F6E6C
		public IdentifierOrValueExpression identifierOrInteger()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			int num = this.LA(1);
			if (num != 221)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						identifierOrValueExpression.Identifier = identifier;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = literal;
				}
			}
			return identifierOrValueExpression;
		}

		// Token: 0x06001ACA RID: 6858 RVA: 0x000F8CFC File Offset: 0x000F6EFC
		public WhereClause whereCurrentOfCursorClause()
		{
			WhereClause whereClause = base.FragmentFactory.CreateFragment<WhereClause>();
			IToken token = this.LT(1);
			this.match(169);
			this.match(37);
			this.match(102);
			CursorId cursorId = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(whereClause, token);
				whereClause.Cursor = cursorId;
			}
			return whereClause;
		}

		// Token: 0x06001ACB RID: 6859 RVA: 0x000F8D60 File Offset: 0x000F6F60
		public ExpressionGroupingSpecification simpleGroupByItem()
		{
			ExpressionGroupingSpecification expressionGroupingSpecification = base.FragmentFactory.CreateFragment<ExpressionGroupingSpecification>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				expressionGroupingSpecification.Expression = scalarExpression;
			}
			return expressionGroupingSpecification;
		}

		// Token: 0x06001ACC RID: 6860 RVA: 0x000F8D98 File Offset: 0x000F6F98
		public ExpressionWithSortOrder expressionWithSortOrder()
		{
			ExpressionWithSortOrder expressionWithSortOrder = base.FragmentFactory.CreateFragment<ExpressionWithSortOrder>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				expressionWithSortOrder.Expression = scalarExpression;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return expressionWithSortOrder;
						}
						switch (num)
						{
						case 4:
						case 6:
							return expressionWithSortOrder;
						case 5:
							goto IL_02E8;
						default:
							switch (num)
							{
							case 10:
								break;
							case 11:
							case 14:
							case 16:
								goto IL_02E8;
							case 12:
							case 13:
							case 15:
							case 17:
								return expressionWithSortOrder;
							default:
								goto IL_02E8;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return expressionWithSortOrder;
						default:
							switch (num)
							{
							case 28:
							case 29:
								return expressionWithSortOrder;
							default:
								switch (num)
								{
								case 33:
								case 35:
									return expressionWithSortOrder;
								case 34:
									goto IL_02E8;
								default:
									goto IL_02E8;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 59:
					case 60:
					case 61:
					case 64:
					case 67:
						return expressionWithSortOrder;
					case 47:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 62:
					case 63:
					case 65:
					case 66:
						goto IL_02E8;
					case 50:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return expressionWithSortOrder;
						default:
							if (num != 82)
							{
								goto IL_02E8;
							}
							return expressionWithSortOrder;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 86:
					case 87:
						return expressionWithSortOrder;
					default:
						if (num != 92 && num != 95)
						{
							goto IL_02E8;
						}
						return expressionWithSortOrder;
					}
				}
				SortOrder sortOrder = this.orderByOption(expressionWithSortOrder);
				if (this.inputState.guessing == 0)
				{
					expressionWithSortOrder.SortOrder = sortOrder;
					return expressionWithSortOrder;
				}
				return expressionWithSortOrder;
			}
			else if (num <= 176)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 111 || num == 119)
					{
						return expressionWithSortOrder;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return expressionWithSortOrder;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return expressionWithSortOrder;
						case 157:
						case 159:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return expressionWithSortOrder;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					return expressionWithSortOrder;
				default:
					switch (num)
					{
					case 191:
					case 192:
						return expressionWithSortOrder;
					default:
						if (num == 198)
						{
							return expressionWithSortOrder;
						}
						break;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return expressionWithSortOrder;
				}
				switch (num)
				{
				case 219:
				case 220:
					return expressionWithSortOrder;
				default:
					if (num == 232)
					{
						return expressionWithSortOrder;
					}
					break;
				}
			}
			IL_02E8:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001ACD RID: 6861 RVA: 0x000F90A4 File Offset: 0x000F72A4
		public ComputeFunction computeFunction()
		{
			ComputeFunction computeFunction = base.FragmentFactory.CreateFragment<ComputeFunction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				computeFunction.ComputeFunctionType = ComputeFunctionTypeHelper.Instance.ParseOption(token);
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				computeFunction.Expression = scalarExpression;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(computeFunction, token2);
			}
			return computeFunction;
		}

		// Token: 0x06001ACE RID: 6862 RVA: 0x000F9144 File Offset: 0x000F7344
		public SortOrder orderByOption(TSqlFragment vParent)
		{
			SortOrder sortOrder = SortOrder.NotSpecified;
			int num = this.LA(1);
			if (num != 10)
			{
				if (num != 50)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(50);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					sortOrder = SortOrder.Descending;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(10);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					sortOrder = SortOrder.Ascending;
				}
			}
			return sortOrder;
		}

		// Token: 0x06001ACF RID: 6863 RVA: 0x000F91D0 File Offset: 0x000F73D0
		public UpdateForClause updateForClause()
		{
			UpdateForClause updateForClause = base.FragmentFactory.CreateFragment<UpdateForClause>();
			IToken token = this.LT(1);
			this.match(160);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateForClause, token);
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return updateForClause;
						}
						switch (num)
						{
						case 4:
						case 6:
							return updateForClause;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return updateForClause;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return updateForClause;
						default:
							if (num == 28)
							{
								return updateForClause;
							}
							switch (num)
							{
							case 33:
							case 35:
								return updateForClause;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return updateForClause;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return updateForClause;
						default:
							if (num == 82)
							{
								return updateForClause;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return updateForClause;
				}
			}
			else if (num <= 162)
			{
				if (num <= 111)
				{
					if (num == 102)
					{
						this.match(102);
						ColumnReferenceExpression columnReferenceExpression = this.column();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(updateForClause, updateForClause.Columns, columnReferenceExpression);
						}
						while (this.LA(1) == 198)
						{
							this.match(198);
							columnReferenceExpression = this.column();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(updateForClause, updateForClause.Columns, columnReferenceExpression);
							}
						}
						return updateForClause;
					}
					if (num == 106 || num == 111)
					{
						return updateForClause;
					}
				}
				else
				{
					if (num == 119)
					{
						return updateForClause;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return updateForClause;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return updateForClause;
						}
						break;
					}
				}
			}
			else if (num <= 181)
			{
				switch (num)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					return updateForClause;
				case 168:
				case 169:
					break;
				default:
					if (num == 176)
					{
						return updateForClause;
					}
					switch (num)
					{
					case 180:
					case 181:
						return updateForClause;
					}
					break;
				}
			}
			else if (num <= 204)
			{
				if (num == 191 || num == 204)
				{
					return updateForClause;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					return updateForClause;
				default:
					if (num == 232)
					{
						return updateForClause;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AD0 RID: 6864 RVA: 0x000F950C File Offset: 0x000F770C
		public XmlForClauseOption xmlForClauseMode()
		{
			XmlForClauseOption xmlForClauseOption = base.FragmentFactory.CreateFragment<XmlForClauseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				xmlForClauseOption.OptionKind = XmlForClauseModeHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token);
			}
			if (this.LA(1) == 191 && (this.LA(2) == 230 || this.LA(2) == 231))
			{
				IToken token2 = this.LT(1);
				this.match(191);
				Literal literal = this.stringLiteral();
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					if (xmlForClauseOption.OptionKind == XmlForClauseOptions.Explicit || xmlForClauseOption.OptionKind == XmlForClauseOptions.Auto)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
					}
					xmlForClauseOption.Value = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_118_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return xmlForClauseOption;
		}

		// Token: 0x06001AD1 RID: 6865 RVA: 0x000F9630 File Offset: 0x000F7830
		public XmlForClauseOption xmlParam(XmlForClauseOptions encountered)
		{
			XmlForClauseOption xmlForClauseOption = base.FragmentFactory.CreateFragment<XmlForClauseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.LA(1) == 191 && (this.LA(2) == 230 || this.LA(2) == 231))
			{
				IToken token2 = this.LT(1);
				this.match(191);
				Literal literal = this.stringLiteral();
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					if (!TSql80ParserBaseInternal.TryMatch(token, "XMLSCHEMA") && !TSql80ParserBaseInternal.TryMatch(token, "ROOT"))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
					}
					xmlForClauseOption.Value = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token3);
				}
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_118_.member(this.LA(2)))
			{
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token, "BINARY"))
					{
						TSql80ParserBaseInternal.Match(token4, "BASE64");
						xmlForClauseOption.OptionKind = XmlForClauseOptions.BinaryBase64;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "ELEMENTS");
						if (TSql80ParserBaseInternal.TryMatch(token4, "XSINIL"))
						{
							xmlForClauseOption.OptionKind = XmlForClauseOptions.ElementsXsiNil;
						}
						else
						{
							TSql80ParserBaseInternal.Match(token4, "ABSENT");
							xmlForClauseOption.OptionKind = XmlForClauseOptions.ElementsAbsent;
						}
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token4);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_118_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0)
			{
				if (xmlForClauseOption.OptionKind == XmlForClauseOptions.None)
				{
					xmlForClauseOption.OptionKind = XmlForClauseOptionsHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token);
				}
				TSql80ParserBaseInternal.CheckXmlForClauseOptionDuplication(encountered, xmlForClauseOption.OptionKind, token);
			}
			return xmlForClauseOption;
		}

		// Token: 0x06001AD2 RID: 6866 RVA: 0x000F9834 File Offset: 0x000F7A34
		public OptimizerHint hint()
		{
			OptimizerHint optimizerHint;
			if (this.LA(1) == 232 && this.LA(2) == 221)
			{
				optimizerHint = this.literalOptimizerHint();
			}
			else if ((this.LA(1) == 113 || this.LA(1) == 232) && TSql90ParserInternal.tokenSet_119_.member(this.LA(2)))
			{
				optimizerHint = this.simpleOptimizerHint();
			}
			else if (this.LA(1) == 162)
			{
				optimizerHint = this.usePlanOptimizerHint();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 67)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				optimizerHint = this.optimizeForOptimizerHint();
			}
			return optimizerHint;
		}

		// Token: 0x06001AD3 RID: 6867 RVA: 0x000F98EC File Offset: 0x000F7AEC
		public LiteralOptimizerHint literalOptimizerHint()
		{
			LiteralOptimizerHint literalOptimizerHint = base.FragmentFactory.CreateFragment<LiteralOptimizerHint>();
			IToken token = this.LT(1);
			this.match(232);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalOptimizerHint.HintKind = IntegerOptimizerHintHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				literalOptimizerHint.Value = literal;
			}
			return literalOptimizerHint;
		}

		// Token: 0x06001AD4 RID: 6868 RVA: 0x000F9948 File Offset: 0x000F7B48
		public OptimizerHint simpleOptimizerHint()
		{
			OptimizerHint optimizerHint = base.FragmentFactory.CreateFragment<OptimizerHint>();
			if (this.LA(1) == 232 && this.LA(2) == 90)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(90);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = TSql80ParserBaseInternal.ParseJoinOptimizerHint(token);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 158)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(158);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = TSql80ParserBaseInternal.ParseUnionOptimizerHint(token2);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 113)
			{
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(113);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FORCE");
					optimizerHint.HintKind = OptimizerHintKind.ForceOrder;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 76)
			{
				IToken token4 = this.LT(1);
				this.match(232);
				this.match(76);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "HASH");
					optimizerHint.HintKind = OptimizerHintKind.HashGroup;
				}
			}
			else if (this.LA(1) == 113)
			{
				this.LT(1);
				this.match(113);
				this.match(76);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = OptimizerHintKind.OrderGroup;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 117)
			{
				IToken token5 = this.LT(1);
				this.match(232);
				this.match(117);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = PlanOptimizerHintHelper.Instance.ParseOption(token5, SqlVersionFlags.TSql90);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token6 = this.LT(1);
				this.match(232);
				IToken token7 = this.LT(1);
				this.match(232);
				int num = this.LA(1);
				if (num != 158)
				{
					if (num != 192 && num != 198)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.TryMatch(token6, "EXPAND"))
						{
							TSql80ParserBaseInternal.Match(token7, "VIEWS");
							optimizerHint.HintKind = OptimizerHintKind.ExpandViews;
						}
						else if (TSql80ParserBaseInternal.TryMatch(token6, "PARAMETERIZATION"))
						{
							if (TSql80ParserBaseInternal.TryMatch(token7, "SIMPLE"))
							{
								optimizerHint.HintKind = OptimizerHintKind.ParameterizationSimple;
							}
							else
							{
								TSql80ParserBaseInternal.Match(token7, "FORCED");
								optimizerHint.HintKind = OptimizerHintKind.ParameterizationForced;
							}
						}
						else
						{
							TSql80ParserBaseInternal.Match(token6, "BYPASS");
							TSql80ParserBaseInternal.Match(token7, "OPTIMIZER_QUEUE");
							optimizerHint.HintKind = OptimizerHintKind.BypassOptimizerQueue;
						}
					}
				}
				else
				{
					this.LT(1);
					this.match(158);
					this.match(5);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token6, "OPTIMIZE");
						TSql80ParserBaseInternal.Match(token7, "CORRELATED");
						optimizerHint.HintKind = OptimizerHintKind.OptimizeCorrelatedUnionAll;
					}
				}
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 192 && this.LA(2) != 198))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token8 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token8, "RECOMPILE");
					optimizerHint.HintKind = OptimizerHintKind.Recompile;
				}
			}
			return optimizerHint;
		}

		// Token: 0x06001AD5 RID: 6869 RVA: 0x000F9D64 File Offset: 0x000F7F64
		public LiteralOptimizerHint usePlanOptimizerHint()
		{
			LiteralOptimizerHint literalOptimizerHint = base.FragmentFactory.CreateFragment<LiteralOptimizerHint>();
			this.LT(1);
			this.match(162);
			this.match(117);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				literalOptimizerHint.HintKind = OptimizerHintKind.UsePlan;
				literalOptimizerHint.Value = literal;
			}
			return literalOptimizerHint;
		}

		// Token: 0x06001AD6 RID: 6870 RVA: 0x000F9DBC File Offset: 0x000F7FBC
		public OptimizeForOptimizerHint optimizeForOptimizerHint()
		{
			OptimizeForOptimizerHint optimizeForOptimizerHint = base.FragmentFactory.CreateFragment<OptimizeForOptimizerHint>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(67);
			this.match(191);
			VariableValuePair variableValuePair = this.variableValuePair();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OPTIMIZE");
				optimizeForOptimizerHint.HintKind = OptimizerHintKind.OptimizeFor;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableValuePair>(optimizeForOptimizerHint, optimizeForOptimizerHint.Pairs, variableValuePair);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				variableValuePair = this.variableValuePair();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableValuePair>(optimizeForOptimizerHint, optimizeForOptimizerHint.Pairs, variableValuePair);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(optimizeForOptimizerHint, token2);
			}
			return optimizeForOptimizerHint;
		}

		// Token: 0x06001AD7 RID: 6871 RVA: 0x000F9E98 File Offset: 0x000F8098
		public VariableValuePair variableValuePair()
		{
			VariableValuePair variableValuePair = base.FragmentFactory.CreateFragment<VariableValuePair>();
			VariableReference variableReference = this.variable();
			this.match(206);
			ValueExpression valueExpression = this.literal();
			if (this.inputState.guessing == 0)
			{
				variableValuePair.Variable = variableReference;
				variableValuePair.Value = valueExpression;
			}
			return variableValuePair;
		}

		// Token: 0x06001AD8 RID: 6872 RVA: 0x000F9EE8 File Offset: 0x000F80E8
		public ValueExpression literal()
		{
			int num = this.LA(1);
			ValueExpression valueExpression;
			if (num != 100)
			{
				if (num != 193)
				{
					switch (num)
					{
					case 221:
						return this.integer();
					case 222:
						return this.numeric();
					case 223:
						return this.real();
					case 224:
						return this.binary();
					case 225:
						return this.moneyLiteral();
					case 230:
					case 231:
						return this.stringLiteral();
					case 234:
						return this.globalVariableOrVariableReference();
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				valueExpression = this.odbcLiteral();
			}
			else
			{
				valueExpression = this.nullLiteral();
			}
			return valueExpression;
		}

		// Token: 0x06001AD9 RID: 6873 RVA: 0x000F9FBC File Offset: 0x000F81BC
		public void viewStatementBody(ViewStatementBody vResult)
		{
			int num = 0;
			this.match(166);
			SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
			if (this.inputState.guessing == 0)
			{
				vResult.SchemaObjectName = schemaObjectName;
				TSql80ParserBaseInternal.CheckForTemporaryView(schemaObjectName);
				base.ThrowPartialAstIfPhaseOne(vResult);
			}
			int num2 = this.LA(1);
			if (num2 != 9 && num2 != 171)
			{
				if (num2 != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.columnNameList(vResult, vResult.Columns);
			}
			int num3 = this.LA(1);
			if (num3 != 9)
			{
				if (num3 != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				ViewOption viewOption = this.viewOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)viewOption.OptionKind, viewOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ViewOption>(vResult, vResult.ViewOptions, viewOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					viewOption = this.viewOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)viewOption.OptionKind, viewOption);
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ViewOption>(vResult, vResult.ViewOptions, viewOption);
					}
				}
			}
			IToken token = this.LT(1);
			this.match(9);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
			}
			SelectStatement selectStatement = this.subqueryExpressionWithOptionalCTE();
			if (this.inputState.guessing == 0)
			{
				vResult.SelectStatement = selectStatement;
			}
			int num4 = this.LA(1);
			if (num4 <= 75)
			{
				if (num4 <= 35)
				{
					if (num4 == 1 || num4 == 35)
					{
						return;
					}
				}
				else if (num4 == 49 || num4 == 75)
				{
					return;
				}
			}
			else if (num4 <= 171)
			{
				if (num4 == 132)
				{
					return;
				}
				if (num4 == 171)
				{
					this.match(171);
					this.match(21);
					IToken token2 = this.LT(1);
					this.match(111);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token2);
						vResult.WithCheckOption = true;
						return;
					}
					return;
				}
			}
			else if (num4 == 204 || num4 == 219)
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001ADA RID: 6874 RVA: 0x000FA204 File Offset: 0x000F8404
		public ViewOption viewOption()
		{
			ViewOption viewOption = base.FragmentFactory.CreateFragment<ViewOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				viewOption.OptionKind = ViewOptionHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(viewOption, token);
			}
			return viewOption;
		}

		// Token: 0x06001ADB RID: 6875 RVA: 0x000FA258 File Offset: 0x000F8458
		public TriggerOption triggerOption(bool vOwnerProhibited)
		{
			TriggerOption triggerOption = null;
			int num = this.LA(1);
			switch (num)
			{
			case 60:
			case 61:
			{
				ExecuteAsClause executeAsClause = this.executeAsClause(false, vOwnerProhibited);
				if (this.inputState.guessing == 0)
				{
					ExecuteAsTriggerOption executeAsTriggerOption = base.FragmentFactory.CreateFragment<ExecuteAsTriggerOption>();
					executeAsTriggerOption.OptionKind = TriggerOptionKind.ExecuteAsClause;
					executeAsTriggerOption.ExecuteAsClause = executeAsClause;
					triggerOption = executeAsTriggerOption;
				}
				break;
			}
			default:
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					triggerOption = base.FragmentFactory.CreateFragment<TriggerOption>();
					triggerOption.OptionKind = TriggerOptionHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(triggerOption, token);
				}
				break;
			}
			}
			return triggerOption;
		}

		// Token: 0x06001ADC RID: 6876 RVA: 0x000FA31C File Offset: 0x000F851C
		public void procedureOptions(ProcedureStatementBody vParent)
		{
			int num = 0;
			this.match(171);
			ProcedureOption procedureOption = this.procedureOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)procedureOption.OptionKind, procedureOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureOption>(vParent, vParent.Options, procedureOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				procedureOption = this.procedureOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)procedureOption.OptionKind, procedureOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureOption>(vParent, vParent.Options, procedureOption);
				}
			}
		}

		// Token: 0x06001ADD RID: 6877 RVA: 0x000FA3B0 File Offset: 0x000F85B0
		public ProcedureOption procedureOption()
		{
			ProcedureOption procedureOption = null;
			int num = this.LA(1);
			switch (num)
			{
			case 60:
			case 61:
			{
				ExecuteAsClause executeAsClause = this.executeAsClause(false, false);
				if (this.inputState.guessing == 0)
				{
					ExecuteAsProcedureOption executeAsProcedureOption = base.FragmentFactory.CreateFragment<ExecuteAsProcedureOption>();
					executeAsProcedureOption.ExecuteAs = executeAsClause;
					executeAsProcedureOption.OptionKind = ProcedureOptionKind.ExecuteAs;
					procedureOption = executeAsProcedureOption;
				}
				break;
			}
			default:
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					procedureOption = base.FragmentFactory.CreateFragment<ProcedureOption>();
					procedureOption.OptionKind = ProcedureOptionHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(procedureOption, token);
				}
				break;
			}
			}
			return procedureOption;
		}

		// Token: 0x06001ADE RID: 6878 RVA: 0x000FA474 File Offset: 0x000F8674
		public void procedureStatementBody(ProcedureStatementBody vResult, out bool vParseErrorOccurred)
		{
			vParseErrorOccurred = false;
			try
			{
				switch (this.LA(1))
				{
				case 120:
					this.match(120);
					break;
				case 121:
					this.match(121);
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				ProcedureReference procedureReference = this.procedureReference();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(procedureReference.Name, "PROCEDURE");
					vResult.ProcedureReference = procedureReference;
				}
				if (this.inputState.guessing == 0)
				{
					base.ThrowPartialAstIfPhaseOne(vResult);
				}
				this.procedureParameterListOptionalParen(vResult);
				int num = this.LA(1);
				if (num != 9 && num != 67)
				{
					if (num != 171)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.procedureOptions(vResult);
				}
				int num2 = this.LA(1);
				if (num2 != 9)
				{
					if (num2 != 67)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(67);
					this.match(128);
					if (this.inputState.guessing == 0)
					{
						vResult.IsForReplication = true;
					}
				}
				IToken token = this.LT(1);
				this.match(9);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
				}
				int num3 = this.LA(1);
				if (num3 <= 86)
				{
					if (num3 <= 28)
					{
						if (num3 <= 6)
						{
							if (num3 != 1)
							{
								switch (num3)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_0492;
								default:
									goto IL_0492;
								}
							}
						}
						else
						{
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_0492;
							default:
								switch (num3)
								{
								case 22:
								case 23:
									break;
								default:
									if (num3 != 28)
									{
										goto IL_0492;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num3 <= 64)
					{
						switch (num3)
						{
						case 33:
						case 35:
							break;
						case 34:
							goto IL_0492;
						default:
							switch (num3)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 56:
								break;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 55:
								goto IL_0492;
							default:
								switch (num3)
								{
								case 60:
								case 61:
								case 64:
									break;
								case 62:
								case 63:
									goto IL_0492;
								default:
									goto IL_0492;
								}
								break;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 74:
						case 75:
							break;
						default:
							if (num3 != 82 && num3 != 86)
							{
								goto IL_0492;
							}
							break;
						}
					}
				}
				else if (num3 <= 144)
				{
					if (num3 <= 95)
					{
						if (num3 != 92 && num3 != 95)
						{
							goto IL_0492;
						}
					}
					else if (num3 != 106 && num3 != 119)
					{
						switch (num3)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							break;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							goto IL_0492;
						default:
							goto IL_0492;
						}
					}
				}
				else if (num3 <= 191)
				{
					switch (num3)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						break;
					case 157:
					case 158:
					case 159:
						goto IL_0492;
					default:
						switch (num3)
						{
						case 167:
						case 170:
						case 171:
						case 172:
						case 176:
						case 180:
						case 181:
							break;
						case 168:
						case 169:
						case 173:
						case 174:
						case 177:
						case 178:
						case 179:
							goto IL_0492;
						case 175:
						{
							MethodSpecifier methodSpecifier = this.methodSpecifier();
							this.optSemicolons(vResult);
							if (this.inputState.guessing == 0)
							{
								vResult.MethodSpecifier = methodSpecifier;
								goto IL_04A5;
							}
							goto IL_04A5;
						}
						default:
							if (num3 != 191)
							{
								goto IL_0492;
							}
							break;
						}
						break;
					}
				}
				else if (num3 != 204)
				{
					switch (num3)
					{
					case 219:
					case 220:
						break;
					default:
						if (num3 != 232)
						{
							goto IL_0492;
						}
						break;
					}
				}
				if (TSql90ParserInternal.tokenSet_23_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					while (this.LA(1) == 204)
					{
						this.match(204);
					}
					StatementList statementList = this.statementList(ref vParseErrorOccurred);
					if (this.inputState.guessing == 0)
					{
						vResult.StatementList = statementList;
						goto IL_04A5;
					}
					goto IL_04A5;
				}
				else
				{
					if ((this.LA(1) != 1 && this.LA(1) != 204 && this.LA(1) != 219) || !TSql90ParserInternal.tokenSet_120_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					goto IL_04A5;
				}
				IL_0492:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_04A5:;
			}
			catch (NoViableAltException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (!base.PhaseOne || vResult == null || vResult.ProcedureReference == null || vResult.ProcedureReference.Name == null)
				{
					throw;
				}
				base.ThrowPartialAstIfPhaseOne(vResult);
			}
		}

		// Token: 0x06001ADF RID: 6879 RVA: 0x000FA984 File Offset: 0x000F8B84
		public ProcedureReference procedureReference()
		{
			ProcedureReference procedureReference = base.FragmentFactory.CreateFragment<ProcedureReference>();
			SchemaObjectName schemaObjectName = this.schemaObjectFourPartName();
			Literal literal = this.procNumOpt();
			if (this.inputState.guessing == 0)
			{
				procedureReference.Name = schemaObjectName;
				procedureReference.Number = literal;
			}
			return procedureReference;
		}

		// Token: 0x06001AE0 RID: 6880 RVA: 0x000FA9C8 File Offset: 0x000F8BC8
		public void procedureParameterListOptionalParen(ProcedureStatementBodyBase vResult)
		{
			int num = this.LA(1);
			if (num <= 67)
			{
				if (num != 9 && num != 67)
				{
					goto IL_00B6;
				}
			}
			else if (num != 171)
			{
				if (num != 191)
				{
					if (num != 234)
					{
						goto IL_00B6;
					}
				}
				else
				{
					this.match(191);
					this.procedureParameterList(vResult);
					IToken token = this.LT(1);
					this.match(192);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
						return;
					}
					return;
				}
			}
			int num2 = this.LA(1);
			if (num2 <= 67)
			{
				if (num2 == 9 || num2 == 67)
				{
					return;
				}
			}
			else
			{
				if (num2 == 171)
				{
					return;
				}
				if (num2 == 234)
				{
					this.procedureParameterList(vResult);
					return;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_00B6:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AE1 RID: 6881 RVA: 0x000FAAA0 File Offset: 0x000F8CA0
		public void procedureParameterList(ProcedureStatementBodyBase vResult)
		{
			ProcedureParameter procedureParameter = this.procedureParameter();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, procedureParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				procedureParameter = this.procedureParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, procedureParameter);
				}
			}
		}

		// Token: 0x06001AE2 RID: 6882 RVA: 0x000FAB0C File Offset: 0x000F8D0C
		public ProcedureParameter procedureParameter()
		{
			ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
			Identifier identifier = this.identifierVariable();
			int num = this.LA(1);
			if (num <= 42)
			{
				if (num == 9)
				{
					this.match(9);
					goto IL_0069;
				}
				if (num == 42)
				{
					goto IL_0069;
				}
			}
			else
			{
				if (num == 53 || num == 96)
				{
					goto IL_0069;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_0069;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0069:
			if (this.inputState.guessing == 0)
			{
				procedureParameter.VariableName = identifier;
			}
			int num2 = this.LA(1);
			if (num2 <= 53)
			{
				if (num2 == 42)
				{
					this.cursorProcedureParameter(procedureParameter);
					return procedureParameter;
				}
				if (num2 != 53)
				{
					goto IL_00C4;
				}
			}
			else if (num2 != 96)
			{
				switch (num2)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_00C4;
				}
			}
			this.scalarProcedureParameter(procedureParameter, true);
			return procedureParameter;
			IL_00C4:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AE3 RID: 6883 RVA: 0x000FABF4 File Offset: 0x000F8DF4
		public void cursorProcedureParameter(ProcedureParameter vParent)
		{
			DataTypeReference dataTypeReference = this.cursorDataType();
			if (this.inputState.guessing == 0)
			{
				vParent.DataType = dataTypeReference;
			}
			IToken token = this.LT(1);
			this.match(165);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.IsVarying = true;
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "OUTPUT", "OUT");
				vParent.Modifier = ParameterModifier.Output;
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001AE4 RID: 6884 RVA: 0x000FAC8C File Offset: 0x000F8E8C
		public IdentifierLiteral identifierLiteral()
		{
			IdentifierLiteral identifierLiteral = base.FragmentFactory.CreateFragment<IdentifierLiteral>();
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifierLiteral, token);
					identifierLiteral.SetUnquotedIdentifier(token.getText());
					TSql80ParserBaseInternal.CheckIdentifierLiteralLength(identifierLiteral);
				}
				break;
			}
			case 233:
			{
				IToken token2 = this.LT(1);
				this.match(233);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifierLiteral, token2);
					identifierLiteral.SetIdentifier(token2.getText());
					TSql80ParserBaseInternal.CheckIdentifierLiteralLength(identifierLiteral);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierLiteral;
		}

		// Token: 0x06001AE5 RID: 6885 RVA: 0x000FAD54 File Offset: 0x000F8F54
		public UnaryExpression negativeConstant()
		{
			UnaryExpression unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
			IToken token = this.LT(1);
			this.match(199);
			Literal literal = this.subroutineParameterLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
				unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
				unaryExpression.Expression = literal;
			}
			return unaryExpression;
		}

		// Token: 0x06001AE6 RID: 6886 RVA: 0x000FADAC File Offset: 0x000F8FAC
		public Literal subroutineParameterLiteral()
		{
			switch (this.LA(1))
			{
			case 221:
				return this.integer();
			case 222:
				return this.numeric();
			case 223:
				return this.real();
			case 225:
				return this.moneyLiteral();
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AE7 RID: 6887 RVA: 0x000FAE1C File Offset: 0x000F901C
		public void triggerStatementBody(TriggerStatementBody vResult, out bool vParseErrorOccurred)
		{
			bool flag = false;
			vParseErrorOccurred = false;
			this.match(155);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "TRIGGER");
				vResult.Name = schemaObjectName;
			}
			this.match(105);
			TriggerObject triggerObject = this.triggerObject();
			if (this.inputState.guessing == 0)
			{
				vResult.TriggerObject = triggerObject;
				base.ThrowPartialAstIfPhaseOne(vResult);
				if (vResult.TriggerObject.TriggerScope != TriggerScope.Normal)
				{
					flag = true;
				}
			}
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 171)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(171);
					TriggerOption triggerOption = this.triggerOption(flag);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerOption>(vResult, vResult.Options, triggerOption);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						triggerOption = this.triggerOption(flag);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerOption>(vResult, vResult.Options, triggerOption);
						}
					}
				}
			}
			if ((this.LA(1) == 67 || this.LA(1) == 232) && this.LA(2) == 232 && flag)
			{
				this.ddlTriggerMidSection(vResult);
			}
			else
			{
				if ((this.LA(1) != 67 && this.LA(1) != 232) || !TSql90ParserInternal.tokenSet_121_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.dmlTriggerMidSection(vResult);
			}
			IToken token = this.LT(1);
			this.match(9);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
			}
			int num2 = this.LA(1);
			if (num2 <= 86)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						switch (num2)
						{
						case 4:
						case 6:
							break;
						case 5:
							goto IL_048D;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_048D;
							default:
								goto IL_048D;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							break;
						default:
							if (num2 != 28)
							{
								switch (num2)
								{
								case 33:
								case 35:
									break;
								case 34:
									goto IL_048D;
								default:
									goto IL_048D;
								}
							}
							break;
						}
					}
				}
				else if (num2 <= 64)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 56:
						break;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 55:
						goto IL_048D;
					default:
						switch (num2)
						{
						case 60:
						case 61:
						case 64:
							break;
						case 62:
						case 63:
							goto IL_048D;
						default:
							goto IL_048D;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 74:
					case 75:
						break;
					default:
						if (num2 != 82 && num2 != 86)
						{
							goto IL_048D;
						}
						break;
					}
				}
			}
			else if (num2 <= 144)
			{
				if (num2 <= 95)
				{
					if (num2 != 92 && num2 != 95)
					{
						goto IL_048D;
					}
				}
				else if (num2 != 106 && num2 != 119)
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						goto IL_048D;
					default:
						goto IL_048D;
					}
				}
			}
			else if (num2 <= 191)
			{
				switch (num2)
				{
				case 156:
				case 160:
				case 161:
				case 162:
					break;
				case 157:
				case 158:
				case 159:
					goto IL_048D;
				default:
					switch (num2)
					{
					case 167:
					case 170:
					case 171:
					case 172:
					case 176:
					case 180:
					case 181:
						break;
					case 168:
					case 169:
					case 173:
					case 174:
					case 177:
					case 178:
					case 179:
						goto IL_048D;
					case 175:
					{
						MethodSpecifier methodSpecifier = this.methodSpecifier();
						this.optSemicolons(vResult);
						if (this.inputState.guessing == 0)
						{
							vResult.MethodSpecifier = methodSpecifier;
							return;
						}
						return;
					}
					default:
						if (num2 != 191)
						{
							goto IL_048D;
						}
						break;
					}
					break;
				}
			}
			else if (num2 != 204 && num2 != 220 && num2 != 232)
			{
				goto IL_048D;
			}
			while (this.LA(1) == 204)
			{
				this.LT(1);
				this.match(204);
			}
			StatementList statementList = this.statementList(ref vParseErrorOccurred);
			if (this.inputState.guessing == 0)
			{
				vResult.StatementList = statementList;
				return;
			}
			return;
			IL_048D:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AE8 RID: 6888 RVA: 0x000FB2CC File Offset: 0x000F94CC
		public void ddlTriggerMidSection(TriggerStatementBody vParent)
		{
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "AFTER");
					vParent.TriggerType = TriggerType.After;
				}
			}
			else
			{
				this.match(67);
				if (this.inputState.guessing == 0)
				{
					vParent.TriggerType = TriggerType.For;
				}
			}
			if (this.LA(1) == 232 && (this.LA(2) == 9 || this.LA(2) == 198) && !base.NextTokenMatches("LOGON"))
			{
				TriggerAction triggerAction = this.ddlTriggerAction();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					triggerAction = this.ddlTriggerAction();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
					}
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 9)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "LOGON");
					if (vParent.TriggerObject.TriggerScope == TriggerScope.AllServer)
					{
						TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
						triggerAction.TriggerActionType = TriggerActionType.LogOn;
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
						return;
					}
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46044", token2, TSqlParserResource.SQL46044Message, new string[0]);
					return;
				}
			}
		}

		// Token: 0x06001AE9 RID: 6889 RVA: 0x000FB490 File Offset: 0x000F9690
		public void dmlTriggerMidSection(TriggerStatementBody vParent)
		{
			bool flag = false;
			int num = 0;
			int num2 = this.LA(1);
			if (num2 != 67)
			{
				if (num2 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				int num3 = this.LA(1);
				if (num3 <= 86)
				{
					if (num3 == 48 || num3 == 86)
					{
						goto IL_00BF;
					}
				}
				else if (num3 != 102)
				{
					if (num3 == 160)
					{
						goto IL_00BF;
					}
				}
				else
				{
					this.LT(1);
					this.match(102);
					if (this.inputState.guessing == 0)
					{
						flag = true;
						goto IL_00BF;
					}
					goto IL_00BF;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_00BF:
				if (this.inputState.guessing == 0)
				{
					if (flag)
					{
						TSql80ParserBaseInternal.Match(token, "INSTEAD");
						vParent.TriggerType = TriggerType.InsteadOf;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "AFTER");
						vParent.TriggerType = TriggerType.After;
					}
				}
			}
			else
			{
				this.match(67);
				if (this.inputState.guessing == 0)
				{
					vParent.TriggerType = TriggerType.For;
				}
			}
			TriggerAction triggerAction = this.dmlTriggerAction();
			if (this.inputState.guessing == 0)
			{
				TSql90ParserBaseInternal.CheckDmlTriggerActionDuplication(num, triggerAction);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
				TSql90ParserBaseInternal.UpdateDmlTriggerActionEncounteredOptions(ref num, triggerAction);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				triggerAction = this.dmlTriggerAction();
				if (this.inputState.guessing == 0)
				{
					TSql90ParserBaseInternal.CheckDmlTriggerActionDuplication(num, triggerAction);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
					TSql90ParserBaseInternal.UpdateDmlTriggerActionEncounteredOptions(ref num, triggerAction);
				}
			}
			int num4 = this.LA(1);
			if (num4 != 9 && num4 != 99)
			{
				if (num4 != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "APPEND");
					vParent.WithAppend = true;
				}
			}
			int num5 = this.LA(1);
			if (num5 != 9)
			{
				if (num5 != 99)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(99);
				this.match(67);
				this.match(128);
				if (this.inputState.guessing == 0)
				{
					vParent.IsNotForReplication = true;
					return;
				}
			}
		}

		// Token: 0x06001AEA RID: 6890 RVA: 0x000FB6EC File Offset: 0x000F98EC
		public TriggerAction dmlTriggerAction()
		{
			TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
			int num = this.LA(1);
			if (num != 48)
			{
				if (num != 86)
				{
					if (num != 160)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(160);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token);
						triggerAction.TriggerActionType = TriggerActionType.Update;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(86);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token2);
						triggerAction.TriggerActionType = TriggerActionType.Insert;
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(48);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token3);
					triggerAction.TriggerActionType = TriggerActionType.Delete;
				}
			}
			return triggerAction;
		}

		// Token: 0x06001AEB RID: 6891 RVA: 0x000FB7D0 File Offset: 0x000F99D0
		public TriggerAction ddlTriggerAction()
		{
			TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				triggerAction.TriggerActionType = TriggerActionType.Event;
				EventNotificationEventType eventNotificationEventType;
				if (TriggerEventTypeHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql90, out eventNotificationEventType))
				{
					triggerAction.EventTypeGroup = base.CreateEventTypeContainer(eventNotificationEventType, token);
				}
				else
				{
					EventNotificationEventGroup eventNotificationEventGroup = TriggerEventGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
					triggerAction.EventTypeGroup = base.CreateEventGroupContainer(eventNotificationEventGroup, token);
				}
			}
			return triggerAction;
		}

		// Token: 0x06001AEC RID: 6892 RVA: 0x000FB850 File Offset: 0x000F9A50
		public void endConversationArgumentsOpt(EndConversationStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 28)
					{
						if (num <= 6)
						{
							if (num != 1)
							{
								switch (num)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_0357;
								default:
									goto IL_0357;
								}
							}
						}
						else
						{
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_0357;
							default:
								switch (num)
								{
								case 22:
								case 23:
									break;
								default:
									if (num != 28)
									{
										goto IL_0357;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num <= 75)
					{
						switch (num)
						{
						case 33:
						case 35:
							break;
						case 34:
							goto IL_0357;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								break;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								goto IL_0357;
							default:
								switch (num)
								{
								case 74:
								case 75:
									break;
								default:
									goto IL_0357;
								}
								break;
							}
							break;
						}
					}
					else if (num != 82 && num != 86 && num != 92)
					{
						goto IL_0357;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num != 95 && num != 106 && num != 119)
						{
							goto IL_0357;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							break;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							goto IL_0357;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								break;
							case 157:
							case 158:
							case 159:
								goto IL_0357;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									break;
								case 168:
								case 169:
									goto IL_0357;
								default:
									goto IL_0357;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num != 176)
					{
						switch (num)
						{
						case 180:
						case 181:
							break;
						default:
							if (num != 191)
							{
								goto IL_0357;
							}
							break;
						}
					}
				}
				else
				{
					switch (num)
					{
					case 204:
						break;
					case 205:
						goto IL_0357;
					case 206:
					{
						this.match(206);
						ValueExpression valueExpression = this.integerOrVariable();
						IToken token2 = this.LT(1);
						this.match(232);
						this.match(206);
						ValueExpression valueExpression2 = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "DESCRIPTION");
							vParent.ErrorCode = valueExpression;
							vParent.ErrorDescription = valueExpression2;
							return;
						}
						return;
					}
					default:
						switch (num)
						{
						case 219:
						case 220:
							break;
						default:
							if (num != 232)
							{
								goto IL_0357;
							}
							break;
						}
						break;
					}
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "CLEANUP");
					vParent.WithCleanup = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				return;
				IL_0357:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AED RID: 6893 RVA: 0x000FBC04 File Offset: 0x000F9E04
		public SelectElement receiveSelectExpression()
		{
			SelectElement selectElement;
			if (this.LA(1) == 234 && this.LA(2) == 206)
			{
				selectElement = this.selectSetVariable();
			}
			else
			{
				bool flag = false;
				if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_122_.member(this.LA(2)))
				{
					int num = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.selectStarExpression();
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(num);
					this.inputState.guessing--;
				}
				if (flag)
				{
					selectElement = this.selectStarExpression();
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_88_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_123_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					selectElement = this.receiveColumnSelectExpression();
				}
			}
			return selectElement;
		}

		// Token: 0x06001AEE RID: 6894 RVA: 0x000FBD04 File Offset: 0x000F9F04
		public SelectScalarExpression receiveColumnSelectExpression()
		{
			SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_02BE;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_02BE;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_02BE;
					}
				}
			}
			else if (num <= 141)
			{
				if (num != 133 && num != 136 && num != 141)
				{
					goto IL_02BE;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_02BE;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
				case 194:
				case 196:
				case 198:
					goto IL_02BE;
				case 195:
				{
					IToken token = this.LT(1);
					this.match(195);
					if (this.inputState.guessing == 0)
					{
						ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
						columnReferenceExpression.ColumnType = ColumnType.Wildcard;
						TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token);
						selectScalarExpression.Expression = columnReferenceExpression;
						return selectScalarExpression;
					}
					return selectScalarExpression;
				}
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_02BE;
					default:
						goto IL_02BE;
					}
					break;
				}
			}
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				selectScalarExpression.Expression = scalarExpression;
			}
			int num2 = this.LA(1);
			if (num2 <= 71)
			{
				if (num2 != 9)
				{
					if (num2 != 71)
					{
						goto IL_02AB;
					}
					return selectScalarExpression;
				}
			}
			else
			{
				if (num2 == 198)
				{
					return selectScalarExpression;
				}
				switch (num2)
				{
				case 230:
				case 231:
				case 232:
				case 233:
					break;
				default:
					goto IL_02AB;
				}
			}
			int num3 = this.LA(1);
			if (num3 != 9)
			{
				switch (num3)
				{
				case 230:
				case 231:
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
			}
			IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				selectScalarExpression.ColumnName = identifierOrValueExpression;
				return selectScalarExpression;
			}
			return selectScalarExpression;
			IL_02AB:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_02BE:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AEF RID: 6895 RVA: 0x000FBFE4 File Offset: 0x000FA1E4
		public DialogOption beginConversationArgument(ref int encounteredOptions)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			if (num <= 105)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_01BA;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_01BA;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					case 102:
					case 104:
						goto IL_01BA;
					case 103:
					case 105:
						return this.onOffBeginDialogConversationArgument(token, ref encounteredOptions);
					default:
						goto IL_01BA;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_01BA;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_01BA;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_01BA;
					default:
						goto IL_01BA;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_01BA;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_01BA;
					default:
						goto IL_01BA;
					}
					break;
				}
			}
			return this.scalarExpressionBeginDialogConversationArgument(token, ref encounteredOptions);
			IL_01BA:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AF0 RID: 6896 RVA: 0x000FC1C0 File Offset: 0x000FA3C0
		public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, ref int encounteredOptions)
		{
			ScalarExpressionDialogOption scalarExpressionDialogOption = base.FragmentFactory.CreateFragment<ScalarExpressionDialogOption>();
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(tOption, "RELATED_CONVERSATION"))
				{
					scalarExpressionDialogOption.OptionKind = DialogOptionKind.RelatedConversation;
					scalarExpressionDialogOption.Value = scalarExpression;
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 1, tOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 0, tOption);
				}
				else if (TSql80ParserBaseInternal.TryMatch(tOption, "RELATED_CONVERSATION_GROUP"))
				{
					scalarExpressionDialogOption.OptionKind = DialogOptionKind.RelatedConversationGroup;
					scalarExpressionDialogOption.Value = scalarExpression;
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 1, tOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 0, tOption);
				}
				else
				{
					TSql80ParserBaseInternal.Match(tOption, "LIFETIME");
					scalarExpressionDialogOption.OptionKind = DialogOptionKind.Lifetime;
					scalarExpressionDialogOption.Value = scalarExpression;
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)scalarExpressionDialogOption.OptionKind, tOption);
				}
			}
			return scalarExpressionDialogOption;
		}

		// Token: 0x06001AF1 RID: 6897 RVA: 0x000FC274 File Offset: 0x000FA474
		public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, ref int encounteredOptions)
		{
			OnOffDialogOption onOffDialogOption = base.FragmentFactory.CreateFragment<OnOffDialogOption>();
			OptionState optionState = this.optionOnOff(onOffDialogOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tOption, "ENCRYPTION");
				onOffDialogOption.OptionKind = DialogOptionKind.Encryption;
				TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)onOffDialogOption.OptionKind, tOption);
				onOffDialogOption.OptionState = optionState;
			}
			return onOffDialogOption;
		}

		// Token: 0x06001AF2 RID: 6898 RVA: 0x000FC2CC File Offset: 0x000FA4CC
		public void execStart(TSqlFragment vParent)
		{
			switch (this.LA(1))
			{
			case 60:
			{
				IToken token = this.LT(1);
				this.match(60);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				break;
			}
			case 61:
			{
				IToken token2 = this.LT(1);
				this.match(61);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001AF3 RID: 6899 RVA: 0x000FC358 File Offset: 0x000FA558
		public ExecuteContext executeAsStatementContext()
		{
			ExecuteContext executeContext = base.FragmentFactory.CreateFragment<ExecuteContext>();
			int num = this.LA(1);
			if (num != 163)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				int num2 = this.LA(1);
				if (num2 <= 92)
				{
					if (num2 <= 28)
					{
						if (num2 <= 6)
						{
							if (num2 != 1)
							{
								switch (num2)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_036A;
								default:
									goto IL_036A;
								}
							}
						}
						else
						{
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_036A;
							default:
								switch (num2)
								{
								case 22:
								case 23:
									break;
								default:
									if (num2 != 28)
									{
										goto IL_036A;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num2 <= 75)
					{
						switch (num2)
						{
						case 33:
						case 35:
							break;
						case 34:
							goto IL_036A;
						default:
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								break;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								goto IL_036A;
							default:
								switch (num2)
								{
								case 74:
								case 75:
									break;
								default:
									goto IL_036A;
								}
								break;
							}
							break;
						}
					}
					else if (num2 != 82 && num2 != 86 && num2 != 92)
					{
						goto IL_036A;
					}
				}
				else if (num2 <= 172)
				{
					if (num2 <= 119)
					{
						if (num2 != 95 && num2 != 106 && num2 != 119)
						{
							goto IL_036A;
						}
					}
					else
					{
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							break;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							goto IL_036A;
						default:
							switch (num2)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								break;
							case 157:
							case 158:
							case 159:
								goto IL_036A;
							default:
								switch (num2)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									break;
								case 168:
								case 169:
									goto IL_036A;
								default:
									goto IL_036A;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 191)
				{
					if (num2 != 176)
					{
						switch (num2)
						{
						case 180:
						case 181:
							break;
						default:
							if (num2 != 191)
							{
								goto IL_036A;
							}
							break;
						}
					}
				}
				else
				{
					switch (num2)
					{
					case 204:
						break;
					case 205:
						goto IL_036A;
					case 206:
					{
						this.match(206);
						ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token, "LOGIN");
							executeContext.Kind = ExecuteAsOption.Login;
							executeContext.Principal = scalarExpression;
							return executeContext;
						}
						return executeContext;
					}
					default:
						switch (num2)
						{
						case 219:
						case 220:
							break;
						default:
							if (num2 != 232)
							{
								goto IL_036A;
							}
							break;
						}
						break;
					}
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "CALLER");
					executeContext.Kind = ExecuteAsOption.Caller;
					TSql80ParserBaseInternal.UpdateTokenInfo(executeContext, token);
					return executeContext;
				}
				return executeContext;
				IL_036A:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				this.match(163);
				this.match(206);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					executeContext.Kind = ExecuteAsOption.User;
					executeContext.Principal = scalarExpression;
				}
			}
			return executeContext;
		}

		// Token: 0x06001AF4 RID: 6900 RVA: 0x000FC6F8 File Offset: 0x000FA8F8
		public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				if (this.LA(1) == 232 && this.LA(2) == 176)
				{
					IToken token = this.LT(1);
					this.match(232);
					IToken token2 = this.LT(1);
					this.match(176);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "NO");
						vParent.WithNoRevert = true;
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
						return;
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 88)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token3 = this.LT(1);
					this.match(232);
					this.match(88);
					VariableReference variableReference = this.variable();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "COOKIE");
						vParent.Cookie = variableReference;
						return;
					}
				}
				return;
			}
			if (TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AF5 RID: 6901 RVA: 0x000FC84C File Offset: 0x000FAA4C
		public ExecuteOption executeOption()
		{
			ExecuteOption executeOption = base.FragmentFactory.CreateFragment<ExecuteOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RECOMPILE");
				executeOption.OptionKind = ExecuteOptionKind.Recompile;
			}
			return executeOption;
		}

		// Token: 0x06001AF6 RID: 6902 RVA: 0x000FC89C File Offset: 0x000FAA9C
		public void execTypes(ExecuteSpecification vParent)
		{
			if (this.LA(1) == 191)
			{
				this.match(191);
				ExecutableEntity executableEntity = this.execStrTypes();
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.ExecutableEntity = executableEntity;
				}
				int num = this.LA(1);
				if (num <= 95)
				{
					if (num <= 35)
					{
						if (num <= 17)
						{
							if (num == 1)
							{
								goto IL_030F;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_030F;
							case 5:
								break;
							default:
								switch (num)
								{
								case 9:
								{
									ExecuteContext executeContext = this.execStrExecCtxt();
									if (this.inputState.guessing == 0)
									{
										vParent.ExecuteContext = executeContext;
										goto IL_030F;
									}
									goto IL_030F;
								}
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_030F;
								}
								break;
							}
						}
						else
						{
							switch (num)
							{
							case 22:
							case 23:
								goto IL_030F;
							default:
								if (num == 28)
								{
									goto IL_030F;
								}
								switch (num)
								{
								case 33:
								case 35:
									goto IL_030F;
								}
								break;
							}
						}
					}
					else if (num <= 82)
					{
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_030F;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								goto IL_030F;
							default:
								if (num == 82)
								{
									goto IL_030F;
								}
								break;
							}
							break;
						}
					}
					else if (num == 86 || num == 92 || num == 95)
					{
						goto IL_030F;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num == 106 || num == 111 || num == 119)
						{
							goto IL_030F;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_030F;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_030F;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_030F;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num == 176)
					{
						goto IL_030F;
					}
					switch (num)
					{
					case 180:
					case 181:
						goto IL_030F;
					default:
						if (num == 191)
						{
							goto IL_030F;
						}
						break;
					}
				}
				else
				{
					if (num == 204)
					{
						goto IL_030F;
					}
					switch (num)
					{
					case 219:
					case 220:
						goto IL_030F;
					default:
						if (num == 232)
						{
							goto IL_030F;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_030F:
				if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AT"))
				{
					Identifier identifier = this.linkedServer();
					if (this.inputState.guessing == 0)
					{
						vParent.LinkedServer = identifier;
						return;
					}
				}
				else
				{
					if (TSql90ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
					{
						return;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else if (TSql90ParserInternal.tokenSet_124_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_125_.member(this.LA(2)))
			{
				ExecutableEntity executableEntity = this.execProcEx();
				if (this.inputState.guessing == 0)
				{
					vParent.ExecutableEntity = executableEntity;
					return;
				}
			}
			else
			{
				if (this.LA(1) != 234 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				VariableReference variableReference = this.variable();
				this.match(206);
				ExecutableEntity executableEntity = this.execProcEx();
				if (this.inputState.guessing == 0)
				{
					vParent.Variable = variableReference;
					vParent.ExecutableEntity = executableEntity;
					return;
				}
			}
		}

		// Token: 0x06001AF7 RID: 6903 RVA: 0x000FCCF4 File Offset: 0x000FAEF4
		public ExecutableEntity execStrTypes()
		{
			ExecutableEntity executableEntity = this.execSqlList();
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				this.setParamList(executableEntity);
			}
			return executableEntity;
		}

		// Token: 0x06001AF8 RID: 6904 RVA: 0x000FCD48 File Offset: 0x000FAF48
		public ExecuteContext execStrExecCtxt()
		{
			this.match(9);
			return this.execCtxtStmt();
		}

		// Token: 0x06001AF9 RID: 6905 RVA: 0x000FCD68 File Offset: 0x000FAF68
		public Identifier linkedServer()
		{
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AT");
			}
			return identifier;
		}

		// Token: 0x06001AFA RID: 6906 RVA: 0x000FCDAC File Offset: 0x000FAFAC
		public ExecutableProcedureReference execProcEx()
		{
			int num = this.LA(1);
			ExecutableProcedureReference executableProcedureReference;
			if (num != 107)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
					case 234:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				executableProcedureReference = this.execProc();
			}
			else
			{
				executableProcedureReference = this.adhocDataSourceExecproc();
			}
			return executableProcedureReference;
		}

		// Token: 0x06001AFB RID: 6907 RVA: 0x000FCE10 File Offset: 0x000FB010
		public ExecuteContext execCtxtStmt()
		{
			ExecuteContext executeContext = base.FragmentFactory.CreateFragment<ExecuteContext>();
			this.execCtxtStmtType(executeContext);
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return executeContext;
						}
						switch (num)
						{
						case 4:
						case 6:
							return executeContext;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return executeContext;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return executeContext;
						default:
							if (num == 28)
							{
								return executeContext;
							}
							switch (num)
							{
							case 33:
							case 35:
								return executeContext;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return executeContext;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return executeContext;
						default:
							if (num == 82)
							{
								return executeContext;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return executeContext;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 111 || num == 119)
					{
						return executeContext;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return executeContext;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return executeContext;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return executeContext;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return executeContext;
				}
				switch (num)
				{
				case 180:
				case 181:
					return executeContext;
				default:
					if (num == 191)
					{
						return executeContext;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
					return executeContext;
				case 205:
					break;
				case 206:
				{
					Literal literal = this.execCtxtStmtPrincipal();
					if (this.inputState.guessing == 0)
					{
						executeContext.Principal = literal;
						return executeContext;
					}
					return executeContext;
				}
				default:
					switch (num)
					{
					case 219:
					case 220:
						return executeContext;
					default:
						if (num == 232)
						{
							return executeContext;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001AFC RID: 6908 RVA: 0x000FD0D4 File Offset: 0x000FB2D4
		public void execCtxtStmtType(ExecuteContext vParent)
		{
			int num = this.LA(1);
			if (num != 163)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOGIN");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.Kind = ExecuteAsOption.Login;
					return;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(163);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					vParent.Kind = ExecuteAsOption.User;
					return;
				}
			}
		}

		// Token: 0x06001AFD RID: 6909 RVA: 0x000FD17C File Offset: 0x000FB37C
		public Literal execCtxtStmtPrincipal()
		{
			this.match(206);
			return this.stringLiteral();
		}

		// Token: 0x06001AFE RID: 6910 RVA: 0x000FD1A0 File Offset: 0x000FB3A0
		public ExecutableStringList execSqlList()
		{
			ExecutableStringList executableStringList = base.FragmentFactory.CreateFragment<ExecutableStringList>();
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(executableStringList, executableStringList.Strings, valueExpression);
			}
			while (this.LA(1) == 197)
			{
				this.match(197);
				valueExpression = this.stringOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(executableStringList, executableStringList.Strings, valueExpression);
				}
			}
			return executableStringList;
		}

		// Token: 0x06001AFF RID: 6911 RVA: 0x000FD218 File Offset: 0x000FB418
		public void setParamList(ExecutableEntity vParent)
		{
			bool flag = false;
			int num = 0;
			ExecuteParameter executeParameter = this.setParam(ref flag, ref num);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExecuteParameter>(vParent, vParent.Parameters, executeParameter);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				executeParameter = this.setParam(ref flag, ref num);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExecuteParameter>(vParent, vParent.Parameters, executeParameter);
				}
			}
		}

		// Token: 0x06001B00 RID: 6912 RVA: 0x000FD290 File Offset: 0x000FB490
		public ExecutableProcedureReference adhocDataSourceExecproc()
		{
			ExecutableProcedureReference executableProcedureReference = base.FragmentFactory.CreateFragment<ExecutableProcedureReference>();
			AdHocDataSource adHocDataSource = this.adhocDataSource();
			this.match(200);
			ProcedureReferenceName procedureReferenceName = this.procObjectReference();
			if (this.inputState.guessing == 0)
			{
				executableProcedureReference.AdHocDataSource = adHocDataSource;
				executableProcedureReference.ProcedureReference = procedureReferenceName;
			}
			if (TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_18_.member(this.LA(2)))
			{
				this.setParamList(executableProcedureReference);
			}
			else if (!TSql90ParserInternal.tokenSet_19_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executableProcedureReference;
		}

		// Token: 0x06001B01 RID: 6913 RVA: 0x000FD348 File Offset: 0x000FB548
		public ProcedureReferenceName procObjectReference()
		{
			ProcedureReferenceName procedureReferenceName = base.FragmentFactory.CreateFragment<ProcedureReferenceName>();
			ProcedureReference procedureReference = this.procedureReference();
			if (this.inputState.guessing == 0)
			{
				procedureReferenceName.ProcedureReference = procedureReference;
			}
			return procedureReferenceName;
		}

		// Token: 0x06001B02 RID: 6914 RVA: 0x000FD380 File Offset: 0x000FB580
		public ProcedureReferenceName varObjectReference()
		{
			ProcedureReferenceName procedureReferenceName = base.FragmentFactory.CreateFragment<ProcedureReferenceName>();
			VariableReference variableReference = this.variable();
			if (this.inputState.guessing == 0)
			{
				procedureReferenceName.ProcedureVariable = variableReference;
			}
			return procedureReferenceName;
		}

		// Token: 0x06001B03 RID: 6915 RVA: 0x000FD3B8 File Offset: 0x000FB5B8
		public Literal procNumOpt()
		{
			Literal literal = null;
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return literal;
						}
						switch (num)
						{
						case 4:
						case 6:
							return literal;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
							case 12:
							case 13:
							case 15:
							case 17:
								return literal;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return literal;
						default:
							if (num == 28)
							{
								return literal;
							}
							switch (num)
							{
							case 33:
							case 35:
								return literal;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
						return literal;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return literal;
						default:
							if (num == 82)
							{
								return literal;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return literal;
				}
			}
			else if (num <= 162)
			{
				if (num <= 111)
				{
					if (num == 100 || num == 106 || num == 111)
					{
						return literal;
					}
				}
				else
				{
					if (num == 119)
					{
						return literal;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return literal;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return literal;
						}
						break;
					}
				}
			}
			else if (num <= 181)
			{
				switch (num)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					return literal;
				case 168:
				case 169:
					break;
				default:
					if (num == 176)
					{
						return literal;
					}
					switch (num)
					{
					case 180:
					case 181:
						return literal;
					}
					break;
				}
			}
			else if (num <= 199)
			{
				switch (num)
				{
				case 191:
				case 193:
					return literal;
				case 192:
					break;
				default:
					if (num == 199)
					{
						return literal;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return literal;
				}
				switch (num)
				{
				case 219:
				case 220:
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					return literal;
				case 236:
					this.match(236);
					return this.integer();
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B04 RID: 6916 RVA: 0x000FD6D8 File Offset: 0x000FB8D8
		public RealLiteral real()
		{
			RealLiteral realLiteral = base.FragmentFactory.CreateFragment<RealLiteral>();
			IToken token = this.LT(1);
			this.match(223);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(realLiteral, token);
				realLiteral.Value = token.getText();
			}
			return realLiteral;
		}

		// Token: 0x06001B05 RID: 6917 RVA: 0x000FD728 File Offset: 0x000FB928
		public NumericLiteral numeric()
		{
			NumericLiteral numericLiteral = base.FragmentFactory.CreateFragment<NumericLiteral>();
			IToken token = this.LT(1);
			this.match(222);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(numericLiteral, token);
				numericLiteral.Value = token.getText();
			}
			return numericLiteral;
		}

		// Token: 0x06001B06 RID: 6918 RVA: 0x000FD778 File Offset: 0x000FB978
		public ExecuteParameter setParam(ref bool nameEqualsValueWasUsed, ref int parameterNumber)
		{
			ExecuteParameter executeParameter = base.FragmentFactory.CreateFragment<ExecuteParameter>();
			executeParameter.IsOutput = false;
			parameterNumber++;
			if (this.LA(1) == 234 && this.LA(2) == 206)
			{
				VariableReference variableReference = this.variable();
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					executeParameter.Variable = variableReference;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_126_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 100)
			{
				if (num != 47)
				{
					if (num != 100)
					{
						goto IL_0276;
					}
				}
				else
				{
					Literal literal = this.defaultLiteral();
					if (this.inputState.guessing == 0)
					{
						executeParameter.ParameterValue = literal;
						return executeParameter;
					}
					return executeParameter;
				}
			}
			else if (num != 193 && num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_0276;
				default:
					goto IL_0276;
				}
			}
			ScalarExpression scalarExpression = this.possibleNegativeConstantOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				executeParameter.ParameterValue = scalarExpression;
				if (executeParameter.Variable != null)
				{
					nameEqualsValueWasUsed = true;
				}
				else if (nameEqualsValueWasUsed)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46089", scalarExpression, TSqlParserResource.SQL46089Message, new string[] { parameterNumber.ToString(CultureInfo.CurrentCulture) });
				}
			}
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_127_.member(this.LA(2)) && (base.NextTokenMatches("OUTPUT") || base.NextTokenMatches("OUT")))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					VariableReference variableReference2 = scalarExpression as VariableReference;
					GlobalVariableExpression globalVariableExpression = scalarExpression as GlobalVariableExpression;
					if (variableReference2 == null && globalVariableExpression == null)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46088", token, TSqlParserResource.SQL46088Message, new string[0]);
					}
					TSql80ParserBaseInternal.Match(token, "OUTPUT", "OUT");
					executeParameter.IsOutput = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(executeParameter, token);
					return executeParameter;
				}
				return executeParameter;
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_127_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				return executeParameter;
			}
			IL_0276:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B07 RID: 6919 RVA: 0x000FDA10 File Offset: 0x000FBC10
		public TableDefinition tableDefinitionCreateTable()
		{
			TableDefinition tableDefinition = base.FragmentFactory.CreateFragment<TableDefinition>();
			this.tableElement(IndexAffectingStatement.CreateTable, tableDefinition, null);
			while (this.LA(1) == 198 && TSql90ParserInternal.tokenSet_128_.member(this.LA(2)))
			{
				this.LT(1);
				this.match(198);
				this.tableElement(IndexAffectingStatement.CreateTable, tableDefinition, null);
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
			}
			return tableDefinition;
		}

		// Token: 0x06001B08 RID: 6920 RVA: 0x000FDAAC File Offset: 0x000FBCAC
		public AlterTableAlterColumnStatement alterTableAlterColumnStatement()
		{
			AlterTableAlterColumnStatement alterTableAlterColumnStatement = base.FragmentFactory.CreateFragment<AlterTableAlterColumnStatement>();
			bool flag = false;
			this.match(6);
			this.match(27);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterTableAlterColumnStatement.ColumnIdentifier = identifier;
				base.ThrowPartialAstIfPhaseOne(alterTableAlterColumnStatement);
			}
			int num = this.LA(1);
			if (num <= 54)
			{
				if (num != 4)
				{
					switch (num)
					{
					case 53:
						goto IL_0096;
					case 54:
						break;
					default:
						goto IL_0505;
					}
				}
				int num2 = this.LA(1);
				if (num2 != 4)
				{
					if (num2 != 54)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(54);
					if (this.inputState.guessing == 0)
					{
						flag = false;
					}
				}
				else
				{
					this.match(4);
					if (this.inputState.guessing == 0)
					{
						flag = true;
					}
				}
				int num3 = this.LA(1);
				if (num3 != 99)
				{
					if (num3 != 136)
					{
						if (num3 != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token = this.LT(1);
						this.match(232);
						if (this.inputState.guessing != 0)
						{
							return alterTableAlterColumnStatement;
						}
						TSql80ParserBaseInternal.Match(token, "PERSISTED");
						TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token);
						if (flag)
						{
							alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddPersisted;
							return alterTableAlterColumnStatement;
						}
						alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropPersisted;
						return alterTableAlterColumnStatement;
					}
					else
					{
						IToken token2 = this.LT(1);
						this.match(136);
						if (this.inputState.guessing != 0)
						{
							return alterTableAlterColumnStatement;
						}
						TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token2);
						if (flag)
						{
							alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddRowGuidCol;
							return alterTableAlterColumnStatement;
						}
						alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropRowGuidCol;
						return alterTableAlterColumnStatement;
					}
				}
				else
				{
					this.match(99);
					this.match(67);
					IToken token3 = this.LT(1);
					this.match(128);
					if (this.inputState.guessing != 0)
					{
						return alterTableAlterColumnStatement;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token3);
					if (flag)
					{
						alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddNotForReplication;
						return alterTableAlterColumnStatement;
					}
					alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropNotForReplication;
					return alterTableAlterColumnStatement;
				}
			}
			else if (num != 96)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_0505;
				}
			}
			IL_0096:
			DataTypeReference dataTypeReference = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				alterTableAlterColumnStatement.DataType = dataTypeReference;
			}
			this.collationOpt(alterTableAlterColumnStatement);
			int num4 = this.LA(1);
			if (num4 <= 95)
			{
				if (num4 <= 35)
				{
					if (num4 <= 17)
					{
						if (num4 == 1)
						{
							return alterTableAlterColumnStatement;
						}
						switch (num4)
						{
						case 4:
						case 6:
							return alterTableAlterColumnStatement;
						case 5:
							break;
						default:
							switch (num4)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterTableAlterColumnStatement;
							}
							break;
						}
					}
					else
					{
						switch (num4)
						{
						case 22:
						case 23:
							return alterTableAlterColumnStatement;
						default:
							if (num4 == 28)
							{
								return alterTableAlterColumnStatement;
							}
							switch (num4)
							{
							case 33:
							case 35:
								return alterTableAlterColumnStatement;
							}
							break;
						}
					}
				}
				else if (num4 <= 82)
				{
					switch (num4)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterTableAlterColumnStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num4)
						{
						case 74:
						case 75:
							return alterTableAlterColumnStatement;
						default:
							if (num4 == 82)
							{
								return alterTableAlterColumnStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num4 == 86 || num4 == 92 || num4 == 95)
				{
					return alterTableAlterColumnStatement;
				}
			}
			else if (num4 <= 172)
			{
				if (num4 <= 119)
				{
					switch (num4)
					{
					case 99:
					case 100:
					{
						bool flag2 = this.nullNotNull(alterTableAlterColumnStatement);
						if (this.inputState.guessing == 0)
						{
							alterTableAlterColumnStatement.AlterTableAlterColumnOption = (flag2 ? AlterTableAlterColumnOption.Null : AlterTableAlterColumnOption.NotNull);
							return alterTableAlterColumnStatement;
						}
						return alterTableAlterColumnStatement;
					}
					default:
						if (num4 == 106 || num4 == 119)
						{
							return alterTableAlterColumnStatement;
						}
						break;
					}
				}
				else
				{
					switch (num4)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterTableAlterColumnStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num4)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterTableAlterColumnStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num4)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterTableAlterColumnStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num4 <= 191)
			{
				if (num4 == 176)
				{
					return alterTableAlterColumnStatement;
				}
				switch (num4)
				{
				case 180:
				case 181:
					return alterTableAlterColumnStatement;
				default:
					if (num4 == 191)
					{
						return alterTableAlterColumnStatement;
					}
					break;
				}
			}
			else
			{
				if (num4 == 204)
				{
					return alterTableAlterColumnStatement;
				}
				switch (num4)
				{
				case 219:
				case 220:
					return alterTableAlterColumnStatement;
				default:
					if (num4 == 232)
					{
						return alterTableAlterColumnStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0505:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B09 RID: 6921 RVA: 0x000FDFD4 File Offset: 0x000FC1D4
		public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement()
		{
			AlterTableTriggerModificationStatement alterTableTriggerModificationStatement = base.FragmentFactory.CreateFragment<AlterTableTriggerModificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				alterTableTriggerModificationStatement.TriggerEnforcement = TSql80ParserBaseInternal.ParseTriggerEnforcement(token);
			}
			this.match(155);
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableTriggerModificationStatement, alterTableTriggerModificationStatement.TriggerNames, identifier);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableTriggerModificationStatement, alterTableTriggerModificationStatement.TriggerNames, identifier);
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					alterTableTriggerModificationStatement.All = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableTriggerModificationStatement, token2);
				}
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterTableTriggerModificationStatement);
			}
			return alterTableTriggerModificationStatement;
		}

		// Token: 0x06001B0A RID: 6922 RVA: 0x000FE104 File Offset: 0x000FC304
		public AlterTableDropTableElementStatement alterTableDropTableElementStatement()
		{
			AlterTableDropTableElementStatement alterTableDropTableElementStatement = base.FragmentFactory.CreateFragment<AlterTableDropTableElementStatement>();
			this.match(54);
			AlterTableDropTableElement alterTableDropTableElement = this.alterTableDropTableElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AlterTableDropTableElement>(alterTableDropTableElementStatement, alterTableDropTableElementStatement.AlterTableDropTableElements, alterTableDropTableElement);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				alterTableDropTableElement = this.alterTableDropTableElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AlterTableDropTableElement>(alterTableDropTableElementStatement, alterTableDropTableElementStatement.AlterTableDropTableElements, alterTableDropTableElement);
				}
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterTableDropTableElementStatement);
			}
			return alterTableDropTableElementStatement;
		}

		// Token: 0x06001B0B RID: 6923 RVA: 0x000FE198 File Offset: 0x000FC398
		public AlterTableSwitchStatement alterTableSwitchStatement()
		{
			AlterTableSwitchStatement alterTableSwitchStatement = base.FragmentFactory.CreateFragment<AlterTableSwitchStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SWITCH");
			}
			int num = this.LA(1);
			if (num != 151)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "PARTITION");
					alterTableSwitchStatement.SourcePartitionNumber = scalarExpression;
				}
			}
			this.match(151);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				alterTableSwitchStatement.TargetTable = schemaObjectName;
			}
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_37_.member(this.LA(2)) && base.NextTokenMatches("PARTITION"))
			{
				this.match(232);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					alterTableSwitchStatement.TargetPartitionNumber = scalarExpression;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_16_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterTableSwitchStatement;
		}

		// Token: 0x06001B0C RID: 6924 RVA: 0x000FE304 File Offset: 0x000FC504
		public ConstraintEnforcement constraintEnforcement()
		{
			ConstraintEnforcement constraintEnforcement = ConstraintEnforcement.NotSpecified;
			int num = this.LA(1);
			if (num != 21)
			{
				if (num != 97)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(97);
				if (this.inputState.guessing == 0)
				{
					constraintEnforcement = ConstraintEnforcement.NoCheck;
				}
			}
			else
			{
				this.match(21);
				if (this.inputState.guessing == 0)
				{
					constraintEnforcement = ConstraintEnforcement.Check;
				}
			}
			return constraintEnforcement;
		}

		// Token: 0x06001B0D RID: 6925 RVA: 0x000FE370 File Offset: 0x000FC570
		public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck)
		{
			AlterTableAddTableElementStatement alterTableAddTableElementStatement = base.FragmentFactory.CreateFragment<AlterTableAddTableElementStatement>();
			alterTableAddTableElementStatement.ExistingRowsCheckEnforcement = vExistingRowsCheck;
			this.match(4);
			TableDefinition tableDefinition = this.tableDefinition(IndexAffectingStatement.AlterTableAddElement, alterTableAddTableElementStatement);
			if (this.inputState.guessing == 0)
			{
				alterTableAddTableElementStatement.Definition = tableDefinition;
			}
			return alterTableAddTableElementStatement;
		}

		// Token: 0x06001B0E RID: 6926 RVA: 0x000FE3B8 File Offset: 0x000FC5B8
		public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck)
		{
			AlterTableConstraintModificationStatement alterTableConstraintModificationStatement = base.FragmentFactory.CreateFragment<AlterTableConstraintModificationStatement>();
			alterTableConstraintModificationStatement.ExistingRowsCheckEnforcement = vExistingRowsCheck;
			ConstraintEnforcement constraintEnforcement = this.constraintEnforcement();
			this.match(30);
			if (this.inputState.guessing == 0)
			{
				alterTableConstraintModificationStatement.ConstraintEnforcement = constraintEnforcement;
			}
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableConstraintModificationStatement, alterTableConstraintModificationStatement.ConstraintNames, identifier);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableConstraintModificationStatement, alterTableConstraintModificationStatement.ConstraintNames, identifier);
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					alterTableConstraintModificationStatement.All = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableConstraintModificationStatement, token);
				}
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterTableConstraintModificationStatement);
			}
			return alterTableConstraintModificationStatement;
		}

		// Token: 0x06001B0F RID: 6927 RVA: 0x000FE4DC File Offset: 0x000FC6DC
		public AlterTableDropTableElement alterTableDropTableElement()
		{
			AlterTableDropTableElement alterTableDropTableElement = base.FragmentFactory.CreateFragment<AlterTableDropTableElement>();
			int num = this.LA(1);
			if (num != 27)
			{
				if (num != 30)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				int num2 = this.LA(1);
				if (num2 != 30)
				{
					switch (num2)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(30);
					if (this.inputState.guessing == 0)
					{
						alterTableDropTableElement.TableElementType = TableElementType.Constraint;
					}
				}
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					alterTableDropTableElement.Name = identifier;
				}
				if (this.LA(1) == 171 && this.LA(2) == 191)
				{
					this.alterTableDropTableElementWithOptions(alterTableDropTableElement);
				}
				else if (!TSql90ParserInternal.tokenSet_41_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_10_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(27);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					alterTableDropTableElement.TableElementType = TableElementType.Column;
					alterTableDropTableElement.Name = identifier;
				}
			}
			return alterTableDropTableElement;
		}

		// Token: 0x06001B10 RID: 6928 RVA: 0x000FE630 File Offset: 0x000FC830
		public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent)
		{
			this.match(171);
			this.match(191);
			DropClusteredConstraintOption dropClusteredConstraintOption = this.dropClusteredConstraintOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropClusteredConstraintOption>(vParent, vParent.DropClusteredConstraintOptions, dropClusteredConstraintOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				dropClusteredConstraintOption = this.dropClusteredConstraintOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropClusteredConstraintOption>(vParent, vParent.DropClusteredConstraintOptions, dropClusteredConstraintOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06001B11 RID: 6929 RVA: 0x000FE6DC File Offset: 0x000FC8DC
		public DropClusteredConstraintOption dropClusteredConstraintOption()
		{
			DropClusteredConstraintOption dropClusteredConstraintOption = null;
			DropClusteredConstraintStateOption dropClusteredConstraintStateOption = null;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP"))
			{
				this.match(232);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					DropClusteredConstraintValueOption dropClusteredConstraintValueOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintValueOption>();
					dropClusteredConstraintValueOption.OptionValue = literal;
					dropClusteredConstraintOption = dropClusteredConstraintValueOption;
					dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.MaxDop;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ONLINE"))
			{
				this.match(232);
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					dropClusteredConstraintStateOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintStateOption>();
					dropClusteredConstraintOption = dropClusteredConstraintStateOption;
					dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.Online;
				}
				OptionState optionState = this.optionOnOff(dropClusteredConstraintOption);
				if (this.inputState.guessing == 0)
				{
					dropClusteredConstraintStateOption.OptionState = optionState;
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 151 || !base.NextTokenMatches("MOVE"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(232);
				this.match(151);
				FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
				if (this.inputState.guessing == 0)
				{
					DropClusteredConstraintMoveOption dropClusteredConstraintMoveOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintMoveOption>();
					dropClusteredConstraintMoveOption.OptionValue = fileGroupOrPartitionScheme;
					dropClusteredConstraintOption = dropClusteredConstraintMoveOption;
					dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.MoveTo;
				}
			}
			return dropClusteredConstraintOption;
		}

		// Token: 0x06001B12 RID: 6930 RVA: 0x000FE878 File Offset: 0x000FCA78
		public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement)
		{
			ColumnDefinition columnDefinition = base.FragmentFactory.CreateFragment<ColumnDefinition>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				columnDefinition.ColumnIdentifier = identifier;
				if (base.PhaseOne && vStatement != null)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnDefinition>(vStatement, vStatement.Definition.ColumnDefinitions, columnDefinition);
					base.ThrowPartialAstIfPhaseOne(vStatement);
				}
			}
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num != 1)
						{
							switch (num)
							{
							case 4:
							case 6:
								break;
							case 5:
								goto IL_0350;
							default:
								goto IL_0350;
							}
						}
					}
					else
					{
						switch (num)
						{
						case 9:
							this.computedColumnBody(columnDefinition);
							this.computedColumnConstraintListOpt(statementType, columnDefinition);
							return columnDefinition;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							goto IL_0350;
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							break;
						default:
							switch (num)
							{
							case 28:
							case 30:
								break;
							case 29:
								goto IL_0350;
							default:
								switch (num)
								{
								case 33:
								case 35:
									break;
								case 34:
									goto IL_0350;
								default:
									goto IL_0350;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 53:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 68:
						break;
					case 50:
					case 51:
					case 52:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
					case 67:
						goto IL_0350;
					default:
						switch (num)
						{
						case 74:
						case 75:
							break;
						default:
							goto IL_0350;
						}
						break;
					}
				}
				else if (num != 79 && num != 82 && num != 86)
				{
					goto IL_0350;
				}
			}
			else if (num <= 176)
			{
				if (num <= 106)
				{
					switch (num)
					{
					case 92:
					case 95:
					case 96:
					case 99:
					case 100:
						break;
					case 93:
					case 94:
					case 97:
					case 98:
						goto IL_0350;
					default:
						if (num != 106)
						{
							goto IL_0350;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						goto IL_0350;
					default:
						switch (num)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							break;
						case 157:
						case 158:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							goto IL_0350;
						default:
							if (num != 176)
							{
								goto IL_0350;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					break;
				default:
					switch (num)
					{
					case 191:
					case 192:
						break;
					default:
						if (num != 198)
						{
							goto IL_0350;
						}
						break;
					}
					break;
				}
			}
			else if (num != 204)
			{
				switch (num)
				{
				case 219:
				case 220:
					break;
				default:
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_0350;
					}
					break;
				}
			}
			this.regularColumnBody(columnDefinition);
			this.columnConstraintListOpt(statementType, columnDefinition);
			return columnDefinition;
			IL_0350:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B13 RID: 6931 RVA: 0x000FEBEC File Offset: 0x000FCDEC
		public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement)
		{
			ConstraintDefinition constraintDefinition = null;
			IToken token = null;
			Identifier identifier = null;
			try
			{
				int num = this.LA(1);
				if (num <= 47)
				{
					if (num == 21)
					{
						goto IL_0080;
					}
					if (num != 30)
					{
						if (num == 47)
						{
							goto IL_0080;
						}
					}
					else
					{
						token = this.LT(1);
						this.match(30);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
							goto IL_0080;
						}
						goto IL_0080;
					}
				}
				else if (num == 68 || num == 118 || num == 159)
				{
					goto IL_0080;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0080:
				int num2 = this.LA(1);
				if (num2 <= 47)
				{
					if (num2 == 21)
					{
						constraintDefinition = this.checkConstraint(statementType);
						goto IL_00ED;
					}
					if (num2 == 47)
					{
						constraintDefinition = this.defaultTableConstraint(statementType);
						goto IL_00ED;
					}
				}
				else
				{
					if (num2 == 68)
					{
						constraintDefinition = this.foreignKeyTableConstraint(statementType);
						goto IL_00ED;
					}
					if (num2 == 118 || num2 == 159)
					{
						constraintDefinition = this.uniqueTableConstraint(statementType);
						goto IL_00ED;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_00ED:
				if (this.inputState.guessing == 0 && identifier != null)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(constraintDefinition, token);
					constraintDefinition.ConstraintIdentifier = identifier;
				}
			}
			catch (PhaseOneConstraintException ex)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (identifier != null)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(ex.Constraint, token);
					ex.Constraint.ConstraintIdentifier = identifier;
				}
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ConstraintDefinition>(vStatement, vStatement.Definition.TableConstraints, ex.Constraint);
				base.ThrowPartialAstIfPhaseOne(vStatement);
			}
			return constraintDefinition;
		}

		// Token: 0x06001B14 RID: 6932 RVA: 0x000FED70 File Offset: 0x000FCF70
		public void computedColumnBody(ColumnDefinition vParent)
		{
			this.match(9);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.ScalarSubqueriesDisallowed);
			if (this.inputState.guessing == 0)
			{
				vParent.ComputedColumnExpression = scalarExpression;
			}
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_129_.member(this.LA(2)) && base.NextTokenMatches("PERSISTED"))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					vParent.IsPersisted = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_129_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001B15 RID: 6933 RVA: 0x000FEE3C File Offset: 0x000FD03C
		public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult)
		{
			while (TSql90ParserInternal.tokenSet_130_.member(this.LA(1)))
			{
				ConstraintDefinition constraintDefinition = this.columnConstraint(statementType);
				if (this.inputState.guessing == 0)
				{
					TSql90ParserBaseInternal.AddConstraintToComputedColumn(constraintDefinition, vResult);
				}
			}
		}

		// Token: 0x06001B16 RID: 6934 RVA: 0x000FEE7C File Offset: 0x000FD07C
		public void regularColumnBody(ColumnDefinition vParent)
		{
			if (TSql90ParserInternal.tokenSet_49_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_131_.member(this.LA(2)))
			{
				DataTypeReference dataTypeReference = this.scalarDataType();
				if (this.inputState.guessing == 0)
				{
					vParent.DataType = dataTypeReference;
				}
				this.collationOpt(vParent);
			}
			else if (!TSql90ParserInternal.tokenSet_70_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0)
			{
				base.VerifyColumnDataType(vParent);
			}
		}

		// Token: 0x06001B17 RID: 6935 RVA: 0x000FEF24 File Offset: 0x000FD124
		public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult)
		{
			for (;;)
			{
				int num = this.LA(1);
				if (num <= 79)
				{
					if (num <= 30)
					{
						if (num != 21 && num != 30)
						{
							break;
						}
					}
					else if (num != 47 && num != 68)
					{
						if (num != 79)
						{
							return;
						}
						IdentityOptions identityOptions = this.identityConstraint(statementType);
						if (this.inputState.guessing == 0)
						{
							if (vResult.IdentityOptions != null)
							{
								TSql80ParserBaseInternal.ThrowParseErrorException("SQL46043", identityOptions, TSqlParserResource.SQL46043Message, new string[0]);
							}
							vResult.IdentityOptions = identityOptions;
							continue;
						}
						continue;
					}
				}
				else if (num <= 118)
				{
					switch (num)
					{
					case 99:
					case 100:
						break;
					default:
						if (num != 118)
						{
							return;
						}
						break;
					}
				}
				else if (num != 127)
				{
					if (num == 136)
					{
						this.rowguidcolConstraint(vResult);
						continue;
					}
					if (num != 159)
					{
						return;
					}
				}
				ConstraintDefinition constraintDefinition = this.columnConstraint(statementType);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddConstraintToColumn(constraintDefinition, vResult);
				}
			}
		}

		// Token: 0x06001B18 RID: 6936 RVA: 0x000FF00C File Offset: 0x000FD20C
		public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType)
		{
			ConstraintDefinition constraintDefinition = null;
			IToken token = null;
			Identifier identifier = null;
			try
			{
				int num = this.LA(1);
				if (num <= 68)
				{
					if (num <= 30)
					{
						if (num == 21)
						{
							goto IL_009C;
						}
						if (num == 30)
						{
							token = this.LT(1);
							this.match(30);
							identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
								goto IL_009C;
							}
							goto IL_009C;
						}
					}
					else if (num == 47 || num == 68)
					{
						goto IL_009C;
					}
				}
				else if (num <= 118)
				{
					switch (num)
					{
					case 99:
					case 100:
						goto IL_009C;
					default:
						if (num == 118)
						{
							goto IL_009C;
						}
						break;
					}
				}
				else if (num == 127 || num == 159)
				{
					goto IL_009C;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_009C:
				int num2 = this.LA(1);
				if (num2 > 68)
				{
					if (num2 <= 118)
					{
						switch (num2)
						{
						case 99:
						case 100:
							constraintDefinition = this.nullableConstraint();
							goto IL_0134;
						default:
							if (num2 != 118)
							{
								goto IL_0121;
							}
							break;
						}
					}
					else
					{
						if (num2 == 127)
						{
							goto IL_010D;
						}
						if (num2 != 159)
						{
							goto IL_0121;
						}
					}
					constraintDefinition = this.uniqueColumnConstraint(statementType);
					goto IL_0134;
				}
				if (num2 == 21)
				{
					constraintDefinition = this.checkConstraint(statementType);
					goto IL_0134;
				}
				if (num2 == 47)
				{
					constraintDefinition = this.defaultColumnConstraint(statementType);
					goto IL_0134;
				}
				if (num2 != 68)
				{
					goto IL_0121;
				}
				IL_010D:
				constraintDefinition = this.foreignKeyColumnConstraint(statementType);
				goto IL_0134;
				IL_0121:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_0134:
				if (this.inputState.guessing == 0 && identifier != null)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(constraintDefinition, token);
					constraintDefinition.ConstraintIdentifier = identifier;
				}
			}
			catch (PhaseOneConstraintException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
			}
			return constraintDefinition;
		}

		// Token: 0x06001B19 RID: 6937 RVA: 0x000FF19C File Offset: 0x000FD39C
		public void rowguidcolConstraint(ColumnDefinition vParent)
		{
			IToken token = this.LT(1);
			this.match(136);
			if (this.inputState.guessing == 0)
			{
				if (vParent.IsRowGuidCol)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46042", token, TSqlParserResource.SQL46042Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.IsRowGuidCol = true;
			}
		}

		// Token: 0x06001B1A RID: 6938 RVA: 0x000FF1F8 File Offset: 0x000FD3F8
		public IdentityOptions identityConstraint(IndexAffectingStatement statementType)
		{
			IdentityOptions identityOptions = base.FragmentFactory.CreateFragment<IdentityOptions>();
			IToken token = this.LT(1);
			this.match(79);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identityOptions, token);
			}
			bool flag = false;
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_132_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.seedIncrement();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				ScalarExpression scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityOptions.IdentitySeed = scalarExpression;
				}
				this.match(198);
				scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityOptions.IdentityIncrement = scalarExpression;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identityOptions, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_70_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			bool flag2 = this.replicationClauseOpt(statementType, identityOptions);
			if (this.inputState.guessing == 0)
			{
				identityOptions.IsIdentityNotForReplication = flag2;
			}
			return identityOptions;
		}

		// Token: 0x06001B1B RID: 6939 RVA: 0x000FF394 File Offset: 0x000FD594
		public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent)
		{
			bool flag = false;
			bool flag2 = false;
			if (this.LA(1) == 99 && this.LA(2) == 67)
			{
				int num = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(99);
					this.match(67);
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				IToken token = this.LT(1);
				this.match(99);
				this.match(67);
				IToken token2 = this.LT(1);
				this.match(128);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					flag = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_70_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return flag;
		}

		// Token: 0x06001B1C RID: 6940 RVA: 0x000FF4A8 File Offset: 0x000FD6A8
		public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType)
		{
			DefaultConstraintDefinition defaultConstraintDefinition = base.FragmentFactory.CreateFragment<DefaultConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(47);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.ScalarSubqueriesDisallowed);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token);
				defaultConstraintDefinition.Expression = scalarExpression;
			}
			if (this.LA(1) == 171 && this.LA(2) == 164)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(164);
				if (this.inputState.guessing == 0)
				{
					if (statementType != IndexAffectingStatement.AlterTableAddElement)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46013", token, TSqlParserResource.SQL46013Message, new string[0]);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token2);
					defaultConstraintDefinition.WithValues = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_70_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return defaultConstraintDefinition;
		}

		// Token: 0x06001B1D RID: 6941 RVA: 0x000FF5A4 File Offset: 0x000FD7A4
		public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType)
		{
			UniqueConstraintDefinition uniqueConstraintDefinition = base.FragmentFactory.CreateFragment<UniqueConstraintDefinition>();
			this.uniqueConstraintHeader(uniqueConstraintDefinition, false);
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.columnWithSortOrder();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				ColumnWithSortOrder columnWithSortOrder = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, columnWithSortOrder);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					columnWithSortOrder = this.columnWithSortOrder();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, columnWithSortOrder);
					}
				}
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(uniqueConstraintDefinition, token);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_133_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.uniqueConstraintTailOpt(statementType, uniqueConstraintDefinition);
			return uniqueConstraintDefinition;
		}

		// Token: 0x06001B1E RID: 6942 RVA: 0x000FF73C File Offset: 0x000FD93C
		public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType)
		{
			ForeignKeyConstraintDefinition foreignKeyConstraintDefinition = base.FragmentFactory.CreateFragment<ForeignKeyConstraintDefinition>();
			int num = this.LA(1);
			if (num != 68)
			{
				if (num != 127)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(68);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
					TSql80ParserBaseInternal.UpdateTokenInfo(foreignKeyConstraintDefinition, token);
				}
				this.foreignConstraintColumnsOpt(foreignKeyConstraintDefinition);
			}
			this.foreignKeyConstraintCommonEnd(statementType, foreignKeyConstraintDefinition);
			return foreignKeyConstraintDefinition;
		}

		// Token: 0x06001B1F RID: 6943 RVA: 0x000FF7C4 File Offset: 0x000FD9C4
		public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType)
		{
			CheckConstraintDefinition checkConstraintDefinition = base.FragmentFactory.CreateFragment<CheckConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(21);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(checkConstraintDefinition, token);
				base.ThrowConstraintIfPhaseOne(checkConstraintDefinition);
			}
			bool flag = this.replicationClauseOpt(statementType, checkConstraintDefinition);
			if (this.inputState.guessing == 0)
			{
				checkConstraintDefinition.NotForReplication = flag;
			}
			this.match(191);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.ScalarSubqueriesDisallowed);
			if (this.inputState.guessing == 0)
			{
				checkConstraintDefinition.CheckCondition = booleanExpression;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(checkConstraintDefinition, token2);
			}
			return checkConstraintDefinition;
		}

		// Token: 0x06001B20 RID: 6944 RVA: 0x000FF87C File Offset: 0x000FDA7C
		public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType)
		{
			UniqueConstraintDefinition uniqueConstraintDefinition = base.FragmentFactory.CreateFragment<UniqueConstraintDefinition>();
			this.uniqueConstraintHeader(uniqueConstraintDefinition, true);
			this.match(191);
			ColumnWithSortOrder columnWithSortOrder = this.columnWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, columnWithSortOrder);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				columnWithSortOrder = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, columnWithSortOrder);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(uniqueConstraintDefinition, token);
			}
			this.uniqueConstraintTailOpt(statementType, uniqueConstraintDefinition);
			return uniqueConstraintDefinition;
		}

		// Token: 0x06001B21 RID: 6945 RVA: 0x000FF938 File Offset: 0x000FDB38
		public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType)
		{
			DefaultConstraintDefinition defaultConstraintDefinition = base.FragmentFactory.CreateFragment<DefaultConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(47);
			if (this.inputState.guessing == 0)
			{
				if (statementType != IndexAffectingStatement.AlterTableAddElement)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46014", token, TSqlParserResource.SQL46014Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token);
				base.ThrowConstraintIfPhaseOne(defaultConstraintDefinition);
			}
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.ScalarSubqueriesDisallowed);
			this.match(67);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				defaultConstraintDefinition.Expression = scalarExpression;
				defaultConstraintDefinition.Column = identifier;
			}
			if (this.LA(1) == 171 && this.LA(2) == 164)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(164);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token2);
					defaultConstraintDefinition.WithValues = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_134_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_135_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return defaultConstraintDefinition;
		}

		// Token: 0x06001B22 RID: 6946 RVA: 0x000FFA60 File Offset: 0x000FDC60
		public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType)
		{
			ForeignKeyConstraintDefinition foreignKeyConstraintDefinition = base.FragmentFactory.CreateFragment<ForeignKeyConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(68);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(foreignKeyConstraintDefinition, token);
				base.ThrowConstraintIfPhaseOne(foreignKeyConstraintDefinition);
			}
			this.foreignConstraintColumnsOpt(foreignKeyConstraintDefinition);
			this.foreignKeyConstraintCommonEnd(statementType, foreignKeyConstraintDefinition);
			return foreignKeyConstraintDefinition;
		}

		// Token: 0x06001B23 RID: 6947 RVA: 0x000FFAC8 File Offset: 0x000FDCC8
		public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne)
		{
			int num = this.LA(1);
			if (num != 118)
			{
				if (num != 159)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(159);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.IsPrimaryKey = false;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(118);
				IToken token3 = this.LT(1);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
					vParent.IsPrimaryKey = true;
				}
			}
			if (this.inputState.guessing == 0 && throwInPhaseOne)
			{
				base.ThrowConstraintIfPhaseOne(vParent);
			}
			int num2 = this.LA(1);
			if (num2 <= 100)
			{
				if (num2 <= 68)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							return;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
						case 28:
						case 30:
							return;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
						case 25:
						case 26:
						case 27:
						case 29:
							break;
						case 24:
						{
							IToken token4 = this.LT(1);
							this.match(24);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
								vParent.Clustered = new bool?(true);
								return;
							}
							return;
						}
						default:
							switch (num2)
							{
							case 33:
							case 35:
								return;
							case 34:
								break;
							default:
								switch (num2)
								{
								case 44:
								case 45:
								case 46:
								case 47:
								case 48:
								case 49:
								case 54:
								case 55:
								case 56:
								case 60:
								case 61:
								case 64:
								case 68:
									return;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 79)
				{
					switch (num2)
					{
					case 74:
					case 75:
						return;
					default:
						if (num2 == 79)
						{
							return;
						}
						break;
					}
				}
				else
				{
					if (num2 == 82 || num2 == 86)
					{
						return;
					}
					switch (num2)
					{
					case 92:
					case 95:
					case 99:
					case 100:
						return;
					case 98:
					{
						IToken token5 = this.LT(1);
						this.match(98);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token5);
							vParent.Clustered = new bool?(false);
							return;
						}
						return;
					}
					}
				}
			}
			else if (num2 <= 181)
			{
				if (num2 <= 144)
				{
					switch (num2)
					{
					case 105:
					case 106:
						return;
					default:
						switch (num2)
						{
						case 118:
						case 119:
						case 123:
						case 125:
						case 126:
						case 127:
						case 129:
						case 131:
						case 132:
						case 134:
						case 136:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 156:
					case 159:
					case 160:
					case 161:
					case 162:
					case 167:
					case 170:
					case 171:
					case 172:
						return;
					case 157:
					case 158:
					case 163:
					case 164:
					case 165:
					case 166:
					case 168:
					case 169:
						break;
					default:
						if (num2 == 176)
						{
							return;
						}
						switch (num2)
						{
						case 180:
						case 181:
							return;
						}
						break;
					}
				}
			}
			else if (num2 <= 198)
			{
				switch (num2)
				{
				case 191:
				case 192:
					return;
				default:
					if (num2 == 198)
					{
						return;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return;
				default:
					if (num2 == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B24 RID: 6948 RVA: 0x000FFF10 File Offset: 0x000FE110
		public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent)
		{
			this.uniqueConstraintIndexOptionsOpt(statementType, vParent);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return;
						}
						switch (num)
						{
						case 4:
						case 6:
							return;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							return;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 28:
							case 30:
								return;
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									return;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 79)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 68:
						return;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
					case 67:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return;
						default:
							if (num == 79)
							{
								return;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return;
				}
			}
			else if (num <= 176)
			{
				if (num <= 106)
				{
					if (num == 95)
					{
						return;
					}
					switch (num)
					{
					case 99:
					case 100:
						return;
					default:
						switch (num)
						{
						case 105:
						{
							this.LT(1);
							this.match(105);
							FileGroupOrPartitionScheme fileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
							if (this.inputState.guessing == 0)
							{
								vParent.OnFileGroupOrPartitionScheme = fileGroupOrPartitionScheme;
								return;
							}
							return;
						}
						case 106:
							return;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return;
						case 157:
						case 158:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					return;
				default:
					switch (num)
					{
					case 191:
					case 192:
						return;
					default:
						if (num == 198)
						{
							return;
						}
						break;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return;
				}
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B25 RID: 6949 RVA: 0x0010022C File Offset: 0x000FE42C
		public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent)
		{
			if (this.LA(1) == 171 && (this.LA(2) == 66 || this.LA(2) == 191 || this.LA(2) == 232))
			{
				this.match(171);
				int num = this.LA(1);
				if (num != 66)
				{
					if (num == 191)
					{
						this.indexOptionList(statement, vParent.IndexOptions, vParent);
						return;
					}
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.sortedDataOptions();
					int num2 = this.LA(1);
					if (num2 <= 92)
					{
						if (num2 <= 35)
						{
							if (num2 <= 6)
							{
								if (num2 == 1)
								{
									return;
								}
								switch (num2)
								{
								case 4:
								case 6:
									return;
								}
							}
							else
							{
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
								case 21:
								case 22:
								case 23:
									return;
								case 14:
								case 16:
								case 18:
								case 19:
								case 20:
									break;
								default:
									switch (num2)
									{
									case 28:
									case 30:
										return;
									case 29:
										break;
									default:
										switch (num2)
										{
										case 33:
										case 35:
											return;
										}
										break;
									}
									break;
								}
							}
						}
						else if (num2 <= 79)
						{
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 47:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
							case 68:
								return;
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
							case 65:
							case 67:
								break;
							case 66:
							{
								IndexOption indexOption = this.fillFactorOption();
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, indexOption);
									return;
								}
								return;
							}
							default:
								switch (num2)
								{
								case 74:
								case 75:
									return;
								default:
									if (num2 == 79)
									{
										return;
									}
									break;
								}
								break;
							}
						}
						else if (num2 == 82 || num2 == 86 || num2 == 92)
						{
							return;
						}
					}
					else if (num2 <= 176)
					{
						if (num2 <= 106)
						{
							if (num2 == 95)
							{
								return;
							}
							switch (num2)
							{
							case 99:
							case 100:
								return;
							default:
								switch (num2)
								{
								case 105:
								case 106:
									return;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 118:
							case 119:
							case 123:
							case 125:
							case 126:
							case 127:
							case 129:
							case 131:
							case 132:
							case 134:
							case 136:
							case 138:
							case 140:
							case 142:
							case 143:
							case 144:
								return;
							case 120:
							case 121:
							case 122:
							case 124:
							case 128:
							case 130:
							case 133:
							case 135:
							case 137:
							case 139:
							case 141:
								break;
							default:
								switch (num2)
								{
								case 156:
								case 159:
								case 160:
								case 161:
								case 162:
								case 167:
								case 170:
								case 171:
								case 172:
									return;
								case 157:
								case 158:
								case 163:
								case 164:
								case 165:
								case 166:
								case 168:
								case 169:
									break;
								default:
									if (num2 == 176)
									{
										return;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num2 <= 198)
					{
						switch (num2)
						{
						case 180:
						case 181:
							return;
						default:
							switch (num2)
							{
							case 191:
							case 192:
								return;
							default:
								if (num2 == 198)
								{
									return;
								}
								break;
							}
							break;
						}
					}
					else
					{
						if (num2 == 204)
						{
							return;
						}
						switch (num2)
						{
						case 219:
						case 220:
							return;
						default:
							if (num2 == 232)
							{
								return;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				else
				{
					IndexOption indexOption = this.fillFactorOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, indexOption);
					}
					if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_133_.member(this.LA(2)) && base.NextTokenMatchesOneOf(new string[] { "SORTED_DATA", "SORTED_DATA_REORG" }))
					{
						this.sortedDataOptions();
						return;
					}
					if (TSql90ParserInternal.tokenSet_133_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
					{
						return;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_133_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001B26 RID: 6950 RVA: 0x001006B4 File Offset: 0x000FE8B4
		public void sortedDataOptions()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SORTED_DATA", "SORTED_DATA_REORG");
			}
		}

		// Token: 0x06001B27 RID: 6951 RVA: 0x001006F4 File Offset: 0x000FE8F4
		public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent)
		{
			DeleteUpdateAction deleteUpdateAction = DeleteUpdateAction.NoAction;
			int num = this.LA(1);
			if (num != 19)
			{
				if (num != 142)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "NO");
					}
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
						TSql80ParserBaseInternal.Match(token2, "ACTION");
					}
				}
				else
				{
					this.match(142);
					int num2 = this.LA(1);
					if (num2 != 47)
					{
						if (num2 != 100)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token3 = this.LT(1);
						this.match(100);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
							deleteUpdateAction = DeleteUpdateAction.SetNull;
						}
					}
					else
					{
						IToken token4 = this.LT(1);
						this.match(47);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
							deleteUpdateAction = DeleteUpdateAction.SetDefault;
						}
					}
				}
			}
			else
			{
				IToken token5 = this.LT(1);
				this.match(19);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token5);
					deleteUpdateAction = DeleteUpdateAction.Cascade;
				}
			}
			return deleteUpdateAction;
		}

		// Token: 0x06001B28 RID: 6952 RVA: 0x00100864 File Offset: 0x000FEA64
		public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent)
		{
			bool flag = false;
			IToken token = this.LT(1);
			this.match(127);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.ReferenceTableName = schemaObjectName;
			}
			bool flag2 = false;
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				int num = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.identifier();
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				this.columnNameList(vParent, vParent.ReferencedTableColumns);
			}
			else if (!TSql90ParserInternal.tokenSet_133_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			bool flag3 = false;
			if (this.LA(1) == 105 && this.LA(2) == 48)
			{
				int num2 = this.mark();
				flag3 = true;
				this.inputState.guessing++;
				try
				{
					this.match(105);
					this.match(48);
				}
				catch (RecognitionException)
				{
					flag3 = false;
				}
				this.rewind(num2);
				this.inputState.guessing--;
			}
			if (flag3)
			{
				this.match(105);
				this.match(48);
				DeleteUpdateAction deleteUpdateAction = this.deleteUpdateAction(vParent);
				if (this.inputState.guessing == 0)
				{
					vParent.DeleteAction = deleteUpdateAction;
					flag = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_133_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 35)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							goto IL_085C;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_085C;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							goto IL_085C;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num3)
							{
							case 28:
							case 30:
								goto IL_085C;
							case 29:
								break;
							default:
								switch (num3)
								{
								case 33:
								case 35:
									goto IL_085C;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 79)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 68:
						goto IL_085C;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
					case 67:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							goto IL_085C;
						default:
							if (num3 == 79)
							{
								goto IL_085C;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					goto IL_085C;
				}
			}
			else if (num3 <= 176)
			{
				if (num3 <= 106)
				{
					if (num3 == 95)
					{
						goto IL_085C;
					}
					switch (num3)
					{
					case 99:
					case 100:
						goto IL_085C;
					default:
						switch (num3)
						{
						case 105:
						{
							this.match(105);
							this.match(160);
							DeleteUpdateAction deleteUpdateAction = this.deleteUpdateAction(vParent);
							if (this.inputState.guessing == 0)
							{
								vParent.UpdateAction = deleteUpdateAction;
							}
							int num4 = this.LA(1);
							if (num4 <= 92)
							{
								if (num4 <= 35)
								{
									if (num4 <= 6)
									{
										if (num4 == 1)
										{
											goto IL_085C;
										}
										switch (num4)
										{
										case 4:
										case 6:
											goto IL_085C;
										}
									}
									else
									{
										switch (num4)
										{
										case 12:
										case 13:
										case 15:
										case 17:
										case 21:
										case 22:
										case 23:
											goto IL_085C;
										case 14:
										case 16:
										case 18:
										case 19:
										case 20:
											break;
										default:
											switch (num4)
											{
											case 28:
											case 30:
												goto IL_085C;
											case 29:
												break;
											default:
												switch (num4)
												{
												case 33:
												case 35:
													goto IL_085C;
												}
												break;
											}
											break;
										}
									}
								}
								else if (num4 <= 79)
								{
									switch (num4)
									{
									case 44:
									case 45:
									case 46:
									case 47:
									case 48:
									case 49:
									case 54:
									case 55:
									case 56:
									case 60:
									case 61:
									case 64:
									case 68:
										goto IL_085C;
									case 50:
									case 51:
									case 52:
									case 53:
									case 57:
									case 58:
									case 59:
									case 62:
									case 63:
									case 65:
									case 66:
									case 67:
										break;
									default:
										switch (num4)
										{
										case 74:
										case 75:
											goto IL_085C;
										default:
											if (num4 == 79)
											{
												goto IL_085C;
											}
											break;
										}
										break;
									}
								}
								else if (num4 == 82 || num4 == 86 || num4 == 92)
								{
									goto IL_085C;
								}
							}
							else if (num4 <= 176)
							{
								if (num4 <= 106)
								{
									if (num4 == 95)
									{
										goto IL_085C;
									}
									switch (num4)
									{
									case 99:
									case 100:
										goto IL_085C;
									default:
										switch (num4)
										{
										case 105:
										{
											IToken token2 = this.LT(1);
											this.match(105);
											this.match(48);
											deleteUpdateAction = this.deleteUpdateAction(vParent);
											if (this.inputState.guessing != 0)
											{
												goto IL_085C;
											}
											if (flag)
											{
												throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
											}
											vParent.DeleteAction = deleteUpdateAction;
											goto IL_085C;
										}
										case 106:
											goto IL_085C;
										}
										break;
									}
								}
								else
								{
									switch (num4)
									{
									case 118:
									case 119:
									case 123:
									case 125:
									case 126:
									case 127:
									case 129:
									case 131:
									case 132:
									case 134:
									case 136:
									case 138:
									case 140:
									case 142:
									case 143:
									case 144:
										goto IL_085C;
									case 120:
									case 121:
									case 122:
									case 124:
									case 128:
									case 130:
									case 133:
									case 135:
									case 137:
									case 139:
									case 141:
										break;
									default:
										switch (num4)
										{
										case 156:
										case 159:
										case 160:
										case 161:
										case 162:
										case 167:
										case 170:
										case 171:
										case 172:
											goto IL_085C;
										case 157:
										case 158:
										case 163:
										case 164:
										case 165:
										case 166:
										case 168:
										case 169:
											break;
										default:
											if (num4 == 176)
											{
												goto IL_085C;
											}
											break;
										}
										break;
									}
								}
							}
							else if (num4 <= 198)
							{
								switch (num4)
								{
								case 180:
								case 181:
									goto IL_085C;
								default:
									switch (num4)
									{
									case 191:
									case 192:
										goto IL_085C;
									default:
										if (num4 == 198)
										{
											goto IL_085C;
										}
										break;
									}
									break;
								}
							}
							else
							{
								if (num4 == 204)
								{
									goto IL_085C;
								}
								switch (num4)
								{
								case 219:
								case 220:
									goto IL_085C;
								default:
									if (num4 == 232)
									{
										goto IL_085C;
									}
									break;
								}
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						case 106:
							goto IL_085C;
						}
						break;
					}
				}
				else
				{
					switch (num3)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_085C;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_085C;
						case 157:
						case 158:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							break;
						default:
							if (num3 == 176)
							{
								goto IL_085C;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 198)
			{
				switch (num3)
				{
				case 180:
				case 181:
					goto IL_085C;
				default:
					switch (num3)
					{
					case 191:
					case 192:
						goto IL_085C;
					default:
						if (num3 == 198)
						{
							goto IL_085C;
						}
						break;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_085C;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_085C;
				default:
					if (num3 == 232)
					{
						goto IL_085C;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_085C:
			bool flag4 = this.replicationClauseOpt(statementType, vParent);
			if (this.inputState.guessing == 0)
			{
				vParent.NotForReplication = flag4;
			}
		}

		// Token: 0x06001B29 RID: 6953 RVA: 0x00101108 File Offset: 0x000FF308
		public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent)
		{
			int num = this.LA(1);
			if (num == 127)
			{
				return;
			}
			if (num == 191)
			{
				this.columnNameList(vParent, vParent.Columns);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B2A RID: 6954 RVA: 0x0010114C File Offset: 0x000FF34C
		public XmlDataTypeReference xmlDataType(SchemaObjectName vName)
		{
			XmlDataTypeReference xmlDataTypeReference = base.FragmentFactory.CreateFragment<XmlDataTypeReference>();
			xmlDataTypeReference.Name = vName;
			xmlDataTypeReference.UpdateTokenInfo(vName);
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.identifier();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						xmlDataTypeReference.XmlDataTypeOption = XmlDataTypeOptionHelper.Instance.ParseOption(token);
					}
				}
				else if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 192 && this.LA(2) != 200))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				SchemaObjectName schemaObjectName = this.dataTypeSchemaObjectName();
				if (this.inputState.guessing == 0)
				{
					xmlDataTypeReference.XmlSchemaCollection = schemaObjectName;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlDataTypeReference, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_0_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return xmlDataTypeReference;
		}

		// Token: 0x06001B2B RID: 6955 RVA: 0x00101340 File Offset: 0x000FF540
		public SchemaObjectName dataTypeSchemaObjectName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
			}
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return schemaObjectName;
						}
						switch (num)
						{
						case 4:
						case 6:
							return schemaObjectName;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							return schemaObjectName;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 26:
							case 28:
							case 30:
								return schemaObjectName;
							case 27:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									return schemaObjectName;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
					case 68:
						return schemaObjectName;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return schemaObjectName;
						}
						break;
					}
				}
				else if (num == 79 || num == 82 || num == 86)
				{
					return schemaObjectName;
				}
			}
			else if (num <= 144)
			{
				if (num <= 95)
				{
					if (num == 92 || num == 95)
					{
						return schemaObjectName;
					}
				}
				else
				{
					switch (num)
					{
					case 99:
					case 100:
						return schemaObjectName;
					default:
						if (num == 106)
						{
							return schemaObjectName;
						}
						switch (num)
						{
						case 118:
						case 119:
						case 123:
						case 125:
						case 126:
						case 127:
						case 129:
						case 131:
						case 132:
						case 134:
						case 136:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return schemaObjectName;
						}
						break;
					}
				}
			}
			else if (num <= 200)
			{
				switch (num)
				{
				case 156:
				case 159:
				case 160:
				case 161:
				case 162:
				case 165:
				case 167:
				case 170:
				case 171:
				case 172:
				case 175:
				case 176:
				case 180:
				case 181:
					return schemaObjectName;
				case 157:
				case 158:
				case 163:
				case 164:
				case 166:
				case 168:
				case 169:
				case 173:
				case 174:
				case 177:
				case 178:
				case 179:
					break;
				default:
					switch (num)
					{
					case 191:
					case 192:
						return schemaObjectName;
					default:
						switch (num)
						{
						case 198:
							return schemaObjectName;
						case 200:
							this.match(200);
							identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, identifier);
								return schemaObjectName;
							}
							return schemaObjectName;
						}
						break;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
				case 206:
					return schemaObjectName;
				case 205:
					break;
				default:
					switch (num)
					{
					case 219:
					case 220:
						return schemaObjectName;
					default:
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 234:
							return schemaObjectName;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B2C RID: 6956 RVA: 0x001016D0 File Offset: 0x000FF8D0
		public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType)
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			sqlDataTypeReference.Name = vName;
			sqlDataTypeReference.SqlDataTypeOption = vType;
			sqlDataTypeReference.UpdateTokenInfo(vName);
			bool flag = false;
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0369;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0369;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							goto IL_0369;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 26:
							case 28:
							case 30:
								goto IL_0369;
							case 27:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_0369;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
					case 68:
						goto IL_0369;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0369;
						}
						break;
					}
				}
				else if (num == 79 || num == 82 || num == 86)
				{
					goto IL_0369;
				}
			}
			else if (num <= 144)
			{
				if (num <= 95)
				{
					if (num == 92 || num == 95)
					{
						goto IL_0369;
					}
				}
				else
				{
					switch (num)
					{
					case 99:
					case 100:
						goto IL_0369;
					default:
						if (num == 106)
						{
							goto IL_0369;
						}
						switch (num)
						{
						case 118:
						case 119:
						case 123:
						case 125:
						case 126:
						case 127:
						case 129:
						case 131:
						case 132:
						case 134:
						case 136:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_0369;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 156:
				case 159:
				case 160:
				case 161:
				case 162:
				case 167:
				case 170:
				case 171:
				case 172:
				case 175:
				case 176:
				case 180:
				case 181:
					goto IL_0369;
				case 157:
				case 158:
				case 163:
				case 164:
				case 166:
				case 168:
				case 169:
				case 173:
				case 174:
				case 177:
				case 178:
				case 179:
					break;
				case 165:
				{
					IToken token = this.LT(1);
					this.match(165);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
						flag = true;
						goto IL_0369;
					}
					goto IL_0369;
				}
				default:
					switch (num)
					{
					case 191:
					case 192:
						goto IL_0369;
					default:
						if (num == 198)
						{
							goto IL_0369;
						}
						break;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
				case 206:
					goto IL_0369;
				case 205:
					break;
				default:
					switch (num)
					{
					case 219:
					case 220:
						goto IL_0369;
					default:
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 234:
							goto IL_0369;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0369:
			this.dataTypeParametersOpt(sqlDataTypeReference);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ProcessNationalAndVarying(sqlDataTypeReference, null, flag);
				TSql80ParserBaseInternal.CheckSqlDataTypeParameters(sqlDataTypeReference);
			}
			return sqlDataTypeReference;
		}

		// Token: 0x06001B2D RID: 6957 RVA: 0x00101A6C File Offset: 0x000FFC6C
		public UserDataTypeReference userDataType(SchemaObjectName vName)
		{
			UserDataTypeReference userDataTypeReference = base.FragmentFactory.CreateFragment<UserDataTypeReference>();
			userDataTypeReference.Name = vName;
			userDataTypeReference.UpdateTokenInfo(vName);
			this.dataTypeParametersOpt(userDataTypeReference);
			return userDataTypeReference;
		}

		// Token: 0x06001B2E RID: 6958 RVA: 0x00101A9C File Offset: 0x000FFC9C
		public SqlDataTypeReference doubleDataType()
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			IToken token = this.LT(1);
			this.match(53);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "PRECISION");
				sqlDataTypeReference.SqlDataTypeOption = SqlDataTypeOption.Float;
				base.SetNameForDoublePrecisionType(sqlDataTypeReference, token, token2);
			}
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 221 || this.LA(2) == 232))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					int num2 = this.LA(1);
					if (num2 != 221)
					{
						if (num2 != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(232);
					}
					else
					{
						this.integer();
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				int num3 = this.LA(1);
				if (num3 != 221)
				{
					if (num3 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					Literal literal = this.max();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(sqlDataTypeReference, sqlDataTypeReference.Parameters, literal);
					}
				}
				else
				{
					Literal literal = this.integer();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(sqlDataTypeReference, sqlDataTypeReference.Parameters, literal);
					}
				}
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_0_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return sqlDataTypeReference;
		}

		// Token: 0x06001B2F RID: 6959 RVA: 0x00101CCC File Offset: 0x000FFECC
		public SqlDataTypeReference sqlDataTypeWithNational()
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(96);
			SchemaObjectName schemaObjectName = this.dataTypeSchemaObjectName();
			if (this.inputState.guessing == 0)
			{
				sqlDataTypeReference.SqlDataTypeOption = TSql80ParserBaseInternal.ParseDataType(schemaObjectName.BaseIdentifier.Value);
				if (sqlDataTypeReference.SqlDataTypeOption == SqlDataTypeOption.None || (schemaObjectName.SchemaIdentifier != null && !TSql90ParserBaseInternal.IsSys(schemaObjectName.SchemaIdentifier)))
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46003", token, TSqlParserResource.SQL46003Message, new string[] { TSqlParserResource.UserDefined });
				}
				sqlDataTypeReference.Name = schemaObjectName;
				TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
				sqlDataTypeReference.UpdateTokenInfo(schemaObjectName);
			}
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_0404;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_0404;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							goto IL_0404;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 26:
							case 28:
							case 30:
								goto IL_0404;
							case 27:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_0404;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
					case 68:
						goto IL_0404;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_0404;
						}
						break;
					}
				}
				else if (num == 79 || num == 82 || num == 86)
				{
					goto IL_0404;
				}
			}
			else if (num <= 144)
			{
				if (num <= 95)
				{
					if (num == 92 || num == 95)
					{
						goto IL_0404;
					}
				}
				else
				{
					switch (num)
					{
					case 99:
					case 100:
						goto IL_0404;
					default:
						if (num == 106)
						{
							goto IL_0404;
						}
						switch (num)
						{
						case 118:
						case 119:
						case 123:
						case 125:
						case 126:
						case 127:
						case 129:
						case 131:
						case 132:
						case 134:
						case 136:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_0404;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 156:
				case 159:
				case 160:
				case 161:
				case 162:
				case 167:
				case 170:
				case 171:
				case 172:
				case 175:
				case 176:
				case 180:
				case 181:
					goto IL_0404;
				case 157:
				case 158:
				case 163:
				case 164:
				case 166:
				case 168:
				case 169:
				case 173:
				case 174:
				case 177:
				case 178:
				case 179:
					break;
				case 165:
				{
					IToken token2 = this.LT(1);
					this.match(165);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token2);
						flag = true;
						goto IL_0404;
					}
					goto IL_0404;
				}
				default:
					switch (num)
					{
					case 191:
					case 192:
						goto IL_0404;
					default:
						if (num == 198)
						{
							goto IL_0404;
						}
						break;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
				case 206:
					goto IL_0404;
				case 205:
					break;
				default:
					switch (num)
					{
					case 219:
					case 220:
						goto IL_0404;
					default:
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 234:
							goto IL_0404;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0404:
			this.dataTypeParametersOpt(sqlDataTypeReference);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ProcessNationalAndVarying(sqlDataTypeReference, token, flag);
				TSql80ParserBaseInternal.CheckSqlDataTypeParameters(sqlDataTypeReference);
			}
			return sqlDataTypeReference;
		}

		// Token: 0x06001B30 RID: 6960 RVA: 0x00102104 File Offset: 0x00100304
		public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent)
		{
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 221 || this.LA(2) == 232))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					int num2 = this.LA(1);
					if (num2 != 221)
					{
						if (num2 != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(232);
					}
					else
					{
						this.integer();
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				int num3 = this.LA(1);
				if (num3 != 221)
				{
					if (num3 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					Literal literal = this.max();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.Parameters, literal);
					}
				}
				else
				{
					Literal literal = this.integer();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.Parameters, literal);
					}
					int num4 = this.LA(1);
					if (num4 != 192)
					{
						if (num4 != 198)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(198);
						literal = this.integer();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.Parameters, literal);
						}
					}
				}
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001B31 RID: 6961 RVA: 0x00102330 File Offset: 0x00100530
		public MaxLiteral max()
		{
			MaxLiteral maxLiteral = base.FragmentFactory.CreateFragment<MaxLiteral>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MAX");
				TSql80ParserBaseInternal.UpdateTokenInfo(maxLiteral, token);
				maxLiteral.Value = token.getText();
			}
			return maxLiteral;
		}

		// Token: 0x06001B32 RID: 6962 RVA: 0x0010238C File Offset: 0x0010058C
		public void identifierListElement(List<Identifier> vParent, int vMaxNumber, bool first)
		{
			IToken token = this.LT(1);
			this.match(200);
			Identifier identifier;
			if (this.inputState.guessing == 0 && first)
			{
				identifier = base.GetEmptyIdentifier(token);
				TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, identifier, vMaxNumber);
			}
			while (this.LA(1) == 200)
			{
				IToken token2 = this.LT(1);
				this.match(200);
				if (this.inputState.guessing == 0)
				{
					identifier = base.GetEmptyIdentifier(token2);
					TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, identifier, vMaxNumber);
				}
			}
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, identifier, vMaxNumber);
			}
		}

		// Token: 0x06001B33 RID: 6963 RVA: 0x0010242C File Offset: 0x0010062C
		public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanExpression booleanExpression = null;
			booleanExpression = this.booleanExpressionAnd(expressionFlags);
			while (this.LA(1) == 112)
			{
				this.match(112);
				BooleanExpression booleanExpression2 = this.booleanExpressionAnd(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					base.AddBinaryExpression(ref booleanExpression, booleanExpression2, BooleanBinaryExpressionType.Or);
				}
			}
			return booleanExpression;
		}

		// Token: 0x06001B34 RID: 6964 RVA: 0x00102478 File Offset: 0x00100678
		public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanExpression booleanExpression = null;
			booleanExpression = this.booleanExpressionUnary(expressionFlags);
			while (this.LA(1) == 7)
			{
				this.match(7);
				BooleanExpression booleanExpression2 = this.booleanExpressionUnary(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					base.AddBinaryExpression(ref booleanExpression, booleanExpression2, BooleanBinaryExpressionType.And);
				}
			}
			return booleanExpression;
		}

		// Token: 0x06001B35 RID: 6965 RVA: 0x001024C4 File Offset: 0x001006C4
		public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanExpression booleanExpression = null;
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_0220;
						}
					}
					else if (num != 31 && num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_0220;
						}
					}
				}
				else if (num <= 69)
				{
					if (num != 62 && num != 69)
					{
						goto IL_0220;
					}
				}
				else if (num != 81 && num != 93)
				{
					switch (num)
					{
					case 99:
					{
						IToken token = this.LT(1);
						this.match(99);
						BooleanExpression booleanExpression2 = this.booleanExpressionUnary(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							BooleanNotExpression booleanNotExpression = base.FragmentFactory.CreateFragment<BooleanNotExpression>();
							booleanExpression = booleanNotExpression;
							TSql80ParserBaseInternal.UpdateTokenInfo(booleanNotExpression, token);
							booleanNotExpression.Expression = booleanExpression2;
							return booleanExpression;
						}
						return booleanExpression;
					}
					case 100:
					case 101:
						break;
					default:
						goto IL_0220;
					}
				}
			}
			else if (num <= 157)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_0220;
					}
				}
				else if (num != 141 && num != 147 && num != 157)
				{
					goto IL_0220;
				}
			}
			else if (num <= 163)
			{
				if (num != 160 && num != 163)
				{
					goto IL_0220;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
					break;
				case 192:
					goto IL_0220;
				default:
					switch (num)
					{
					case 197:
					case 199:
					case 200:
						break;
					case 198:
						goto IL_0220;
					default:
						switch (num)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							break;
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 226:
						case 229:
							goto IL_0220;
						default:
							goto IL_0220;
						}
						break;
					}
					break;
				}
			}
			return this.booleanExpressionPrimary(expressionFlags);
			IL_0220:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B36 RID: 6966 RVA: 0x00102708 File Offset: 0x00100908
		public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			IToken token = null;
			bool flag = false;
			BooleanComparisonType booleanComparisonType = BooleanComparisonType.Equals;
			int num = this.LA(1);
			if (num <= 62)
			{
				if (num != 31)
				{
					if (num != 62)
					{
						goto IL_0071;
					}
					return this.existsPredicate(expressionFlags);
				}
			}
			else if (num != 69)
			{
				if (num == 157)
				{
					return this.tsEqualCall();
				}
				if (num != 160)
				{
					goto IL_0071;
				}
				return this.updateCall();
			}
			return this.fulltextPredicate();
			IL_0071:
			BooleanExpression booleanExpression;
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_107_.member(this.LA(2)) && base.IsNextRuleBooleanParenthesis())
			{
				booleanExpression = this.booleanExpressionParenthesis();
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_37_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_136_.member(this.LA(2)))
				{
					ScalarExpression scalarExpression = this.expression(expressionFlags);
					int num2 = this.LA(1);
					if (num2 > 94)
					{
						if (num2 > 188)
						{
							if (num2 != 196)
							{
								switch (num2)
								{
								case 205:
								case 206:
								case 208:
									goto IL_016B;
								case 207:
									break;
								default:
									goto IL_043E;
								}
							}
							return this.joinPredicate(scalarExpression, booleanComparisonType, expressionFlags);
						}
						if (num2 == 99)
						{
							goto IL_0374;
						}
						if (num2 != 188)
						{
							goto IL_043E;
						}
						IL_016B:
						booleanComparisonType = this.comparisonOperator();
						int num3 = this.LA(1);
						if (num3 <= 93)
						{
							if (num3 <= 25)
							{
								if (num3 <= 8)
								{
									if (num3 != 5 && num3 != 8)
									{
										goto IL_0344;
									}
									goto IL_0334;
								}
								else if (num3 != 20 && num3 != 25)
								{
									goto IL_0344;
								}
							}
							else if (num3 <= 41)
							{
								if (num3 != 34)
								{
									switch (num3)
									{
									case 40:
									case 41:
										break;
									default:
										goto IL_0344;
									}
								}
							}
							else if (num3 != 81 && num3 != 93)
							{
								goto IL_0344;
							}
						}
						else if (num3 <= 141)
						{
							if (num3 <= 133)
							{
								switch (num3)
								{
								case 100:
								case 101:
									break;
								default:
									if (num3 != 133)
									{
										goto IL_0344;
									}
									break;
								}
							}
							else if (num3 != 136 && num3 != 141)
							{
								goto IL_0344;
							}
						}
						else if (num3 <= 163)
						{
							switch (num3)
							{
							case 145:
								goto IL_0334;
							case 146:
								goto IL_0344;
							case 147:
								break;
							default:
								if (num3 != 163)
								{
									goto IL_0344;
								}
								break;
							}
						}
						else
						{
							switch (num3)
							{
							case 191:
							case 193:
								break;
							case 192:
								goto IL_0344;
							default:
								switch (num3)
								{
								case 197:
								case 199:
								case 200:
									break;
								case 198:
									goto IL_0344;
								default:
									switch (num3)
									{
									case 211:
									case 221:
									case 222:
									case 223:
									case 224:
									case 225:
									case 227:
									case 228:
									case 230:
									case 231:
									case 232:
									case 233:
									case 234:
									case 235:
										break;
									case 212:
									case 213:
									case 214:
									case 215:
									case 216:
									case 217:
									case 218:
									case 219:
									case 220:
									case 226:
									case 229:
										goto IL_0344;
									default:
										goto IL_0344;
									}
									break;
								}
								break;
							}
						}
						return this.comparisonPredicate(scalarExpression, booleanComparisonType, expressionFlags);
						IL_0334:
						return this.subqueryComparisonPredicate(scalarExpression, booleanComparisonType, expressionFlags);
						IL_0344:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (num2 <= 83)
					{
						if (num2 != 14 && num2 != 83)
						{
							goto IL_043E;
						}
					}
					else
					{
						if (num2 == 89)
						{
							return this.isPredicate(scalarExpression);
						}
						if (num2 != 94)
						{
							goto IL_043E;
						}
					}
					IL_0374:
					int num4 = this.LA(1);
					if (num4 <= 83)
					{
						if (num4 == 14 || num4 == 83)
						{
							goto IL_03D1;
						}
					}
					else
					{
						if (num4 == 94)
						{
							goto IL_03D1;
						}
						if (num4 == 99)
						{
							token = this.LT(1);
							this.match(99);
							if (this.inputState.guessing == 0)
							{
								flag = true;
								goto IL_03D1;
							}
							goto IL_03D1;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_03D1:
					int num5 = this.LA(1);
					if (num5 != 14)
					{
						if (num5 != 83)
						{
							if (num5 != 94)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							booleanExpression = this.likePredicate(scalarExpression, flag, expressionFlags);
						}
						else
						{
							booleanExpression = this.inPredicate(scalarExpression, flag, expressionFlags);
						}
					}
					else
					{
						booleanExpression = this.betweenPredicate(scalarExpression, flag, expressionFlags);
					}
					if (this.inputState.guessing == 0 && token != null)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(booleanExpression, token);
						return booleanExpression;
					}
					return booleanExpression;
					IL_043E:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return booleanExpression;
		}

		// Token: 0x06001B37 RID: 6967 RVA: 0x00102B7C File Offset: 0x00100D7C
		public BooleanParenthesisExpression booleanExpressionParenthesis()
		{
			BooleanParenthesisExpression booleanParenthesisExpression = base.FragmentFactory.CreateFragment<BooleanParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			BooleanExpression booleanExpression = this.booleanExpression(ExpressionFlags.None);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token);
				booleanParenthesisExpression.Expression = booleanExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token2);
			}
			return booleanParenthesisExpression;
		}

		// Token: 0x06001B38 RID: 6968 RVA: 0x00102BEC File Offset: 0x00100DEC
		public BooleanComparisonType comparisonOperator()
		{
			BooleanComparisonType booleanComparisonType = BooleanComparisonType.Equals;
			int num = this.LA(1);
			if (num != 188)
			{
				switch (num)
				{
				case 205:
				{
					this.match(205);
					if (this.inputState.guessing == 0)
					{
						booleanComparisonType = BooleanComparisonType.LessThan;
					}
					int num2 = this.LA(1);
					if (num2 <= 93)
					{
						if (num2 <= 25)
						{
							if (num2 <= 8)
							{
								if (num2 == 5 || num2 == 8)
								{
									return booleanComparisonType;
								}
							}
							else if (num2 == 20 || num2 == 25)
							{
								return booleanComparisonType;
							}
						}
						else if (num2 <= 41)
						{
							if (num2 == 34)
							{
								return booleanComparisonType;
							}
							switch (num2)
							{
							case 40:
							case 41:
								return booleanComparisonType;
							}
						}
						else if (num2 == 81 || num2 == 93)
						{
							return booleanComparisonType;
						}
					}
					else if (num2 <= 141)
					{
						if (num2 <= 133)
						{
							switch (num2)
							{
							case 100:
							case 101:
								return booleanComparisonType;
							default:
								if (num2 == 133)
								{
									return booleanComparisonType;
								}
								break;
							}
						}
						else if (num2 == 136 || num2 == 141)
						{
							return booleanComparisonType;
						}
					}
					else if (num2 <= 163)
					{
						switch (num2)
						{
						case 145:
						case 147:
							return booleanComparisonType;
						case 146:
							break;
						default:
							if (num2 == 163)
							{
								return booleanComparisonType;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 191:
						case 193:
							return booleanComparisonType;
						case 192:
							break;
						default:
							switch (num2)
							{
							case 197:
							case 199:
							case 200:
								return booleanComparisonType;
							case 198:
								break;
							default:
								switch (num2)
								{
								case 206:
									this.match(206);
									if (this.inputState.guessing == 0)
									{
										return BooleanComparisonType.LessThanOrEqualTo;
									}
									return booleanComparisonType;
								case 208:
									this.match(208);
									if (this.inputState.guessing == 0)
									{
										return BooleanComparisonType.NotEqualToBrackets;
									}
									return booleanComparisonType;
								case 211:
								case 221:
								case 222:
								case 223:
								case 224:
								case 225:
								case 227:
								case 228:
								case 230:
								case 231:
								case 232:
								case 233:
								case 234:
								case 235:
									return booleanComparisonType;
								}
								break;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				case 206:
					this.match(206);
					if (this.inputState.guessing == 0)
					{
						return BooleanComparisonType.Equals;
					}
					return booleanComparisonType;
				case 208:
				{
					this.match(208);
					if (this.inputState.guessing == 0)
					{
						booleanComparisonType = BooleanComparisonType.GreaterThan;
					}
					int num3 = this.LA(1);
					if (num3 <= 101)
					{
						if (num3 <= 25)
						{
							if (num3 <= 8)
							{
								if (num3 == 5 || num3 == 8)
								{
									return booleanComparisonType;
								}
							}
							else if (num3 == 20 || num3 == 25)
							{
								return booleanComparisonType;
							}
						}
						else if (num3 <= 41)
						{
							if (num3 == 34)
							{
								return booleanComparisonType;
							}
							switch (num3)
							{
							case 40:
							case 41:
								return booleanComparisonType;
							}
						}
						else
						{
							if (num3 == 81 || num3 == 93)
							{
								return booleanComparisonType;
							}
							switch (num3)
							{
							case 100:
							case 101:
								return booleanComparisonType;
							}
						}
					}
					else if (num3 <= 147)
					{
						if (num3 <= 136)
						{
							if (num3 == 133 || num3 == 136)
							{
								return booleanComparisonType;
							}
						}
						else
						{
							if (num3 == 141)
							{
								return booleanComparisonType;
							}
							switch (num3)
							{
							case 145:
							case 147:
								return booleanComparisonType;
							}
						}
					}
					else if (num3 <= 193)
					{
						if (num3 == 163)
						{
							return booleanComparisonType;
						}
						switch (num3)
						{
						case 191:
						case 193:
							return booleanComparisonType;
						}
					}
					else
					{
						switch (num3)
						{
						case 197:
						case 199:
						case 200:
							return booleanComparisonType;
						case 198:
							break;
						default:
							if (num3 != 206)
							{
								switch (num3)
								{
								case 211:
								case 221:
								case 222:
								case 223:
								case 224:
								case 225:
								case 227:
								case 228:
								case 230:
								case 231:
								case 232:
								case 233:
								case 234:
								case 235:
									return booleanComparisonType;
								}
							}
							else
							{
								this.match(206);
								if (this.inputState.guessing == 0)
								{
									return BooleanComparisonType.GreaterThanOrEqualTo;
								}
								return booleanComparisonType;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.match(188);
			switch (this.LA(1))
			{
			case 205:
				this.match(205);
				if (this.inputState.guessing == 0)
				{
					return BooleanComparisonType.NotLessThan;
				}
				return booleanComparisonType;
			case 206:
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					return BooleanComparisonType.NotEqualToExclamation;
				}
				return booleanComparisonType;
			case 208:
				this.match(208);
				if (this.inputState.guessing == 0)
				{
					return BooleanComparisonType.NotGreaterThan;
				}
				return booleanComparisonType;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B39 RID: 6969 RVA: 0x0010310C File Offset: 0x0010130C
		public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanComparisonExpression booleanComparisonExpression = base.FragmentFactory.CreateFragment<BooleanComparisonExpression>();
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanComparisonExpression.ComparisonType = vType;
				booleanComparisonExpression.FirstExpression = vExpressionFirst;
				booleanComparisonExpression.SecondExpression = scalarExpression;
			}
			return booleanComparisonExpression;
		}

		// Token: 0x06001B3A RID: 6970 RVA: 0x00103150 File Offset: 0x00101350
		public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			SubqueryComparisonPredicate subqueryComparisonPredicate = base.FragmentFactory.CreateFragment<SubqueryComparisonPredicate>();
			SubqueryComparisonPredicateType subqueryComparisonPredicateType = this.subqueryComparisonPredicateType();
			ScalarSubquery scalarSubquery = this.subquery(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				subqueryComparisonPredicate.ComparisonType = vType;
				subqueryComparisonPredicate.Expression = vExpressionFirst;
				subqueryComparisonPredicate.SubqueryComparisonPredicateType = subqueryComparisonPredicateType;
				subqueryComparisonPredicate.Subquery = scalarSubquery;
			}
			return subqueryComparisonPredicate;
		}

		// Token: 0x06001B3B RID: 6971 RVA: 0x001031A4 File Offset: 0x001013A4
		public BooleanComparisonExpression joinPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanComparisonExpression booleanComparisonExpression = base.FragmentFactory.CreateFragment<BooleanComparisonExpression>();
			vType = this.joinOperator();
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanComparisonExpression.ComparisonType = vType;
				booleanComparisonExpression.FirstExpression = vExpressionFirst;
				booleanComparisonExpression.SecondExpression = scalarExpression;
			}
			return booleanComparisonExpression;
		}

		// Token: 0x06001B3C RID: 6972 RVA: 0x001031F0 File Offset: 0x001013F0
		public BooleanIsNullExpression isPredicate(ScalarExpression vExpressionFirst)
		{
			BooleanIsNullExpression booleanIsNullExpression = base.FragmentFactory.CreateFragment<BooleanIsNullExpression>();
			this.match(89);
			bool flag = this.nullNotNull(booleanIsNullExpression);
			if (this.inputState.guessing == 0)
			{
				booleanIsNullExpression.Expression = vExpressionFirst;
				booleanIsNullExpression.IsNot = !flag;
			}
			return booleanIsNullExpression;
		}

		// Token: 0x06001B3D RID: 6973 RVA: 0x00103238 File Offset: 0x00101438
		public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			InPredicate inPredicate = base.FragmentFactory.CreateFragment<InPredicate>();
			IToken token = this.LT(1);
			this.match(83);
			if (this.inputState.guessing == 0)
			{
				if (vNotDefined)
				{
					inPredicate.NotDefined = true;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(inPredicate, token);
				inPredicate.Expression = vExpressionFirst;
			}
			if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 191) && base.IsNextRuleSelectParenthesis())
			{
				ScalarSubquery scalarSubquery = this.subquery(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					inPredicate.Subquery = scalarSubquery;
				}
			}
			else
			{
				if (this.LA(1) != 191 || !TSql90ParserInternal.tokenSet_37_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				this.expressionList(inPredicate, inPredicate.Values);
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(inPredicate, token2);
				}
			}
			return inPredicate;
		}

		// Token: 0x06001B3E RID: 6974 RVA: 0x00103350 File Offset: 0x00101550
		public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			BooleanTernaryExpression booleanTernaryExpression = base.FragmentFactory.CreateFragment<BooleanTernaryExpression>();
			IToken token = this.LT(1);
			this.match(14);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanTernaryExpression.SecondExpression = scalarExpression;
			}
			this.match(7);
			scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanTernaryExpression.ThirdExpression = scalarExpression;
				if (vNotDefined)
				{
					booleanTernaryExpression.TernaryExpressionType = BooleanTernaryExpressionType.NotBetween;
				}
				else
				{
					booleanTernaryExpression.TernaryExpressionType = BooleanTernaryExpressionType.Between;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanTernaryExpression, token);
				booleanTernaryExpression.FirstExpression = vExpressionFirst;
			}
			return booleanTernaryExpression;
		}

		// Token: 0x06001B3F RID: 6975 RVA: 0x001033DC File Offset: 0x001015DC
		public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			LikePredicate likePredicate = base.FragmentFactory.CreateFragment<LikePredicate>();
			IToken token = this.LT(1);
			this.match(94);
			if (this.inputState.guessing == 0)
			{
				if (vNotDefined)
				{
					likePredicate.NotDefined = true;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(likePredicate, token);
				likePredicate.FirstExpression = vExpressionFirst;
			}
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				likePredicate.SecondExpression = scalarExpression;
			}
			int num = this.LA(1);
			if (num <= 114)
			{
				if (num <= 23)
				{
					switch (num)
					{
					case 1:
					case 4:
					case 6:
					case 7:
						return likePredicate;
					case 2:
					case 3:
					case 5:
						break;
					default:
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return likePredicate;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return likePredicate;
							}
							break;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 28:
					case 29:
					case 33:
					case 35:
					case 36:
						return likePredicate;
					case 30:
					case 31:
					case 32:
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 72:
						case 74:
						case 75:
						case 76:
						case 77:
						case 82:
						case 85:
						case 86:
						case 87:
						case 90:
						case 92:
						case 93:
						case 95:
							return likePredicate;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 62:
						case 63:
						case 65:
						case 66:
						case 68:
						case 69:
						case 70:
						case 71:
						case 73:
						case 78:
						case 79:
						case 80:
						case 81:
						case 83:
						case 84:
						case 88:
						case 89:
						case 91:
						case 94:
							break;
						case 58:
							this.escapeExpression(likePredicate, expressionFlags);
							return likePredicate;
						default:
							switch (num)
							{
							case 105:
							case 106:
							case 111:
							case 112:
							case 113:
							case 114:
								return likePredicate;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 181)
			{
				switch (num)
				{
				case 119:
				case 123:
				case 125:
				case 126:
				case 129:
				case 131:
				case 132:
				case 133:
				case 134:
				case 138:
				case 140:
				case 142:
				case 143:
				case 144:
					return likePredicate;
				case 120:
				case 121:
				case 122:
				case 124:
				case 127:
				case 128:
				case 130:
				case 135:
				case 136:
				case 137:
				case 139:
				case 141:
					break;
				default:
					if (num == 150)
					{
						return likePredicate;
					}
					switch (num)
					{
					case 156:
					case 158:
					case 160:
					case 161:
					case 162:
					case 167:
					case 169:
					case 170:
					case 171:
					case 172:
					case 176:
					case 177:
					case 178:
					case 180:
					case 181:
						return likePredicate;
					}
					break;
				}
			}
			else if (num <= 204)
			{
				switch (num)
				{
				case 191:
				case 192:
				case 194:
				case 198:
					return likePredicate;
				case 193:
				{
					this.match(193);
					if (this.inputState.guessing == 0)
					{
						likePredicate.OdbcEscape = true;
					}
					this.escapeExpression(likePredicate, expressionFlags);
					IToken token2 = this.LT(1);
					this.match(194);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(likePredicate, token2);
						return likePredicate;
					}
					return likePredicate;
				}
				case 195:
				case 196:
				case 197:
					break;
				default:
					if (num == 204)
					{
						return likePredicate;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					return likePredicate;
				default:
					if (num == 232)
					{
						return likePredicate;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B40 RID: 6976 RVA: 0x001037D8 File Offset: 0x001019D8
		public FullTextPredicate fulltextPredicate()
		{
			FullTextPredicate fullTextPredicate = base.FragmentFactory.CreateFragment<FullTextPredicate>();
			int num = this.LA(1);
			if (num != 31)
			{
				if (num != 69)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(69);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token);
					fullTextPredicate.FullTextFunctionType = FullTextFunctionType.FreeText;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(31);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token2);
					fullTextPredicate.FullTextFunctionType = FullTextFunctionType.Contains;
				}
			}
			this.match(191);
			int num2 = this.LA(1);
			ColumnReferenceExpression columnReferenceExpression;
			if (num2 <= 191)
			{
				if (num2 != 81 && num2 != 136)
				{
					if (num2 != 191)
					{
						goto IL_0290;
					}
					this.match(191);
					bool flag = false;
					if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_137_.member(this.LA(2)))
					{
						int num3 = this.mark();
						flag = true;
						this.inputState.guessing++;
						try
						{
							this.starColumn();
						}
						catch (RecognitionException)
						{
							flag = false;
						}
						this.rewind(num3);
						this.inputState.guessing--;
					}
					if (flag)
					{
						columnReferenceExpression = this.starColumn();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, columnReferenceExpression);
						}
					}
					else
					{
						if (!TSql90ParserInternal.tokenSet_31_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_138_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						columnReferenceExpression = this.column();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, columnReferenceExpression);
						}
						while (this.LA(1) == 198)
						{
							this.match(198);
							columnReferenceExpression = this.column();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, columnReferenceExpression);
							}
						}
					}
					this.match(192);
					goto IL_02A3;
				}
			}
			else if (num2 <= 200)
			{
				if (num2 != 195 && num2 != 200)
				{
					goto IL_0290;
				}
			}
			else if (num2 != 227)
			{
				switch (num2)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_0290;
				}
			}
			columnReferenceExpression = this.fulltextColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, columnReferenceExpression);
				goto IL_02A3;
			}
			goto IL_02A3;
			IL_0290:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_02A3:
			this.match(198);
			ValueExpression valueExpression = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				fullTextPredicate.Value = valueExpression;
			}
			int num4 = this.LA(1);
			if (num4 != 192)
			{
				if (num4 != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ValueExpression valueExpression2 = this.languageExpression();
				if (this.inputState.guessing == 0)
				{
					fullTextPredicate.LanguageTerm = valueExpression2;
				}
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token3);
			}
			return fullTextPredicate;
		}

		// Token: 0x06001B41 RID: 6977 RVA: 0x00103B40 File Offset: 0x00101D40
		public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ExistsPredicate existsPredicate = base.FragmentFactory.CreateFragment<ExistsPredicate>();
			this.match(62);
			ScalarSubquery scalarSubquery = this.subquery(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				existsPredicate.Subquery = scalarSubquery;
			}
			return existsPredicate;
		}

		// Token: 0x06001B42 RID: 6978 RVA: 0x00103B80 File Offset: 0x00101D80
		public TSEqualCall tsEqualCall()
		{
			TSEqualCall tsequalCall = base.FragmentFactory.CreateFragment<TSEqualCall>();
			IToken token = this.LT(1);
			this.match(157);
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsequalCall, token);
				tsequalCall.FirstExpression = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.expression(ExpressionFlags.None);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				tsequalCall.SecondExpression = scalarExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(tsequalCall, token2);
			}
			return tsequalCall;
		}

		// Token: 0x06001B43 RID: 6979 RVA: 0x00103C20 File Offset: 0x00101E20
		public UpdateCall updateCall()
		{
			UpdateCall updateCall = base.FragmentFactory.CreateFragment<UpdateCall>();
			IToken token = this.LT(1);
			this.match(160);
			this.match(191);
			Identifier identifier = this.identifier();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateCall, token);
				updateCall.Identifier = identifier;
				TSql80ParserBaseInternal.UpdateTokenInfo(updateCall, token2);
			}
			return updateCall;
		}

		// Token: 0x06001B44 RID: 6980 RVA: 0x00103C98 File Offset: 0x00101E98
		public ColumnReferenceExpression fulltextColumn()
		{
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_139_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.starColumn();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			ColumnReferenceExpression columnReferenceExpression;
			if (flag)
			{
				columnReferenceExpression = this.starColumn();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_31_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_139_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				columnReferenceExpression = this.column();
			}
			return columnReferenceExpression;
		}

		// Token: 0x06001B45 RID: 6981 RVA: 0x00103D74 File Offset: 0x00101F74
		public BooleanComparisonType joinOperator()
		{
			BooleanComparisonType booleanComparisonType = BooleanComparisonType.LeftOuterJoin;
			int num = this.LA(1);
			if (num != 196)
			{
				if (num != 207)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(207);
				if (this.inputState.guessing == 0)
				{
					booleanComparisonType = BooleanComparisonType.RightOuterJoin;
				}
			}
			else
			{
				this.match(196);
				if (this.inputState.guessing == 0)
				{
					booleanComparisonType = BooleanComparisonType.LeftOuterJoin;
				}
			}
			return booleanComparisonType;
		}

		// Token: 0x06001B46 RID: 6982 RVA: 0x00103DEC File Offset: 0x00101FEC
		public SubqueryComparisonPredicateType subqueryComparisonPredicateType()
		{
			SubqueryComparisonPredicateType subqueryComparisonPredicateType = SubqueryComparisonPredicateType.None;
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 8)
				{
					if (num != 145)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(145);
					if (this.inputState.guessing == 0)
					{
						subqueryComparisonPredicateType = SubqueryComparisonPredicateType.Any;
					}
				}
				else
				{
					this.match(8);
					if (this.inputState.guessing == 0)
					{
						subqueryComparisonPredicateType = SubqueryComparisonPredicateType.Any;
					}
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					subqueryComparisonPredicateType = SubqueryComparisonPredicateType.All;
				}
			}
			return subqueryComparisonPredicateType;
		}

		// Token: 0x06001B47 RID: 6983 RVA: 0x00103E78 File Offset: 0x00102078
		public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			this.match(58);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				vParent.EscapeExpression = scalarExpression;
			}
		}

		// Token: 0x06001B48 RID: 6984 RVA: 0x00103EAC File Offset: 0x001020AC
		public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ScalarExpression scalarExpression = null;
			scalarExpression = this.expressionBinaryPri1(expressionFlags);
			for (;;)
			{
				int num = this.LA(1);
				if (num != 190)
				{
					switch (num)
					{
					case 197:
					{
						this.match(197);
						ScalarExpression scalarExpression2 = this.expressionBinaryPri1(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.Add);
						}
						break;
					}
					case 198:
						return scalarExpression;
					case 199:
					{
						this.match(199);
						ScalarExpression scalarExpression2 = this.expressionBinaryPri1(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.Subtract);
						}
						break;
					}
					default:
						switch (num)
						{
						case 209:
						{
							this.match(209);
							ScalarExpression scalarExpression2 = this.expressionBinaryPri1(expressionFlags);
							if (this.inputState.guessing == 0)
							{
								base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.BitwiseXor);
								continue;
							}
							continue;
						}
						case 210:
						{
							this.match(210);
							ScalarExpression scalarExpression2 = this.expressionBinaryPri1(expressionFlags);
							if (this.inputState.guessing == 0)
							{
								base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.BitwiseOr);
								continue;
							}
							continue;
						}
						}
						return scalarExpression;
					}
				}
				else
				{
					this.match(190);
					ScalarExpression scalarExpression2 = this.expressionBinaryPri1(expressionFlags);
					if (this.inputState.guessing == 0)
					{
						base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.BitwiseAnd);
					}
				}
			}
			return scalarExpression;
		}

		// Token: 0x06001B49 RID: 6985 RVA: 0x00103FFC File Offset: 0x001021FC
		public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ScalarExpression scalarExpression = null;
			scalarExpression = this.expressionUnary(expressionFlags);
			for (;;)
			{
				int num = this.LA(1);
				if (num != 189)
				{
					if (num != 195)
					{
						if (num != 201)
						{
							break;
						}
						this.match(201);
						ScalarExpression scalarExpression2 = this.expressionUnary(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.Divide);
						}
					}
					else
					{
						this.match(195);
						ScalarExpression scalarExpression2 = this.expressionUnary(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.Multiply);
						}
					}
				}
				else
				{
					this.match(189);
					ScalarExpression scalarExpression2 = this.expressionUnary(expressionFlags);
					if (this.inputState.guessing == 0)
					{
						base.AddBinaryExpression(ref scalarExpression, scalarExpression2, BinaryExpressionType.Modulo);
					}
				}
			}
			return scalarExpression;
		}

		// Token: 0x06001B4A RID: 6986 RVA: 0x001040C4 File Offset: 0x001022C4
		public ScalarExpression expressionUnary(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ScalarExpression scalarExpression = null;
			UnaryExpression unaryExpression = null;
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_02D2;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_02D2;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_02D2;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_02D2;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_02D2;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_02D2;
					default:
						goto IL_02D2;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
					break;
				case 198:
					goto IL_02D2;
				case 200:
					goto IL_02C8;
				default:
					switch (num)
					{
					case 211:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_02D2;
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_02C8;
					default:
						goto IL_02D2;
					}
					break;
				}
				int num2 = this.LA(1);
				switch (num2)
				{
				case 197:
				{
					IToken token = this.LT(1);
					this.match(197);
					if (this.inputState.guessing == 0)
					{
						unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
						TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
						unaryExpression.UnaryExpressionType = UnaryExpressionType.Positive;
						goto IL_02A4;
					}
					goto IL_02A4;
				}
				case 198:
					break;
				case 199:
				{
					IToken token2 = this.LT(1);
					this.match(199);
					if (this.inputState.guessing == 0)
					{
						unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
						TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token2);
						unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
						goto IL_02A4;
					}
					goto IL_02A4;
				}
				default:
					if (num2 == 211)
					{
						IToken token3 = this.LT(1);
						this.match(211);
						if (this.inputState.guessing == 0)
						{
							unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
							TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token3);
							unaryExpression.UnaryExpressionType = UnaryExpressionType.BitwiseNot;
							goto IL_02A4;
						}
						goto IL_02A4;
					}
					break;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_02A4:
				ScalarExpression scalarExpression2 = this.expressionUnary(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					scalarExpression = unaryExpression;
					unaryExpression.Expression = scalarExpression2;
					return scalarExpression;
				}
				return scalarExpression;
			}
			IL_02C8:
			return this.expressionWithClrElements(expressionFlags);
			IL_02D2:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B4B RID: 6987 RVA: 0x001043B8 File Offset: 0x001025B8
		public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ExpressionCallTarget expressionCallTarget = null;
			bool flag = false;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_140_.member(this.LA(2)))
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.schemaObjectTwoPartName();
					this.match(203);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			PrimaryExpression primaryExpression;
			if (flag)
			{
				primaryExpression = this.udtExpression();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_141_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_142_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				primaryExpression = this.expressionPrimary(expressionFlags);
			}
			while (this.LA(1) == 200)
			{
				this.match(200);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					expressionCallTarget = base.FragmentFactory.CreateFragment<ExpressionCallTarget>();
					expressionCallTarget.Expression = primaryExpression;
				}
				bool flag2 = false;
				if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_102_.member(this.LA(2)))
				{
					int num2 = this.mark();
					flag2 = true;
					this.inputState.guessing++;
					try
					{
						this.match(191);
					}
					catch (RecognitionException)
					{
						flag2 = false;
					}
					this.rewind(num2);
					this.inputState.guessing--;
				}
				if (flag2)
				{
					FunctionCall functionCall = this.expressionWithClrElementsFunctionCallPart();
					if (this.inputState.guessing == 0)
					{
						functionCall.CallTarget = expressionCallTarget;
						functionCall.FunctionName = identifier;
						primaryExpression = functionCall;
					}
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_143_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.inputState.guessing == 0)
					{
						UserDefinedTypePropertyAccess userDefinedTypePropertyAccess = base.FragmentFactory.CreateFragment<UserDefinedTypePropertyAccess>();
						userDefinedTypePropertyAccess.CallTarget = expressionCallTarget;
						userDefinedTypePropertyAccess.PropertyName = identifier;
						primaryExpression = userDefinedTypePropertyAccess;
					}
				}
			}
			return primaryExpression;
		}

		// Token: 0x06001B4C RID: 6988 RVA: 0x0010461C File Offset: 0x0010281C
		public PrimaryExpression udtExpression()
		{
			UserDefinedTypeCallTarget userDefinedTypeCallTarget = this.userDefinedTypeCallTarget();
			bool flag = false;
			if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 191)
			{
				int num = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.identifier();
					this.match(191);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(num);
				this.inputState.guessing--;
			}
			PrimaryExpression primaryExpression;
			if (flag)
			{
				primaryExpression = this.udtFunctionExpression(userDefinedTypeCallTarget);
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || !TSql90ParserInternal.tokenSet_143_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				primaryExpression = this.udtPropertyExpression(userDefinedTypeCallTarget);
			}
			return primaryExpression;
		}

		// Token: 0x06001B4D RID: 6989 RVA: 0x00104718 File Offset: 0x00102918
		public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			PrimaryExpression primaryExpression = null;
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num == 20)
					{
						primaryExpression = this.caseExpression(expressionFlags);
						goto IL_02FF;
					}
					if (num == 25)
					{
						primaryExpression = this.coalesceExpression(expressionFlags);
						goto IL_02FF;
					}
					if (num != 34)
					{
						goto IL_00FD;
					}
					primaryExpression = this.convertCall();
					goto IL_02FF;
				}
				else
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num == 93)
						{
							primaryExpression = this.leftFunctionCall();
							goto IL_02FF;
						}
						if (num != 101)
						{
							goto IL_00FD;
						}
						primaryExpression = this.nullIfExpression(expressionFlags);
						goto IL_02FF;
					}
				}
			}
			else if (num <= 147)
			{
				if (num == 133)
				{
					primaryExpression = this.rightFunctionCall();
					goto IL_02FF;
				}
				if (num != 141 && num != 147)
				{
					goto IL_00FD;
				}
			}
			else if (num != 163)
			{
				if (num == 191)
				{
					primaryExpression = this.paranthesisDisambiguatorForExpressions(expressionFlags);
					goto IL_02FF;
				}
				if (num == 235)
				{
					this.odbcInitiator();
					goto IL_02FF;
				}
				goto IL_00FD;
			}
			primaryExpression = this.parameterlessCall();
			goto IL_02FF;
			IL_00FD:
			if (this.LA(1) == 193 && this.LA(2) == 232 && this.LA(1) == 193 && base.NextTokenMatches("FN", 2))
			{
				primaryExpression = this.odbcFunctionCall();
			}
			else if (TSql90ParserInternal.tokenSet_144_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_145_.member(this.LA(2)))
			{
				primaryExpression = this.literal();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CAST") && this.LA(2) == 191)
			{
				primaryExpression = this.castCall();
			}
			else
			{
				bool flag = false;
				if (this.LA(1) == 232 && this.LA(2) == 191)
				{
					int num2 = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.match(232);
						this.match(191);
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(num2);
					this.inputState.guessing--;
				}
				if (flag)
				{
					primaryExpression = this.builtInFunctionCall();
				}
				else if ((this.LA(1) == 228 || this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 200 && (((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 200 && this.LA(3) == 228) || this.LA(1) == 228))
				{
					primaryExpression = this.partitionFunctionCall();
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_31_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_145_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					primaryExpression = this.columnOrFunctionCall();
				}
			}
			IL_02FF:
			this.collationOpt(primaryExpression);
			return primaryExpression;
		}

		// Token: 0x06001B4E RID: 6990 RVA: 0x00104A3C File Offset: 0x00102C3C
		public FunctionCall expressionWithClrElementsFunctionCallPart()
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			return functionCall;
		}

		// Token: 0x06001B4F RID: 6991 RVA: 0x00104A64 File Offset: 0x00102C64
		public CastCall castCall()
		{
			CastCall castCall = base.FragmentFactory.CreateFragment<CastCall>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			this.match(9);
			DataTypeReference dataTypeReference = this.scalarDataType();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CAST");
				TSql80ParserBaseInternal.UpdateTokenInfo(castCall, token);
				castCall.DataType = dataTypeReference;
				castCall.Parameter = scalarExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(castCall, token2);
			}
			return castCall;
		}

		// Token: 0x06001B50 RID: 6992 RVA: 0x00104B00 File Offset: 0x00102D00
		public FunctionCall builtInFunctionCall()
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			Identifier identifier = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				functionCall.FunctionName = identifier;
			}
			this.match(191);
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num != 20)
							{
								goto IL_01D1;
							}
							goto IL_01BF;
						}
					}
					else
					{
						if (num != 25 && num != 34)
						{
							goto IL_01D1;
						}
						goto IL_01BF;
					}
				}
				else if (num <= 51)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_01BF;
					default:
						if (num != 51)
						{
							goto IL_01D1;
						}
						break;
					}
				}
				else
				{
					if (num != 81 && num != 93)
					{
						goto IL_01D1;
					}
					goto IL_01BF;
				}
				this.aggregateBuiltInFunctionCall(functionCall);
				return functionCall;
			}
			if (num <= 141)
			{
				if (num <= 133)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_01D1;
						}
						break;
					}
				}
				else if (num != 136 && num != 141)
				{
					goto IL_01D1;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_01D1;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 192:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					break;
				case 194:
				case 196:
				case 198:
					goto IL_01D1;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_01D1;
					default:
						goto IL_01D1;
					}
					break;
				}
			}
			IL_01BF:
			this.regularBuiltInFunctionCall(functionCall);
			return functionCall;
			IL_01D1:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B51 RID: 6993 RVA: 0x00104CF4 File Offset: 0x00102EF4
		public LeftFunctionCall leftFunctionCall()
		{
			LeftFunctionCall leftFunctionCall = base.FragmentFactory.CreateFragment<LeftFunctionCall>();
			IToken token = this.LT(1);
			this.match(93);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(leftFunctionCall, token);
			}
			this.reservedBuiltInFunctionCallParameters(leftFunctionCall, leftFunctionCall.Parameters);
			return leftFunctionCall;
		}

		// Token: 0x06001B52 RID: 6994 RVA: 0x00104D44 File Offset: 0x00102F44
		public RightFunctionCall rightFunctionCall()
		{
			RightFunctionCall rightFunctionCall = base.FragmentFactory.CreateFragment<RightFunctionCall>();
			IToken token = this.LT(1);
			this.match(133);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rightFunctionCall, token);
			}
			this.reservedBuiltInFunctionCallParameters(rightFunctionCall, rightFunctionCall.Parameters);
			return rightFunctionCall;
		}

		// Token: 0x06001B53 RID: 6995 RVA: 0x00104D94 File Offset: 0x00102F94
		public PartitionFunctionCall partitionFunctionCall()
		{
			PartitionFunctionCall partitionFunctionCall = base.FragmentFactory.CreateFragment<PartitionFunctionCall>();
			int num = this.LA(1);
			Identifier identifier;
			if (num != 228)
			{
				switch (num)
				{
				case 232:
				case 233:
					identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						partitionFunctionCall.DatabaseName = identifier;
					}
					this.match(200);
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			IToken token = this.LT(1);
			this.match(228);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(partitionFunctionCall, token);
			}
			this.match(200);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				partitionFunctionCall.FunctionName = identifier;
			}
			this.match(191);
			this.expressionList(partitionFunctionCall, partitionFunctionCall.Parameters);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(partitionFunctionCall, token2);
			}
			return partitionFunctionCall;
		}

		// Token: 0x06001B54 RID: 6996 RVA: 0x00104EA4 File Offset: 0x001030A4
		public PrimaryExpression columnOrFunctionCall()
		{
			PrimaryExpression primaryExpression = null;
			MultiPartIdentifier multiPartIdentifier = null;
			ColumnReferenceExpression columnReferenceExpression = null;
			int num = this.LA(1);
			if (num <= 136)
			{
				if (num != 81 && num != 136)
				{
					goto IL_014D;
				}
			}
			else
			{
				if (num != 200)
				{
					if (num == 227)
					{
						goto IL_012B;
					}
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_014D;
					}
				}
				multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.LA(1) == 200 && (this.LA(2) == 81 || this.LA(2) == 136 || this.LA(2) == 227))
				{
					if (this.inputState.guessing == 0)
					{
						columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
					}
					this.match(200);
					this.specialColumn(columnReferenceExpression);
					goto IL_0160;
				}
				if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_146_.member(this.LA(2)))
				{
					primaryExpression = this.userFunctionCall(multiPartIdentifier);
					goto IL_0160;
				}
				if (!TSql90ParserInternal.tokenSet_145_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				goto IL_0160;
			}
			IL_012B:
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			}
			this.specialColumn(columnReferenceExpression);
			goto IL_0160;
			IL_014D:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0160:
			if (this.inputState.guessing == 0 && (primaryExpression == null || primaryExpression is ColumnReferenceExpression))
			{
				if (columnReferenceExpression == null)
				{
					columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
				}
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
				primaryExpression = columnReferenceExpression;
			}
			return primaryExpression;
		}

		// Token: 0x06001B55 RID: 6997 RVA: 0x00105050 File Offset: 0x00103250
		public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			NullIfExpression nullIfExpression = base.FragmentFactory.CreateFragment<NullIfExpression>();
			IToken token = this.LT(1);
			this.match(101);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(nullIfExpression, token);
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				nullIfExpression.FirstExpression = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				nullIfExpression.SecondExpression = scalarExpression;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(nullIfExpression, token2);
			}
			return nullIfExpression;
		}

		// Token: 0x06001B56 RID: 6998 RVA: 0x00105108 File Offset: 0x00103308
		public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			CoalesceExpression coalesceExpression = base.FragmentFactory.CreateFragment<CoalesceExpression>();
			IToken token = this.LT(1);
			this.match(25);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(coalesceExpression, token);
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(coalesceExpression, coalesceExpression.Expressions, scalarExpression);
			}
			int num = 0;
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.expression(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(coalesceExpression, coalesceExpression.Expressions, scalarExpression);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(coalesceExpression, token2);
			}
			return coalesceExpression;
		}

		// Token: 0x06001B57 RID: 6999 RVA: 0x00105200 File Offset: 0x00103400
		public CaseExpression caseExpression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			IToken token = this.LT(1);
			this.match(20);
			int num = this.LA(1);
			CaseExpression caseExpression;
			if (num <= 133)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_01DA;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_01DA;
						}
					}
				}
				else if (num <= 93)
				{
					if (num != 81 && num != 93)
					{
						goto IL_01DA;
					}
				}
				else
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_01DA;
						}
						break;
					}
				}
			}
			else if (num <= 163)
			{
				if (num <= 141)
				{
					if (num != 136 && num != 141)
					{
						goto IL_01DA;
					}
				}
				else if (num != 147 && num != 163)
				{
					goto IL_01DA;
				}
			}
			else if (num <= 193)
			{
				if (num == 168)
				{
					caseExpression = this.searchedCaseExpression(expressionFlags);
					goto IL_01ED;
				}
				switch (num)
				{
				case 191:
				case 193:
					break;
				case 192:
					goto IL_01DA;
				default:
					goto IL_01DA;
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_01DA;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_01DA;
					default:
						goto IL_01DA;
					}
					break;
				}
			}
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			caseExpression = this.simpleCaseExpression(scalarExpression, expressionFlags);
			goto IL_01ED;
			IL_01DA:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_01ED:
			switch (this.LA(1))
			{
			case 55:
				this.match(55);
				scalarExpression = this.expression(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					caseExpression.ElseExpression = scalarExpression;
				}
				break;
			case 56:
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(56);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(caseExpression, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(caseExpression, token2);
			}
			return caseExpression;
		}

		// Token: 0x06001B58 RID: 7000 RVA: 0x0010547C File Offset: 0x0010367C
		public ConvertCall convertCall()
		{
			ConvertCall convertCall = base.FragmentFactory.CreateFragment<ConvertCall>();
			IToken token = this.LT(1);
			this.match(34);
			this.match(191);
			DataTypeReference dataTypeReference = this.scalarDataType();
			this.match(198);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(convertCall, token);
				convertCall.DataType = dataTypeReference;
				convertCall.Parameter = scalarExpression;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					convertCall.Style = scalarExpression;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(convertCall, token2);
			}
			return convertCall;
		}

		// Token: 0x06001B59 RID: 7001 RVA: 0x00105574 File Offset: 0x00103774
		public ParameterlessCall parameterlessCall()
		{
			ParameterlessCall parameterlessCall = base.FragmentFactory.CreateFragment<ParameterlessCall>();
			int num = this.LA(1);
			if (num <= 141)
			{
				switch (num)
				{
				case 40:
				{
					IToken token = this.LT(1);
					this.match(40);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token);
						parameterlessCall.ParameterlessCallType = ParameterlessCallType.CurrentTimestamp;
						return parameterlessCall;
					}
					return parameterlessCall;
				}
				case 41:
				{
					IToken token2 = this.LT(1);
					this.match(41);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token2);
						parameterlessCall.ParameterlessCallType = ParameterlessCallType.CurrentUser;
						return parameterlessCall;
					}
					return parameterlessCall;
				}
				default:
					if (num == 141)
					{
						IToken token3 = this.LT(1);
						this.match(141);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token3);
							parameterlessCall.ParameterlessCallType = ParameterlessCallType.SessionUser;
							return parameterlessCall;
						}
						return parameterlessCall;
					}
					break;
				}
			}
			else if (num != 147)
			{
				if (num == 163)
				{
					IToken token4 = this.LT(1);
					this.match(163);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token4);
						parameterlessCall.ParameterlessCallType = ParameterlessCallType.User;
						return parameterlessCall;
					}
					return parameterlessCall;
				}
			}
			else
			{
				IToken token5 = this.LT(1);
				this.match(147);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token5);
					parameterlessCall.ParameterlessCallType = ParameterlessCallType.SystemUser;
					return parameterlessCall;
				}
				return parameterlessCall;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001B5A RID: 7002 RVA: 0x001056F8 File Offset: 0x001038F8
		public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			ParenthesisExpression parenthesisExpression = base.FragmentFactory.CreateFragment<ParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token);
				parenthesisExpression.Expression = scalarExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token2);
			}
			return parenthesisExpression;
		}

		// Token: 0x06001B5B RID: 7003 RVA: 0x00105768 File Offset: 0x00103968
		public UserDefinedTypeCallTarget userDefinedTypeCallTarget()
		{
			UserDefinedTypeCallTarget userDefinedTypeCallTarget = base.FragmentFactory.CreateFragment<UserDefinedTypeCallTarget>();
			SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
			IToken token = this.LT(1);
			this.match(203);
			if (this.inputState.guessing == 0)
			{
				userDefinedTypeCallTarget.SchemaObjectName = schemaObjectName;
				TSql80ParserBaseInternal.UpdateTokenInfo(userDefinedTypeCallTarget, token);
			}
			return userDefinedTypeCallTarget;
		}

		// Token: 0x06001B5C RID: 7004 RVA: 0x001057BC File Offset: 0x001039BC
		public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget)
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				functionCall.CallTarget = vCallTarget;
				functionCall.FunctionName = identifier;
			}
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			return functionCall;
		}

		// Token: 0x06001B5D RID: 7005 RVA: 0x00105808 File Offset: 0x00103A08
		public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget)
		{
			UserDefinedTypePropertyAccess userDefinedTypePropertyAccess = base.FragmentFactory.CreateFragment<UserDefinedTypePropertyAccess>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				userDefinedTypePropertyAccess.CallTarget = vCallTarget;
				userDefinedTypePropertyAccess.PropertyName = identifier;
			}
			return userDefinedTypePropertyAccess;
		}

		// Token: 0x06001B5E RID: 7006 RVA: 0x00105844 File Offset: 0x00103A44
		public FunctionCall basicFunctionCall()
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				functionCall.FunctionName = identifier;
			}
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			return functionCall;
		}

		// Token: 0x06001B5F RID: 7007 RVA: 0x00105888 File Offset: 0x00103A88
		public OverClause overClause()
		{
			OverClause overClause = this.overClauseBeginning();
			int num = this.LA(1);
			if (num != 113)
			{
				if (num != 192)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				OrderByClause orderByClause = this.orderByClause();
				if (this.inputState.guessing == 0)
				{
					overClause.OrderByClause = orderByClause;
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
			}
			return overClause;
		}

		// Token: 0x06001B60 RID: 7008 RVA: 0x00105910 File Offset: 0x00103B10
		public OverClause overClauseBeginning()
		{
			OverClause overClause = base.FragmentFactory.CreateFragment<OverClause>();
			IToken token = this.LT(1);
			this.match(115);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
			}
			this.match(191);
			int num = this.LA(1);
			if (num != 113 && num != 192)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "PARTITION");
				}
				this.match(18);
				this.expressionList(overClause, overClause.Partitions);
			}
			return overClause;
		}

		// Token: 0x06001B61 RID: 7009 RVA: 0x001059D0 File Offset: 0x00103BD0
		public OverClause overClauseNoOrderBy()
		{
			OverClause overClause = this.overClauseBeginning();
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
			}
			return overClause;
		}

		// Token: 0x06001B62 RID: 7010 RVA: 0x00105A10 File Offset: 0x00103C10
		public void regularBuiltInFunctionCall(FunctionCall vParent)
		{
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_019B;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_019B;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_019B;
					}
				}
			}
			else if (num <= 141)
			{
				if (num != 133 && num != 136 && num != 141)
				{
					goto IL_019B;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_019B;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_01AE;
				case 194:
				case 196:
				case 198:
					goto IL_019B;
				case 195:
				{
					ColumnReferenceExpression columnReferenceExpression = this.starColumnReferenceExpression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.Parameters, columnReferenceExpression);
						goto IL_01AE;
					}
					goto IL_01AE;
				}
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_019B;
					default:
						goto IL_019B;
					}
					break;
				}
			}
			this.expressionList(vParent, vParent.Parameters);
			goto IL_01AE;
			IL_019B:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_01AE:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			if (this.LA(1) == 115)
			{
				OverClause overClause = this.overClause();
				if (this.inputState.guessing == 0)
				{
					vParent.OverClause = overClause;
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_145_.member(this.LA(1)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001B63 RID: 7011 RVA: 0x00105C40 File Offset: 0x00103E40
		public void aggregateBuiltInFunctionCall(FunctionCall vParent)
		{
			IToken token = null;
			UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out token);
			ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				vParent.UniqueRowFilter = uniqueRowFilter;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.Parameters, scalarExpression);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			if (this.LA(1) == 115)
			{
				OverClause overClause = this.overClauseNoOrderBy();
				if (this.inputState.guessing == 0)
				{
					vParent.OverClause = overClause;
					TSql90ParserBaseInternal.CheckForDistinctInWindowedAggregate(vParent, token);
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_145_.member(this.LA(1)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001B64 RID: 7012 RVA: 0x00105CF4 File Offset: 0x00103EF4
		public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList<ScalarExpression> parameters)
		{
			this.match(191);
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_017E;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_017E;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_017E;
					}
				}
			}
			else if (num <= 141)
			{
				if (num != 133 && num != 136 && num != 141)
				{
					goto IL_017E;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_017E;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_0191;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_017E;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_017E;
					default:
						goto IL_017E;
					}
					break;
				}
			}
			this.expressionList(vParent, parameters);
			goto IL_0191;
			IL_017E:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_0191:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06001B65 RID: 7013 RVA: 0x00105EBC File Offset: 0x001040BC
		public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			SimpleWhenClause simpleWhenClause = base.FragmentFactory.CreateFragment<SimpleWhenClause>();
			IToken token = this.LT(1);
			this.match(168);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleWhenClause, token);
			}
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				simpleWhenClause.WhenExpression = scalarExpression;
			}
			this.match(150);
			scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				simpleWhenClause.ThenExpression = scalarExpression;
			}
			return simpleWhenClause;
		}

		// Token: 0x06001B66 RID: 7014 RVA: 0x00105F44 File Offset: 0x00104144
		public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			SearchedWhenClause searchedWhenClause = base.FragmentFactory.CreateFragment<SearchedWhenClause>();
			IToken token = this.LT(1);
			this.match(168);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(searchedWhenClause, token);
			}
			BooleanExpression booleanExpression = this.booleanExpression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				searchedWhenClause.WhenExpression = booleanExpression;
			}
			this.match(150);
			ScalarExpression scalarExpression = this.expression(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				searchedWhenClause.ThenExpression = scalarExpression;
			}
			return searchedWhenClause;
		}

		// Token: 0x06001B67 RID: 7015 RVA: 0x00105FD0 File Offset: 0x001041D0
		public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			SimpleCaseExpression simpleCaseExpression = base.FragmentFactory.CreateFragment<SimpleCaseExpression>();
			simpleCaseExpression.InputExpression = inputExpression;
			int num = 0;
			while (this.LA(1) == 168)
			{
				SimpleWhenClause simpleWhenClause = this.simpleWhenClause(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SimpleWhenClause>(simpleCaseExpression, simpleCaseExpression.WhenClauses, simpleWhenClause);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return simpleCaseExpression;
		}

		// Token: 0x06001B68 RID: 7016 RVA: 0x00106044 File Offset: 0x00104244
		public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags = ExpressionFlags.None)
		{
			SearchedCaseExpression searchedCaseExpression = base.FragmentFactory.CreateFragment<SearchedCaseExpression>();
			int num = 0;
			while (this.LA(1) == 168)
			{
				SearchedWhenClause searchedWhenClause = this.searchedWhenClause(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SearchedWhenClause>(searchedCaseExpression, searchedCaseExpression.WhenClauses, searchedWhenClause);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return searchedCaseExpression;
		}

		// Token: 0x06001B69 RID: 7017 RVA: 0x001060B0 File Offset: 0x001042B0
		public void specialColumn(ColumnReferenceExpression vResult)
		{
			int num = this.LA(1);
			if (num != 81)
			{
				if (num != 136)
				{
					if (num != 227)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(227);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
						vResult.ColumnType = PseudoColumnHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
						return;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(136);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token2);
						vResult.ColumnType = ColumnType.RowGuidCol;
						return;
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(81);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token3);
					vResult.ColumnType = ColumnType.IdentityCol;
					return;
				}
			}
		}

		// Token: 0x06001B6A RID: 7018 RVA: 0x00106190 File Offset: 0x00104390
		public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers)
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			IToken token = null;
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				base.PutIdentifiersIntoFunctionCall(functionCall, vIdentifiers);
			}
			int num = this.LA(1);
			if (num <= 81)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num != 20)
							{
								goto IL_03C9;
							}
							goto IL_01DF;
						}
					}
					else
					{
						if (num != 25 && num != 34)
						{
							goto IL_03C9;
						}
						goto IL_01DF;
					}
				}
				else if (num <= 47)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_01DF;
					default:
						if (num != 47)
						{
							goto IL_03C9;
						}
						goto IL_01DF;
					}
				}
				else if (num != 51)
				{
					if (num != 81)
					{
						goto IL_03C9;
					}
					goto IL_01DF;
				}
				UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out token);
				ScalarExpression scalarExpression = this.expression(ExpressionFlags.None);
				if (this.inputState.guessing == 0)
				{
					functionCall.UniqueRowFilter = uniqueRowFilter;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(functionCall, functionCall.Parameters, scalarExpression);
					goto IL_03DC;
				}
				goto IL_03DC;
			}
			else if (num <= 136)
			{
				if (num <= 101)
				{
					if (num != 93)
					{
						switch (num)
						{
						case 100:
						case 101:
							break;
						default:
							goto IL_03C9;
						}
					}
				}
				else if (num != 133 && num != 136)
				{
					goto IL_03C9;
				}
			}
			else if (num <= 147)
			{
				if (num != 141 && num != 147)
				{
					goto IL_03C9;
				}
			}
			else if (num != 163)
			{
				switch (num)
				{
				case 191:
				case 192:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_03C9;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_03C9;
					default:
						goto IL_03C9;
					}
					break;
				}
			}
			IL_01DF:
			int num2 = this.LA(1);
			if (num2 <= 93)
			{
				if (num2 <= 34)
				{
					if (num2 != 20 && num2 != 25 && num2 != 34)
					{
						goto IL_0380;
					}
				}
				else if (num2 <= 47)
				{
					switch (num2)
					{
					case 40:
					case 41:
						break;
					default:
						if (num2 != 47)
						{
							goto IL_0380;
						}
						break;
					}
				}
				else if (num2 != 81 && num2 != 93)
				{
					goto IL_0380;
				}
			}
			else if (num2 <= 141)
			{
				if (num2 <= 133)
				{
					switch (num2)
					{
					case 100:
					case 101:
						break;
					default:
						if (num2 != 133)
						{
							goto IL_0380;
						}
						break;
					}
				}
				else if (num2 != 136 && num2 != 141)
				{
					goto IL_0380;
				}
			}
			else if (num2 <= 163)
			{
				if (num2 != 147 && num2 != 163)
				{
					goto IL_0380;
				}
			}
			else
			{
				switch (num2)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_03DC;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_0380;
				default:
					switch (num2)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_0380;
					default:
						goto IL_0380;
					}
					break;
				}
			}
			this.expressionWithDefaultList(functionCall, functionCall.Parameters);
			goto IL_03DC;
			IL_0380:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_03C9:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_03DC:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(functionCall, token2);
			}
			if (this.LA(1) == 115)
			{
				OverClause overClause = this.overClauseNoOrderBy();
				if (this.inputState.guessing == 0)
				{
					functionCall.OverClause = overClause;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_145_.member(this.LA(1)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return functionCall;
		}

		// Token: 0x06001B6B RID: 7019 RVA: 0x001065F0 File Offset: 0x001047F0
		public SchemaObjectNameOrValueExpression objectOrVariable()
		{
			SchemaObjectNameOrValueExpression schemaObjectNameOrValueExpression = base.FragmentFactory.CreateFragment<SchemaObjectNameOrValueExpression>();
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
				{
					VariableReference variableReference = this.variable();
					if (this.inputState.guessing == 0)
					{
						schemaObjectNameOrValueExpression.ValueExpression = variableReference;
						return schemaObjectNameOrValueExpression;
					}
					return schemaObjectNameOrValueExpression;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				schemaObjectNameOrValueExpression.SchemaObjectName = schemaObjectName;
			}
			return schemaObjectNameOrValueExpression;
		}

		// Token: 0x06001B6C RID: 7020 RVA: 0x00106684 File Offset: 0x00104884
		public MoneyLiteral moneyLiteral()
		{
			MoneyLiteral moneyLiteral = base.FragmentFactory.CreateFragment<MoneyLiteral>();
			IToken token = this.LT(1);
			this.match(225);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(moneyLiteral, token);
				moneyLiteral.Value = token.getText();
			}
			return moneyLiteral;
		}

		// Token: 0x06001B6D RID: 7021 RVA: 0x001066D4 File Offset: 0x001048D4
		public ValueExpression globalVariableOrVariableReference()
		{
			ValueExpression valueExpression = null;
			IToken token = this.LT(1);
			this.match(234);
			if (this.inputState.guessing == 0)
			{
				if (token.getText().StartsWith("@@", 4))
				{
					GlobalVariableExpression globalVariableExpression = base.FragmentFactory.CreateFragment<GlobalVariableExpression>();
					globalVariableExpression.Name = token.getText();
					valueExpression = globalVariableExpression;
				}
				else
				{
					VariableReference variableReference = base.FragmentFactory.CreateFragment<VariableReference>();
					variableReference.Name = token.getText();
					valueExpression = variableReference;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(valueExpression, token);
			}
			return valueExpression;
		}

		// Token: 0x06001B6E RID: 7022 RVA: 0x00106758 File Offset: 0x00104958
		public OdbcLiteral odbcLiteral()
		{
			OdbcLiteral odbcLiteral = base.FragmentFactory.CreateFragment<OdbcLiteral>();
			IToken token = this.LT(1);
			this.match(193);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			switch (this.LA(1))
			{
			case 230:
			{
				IToken token3 = this.LT(1);
				this.match(230);
				if (this.inputState.guessing == 0)
				{
					odbcLiteral.OdbcLiteralType = TSql80ParserBaseInternal.ParseOdbcLiteralType(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token3);
					odbcLiteral.Value = TSql80ParserBaseInternal.DecodeAsciiStringLiteral(token3.getText());
				}
				break;
			}
			case 231:
			{
				IToken token4 = this.LT(1);
				this.match(231);
				if (this.inputState.guessing == 0)
				{
					odbcLiteral.OdbcLiteralType = TSql80ParserBaseInternal.ParseOdbcLiteralType(token2);
					odbcLiteral.IsNational = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token4);
					odbcLiteral.Value = TSql80ParserBaseInternal.DecodeUnicodeStringLiteral(token4.getText());
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token5 = this.LT(1);
			this.match(194);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token5);
			}
			return odbcLiteral;
		}

		// Token: 0x06001B6F RID: 7023 RVA: 0x001068B0 File Offset: 0x00104AB0
		private void initializeFactory()
		{
		}

		// Token: 0x06001B70 RID: 7024 RVA: 0x001068B4 File Offset: 0x00104AB4
		private static long[] mk_tokenSet_0_()
		{
			long[] array = new long[8];
			array[0] = 3585973655481528914L;
			array[1] = -1675334557835686887L;
			array[2] = -9209407656945396390L;
			array[3] = 6322594533441L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B71 RID: 7025 RVA: 0x0010690C File Offset: 0x00104B0C
		private static long[] mk_tokenSet_1_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -1134907106097364993L;
			array[3] = 17437434049535L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B72 RID: 7026 RVA: 0x00106958 File Offset: 0x00104B58
		private static long[] mk_tokenSet_2_()
		{
			long[] array = new long[8];
			array[0] = 3585973655481528914L;
			array[1] = -1675334557835686887L;
			array[2] = -9209407519506442918L;
			array[3] = 6322594533441L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B73 RID: 7027 RVA: 0x001069B0 File Offset: 0x00104BB0
		private static long[] mk_tokenSet_3_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261264L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099780063232L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B74 RID: 7028 RVA: 0x00106A38 File Offset: 0x00104C38
		private static long[] mk_tokenSet_4_()
		{
			return new long[] { 140737488355328L, 216172782113784320L, 275012127232L, 0L, 0L, 0L };
		}

		// Token: 0x06001B75 RID: 7029 RVA: 0x00106A58 File Offset: 0x00104C58
		private static long[] mk_tokenSet_5_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261266L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 7696984047872L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B76 RID: 7030 RVA: 0x00106AB0 File Offset: 0x00104CB0
		private static long[] mk_tokenSet_6_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 35029619577258L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B77 RID: 7031 RVA: 0x00106AFC File Offset: 0x00104CFC
		private static long[] mk_tokenSet_7_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 7696581394688L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001B78 RID: 7032 RVA: 0x00106B40 File Offset: 0x00104D40
		private static long[] mk_tokenSet_8_()
		{
			long[] array = new long[8];
			array[0] = 3549944857319616594L;
			array[1] = 7530023046149835777L;
			array[2] = -9209548396581235622L;
			array[3] = 26130446815618L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B79 RID: 7033 RVA: 0x00106B98 File Offset: 0x00104D98
		private static long[] mk_tokenSet_9_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261266L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914280960L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B7A RID: 7034 RVA: 0x00106BF0 File Offset: 0x00104DF0
		private static long[] mk_tokenSet_10_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437433532842L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B7B RID: 7035 RVA: 0x00106C70 File Offset: 0x00104E70
		private static long[] mk_tokenSet_11_()
		{
			return new long[] { 16777216L, 17180917760L, 2147483648L, 0L, 0L, 0L };
		}

		// Token: 0x06001B7C RID: 7036 RVA: 0x00106C90 File Offset: 0x00104E90
		private static long[] mk_tokenSet_12_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 8796093022208L;
			array[2] = long.MinValue;
			array[3] = 7696581394688L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B7D RID: 7037 RVA: 0x00106D10 File Offset: 0x00104F10
		private static long[] mk_tokenSet_13_()
		{
			return new long[] { 281474976710656L, 4194304L, -9223363236466782208L, 0L, 0L, 0L };
		}

		// Token: 0x06001B7E RID: 7038 RVA: 0x00106D30 File Offset: 0x00104F30
		private static long[] mk_tokenSet_14_()
		{
			long[] array = new long[8];
			array[0] = 2255115563040800L;
			array[1] = 2313579177083008L;
			array[2] = -9223372002477723360L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B7F RID: 7039 RVA: 0x00106D88 File Offset: 0x00104F88
		private static long[] mk_tokenSet_15_()
		{
			long[] array = new long[8];
			array[0] = 2048L;
			array[1] = 1048576L;
			array[2] = 34359740416L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B80 RID: 7040 RVA: 0x00106DD8 File Offset: 0x00104FD8
		private static long[] mk_tokenSet_16_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B81 RID: 7041 RVA: 0x00106E30 File Offset: 0x00105030
		private static long[] mk_tokenSet_17_()
		{
			long[] array = new long[8];
			array[0] = 140737488355328L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 8537858113666L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B82 RID: 7042 RVA: 0x00106E80 File Offset: 0x00105080
		private static long[] mk_tokenSet_18_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9209548396581235622L;
			array[3] = 1112262332480L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B83 RID: 7043 RVA: 0x00106ED8 File Offset: 0x001050D8
		private static long[] mk_tokenSet_19_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B84 RID: 7044 RVA: 0x00106F30 File Offset: 0x00105130
		private static long[] mk_tokenSet_20_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530025176453614593L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B85 RID: 7045 RVA: 0x00106F88 File Offset: 0x00105188
		private static long[] mk_tokenSet_21_()
		{
			long[] array = new long[8];
			array[0] = 9011597301252608L;
			array[1] = 4294967296L;
			array[2] = 0L;
			array[3] = 3298534883328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B86 RID: 7046 RVA: 0x00106FD8 File Offset: 0x001051D8
		private static long[] mk_tokenSet_22_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 618475290880L;
			array[2] = 0L;
			array[3] = 8537858113666L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B87 RID: 7047 RVA: 0x00107020 File Offset: 0x00105220
		private static long[] mk_tokenSet_23_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261264L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099780067328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B88 RID: 7048 RVA: 0x00107078 File Offset: 0x00105278
		private static long[] mk_tokenSet_24_()
		{
			long[] array = new long[8];
			array[0] = 8796093022208L;
			array[1] = 0L;
			array[2] = 100663296L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B89 RID: 7049 RVA: 0x001070C4 File Offset: 0x001052C4
		private static long[] mk_tokenSet_25_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = 0L;
			array[3] = 7696581394432L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B8A RID: 7050 RVA: 0x0010710C File Offset: 0x0010530C
		private static long[] mk_tokenSet_26_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 7697118265472L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001B8B RID: 7051 RVA: 0x00107150 File Offset: 0x00105350
		private static long[] mk_tokenSet_27_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1100451156992L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B8C RID: 7052 RVA: 0x001071A8 File Offset: 0x001053A8
		private static long[] mk_tokenSet_28_()
		{
			long[] array = new long[8];
			array[0] = 32L;
			array[1] = 1048576L;
			array[2] = 128L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B8D RID: 7053 RVA: 0x001071F4 File Offset: 0x001053F4
		private static long[] mk_tokenSet_29_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -9223372002477727456L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B8E RID: 7054 RVA: 0x0010724C File Offset: 0x0010544C
		private static long[] mk_tokenSet_30_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530023046149966849L;
			array[2] = -9209548396581235366L;
			array[3] = 8560272478464L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B8F RID: 7055 RVA: 0x001072A4 File Offset: 0x001054A4
		private static long[] mk_tokenSet_31_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 131072L;
			array[2] = 256L;
			array[3] = 3332894621952L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B90 RID: 7056 RVA: 0x001072F0 File Offset: 0x001054F0
		private static long[] mk_tokenSet_32_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 7700876361984L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001B91 RID: 7057 RVA: 0x00107334 File Offset: 0x00105534
		private static long[] mk_tokenSet_33_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 5226975199232L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B92 RID: 7058 RVA: 0x0010737C File Offset: 0x0010557C
		private static long[] mk_tokenSet_34_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 825170591872L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001B93 RID: 7059 RVA: 0x001073C0 File Offset: 0x001055C0
		private static long[] mk_tokenSet_35_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225746L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B94 RID: 7060 RVA: 0x00107418 File Offset: 0x00105618
		private static long[] mk_tokenSet_36_()
		{
			long[] array = new long[8];
			array[0] = -16L;
			array[1] = -2199023257729L;
			array[2] = 18012199477837823L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B95 RID: 7061 RVA: 0x00107468 File Offset: 0x00105668
		private static long[] mk_tokenSet_37_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030875554L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B96 RID: 7062 RVA: 0x001074C0 File Offset: 0x001056C0
		private static long[] mk_tokenSet_38_()
		{
			long[] array = new long[8];
			array[0] = 3585836232666689618L;
			array[1] = 7530023184125791233L;
			array[2] = -2292018235068254854L;
			array[3] = 17437433928618L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B97 RID: 7063 RVA: 0x00107518 File Offset: 0x00105718
		private static long[] mk_tokenSet_39_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 3298937540608L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B98 RID: 7064 RVA: 0x00107570 File Offset: 0x00105770
		private static long[] mk_tokenSet_40_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 8537858113667L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B99 RID: 7065 RVA: 0x001075B8 File Offset: 0x001057B8
		private static long[] mk_tokenSet_41_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285120L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B9A RID: 7066 RVA: 0x00107610 File Offset: 0x00105810
		private static long[] mk_tokenSet_42_()
		{
			long[] array = new long[8];
			array[0] = 3585832916917334610L;
			array[1] = 7530022977430359049L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B9B RID: 7067 RVA: 0x00107668 File Offset: 0x00105868
		private static long[] mk_tokenSet_43_()
		{
			long[] array = new long[8];
			array[0] = 4451790753032763090L;
			array[1] = -1668717695120654951L;
			array[2] = -1137405643984874118L;
			array[3] = 8521618289663L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B9C RID: 7068 RVA: 0x001076C0 File Offset: 0x001058C0
		private static long[] mk_tokenSet_44_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396572847014L;
			array[3] = 1099914301504L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B9D RID: 7069 RVA: 0x00107718 File Offset: 0x00105918
		private static long[] mk_tokenSet_45_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396572847014L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B9E RID: 7070 RVA: 0x00107770 File Offset: 0x00105970
		private static long[] mk_tokenSet_46_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359169L;
			array[2] = -9209548396572847014L;
			array[3] = 1099914285120L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001B9F RID: 7071 RVA: 0x001077C8 File Offset: 0x001059C8
		private static long[] mk_tokenSet_47_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359169L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914301504L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BA0 RID: 7072 RVA: 0x00107820 File Offset: 0x00105A20
		private static long[] mk_tokenSet_48_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359169L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BA1 RID: 7073 RVA: 0x00107878 File Offset: 0x00105A78
		private static long[] mk_tokenSet_49_()
		{
			long[] array = new long[8];
			array[0] = 9007199254740992L;
			array[1] = 4294967296L;
			array[2] = 0L;
			array[3] = 3298534883328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BA2 RID: 7074 RVA: 0x001078C8 File Offset: 0x00105AC8
		private static long[] mk_tokenSet_50_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 103079215104L;
			array[2] = 0L;
			array[3] = 65L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BA3 RID: 7075 RVA: 0x0010790C File Offset: 0x00105B0C
		private static long[] mk_tokenSet_51_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 8537858113666L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BA4 RID: 7076 RVA: 0x00107954 File Offset: 0x00105B54
		private static long[] mk_tokenSet_52_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 1111859658817L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BA5 RID: 7077 RVA: 0x00107998 File Offset: 0x00105B98
		private static long[] mk_tokenSet_53_()
		{
			long[] array = new long[8];
			array[0] = 18014398509482064L;
			for (int i = 1; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 1099511627776L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BA6 RID: 7078 RVA: 0x001079E8 File Offset: 0x00105BE8
		private static long[] mk_tokenSet_54_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359049L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BA7 RID: 7079 RVA: 0x00107A40 File Offset: 0x00105C40
		private static long[] mk_tokenSet_55_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850227794L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BA8 RID: 7080 RVA: 0x00107A98 File Offset: 0x00105C98
		private static long[] mk_tokenSet_56_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977564576769L;
			array[2] = -9209548396581235622L;
			array[3] = 4128403099648L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BA9 RID: 7081 RVA: 0x00107AF0 File Offset: 0x00105CF0
		private static long[] mk_tokenSet_57_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225746L;
			array[1] = 7530022977430359049L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BAA RID: 7082 RVA: 0x00107B48 File Offset: 0x00105D48
		private static long[] mk_tokenSet_58_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 3298937540864L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BAB RID: 7083 RVA: 0x00107BA0 File Offset: 0x00105DA0
		private static long[] mk_tokenSet_59_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437433532906L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BAC RID: 7084 RVA: 0x00107C20 File Offset: 0x00105E20
		private static long[] mk_tokenSet_60_()
		{
			return new long[] { 562984313159680L, 2048L, 16L, 0L, 0L, 0L };
		}

		// Token: 0x06001BAD RID: 7085 RVA: 0x00107C40 File Offset: 0x00105E40
		private static long[] mk_tokenSet_61_()
		{
			long[] array = new long[8];
			array[0] = -16L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437299315114L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BAE RID: 7086 RVA: 0x00107C8C File Offset: 0x00105E8C
		private static long[] mk_tokenSet_62_()
		{
			long[] array = new long[8];
			array[0] = 2255115563040800L;
			array[1] = 206695464960L;
			array[2] = -9223372002477723360L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BAF RID: 7087 RVA: 0x00107CE4 File Offset: 0x00105EE4
		private static long[] mk_tokenSet_63_()
		{
			long[] array = new long[8];
			array[0] = 8704L;
			array[1] = 0L;
			array[2] = 140737488355336L;
			array[3] = 64L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BB0 RID: 7088 RVA: 0x00107D2C File Offset: 0x00105F2C
		private static long[] mk_tokenSet_64_()
		{
			long[] array = new long[8];
			array[0] = -16L;
			array[1] = -2199023257729L;
			array[2] = 18012199477837823L;
			array[3] = 1099511629824L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BB1 RID: 7089 RVA: 0x00107D7C File Offset: 0x00105F7C
		private static long[] mk_tokenSet_65_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = -9223372036846387200L;
			array[3] = 3298534883584L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BB2 RID: 7090 RVA: 0x00107DC8 File Offset: 0x00105FC8
		private static long[] mk_tokenSet_66_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714935491585L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BB3 RID: 7091 RVA: 0x00107E20 File Offset: 0x00106020
		private static long[] mk_tokenSet_67_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977447136257L;
			array[2] = -9209548396581235622L;
			array[3] = 3298937540608L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BB4 RID: 7092 RVA: 0x00107E78 File Offset: 0x00106078
		private static long[] mk_tokenSet_68_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = 0L;
			array[3] = 4398583382144L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BB5 RID: 7093 RVA: 0x00107EC0 File Offset: 0x001060C0
		private static long[] mk_tokenSet_69_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 3298937540928L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BB6 RID: 7094 RVA: 0x00107F18 File Offset: 0x00106118
		private static long[] mk_tokenSet_70_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675334557835686895L;
			array[2] = -9209548394433751718L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BB7 RID: 7095 RVA: 0x00107F70 File Offset: 0x00106170
		private static long[] mk_tokenSet_71_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437433532907L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BB8 RID: 7096 RVA: 0x00107FBC File Offset: 0x001061BC
		private static long[] mk_tokenSet_72_()
		{
			long[] array = new long[8];
			array[0] = 262144L;
			for (int i = 1; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883584L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BB9 RID: 7097 RVA: 0x00108008 File Offset: 0x00106208
		private static long[] mk_tokenSet_73_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996370L;
			array[1] = 7531854764416711945L;
			array[2] = -9207857346623974278L;
			array[3] = 1099914285125L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BBA RID: 7098 RVA: 0x00108060 File Offset: 0x00106260
		private static long[] mk_tokenSet_74_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -1134907106097364993L;
			array[3] = 17437434051583L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BBB RID: 7099 RVA: 0x001080AC File Offset: 0x001062AC
		private static long[] mk_tokenSet_75_()
		{
			long[] array = new long[8];
			array[0] = 577023736616583170L;
			array[1] = 8390664L;
			array[2] = 8797166764048L;
			array[3] = 134221825L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BBC RID: 7100 RVA: 0x001080FC File Offset: 0x001062FC
		private static long[] mk_tokenSet_76_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883592L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BBD RID: 7101 RVA: 0x00108140 File Offset: 0x00106340
		private static long[] mk_tokenSet_77_()
		{
			long[] array = new long[8];
			array[0] = 577023736616583170L;
			array[1] = 562949961824392L;
			array[2] = 10996190019600L;
			array[3] = 3298669105473L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BBE RID: 7102 RVA: 0x00108198 File Offset: 0x00106398
		private static long[] mk_tokenSet_78_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695464960L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030875554L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BBF RID: 7103 RVA: 0x001081F0 File Offset: 0x001063F0
		private static long[] mk_tokenSet_79_()
		{
			long[] array = new long[8];
			array[0] = 577027052433048066L;
			array[1] = 563156657256584L;
			array[2] = -2305830879151771344L;
			array[3] = 17437165509611L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BC0 RID: 7104 RVA: 0x00108248 File Offset: 0x00106448
		private static long[] mk_tokenSet_80_()
		{
			long[] array = new long[8];
			array[0] = 4162293669690519634L;
			array[1] = 7530726664880532489L;
			array[2] = -9209548395507493798L;
			array[3] = 1099914285057L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BC1 RID: 7105 RVA: 0x001082A0 File Offset: 0x001064A0
		private static long[] mk_tokenSet_81_()
		{
			long[] array = new long[8];
			array[0] = 4162293669690519634L;
			array[1] = 7530726664897313929L;
			array[2] = -9209546196484238246L;
			array[3] = 3298937540929L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BC2 RID: 7106 RVA: 0x001082F8 File Offset: 0x001064F8
		private static long[] mk_tokenSet_82_()
		{
			long[] array = new long[8];
			array[0] = 4162296985506984530L;
			array[1] = 7530726871592746121L;
			array[2] = -2292016034971257478L;
			array[3] = 17437433945067L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BC3 RID: 7107 RVA: 0x00108350 File Offset: 0x00106550
		private static long[] mk_tokenSet_83_()
		{
			long[] array = new long[8];
			array[0] = 4162296985506984530L;
			array[1] = 7530726871592746121L;
			array[2] = -2292016034971257478L;
			array[3] = 17437433928683L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BC4 RID: 7108 RVA: 0x001083A8 File Offset: 0x001065A8
		private static long[] mk_tokenSet_84_()
		{
			long[] array = new long[8];
			array[0] = 512L;
			for (int i = 1; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 4123168604160L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BC5 RID: 7109 RVA: 0x001083F4 File Offset: 0x001065F4
		private static long[] mk_tokenSet_85_()
		{
			long[] array = new long[8];
			array[0] = 4162293669690519634L;
			array[1] = 7530726664897313929L;
			array[2] = -9209546196484238246L;
			array[3] = 4123571261505L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BC6 RID: 7110 RVA: 0x0010844C File Offset: 0x0010664C
		private static long[] mk_tokenSet_86_()
		{
			long[] array = new long[8];
			array[0] = 4162293669690519634L;
			array[1] = 7530726664897313929L;
			array[2] = -9209546196484238246L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BC7 RID: 7111 RVA: 0x001084A4 File Offset: 0x001066A4
		private static long[] mk_tokenSet_87_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714935491713L;
			array[2] = -9209546128838503334L;
			array[3] = 3298937540928L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BC8 RID: 7112 RVA: 0x001084FC File Offset: 0x001066FC
		private static long[] mk_tokenSet_88_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BC9 RID: 7113 RVA: 0x00108554 File Offset: 0x00106754
		private static long[] mk_tokenSet_89_()
		{
			long[] array = new long[8];
			array[0] = 3585976970155045458L;
			array[1] = 7530163921630923905L;
			array[2] = -2292015967325522566L;
			array[3] = 17437433928682L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BCA RID: 7114 RVA: 0x001085AC File Offset: 0x001067AC
		private static long[] mk_tokenSet_90_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714935491713L;
			array[2] = -9209546128838503334L;
			array[3] = 4123571261504L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BCB RID: 7115 RVA: 0x00108604 File Offset: 0x00106804
		private static long[] mk_tokenSet_91_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714935491713L;
			array[2] = -9209546128838503334L;
			array[3] = 1099914285120L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BCC RID: 7116 RVA: 0x0010865C File Offset: 0x0010685C
		private static long[] mk_tokenSet_92_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437433534890L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BCD RID: 7117 RVA: 0x001086A8 File Offset: 0x001068A8
		private static long[] mk_tokenSet_93_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996882L;
			array[1] = 7531854764416728329L;
			array[2] = -9207857346623974278L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BCE RID: 7118 RVA: 0x00108730 File Offset: 0x00106930
		private static long[] mk_tokenSet_94_()
		{
			return new long[] { 68719476736L, 1125900512919808L, 1688849860263968L, 0L, 0L, 0L };
		}

		// Token: 0x06001BCF RID: 7119 RVA: 0x00108750 File Offset: 0x00106950
		private static long[] mk_tokenSet_95_()
		{
			long[] array = new long[8];
			array[0] = 4294967296L;
			array[1] = 131941395333184L;
			array[2] = long.MinValue;
			array[3] = 7696581396736L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BD0 RID: 7120 RVA: 0x001087A8 File Offset: 0x001069A8
		private static long[] mk_tokenSet_96_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996882L;
			array[1] = 7531854764416728329L;
			array[2] = -9205605546810289030L;
			array[3] = 3298937540933L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BD1 RID: 7121 RVA: 0x00108800 File Offset: 0x00106A00
		private static long[] mk_tokenSet_97_()
		{
			long[] array = new long[8];
			array[0] = 3315816464384L;
			array[1] = 206695432192L;
			array[2] = -2305841875341790944L;
			array[3] = 17437031271403L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BD2 RID: 7122 RVA: 0x00108888 File Offset: 0x00106A88
		private static long[] mk_tokenSet_98_()
		{
			return new long[] { 68719476736L, 1125900512919808L, 32L, 0L, 0L, 0L };
		}

		// Token: 0x06001BD3 RID: 7123 RVA: 0x001088A8 File Offset: 0x00106AA8
		private static long[] mk_tokenSet_99_()
		{
			long[] array = new long[8];
			array[0] = 68719477248L;
			array[1] = 1125900512936192L;
			array[2] = -9221111440948064224L;
			array[3] = 3298534883584L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BD4 RID: 7124 RVA: 0x00108900 File Offset: 0x00106B00
		private static long[] mk_tokenSet_100_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996882L;
			array[1] = 7531854764416711945L;
			array[2] = -9207857346623974278L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BD5 RID: 7125 RVA: 0x00108958 File Offset: 0x00106B58
		private static long[] mk_tokenSet_101_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996882L;
			array[1] = 7531854764416728329L;
			array[2] = -9205605546810289030L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BD6 RID: 7126 RVA: 0x001089B0 File Offset: 0x00106BB0
		private static long[] mk_tokenSet_102_()
		{
			long[] array = new long[8];
			array[0] = 144053237710848L;
			array[1] = 206695432192L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030875555L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BD7 RID: 7127 RVA: 0x00108A08 File Offset: 0x00106C08
		private static long[] mk_tokenSet_103_()
		{
			long[] array = new long[8];
			array[0] = 4162434475898351698L;
			array[1] = 7531854764416712073L;
			array[2] = -9207857277904497542L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BD8 RID: 7128 RVA: 0x00108A60 File Offset: 0x00106C60
		private static long[] mk_tokenSet_104_()
		{
			long[] array = new long[8];
			array[0] = 4162434475898351698L;
			array[1] = 7531854764416712073L;
			array[2] = -9207857277904497542L;
			array[3] = 1099914285125L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BD9 RID: 7129 RVA: 0x00108AB8 File Offset: 0x00106CB8
		private static long[] mk_tokenSet_105_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714918714497L;
			array[2] = -9209546128838503334L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BDA RID: 7130 RVA: 0x00108B10 File Offset: 0x00106D10
		private static long[] mk_tokenSet_106_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714497L;
			array[2] = -9209546197557980070L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BDB RID: 7131 RVA: 0x00108B68 File Offset: 0x00106D68
		private static long[] mk_tokenSet_107_()
		{
			long[] array = new long[8];
			array[0] = 4611689336324227072L;
			array[1] = 241055170592L;
			array[2] = -9223371997662666464L;
			array[3] = 17437030875554L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BDC RID: 7132 RVA: 0x00108BC0 File Offset: 0x00106DC0
		private static long[] mk_tokenSet_108_()
		{
			long[] array = new long[8];
			array[0] = 3458905251308896256L;
			array[1] = 0L;
			array[2] = -9223371968135294976L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BDD RID: 7133 RVA: 0x00108C10 File Offset: 0x00106E10
		private static long[] mk_tokenSet_109_()
		{
			long[] array = new long[8];
			array[0] = 2255115563040800L;
			array[1] = 9002788487168L;
			array[2] = -9223371933758246624L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BDE RID: 7134 RVA: 0x00108C68 File Offset: 0x00106E68
		private static long[] mk_tokenSet_110_()
		{
			long[] array = new long[6];
			array[0] = 3458905251308896256L;
			array[2] = -9223371968135294976L;
			return array;
		}

		// Token: 0x06001BDF RID: 7135 RVA: 0x00108C98 File Offset: 0x00106E98
		private static long[] mk_tokenSet_111_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534899968L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BE0 RID: 7136 RVA: 0x00108CDC File Offset: 0x00106EDC
		private static long[] mk_tokenSet_112_()
		{
			long[] array = new long[8];
			array[0] = 3585836232666689618L;
			array[1] = 7530163921614146689L;
			array[2] = -2292016036044999302L;
			array[3] = 17437433928682L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BE1 RID: 7137 RVA: 0x00108D34 File Offset: 0x00106F34
		private static long[] mk_tokenSet_113_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 1; i++)
			{
				array[i] = 0L;
			}
			array[2] = long.MinValue;
			array[3] = 3298534883584L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BE2 RID: 7138 RVA: 0x00108D84 File Offset: 0x00106F84
		private static long[] mk_tokenSet_114_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714918714497L;
			array[2] = -9209546128838503334L;
			array[3] = 3298937540864L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BE3 RID: 7139 RVA: 0x00108DDC File Offset: 0x00106FDC
		private static long[] mk_tokenSet_115_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 1064960L;
			array[2] = 0L;
			array[3] = 1099511627840L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BE4 RID: 7140 RVA: 0x00108E24 File Offset: 0x00107024
		private static long[] mk_tokenSet_116_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996370L;
			array[1] = 7531854764416711945L;
			array[2] = -9207857346623974278L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BE5 RID: 7141 RVA: 0x00108E7C File Offset: 0x0010707C
		private static long[] mk_tokenSet_117_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996370L;
			array[1] = 7531854764416728329L;
			array[2] = -9205605546810289030L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BE6 RID: 7142 RVA: 0x00108ED4 File Offset: 0x001070D4
		private static long[] mk_tokenSet_118_()
		{
			long[] array = new long[8];
			array[0] = 4162293669153648722L;
			array[1] = 7530163714927102977L;
			array[2] = -9209548395507493798L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BE7 RID: 7143 RVA: 0x00108F2C File Offset: 0x0010712C
		private static long[] mk_tokenSet_119_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 9570149275275264L;
			array[2] = 1073741824L;
			array[3] = 1099511627841L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BE8 RID: 7144 RVA: 0x00108F78 File Offset: 0x00107178
		private static long[] mk_tokenSet_120_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261266L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 7696984051968L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BE9 RID: 7145 RVA: 0x00109000 File Offset: 0x00107200
		private static long[] mk_tokenSet_121_()
		{
			return new long[] { 281474976710656L, 274882101248L, 4294967296L, 0L, 0L, 0L };
		}

		// Token: 0x06001BEA RID: 7146 RVA: 0x00109020 File Offset: 0x00107220
		private static long[] mk_tokenSet_122_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = 0L;
			array[3] = 3298534883648L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BEB RID: 7147 RVA: 0x00109068 File Offset: 0x00107268
		private static long[] mk_tokenSet_123_()
		{
			long[] array = new long[8];
			array[0] = 3315816464896L;
			array[1] = 206695432320L;
			array[2] = -2305841875341790944L;
			array[3] = 17437031271402L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BEC RID: 7148 RVA: 0x001090C0 File Offset: 0x001072C0
		private static long[] mk_tokenSet_124_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 8796093022208L;
			array[2] = 0L;
			array[3] = 7696581394688L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BED RID: 7149 RVA: 0x00109108 File Offset: 0x00107308
		private static long[] mk_tokenSet_125_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163783638191105L;
			array[2] = -9209548396581235622L;
			array[3] = 26130446815618L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BEE RID: 7150 RVA: 0x00109160 File Offset: 0x00107360
		private static long[] mk_tokenSet_126_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9209548396581235622L;
			array[3] = 1112262316097L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BEF RID: 7151 RVA: 0x001091B8 File Offset: 0x001073B8
		private static long[] mk_tokenSet_127_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BF0 RID: 7152 RVA: 0x00109210 File Offset: 0x00107410
		private static long[] mk_tokenSet_128_()
		{
			long[] array = new long[8];
			array[0] = 140738564194304L;
			array[1] = 18014398509482000L;
			array[2] = (long)((ulong)int.MinValue);
			array[3] = 3298534883328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BF1 RID: 7153 RVA: 0x00109264 File Offset: 0x00107464
		private static long[] mk_tokenSet_129_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675334557835719663L;
			array[2] = -9209548394433751974L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BF2 RID: 7154 RVA: 0x001092F0 File Offset: 0x001074F0
		private static long[] mk_tokenSet_130_()
		{
			return new long[] { 140738564194304L, -9205357535266078704L, 2147483648L, 0L, 0L, 0L };
		}

		// Token: 0x06001BF3 RID: 7155 RVA: 0x00109310 File Offset: 0x00107510
		private static long[] mk_tokenSet_131_()
		{
			long[] array = new long[8];
			array[0] = 3585973655481528402L;
			array[1] = -1675334557835686895L;
			array[2] = -9209548256994798246L;
			array[3] = 3298937540929L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BF4 RID: 7156 RVA: 0x00109368 File Offset: 0x00107568
		private static long[] mk_tokenSet_132_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 1610612896L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BF5 RID: 7157 RVA: 0x001093A8 File Offset: 0x001075A8
		private static long[] mk_tokenSet_133_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675332358812431343L;
			array[2] = -9209548394433751718L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BF6 RID: 7158 RVA: 0x00109400 File Offset: 0x00107600
		private static long[] mk_tokenSet_134_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BF7 RID: 7159 RVA: 0x00109458 File Offset: 0x00107658
		private static long[] mk_tokenSet_135_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437433532843L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BF8 RID: 7160 RVA: 0x001094A4 File Offset: 0x001076A4
		private static long[] mk_tokenSet_136_()
		{
			long[] array = new long[8];
			array[0] = 3315816480768L;
			array[1] = 242162991104L;
			array[2] = -1152920370734943968L;
			array[3] = 17437031394234L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BF9 RID: 7161 RVA: 0x001094FC File Offset: 0x001076FC
		private static long[] mk_tokenSet_137_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883585L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BFA RID: 7162 RVA: 0x00109540 File Offset: 0x00107740
		private static long[] mk_tokenSet_138_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883649L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BFB RID: 7163 RVA: 0x00109584 File Offset: 0x00107784
		private static long[] mk_tokenSet_139_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883648L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BFC RID: 7164 RVA: 0x001095C8 File Offset: 0x001077C8
		private static long[] mk_tokenSet_140_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534885632L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001BFD RID: 7165 RVA: 0x0010960C File Offset: 0x0010780C
		private static long[] mk_tokenSet_141_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030351106L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BFE RID: 7166 RVA: 0x00109664 File Offset: 0x00107864
		private static long[] mk_tokenSet_142_()
		{
			long[] array = new long[8];
			array[0] = 4451794068849227474L;
			array[1] = -1668717557681570407L;
			array[2] = -1137405609624603270L;
			array[3] = 17437434049535L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001BFF RID: 7167 RVA: 0x001096BC File Offset: 0x001078BC
		private static long[] mk_tokenSet_143_()
		{
			long[] array = new long[8];
			array[0] = 4451790753032763090L;
			array[1] = -1668717695120654951L;
			array[2] = -1137405643984874118L;
			array[3] = 4123571778559L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001C00 RID: 7168 RVA: 0x00109714 File Offset: 0x00107914
		private static long[] mk_tokenSet_144_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 5239323230210L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001C01 RID: 7169 RVA: 0x0010975C File Offset: 0x0010795C
		private static long[] mk_tokenSet_145_()
		{
			long[] array = new long[8];
			array[0] = 4451790753099871954L;
			array[1] = -1668717695120654951L;
			array[2] = -1137405643984874118L;
			array[3] = 4123571778559L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001C02 RID: 7170 RVA: 0x001097B4 File Offset: 0x001079B4
		private static long[] mk_tokenSet_146_()
		{
			long[] array = new long[8];
			array[0] = 2395853051396128L;
			array[1] = 206695432192L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030875555L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x04001556 RID: 5462
		public const int EOF = 1;

		// Token: 0x04001557 RID: 5463
		public const int NULL_TREE_LOOKAHEAD = 3;

		// Token: 0x04001558 RID: 5464
		public const int Add = 4;

		// Token: 0x04001559 RID: 5465
		public const int All = 5;

		// Token: 0x0400155A RID: 5466
		public const int Alter = 6;

		// Token: 0x0400155B RID: 5467
		public const int And = 7;

		// Token: 0x0400155C RID: 5468
		public const int Any = 8;

		// Token: 0x0400155D RID: 5469
		public const int As = 9;

		// Token: 0x0400155E RID: 5470
		public const int Asc = 10;

		// Token: 0x0400155F RID: 5471
		public const int Authorization = 11;

		// Token: 0x04001560 RID: 5472
		public const int Backup = 12;

		// Token: 0x04001561 RID: 5473
		public const int Begin = 13;

		// Token: 0x04001562 RID: 5474
		public const int Between = 14;

		// Token: 0x04001563 RID: 5475
		public const int Break = 15;

		// Token: 0x04001564 RID: 5476
		public const int Browse = 16;

		// Token: 0x04001565 RID: 5477
		public const int Bulk = 17;

		// Token: 0x04001566 RID: 5478
		public const int By = 18;

		// Token: 0x04001567 RID: 5479
		public const int Cascade = 19;

		// Token: 0x04001568 RID: 5480
		public const int Case = 20;

		// Token: 0x04001569 RID: 5481
		public const int Check = 21;

		// Token: 0x0400156A RID: 5482
		public const int Checkpoint = 22;

		// Token: 0x0400156B RID: 5483
		public const int Close = 23;

		// Token: 0x0400156C RID: 5484
		public const int Clustered = 24;

		// Token: 0x0400156D RID: 5485
		public const int Coalesce = 25;

		// Token: 0x0400156E RID: 5486
		public const int Collate = 26;

		// Token: 0x0400156F RID: 5487
		public const int Column = 27;

		// Token: 0x04001570 RID: 5488
		public const int Commit = 28;

		// Token: 0x04001571 RID: 5489
		public const int Compute = 29;

		// Token: 0x04001572 RID: 5490
		public const int Constraint = 30;

		// Token: 0x04001573 RID: 5491
		public const int Contains = 31;

		// Token: 0x04001574 RID: 5492
		public const int ContainsTable = 32;

		// Token: 0x04001575 RID: 5493
		public const int Continue = 33;

		// Token: 0x04001576 RID: 5494
		public const int Convert = 34;

		// Token: 0x04001577 RID: 5495
		public const int Create = 35;

		// Token: 0x04001578 RID: 5496
		public const int Cross = 36;

		// Token: 0x04001579 RID: 5497
		public const int Current = 37;

		// Token: 0x0400157A RID: 5498
		public const int CurrentDate = 38;

		// Token: 0x0400157B RID: 5499
		public const int CurrentTime = 39;

		// Token: 0x0400157C RID: 5500
		public const int CurrentTimestamp = 40;

		// Token: 0x0400157D RID: 5501
		public const int CurrentUser = 41;

		// Token: 0x0400157E RID: 5502
		public const int Cursor = 42;

		// Token: 0x0400157F RID: 5503
		public const int Database = 43;

		// Token: 0x04001580 RID: 5504
		public const int Dbcc = 44;

		// Token: 0x04001581 RID: 5505
		public const int Deallocate = 45;

		// Token: 0x04001582 RID: 5506
		public const int Declare = 46;

		// Token: 0x04001583 RID: 5507
		public const int Default = 47;

		// Token: 0x04001584 RID: 5508
		public const int Delete = 48;

		// Token: 0x04001585 RID: 5509
		public const int Deny = 49;

		// Token: 0x04001586 RID: 5510
		public const int Desc = 50;

		// Token: 0x04001587 RID: 5511
		public const int Distinct = 51;

		// Token: 0x04001588 RID: 5512
		public const int Distributed = 52;

		// Token: 0x04001589 RID: 5513
		public const int Double = 53;

		// Token: 0x0400158A RID: 5514
		public const int Drop = 54;

		// Token: 0x0400158B RID: 5515
		public const int Else = 55;

		// Token: 0x0400158C RID: 5516
		public const int End = 56;

		// Token: 0x0400158D RID: 5517
		public const int Errlvl = 57;

		// Token: 0x0400158E RID: 5518
		public const int Escape = 58;

		// Token: 0x0400158F RID: 5519
		public const int Except = 59;

		// Token: 0x04001590 RID: 5520
		public const int Exec = 60;

		// Token: 0x04001591 RID: 5521
		public const int Execute = 61;

		// Token: 0x04001592 RID: 5522
		public const int Exists = 62;

		// Token: 0x04001593 RID: 5523
		public const int Exit = 63;

		// Token: 0x04001594 RID: 5524
		public const int Fetch = 64;

		// Token: 0x04001595 RID: 5525
		public const int File = 65;

		// Token: 0x04001596 RID: 5526
		public const int FillFactor = 66;

		// Token: 0x04001597 RID: 5527
		public const int For = 67;

		// Token: 0x04001598 RID: 5528
		public const int Foreign = 68;

		// Token: 0x04001599 RID: 5529
		public const int FreeText = 69;

		// Token: 0x0400159A RID: 5530
		public const int FreeTextTable = 70;

		// Token: 0x0400159B RID: 5531
		public const int From = 71;

		// Token: 0x0400159C RID: 5532
		public const int Full = 72;

		// Token: 0x0400159D RID: 5533
		public const int Function = 73;

		// Token: 0x0400159E RID: 5534
		public const int GoTo = 74;

		// Token: 0x0400159F RID: 5535
		public const int Grant = 75;

		// Token: 0x040015A0 RID: 5536
		public const int Group = 76;

		// Token: 0x040015A1 RID: 5537
		public const int Having = 77;

		// Token: 0x040015A2 RID: 5538
		public const int HoldLock = 78;

		// Token: 0x040015A3 RID: 5539
		public const int Identity = 79;

		// Token: 0x040015A4 RID: 5540
		public const int IdentityInsert = 80;

		// Token: 0x040015A5 RID: 5541
		public const int IdentityColumn = 81;

		// Token: 0x040015A6 RID: 5542
		public const int If = 82;

		// Token: 0x040015A7 RID: 5543
		public const int In = 83;

		// Token: 0x040015A8 RID: 5544
		public const int Index = 84;

		// Token: 0x040015A9 RID: 5545
		public const int Inner = 85;

		// Token: 0x040015AA RID: 5546
		public const int Insert = 86;

		// Token: 0x040015AB RID: 5547
		public const int Intersect = 87;

		// Token: 0x040015AC RID: 5548
		public const int Into = 88;

		// Token: 0x040015AD RID: 5549
		public const int Is = 89;

		// Token: 0x040015AE RID: 5550
		public const int Join = 90;

		// Token: 0x040015AF RID: 5551
		public const int Key = 91;

		// Token: 0x040015B0 RID: 5552
		public const int Kill = 92;

		// Token: 0x040015B1 RID: 5553
		public const int Left = 93;

		// Token: 0x040015B2 RID: 5554
		public const int Like = 94;

		// Token: 0x040015B3 RID: 5555
		public const int LineNo = 95;

		// Token: 0x040015B4 RID: 5556
		public const int National = 96;

		// Token: 0x040015B5 RID: 5557
		public const int NoCheck = 97;

		// Token: 0x040015B6 RID: 5558
		public const int NonClustered = 98;

		// Token: 0x040015B7 RID: 5559
		public const int Not = 99;

		// Token: 0x040015B8 RID: 5560
		public const int Null = 100;

		// Token: 0x040015B9 RID: 5561
		public const int NullIf = 101;

		// Token: 0x040015BA RID: 5562
		public const int Of = 102;

		// Token: 0x040015BB RID: 5563
		public const int Off = 103;

		// Token: 0x040015BC RID: 5564
		public const int Offsets = 104;

		// Token: 0x040015BD RID: 5565
		public const int On = 105;

		// Token: 0x040015BE RID: 5566
		public const int Open = 106;

		// Token: 0x040015BF RID: 5567
		public const int OpenDataSource = 107;

		// Token: 0x040015C0 RID: 5568
		public const int OpenQuery = 108;

		// Token: 0x040015C1 RID: 5569
		public const int OpenRowSet = 109;

		// Token: 0x040015C2 RID: 5570
		public const int OpenXml = 110;

		// Token: 0x040015C3 RID: 5571
		public const int Option = 111;

		// Token: 0x040015C4 RID: 5572
		public const int Or = 112;

		// Token: 0x040015C5 RID: 5573
		public const int Order = 113;

		// Token: 0x040015C6 RID: 5574
		public const int Outer = 114;

		// Token: 0x040015C7 RID: 5575
		public const int Over = 115;

		// Token: 0x040015C8 RID: 5576
		public const int Percent = 116;

		// Token: 0x040015C9 RID: 5577
		public const int Plan = 117;

		// Token: 0x040015CA RID: 5578
		public const int Primary = 118;

		// Token: 0x040015CB RID: 5579
		public const int Print = 119;

		// Token: 0x040015CC RID: 5580
		public const int Proc = 120;

		// Token: 0x040015CD RID: 5581
		public const int Procedure = 121;

		// Token: 0x040015CE RID: 5582
		public const int Public = 122;

		// Token: 0x040015CF RID: 5583
		public const int Raiserror = 123;

		// Token: 0x040015D0 RID: 5584
		public const int Read = 124;

		// Token: 0x040015D1 RID: 5585
		public const int ReadText = 125;

		// Token: 0x040015D2 RID: 5586
		public const int Reconfigure = 126;

		// Token: 0x040015D3 RID: 5587
		public const int References = 127;

		// Token: 0x040015D4 RID: 5588
		public const int Replication = 128;

		// Token: 0x040015D5 RID: 5589
		public const int Restore = 129;

		// Token: 0x040015D6 RID: 5590
		public const int Restrict = 130;

		// Token: 0x040015D7 RID: 5591
		public const int Return = 131;

		// Token: 0x040015D8 RID: 5592
		public const int Revoke = 132;

		// Token: 0x040015D9 RID: 5593
		public const int Right = 133;

		// Token: 0x040015DA RID: 5594
		public const int Rollback = 134;

		// Token: 0x040015DB RID: 5595
		public const int RowCount = 135;

		// Token: 0x040015DC RID: 5596
		public const int RowGuidColumn = 136;

		// Token: 0x040015DD RID: 5597
		public const int Rule = 137;

		// Token: 0x040015DE RID: 5598
		public const int Save = 138;

		// Token: 0x040015DF RID: 5599
		public const int Schema = 139;

		// Token: 0x040015E0 RID: 5600
		public const int Select = 140;

		// Token: 0x040015E1 RID: 5601
		public const int SessionUser = 141;

		// Token: 0x040015E2 RID: 5602
		public const int Set = 142;

		// Token: 0x040015E3 RID: 5603
		public const int SetUser = 143;

		// Token: 0x040015E4 RID: 5604
		public const int Shutdown = 144;

		// Token: 0x040015E5 RID: 5605
		public const int Some = 145;

		// Token: 0x040015E6 RID: 5606
		public const int Statistics = 146;

		// Token: 0x040015E7 RID: 5607
		public const int SystemUser = 147;

		// Token: 0x040015E8 RID: 5608
		public const int Table = 148;

		// Token: 0x040015E9 RID: 5609
		public const int TextSize = 149;

		// Token: 0x040015EA RID: 5610
		public const int Then = 150;

		// Token: 0x040015EB RID: 5611
		public const int To = 151;

		// Token: 0x040015EC RID: 5612
		public const int Top = 152;

		// Token: 0x040015ED RID: 5613
		public const int Tran = 153;

		// Token: 0x040015EE RID: 5614
		public const int Transaction = 154;

		// Token: 0x040015EF RID: 5615
		public const int Trigger = 155;

		// Token: 0x040015F0 RID: 5616
		public const int Truncate = 156;

		// Token: 0x040015F1 RID: 5617
		public const int TSEqual = 157;

		// Token: 0x040015F2 RID: 5618
		public const int Union = 158;

		// Token: 0x040015F3 RID: 5619
		public const int Unique = 159;

		// Token: 0x040015F4 RID: 5620
		public const int Update = 160;

		// Token: 0x040015F5 RID: 5621
		public const int UpdateText = 161;

		// Token: 0x040015F6 RID: 5622
		public const int Use = 162;

		// Token: 0x040015F7 RID: 5623
		public const int User = 163;

		// Token: 0x040015F8 RID: 5624
		public const int Values = 164;

		// Token: 0x040015F9 RID: 5625
		public const int Varying = 165;

		// Token: 0x040015FA RID: 5626
		public const int View = 166;

		// Token: 0x040015FB RID: 5627
		public const int WaitFor = 167;

		// Token: 0x040015FC RID: 5628
		public const int When = 168;

		// Token: 0x040015FD RID: 5629
		public const int Where = 169;

		// Token: 0x040015FE RID: 5630
		public const int While = 170;

		// Token: 0x040015FF RID: 5631
		public const int With = 171;

		// Token: 0x04001600 RID: 5632
		public const int WriteText = 172;

		// Token: 0x04001601 RID: 5633
		public const int Disk = 173;

		// Token: 0x04001602 RID: 5634
		public const int Precision = 174;

		// Token: 0x04001603 RID: 5635
		public const int External = 175;

		// Token: 0x04001604 RID: 5636
		public const int Revert = 176;

		// Token: 0x04001605 RID: 5637
		public const int Pivot = 177;

		// Token: 0x04001606 RID: 5638
		public const int Unpivot = 178;

		// Token: 0x04001607 RID: 5639
		public const int TableSample = 179;

		// Token: 0x04001608 RID: 5640
		public const int Dump = 180;

		// Token: 0x04001609 RID: 5641
		public const int Load = 181;

		// Token: 0x0400160A RID: 5642
		public const int Merge = 182;

		// Token: 0x0400160B RID: 5643
		public const int StopList = 183;

		// Token: 0x0400160C RID: 5644
		public const int SemanticKeyPhraseTable = 184;

		// Token: 0x0400160D RID: 5645
		public const int SemanticSimilarityTable = 185;

		// Token: 0x0400160E RID: 5646
		public const int SemanticSimilarityDetailsTable = 186;

		// Token: 0x0400160F RID: 5647
		public const int TryConvert = 187;

		// Token: 0x04001610 RID: 5648
		public const int Bang = 188;

		// Token: 0x04001611 RID: 5649
		public const int PercentSign = 189;

		// Token: 0x04001612 RID: 5650
		public const int Ampersand = 190;

		// Token: 0x04001613 RID: 5651
		public const int LeftParenthesis = 191;

		// Token: 0x04001614 RID: 5652
		public const int RightParenthesis = 192;

		// Token: 0x04001615 RID: 5653
		public const int LeftCurly = 193;

		// Token: 0x04001616 RID: 5654
		public const int RightCurly = 194;

		// Token: 0x04001617 RID: 5655
		public const int Star = 195;

		// Token: 0x04001618 RID: 5656
		public const int MultiplyEquals = 196;

		// Token: 0x04001619 RID: 5657
		public const int Plus = 197;

		// Token: 0x0400161A RID: 5658
		public const int Comma = 198;

		// Token: 0x0400161B RID: 5659
		public const int Minus = 199;

		// Token: 0x0400161C RID: 5660
		public const int Dot = 200;

		// Token: 0x0400161D RID: 5661
		public const int Divide = 201;

		// Token: 0x0400161E RID: 5662
		public const int Colon = 202;

		// Token: 0x0400161F RID: 5663
		public const int DoubleColon = 203;

		// Token: 0x04001620 RID: 5664
		public const int Semicolon = 204;

		// Token: 0x04001621 RID: 5665
		public const int LessThan = 205;

		// Token: 0x04001622 RID: 5666
		public const int EqualsSign = 206;

		// Token: 0x04001623 RID: 5667
		public const int RightOuterJoin = 207;

		// Token: 0x04001624 RID: 5668
		public const int GreaterThan = 208;

		// Token: 0x04001625 RID: 5669
		public const int Circumflex = 209;

		// Token: 0x04001626 RID: 5670
		public const int VerticalLine = 210;

		// Token: 0x04001627 RID: 5671
		public const int Tilde = 211;

		// Token: 0x04001628 RID: 5672
		public const int AddEquals = 212;

		// Token: 0x04001629 RID: 5673
		public const int SubtractEquals = 213;

		// Token: 0x0400162A RID: 5674
		public const int DivideEquals = 214;

		// Token: 0x0400162B RID: 5675
		public const int ModEquals = 215;

		// Token: 0x0400162C RID: 5676
		public const int BitwiseAndEquals = 216;

		// Token: 0x0400162D RID: 5677
		public const int BitwiseOrEquals = 217;

		// Token: 0x0400162E RID: 5678
		public const int BitwiseXorEquals = 218;

		// Token: 0x0400162F RID: 5679
		public const int Go = 219;

		// Token: 0x04001630 RID: 5680
		public const int Label = 220;

		// Token: 0x04001631 RID: 5681
		public const int Integer = 221;

		// Token: 0x04001632 RID: 5682
		public const int Numeric = 222;

		// Token: 0x04001633 RID: 5683
		public const int Real = 223;

		// Token: 0x04001634 RID: 5684
		public const int HexLiteral = 224;

		// Token: 0x04001635 RID: 5685
		public const int Money = 225;

		// Token: 0x04001636 RID: 5686
		public const int SqlCommandIdentifier = 226;

		// Token: 0x04001637 RID: 5687
		public const int PseudoColumn = 227;

		// Token: 0x04001638 RID: 5688
		public const int DollarPartition = 228;

		// Token: 0x04001639 RID: 5689
		public const int AsciiStringOrQuotedIdentifier = 229;

		// Token: 0x0400163A RID: 5690
		public const int AsciiStringLiteral = 230;

		// Token: 0x0400163B RID: 5691
		public const int UnicodeStringLiteral = 231;

		// Token: 0x0400163C RID: 5692
		public const int Identifier = 232;

		// Token: 0x0400163D RID: 5693
		public const int QuotedIdentifier = 233;

		// Token: 0x0400163E RID: 5694
		public const int Variable = 234;

		// Token: 0x0400163F RID: 5695
		public const int OdbcInitiator = 235;

		// Token: 0x04001640 RID: 5696
		public const int ProcNameSemicolon = 236;

		// Token: 0x04001641 RID: 5697
		public const int SingleLineComment = 237;

		// Token: 0x04001642 RID: 5698
		public const int MultilineComment = 238;

		// Token: 0x04001643 RID: 5699
		public const int WhiteSpace = 239;

		// Token: 0x04001644 RID: 5700
		public static readonly string[] tokenNames_ = new string[]
		{
			"\"<0>\"", "\"EOF\"", "\"<2>\"", "\"NULL_TREE_LOOKAHEAD\"", "\"add\"", "\"all\"", "\"alter\"", "\"and\"", "\"any\"", "\"as\"",
			"\"asc\"", "\"authorization\"", "\"backup\"", "\"begin\"", "\"between\"", "\"break\"", "\"browse\"", "\"bulk\"", "\"by\"", "\"cascade\"",
			"\"case\"", "\"check\"", "\"checkpoint\"", "\"close\"", "\"clustered\"", "\"coalesce\"", "\"collate\"", "\"column\"", "\"commit\"", "\"compute\"",
			"\"constraint\"", "\"contains\"", "\"containstable\"", "\"continue\"", "\"convert\"", "\"create\"", "\"cross\"", "\"current\"", "\"current_date\"", "\"current_time\"",
			"\"current_timestamp\"", "\"current_user\"", "\"cursor\"", "\"database\"", "\"dbcc\"", "\"deallocate\"", "\"declare\"", "\"default\"", "\"delete\"", "\"deny\"",
			"\"desc\"", "\"distinct\"", "\"distributed\"", "\"double\"", "\"drop\"", "\"else\"", "\"end\"", "\"errlvl\"", "\"escape\"", "\"except\"",
			"\"exec\"", "\"execute\"", "\"exists\"", "\"exit\"", "\"fetch\"", "\"file\"", "\"fillfactor\"", "\"for\"", "\"foreign\"", "\"freetext\"",
			"\"freetexttable\"", "\"from\"", "\"full\"", "\"function\"", "\"goto\"", "\"grant\"", "\"group\"", "\"having\"", "\"holdlock\"", "\"identity\"",
			"\"identity_insert\"", "\"identitycol\"", "\"if\"", "\"in\"", "\"index\"", "\"inner\"", "\"insert\"", "\"intersect\"", "\"into\"", "\"is\"",
			"\"join\"", "\"key\"", "\"kill\"", "\"left\"", "\"like\"", "\"lineno\"", "\"national\"", "\"nocheck\"", "\"nonclustered\"", "\"not\"",
			"\"null\"", "\"nullif\"", "\"of\"", "\"off\"", "\"offsets\"", "\"on\"", "\"open\"", "\"opendatasource\"", "\"openquery\"", "\"openrowset\"",
			"\"openxml\"", "\"option\"", "\"or\"", "\"order\"", "\"outer\"", "\"over\"", "\"percent\"", "\"plan\"", "\"primary\"", "\"print\"",
			"\"proc\"", "\"procedure\"", "\"public\"", "\"raiserror\"", "\"read\"", "\"readtext\"", "\"reconfigure\"", "\"references\"", "\"replication\"", "\"restore\"",
			"\"restrict\"", "\"return\"", "\"revoke\"", "\"right\"", "\"rollback\"", "\"rowcount\"", "\"rowguidcol\"", "\"rule\"", "\"save\"", "\"schema\"",
			"\"select\"", "\"session_user\"", "\"set\"", "\"setuser\"", "\"shutdown\"", "\"some\"", "\"statistics\"", "\"system_user\"", "\"table\"", "\"textsize\"",
			"\"then\"", "\"to\"", "\"top\"", "\"tran\"", "\"transaction\"", "\"trigger\"", "\"truncate\"", "\"tsequal\"", "\"union\"", "\"unique\"",
			"\"update\"", "\"updatetext\"", "\"use\"", "\"user\"", "\"values\"", "\"varying\"", "\"view\"", "\"waitfor\"", "\"when\"", "\"where\"",
			"\"while\"", "\"with\"", "\"writetext\"", "\"Disk\"", "\"Precision\"", "\"External\"", "\"Revert\"", "\"Pivot\"", "\"Unpivot\"", "\"TableSample\"",
			"\"Dump\"", "\"Load\"", "\"Merge\"", "\"StopList\"", "\"SemanticKeyPhraseTable\"", "\"SemanticSimilarityTable\"", "\"SemanticSimilarityDetailsTable\"", "\"TryConvert\"", "\"Bang\"", "\"PercentSign\"",
			"\"Ampersand\"", "\"LeftParenthesis\"", "\"RightParenthesis\"", "\"LeftCurly\"", "\"RightCurly\"", "\"Star\"", "\"MultiplyEquals\"", "\"Plus\"", "\"Comma\"", "\"Minus\"",
			"\"Dot\"", "\"Divide\"", "\"Colon\"", "\"DoubleColon\"", "\"Semicolon\"", "\"LessThan\"", "\"EqualsSign\"", "\"RightOuterJoin\"", "\"GreaterThan\"", "\"Circumflex\"",
			"\"VerticalLine\"", "\"Tilde\"", "\"AddEquals\"", "\"SubtractEquals\"", "\"DivideEquals\"", "\"ModEquals\"", "\"BitwiseAndEquals\"", "\"BitwiseOrEquals\"", "\"BitwiseXorEquals\"", "\"Go\"",
			"\"Label\"", "\"Integer\"", "\"Numeric\"", "\"Real\"", "\"HexLiteral\"", "\"Money\"", "\"SqlCommandIdentifier\"", "\"PseudoColumn\"", "\"DollarPartition\"", "\"AsciiStringOrQuotedIdentifier\"",
			"\"AsciiStringLiteral\"", "\"UnicodeStringLiteral\"", "\"Identifier\"", "\"QuotedIdentifier\"", "\"Variable\"", "\"OdbcInitiator\"", "\"ProcNameSemicolon\"", "\"SingleLineComment\"", "\"MultilineComment\"", "\"WhiteSpace\""
		};

		// Token: 0x04001645 RID: 5701
		public static readonly BitSet tokenSet_0_ = new BitSet(TSql90ParserInternal.mk_tokenSet_0_());

		// Token: 0x04001646 RID: 5702
		public static readonly BitSet tokenSet_1_ = new BitSet(TSql90ParserInternal.mk_tokenSet_1_());

		// Token: 0x04001647 RID: 5703
		public static readonly BitSet tokenSet_2_ = new BitSet(TSql90ParserInternal.mk_tokenSet_2_());

		// Token: 0x04001648 RID: 5704
		public static readonly BitSet tokenSet_3_ = new BitSet(TSql90ParserInternal.mk_tokenSet_3_());

		// Token: 0x04001649 RID: 5705
		public static readonly BitSet tokenSet_4_ = new BitSet(TSql90ParserInternal.mk_tokenSet_4_());

		// Token: 0x0400164A RID: 5706
		public static readonly BitSet tokenSet_5_ = new BitSet(TSql90ParserInternal.mk_tokenSet_5_());

		// Token: 0x0400164B RID: 5707
		public static readonly BitSet tokenSet_6_ = new BitSet(TSql90ParserInternal.mk_tokenSet_6_());

		// Token: 0x0400164C RID: 5708
		public static readonly BitSet tokenSet_7_ = new BitSet(TSql90ParserInternal.mk_tokenSet_7_());

		// Token: 0x0400164D RID: 5709
		public static readonly BitSet tokenSet_8_ = new BitSet(TSql90ParserInternal.mk_tokenSet_8_());

		// Token: 0x0400164E RID: 5710
		public static readonly BitSet tokenSet_9_ = new BitSet(TSql90ParserInternal.mk_tokenSet_9_());

		// Token: 0x0400164F RID: 5711
		public static readonly BitSet tokenSet_10_ = new BitSet(TSql90ParserInternal.mk_tokenSet_10_());

		// Token: 0x04001650 RID: 5712
		public static readonly BitSet tokenSet_11_ = new BitSet(TSql90ParserInternal.mk_tokenSet_11_());

		// Token: 0x04001651 RID: 5713
		public static readonly BitSet tokenSet_12_ = new BitSet(TSql90ParserInternal.mk_tokenSet_12_());

		// Token: 0x04001652 RID: 5714
		public static readonly BitSet tokenSet_13_ = new BitSet(TSql90ParserInternal.mk_tokenSet_13_());

		// Token: 0x04001653 RID: 5715
		public static readonly BitSet tokenSet_14_ = new BitSet(TSql90ParserInternal.mk_tokenSet_14_());

		// Token: 0x04001654 RID: 5716
		public static readonly BitSet tokenSet_15_ = new BitSet(TSql90ParserInternal.mk_tokenSet_15_());

		// Token: 0x04001655 RID: 5717
		public static readonly BitSet tokenSet_16_ = new BitSet(TSql90ParserInternal.mk_tokenSet_16_());

		// Token: 0x04001656 RID: 5718
		public static readonly BitSet tokenSet_17_ = new BitSet(TSql90ParserInternal.mk_tokenSet_17_());

		// Token: 0x04001657 RID: 5719
		public static readonly BitSet tokenSet_18_ = new BitSet(TSql90ParserInternal.mk_tokenSet_18_());

		// Token: 0x04001658 RID: 5720
		public static readonly BitSet tokenSet_19_ = new BitSet(TSql90ParserInternal.mk_tokenSet_19_());

		// Token: 0x04001659 RID: 5721
		public static readonly BitSet tokenSet_20_ = new BitSet(TSql90ParserInternal.mk_tokenSet_20_());

		// Token: 0x0400165A RID: 5722
		public static readonly BitSet tokenSet_21_ = new BitSet(TSql90ParserInternal.mk_tokenSet_21_());

		// Token: 0x0400165B RID: 5723
		public static readonly BitSet tokenSet_22_ = new BitSet(TSql90ParserInternal.mk_tokenSet_22_());

		// Token: 0x0400165C RID: 5724
		public static readonly BitSet tokenSet_23_ = new BitSet(TSql90ParserInternal.mk_tokenSet_23_());

		// Token: 0x0400165D RID: 5725
		public static readonly BitSet tokenSet_24_ = new BitSet(TSql90ParserInternal.mk_tokenSet_24_());

		// Token: 0x0400165E RID: 5726
		public static readonly BitSet tokenSet_25_ = new BitSet(TSql90ParserInternal.mk_tokenSet_25_());

		// Token: 0x0400165F RID: 5727
		public static readonly BitSet tokenSet_26_ = new BitSet(TSql90ParserInternal.mk_tokenSet_26_());

		// Token: 0x04001660 RID: 5728
		public static readonly BitSet tokenSet_27_ = new BitSet(TSql90ParserInternal.mk_tokenSet_27_());

		// Token: 0x04001661 RID: 5729
		public static readonly BitSet tokenSet_28_ = new BitSet(TSql90ParserInternal.mk_tokenSet_28_());

		// Token: 0x04001662 RID: 5730
		public static readonly BitSet tokenSet_29_ = new BitSet(TSql90ParserInternal.mk_tokenSet_29_());

		// Token: 0x04001663 RID: 5731
		public static readonly BitSet tokenSet_30_ = new BitSet(TSql90ParserInternal.mk_tokenSet_30_());

		// Token: 0x04001664 RID: 5732
		public static readonly BitSet tokenSet_31_ = new BitSet(TSql90ParserInternal.mk_tokenSet_31_());

		// Token: 0x04001665 RID: 5733
		public static readonly BitSet tokenSet_32_ = new BitSet(TSql90ParserInternal.mk_tokenSet_32_());

		// Token: 0x04001666 RID: 5734
		public static readonly BitSet tokenSet_33_ = new BitSet(TSql90ParserInternal.mk_tokenSet_33_());

		// Token: 0x04001667 RID: 5735
		public static readonly BitSet tokenSet_34_ = new BitSet(TSql90ParserInternal.mk_tokenSet_34_());

		// Token: 0x04001668 RID: 5736
		public static readonly BitSet tokenSet_35_ = new BitSet(TSql90ParserInternal.mk_tokenSet_35_());

		// Token: 0x04001669 RID: 5737
		public static readonly BitSet tokenSet_36_ = new BitSet(TSql90ParserInternal.mk_tokenSet_36_());

		// Token: 0x0400166A RID: 5738
		public static readonly BitSet tokenSet_37_ = new BitSet(TSql90ParserInternal.mk_tokenSet_37_());

		// Token: 0x0400166B RID: 5739
		public static readonly BitSet tokenSet_38_ = new BitSet(TSql90ParserInternal.mk_tokenSet_38_());

		// Token: 0x0400166C RID: 5740
		public static readonly BitSet tokenSet_39_ = new BitSet(TSql90ParserInternal.mk_tokenSet_39_());

		// Token: 0x0400166D RID: 5741
		public static readonly BitSet tokenSet_40_ = new BitSet(TSql90ParserInternal.mk_tokenSet_40_());

		// Token: 0x0400166E RID: 5742
		public static readonly BitSet tokenSet_41_ = new BitSet(TSql90ParserInternal.mk_tokenSet_41_());

		// Token: 0x0400166F RID: 5743
		public static readonly BitSet tokenSet_42_ = new BitSet(TSql90ParserInternal.mk_tokenSet_42_());

		// Token: 0x04001670 RID: 5744
		public static readonly BitSet tokenSet_43_ = new BitSet(TSql90ParserInternal.mk_tokenSet_43_());

		// Token: 0x04001671 RID: 5745
		public static readonly BitSet tokenSet_44_ = new BitSet(TSql90ParserInternal.mk_tokenSet_44_());

		// Token: 0x04001672 RID: 5746
		public static readonly BitSet tokenSet_45_ = new BitSet(TSql90ParserInternal.mk_tokenSet_45_());

		// Token: 0x04001673 RID: 5747
		public static readonly BitSet tokenSet_46_ = new BitSet(TSql90ParserInternal.mk_tokenSet_46_());

		// Token: 0x04001674 RID: 5748
		public static readonly BitSet tokenSet_47_ = new BitSet(TSql90ParserInternal.mk_tokenSet_47_());

		// Token: 0x04001675 RID: 5749
		public static readonly BitSet tokenSet_48_ = new BitSet(TSql90ParserInternal.mk_tokenSet_48_());

		// Token: 0x04001676 RID: 5750
		public static readonly BitSet tokenSet_49_ = new BitSet(TSql90ParserInternal.mk_tokenSet_49_());

		// Token: 0x04001677 RID: 5751
		public static readonly BitSet tokenSet_50_ = new BitSet(TSql90ParserInternal.mk_tokenSet_50_());

		// Token: 0x04001678 RID: 5752
		public static readonly BitSet tokenSet_51_ = new BitSet(TSql90ParserInternal.mk_tokenSet_51_());

		// Token: 0x04001679 RID: 5753
		public static readonly BitSet tokenSet_52_ = new BitSet(TSql90ParserInternal.mk_tokenSet_52_());

		// Token: 0x0400167A RID: 5754
		public static readonly BitSet tokenSet_53_ = new BitSet(TSql90ParserInternal.mk_tokenSet_53_());

		// Token: 0x0400167B RID: 5755
		public static readonly BitSet tokenSet_54_ = new BitSet(TSql90ParserInternal.mk_tokenSet_54_());

		// Token: 0x0400167C RID: 5756
		public static readonly BitSet tokenSet_55_ = new BitSet(TSql90ParserInternal.mk_tokenSet_55_());

		// Token: 0x0400167D RID: 5757
		public static readonly BitSet tokenSet_56_ = new BitSet(TSql90ParserInternal.mk_tokenSet_56_());

		// Token: 0x0400167E RID: 5758
		public static readonly BitSet tokenSet_57_ = new BitSet(TSql90ParserInternal.mk_tokenSet_57_());

		// Token: 0x0400167F RID: 5759
		public static readonly BitSet tokenSet_58_ = new BitSet(TSql90ParserInternal.mk_tokenSet_58_());

		// Token: 0x04001680 RID: 5760
		public static readonly BitSet tokenSet_59_ = new BitSet(TSql90ParserInternal.mk_tokenSet_59_());

		// Token: 0x04001681 RID: 5761
		public static readonly BitSet tokenSet_60_ = new BitSet(TSql90ParserInternal.mk_tokenSet_60_());

		// Token: 0x04001682 RID: 5762
		public static readonly BitSet tokenSet_61_ = new BitSet(TSql90ParserInternal.mk_tokenSet_61_());

		// Token: 0x04001683 RID: 5763
		public static readonly BitSet tokenSet_62_ = new BitSet(TSql90ParserInternal.mk_tokenSet_62_());

		// Token: 0x04001684 RID: 5764
		public static readonly BitSet tokenSet_63_ = new BitSet(TSql90ParserInternal.mk_tokenSet_63_());

		// Token: 0x04001685 RID: 5765
		public static readonly BitSet tokenSet_64_ = new BitSet(TSql90ParserInternal.mk_tokenSet_64_());

		// Token: 0x04001686 RID: 5766
		public static readonly BitSet tokenSet_65_ = new BitSet(TSql90ParserInternal.mk_tokenSet_65_());

		// Token: 0x04001687 RID: 5767
		public static readonly BitSet tokenSet_66_ = new BitSet(TSql90ParserInternal.mk_tokenSet_66_());

		// Token: 0x04001688 RID: 5768
		public static readonly BitSet tokenSet_67_ = new BitSet(TSql90ParserInternal.mk_tokenSet_67_());

		// Token: 0x04001689 RID: 5769
		public static readonly BitSet tokenSet_68_ = new BitSet(TSql90ParserInternal.mk_tokenSet_68_());

		// Token: 0x0400168A RID: 5770
		public static readonly BitSet tokenSet_69_ = new BitSet(TSql90ParserInternal.mk_tokenSet_69_());

		// Token: 0x0400168B RID: 5771
		public static readonly BitSet tokenSet_70_ = new BitSet(TSql90ParserInternal.mk_tokenSet_70_());

		// Token: 0x0400168C RID: 5772
		public static readonly BitSet tokenSet_71_ = new BitSet(TSql90ParserInternal.mk_tokenSet_71_());

		// Token: 0x0400168D RID: 5773
		public static readonly BitSet tokenSet_72_ = new BitSet(TSql90ParserInternal.mk_tokenSet_72_());

		// Token: 0x0400168E RID: 5774
		public static readonly BitSet tokenSet_73_ = new BitSet(TSql90ParserInternal.mk_tokenSet_73_());

		// Token: 0x0400168F RID: 5775
		public static readonly BitSet tokenSet_74_ = new BitSet(TSql90ParserInternal.mk_tokenSet_74_());

		// Token: 0x04001690 RID: 5776
		public static readonly BitSet tokenSet_75_ = new BitSet(TSql90ParserInternal.mk_tokenSet_75_());

		// Token: 0x04001691 RID: 5777
		public static readonly BitSet tokenSet_76_ = new BitSet(TSql90ParserInternal.mk_tokenSet_76_());

		// Token: 0x04001692 RID: 5778
		public static readonly BitSet tokenSet_77_ = new BitSet(TSql90ParserInternal.mk_tokenSet_77_());

		// Token: 0x04001693 RID: 5779
		public static readonly BitSet tokenSet_78_ = new BitSet(TSql90ParserInternal.mk_tokenSet_78_());

		// Token: 0x04001694 RID: 5780
		public static readonly BitSet tokenSet_79_ = new BitSet(TSql90ParserInternal.mk_tokenSet_79_());

		// Token: 0x04001695 RID: 5781
		public static readonly BitSet tokenSet_80_ = new BitSet(TSql90ParserInternal.mk_tokenSet_80_());

		// Token: 0x04001696 RID: 5782
		public static readonly BitSet tokenSet_81_ = new BitSet(TSql90ParserInternal.mk_tokenSet_81_());

		// Token: 0x04001697 RID: 5783
		public static readonly BitSet tokenSet_82_ = new BitSet(TSql90ParserInternal.mk_tokenSet_82_());

		// Token: 0x04001698 RID: 5784
		public static readonly BitSet tokenSet_83_ = new BitSet(TSql90ParserInternal.mk_tokenSet_83_());

		// Token: 0x04001699 RID: 5785
		public static readonly BitSet tokenSet_84_ = new BitSet(TSql90ParserInternal.mk_tokenSet_84_());

		// Token: 0x0400169A RID: 5786
		public static readonly BitSet tokenSet_85_ = new BitSet(TSql90ParserInternal.mk_tokenSet_85_());

		// Token: 0x0400169B RID: 5787
		public static readonly BitSet tokenSet_86_ = new BitSet(TSql90ParserInternal.mk_tokenSet_86_());

		// Token: 0x0400169C RID: 5788
		public static readonly BitSet tokenSet_87_ = new BitSet(TSql90ParserInternal.mk_tokenSet_87_());

		// Token: 0x0400169D RID: 5789
		public static readonly BitSet tokenSet_88_ = new BitSet(TSql90ParserInternal.mk_tokenSet_88_());

		// Token: 0x0400169E RID: 5790
		public static readonly BitSet tokenSet_89_ = new BitSet(TSql90ParserInternal.mk_tokenSet_89_());

		// Token: 0x0400169F RID: 5791
		public static readonly BitSet tokenSet_90_ = new BitSet(TSql90ParserInternal.mk_tokenSet_90_());

		// Token: 0x040016A0 RID: 5792
		public static readonly BitSet tokenSet_91_ = new BitSet(TSql90ParserInternal.mk_tokenSet_91_());

		// Token: 0x040016A1 RID: 5793
		public static readonly BitSet tokenSet_92_ = new BitSet(TSql90ParserInternal.mk_tokenSet_92_());

		// Token: 0x040016A2 RID: 5794
		public static readonly BitSet tokenSet_93_ = new BitSet(TSql90ParserInternal.mk_tokenSet_93_());

		// Token: 0x040016A3 RID: 5795
		public static readonly BitSet tokenSet_94_ = new BitSet(TSql90ParserInternal.mk_tokenSet_94_());

		// Token: 0x040016A4 RID: 5796
		public static readonly BitSet tokenSet_95_ = new BitSet(TSql90ParserInternal.mk_tokenSet_95_());

		// Token: 0x040016A5 RID: 5797
		public static readonly BitSet tokenSet_96_ = new BitSet(TSql90ParserInternal.mk_tokenSet_96_());

		// Token: 0x040016A6 RID: 5798
		public static readonly BitSet tokenSet_97_ = new BitSet(TSql90ParserInternal.mk_tokenSet_97_());

		// Token: 0x040016A7 RID: 5799
		public static readonly BitSet tokenSet_98_ = new BitSet(TSql90ParserInternal.mk_tokenSet_98_());

		// Token: 0x040016A8 RID: 5800
		public static readonly BitSet tokenSet_99_ = new BitSet(TSql90ParserInternal.mk_tokenSet_99_());

		// Token: 0x040016A9 RID: 5801
		public static readonly BitSet tokenSet_100_ = new BitSet(TSql90ParserInternal.mk_tokenSet_100_());

		// Token: 0x040016AA RID: 5802
		public static readonly BitSet tokenSet_101_ = new BitSet(TSql90ParserInternal.mk_tokenSet_101_());

		// Token: 0x040016AB RID: 5803
		public static readonly BitSet tokenSet_102_ = new BitSet(TSql90ParserInternal.mk_tokenSet_102_());

		// Token: 0x040016AC RID: 5804
		public static readonly BitSet tokenSet_103_ = new BitSet(TSql90ParserInternal.mk_tokenSet_103_());

		// Token: 0x040016AD RID: 5805
		public static readonly BitSet tokenSet_104_ = new BitSet(TSql90ParserInternal.mk_tokenSet_104_());

		// Token: 0x040016AE RID: 5806
		public static readonly BitSet tokenSet_105_ = new BitSet(TSql90ParserInternal.mk_tokenSet_105_());

		// Token: 0x040016AF RID: 5807
		public static readonly BitSet tokenSet_106_ = new BitSet(TSql90ParserInternal.mk_tokenSet_106_());

		// Token: 0x040016B0 RID: 5808
		public static readonly BitSet tokenSet_107_ = new BitSet(TSql90ParserInternal.mk_tokenSet_107_());

		// Token: 0x040016B1 RID: 5809
		public static readonly BitSet tokenSet_108_ = new BitSet(TSql90ParserInternal.mk_tokenSet_108_());

		// Token: 0x040016B2 RID: 5810
		public static readonly BitSet tokenSet_109_ = new BitSet(TSql90ParserInternal.mk_tokenSet_109_());

		// Token: 0x040016B3 RID: 5811
		public static readonly BitSet tokenSet_110_ = new BitSet(TSql90ParserInternal.mk_tokenSet_110_());

		// Token: 0x040016B4 RID: 5812
		public static readonly BitSet tokenSet_111_ = new BitSet(TSql90ParserInternal.mk_tokenSet_111_());

		// Token: 0x040016B5 RID: 5813
		public static readonly BitSet tokenSet_112_ = new BitSet(TSql90ParserInternal.mk_tokenSet_112_());

		// Token: 0x040016B6 RID: 5814
		public static readonly BitSet tokenSet_113_ = new BitSet(TSql90ParserInternal.mk_tokenSet_113_());

		// Token: 0x040016B7 RID: 5815
		public static readonly BitSet tokenSet_114_ = new BitSet(TSql90ParserInternal.mk_tokenSet_114_());

		// Token: 0x040016B8 RID: 5816
		public static readonly BitSet tokenSet_115_ = new BitSet(TSql90ParserInternal.mk_tokenSet_115_());

		// Token: 0x040016B9 RID: 5817
		public static readonly BitSet tokenSet_116_ = new BitSet(TSql90ParserInternal.mk_tokenSet_116_());

		// Token: 0x040016BA RID: 5818
		public static readonly BitSet tokenSet_117_ = new BitSet(TSql90ParserInternal.mk_tokenSet_117_());

		// Token: 0x040016BB RID: 5819
		public static readonly BitSet tokenSet_118_ = new BitSet(TSql90ParserInternal.mk_tokenSet_118_());

		// Token: 0x040016BC RID: 5820
		public static readonly BitSet tokenSet_119_ = new BitSet(TSql90ParserInternal.mk_tokenSet_119_());

		// Token: 0x040016BD RID: 5821
		public static readonly BitSet tokenSet_120_ = new BitSet(TSql90ParserInternal.mk_tokenSet_120_());

		// Token: 0x040016BE RID: 5822
		public static readonly BitSet tokenSet_121_ = new BitSet(TSql90ParserInternal.mk_tokenSet_121_());

		// Token: 0x040016BF RID: 5823
		public static readonly BitSet tokenSet_122_ = new BitSet(TSql90ParserInternal.mk_tokenSet_122_());

		// Token: 0x040016C0 RID: 5824
		public static readonly BitSet tokenSet_123_ = new BitSet(TSql90ParserInternal.mk_tokenSet_123_());

		// Token: 0x040016C1 RID: 5825
		public static readonly BitSet tokenSet_124_ = new BitSet(TSql90ParserInternal.mk_tokenSet_124_());

		// Token: 0x040016C2 RID: 5826
		public static readonly BitSet tokenSet_125_ = new BitSet(TSql90ParserInternal.mk_tokenSet_125_());

		// Token: 0x040016C3 RID: 5827
		public static readonly BitSet tokenSet_126_ = new BitSet(TSql90ParserInternal.mk_tokenSet_126_());

		// Token: 0x040016C4 RID: 5828
		public static readonly BitSet tokenSet_127_ = new BitSet(TSql90ParserInternal.mk_tokenSet_127_());

		// Token: 0x040016C5 RID: 5829
		public static readonly BitSet tokenSet_128_ = new BitSet(TSql90ParserInternal.mk_tokenSet_128_());

		// Token: 0x040016C6 RID: 5830
		public static readonly BitSet tokenSet_129_ = new BitSet(TSql90ParserInternal.mk_tokenSet_129_());

		// Token: 0x040016C7 RID: 5831
		public static readonly BitSet tokenSet_130_ = new BitSet(TSql90ParserInternal.mk_tokenSet_130_());

		// Token: 0x040016C8 RID: 5832
		public static readonly BitSet tokenSet_131_ = new BitSet(TSql90ParserInternal.mk_tokenSet_131_());

		// Token: 0x040016C9 RID: 5833
		public static readonly BitSet tokenSet_132_ = new BitSet(TSql90ParserInternal.mk_tokenSet_132_());

		// Token: 0x040016CA RID: 5834
		public static readonly BitSet tokenSet_133_ = new BitSet(TSql90ParserInternal.mk_tokenSet_133_());

		// Token: 0x040016CB RID: 5835
		public static readonly BitSet tokenSet_134_ = new BitSet(TSql90ParserInternal.mk_tokenSet_134_());

		// Token: 0x040016CC RID: 5836
		public static readonly BitSet tokenSet_135_ = new BitSet(TSql90ParserInternal.mk_tokenSet_135_());

		// Token: 0x040016CD RID: 5837
		public static readonly BitSet tokenSet_136_ = new BitSet(TSql90ParserInternal.mk_tokenSet_136_());

		// Token: 0x040016CE RID: 5838
		public static readonly BitSet tokenSet_137_ = new BitSet(TSql90ParserInternal.mk_tokenSet_137_());

		// Token: 0x040016CF RID: 5839
		public static readonly BitSet tokenSet_138_ = new BitSet(TSql90ParserInternal.mk_tokenSet_138_());

		// Token: 0x040016D0 RID: 5840
		public static readonly BitSet tokenSet_139_ = new BitSet(TSql90ParserInternal.mk_tokenSet_139_());

		// Token: 0x040016D1 RID: 5841
		public static readonly BitSet tokenSet_140_ = new BitSet(TSql90ParserInternal.mk_tokenSet_140_());

		// Token: 0x040016D2 RID: 5842
		public static readonly BitSet tokenSet_141_ = new BitSet(TSql90ParserInternal.mk_tokenSet_141_());

		// Token: 0x040016D3 RID: 5843
		public static readonly BitSet tokenSet_142_ = new BitSet(TSql90ParserInternal.mk_tokenSet_142_());

		// Token: 0x040016D4 RID: 5844
		public static readonly BitSet tokenSet_143_ = new BitSet(TSql90ParserInternal.mk_tokenSet_143_());

		// Token: 0x040016D5 RID: 5845
		public static readonly BitSet tokenSet_144_ = new BitSet(TSql90ParserInternal.mk_tokenSet_144_());

		// Token: 0x040016D6 RID: 5846
		public static readonly BitSet tokenSet_145_ = new BitSet(TSql90ParserInternal.mk_tokenSet_145_());

		// Token: 0x040016D7 RID: 5847
		public static readonly BitSet tokenSet_146_ = new BitSet(TSql90ParserInternal.mk_tokenSet_146_());
	}
}
