using System;
using Microsoft.ReportingServices.Diagnostics;
using Microsoft.ReportingServices.Diagnostics.Utilities;
using Microsoft.ReportingServices.Modeling;

namespace Microsoft.ReportingServices.Library
{
	// Token: 0x02000157 RID: 343
	internal sealed class SetModelDefinitionAction : UpdateModelDefinitionAction<SetModelDefinitionActionParameters>
	{
		// Token: 0x06000D15 RID: 3349 RVA: 0x00030276 File Offset: 0x0002E476
		internal SetModelDefinitionAction(RSService service)
			: base("SetModelDefinitionAction", service)
		{
			Sku.ThrowIfFeatureNotEnabled(Globals.Configuration.InstanceID, RestrictedFeatures.ReportBuilder);
		}

		// Token: 0x06000D16 RID: 3350 RVA: 0x00030298 File Offset: 0x0002E498
		protected override void AddActionToBatch()
		{
			base.Service.Storage.AddBatchRecord(base.BatchID, base.Service.UserName, CatalogCommand.SetModelDefinition, base.ActionParameters.ItemPath, "Model", null, null, null, null, false, base.ActionParameters.ModelDefinition, null);
		}

		// Token: 0x06000D17 RID: 3351 RVA: 0x000302E9 File Offset: 0x0002E4E9
		internal override void PerformActionInBatch(CallParameters parameters)
		{
			base.ActionParameters.ItemPath = parameters.Item;
			base.ActionParameters.ModelDefinition = parameters.Content;
			this.PerformActionNow();
		}

		// Token: 0x1700043F RID: 1087
		// (get) Token: 0x06000D18 RID: 3352 RVA: 0x00005BEF File Offset: 0x00003DEF
		protected override bool ShouldLoadExistingModelDefinition
		{
			get
			{
				return false;
			}
		}

		// Token: 0x06000D19 RID: 3353 RVA: 0x00030313 File Offset: 0x0002E513
		internal override byte[] GetNewModelDefinition(ModelCatalogItem existingModel)
		{
			return base.ActionParameters.ModelDefinition;
		}

		// Token: 0x06000D1A RID: 3354 RVA: 0x00030320 File Offset: 0x0002E520
		internal override void VerifyIDAndAdjustDatasource(ModelCatalogItem existingModel, SemanticModel newModel)
		{
			if (newModel.ID != existingModel.Model.ID)
			{
				throw new ModelIDMismatchException();
			}
			if (!ModelCatalogItem.SameDataSourceName(existingModel.Model, newModel))
			{
				base.Service.Storage.DeleteDataSources(existingModel.CatalogItemID);
				existingModel.AddEmptyModelDataSource(newModel);
			}
		}

		// Token: 0x06000D1B RID: 3355 RVA: 0x00005BF2 File Offset: 0x00003DF2
		internal override void VerifyProperties(ModelCatalogItem model)
		{
		}

		// Token: 0x06000D1C RID: 3356 RVA: 0x00030376 File Offset: 0x0002E576
		internal override void AdjustProperties(ItemProperties properties)
		{
			properties.IsAutoGenerated = bool.FalseString;
		}
	}
}
