using System;
using System.Data;
using System.IO;
using System.Xml;
using Microsoft.ReportingServices.Common;
using Microsoft.ReportingServices.DataExtensions;
using Microsoft.ReportingServices.Diagnostics;
using Microsoft.ReportingServices.Diagnostics.Utilities;
using Microsoft.ReportingServices.Interfaces;
using Microsoft.ReportingServices.Modeling;
using Microsoft.ReportingServices.ReportProcessing;

namespace Microsoft.ReportingServices.Library
{
	// Token: 0x02000141 RID: 321
	internal sealed class RegenerateModelAction : UpdateModelDefinitionAction<RegenerateModelActionParameters>
	{
		// Token: 0x06000C8E RID: 3214 RVA: 0x0002EE3B File Offset: 0x0002D03B
		internal RegenerateModelAction(RSService service)
			: base("RegenerateModelAction", service)
		{
			Sku.ThrowIfFeatureNotEnabled(Globals.Configuration.InstanceID, RestrictedFeatures.ReportBuilder);
		}

		// Token: 0x06000C8F RID: 3215 RVA: 0x0002EE5C File Offset: 0x0002D05C
		protected override void AddActionToBatch()
		{
			base.Service.Storage.AddBatchRecord(base.BatchID, base.Service.UserName, CatalogCommand.RegenerateModel, base.ActionParameters.ItemPath, "Model", null, null, null, null, false, null, null);
		}

		// Token: 0x06000C90 RID: 3216 RVA: 0x0002EEA3 File Offset: 0x0002D0A3
		internal override void PerformActionInBatch(CallParameters parameters)
		{
			base.ActionParameters.ItemPath = parameters.Item;
			this.PerformActionNow();
		}

		// Token: 0x17000412 RID: 1042
		// (get) Token: 0x06000C91 RID: 3217 RVA: 0x000053DC File Offset: 0x000035DC
		protected override bool ShouldLoadExistingModelDefinition
		{
			get
			{
				return true;
			}
		}

		// Token: 0x06000C92 RID: 3218 RVA: 0x0002EEBC File Offset: 0x0002D0BC
		internal override byte[] GetNewModelDefinition(ModelCatalogItem existingModel)
		{
			DataSourceInfo theOnlyDataSource = existingModel.DataSources.GetTheOnlyDataSource();
			theOnlyDataSource.ModelID = Guid.Empty;
			return this.RegenerateModelDefinition(existingModel.Content, theOnlyDataSource);
		}

		// Token: 0x06000C93 RID: 3219 RVA: 0x0002EEED File Offset: 0x0002D0ED
		internal override void VerifyIDAndAdjustDatasource(ModelCatalogItem existingModel, SemanticModel newModel)
		{
			if (newModel.ID != existingModel.Model.ID)
			{
				throw new InternalCatalogException("Different model IDs on RegenerateModel");
			}
			if (!ModelCatalogItem.SameDataSourceName(existingModel.Model, newModel))
			{
				throw new InternalCatalogException("Different data source names on RegenerateModel");
			}
		}

		// Token: 0x06000C94 RID: 3220 RVA: 0x0002EF2B File Offset: 0x0002D12B
		internal override void VerifyProperties(ModelCatalogItem model)
		{
			if (model.Properties.IsAutoGenerated != bool.TrueString)
			{
				throw new ModelNotAutoGeneratedException(model.ItemContext.OriginalItemPath.Value);
			}
		}

		// Token: 0x06000C95 RID: 3221 RVA: 0x00005BF2 File Offset: 0x00003DF2
		internal override void AdjustProperties(ItemProperties properties)
		{
		}

		// Token: 0x06000C96 RID: 3222 RVA: 0x0002EF5C File Offset: 0x0002D15C
		private byte[] RegenerateModelDefinition(byte[] oldModelDefinition, DataSourceInfo dataSource)
		{
			dataSource.ThrowIfNotUsable(new ServerDataSourceSettings(Globals.Configuration.IsSurrogatePresent, Global.EnableIntegratedSecurity));
			ReportProcessing.ExecutionType executionType;
			byte[] array;
			using (SurrogateContextFactory.CreateContext(out executionType))
			{
				ISemanticModelGenerator semanticModelGenerator = GenerateModelAction.LoadSemanticModelGenerator(dataSource.Extension);
				if (semanticModelGenerator == null)
				{
					throw new ModelGenerationNotSupportedException();
				}
				XmlReader xmlReader = Microsoft.ReportingServices.Common.XmlRWFactory.CreateReader(new MemoryStream(oldModelDefinition));
				MemoryStream memoryStream = new MemoryStream();
				XmlWriter xmlWriter = GenerateModelAction.CreateNewModelXmlWriter(memoryStream);
				IDbConnection dbConnection;
				base.Service.OpenDataSourceConnection(dataSource, base.Service.HowToCreateDataExtensionInstance, false, true, base.Service.UserName, out dbConnection);
				try
				{
					semanticModelGenerator.ReGenerateModel(dbConnection, xmlReader, xmlWriter);
					xmlWriter.Flush();
				}
				catch (Exception ex)
				{
					throw new ModelGenerationErrorException(ex);
				}
				finally
				{
					dbConnection.Close();
				}
				array = memoryStream.ToArray();
			}
			return array;
		}
	}
}
