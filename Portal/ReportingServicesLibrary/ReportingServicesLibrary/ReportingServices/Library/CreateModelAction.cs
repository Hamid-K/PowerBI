using System;
using System.IO;
using Microsoft.ReportingServices.Diagnostics;
using Microsoft.ReportingServices.Diagnostics.Utilities;
using Microsoft.ReportingServices.Library.Soap;
using Microsoft.ReportingServices.Modeling;

namespace Microsoft.ReportingServices.Library
{
	// Token: 0x0200013D RID: 317
	internal sealed class CreateModelAction : CreateItemAction<CreateModelActionParameters, ModelCatalogItem>
	{
		// Token: 0x06000C79 RID: 3193 RVA: 0x0002E828 File Offset: 0x0002CA28
		internal CreateModelAction(RSService service)
			: base("CreateModelAction", service)
		{
			Sku.ThrowIfFeatureNotEnabled(Globals.Configuration.InstanceID, RestrictedFeatures.ReportBuilder);
		}

		// Token: 0x06000C7A RID: 3194 RVA: 0x0002E848 File Offset: 0x0002CA48
		protected override void AddActionToBatch()
		{
			base.Service.Storage.AddBatchRecord(base.BatchID, base.Service.UserName, CatalogCommand.CreateModel, base.ActionParameters.ItemName, "Model", base.ActionParameters.ParentPath, "Parent", null, null, false, base.ActionParameters.ModelDefinition, Property.ThisArrayToXml(base.ActionParameters.Properties));
		}

		// Token: 0x06000C7B RID: 3195 RVA: 0x0002E8B8 File Offset: 0x0002CAB8
		internal override void PerformActionInBatch(CallParameters parameters)
		{
			base.ActionParameters.ItemName = parameters.Item;
			base.ActionParameters.ParentPath = parameters.Parent;
			base.ActionParameters.ModelDefinition = parameters.Content;
			base.ActionParameters.Properties = Property.XmlToThisArray(parameters.Properties);
			this.PerformActionNow();
		}

		// Token: 0x06000C7C RID: 3196 RVA: 0x0002E914 File Offset: 0x0002CB14
		protected override void PrepareForNewItem(ModelCatalogItem modelItem)
		{
			if (base.ActionParameters.ModelDefinition != null)
			{
				modelItem.Content = base.ActionParameters.ModelDefinition;
			}
			ValidationMessageCollection validationMessageCollection;
			SemanticModel semanticModel = ModelCatalogItem.CompileModelDefinition(modelItem.Content, true, base.ActionParameters.ItemName ?? "", out validationMessageCollection);
			base.ActionParameters.Warnings = Warning.ModelingMessagesToWarningArray(validationMessageCollection);
			modelItem.Model = semanticModel;
			modelItem.CompiledDefinition = CreateModelAction.CreateBinarySnapshot(semanticModel, base.Service);
			if (modelItem.Properties.Description == null)
			{
				modelItem.Properties.Description = semanticModel.Description;
			}
			modelItem.Properties.IsAutoGenerated = bool.FalseString;
			UpdateModelDefinitionAction<SetModelDefinitionActionParameters>.PropagateSemanticModelProperties(semanticModel, modelItem.Properties, false);
		}

		// Token: 0x06000C7D RID: 3197 RVA: 0x0002E9C8 File Offset: 0x0002CBC8
		internal static ServerSnapshot CreateBinarySnapshot(SemanticModel model, RSService service)
		{
			RSTrace.CatalogTrace.Assert(model.IsCompiled, "model.IsCompiled == true");
			ModelSnapshot modelSnapshot = service.AllocateNewModelSnapshot(DateTime.Now, "semantic model binary snapshot");
			using (ISnapshotTransaction snapshotTransaction = modelSnapshot.EnterTransactionContext())
			{
				using (Stream stream = ModelCatalogItem.CreateModelChunk(modelSnapshot))
				{
					model.WriteToBinary(stream);
				}
				snapshotTransaction.Commit();
			}
			return modelSnapshot;
		}
	}
}
