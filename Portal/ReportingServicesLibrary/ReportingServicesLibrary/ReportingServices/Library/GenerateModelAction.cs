using System;
using System.Data;
using System.Globalization;
using System.IO;
using System.Xml;
using Microsoft.ReportingServices.Common;
using Microsoft.ReportingServices.DataExtensions;
using Microsoft.ReportingServices.Diagnostics;
using Microsoft.ReportingServices.Diagnostics.Utilities;
using Microsoft.ReportingServices.Extensions;
using Microsoft.ReportingServices.Interfaces;
using Microsoft.ReportingServices.Library.Soap;
using Microsoft.ReportingServices.Modeling;
using Microsoft.ReportingServices.ReportProcessing;

namespace Microsoft.ReportingServices.Library
{
	// Token: 0x0200013F RID: 319
	internal sealed class GenerateModelAction : CreateItemAction<GenerateModelActionParameters, ModelCatalogItem>
	{
		// Token: 0x06000C85 RID: 3205 RVA: 0x0002EACC File Offset: 0x0002CCCC
		internal GenerateModelAction(RSService service)
			: base("GenerateModelAction", service)
		{
			Sku.ThrowIfFeatureNotEnabled(Globals.Configuration.InstanceID, RestrictedFeatures.ReportBuilder);
		}

		// Token: 0x06000C86 RID: 3206 RVA: 0x0002EAEC File Offset: 0x0002CCEC
		protected override void AddActionToBatch()
		{
			base.Service.Storage.AddBatchRecord(base.BatchID, base.Service.UserName, CatalogCommand.GenerateModel, base.ActionParameters.ItemName, "Model", base.ActionParameters.ParentPath, "Parent", base.ActionParameters.DataSourcePath, "DataSource", false, null, Property.ThisArrayToXml(base.ActionParameters.Properties));
		}

		// Token: 0x06000C87 RID: 3207 RVA: 0x0002EB60 File Offset: 0x0002CD60
		internal override void PerformActionInBatch(CallParameters parameters)
		{
			base.ActionParameters.ItemName = parameters.Item;
			base.ActionParameters.ParentPath = parameters.Parent;
			base.ActionParameters.DataSourcePath = parameters.Param;
			base.ActionParameters.Properties = Property.XmlToThisArray(parameters.Properties);
			this.PerformActionNow();
		}

		// Token: 0x06000C88 RID: 3208 RVA: 0x0002EBBC File Offset: 0x0002CDBC
		protected override void PrepareForNewItem(ModelCatalogItem modelItem)
		{
			CatalogItemContext catalogItemContext = new CatalogItemContext(base.Service, base.ActionParameters.DataSourcePath, "DataSource");
			DataSourceCatalogItem dataSourceCatalogItem = (DataSourceCatalogItem)base.Service.CatalogItemFactory.GetCatalogItem(catalogItemContext, ItemType.DataSource, true);
			dataSourceCatalogItem.ThrowIfNoAccess(CommonOperation.ReadProperties);
			byte[] array = base.Service.GenerateModelAction.GenerateModel(dataSourceCatalogItem.DataSourceInfo);
			ValidationMessageCollection validationMessageCollection;
			SemanticModel semanticModel = ModelCatalogItem.CompileModelDefinition(array, true, modelItem.ItemContext.ItemPath.Value, out validationMessageCollection);
			base.ActionParameters.Warnings = Warning.ModelingMessagesToWarningArray(validationMessageCollection);
			DataSourceInfo dataSourceInfo = new DataSourceInfo(ModelCatalogItem.GetDataSourceName(semanticModel), dataSourceCatalogItem.ItemContext.ItemPath.Value, dataSourceCatalogItem.ItemID, true);
			DataSourceInfoCollection dataSourceInfoCollection = new DataSourceInfoCollection();
			dataSourceInfoCollection.Add(dataSourceInfo);
			modelItem.DataSources = dataSourceInfoCollection;
			modelItem.Content = array;
			modelItem.Model = semanticModel;
			modelItem.CompiledDefinition = CreateModelAction.CreateBinarySnapshot(semanticModel, base.Service);
			modelItem.Properties.IsAutoGenerated = bool.TrueString;
			UpdateModelDefinitionAction<SetModelDefinitionActionParameters>.PropagateSemanticModelProperties(semanticModel, modelItem.Properties, true);
		}

		// Token: 0x06000C89 RID: 3209 RVA: 0x0002ECC8 File Offset: 0x0002CEC8
		internal byte[] GenerateModel(DataSourceInfo dataSource)
		{
			dataSource.ThrowIfNotUsable(new ServerDataSourceSettings(Globals.Configuration.IsSurrogatePresent, Global.EnableIntegratedSecurity));
			ReportProcessing.ExecutionType executionType;
			byte[] array;
			using (SurrogateContextFactory.CreateContext(out executionType))
			{
				ISemanticModelGenerator semanticModelGenerator = GenerateModelAction.LoadSemanticModelGenerator(dataSource.Extension);
				if (semanticModelGenerator == null)
				{
					throw new ModelGenerationNotSupportedException();
				}
				MemoryStream memoryStream = new MemoryStream();
				XmlWriter xmlWriter = GenerateModelAction.CreateNewModelXmlWriter(memoryStream);
				IDbConnection dbConnection;
				base.Service.OpenDataSourceConnection(dataSource, base.Service.HowToCreateDataExtensionInstance, false, true, base.Service.UserName, out dbConnection);
				try
				{
					semanticModelGenerator.Generate(dbConnection, xmlWriter);
					xmlWriter.Flush();
				}
				catch (Exception ex)
				{
					throw new ModelGenerationErrorException(ex);
				}
				finally
				{
					dbConnection.Close();
				}
				array = memoryStream.ToArray();
			}
			return array;
		}

		// Token: 0x06000C8A RID: 3210 RVA: 0x0002EDA0 File Offset: 0x0002CFA0
		internal static XmlWriter CreateNewModelXmlWriter(Stream newModelStream)
		{
			XmlWriterSettings writerSettings = Microsoft.ReportingServices.Common.XmlRWFactory.GetWriterSettings();
			writerSettings.Indent = true;
			return XmlWriter.Create(newModelStream, writerSettings);
		}

		// Token: 0x06000C8B RID: 3211 RVA: 0x0002EDC4 File Offset: 0x0002CFC4
		internal static ISemanticModelGenerator LoadSemanticModelGenerator(string genExtensionName)
		{
			IExtension newInstanceExtensionClass = ExtensionClassFactory.GetNewInstanceExtensionClass(genExtensionName, "ModelGeneration");
			ITraceableComponent traceableComponent = newInstanceExtensionClass as ITraceableComponent;
			if (traceableComponent != null)
			{
				string text = string.Format(CultureInfo.InvariantCulture, "Semantic Model Generator: {0}\r\n{1}", newInstanceExtensionClass.GetType().Name, "{0}");
				traceableComponent.SetTraceLog(new TraceableComponentLog(RSTrace.SMGTracer, text));
			}
			return newInstanceExtensionClass as ISemanticModelGenerator;
		}
	}
}
