using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Xml;
using System.Xml.Schema;
using Microsoft.ReportingServices.DataExtensions;
using Microsoft.ReportingServices.DataShapeDefinition;
using Microsoft.ReportingServices.Diagnostics;
using Microsoft.ReportingServices.Diagnostics.Utilities;
using Microsoft.ReportingServices.OnDemandReportRendering;
using Microsoft.ReportingServices.RdlExpressions;
using Microsoft.ReportingServices.ReportIntermediateFormat;
using Microsoft.ReportingServices.ReportIntermediateFormat.Persistence;
using Microsoft.ReportingServices.ReportProcessing;

namespace Microsoft.ReportingServices.ReportPublishing
{
	// Token: 0x02000388 RID: 904
	internal sealed class ReportPublishing
	{
		// Token: 0x060022B6 RID: 8886 RVA: 0x00084F98 File Offset: 0x00083198
		private Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel ReadGaugePanel(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel = new Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel(this.GenerateID(), parent);
			gaugePanel.Name = this.m_reader.GetAttribute("Name");
			if ((context.Location & LocationFlags.InDataRegion) != (LocationFlags)0)
			{
				Global.Tracer.Assert(this.m_nestedDataRegions != null, "(m_nestedDataRegions != null)");
				this.m_nestedDataRegions.Add(gaugePanel);
			}
			context.Location = context.Location | LocationFlags.InDataSet | LocationFlags.InDataRegion;
			context.ObjectType = gaugePanel.ObjectType;
			context.ObjectName = gaugePanel.Name;
			this.RegisterDataRegion(gaugePanel);
			bool flag = true;
			if (!this.m_reportItemNames.Validate(context.ObjectType, context.ObjectName, this.m_errorContext))
			{
				flag = false;
			}
			if (this.m_scopeNames.Validate(false, context.ObjectName, context.ObjectType, context.ObjectName, this.m_errorContext))
			{
				this.m_reportScopes.Add(gaugePanel.Name, gaugePanel);
			}
			else
			{
				flag = false;
			}
			if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsDataRegionInPageSection, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
				flag = false;
			}
			StyleInformation styleInformation = null;
			IdcRelationship idcRelationship = null;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("GaugePanel" == this.m_reader.LocalName)
							{
								flag2 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 3:
								if (localName == "Top")
								{
									gaugePanel.Top = this.ReadSize();
								}
								break;
							case 4:
								if (localName == "Left")
								{
									gaugePanel.Left = this.ReadSize();
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											gaugePanel.Width = this.ReadSize();
										}
									}
								}
								else if (localName == "Style")
								{
									styleInformation = this.ReadStyle(context);
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'Z')
									{
										if (localName == "ZIndex")
										{
											gaugePanel.ZIndex = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "Height")
								{
									gaugePanel.Height = this.ReadSize();
								}
								break;
							}
							case 7:
							{
								char c = localName[0];
								if (c != 'F')
								{
									if (c == 'T')
									{
										if (localName == "ToolTip")
										{
											gaugePanel.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "Filters")
								{
									gaugePanel.Filters = this.ReadFilters(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.DataRegionFilters, context);
								}
								break;
							}
							case 8:
							{
								char c = localName[0];
								if (c != 'B')
								{
									if (c != 'P')
									{
										if (c == 'T')
										{
											if (localName == "TopImage")
											{
												gaugePanel.TopImage = this.ReadTopImage(gaugePanel, context, "TopImage");
											}
										}
									}
									else if (localName == "PageName")
									{
										gaugePanel.PageName = this.ReadPageNameExpression(context);
									}
								}
								else if (localName == "Bookmark")
								{
									gaugePanel.Bookmark = this.ReadBookmarkExpression(this.m_reader.LocalName, context);
								}
								break;
							}
							case 9:
							{
								char c = localName[0];
								if (c != 'B')
								{
									if (c == 'P')
									{
										if (localName == "PageBreak")
										{
											this.ReadPageBreak(gaugePanel, context);
										}
									}
								}
								else if (localName == "BackFrame")
								{
									gaugePanel.BackFrame = this.ReadBackFrame(gaugePanel, context);
								}
								break;
							}
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'V')
									{
										if (localName == "Visibility")
										{
											gaugePanel.Visibility = this.ReadVisibility(context);
										}
									}
								}
								else if (localName == "AutoLayout")
								{
									gaugePanel.AutoLayout = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 11:
							{
								char c = localName[5];
								switch (c)
								{
								case 'I':
									if (localName == "GaugeImages")
									{
										gaugePanel.GaugeImages = this.ReadGaugeImages(gaugePanel, context);
									}
									break;
								case 'J':
								case 'K':
									break;
								case 'L':
									if (localName == "GaugeLabels")
									{
										gaugePanel.GaugeLabels = this.ReadGaugeLabels(gaugePanel, context);
									}
									break;
								case 'M':
									if (localName == "GaugeMember")
									{
										int num = 0;
										gaugePanel.GaugeMember = this.ReadGaugeMember(gaugePanel, context, 0, ref num);
									}
									break;
								default:
									if (c == 'e')
									{
										if (localName == "DataSetName")
										{
											gaugePanel.DataSetName = this.m_reader.ReadString();
										}
									}
									break;
								}
								break;
							}
							case 12:
							{
								char c = localName[1];
								if (c <= 'e')
								{
									if (c != 'a')
									{
										if (c == 'e')
										{
											if (localName == "Relationship")
											{
												idcRelationship = this.ReadRelationship(context);
											}
										}
									}
									else if (localName == "RadialGauges")
									{
										gaugePanel.RadialGauges = this.ReadRadialGauges(gaugePanel, context);
									}
								}
								else if (c != 'i')
								{
									if (c == 'n')
									{
										if (localName == "AntiAliasing")
										{
											gaugePanel.AntiAliasing = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!gaugePanel.AntiAliasing.IsExpression)
											{
												Validator.ValidateGaugeAntiAliasings(gaugePanel.AntiAliasing.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "LinearGauges")
								{
									gaugePanel.LinearGauges = this.ReadLinearGauges(gaugePanel, context);
								}
								break;
							}
							case 13:
								if (localName == "NoRowsMessage")
								{
									gaugePanel.NoRowsMessage = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 15:
							{
								char c = localName[1];
								if (c <= 'h')
								{
									if (c != 'a')
									{
										if (c == 'h')
										{
											if (localName == "ShadowIntensity")
											{
												gaugePanel.ShadowIntensity = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
											}
										}
									}
									else if (localName == "DataElementName")
									{
										gaugePanel.DataElementName = this.m_reader.ReadString();
									}
								}
								else if (c != 'o')
								{
									if (c == 't')
									{
										if (localName == "StateIndicators")
										{
											gaugePanel.StateIndicators = this.ReadStateIndicators(gaugePanel, context);
										}
									}
								}
								else if (localName == "SortExpressions")
								{
									gaugePanel.Sorting = this.ReadSortExpressions(true, context);
								}
								break;
							}
							case 16:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'D')
									{
										if (localName == "DocumentMapLabel")
										{
											gaugePanel.DocumentMapLabel = this.ReadDocumentMapLabelExpression(this.m_reader.LocalName, context);
										}
									}
								}
								else if (localName == "CustomProperties")
								{
									gaugePanel.CustomProperties = this.ReadCustomProperties(context);
								}
								break;
							}
							case 17:
							{
								char c = localName[0];
								if (c != 'D')
								{
									if (c == 'N')
									{
										if (localName == "NumericIndicators")
										{
											gaugePanel.NumericIndicators = this.ReadNumericIndicators(gaugePanel, context);
										}
									}
								}
								else if (localName == "DataElementOutput")
								{
									gaugePanel.DataElementOutput = this.ReadDataElementOutput();
								}
								break;
							}
							case 23:
								if (localName == "TextAntiAliasingQuality")
								{
									gaugePanel.TextAntiAliasingQuality = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!gaugePanel.TextAntiAliasingQuality.IsExpression)
									{
										Validator.ValidateTextAntiAliasingQualities(gaugePanel.TextAntiAliasingQuality.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag2);
			}
			gaugePanel.DataScopeInfo.SetRelationship(gaugePanel.DataSetName, idcRelationship);
			if (styleInformation != null)
			{
				styleInformation.Filter(StyleOwnerType.GaugePanel, gaugePanel.NoRowsMessage != null);
				gaugePanel.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, false, this.m_errorContext);
			}
			if (gaugePanel.GaugeMember == null)
			{
				this.AddStaticGaugeMember(this.GenerateID(), gaugePanel);
			}
			this.AddStaticGaugeRowMember(this.GenerateID(), gaugePanel);
			this.AddGaugeRow(this.GenerateID(), this.GenerateID(), gaugePanel);
			if (gaugePanel.StyleClass != null)
			{
				PublishingValidator.ValidateBorderColorNotTransparent(gaugePanel.ObjectType, gaugePanel.Name, gaugePanel.StyleClass, "BorderColor", this.m_errorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(gaugePanel.ObjectType, gaugePanel.Name, gaugePanel.StyleClass, "BorderColorBottom", this.m_errorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(gaugePanel.ObjectType, gaugePanel.Name, gaugePanel.StyleClass, "BorderColorTop", this.m_errorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(gaugePanel.ObjectType, gaugePanel.Name, gaugePanel.StyleClass, "BorderColorLeft", this.m_errorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(gaugePanel.ObjectType, gaugePanel.Name, gaugePanel.StyleClass, "BorderColorRight", this.m_errorContext);
			}
			gaugePanel.Computed = true;
			if (flag)
			{
				this.m_hasImageStreams = true;
				return gaugePanel;
			}
			return null;
		}

		// Token: 0x060022B7 RID: 8887 RVA: 0x00085AC1 File Offset: 0x00083CC1
		private void AddStaticGaugeMember(int ID, Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel)
		{
			gaugePanel.GaugeMember = new Microsoft.ReportingServices.ReportIntermediateFormat.GaugeMember(ID, gaugePanel);
			gaugePanel.GaugeMember.Level = 0;
			gaugePanel.GaugeMember.ColSpan = 1;
			gaugePanel.GaugeMember.IsColumn = true;
		}

		// Token: 0x060022B8 RID: 8888 RVA: 0x00085AF4 File Offset: 0x00083CF4
		private void AddStaticGaugeRowMember(int ID, Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel)
		{
			gaugePanel.GaugeRowMember = new Microsoft.ReportingServices.ReportIntermediateFormat.GaugeMember(ID, gaugePanel);
			gaugePanel.GaugeRowMember.Level = 0;
			gaugePanel.GaugeRowMember.RowSpan = 1;
		}

		// Token: 0x060022B9 RID: 8889 RVA: 0x00085B1C File Offset: 0x00083D1C
		private void AddGaugeRow(int rowID, int cellID, Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel)
		{
			gaugePanel.GaugeRow = new Microsoft.ReportingServices.ReportIntermediateFormat.GaugeRow(rowID, gaugePanel);
			gaugePanel.GaugeRow.GaugeCell = new Microsoft.ReportingServices.ReportIntermediateFormat.GaugeCell(cellID, gaugePanel);
			this.m_aggregateHolderList.Add(gaugePanel.GaugeRow.GaugeCell);
			this.m_runningValueHolderList.Add(gaugePanel.GaugeRow.GaugeCell);
		}

		// Token: 0x060022BA RID: 8890 RVA: 0x00085B74 File Offset: 0x00083D74
		private Microsoft.ReportingServices.ReportIntermediateFormat.GaugeMember ReadGaugeMember(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, int level, ref int aLeafNodes)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.GaugeMember gaugeMember = new Microsoft.ReportingServices.ReportIntermediateFormat.GaugeMember(this.GenerateID(), gaugePanel);
			this.m_runningValueHolderList.Add(gaugeMember);
			gaugeMember.IsColumn = true;
			gaugeMember.Level = level;
			bool flag = false;
			int num = 0;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("GaugeMember" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Group"))
						{
							if (!(localName == "SortExpressions"))
							{
								if (localName == "GaugeMember")
								{
									gaugeMember.ChildGaugeMember = this.ReadGaugeMember(gaugePanel, context, level + 1, ref num);
								}
							}
							else
							{
								gaugeMember.Sorting = this.ReadSortExpressions(false, context);
							}
						}
						else
						{
							gaugeMember.Grouping = this.ReadGrouping(gaugeMember, context);
							if (gaugeMember.Grouping.PageBreak != null && gaugeMember.Grouping.PageBreak.BreakLocation != PageBreakLocation.None)
							{
								this.m_errorContext.Register(ProcessingErrorCode.rsPageBreakOnGaugeGroup, Severity.Warning, context.ObjectType, context.ObjectName, "Group", new string[] { gaugeMember.Grouping.Name });
							}
						}
					}
				}
				while (!flag);
			}
			if (gaugeMember.ChildGaugeMember == null)
			{
				aLeafNodes++;
				gaugeMember.ColSpan = 1;
			}
			else
			{
				aLeafNodes += num;
				gaugeMember.ColSpan = num;
			}
			this.ValidateAndProcessMemberGroupAndSort(gaugeMember, context);
			return gaugeMember;
		}

		// Token: 0x060022BB RID: 8891 RVA: 0x00085D00 File Offset: 0x00083F00
		private Microsoft.ReportingServices.ReportIntermediateFormat.TopImage ReadTopImage(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, string elementName)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.TopImage topImage = new Microsoft.ReportingServices.ReportIntermediateFormat.TopImage(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (elementName == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Source"))
						{
							if (!(localName == "Value"))
							{
								if (!(localName == "MIMEType"))
								{
									if (!(localName == "HueColor"))
									{
										if (localName == "TransparentColor")
										{
											topImage.TransparentColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
									else
									{
										topImage.HueColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
								else
								{
									topImage.MIMEType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
							}
							else
							{
								topImage.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							}
						}
						else
						{
							topImage.Source = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							if (!topImage.Source.IsExpression)
							{
								Validator.ValidateImageSourceType(topImage.Source.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
							}
						}
					}
				}
				while (!flag);
			}
			return topImage;
		}

		// Token: 0x060022BC RID: 8892 RVA: 0x00085E90 File Offset: 0x00084090
		private Microsoft.ReportingServices.ReportIntermediateFormat.PointerImage ReadPointerImage(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.PointerImage pointerImage = new Microsoft.ReportingServices.ReportIntermediateFormat.PointerImage(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("PointerImage" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 5:
								if (localName == "Value")
								{
									pointerImage.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 6:
								if (localName == "Source")
								{
									pointerImage.Source = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!pointerImage.Source.IsExpression)
									{
										Validator.ValidateImageSourceType(pointerImage.Source.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 7:
							{
								char c = localName[6];
								if (c != 'X')
								{
									if (c == 'Y')
									{
										if (localName == "OffsetY")
										{
											pointerImage.OffsetY = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "OffsetX")
								{
									pointerImage.OffsetX = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 8:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'M')
									{
										if (localName == "MIMEType")
										{
											pointerImage.MIMEType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "HueColor")
								{
									pointerImage.HueColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 9:
							case 10:
							case 11:
								break;
							case 12:
								if (localName == "Transparency")
								{
									pointerImage.Transparency = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							default:
								if (length == 16)
								{
									if (localName == "TransparentColor")
									{
										pointerImage.TransparentColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return pointerImage;
		}

		// Token: 0x060022BD RID: 8893 RVA: 0x0008615C File Offset: 0x0008435C
		private Microsoft.ReportingServices.ReportIntermediateFormat.FrameImage ReadFrameImage(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.FrameImage frameImage = new Microsoft.ReportingServices.ReportIntermediateFormat.FrameImage(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("FrameImage" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 5:
								if (localName == "Value")
								{
									frameImage.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 6:
								if (localName == "Source")
								{
									frameImage.Source = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!frameImage.Source.IsExpression)
									{
										Validator.ValidateImageSourceType(frameImage.Source.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 7:
							case 10:
							case 11:
								break;
							case 8:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'M')
									{
										if (localName == "MIMEType")
										{
											frameImage.MIMEType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "HueColor")
								{
									frameImage.HueColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 9:
								if (localName == "ClipImage")
								{
									frameImage.ClipImage = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 12:
								if (localName == "Transparency")
								{
									frameImage.Transparency = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							default:
								if (length == 16)
								{
									if (localName == "TransparentColor")
									{
										frameImage.TransparentColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return frameImage;
		}

		// Token: 0x060022BE RID: 8894 RVA: 0x000863CC File Offset: 0x000845CC
		private Microsoft.ReportingServices.ReportIntermediateFormat.CapImage ReadCapImage(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.CapImage capImage = new Microsoft.ReportingServices.ReportIntermediateFormat.CapImage(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("CapImage" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 5:
								if (localName == "Value")
								{
									capImage.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 6:
								if (localName == "Source")
								{
									capImage.Source = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 7:
							{
								char c = localName[6];
								if (c != 'X')
								{
									if (c == 'Y')
									{
										if (localName == "OffsetY")
										{
											capImage.OffsetY = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "OffsetX")
								{
									capImage.OffsetX = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 8:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'M')
									{
										if (localName == "MIMEType")
										{
											capImage.MIMEType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "HueColor")
								{
									capImage.HueColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							default:
								if (length == 16)
								{
									if (localName == "TransparentColor")
									{
										capImage.TransparentColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return capImage;
		}

		// Token: 0x060022BF RID: 8895 RVA: 0x0008661C File Offset: 0x0008481C
		private Microsoft.ReportingServices.ReportIntermediateFormat.BackFrame ReadBackFrame(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.BackFrame backFrame = new Microsoft.ReportingServices.ReportIntermediateFormat.BackFrame(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("BackFrame" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							if (length <= 10)
							{
								if (length != 5)
								{
									if (length == 10)
									{
										char c = localName[6];
										if (c <= 'i')
										{
											if (c != 'h')
											{
												if (c == 'i')
												{
													if (localName == "FrameWidth")
													{
														backFrame.FrameWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
													}
												}
											}
											else if (localName == "FrameShape")
											{
												backFrame.FrameShape = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												if (!backFrame.FrameShape.IsExpression)
												{
													Validator.ValidateGaugeFrameShapes(backFrame.FrameShape.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
												}
											}
										}
										else if (c != 'm')
										{
											if (c == 't')
											{
												if (localName == "FrameStyle")
												{
													backFrame.FrameStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
													if (!backFrame.FrameStyle.IsExpression)
													{
														Validator.ValidateGaugeFrameStyles(backFrame.FrameStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
													}
												}
											}
										}
										else if (localName == "FrameImage")
										{
											backFrame.FrameImage = this.ReadFrameImage(gaugePanel, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									backFrame.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
							}
							else if (length != 11)
							{
								if (length == 15)
								{
									if (localName == "FrameBackground")
									{
										backFrame.FrameBackground = this.ReadFrameBackground(gaugePanel, context);
									}
								}
							}
							else if (localName == "GlassEffect")
							{
								backFrame.GlassEffect = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								if (!backFrame.GlassEffect.IsExpression)
								{
									Validator.ValidateGaugeGlassEffects(backFrame.GlassEffect.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
								}
							}
						}
					}
				}
				while (!flag);
			}
			return backFrame;
		}

		// Token: 0x060022C0 RID: 8896 RVA: 0x00086910 File Offset: 0x00084B10
		private Microsoft.ReportingServices.ReportIntermediateFormat.FrameBackground ReadFrameBackground(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.FrameBackground frameBackground = new Microsoft.ReportingServices.ReportIntermediateFormat.FrameBackground(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("FrameBackground" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "Style")
					{
						StyleInformation styleInformation = this.ReadStyle(context);
						styleInformation.Filter(StyleOwnerType.GaugePanel, false);
						frameBackground.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
					}
				}
				while (!flag);
			}
			return frameBackground;
		}

		// Token: 0x060022C1 RID: 8897 RVA: 0x000869CC File Offset: 0x00084BCC
		private Microsoft.ReportingServices.ReportIntermediateFormat.CustomLabel ReadCustomLabel(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.CustomLabel customLabel = new Microsoft.ReportingServices.ReportIntermediateFormat.CustomLabel(gaugePanel);
			customLabel.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "CustomLabel", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, customLabel.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("CustomLabel" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 4:
								if (localName == "Text")
								{
									customLabel.Text = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'V')
									{
										if (localName == "Value")
										{
											customLabel.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									customLabel.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
								break;
							}
							case 6:
								if (localName == "Hidden")
								{
									customLabel.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 9:
							{
								char c = localName[0];
								if (c != 'F')
								{
									if (c == 'P')
									{
										if (localName == "Placement")
										{
											customLabel.Placement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!customLabel.Placement.IsExpression)
											{
												Validator.ValidateGaugeLabelPlacements(customLabel.Placement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "FontAngle")
								{
									customLabel.FontAngle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 11:
								if (localName == "RotateLabel")
								{
									customLabel.RotateLabel = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 13:
								if (localName == "TickMarkStyle")
								{
									customLabel.TickMarkStyle = this.ReadTickMarkStyle(gaugePanel, context);
								}
								break;
							case 14:
								if (localName == "UseFontPercent")
								{
									customLabel.UseFontPercent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 15:
								if (localName == "AllowUpsideDown")
								{
									customLabel.AllowUpsideDown = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 17:
								if (localName == "DistanceFromScale")
								{
									customLabel.DistanceFromScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return customLabel;
		}

		// Token: 0x060022C2 RID: 8898 RVA: 0x00086D90 File Offset: 0x00084F90
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.CustomLabel> ReadCustomLabels(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.CustomLabel> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.CustomLabel>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "CustomLabels")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "CustomLabel")
					{
						list.Add(this.ReadCustomLabel(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022C3 RID: 8899 RVA: 0x00086E20 File Offset: 0x00085020
		private Microsoft.ReportingServices.ReportIntermediateFormat.TickMarkStyle ReadTickMarkStyle(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.TickMarkStyle tickMarkStyle = new Microsoft.ReportingServices.ReportIntermediateFormat.TickMarkStyle(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("TickMarkStyle" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
							{
								char c = localName[1];
								if (c != 'h')
								{
									if (c != 'i')
									{
										if (c == 't')
										{
											if (localName == "Style")
											{
												StyleInformation styleInformation = this.ReadStyle(context);
												styleInformation.Filter(StyleOwnerType.GaugePanel, false);
												tickMarkStyle.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
											}
										}
									}
									else if (localName == "Width")
									{
										tickMarkStyle.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "Shape")
								{
									tickMarkStyle.Shape = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!tickMarkStyle.Shape.IsExpression)
									{
										Validator.ValidateGaugeTickMarkShapes(tickMarkStyle.Shape.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'L')
									{
										if (localName == "Length")
										{
											tickMarkStyle.Length = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Hidden")
								{
									tickMarkStyle.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 9:
								if (localName == "Placement")
								{
									tickMarkStyle.Placement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!tickMarkStyle.Placement.IsExpression)
									{
										Validator.ValidateGaugeLabelPlacements(tickMarkStyle.Placement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 13:
								if (localName == "TickMarkImage")
								{
									tickMarkStyle.TickMarkImage = this.ReadTopImage(gaugePanel, context, "TickMarkImage");
								}
								break;
							case 14:
								if (localName == "EnableGradient")
								{
									tickMarkStyle.EnableGradient = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 15:
								if (localName == "GradientDensity")
								{
									tickMarkStyle.GradientDensity = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 17:
								if (localName == "DistanceFromScale")
								{
									tickMarkStyle.DistanceFromScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return tickMarkStyle;
		}

		// Token: 0x060022C4 RID: 8900 RVA: 0x000871BC File Offset: 0x000853BC
		private Microsoft.ReportingServices.ReportIntermediateFormat.GaugeTickMarks ReadGaugeTickMarks(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, string elementName)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.GaugeTickMarks gaugeTickMarks = new Microsoft.ReportingServices.ReportIntermediateFormat.GaugeTickMarks(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (elementName == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
							{
								char c = localName[1];
								if (c != 'h')
								{
									if (c != 'i')
									{
										if (c == 't')
										{
											if (localName == "Style")
											{
												StyleInformation styleInformation = this.ReadStyle(context);
												styleInformation.Filter(StyleOwnerType.GaugePanel, false);
												gaugeTickMarks.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
											}
										}
									}
									else if (localName == "Width")
									{
										gaugeTickMarks.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "Shape")
								{
									gaugeTickMarks.Shape = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!gaugeTickMarks.Shape.IsExpression)
									{
										Validator.ValidateGaugeTickMarkShapes(gaugeTickMarks.Shape.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'L')
									{
										if (localName == "Length")
										{
											gaugeTickMarks.Length = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Hidden")
								{
									gaugeTickMarks.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 8:
								if (localName == "Interval")
								{
									gaugeTickMarks.Interval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 9:
								if (localName == "Placement")
								{
									gaugeTickMarks.Placement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!gaugeTickMarks.Placement.IsExpression)
									{
										Validator.ValidateGaugeLabelPlacements(gaugeTickMarks.Placement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 13:
								if (localName == "TickMarkImage")
								{
									gaugeTickMarks.TickMarkImage = this.ReadTopImage(gaugePanel, context, "TickMarkImage");
								}
								break;
							case 14:
							{
								char c = localName[0];
								if (c != 'E')
								{
									if (c == 'I')
									{
										if (localName == "IntervalOffset")
										{
											gaugeTickMarks.IntervalOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "EnableGradient")
								{
									gaugeTickMarks.EnableGradient = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 15:
								if (localName == "GradientDensity")
								{
									gaugeTickMarks.GradientDensity = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 17:
								if (localName == "DistanceFromScale")
								{
									gaugeTickMarks.DistanceFromScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return gaugeTickMarks;
		}

		// Token: 0x060022C5 RID: 8901 RVA: 0x000875E0 File Offset: 0x000857E0
		private Microsoft.ReportingServices.ReportIntermediateFormat.GaugeImage ReadGaugeImage(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.GaugeImage gaugeImage = new Microsoft.ReportingServices.ReportIntermediateFormat.GaugeImage(gaugePanel, gaugePanel.GenerateActionOwnerID());
			gaugeImage.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "GaugeImage", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, gaugeImage.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("GaugeImage" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 3:
								if (localName == "Top")
								{
									gaugeImage.Top = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 4:
								if (localName == "Left")
								{
									gaugeImage.Left = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 5:
								switch (localName[0])
								{
								case 'S':
									if (localName == "Style")
									{
										StyleInformation styleInformation = this.ReadStyle(context);
										styleInformation.Filter(StyleOwnerType.GaugePanel, false);
										gaugeImage.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
									}
									break;
								case 'V':
									if (localName == "Value")
									{
										gaugeImage.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
									break;
								case 'W':
									if (localName == "Width")
									{
										gaugeImage.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
									break;
								}
								break;
							case 6:
							{
								char c = localName[1];
								if (c <= 'e')
								{
									if (c != 'I')
									{
										if (c == 'e')
										{
											if (localName == "Height")
											{
												gaugeImage.Height = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
											}
										}
									}
									else if (localName == "ZIndex")
									{
										gaugeImage.ZIndex = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
									}
								}
								else if (c != 'i')
								{
									if (c == 'o')
									{
										if (localName == "Source")
										{
											gaugeImage.Source = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "Hidden")
								{
									gaugeImage.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 7:
								if (localName == "ToolTip")
								{
									gaugeImage.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
							case 9:
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'P')
									{
										if (localName == "ParentItem")
										{
											gaugeImage.ParentItem = this.m_reader.ReadString();
										}
									}
								}
								else if (localName == "ActionInfo")
								{
									gaugeImage.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							}
							default:
								if (length == 16)
								{
									if (localName == "TransparentColor")
									{
										gaugeImage.TransparentColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return gaugeImage;
		}

		// Token: 0x060022C6 RID: 8902 RVA: 0x00087A2C File Offset: 0x00085C2C
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.GaugeImage> ReadGaugeImages(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.GaugeImage> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.GaugeImage>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "GaugeImages")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "GaugeImage")
					{
						list.Add(this.ReadGaugeImage(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022C7 RID: 8903 RVA: 0x00087ABC File Offset: 0x00085CBC
		private Microsoft.ReportingServices.ReportIntermediateFormat.GaugeInputValue ReadGaugeInputValue(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, string inputValueName)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.GaugeInputValue gaugeInputValue = new Microsoft.ReportingServices.ReportIntermediateFormat.GaugeInputValue(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (inputValueName == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 5:
								if (localName == "Value")
								{
									gaugeInputValue.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 6:
							case 8:
							case 9:
								break;
							case 7:
								if (localName == "Formula")
								{
									gaugeInputValue.Formula = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!gaugeInputValue.Formula.IsExpression)
									{
										Validator.ValidateGaugeInputValueFormulas(gaugeInputValue.Formula.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 10:
							{
								char c = localName[1];
								if (c != 'a')
								{
									if (c != 'i')
									{
										if (c == 'u')
										{
											if (localName == "Multiplier")
											{
												gaugeInputValue.Multiplier = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
											}
										}
									}
									else if (localName == "MinPercent")
									{
										gaugeInputValue.MinPercent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "MaxPercent")
								{
									gaugeInputValue.MaxPercent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 11:
								if (localName == "AddConstant")
								{
									gaugeInputValue.AddConstant = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							default:
								if (length != 15)
								{
									if (length == 17)
									{
										if (localName == "DataElementOutput")
										{
											gaugeInputValue.DataElementOutput = this.ReadDataElementOutput();
										}
									}
								}
								else if (localName == "DataElementName")
								{
									gaugeInputValue.DataElementName = this.m_reader.ReadString();
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return gaugeInputValue;
		}

		// Token: 0x060022C8 RID: 8904 RVA: 0x00087D50 File Offset: 0x00085F50
		private Microsoft.ReportingServices.ReportIntermediateFormat.GaugeLabel ReadGaugeLabel(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.GaugeLabel gaugeLabel = new Microsoft.ReportingServices.ReportIntermediateFormat.GaugeLabel(gaugePanel, gaugePanel.GenerateActionOwnerID());
			gaugeLabel.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "GaugeLabel", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, gaugeLabel.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("GaugeLabel" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 3:
								if (localName == "Top")
								{
									gaugeLabel.Top = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 4:
							{
								char c = localName[0];
								if (c != 'L')
								{
									if (c == 'T')
									{
										if (localName == "Text")
										{
											gaugeLabel.Text = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "Left")
								{
									gaugeLabel.Left = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 5:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c != 'S')
									{
										if (c == 'W')
										{
											if (localName == "Width")
											{
												gaugeLabel.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
											}
										}
									}
									else if (localName == "Style")
									{
										StyleInformation styleInformation = this.ReadStyle(context);
										styleInformation.FilterGaugeLabelStyle();
										gaugeLabel.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
									}
								}
								else if (localName == "Angle")
								{
									gaugeLabel.Angle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 6:
							{
								char c = localName[1];
								if (c != 'I')
								{
									if (c != 'e')
									{
										if (c == 'i')
										{
											if (localName == "Hidden")
											{
												gaugeLabel.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "Height")
									{
										gaugeLabel.Height = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "ZIndex")
								{
									gaugeLabel.ZIndex = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							}
							case 7:
								if (localName == "ToolTip")
								{
									gaugeLabel.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c != 'P')
									{
										if (c == 'R')
										{
											if (localName == "ResizeMode")
											{
												gaugeLabel.ResizeMode = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												if (!gaugeLabel.ResizeMode.IsExpression)
												{
													Validator.ValidateGaugeResizeModes(gaugeLabel.ResizeMode.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
												}
											}
										}
									}
									else if (localName == "ParentItem")
									{
										gaugeLabel.ParentItem = this.m_reader.ReadString();
									}
								}
								else if (localName == "ActionInfo")
								{
									gaugeLabel.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							}
							case 14:
								if (localName == "UseFontPercent")
								{
									gaugeLabel.UseFontPercent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 16:
								if (localName == "TextShadowOffset")
								{
									gaugeLabel.TextShadowOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return gaugeLabel;
		}

		// Token: 0x060022C9 RID: 8905 RVA: 0x00088258 File Offset: 0x00086458
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.GaugeLabel> ReadGaugeLabels(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.GaugeLabel> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.GaugeLabel>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "GaugeLabels")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "GaugeLabel")
					{
						list.Add(this.ReadGaugeLabel(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022CA RID: 8906 RVA: 0x000882E8 File Offset: 0x000864E8
		private Microsoft.ReportingServices.ReportIntermediateFormat.LinearGauge ReadLinearGauge(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.LinearGauge linearGauge = new Microsoft.ReportingServices.ReportIntermediateFormat.LinearGauge(gaugePanel, gaugePanel.GenerateActionOwnerID());
			linearGauge.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "LinearGauge", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, linearGauge.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("LinearGauge" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 3:
								if (localName == "Top")
								{
									linearGauge.Top = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 4:
								if (localName == "Left")
								{
									linearGauge.Left = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											linearGauge.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									linearGauge.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
								break;
							}
							case 6:
							{
								char c = localName[1];
								if (c != 'I')
								{
									if (c != 'e')
									{
										if (c == 'i')
										{
											if (localName == "Hidden")
											{
												linearGauge.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "Height")
									{
										linearGauge.Height = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "ZIndex")
								{
									linearGauge.ZIndex = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							}
							case 7:
								if (localName == "ToolTip")
								{
									linearGauge.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
								if (localName == "TopImage")
								{
									linearGauge.TopImage = this.ReadTopImage(gaugePanel, context, "TopImage");
								}
								break;
							case 9:
								if (localName == "BackFrame")
								{
									linearGauge.BackFrame = this.ReadBackFrame(gaugePanel, context);
								}
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'P')
									{
										if (localName == "ParentItem")
										{
											linearGauge.ParentItem = this.m_reader.ReadString();
										}
									}
								}
								else if (localName == "ActionInfo")
								{
									linearGauge.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							}
							case 11:
							{
								char c = localName[0];
								if (c <= 'C')
								{
									if (c != 'A')
									{
										if (c == 'C')
										{
											if (localName == "ClipContent")
											{
												linearGauge.ClipContent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "AspectRatio")
									{
										linearGauge.AspectRatio = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (c != 'G')
								{
									if (c == 'O')
									{
										if (localName == "Orientation")
										{
											linearGauge.Orientation = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!linearGauge.Orientation.IsExpression)
											{
												Validator.ValidateGaugeOrientations(linearGauge.Orientation.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "GaugeScales")
								{
									linearGauge.GaugeScales = this.ReadLinearScales(gaugePanel, context);
								}
								break;
							}
							}
						}
					}
				}
				while (!flag);
			}
			return linearGauge;
		}

		// Token: 0x060022CB RID: 8907 RVA: 0x00088800 File Offset: 0x00086A00
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.LinearGauge> ReadLinearGauges(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.LinearGauge> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.LinearGauge>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "LinearGauges")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "LinearGauge")
					{
						list.Add(this.ReadLinearGauge(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022CC RID: 8908 RVA: 0x00088890 File Offset: 0x00086A90
		private Microsoft.ReportingServices.ReportIntermediateFormat.LinearPointer ReadLinearPointer(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.LinearPointer linearPointer = new Microsoft.ReportingServices.ReportIntermediateFormat.LinearPointer(gaugePanel, gaugePanel.GenerateActionOwnerID());
			linearPointer.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "LinearPointer", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, linearPointer.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("LinearPointer" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 4:
								if (localName == "Type")
								{
									linearPointer.Type = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!linearPointer.Type.IsExpression)
									{
										Validator.ValidateLinearPointerTypes(linearPointer.Type.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											linearPointer.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									linearPointer.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
								break;
							}
							case 6:
								if (localName == "Hidden")
								{
									linearPointer.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 7:
								if (localName == "ToolTip")
								{
									linearPointer.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
								if (localName == "BarStart")
								{
									linearPointer.BarStart = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!linearPointer.BarStart.IsExpression)
									{
										Validator.ValidateGaugeBarStarts(linearPointer.BarStart.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 9:
								if (localName == "Placement")
								{
									linearPointer.Placement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!linearPointer.Placement.IsExpression)
									{
										Validator.ValidateGaugePointerPlacements(linearPointer.Placement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 10:
								if (localName == "ActionInfo")
								{
									linearPointer.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							case 11:
							{
								char c = localName[0];
								if (c != 'M')
								{
									if (c == 'T')
									{
										if (localName == "Thermometer")
										{
											linearPointer.Thermometer = this.ReadThermometer(gaugePanel, context);
										}
									}
								}
								else if (localName == "MarkerStyle")
								{
									linearPointer.MarkerStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!linearPointer.MarkerStyle.IsExpression)
									{
										Validator.ValidateGaugeMarkerStyles(linearPointer.MarkerStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 12:
							{
								char c = localName[0];
								if (c != 'M')
								{
									if (c == 'P')
									{
										if (localName == "PointerImage")
										{
											linearPointer.PointerImage = this.ReadPointerImage(gaugePanel, context);
										}
									}
								}
								else if (localName == "MarkerLength")
								{
									linearPointer.MarkerLength = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 15:
							{
								char c = localName[0];
								if (c != 'G')
								{
									if (c == 'S')
									{
										if (localName == "SnappingEnabled")
										{
											linearPointer.SnappingEnabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "GaugeInputValue")
								{
									linearPointer.GaugeInputValue = this.ReadGaugeInputValue(gaugePanel, context, "GaugeInputValue");
								}
								break;
							}
							case 16:
								if (localName == "SnappingInterval")
								{
									linearPointer.SnappingInterval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 17:
								if (localName == "DistanceFromScale")
								{
									linearPointer.DistanceFromScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return linearPointer;
		}

		// Token: 0x060022CD RID: 8909 RVA: 0x00088E30 File Offset: 0x00087030
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.LinearPointer> ReadLinearPointers(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.LinearPointer> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.LinearPointer>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "GaugePointers")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "LinearPointer")
					{
						list.Add(this.ReadLinearPointer(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022CE RID: 8910 RVA: 0x00088EC0 File Offset: 0x000870C0
		private Microsoft.ReportingServices.ReportIntermediateFormat.LinearScale ReadLinearScale(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.LinearScale linearScale = new Microsoft.ReportingServices.ReportIntermediateFormat.LinearScale(gaugePanel, gaugePanel.GenerateActionOwnerID());
			linearScale.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "LinearScale", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, linearScale.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("LinearScale" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											linearScale.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									linearScale.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
								break;
							}
							case 6:
								if (localName == "Hidden")
								{
									linearScale.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 7:
								if (localName == "ToolTip")
								{
									linearScale.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
							{
								char c = localName[0];
								if (c != 'I')
								{
									if (c != 'P')
									{
										if (c == 'R')
										{
											if (localName == "Reversed")
											{
												linearScale.Reversed = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "Position")
									{
										linearScale.Position = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "Interval")
								{
									linearScale.Interval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 9:
								if (localName == "EndMargin")
								{
									linearScale.EndMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 10:
							{
								char c = localName[1];
								if (c <= 'c')
								{
									if (c != 'a')
									{
										if (c == 'c')
										{
											if (localName == "ActionInfo")
											{
												linearScale.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
											}
										}
									}
									else if (localName == "MaximumPin")
									{
										linearScale.MaximumPin = this.ReadScalePin(gaugePanel, context, "MaximumPin");
									}
								}
								else if (c != 'i')
								{
									if (c == 'u')
									{
										if (localName == "Multiplier")
										{
											linearScale.Multiplier = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "MinimumPin")
								{
									linearScale.MinimumPin = this.ReadScalePin(gaugePanel, context, "MinimumPin");
								}
								break;
							}
							case 11:
							{
								char c = localName[5];
								if (c <= 'M')
								{
									if (c != 'L')
									{
										if (c == 'M')
										{
											if (localName == "StartMargin")
											{
												linearScale.StartMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
											}
										}
									}
									else if (localName == "ScaleLabels")
									{
										linearScale.ScaleLabels = this.ReadScaleLabels(gaugePanel, context);
									}
								}
								else if (c != 'R')
								{
									if (c == 'i')
									{
										if (localName == "Logarithmic")
										{
											linearScale.Logarithmic = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "ScaleRanges")
								{
									linearScale.ScaleRanges = this.ReadScaleRanges(gaugePanel, context);
								}
								break;
							}
							case 12:
							{
								char c = localName[1];
								if (c != 'a')
								{
									if (c != 'i')
									{
										if (c == 'u')
										{
											if (localName == "CustomLabels")
											{
												linearScale.CustomLabels = this.ReadCustomLabels(gaugePanel, context);
											}
										}
									}
									else if (localName == "MinimumValue")
									{
										linearScale.MinimumValue = this.ReadGaugeInputValue(gaugePanel, context, "MinimumValue");
									}
								}
								else if (localName == "MaximumValue")
								{
									linearScale.MaximumValue = this.ReadGaugeInputValue(gaugePanel, context, "MaximumValue");
								}
								break;
							}
							case 13:
								if (localName == "GaugePointers")
								{
									linearScale.GaugePointers = this.ReadLinearPointers(gaugePanel, context);
								}
								break;
							case 14:
							{
								char c = localName[0];
								if (c != 'I')
								{
									if (c == 'T')
									{
										if (localName == "TickMarksOnTop")
										{
											linearScale.TickMarksOnTop = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "IntervalOffset")
								{
									linearScale.IntervalOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 15:
								if (localName == "LogarithmicBase")
								{
									linearScale.LogarithmicBase = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 19:
							{
								char c = localName[6];
								if (c != 'a')
								{
									if (c == 'i')
									{
										if (localName == "GaugeMinorTickMarks")
										{
											linearScale.GaugeMinorTickMarks = this.ReadGaugeTickMarks(gaugePanel, context, "GaugeMinorTickMarks");
										}
									}
								}
								else if (localName == "GaugeMajorTickMarks")
								{
									linearScale.GaugeMajorTickMarks = this.ReadGaugeTickMarks(gaugePanel, context, "GaugeMajorTickMarks");
								}
								break;
							}
							}
						}
					}
				}
				while (!flag);
			}
			return linearScale;
		}

		// Token: 0x060022CF RID: 8911 RVA: 0x000895F0 File Offset: 0x000877F0
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.LinearScale> ReadLinearScales(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.LinearScale> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.LinearScale>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "GaugeScales")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "LinearScale")
					{
						list.Add(this.ReadLinearScale(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022D0 RID: 8912 RVA: 0x00089680 File Offset: 0x00087880
		private Microsoft.ReportingServices.ReportIntermediateFormat.NumericIndicator ReadNumericIndicator(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.NumericIndicator numericIndicator = new Microsoft.ReportingServices.ReportIntermediateFormat.NumericIndicator(gaugePanel, gaugePanel.GenerateActionOwnerID());
			numericIndicator.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "NumericIndicator", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, numericIndicator.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("NumericIndicator" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 3:
								if (localName == "Top")
								{
									numericIndicator.Top = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 4:
								if (localName == "Left")
								{
									numericIndicator.Left = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											numericIndicator.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									numericIndicator.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
								break;
							}
							case 6:
							{
								char c = localName[2];
								if (c <= 'g')
								{
									if (c != 'd')
									{
										if (c == 'g')
										{
											if (localName == "Digits")
											{
												numericIndicator.Digits = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
											}
										}
									}
									else if (localName == "Hidden")
									{
										numericIndicator.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
								}
								else if (c != 'i')
								{
									if (c == 'n')
									{
										if (localName == "ZIndex")
										{
											numericIndicator.ZIndex = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
										}
									}
								}
								else if (localName == "Height")
								{
									numericIndicator.Height = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 7:
								if (localName == "ToolTip")
								{
									numericIndicator.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
								if (localName == "ShowSign")
								{
									numericIndicator.ShowSign = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!numericIndicator.ShowSign.IsExpression)
									{
										Validator.ValidateGaugeShowSigns(numericIndicator.ShowSign.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 10:
							{
								char c = localName[0];
								if (c <= 'D')
								{
									if (c != 'A')
									{
										if (c == 'D')
										{
											if (localName == "DigitColor")
											{
												numericIndicator.DigitColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											}
										}
									}
									else if (localName == "ActionInfo")
									{
										numericIndicator.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
									}
								}
								else if (c != 'M')
								{
									if (c != 'P')
									{
										if (c == 'R')
										{
											if (localName == "ResizeMode")
											{
												numericIndicator.ResizeMode = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												if (!numericIndicator.ResizeMode.IsExpression)
												{
													Validator.ValidateGaugeResizeModes(numericIndicator.ResizeMode.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
												}
											}
										}
									}
									else if (localName == "ParentItem")
									{
										numericIndicator.ParentItem = this.m_reader.ReadString();
									}
								}
								else if (localName == "Multiplier")
								{
									numericIndicator.Multiplier = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 11:
								if (localName == "LedDimColor")
								{
									numericIndicator.LedDimColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 12:
							{
								char c = localName[1];
								if (c != 'a')
								{
									if (c == 'i')
									{
										if (localName == "MinimumValue")
										{
											numericIndicator.MinimumValue = this.ReadGaugeInputValue(gaugePanel, context, "MinimumValue");
										}
									}
								}
								else if (localName == "MaximumValue")
								{
									numericIndicator.MaximumValue = this.ReadGaugeInputValue(gaugePanel, context, "MaximumValue");
								}
								break;
							}
							case 13:
								if (localName == "DecimalDigits")
								{
									numericIndicator.DecimalDigits = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							case 14:
							{
								char c = localName[9];
								if (c <= 'S')
								{
									if (c != 'C')
									{
										if (c == 'S')
										{
											if (localName == "IndicatorStyle")
											{
												numericIndicator.IndicatorStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												if (!numericIndicator.IndicatorStyle.IsExpression)
												{
													Validator.ValidateGaugeIndicatorStyles(numericIndicator.IndicatorStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
												}
											}
										}
									}
									else if (localName == "SeparatorColor")
									{
										numericIndicator.SeparatorColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
								else if (c != 'W')
								{
									if (c == 'r')
									{
										if (localName == "UseFontPercent")
										{
											numericIndicator.UseFontPercent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "SeparatorWidth")
								{
									numericIndicator.SeparatorWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 15:
							{
								char c = localName[0];
								if (c != 'G')
								{
									if (c == 'S')
									{
										if (localName == "SnappingEnabled")
										{
											numericIndicator.SnappingEnabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "GaugeInputValue")
								{
									numericIndicator.GaugeInputValue = this.ReadGaugeInputValue(gaugePanel, context, "GaugeInputValue");
								}
								break;
							}
							case 16:
							{
								char c = localName[4];
								if (c <= 'L')
								{
									if (c != 'D')
									{
										if (c == 'L')
										{
											if (localName == "ShowLeadingZeros")
											{
												numericIndicator.ShowLeadingZeros = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "ShowDecimalPoint")
									{
										numericIndicator.ShowDecimalPoint = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
								}
								else if (c != 'f')
								{
									if (c != 'p')
									{
										if (c == 'u')
										{
											if (localName == "NonNumericString")
											{
												numericIndicator.NonNumericString = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											}
										}
									}
									else if (localName == "SnappingInterval")
									{
										numericIndicator.SnappingInterval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "OutOfRangeString")
								{
									numericIndicator.OutOfRangeString = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 17:
								if (localName == "DecimalDigitColor")
								{
									numericIndicator.DecimalDigitColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 22:
								if (localName == "NumericIndicatorRanges")
								{
									numericIndicator.NumericIndicatorRanges = this.ReadNumericIndicatorRanges(gaugePanel, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return numericIndicator;
		}

		// Token: 0x060022D1 RID: 8913 RVA: 0x0008A048 File Offset: 0x00088248
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.NumericIndicator> ReadNumericIndicators(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.NumericIndicator> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.NumericIndicator>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "NumericIndicators")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "NumericIndicator")
					{
						list.Add(this.ReadNumericIndicator(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022D2 RID: 8914 RVA: 0x0008A0D8 File Offset: 0x000882D8
		private NumericIndicatorRange ReadNumericIndicatorRange(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			NumericIndicatorRange numericIndicatorRange = new NumericIndicatorRange(gaugePanel);
			numericIndicatorRange.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "NumericIndicatorRange", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, numericIndicatorRange.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("NumericIndicatorRange" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadNumericIndicatorRangeElement(gaugePanel, numericIndicatorRange, context);
					}
				}
				while (!flag);
			}
			return numericIndicatorRange;
		}

		// Token: 0x060022D3 RID: 8915 RVA: 0x0008A180 File Offset: 0x00088380
		private void ReadNumericIndicatorRangeElement(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, NumericIndicatorRange numericIndicatorRange, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "StartValue")
			{
				numericIndicatorRange.StartValue = this.ReadGaugeInputValue(gaugePanel, context, "StartValue");
				return;
			}
			if (localName == "EndValue")
			{
				numericIndicatorRange.EndValue = this.ReadGaugeInputValue(gaugePanel, context, "EndValue");
				return;
			}
			if (localName == "DecimalDigitColor")
			{
				numericIndicatorRange.DecimalDigitColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (!(localName == "DigitColor"))
			{
				return;
			}
			numericIndicatorRange.DigitColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x060022D4 RID: 8916 RVA: 0x0008A230 File Offset: 0x00088430
		private List<NumericIndicatorRange> ReadNumericIndicatorRanges(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<NumericIndicatorRange> list = new List<NumericIndicatorRange>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "NumericIndicatorRanges")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "NumericIndicatorRange")
					{
						list.Add(this.ReadNumericIndicatorRange(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022D5 RID: 8917 RVA: 0x0008A2C0 File Offset: 0x000884C0
		private Microsoft.ReportingServices.ReportIntermediateFormat.PinLabel ReadPinLabel(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.PinLabel pinLabel = new Microsoft.ReportingServices.ReportIntermediateFormat.PinLabel(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("PinLabel" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							if (length != 4)
							{
								if (length != 5)
								{
									switch (length)
									{
									case 9:
									{
										char c = localName[0];
										if (c != 'F')
										{
											if (c == 'P')
											{
												if (localName == "Placement")
												{
													pinLabel.Placement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
													if (!pinLabel.Placement.IsExpression)
													{
														Validator.ValidateGaugeLabelPlacements(pinLabel.Placement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
													}
												}
											}
										}
										else if (localName == "FontAngle")
										{
											pinLabel.FontAngle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
										break;
									}
									case 11:
										if (localName == "RotateLabel")
										{
											pinLabel.RotateLabel = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
										break;
									case 14:
										if (localName == "UseFontPercent")
										{
											pinLabel.UseFontPercent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
										break;
									case 15:
										if (localName == "AllowUpsideDown")
										{
											pinLabel.AllowUpsideDown = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
										break;
									case 17:
										if (localName == "DistanceFromScale")
										{
											pinLabel.DistanceFromScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
										break;
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									pinLabel.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
							}
							else if (localName == "Text")
							{
								pinLabel.Text = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							}
						}
					}
				}
				while (!flag);
			}
			return pinLabel;
		}

		// Token: 0x060022D6 RID: 8918 RVA: 0x0008A594 File Offset: 0x00088794
		private Microsoft.ReportingServices.ReportIntermediateFormat.PointerCap ReadPointerCap(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.PointerCap pointerCap = new Microsoft.ReportingServices.ReportIntermediateFormat.PointerCap(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("PointerCap" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
							{
								char c = localName[0];
								if (c != 'O')
								{
									if (c != 'S')
									{
										if (c == 'W')
										{
											if (localName == "Width")
											{
												pointerCap.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
											}
										}
									}
									else if (localName == "Style")
									{
										StyleInformation styleInformation = this.ReadStyle(context);
										styleInformation.Filter(StyleOwnerType.GaugePanel, false);
										pointerCap.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
									}
								}
								else if (localName == "OnTop")
								{
									pointerCap.OnTop = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 6:
								if (localName == "Hidden")
								{
									pointerCap.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 8:
							{
								char c = localName[3];
								if (c != 'I')
								{
									if (c == 'S')
									{
										if (localName == "CapStyle")
										{
											pointerCap.CapStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!pointerCap.CapStyle.IsExpression)
											{
												Validator.ValidateGaugeCapStyles(pointerCap.CapStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "CapImage")
								{
									pointerCap.CapImage = this.ReadCapImage(gaugePanel, context);
								}
								break;
							}
							case 10:
								if (localName == "Reflection")
								{
									pointerCap.Reflection = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return pointerCap;
		}

		// Token: 0x060022D7 RID: 8919 RVA: 0x0008A830 File Offset: 0x00088A30
		private Microsoft.ReportingServices.ReportIntermediateFormat.RadialGauge ReadRadialGauge(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.RadialGauge radialGauge = new Microsoft.ReportingServices.ReportIntermediateFormat.RadialGauge(gaugePanel, gaugePanel.GenerateActionOwnerID());
			radialGauge.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "RadialGauge", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, radialGauge.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("RadialGauge" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 3:
								if (localName == "Top")
								{
									radialGauge.Top = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 4:
								if (localName == "Left")
								{
									radialGauge.Left = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											radialGauge.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									radialGauge.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
								break;
							}
							case 6:
							{
								char c = localName[5];
								if (c <= 'Y')
								{
									if (c != 'X')
									{
										if (c == 'Y')
										{
											if (localName == "PivotY")
											{
												radialGauge.PivotY = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
											}
										}
									}
									else if (localName == "PivotX")
									{
										radialGauge.PivotX = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (c != 'n')
								{
									if (c != 't')
									{
										if (c == 'x')
										{
											if (localName == "ZIndex")
											{
												radialGauge.ZIndex = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
											}
										}
									}
									else if (localName == "Height")
									{
										radialGauge.Height = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "Hidden")
								{
									radialGauge.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 7:
								if (localName == "ToolTip")
								{
									radialGauge.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
								if (localName == "TopImage")
								{
									radialGauge.TopImage = this.ReadTopImage(gaugePanel, context, "TopImage");
								}
								break;
							case 9:
								if (localName == "BackFrame")
								{
									radialGauge.BackFrame = this.ReadBackFrame(gaugePanel, context);
								}
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'P')
									{
										if (localName == "ParentItem")
										{
											radialGauge.ParentItem = this.m_reader.ReadString();
										}
									}
								}
								else if (localName == "ActionInfo")
								{
									radialGauge.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							}
							case 11:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c != 'C')
									{
										if (c == 'G')
										{
											if (localName == "GaugeScales")
											{
												radialGauge.GaugeScales = this.ReadRadialScales(gaugePanel, context);
											}
										}
									}
									else if (localName == "ClipContent")
									{
										radialGauge.ClipContent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
								}
								else if (localName == "AspectRatio")
								{
									radialGauge.AspectRatio = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							}
						}
					}
				}
				while (!flag);
			}
			return radialGauge;
		}

		// Token: 0x060022D8 RID: 8920 RVA: 0x0008AD54 File Offset: 0x00088F54
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.RadialGauge> ReadRadialGauges(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.RadialGauge> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.RadialGauge>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "RadialGauges")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "RadialGauge")
					{
						list.Add(this.ReadRadialGauge(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022D9 RID: 8921 RVA: 0x0008ADE4 File Offset: 0x00088FE4
		private Microsoft.ReportingServices.ReportIntermediateFormat.RadialPointer ReadRadialPointer(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.RadialPointer radialPointer = new Microsoft.ReportingServices.ReportIntermediateFormat.RadialPointer(gaugePanel, gaugePanel.GenerateActionOwnerID());
			radialPointer.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "RadialPointer", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, radialPointer.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("RadialPointer" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 4:
								if (localName == "Type")
								{
									radialPointer.Type = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!radialPointer.Type.IsExpression)
									{
										Validator.ValidateRadialPointerTypes(radialPointer.Type.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											radialPointer.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									radialPointer.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
								break;
							}
							case 6:
								if (localName == "Hidden")
								{
									radialPointer.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 7:
								if (localName == "ToolTip")
								{
									radialPointer.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
								if (localName == "BarStart")
								{
									radialPointer.BarStart = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!radialPointer.BarStart.IsExpression)
									{
										Validator.ValidateGaugeBarStarts(radialPointer.BarStart.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 9:
								if (localName == "Placement")
								{
									radialPointer.Placement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!radialPointer.Placement.IsExpression)
									{
										Validator.ValidateGaugePointerPlacements(radialPointer.Placement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'P')
									{
										if (localName == "PointerCap")
										{
											radialPointer.PointerCap = this.ReadPointerCap(gaugePanel, context);
										}
									}
								}
								else if (localName == "ActionInfo")
								{
									radialPointer.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							}
							case 11:
							{
								char c = localName[0];
								if (c != 'M')
								{
									if (c == 'N')
									{
										if (localName == "NeedleStyle")
										{
											radialPointer.NeedleStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!radialPointer.NeedleStyle.IsExpression)
											{
												Validator.ValidateRadialPointerNeedleStyles(radialPointer.NeedleStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "MarkerStyle")
								{
									radialPointer.MarkerStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!radialPointer.MarkerStyle.IsExpression)
									{
										Validator.ValidateGaugeMarkerStyles(radialPointer.MarkerStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 12:
							{
								char c = localName[0];
								if (c != 'M')
								{
									if (c == 'P')
									{
										if (localName == "PointerImage")
										{
											radialPointer.PointerImage = this.ReadPointerImage(gaugePanel, context);
										}
									}
								}
								else if (localName == "MarkerLength")
								{
									radialPointer.MarkerLength = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 15:
							{
								char c = localName[0];
								if (c != 'G')
								{
									if (c == 'S')
									{
										if (localName == "SnappingEnabled")
										{
											radialPointer.SnappingEnabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "GaugeInputValue")
								{
									radialPointer.GaugeInputValue = this.ReadGaugeInputValue(gaugePanel, context, "GaugeInputValue");
								}
								break;
							}
							case 16:
								if (localName == "SnappingInterval")
								{
									radialPointer.SnappingInterval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 17:
								if (localName == "DistanceFromScale")
								{
									radialPointer.DistanceFromScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return radialPointer;
		}

		// Token: 0x060022DA RID: 8922 RVA: 0x0008B414 File Offset: 0x00089614
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.RadialPointer> ReadRadialPointers(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.RadialPointer> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.RadialPointer>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "GaugePointers")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "RadialPointer")
					{
						list.Add(this.ReadRadialPointer(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022DB RID: 8923 RVA: 0x0008B4A4 File Offset: 0x000896A4
		private Microsoft.ReportingServices.ReportIntermediateFormat.RadialScale ReadRadialScale(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.RadialScale radialScale = new Microsoft.ReportingServices.ReportIntermediateFormat.RadialScale(gaugePanel, gaugePanel.GenerateActionOwnerID());
			radialScale.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "RadialScale", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, radialScale.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("RadialScale" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											radialScale.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									radialScale.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'R')
									{
										if (localName == "Radius")
										{
											radialScale.Radius = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "Hidden")
								{
									radialScale.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 7:
								if (localName == "ToolTip")
								{
									radialScale.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
							{
								char c = localName[0];
								if (c != 'I')
								{
									if (c == 'R')
									{
										if (localName == "Reversed")
										{
											radialScale.Reversed = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "Interval")
								{
									radialScale.Interval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 10:
							{
								char c = localName[1];
								if (c <= 'c')
								{
									if (c != 'a')
									{
										if (c == 'c')
										{
											if (localName == "ActionInfo")
											{
												radialScale.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
											}
										}
									}
									else if (localName == "MaximumPin")
									{
										radialScale.MaximumPin = this.ReadScalePin(gaugePanel, context, "MaximumPin");
									}
								}
								else if (c != 'i')
								{
									switch (c)
									{
									case 't':
										if (localName == "StartAngle")
										{
											radialScale.StartAngle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
										break;
									case 'u':
										if (localName == "Multiplier")
										{
											radialScale.Multiplier = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
										break;
									case 'w':
										if (localName == "SweepAngle")
										{
											radialScale.SweepAngle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
										break;
									}
								}
								else if (localName == "MinimumPin")
								{
									radialScale.MinimumPin = this.ReadScalePin(gaugePanel, context, "MinimumPin");
								}
								break;
							}
							case 11:
							{
								char c = localName[5];
								if (c != 'L')
								{
									if (c != 'R')
									{
										if (c == 'i')
										{
											if (localName == "Logarithmic")
											{
												radialScale.Logarithmic = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "ScaleRanges")
									{
										radialScale.ScaleRanges = this.ReadScaleRanges(gaugePanel, context);
									}
								}
								else if (localName == "ScaleLabels")
								{
									radialScale.ScaleLabels = this.ReadScaleLabels(gaugePanel, context);
								}
								break;
							}
							case 12:
							{
								char c = localName[1];
								if (c != 'a')
								{
									if (c != 'i')
									{
										if (c == 'u')
										{
											if (localName == "CustomLabels")
											{
												radialScale.CustomLabels = this.ReadCustomLabels(gaugePanel, context);
											}
										}
									}
									else if (localName == "MinimumValue")
									{
										radialScale.MinimumValue = this.ReadGaugeInputValue(gaugePanel, context, "MinimumValue");
									}
								}
								else if (localName == "MaximumValue")
								{
									radialScale.MaximumValue = this.ReadGaugeInputValue(gaugePanel, context, "MaximumValue");
								}
								break;
							}
							case 13:
								if (localName == "GaugePointers")
								{
									radialScale.GaugePointers = this.ReadRadialPointers(gaugePanel, context);
								}
								break;
							case 14:
							{
								char c = localName[0];
								if (c != 'I')
								{
									if (c == 'T')
									{
										if (localName == "TickMarksOnTop")
										{
											radialScale.TickMarksOnTop = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "IntervalOffset")
								{
									radialScale.IntervalOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 15:
								if (localName == "LogarithmicBase")
								{
									radialScale.LogarithmicBase = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 19:
							{
								char c = localName[6];
								if (c != 'a')
								{
									if (c == 'i')
									{
										if (localName == "GaugeMinorTickMarks")
										{
											radialScale.GaugeMinorTickMarks = this.ReadGaugeTickMarks(gaugePanel, context, "GaugeMinorTickMarks");
										}
									}
								}
								else if (localName == "GaugeMajorTickMarks")
								{
									radialScale.GaugeMajorTickMarks = this.ReadGaugeTickMarks(gaugePanel, context, "GaugeMajorTickMarks");
								}
								break;
							}
							}
						}
					}
				}
				while (!flag);
			}
			return radialScale;
		}

		// Token: 0x060022DC RID: 8924 RVA: 0x0008BBE8 File Offset: 0x00089DE8
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.RadialScale> ReadRadialScales(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.RadialScale> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.RadialScale>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "GaugeScales")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "RadialScale")
					{
						list.Add(this.ReadRadialScale(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022DD RID: 8925 RVA: 0x0008BC78 File Offset: 0x00089E78
		private Microsoft.ReportingServices.ReportIntermediateFormat.ScaleLabels ReadScaleLabels(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ScaleLabels scaleLabels = new Microsoft.ReportingServices.ReportIntermediateFormat.ScaleLabels(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ScaleLabels" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									scaleLabels.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
								break;
							case 6:
								if (localName == "Hidden")
								{
									scaleLabels.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 8:
								if (localName == "Interval")
								{
									scaleLabels.Interval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 9:
							{
								char c = localName[0];
								if (c != 'F')
								{
									if (c == 'P')
									{
										if (localName == "Placement")
										{
											scaleLabels.Placement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!scaleLabels.Placement.IsExpression)
											{
												Validator.ValidateGaugeLabelPlacements(scaleLabels.Placement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "FontAngle")
								{
									scaleLabels.FontAngle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 12:
								if (localName == "RotateLabels")
								{
									scaleLabels.RotateLabels = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 13:
								if (localName == "ShowEndLabels")
								{
									scaleLabels.ShowEndLabels = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 14:
							{
								char c = localName[0];
								if (c != 'I')
								{
									if (c == 'U')
									{
										if (localName == "UseFontPercent")
										{
											scaleLabels.UseFontPercent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "IntervalOffset")
								{
									scaleLabels.IntervalOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 15:
								if (localName == "AllowUpsideDown")
								{
									scaleLabels.AllowUpsideDown = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 17:
								if (localName == "DistanceFromScale")
								{
									scaleLabels.DistanceFromScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return scaleLabels;
		}

		// Token: 0x060022DE RID: 8926 RVA: 0x0008C014 File Offset: 0x0008A214
		private Microsoft.ReportingServices.ReportIntermediateFormat.ScalePin ReadScalePin(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, string elementName)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ScalePin scalePin = new Microsoft.ReportingServices.ReportIntermediateFormat.ScalePin(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (elementName == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
							{
								char c = localName[1];
								if (c != 'h')
								{
									if (c != 'i')
									{
										if (c == 't')
										{
											if (localName == "Style")
											{
												StyleInformation styleInformation = this.ReadStyle(context);
												styleInformation.Filter(StyleOwnerType.GaugePanel, false);
												scalePin.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
											}
										}
									}
									else if (localName == "Width")
									{
										scalePin.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "Shape")
								{
									scalePin.Shape = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!scalePin.Shape.IsExpression)
									{
										Validator.ValidateGaugeTickMarkShapes(scalePin.Shape.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'E')
								{
									if (c != 'H')
									{
										if (c == 'L')
										{
											if (localName == "Length")
											{
												scalePin.Length = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
											}
										}
									}
									else if (localName == "Hidden")
									{
										scalePin.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
								}
								else if (localName == "Enable")
								{
									scalePin.Enable = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 8:
							{
								char c = localName[0];
								if (c != 'L')
								{
									if (c == 'P')
									{
										if (localName == "PinLabel")
										{
											scalePin.PinLabel = this.ReadPinLabel(gaugePanel, context);
										}
									}
								}
								else if (localName == "Location")
								{
									scalePin.Location = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 9:
								if (localName == "Placement")
								{
									scalePin.Placement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!scalePin.Placement.IsExpression)
									{
										Validator.ValidateGaugeLabelPlacements(scalePin.Placement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 13:
								if (localName == "TickMarkImage")
								{
									scalePin.TickMarkImage = this.ReadTopImage(gaugePanel, context, "TickMarkImage");
								}
								break;
							case 14:
								if (localName == "EnableGradient")
								{
									scalePin.EnableGradient = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 15:
								if (localName == "GradientDensity")
								{
									scalePin.GradientDensity = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 17:
								if (localName == "DistanceFromScale")
								{
									scalePin.DistanceFromScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return scalePin;
		}

		// Token: 0x060022DF RID: 8927 RVA: 0x0008C468 File Offset: 0x0008A668
		private Microsoft.ReportingServices.ReportIntermediateFormat.ScaleRange ReadScaleRange(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ScaleRange scaleRange = new Microsoft.ReportingServices.ReportIntermediateFormat.ScaleRange(gaugePanel, gaugePanel.GenerateActionOwnerID());
			scaleRange.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "ScaleRange", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, scaleRange.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ScaleRange" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.GaugePanel, false);
									scaleRange.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
								}
								break;
							case 6:
								if (localName == "Hidden")
								{
									scaleRange.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 7:
								if (localName == "ToolTip")
								{
									scaleRange.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
							{
								char c = localName[3];
								if (c != 'V')
								{
									if (c == 'W')
									{
										if (localName == "EndWidth")
										{
											scaleRange.EndWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "EndValue")
								{
									scaleRange.EndValue = this.ReadGaugeInputValue(gaugePanel, context, "EndValue");
								}
								break;
							}
							case 9:
								if (localName == "Placement")
								{
									scaleRange.Placement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!scaleRange.Placement.IsExpression)
									{
										Validator.ValidateScaleRangePlacements(scaleRange.Placement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 10:
							{
								char c = localName[5];
								if (c != 'V')
								{
									if (c != 'W')
									{
										if (c == 'n')
										{
											if (localName == "ActionInfo")
											{
												scaleRange.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
											}
										}
									}
									else if (localName == "StartWidth")
									{
										scaleRange.StartWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "StartValue")
								{
									scaleRange.StartValue = this.ReadGaugeInputValue(gaugePanel, context, "StartValue");
								}
								break;
							}
							case 11:
							case 12:
							case 13:
							case 14:
							case 15:
							case 16:
								break;
							case 17:
							{
								char c = localName[0];
								if (c != 'D')
								{
									if (c == 'I')
									{
										if (localName == "InRangeLabelColor")
										{
											scaleRange.InRangeLabelColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "DistanceFromScale")
								{
									scaleRange.DistanceFromScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							default:
								if (length != 21)
								{
									if (length == 22)
									{
										char c = localName[0];
										if (c != 'B')
										{
											if (c == 'I')
											{
												if (localName == "InRangeBarPointerColor")
												{
													scaleRange.InRangeBarPointerColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												}
											}
										}
										else if (localName == "BackgroundGradientType")
										{
											scaleRange.BackgroundGradientType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!scaleRange.BackgroundGradientType.IsExpression)
											{
												Validator.ValidateBackgroundGradientTypes(scaleRange.BackgroundGradientType.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "InRangeTickMarksColor")
								{
									scaleRange.InRangeTickMarksColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return scaleRange;
		}

		// Token: 0x060022E0 RID: 8928 RVA: 0x0008C960 File Offset: 0x0008AB60
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ScaleRange> ReadScaleRanges(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ScaleRange> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ScaleRange>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ScaleRanges")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ScaleRange")
					{
						list.Add(this.ReadScaleRange(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022E1 RID: 8929 RVA: 0x0008C9F0 File Offset: 0x0008ABF0
		private Microsoft.ReportingServices.ReportIntermediateFormat.StateIndicator ReadStateIndicator(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.StateIndicator stateIndicator = new Microsoft.ReportingServices.ReportIntermediateFormat.StateIndicator(gaugePanel, gaugePanel.GenerateActionOwnerID());
			stateIndicator.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "StateIndicator", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, stateIndicator.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("StateIndicator" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 3:
								if (localName == "Top")
								{
									stateIndicator.Top = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 4:
								if (localName == "Left")
								{
									stateIndicator.Left = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c != 'S')
									{
										if (c == 'W')
										{
											if (localName == "Width")
											{
												stateIndicator.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
											}
										}
									}
									else if (localName == "Style")
									{
										StyleInformation styleInformation = this.ReadStyle(context);
										styleInformation.Filter(StyleOwnerType.GaugePanel, false);
										stateIndicator.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
									}
								}
								else if (localName == "Angle")
								{
									stateIndicator.Angle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 6:
							{
								char c = localName[1];
								if (c != 'I')
								{
									if (c != 'e')
									{
										if (c == 'i')
										{
											if (localName == "Hidden")
											{
												stateIndicator.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "Height")
									{
										stateIndicator.Height = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "ZIndex")
								{
									stateIndicator.ZIndex = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							}
							case 7:
								if (localName == "ToolTip")
								{
									stateIndicator.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c != 'P')
									{
										if (c == 'R')
										{
											if (localName == "ResizeMode")
											{
												stateIndicator.ResizeMode = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												if (!stateIndicator.ResizeMode.IsExpression)
												{
													Validator.ValidateGaugeResizeModes(stateIndicator.ResizeMode.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
												}
											}
										}
									}
									else if (localName == "ParentItem")
									{
										stateIndicator.ParentItem = this.m_reader.ReadString();
									}
								}
								else if (localName == "ActionInfo")
								{
									stateIndicator.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							}
							case 11:
								if (localName == "ScaleFactor")
								{
									stateIndicator.ScaleFactor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 12:
							{
								char c = localName[1];
								if (c != 'a')
								{
									if (c == 'i')
									{
										if (localName == "MinimumValue")
										{
											stateIndicator.MinimumValue = this.ReadGaugeInputValue(gaugePanel, context, "MinimumValue");
										}
									}
								}
								else if (localName == "MaximumValue")
								{
									stateIndicator.MaximumValue = this.ReadGaugeInputValue(gaugePanel, context, "MaximumValue");
								}
								break;
							}
							case 14:
							{
								char c = localName[9];
								if (c != 'I')
								{
									if (c == 'S')
									{
										if (localName == "IndicatorStyle")
										{
											stateIndicator.IndicatorStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!stateIndicator.IndicatorStyle.IsExpression)
											{
												Validator.ValidateGaugeStateIndicatorStyles(stateIndicator.IndicatorStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "IndicatorImage")
								{
									stateIndicator.IndicatorImage = this.ReadIndicatorImage(gaugePanel, context);
								}
								break;
							}
							case 15:
							{
								char c = localName[0];
								if (c != 'G')
								{
									if (c == 'I')
									{
										if (localName == "IndicatorStates")
										{
											stateIndicator.IndicatorStates = this.ReadIndicatorStates(gaugePanel, context);
										}
									}
								}
								else if (localName == "GaugeInputValue")
								{
									stateIndicator.GaugeInputValue = this.ReadGaugeInputValue(gaugePanel, context, "GaugeInputValue");
								}
								break;
							}
							case 18:
								if (localName == "TransformationType")
								{
									stateIndicator.TransformationType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!stateIndicator.TransformationType.IsExpression)
									{
										Validator.ValidateGaugeTransformationType(stateIndicator.TransformationType.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 19:
								if (localName == "TransformationScope")
								{
									stateIndicator.TransformationScope = this.m_reader.ReadString();
								}
								break;
							case 20:
								if (localName == "StateDataElementName")
								{
									stateIndicator.StateDataElementName = this.m_reader.ReadString();
								}
								break;
							case 22:
								if (localName == "StateDataElementOutput")
								{
									stateIndicator.StateDataElementOutput = this.ReadDataElementOutput();
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			this.InitializeStateIndicatorMinMax(gaugePanel, stateIndicator, context);
			return stateIndicator;
		}

		// Token: 0x060022E2 RID: 8930 RVA: 0x0008D120 File Offset: 0x0008B320
		private void InitializeStateIndicatorMinMax(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, Microsoft.ReportingServices.ReportIntermediateFormat.StateIndicator stateIndicator, PublishingContextStruct context)
		{
			if (stateIndicator.TransformationType == null || Validator.IsStateIndicatorTransformationTypePercent(stateIndicator.TransformationType.StringValue) || stateIndicator.TransformationType.IsExpression)
			{
				string text = this.GenerateStateIndicatorAutoMinMaxExpression(gaugePanel, stateIndicator, false);
				if (text != null)
				{
					stateIndicator.MinimumValue = new AutoGeneratedGaugeInputValue(gaugePanel, stateIndicator.Name);
					stateIndicator.MinimumValue.Value = this.ReadExpression(text, "Value", null, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode.Auto, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				}
				text = this.GenerateStateIndicatorAutoMinMaxExpression(gaugePanel, stateIndicator, true);
				if (text != null)
				{
					stateIndicator.MaximumValue = new AutoGeneratedGaugeInputValue(gaugePanel, stateIndicator.Name);
					stateIndicator.MaximumValue.Value = this.ReadExpression(text, "Value", null, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode.Auto, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				}
			}
		}

		// Token: 0x060022E3 RID: 8931 RVA: 0x0008D1D0 File Offset: 0x0008B3D0
		private string GenerateStateIndicatorAutoMinMaxExpression(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, Microsoft.ReportingServices.ReportIntermediateFormat.StateIndicator stateIndicator, bool max)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.GaugeInputValue gaugeInputValue = (max ? stateIndicator.MaximumValue : stateIndicator.MinimumValue);
			if (gaugeInputValue != null && !Validator.CompareWithInvariantCulture(gaugeInputValue.Value.StringValue, "NaN"))
			{
				return null;
			}
			if (string.IsNullOrEmpty(stateIndicator.TransformationScope))
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsStateIndicatorInvalidTransformationScope, Severity.Error, gaugePanel.ObjectType, gaugePanel.Name, "TransformationScope", new string[] { stateIndicator.Name });
			}
			if (stateIndicator.GaugeInputValue == null || string.IsNullOrEmpty(stateIndicator.GaugeInputValue.Value.OriginalText))
			{
				return null;
			}
			string text = stateIndicator.GaugeInputValue.Value.OriginalText.Trim();
			if (text.StartsWith("=", StringComparison.Ordinal))
			{
				text = text.Remove(0, 1);
			}
			if (max)
			{
				return string.Concat(new string[] { "=Max(", text, ", \"", stateIndicator.TransformationScope, "\")" });
			}
			return string.Concat(new string[] { "=IIF(Count(", text, ", \"", stateIndicator.TransformationScope, "\")=1, 0, Min(", text, ", \"", stateIndicator.TransformationScope, "\"))" });
		}

		// Token: 0x060022E4 RID: 8932 RVA: 0x0008D320 File Offset: 0x0008B520
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.StateIndicator> ReadStateIndicators(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.StateIndicator> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.StateIndicator>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "StateIndicators")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "StateIndicator")
					{
						list.Add(this.ReadStateIndicator(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022E5 RID: 8933 RVA: 0x0008D3B0 File Offset: 0x0008B5B0
		private Microsoft.ReportingServices.ReportIntermediateFormat.Thermometer ReadThermometer(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Thermometer thermometer = new Microsoft.ReportingServices.ReportIntermediateFormat.Thermometer(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Thermometer" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Style"))
						{
							if (!(localName == "BulbOffset"))
							{
								if (!(localName == "BulbSize"))
								{
									if (localName == "ThermometerStyle")
									{
										thermometer.ThermometerStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!thermometer.ThermometerStyle.IsExpression)
										{
											Validator.ValidateGaugeThermometerStyles(thermometer.ThermometerStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
										}
									}
								}
								else
								{
									thermometer.BulbSize = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
							}
							else
							{
								thermometer.BulbOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
							}
						}
						else
						{
							StyleInformation styleInformation = this.ReadStyle(context);
							styleInformation.Filter(StyleOwnerType.GaugePanel, false);
							thermometer.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
						}
					}
				}
				while (!flag);
			}
			return thermometer;
		}

		// Token: 0x060022E6 RID: 8934 RVA: 0x0008D530 File Offset: 0x0008B730
		private Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorImage ReadIndicatorImage(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorImage indicatorImage = new Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorImage(gaugePanel);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("IndicatorImage" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadIndicatorImageElement(gaugePanel, indicatorImage, context);
					}
				}
				while (!flag);
			}
			return indicatorImage;
		}

		// Token: 0x060022E7 RID: 8935 RVA: 0x0008D5A0 File Offset: 0x0008B7A0
		private void ReadIndicatorImageElement(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorImage indicatorImage, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (!(localName == "Source"))
			{
				if (localName == "Value")
				{
					indicatorImage.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				}
				if (localName == "MIMEType")
				{
					indicatorImage.MIMEType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				}
				if (localName == "HueColor")
				{
					indicatorImage.HueColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				}
				if (localName == "TransparentColor")
				{
					indicatorImage.TransparentColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				}
				if (!(localName == "Transparency"))
				{
					return;
				}
				indicatorImage.Transparency = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
			}
			else
			{
				indicatorImage.Source = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				if (!indicatorImage.Source.IsExpression)
				{
					Validator.ValidateImageSourceType(indicatorImage.Source.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
					return;
				}
			}
		}

		// Token: 0x060022E8 RID: 8936 RVA: 0x0008D6F4 File Offset: 0x0008B8F4
		private Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorState ReadIndicatorState(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorState indicatorState = new Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorState(gaugePanel);
			indicatorState.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "IndicatorState", Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel, gaugePanel.Name, indicatorState.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("IndicatorState" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadIndicatorStateElement(gaugePanel, indicatorState, context);
					}
				}
				while (!flag);
			}
			return indicatorState;
		}

		// Token: 0x060022E9 RID: 8937 RVA: 0x0008D79C File Offset: 0x0008B99C
		private void ReadIndicatorStateElement(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorState indicatorState, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "StartValue")
			{
				indicatorState.StartValue = this.ReadGaugeInputValue(gaugePanel, context, "StartValue");
				return;
			}
			if (localName == "EndValue")
			{
				indicatorState.EndValue = this.ReadGaugeInputValue(gaugePanel, context, "EndValue");
				return;
			}
			if (localName == "Color")
			{
				indicatorState.Color = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (!(localName == "ScaleFactor"))
			{
				if (!(localName == "IndicatorStyle"))
				{
					if (!(localName == "IndicatorImage"))
					{
						return;
					}
					indicatorState.IndicatorImage = this.ReadIndicatorImage(gaugePanel, context);
				}
				else
				{
					indicatorState.IndicatorStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					if (!indicatorState.IndicatorStyle.IsExpression)
					{
						Validator.ValidateGaugeStateIndicatorStyles(indicatorState.IndicatorStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
						return;
					}
				}
				return;
			}
			indicatorState.ScaleFactor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
		}

		// Token: 0x060022EA RID: 8938 RVA: 0x0008D8C4 File Offset: 0x0008BAC4
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorState> ReadIndicatorStates(Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel gaugePanel, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorState> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.IndicatorState>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "IndicatorStates")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "IndicatorState")
					{
						list.Add(this.ReadIndicatorState(gaugePanel, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022EB RID: 8939 RVA: 0x0008D954 File Offset: 0x0008BB54
		private Microsoft.ReportingServices.ReportIntermediateFormat.Map ReadMap(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Map map = new Microsoft.ReportingServices.ReportIntermediateFormat.Map(this.GenerateID(), parent);
			map.Name = this.m_reader.GetAttribute("Name");
			context.ObjectType = map.ObjectType;
			context.ObjectName = map.Name;
			bool flag = true;
			if (!this.m_reportItemNames.Validate(context.ObjectType, context.ObjectName, this.m_errorContext))
			{
				flag = false;
			}
			StyleInformation styleInformation = null;
			double num = 914.4;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Map" == this.m_reader.LocalName)
							{
								flag2 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 3:
								if (localName == "Top")
								{
									map.Top = this.ReadSize();
								}
								break;
							case 4:
								if (localName == "Left")
								{
									map.Left = this.ReadSize();
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											map.Width = this.ReadSize();
											double num2;
											string text;
											PublishingValidator.ValidateSize(map.Width, false, 0.0, num, map.ObjectType, map.Name, "Width", this.m_errorContext, out num2, out text);
										}
									}
								}
								else if (localName == "Style")
								{
									styleInformation = this.ReadStyle(context);
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'Z')
									{
										if (localName == "ZIndex")
										{
											map.ZIndex = this.m_reader.ReadInteger(Microsoft.ReportingServices.ReportProcessing.ObjectType.Map, map.Name, "ZIndex");
										}
									}
								}
								else if (localName == "Height")
								{
									map.Height = this.ReadSize();
									double num2;
									string text;
									PublishingValidator.ValidateSize(map.Height, false, 0.0, num, map.ObjectType, map.Name, "Height", this.m_errorContext, out num2, out text);
								}
								break;
							}
							case 7:
								if (localName == "ToolTip")
								{
									map.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
							{
								char c = localName[0];
								if (c != 'B')
								{
									if (c == 'P')
									{
										if (localName == "PageName")
										{
											map.PageName = this.ReadPageNameExpression(context);
										}
									}
								}
								else if (localName == "Bookmark")
								{
									map.Bookmark = this.ReadBookmarkExpression(this.m_reader.LocalName, context);
								}
								break;
							}
							case 9:
							{
								char c = localName[3];
								if (c != 'L')
								{
									if (c != 'T')
									{
										if (c == 'e')
										{
											if (localName == "PageBreak")
											{
												this.ReadPageBreak(map, context);
											}
										}
									}
									else if (localName == "MapTitles")
									{
										map.MapTitles = this.ReadMapTitles(map, context);
									}
								}
								else if (localName == "MapLayers")
								{
									map.MapLayers = this.ReadMapLayers(map, context);
								}
								break;
							}
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c != 'M')
									{
										if (c == 'V')
										{
											if (localName == "Visibility")
											{
												map.Visibility = this.ReadVisibility(context);
											}
										}
									}
									else if (localName == "MapLegends")
									{
										map.MapLegends = this.ReadMapLegends(map, context);
									}
								}
								else if (localName == "ActionInfo")
								{
									bool flag3;
									map.Action = this.ReadActionInfo(context, StyleOwnerType.Map, out flag3);
								}
								break;
							}
							case 11:
								if (localName == "MapViewport")
								{
									map.MapViewport = this.ReadMapViewport(map, context);
								}
								break;
							case 12:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'T')
									{
										if (localName == "TileLanguage")
										{
											map.TileLanguage = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "AntiAliasing")
								{
									map.AntiAliasing = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!map.AntiAliasing.IsExpression)
									{
										Validator.ValidateMapAntiAliasing(map.AntiAliasing.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 13:
							{
								char c = localName[3];
								if (c != 'B')
								{
									if (c == 'C')
									{
										if (localName == "MapColorScale")
										{
											map.MapColorScale = this.ReadMapColorScale(map, context);
										}
									}
								}
								else if (localName == "MapBorderSkin")
								{
									map.MapBorderSkin = this.ReadMapBorderSkin(map, context);
								}
								break;
							}
							case 14:
								if (localName == "MapDataRegions")
								{
									map.MapDataRegions = this.ReadMapDataRegions(map, context);
								}
								break;
							case 15:
							{
								char c = localName[0];
								if (c != 'D')
								{
									if (c == 'S')
									{
										if (localName == "ShadowIntensity")
										{
											map.ShadowIntensity = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "DataElementName")
								{
									map.DataElementName = this.m_reader.ReadString();
								}
								break;
							}
							case 16:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c != 'D')
									{
										if (c == 'M')
										{
											if (localName == "MapDistanceScale")
											{
												map.MapDistanceScale = this.ReadMapDistanceScale(map, context);
											}
										}
									}
									else if (localName == "DocumentMapLabel")
									{
										map.DocumentMapLabel = this.ReadDocumentMapLabelExpression(this.m_reader.LocalName, context);
									}
								}
								else if (localName == "CustomProperties")
								{
									map.CustomProperties = this.ReadCustomProperties(context);
								}
								break;
							}
							case 17:
								if (localName == "DataElementOutput")
								{
									map.DataElementOutput = this.ReadDataElementOutput();
								}
								break;
							case 22:
								if (localName == "MaximumTotalPointCount")
								{
									map.MaximumTotalPointCount = this.m_reader.ReadInteger(Microsoft.ReportingServices.ReportProcessing.ObjectType.Map, map.Name, "MaximumTotalPointCount");
								}
								break;
							case 23:
								if (localName == "TextAntiAliasingQuality")
								{
									map.TextAntiAliasingQuality = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!map.TextAntiAliasingQuality.IsExpression)
									{
										Validator.ValidateMapTextAntiAliasingQuality(map.TextAntiAliasingQuality.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 26:
								if (localName == "MaximumSpatialElementCount")
								{
									map.MaximumSpatialElementCount = this.m_reader.ReadInteger(Microsoft.ReportingServices.ReportProcessing.ObjectType.Map, map.Name, "MaximumSpatialElementCount");
								}
								break;
							}
						}
					}
				}
				while (!flag2);
			}
			if (styleInformation != null)
			{
				styleInformation.Filter(StyleOwnerType.Map, false);
				map.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, false, this.m_errorContext);
			}
			if (map.StyleClass != null)
			{
				PublishingValidator.ValidateBorderColorNotTransparent(map.ObjectType, map.Name, map.StyleClass, "BorderColor", this.m_errorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(map.ObjectType, map.Name, map.StyleClass, "BorderColorBottom", this.m_errorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(map.ObjectType, map.Name, map.StyleClass, "BorderColorTop", this.m_errorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(map.ObjectType, map.Name, map.StyleClass, "BorderColorLeft", this.m_errorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(map.ObjectType, map.Name, map.StyleClass, "BorderColorRight", this.m_errorContext);
			}
			this.ValidateDataRegionReferences(map);
			map.Computed = true;
			if (flag)
			{
				this.m_hasImageStreams = true;
				return map;
			}
			return null;
		}

		// Token: 0x060022EC RID: 8940 RVA: 0x0008E304 File Offset: 0x0008C504
		private void ValidateDataRegionReferences(Microsoft.ReportingServices.ReportIntermediateFormat.Map map)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapLayer> mapLayers = map.MapLayers;
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion> mapDataRegions = map.MapDataRegions;
			if (mapLayers == null)
			{
				return;
			}
			foreach (Microsoft.ReportingServices.ReportIntermediateFormat.MapLayer mapLayer in mapLayers)
			{
				if (mapLayer is Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer)
				{
					string mapDataRegionName = ((Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer)mapLayer).MapDataRegionName;
					if (mapDataRegionName != null && this.GetDataRegion(mapDataRegions, mapDataRegionName) == null)
					{
						this.m_errorContext.Register(ProcessingErrorCode.rsInvalidMapDataRegionName, Severity.Error, map.ObjectType, map.Name, "MapDataRegionName", new string[] { mapDataRegionName });
						break;
					}
				}
			}
		}

		// Token: 0x060022ED RID: 8941 RVA: 0x0008E3B0 File Offset: 0x0008C5B0
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion GetDataRegion(List<Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion> dataRegions, string dataRegionName)
		{
			if (dataRegions == null)
			{
				return null;
			}
			foreach (Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion mapDataRegion in dataRegions)
			{
				if (mapDataRegion.Name == dataRegionName)
				{
					return mapDataRegion;
				}
			}
			return null;
		}

		// Token: 0x060022EE RID: 8942 RVA: 0x0008E414 File Offset: 0x0008C614
		private void AddStaticMapMember(int ID, Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion mapDataRegion)
		{
			mapDataRegion.MapMember = new Microsoft.ReportingServices.ReportIntermediateFormat.MapMember(ID, mapDataRegion);
			mapDataRegion.MapMember.Level = 0;
			mapDataRegion.MapMember.ColSpan = 1;
			mapDataRegion.MapMember.IsColumn = true;
		}

		// Token: 0x060022EF RID: 8943 RVA: 0x0008E447 File Offset: 0x0008C647
		private void AddStaticMapRowMember(int ID, Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion mapDataRegion)
		{
			mapDataRegion.MapRowMember = new Microsoft.ReportingServices.ReportIntermediateFormat.MapMember(ID, mapDataRegion);
			mapDataRegion.MapRowMember.Level = 0;
			mapDataRegion.MapRowMember.RowSpan = 1;
		}

		// Token: 0x060022F0 RID: 8944 RVA: 0x0008E470 File Offset: 0x0008C670
		private void AddMapRow(int rowID, int cellID, Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion mapDataRegion)
		{
			mapDataRegion.MapRow = new MapRow(rowID, mapDataRegion);
			mapDataRegion.MapRow.Cell = new MapCell(cellID, mapDataRegion);
			this.m_aggregateHolderList.Add(mapDataRegion.MapRow.Cell);
			this.m_runningValueHolderList.Add(mapDataRegion.MapRow.Cell);
		}

		// Token: 0x060022F1 RID: 8945 RVA: 0x0008E4C8 File Offset: 0x0008C6C8
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion> ReadMapDataRegions(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapDataRegions")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapDataRegion")
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion mapDataRegion = this.ReadMapDataRegion(map, context);
						if (mapDataRegion != null)
						{
							list.Add(mapDataRegion);
						}
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060022F2 RID: 8946 RVA: 0x0008E558 File Offset: 0x0008C758
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion ReadMapDataRegion(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion mapDataRegion = new Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion(this.GenerateID(), parent);
			mapDataRegion.Name = this.m_reader.GetAttribute("Name");
			if ((context.Location & LocationFlags.InDataRegion) != (LocationFlags)0)
			{
				Global.Tracer.Assert(this.m_nestedDataRegions != null, "(m_nestedDataRegions != null)");
				this.m_nestedDataRegions.Add(mapDataRegion);
			}
			context.Location = context.Location | LocationFlags.InDataSet | LocationFlags.InDataRegion;
			context.ObjectType = mapDataRegion.ObjectType;
			context.ObjectName = mapDataRegion.Name;
			this.RegisterDataRegion(mapDataRegion);
			bool flag = true;
			if (this.m_scopeNames.Validate(false, context.ObjectName, context.ObjectType, context.ObjectName, this.m_errorContext))
			{
				this.m_reportScopes.Add(mapDataRegion.Name, mapDataRegion);
			}
			else
			{
				flag = false;
			}
			if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsDataRegionInPageSection, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
				flag = false;
			}
			IdcRelationship idcRelationship = null;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapDataRegion" == this.m_reader.LocalName)
							{
								flag2 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "DataSetName"))
						{
							if (!(localName == "Relationship"))
							{
								if (!(localName == "Filters"))
								{
									if (localName == "MapMember")
									{
										int num = 0;
										mapDataRegion.MapMember = this.ReadMapMember(mapDataRegion, context, 0, ref num);
									}
								}
								else
								{
									mapDataRegion.Filters = this.ReadFilters(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.DataRegionFilters, context);
								}
							}
							else
							{
								idcRelationship = this.ReadRelationship(context);
							}
						}
						else
						{
							mapDataRegion.DataSetName = this.m_reader.ReadString();
						}
					}
				}
				while (!flag2);
			}
			mapDataRegion.DataScopeInfo.SetRelationship(mapDataRegion.DataSetName, idcRelationship);
			if (mapDataRegion.MapMember == null)
			{
				this.AddStaticMapMember(this.GenerateID(), mapDataRegion);
			}
			this.AddStaticMapRowMember(this.GenerateID(), mapDataRegion);
			this.AddMapRow(this.GenerateID(), this.GenerateID(), mapDataRegion);
			mapDataRegion.Computed = true;
			if (flag)
			{
				this.m_hasImageStreams = true;
				return mapDataRegion;
			}
			return null;
		}

		// Token: 0x060022F3 RID: 8947 RVA: 0x0008E7A0 File Offset: 0x0008C9A0
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapMember ReadMapMember(Microsoft.ReportingServices.ReportIntermediateFormat.MapDataRegion mapDataRegion, PublishingContextStruct context, int level, ref int aLeafNodes)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapMember mapMember = new Microsoft.ReportingServices.ReportIntermediateFormat.MapMember(this.GenerateID(), mapDataRegion);
			this.m_runningValueHolderList.Add(mapMember);
			mapMember.IsColumn = true;
			mapMember.Level = level;
			bool flag = false;
			int num = 0;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapMember" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Group"))
						{
							if (localName == "MapMember")
							{
								mapMember.ChildMapMember = this.ReadMapMember(mapDataRegion, context, level + 1, ref num);
							}
						}
						else
						{
							mapMember.Grouping = this.ReadGrouping(mapMember, context);
							if (mapMember.Grouping.PageBreak != null && mapMember.Grouping.PageBreak.BreakLocation != PageBreakLocation.None)
							{
								this.m_errorContext.Register(ProcessingErrorCode.rsPageBreakOnMapGroup, Severity.Warning, context.ObjectType, context.ObjectName, "Group", new string[] { mapMember.Grouping.Name });
							}
							if (mapMember.Grouping.DomainScope != null)
							{
								mapMember.Grouping.DomainScope = null;
								this.m_domainScopeGroups.Remove(mapMember.Grouping);
								this.m_errorContext.Register(ProcessingErrorCode.rsInvalidGroupingDomainScopeMap, Severity.Error, context.ObjectType, context.ObjectName, "Group", new string[]
								{
									mapMember.Grouping.Name,
									mapMember.Grouping.DomainScope
								});
							}
						}
					}
				}
				while (!flag);
			}
			if (mapMember.ChildMapMember == null)
			{
				aLeafNodes++;
				mapMember.ColSpan = 1;
			}
			else
			{
				aLeafNodes += num;
				mapMember.ColSpan = num;
			}
			return mapMember;
		}

		// Token: 0x060022F4 RID: 8948 RVA: 0x0008E97C File Offset: 0x0008CB7C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapLocation ReadMapLocation(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapLocation mapLocation = new Microsoft.ReportingServices.ReportIntermediateFormat.MapLocation(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapLocation" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapLocationElement(map, mapLocation, context);
					}
				}
				while (!flag);
			}
			return mapLocation;
		}

		// Token: 0x060022F5 RID: 8949 RVA: 0x0008E9EC File Offset: 0x0008CBEC
		private void ReadMapLocationElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapLocation mapLocation, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Left")
			{
				mapLocation.Left = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (localName == "Top")
			{
				mapLocation.Top = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (!(localName == "Unit"))
			{
				return;
			}
			mapLocation.Unit = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
			if (!mapLocation.Unit.IsExpression)
			{
				Validator.ValidateUnit(mapLocation.Unit.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
			}
		}

		// Token: 0x060022F6 RID: 8950 RVA: 0x0008EAB0 File Offset: 0x0008CCB0
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapSize ReadMapSize(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapSize mapSize = new Microsoft.ReportingServices.ReportIntermediateFormat.MapSize(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapSize" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapSizeElement(map, mapSize, context);
					}
				}
				while (!flag);
			}
			return mapSize;
		}

		// Token: 0x060022F7 RID: 8951 RVA: 0x0008EB20 File Offset: 0x0008CD20
		private void ReadMapSizeElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapSize mapSize, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Width")
			{
				mapSize.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (localName == "Height")
			{
				mapSize.Height = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (!(localName == "Unit"))
			{
				return;
			}
			mapSize.Unit = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
			if (!mapSize.Unit.IsExpression)
			{
				Validator.ValidateUnit(mapSize.Unit.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
			}
		}

		// Token: 0x060022F8 RID: 8952 RVA: 0x0008EBE4 File Offset: 0x0008CDE4
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapGridLines ReadMapGridLines(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, string tagName)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapGridLines mapGridLines = new Microsoft.ReportingServices.ReportIntermediateFormat.MapGridLines(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (tagName == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapGridLinesElement(map, mapGridLines, context);
					}
				}
				while (!flag);
			}
			return mapGridLines;
		}

		// Token: 0x060022F9 RID: 8953 RVA: 0x0008EC50 File Offset: 0x0008CE50
		private void ReadMapGridLinesElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapGridLines mapGridLines, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Style")
			{
				this.ReadMapStyle(mapGridLines, context);
				return;
			}
			if (localName == "Hidden")
			{
				mapGridLines.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
				return;
			}
			if (localName == "Interval")
			{
				mapGridLines.Interval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (localName == "ShowLabels")
			{
				mapGridLines.ShowLabels = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
				return;
			}
			if (!(localName == "LabelPosition"))
			{
				return;
			}
			mapGridLines.LabelPosition = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
			if (!mapGridLines.LabelPosition.IsExpression)
			{
				Validator.ValidateLabelPosition(mapGridLines.LabelPosition.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
			}
		}

		// Token: 0x060022FA RID: 8954 RVA: 0x0008ED54 File Offset: 0x0008CF54
		private void ReadMapStyle(MapStyleContainer mapStyleContainer, PublishingContextStruct context)
		{
			StyleInformation styleInformation = this.ReadStyle(context);
			styleInformation.Filter(StyleOwnerType.Map, false);
			mapStyleContainer.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
		}

		// Token: 0x060022FB RID: 8955 RVA: 0x0008ED98 File Offset: 0x0008CF98
		private void ReadMapTitleStyle(Microsoft.ReportingServices.ReportIntermediateFormat.MapTitle mapTitle, PublishingContextStruct context)
		{
			StyleInformation styleInformation = this.ReadStyle(context);
			styleInformation.FilterMapTitleStyle();
			mapTitle.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
		}

		// Token: 0x060022FC RID: 8956 RVA: 0x0008EDDC File Offset: 0x0008CFDC
		private void ReadMapLegendTitleStyle(Microsoft.ReportingServices.ReportIntermediateFormat.MapLegendTitle legendTitle, PublishingContextStruct context)
		{
			StyleInformation styleInformation = this.ReadStyle(context);
			styleInformation.FilterMapLegendTitleStyle();
			legendTitle.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, this.m_errorContext);
		}

		// Token: 0x060022FD RID: 8957 RVA: 0x0008EE20 File Offset: 0x0008D020
		private void ReadMapSubItemElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapSubItem mapSubItem, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName != null)
			{
				switch (localName.Length)
				{
				case 5:
					if (!(localName == "Style"))
					{
						return;
					}
					this.ReadMapStyle(mapSubItem, context);
					return;
				case 6:
					if (!(localName == "ZIndex"))
					{
						return;
					}
					mapSubItem.ZIndex = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
					break;
				case 7:
					if (!(localName == "MapSize"))
					{
						return;
					}
					mapSubItem.MapSize = this.ReadMapSize(map, context);
					return;
				case 8:
					break;
				case 9:
					if (!(localName == "TopMargin"))
					{
						return;
					}
					mapSubItem.TopMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				case 10:
					if (!(localName == "LeftMargin"))
					{
						return;
					}
					mapSubItem.LeftMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				case 11:
				{
					char c = localName[0];
					if (c != 'M')
					{
						if (c != 'R')
						{
							return;
						}
						if (!(localName == "RightMargin"))
						{
							return;
						}
						mapSubItem.RightMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						return;
					}
					else
					{
						if (!(localName == "MapLocation"))
						{
							return;
						}
						mapSubItem.MapLocation = this.ReadMapLocation(map, context);
						return;
					}
					break;
				}
				case 12:
					if (!(localName == "BottomMargin"))
					{
						return;
					}
					mapSubItem.BottomMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				default:
					return;
				}
			}
		}

		// Token: 0x060022FE RID: 8958 RVA: 0x0008EFB0 File Offset: 0x0008D1B0
		private void ReadMapDockableSubItemElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapDockableSubItem mapDockableSubItem, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (!(localName == "ActionInfo"))
			{
				if (!(localName == "Position"))
				{
					if (localName == "DockOutsideViewport")
					{
						mapDockableSubItem.DockOutsideViewport = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
						return;
					}
					if (localName == "Hidden")
					{
						mapDockableSubItem.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
						return;
					}
					if (localName == "ToolTip")
					{
						mapDockableSubItem.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						return;
					}
					this.ReadMapSubItemElement(map, mapDockableSubItem, context);
				}
				else
				{
					mapDockableSubItem.Position = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					if (!mapDockableSubItem.Position.IsExpression)
					{
						Validator.ValidateMapPosition(mapDockableSubItem.Position.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
						return;
					}
				}
				return;
			}
			bool flag = false;
			mapDockableSubItem.Action = this.ReadActionInfo(context, StyleOwnerType.Map, out flag);
		}

		// Token: 0x060022FF RID: 8959 RVA: 0x0008F0D4 File Offset: 0x0008D2D4
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapBindingFieldPair ReadMapBindingFieldPair(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapBindingFieldPair mapBindingFieldPair = new Microsoft.ReportingServices.ReportIntermediateFormat.MapBindingFieldPair(map, mapVectorLayer);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapBindingFieldPair" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapBindingFieldPairElement(map, mapBindingFieldPair, context);
					}
				}
				while (!flag);
			}
			return mapBindingFieldPair;
		}

		// Token: 0x06002300 RID: 8960 RVA: 0x0008F144 File Offset: 0x0008D344
		private void ReadMapBindingFieldPairElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapBindingFieldPair mapBindingFieldPair, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "FieldName")
			{
				mapBindingFieldPair.FieldName = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (!(localName == "BindingExpression"))
			{
				return;
			}
			mapBindingFieldPair.BindingExpression = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x06002301 RID: 8961 RVA: 0x0008F1B0 File Offset: 0x0008D3B0
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapBindingFieldPair> ReadMapBindingFieldPairs(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapBindingFieldPair> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapBindingFieldPair>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapBindingFieldPairs")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapBindingFieldPair")
					{
						list.Add(this.ReadMapBindingFieldPair(map, mapVectorLayer, context));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x06002302 RID: 8962 RVA: 0x0008F23C File Offset: 0x0008D43C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapViewport ReadMapViewport(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapViewport mapViewport = new Microsoft.ReportingServices.ReportIntermediateFormat.MapViewport(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapViewport" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapViewportElement(map, mapViewport, context);
					}
				}
				while (!flag);
			}
			return mapViewport;
		}

		// Token: 0x06002303 RID: 8963 RVA: 0x0008F2AC File Offset: 0x0008D4AC
		private void ReadMapViewportElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapViewport mapViewport, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName != null)
			{
				switch (localName.Length)
				{
				case 9:
					if (!(localName == "MapLimits"))
					{
						goto IL_03F8;
					}
					mapViewport.MapLimits = this.ReadMapLimits(map, context);
					return;
				case 10:
				case 15:
				case 18:
				case 20:
				case 21:
				case 22:
				case 23:
					goto IL_03F8;
				case 11:
				{
					char c = localName[1];
					if (c != 'a')
					{
						if (c != 'i')
						{
							goto IL_03F8;
						}
						if (!(localName == "MinimumZoom"))
						{
							goto IL_03F8;
						}
						mapViewport.MinimumZoom = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
						return;
					}
					else
					{
						if (!(localName == "MaximumZoom"))
						{
							goto IL_03F8;
						}
						mapViewport.MaximumZoom = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
						return;
					}
					break;
				}
				case 12:
				{
					char c = localName[3];
					if (c != 'M')
					{
						if (c != 'P')
						{
							goto IL_03F8;
						}
						if (!(localName == "MapParallels"))
						{
							goto IL_03F8;
						}
						mapViewport.MapParallels = this.ReadMapGridLines(map, context, "MapParallels");
						return;
					}
					else
					{
						if (!(localName == "MapMeridians"))
						{
							goto IL_03F8;
						}
						mapViewport.MapMeridians = this.ReadMapGridLines(map, context, "MapMeridians");
						return;
					}
					break;
				}
				case 13:
				{
					char c = localName[3];
					if (c != 'C')
					{
						if (c != 'P')
						{
							if (c != 't')
							{
								goto IL_03F8;
							}
							if (!(localName == "ContentMargin"))
							{
								goto IL_03F8;
							}
							mapViewport.ContentMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							return;
						}
						else
						{
							if (!(localName == "MapProjection"))
							{
								goto IL_03F8;
							}
							mapViewport.MapProjection = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							if (!mapViewport.MapProjection.IsExpression)
							{
								Validator.ValidateMapProjection(mapViewport.MapProjection.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
								return;
							}
							return;
						}
					}
					else if (!(localName == "MapCustomView"))
					{
						goto IL_03F8;
					}
					break;
				}
				case 14:
					if (!(localName == "MapElementView"))
					{
						goto IL_03F8;
					}
					break;
				case 16:
				{
					char c = localName[0];
					if (c != 'G')
					{
						if (c != 'M')
						{
							goto IL_03F8;
						}
						if (!(localName == "MapDataBoundView"))
						{
							goto IL_03F8;
						}
					}
					else
					{
						if (!(localName == "GridUnderContent"))
						{
							goto IL_03F8;
						}
						mapViewport.GridUnderContent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
						return;
					}
					break;
				}
				case 17:
				{
					char c = localName[16];
					if (c != 'X')
					{
						if (c != 'Y')
						{
							goto IL_03F8;
						}
						if (!(localName == "ProjectionCenterY"))
						{
							goto IL_03F8;
						}
						mapViewport.ProjectionCenterY = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
						return;
					}
					else
					{
						if (!(localName == "ProjectionCenterX"))
						{
							goto IL_03F8;
						}
						mapViewport.ProjectionCenterX = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
						return;
					}
					break;
				}
				case 19:
					if (!(localName == "MapCoordinateSystem"))
					{
						goto IL_03F8;
					}
					mapViewport.MapCoordinateSystem = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					if (!mapViewport.MapCoordinateSystem.IsExpression)
					{
						Validator.ValidateMapCoordinateSystem(mapViewport.MapCoordinateSystem.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
						return;
					}
					return;
				case 24:
					if (!(localName == "SimplificationResolution"))
					{
						goto IL_03F8;
					}
					mapViewport.SimplificationResolution = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
					return;
				default:
					goto IL_03F8;
				}
				Microsoft.ReportingServices.ReportIntermediateFormat.MapView mapView = mapViewport.MapView;
				this.ReadMapView(map, context, ref mapView, this.m_reader.LocalName);
				mapViewport.MapView = mapView;
				return;
			}
			IL_03F8:
			this.ReadMapSubItemElement(map, mapViewport, context);
		}

		// Token: 0x06002304 RID: 8964 RVA: 0x0008F6BC File Offset: 0x0008D8BC
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapLimits ReadMapLimits(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapLimits mapLimits = new Microsoft.ReportingServices.ReportIntermediateFormat.MapLimits(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapLimits" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapLimitsElement(map, mapLimits, context);
					}
				}
				while (!flag);
			}
			return mapLimits;
		}

		// Token: 0x06002305 RID: 8965 RVA: 0x0008F72C File Offset: 0x0008D92C
		private void ReadMapLimitsElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapLimits mapLimits, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "MinimumX")
			{
				mapLimits.MinimumX = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (localName == "MinimumY")
			{
				mapLimits.MinimumY = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (localName == "MaximumX")
			{
				mapLimits.MaximumX = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (localName == "MaximumY")
			{
				mapLimits.MaximumY = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (!(localName == "LimitToData"))
			{
				return;
			}
			mapLimits.LimitToData = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
		}

		// Token: 0x06002306 RID: 8966 RVA: 0x0008F814 File Offset: 0x0008DA14
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapColorScale ReadMapColorScale(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapColorScale mapColorScale = new Microsoft.ReportingServices.ReportIntermediateFormat.MapColorScale(map, map.GenerateActionOwnerID());
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapColorScale" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapColorScaleElement(map, mapColorScale, context);
					}
				}
				while (!flag);
			}
			return mapColorScale;
		}

		// Token: 0x06002307 RID: 8967 RVA: 0x0008F888 File Offset: 0x0008DA88
		private void ReadMapColorScaleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapColorScale mapColorScale, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName != null)
			{
				switch (localName.Length)
				{
				case 10:
					if (localName == "NoDataText")
					{
						mapColorScale.NoDataText = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						return;
					}
					break;
				case 11:
					if (localName == "LabelFormat")
					{
						mapColorScale.LabelFormat = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						return;
					}
					break;
				case 13:
				{
					char c = localName[5];
					if (c <= 'G')
					{
						if (c != 'B')
						{
							if (c == 'G')
							{
								if (localName == "RangeGapColor")
								{
									mapColorScale.RangeGapColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									return;
								}
							}
						}
						else if (localName == "LabelBehavior")
						{
							mapColorScale.LabelBehavior = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							if (!mapColorScale.LabelBehavior.IsExpression)
							{
								Validator.ValidateLabelBehavior(mapColorScale.LabelBehavior.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
								return;
							}
							return;
						}
					}
					else if (c != 'I')
					{
						if (c == 'n')
						{
							if (localName == "HideEndLabels")
							{
								mapColorScale.HideEndLabels = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								return;
							}
						}
					}
					else if (localName == "LabelInterval")
					{
						mapColorScale.LabelInterval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
						return;
					}
					break;
				}
				case 14:
				{
					char c = localName[0];
					if (c != 'L')
					{
						if (c == 'T')
						{
							if (localName == "TickMarkLength")
							{
								mapColorScale.TickMarkLength = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								return;
							}
						}
					}
					else if (localName == "LabelPlacement")
					{
						mapColorScale.LabelPlacement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						if (!mapColorScale.LabelPlacement.IsExpression)
						{
							Validator.ValidateLabelPlacement(mapColorScale.LabelPlacement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
							return;
						}
						return;
					}
					break;
				}
				case 18:
					if (localName == "MapColorScaleTitle")
					{
						mapColorScale.MapColorScaleTitle = this.ReadMapColorScaleTitle(map, context);
						return;
					}
					break;
				case 19:
					if (localName == "ColorBarBorderColor")
					{
						mapColorScale.ColorBarBorderColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						return;
					}
					break;
				}
			}
			this.ReadMapDockableSubItemElement(map, mapColorScale, context);
		}

		// Token: 0x06002308 RID: 8968 RVA: 0x0008FB78 File Offset: 0x0008DD78
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapColorScaleTitle ReadMapColorScaleTitle(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapColorScaleTitle mapColorScaleTitle = new Microsoft.ReportingServices.ReportIntermediateFormat.MapColorScaleTitle(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapColorScaleTitle" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapColorScaleTitleElement(map, mapColorScaleTitle, context);
					}
				}
				while (!flag);
			}
			return mapColorScaleTitle;
		}

		// Token: 0x06002309 RID: 8969 RVA: 0x0008FBE8 File Offset: 0x0008DDE8
		private void ReadMapColorScaleTitleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapColorScaleTitle mapColorScaleTitle, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Style")
			{
				this.ReadMapStyle(mapColorScaleTitle, context);
				return;
			}
			if (!(localName == "Caption"))
			{
				return;
			}
			mapColorScaleTitle.Caption = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x0600230A RID: 8970 RVA: 0x0008FC40 File Offset: 0x0008DE40
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapDistanceScale ReadMapDistanceScale(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapDistanceScale mapDistanceScale = new Microsoft.ReportingServices.ReportIntermediateFormat.MapDistanceScale(map, map.GenerateActionOwnerID());
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapDistanceScale" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapDistanceScaleElement(map, mapDistanceScale, context);
					}
				}
				while (!flag);
			}
			return mapDistanceScale;
		}

		// Token: 0x0600230B RID: 8971 RVA: 0x0008FCB4 File Offset: 0x0008DEB4
		private void ReadMapDistanceScaleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapDistanceScale mapDistanceScale, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "ScaleColor")
			{
				mapDistanceScale.ScaleColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (!(localName == "ScaleBorderColor"))
			{
				this.ReadMapDockableSubItemElement(map, mapDistanceScale, context);
				return;
			}
			mapDistanceScale.ScaleBorderColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x0600230C RID: 8972 RVA: 0x0008FD2C File Offset: 0x0008DF2C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapTitle ReadMapTitle(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapTitle mapTitle = new Microsoft.ReportingServices.ReportIntermediateFormat.MapTitle(map, map.GenerateActionOwnerID());
			mapTitle.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "MapTitle", Microsoft.ReportingServices.ReportProcessing.ObjectType.Map, map.Name, mapTitle.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapTitle" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapTitleElement(map, mapTitle, context);
					}
				}
				while (!flag);
			}
			return mapTitle;
		}

		// Token: 0x0600230D RID: 8973 RVA: 0x0008FDD8 File Offset: 0x0008DFD8
		private void ReadMapTitleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapTitle mapTitle, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Style")
			{
				this.ReadMapTitleStyle(mapTitle, context);
				return;
			}
			if (localName == "Text")
			{
				mapTitle.Text = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (localName == "Angle")
			{
				mapTitle.Angle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (!(localName == "TextShadowOffset"))
			{
				this.ReadMapDockableSubItemElement(map, mapTitle, context);
				return;
			}
			mapTitle.TextShadowOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x0600230E RID: 8974 RVA: 0x0008FE90 File Offset: 0x0008E090
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapTitle> ReadMapTitles(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapTitle> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapTitle>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapTitles")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapTitle")
					{
						list.Add(this.ReadMapTitle(map, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x0600230F RID: 8975 RVA: 0x0008FF20 File Offset: 0x0008E120
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapLegend ReadMapLegend(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapLegend mapLegend = new Microsoft.ReportingServices.ReportIntermediateFormat.MapLegend(map, map.GenerateActionOwnerID());
			mapLegend.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "MapLegend", Microsoft.ReportingServices.ReportProcessing.ObjectType.Map, map.Name, mapLegend.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapLegend" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapLegendElement(map, mapLegend, context);
					}
				}
				while (!flag);
			}
			return mapLegend;
		}

		// Token: 0x06002310 RID: 8976 RVA: 0x0008FFCC File Offset: 0x0008E1CC
		private void ReadMapLegendElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapLegend mapLegend, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName != null)
			{
				int length = localName.Length;
				if (length != 6)
				{
					switch (length)
					{
					case 11:
						if (localName == "MinFontSize")
						{
							mapLegend.MinFontSize = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							return;
						}
						break;
					case 14:
					{
						char c = localName[0];
						if (c != 'I')
						{
							if (c == 'M')
							{
								if (localName == "MapLegendTitle")
								{
									mapLegend.MapLegendTitle = this.ReadMapLegendTitle(map, context);
									return;
								}
							}
						}
						else if (localName == "InterlacedRows")
						{
							mapLegend.InterlacedRows = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
							return;
						}
						break;
					}
					case 17:
						if (localName == "TextWrapThreshold")
						{
							mapLegend.TextWrapThreshold = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
							return;
						}
						break;
					case 18:
						if (localName == "EquallySpacedItems")
						{
							mapLegend.EquallySpacedItems = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
							return;
						}
						break;
					case 19:
					{
						char c = localName[0];
						if (c != 'A')
						{
							if (c == 'I')
							{
								if (localName == "InterlacedRowsColor")
								{
									mapLegend.InterlacedRowsColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									return;
								}
							}
						}
						else if (localName == "AutoFitTextDisabled")
						{
							mapLegend.AutoFitTextDisabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
							return;
						}
						break;
					}
					}
				}
				else if (localName == "Layout")
				{
					mapLegend.Layout = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					if (!mapLegend.Layout.IsExpression)
					{
						Validator.ValidateMapLegendLayout(mapLegend.Layout.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
						return;
					}
					return;
				}
			}
			this.ReadMapDockableSubItemElement(map, mapLegend, context);
		}

		// Token: 0x06002311 RID: 8977 RVA: 0x0009020C File Offset: 0x0008E40C
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapLegend> ReadMapLegends(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapLegend> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapLegend>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapLegends")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapLegend")
					{
						list.Add(this.ReadMapLegend(map, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x06002312 RID: 8978 RVA: 0x0009029C File Offset: 0x0008E49C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapLegendTitle ReadMapLegendTitle(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapLegendTitle mapLegendTitle = new Microsoft.ReportingServices.ReportIntermediateFormat.MapLegendTitle(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapLegendTitle" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapLegendTitleElement(map, mapLegendTitle, context);
					}
				}
				while (!flag);
			}
			return mapLegendTitle;
		}

		// Token: 0x06002313 RID: 8979 RVA: 0x0009030C File Offset: 0x0008E50C
		private void ReadMapLegendTitleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapLegendTitle mapLegendTitle, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Style")
			{
				this.ReadMapLegendTitleStyle(mapLegendTitle, context);
				return;
			}
			if (!(localName == "Caption"))
			{
				if (!(localName == "TitleSeparator"))
				{
					if (!(localName == "TitleSeparatorColor"))
					{
						return;
					}
					mapLegendTitle.TitleSeparatorColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				}
				else
				{
					mapLegendTitle.TitleSeparator = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					if (!mapLegendTitle.TitleSeparator.IsExpression)
					{
						Validator.ValidateMapLegendTitleSeparator(mapLegendTitle.TitleSeparator.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
						return;
					}
				}
				return;
			}
			mapLegendTitle.Caption = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x06002314 RID: 8980 RVA: 0x000903E8 File Offset: 0x0008E5E8
		private void ReadMapAppearanceRuleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapAppearanceRule mapAppearanceRule, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName != null)
			{
				switch (localName.Length)
				{
				case 8:
					if (!(localName == "EndValue"))
					{
						return;
					}
					mapAppearanceRule.EndValue = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				case 9:
					if (!(localName == "DataValue"))
					{
						return;
					}
					mapAppearanceRule.DataValue = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				case 10:
				{
					char c = localName[6];
					if (c <= 'T')
					{
						if (c != 'N')
						{
							if (c != 'T')
							{
								return;
							}
							if (!(localName == "LegendText"))
							{
								return;
							}
							mapAppearanceRule.LegendText = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							return;
						}
						else
						{
							if (!(localName == "LegendName"))
							{
								return;
							}
							mapAppearanceRule.LegendName = this.m_reader.ReadString();
							return;
						}
					}
					else if (c != 'a')
					{
						if (c != 'k')
						{
							return;
						}
						if (!(localName == "MapBuckets"))
						{
							return;
						}
						mapAppearanceRule.MapBuckets = this.ReadMapBuckets(map, context);
						return;
					}
					else
					{
						if (!(localName == "StartValue"))
						{
							return;
						}
						mapAppearanceRule.StartValue = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						return;
					}
					break;
				}
				case 11:
					if (!(localName == "BucketCount"))
					{
						return;
					}
					mapAppearanceRule.BucketCount = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
					return;
				case 12:
				case 13:
				case 14:
					break;
				case 15:
					if (!(localName == "DataElementName"))
					{
						return;
					}
					mapAppearanceRule.DataElementName = this.m_reader.ReadString();
					return;
				case 16:
					if (!(localName == "DistributionType"))
					{
						return;
					}
					mapAppearanceRule.DistributionType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					if (!mapAppearanceRule.DistributionType.IsExpression)
					{
						Validator.ValidateMapRuleDistributionType(mapAppearanceRule.DistributionType.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
						return;
					}
					break;
				case 17:
					if (!(localName == "DataElementOutput"))
					{
						return;
					}
					mapAppearanceRule.DataElementOutput = this.ReadDataElementOutput();
					break;
				default:
					return;
				}
			}
		}

		// Token: 0x06002315 RID: 8981 RVA: 0x00090628 File Offset: 0x0008E828
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapBucket ReadMapBucket(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapBucket mapBucket = new Microsoft.ReportingServices.ReportIntermediateFormat.MapBucket(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapBucket" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapBucketElement(map, mapBucket, context);
					}
				}
				while (!flag);
			}
			return mapBucket;
		}

		// Token: 0x06002316 RID: 8982 RVA: 0x00090698 File Offset: 0x0008E898
		private void ReadMapBucketElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapBucket mapBucket, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "StartValue")
			{
				mapBucket.StartValue = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (!(localName == "EndValue"))
			{
				return;
			}
			mapBucket.EndValue = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x06002317 RID: 8983 RVA: 0x00090704 File Offset: 0x0008E904
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapBucket> ReadMapBuckets(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapBucket> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapBucket>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapBuckets")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapBucket")
					{
						list.Add(this.ReadMapBucket(map, context));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x06002318 RID: 8984 RVA: 0x00090790 File Offset: 0x0008E990
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapColorPaletteRule ReadMapColorPaletteRule(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapColorPaletteRule mapColorPaletteRule = new Microsoft.ReportingServices.ReportIntermediateFormat.MapColorPaletteRule(mapVectorLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapColorPaletteRule" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapColorPaletteRuleElement(map, mapColorPaletteRule, context);
					}
				}
				while (!flag);
			}
			return mapColorPaletteRule;
		}

		// Token: 0x06002319 RID: 8985 RVA: 0x00090800 File Offset: 0x0008EA00
		private void ReadMapColorPaletteRuleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapColorPaletteRule mapColorPaletteRule, PublishingContextStruct context)
		{
			if (this.m_reader.LocalName == "Palette")
			{
				mapColorPaletteRule.Palette = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				if (!mapColorPaletteRule.Palette.IsExpression)
				{
					Validator.ValidateMapPalette(mapColorPaletteRule.Palette.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
					return;
				}
			}
			else
			{
				this.ReadMapColorRuleElement(map, mapColorPaletteRule, context);
			}
		}

		// Token: 0x0600231A RID: 8986 RVA: 0x0009087C File Offset: 0x0008EA7C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapColorRangeRule ReadMapColorRangeRule(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapColorRangeRule mapColorRangeRule = new Microsoft.ReportingServices.ReportIntermediateFormat.MapColorRangeRule(mapVectorLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapColorRangeRule" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapColorRangeRuleElement(map, mapColorRangeRule, context);
					}
				}
				while (!flag);
			}
			return mapColorRangeRule;
		}

		// Token: 0x0600231B RID: 8987 RVA: 0x000908EC File Offset: 0x0008EAEC
		private void ReadMapColorRangeRuleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapColorRangeRule mapColorRangeRule, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "StartColor")
			{
				mapColorRangeRule.StartColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (localName == "MiddleColor")
			{
				mapColorRangeRule.MiddleColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (!(localName == "EndColor"))
			{
				this.ReadMapColorRuleElement(map, mapColorRangeRule, context);
				return;
			}
			mapColorRangeRule.EndColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x0600231C RID: 8988 RVA: 0x0009098B File Offset: 0x0008EB8B
		private void ReadMapColorRuleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapColorRule mapColorRule, PublishingContextStruct context)
		{
			if (this.m_reader.LocalName == "ShowInColorScale")
			{
				mapColorRule.ShowInColorScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
				return;
			}
			this.ReadMapAppearanceRuleElement(map, mapColorRule, context);
		}

		// Token: 0x0600231D RID: 8989 RVA: 0x000909C8 File Offset: 0x0008EBC8
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapLineRules ReadMapLineRules(Microsoft.ReportingServices.ReportIntermediateFormat.MapLineLayer mapLineLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapLineRules mapLineRules = new Microsoft.ReportingServices.ReportIntermediateFormat.MapLineRules(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapLineRules" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapLineRulesElement(mapLineLayer, map, mapLineRules, context);
					}
				}
				while (!flag);
			}
			return mapLineRules;
		}

		// Token: 0x0600231E RID: 8990 RVA: 0x00090A38 File Offset: 0x0008EC38
		private void ReadMapLineRulesElement(Microsoft.ReportingServices.ReportIntermediateFormat.MapLineLayer mapLineLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapLineRules mapLineRules, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "MapSizeRule")
			{
				mapLineRules.MapSizeRule = this.ReadMapSizeRule(mapLineLayer, map, context);
				return;
			}
			if (!(localName == "MapColorPaletteRule") && !(localName == "MapColorRangeRule") && !(localName == "MapCustomColorRule"))
			{
				return;
			}
			Microsoft.ReportingServices.ReportIntermediateFormat.MapColorRule mapColorRule = mapLineRules.MapColorRule;
			this.ReadMapColorRule(mapLineLayer, map, context, ref mapColorRule, this.m_reader.LocalName);
			mapLineRules.MapColorRule = mapColorRule;
		}

		// Token: 0x0600231F RID: 8991 RVA: 0x00090ABC File Offset: 0x0008ECBC
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonRules ReadMapPolygonRules(Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonLayer mapPolygonLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonRules mapPolygonRules = new Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonRules(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapPolygonRules" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapPolygonRulesElement(mapPolygonLayer, map, mapPolygonRules, context);
					}
				}
				while (!flag);
			}
			return mapPolygonRules;
		}

		// Token: 0x06002320 RID: 8992 RVA: 0x00090B2C File Offset: 0x0008ED2C
		private void ReadMapPolygonRulesElement(Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonLayer mapPolygonLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonRules mapPolygonRules, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "MapColorPaletteRule" || localName == "MapColorRangeRule" || localName == "MapCustomColorRule")
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.MapColorRule mapColorRule = mapPolygonRules.MapColorRule;
				this.ReadMapColorRule(mapPolygonLayer, map, context, ref mapColorRule, this.m_reader.LocalName);
				mapPolygonRules.MapColorRule = mapColorRule;
			}
		}

		// Token: 0x06002321 RID: 8993 RVA: 0x00090B94 File Offset: 0x0008ED94
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapSizeRule ReadMapSizeRule(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapSizeRule mapSizeRule = new Microsoft.ReportingServices.ReportIntermediateFormat.MapSizeRule(mapVectorLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapSizeRule" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapSizeRuleElement(map, mapSizeRule, context);
					}
				}
				while (!flag);
			}
			return mapSizeRule;
		}

		// Token: 0x06002322 RID: 8994 RVA: 0x00090C04 File Offset: 0x0008EE04
		private void ReadMapSizeRuleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapSizeRule mapSizeRule, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "StartSize")
			{
				mapSizeRule.StartSize = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (!(localName == "EndSize"))
			{
				this.ReadMapAppearanceRuleElement(map, mapSizeRule, context);
				return;
			}
			mapSizeRule.EndSize = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x06002323 RID: 8995 RVA: 0x00090C7C File Offset: 0x0008EE7C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerImage ReadMapMarkerImage(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerImage mapMarkerImage = new Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerImage(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapMarkerImage" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapMarkerImageElement(map, mapMarkerImage, context);
					}
				}
				while (!flag);
			}
			return mapMarkerImage;
		}

		// Token: 0x06002324 RID: 8996 RVA: 0x00090CEC File Offset: 0x0008EEEC
		private void ReadMapMarkerImageElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerImage mapMarkerImage, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (!(localName == "Source"))
			{
				if (localName == "Value")
				{
					mapMarkerImage.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				}
				if (localName == "MIMEType")
				{
					mapMarkerImage.MIMEType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				}
				if (localName == "TransparentColor")
				{
					mapMarkerImage.TransparentColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					return;
				}
				if (!(localName == "ResizeMode"))
				{
					return;
				}
				mapMarkerImage.ResizeMode = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				if (!mapMarkerImage.ResizeMode.IsExpression)
				{
					Validator.ValidateMapResizeMode(mapMarkerImage.ResizeMode.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
				}
			}
			else
			{
				mapMarkerImage.Source = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				if (!mapMarkerImage.Source.IsExpression)
				{
					Validator.ValidateImageSourceType(mapMarkerImage.Source.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
					return;
				}
			}
		}

		// Token: 0x06002325 RID: 8997 RVA: 0x00090E44 File Offset: 0x0008F044
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapMarker ReadMapMarker(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapMarker mapMarker = new Microsoft.ReportingServices.ReportIntermediateFormat.MapMarker(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapMarker" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapMarkerElement(map, mapMarker, context);
					}
				}
				while (!flag);
			}
			return mapMarker;
		}

		// Token: 0x06002326 RID: 8998 RVA: 0x00090EB4 File Offset: 0x0008F0B4
		private void ReadMapMarkerElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapMarker mapMarker, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (!(localName == "MapMarkerStyle"))
			{
				if (!(localName == "MapMarkerImage"))
				{
					return;
				}
				mapMarker.MapMarkerImage = this.ReadMapMarkerImage(map, context);
			}
			else
			{
				mapMarker.MapMarkerStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				if (!mapMarker.MapMarkerStyle.IsExpression)
				{
					Validator.ValidateMapMarkerStyle(mapMarker.MapMarkerStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
					return;
				}
			}
		}

		// Token: 0x06002327 RID: 8999 RVA: 0x00090F44 File Offset: 0x0008F144
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapMarker> ReadMapMarkers(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapMarker> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapMarker>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapMarkers")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapMarker")
					{
						list.Add(this.ReadMapMarker(map, context));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x06002328 RID: 9000 RVA: 0x00090FD0 File Offset: 0x0008F1D0
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerRule ReadMapMarkerRule(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerRule mapMarkerRule = new Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerRule(mapVectorLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapMarkerRule" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapMarkerRuleElement(map, mapMarkerRule, context);
					}
				}
				while (!flag);
			}
			return mapMarkerRule;
		}

		// Token: 0x06002329 RID: 9001 RVA: 0x0009103F File Offset: 0x0008F23F
		private void ReadMapMarkerRuleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerRule mapMarkerRule, PublishingContextStruct context)
		{
			if (this.m_reader.LocalName == "MapMarkers")
			{
				mapMarkerRule.MapMarkers = this.ReadMapMarkers(map, context);
				return;
			}
			this.ReadMapAppearanceRuleElement(map, mapMarkerRule, context);
		}

		// Token: 0x0600232A RID: 9002 RVA: 0x00091070 File Offset: 0x0008F270
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapPointRules ReadMapPointRules(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, string tagName)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapPointRules mapPointRules = new Microsoft.ReportingServices.ReportIntermediateFormat.MapPointRules(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (tagName == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapPointRulesElement(mapVectorLayer, map, mapPointRules, context);
					}
				}
				while (!flag);
			}
			return mapPointRules;
		}

		// Token: 0x0600232B RID: 9003 RVA: 0x000910DC File Offset: 0x0008F2DC
		private void ReadMapPointRulesElement(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapPointRules mapPointRules, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "MapSizeRule")
			{
				mapPointRules.MapSizeRule = this.ReadMapSizeRule(mapVectorLayer, map, context);
				return;
			}
			if (localName == "MapColorPaletteRule" || localName == "MapColorRangeRule" || localName == "MapCustomColorRule")
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.MapColorRule mapColorRule = mapPointRules.MapColorRule;
				this.ReadMapColorRule(mapVectorLayer, map, context, ref mapColorRule, this.m_reader.LocalName);
				mapPointRules.MapColorRule = mapColorRule;
				return;
			}
			if (!(localName == "MapMarkerRule"))
			{
				return;
			}
			mapPointRules.MapMarkerRule = this.ReadMapMarkerRule(mapVectorLayer, map, context);
		}

		// Token: 0x0600232C RID: 9004 RVA: 0x00091180 File Offset: 0x0008F380
		private void ReadMapColorRule(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, ref Microsoft.ReportingServices.ReportIntermediateFormat.MapColorRule colorRule, string propertyName)
		{
			if (colorRule != null)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsMapPropertyAlreadyDefined, Severity.Error, context.ObjectType, context.ObjectName, propertyName, Array.Empty<string>());
				return;
			}
			if (propertyName == "MapColorPaletteRule")
			{
				colorRule = this.ReadMapColorPaletteRule(mapVectorLayer, map, context);
				return;
			}
			if (propertyName == "MapColorRangeRule")
			{
				colorRule = this.ReadMapColorRangeRule(mapVectorLayer, map, context);
				return;
			}
			if (!(propertyName == "MapCustomColorRule"))
			{
				return;
			}
			colorRule = this.ReadMapCustomColorRule(mapVectorLayer, map, context);
		}

		// Token: 0x0600232D RID: 9005 RVA: 0x0009120C File Offset: 0x0008F40C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColorRule ReadMapCustomColorRule(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColorRule mapCustomColorRule = new Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColorRule(mapVectorLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapCustomColorRule" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapCustomColorRuleElement(map, mapCustomColorRule, context);
					}
				}
				while (!flag);
			}
			return mapCustomColorRule;
		}

		// Token: 0x0600232E RID: 9006 RVA: 0x0009127B File Offset: 0x0008F47B
		private void ReadMapCustomColorRuleElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColorRule mapCustomColorRule, PublishingContextStruct context)
		{
			if (this.m_reader.LocalName == "MapCustomColors")
			{
				mapCustomColorRule.MapCustomColors = this.ReadMapCustomColors(map, context);
				return;
			}
			this.ReadMapColorRuleElement(map, mapCustomColorRule, context);
		}

		// Token: 0x0600232F RID: 9007 RVA: 0x000912AC File Offset: 0x0008F4AC
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColor ReadMapCustomColor(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColor mapCustomColor = new Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColor(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapCustomColor" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapCustomColorElement(map, mapCustomColor, context);
					}
				}
				while (!flag);
			}
			return mapCustomColor;
		}

		// Token: 0x06002330 RID: 9008 RVA: 0x0009131A File Offset: 0x0008F51A
		private void ReadMapCustomColorElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColor mapCustomColor, PublishingContextStruct context)
		{
			if (this.m_reader.LocalName == "Color")
			{
				mapCustomColor.Color = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
			}
		}

		// Token: 0x06002331 RID: 9009 RVA: 0x00091350 File Offset: 0x0008F550
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColor> ReadMapCustomColors(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColor> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColor>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapCustomColors")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapCustomColor")
					{
						list.Add(new Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomColor(map)
						{
							Color = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context)
						});
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x06002332 RID: 9010 RVA: 0x000913FC File Offset: 0x0008F5FC
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapLineTemplate ReadMapLineTemplate(Microsoft.ReportingServices.ReportIntermediateFormat.MapLineLayer mapLineLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapLineTemplate mapLineTemplate = new Microsoft.ReportingServices.ReportIntermediateFormat.MapLineTemplate(mapLineLayer, map, map.GenerateActionOwnerID());
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapLineTemplate" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapLineTemplateElement(map, mapLineTemplate, context);
					}
				}
				while (!flag);
			}
			return mapLineTemplate;
		}

		// Token: 0x06002333 RID: 9011 RVA: 0x00091474 File Offset: 0x0008F674
		private void ReadMapLineTemplateElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapLineTemplate mapLineTemplate, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (!(localName == "Width"))
			{
				if (!(localName == "LabelPlacement"))
				{
					this.ReadMapSpatialElementTemplateElement(map, mapLineTemplate, context);
				}
				else
				{
					mapLineTemplate.LabelPlacement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					if (!mapLineTemplate.LabelPlacement.IsExpression)
					{
						Validator.ValidateMapLineLabelPlacement(mapLineTemplate.LabelPlacement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
						return;
					}
				}
				return;
			}
			mapLineTemplate.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x06002334 RID: 9012 RVA: 0x0009151C File Offset: 0x0008F71C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonTemplate ReadMapPolygonTemplate(Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonLayer mapPolygonLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonTemplate mapPolygonTemplate = new Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonTemplate(mapPolygonLayer, map, map.GenerateActionOwnerID());
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapPolygonTemplate" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapPolygonTemplateElement(map, mapPolygonTemplate, context);
					}
				}
				while (!flag);
			}
			return mapPolygonTemplate;
		}

		// Token: 0x06002335 RID: 9013 RVA: 0x00091594 File Offset: 0x0008F794
		private void ReadMapPolygonTemplateElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonTemplate mapPolygonTemplate, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "ScaleFactor")
			{
				mapPolygonTemplate.ScaleFactor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (localName == "CenterPointOffsetX")
			{
				mapPolygonTemplate.CenterPointOffsetX = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (!(localName == "CenterPointOffsetY"))
			{
				if (!(localName == "ShowLabel"))
				{
					if (!(localName == "LabelPlacement"))
					{
						this.ReadMapSpatialElementTemplateElement(map, mapPolygonTemplate, context);
					}
					else
					{
						mapPolygonTemplate.LabelPlacement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						if (!mapPolygonTemplate.LabelPlacement.IsExpression)
						{
							Validator.ValidateMapPolygonLabelPlacement(mapPolygonTemplate.LabelPlacement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
							return;
						}
					}
				}
				else
				{
					mapPolygonTemplate.ShowLabel = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					if (!mapPolygonTemplate.ShowLabel.IsExpression)
					{
						Validator.ValidateMapAutoBool(mapPolygonTemplate.ShowLabel.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
						return;
					}
				}
				return;
			}
			mapPolygonTemplate.CenterPointOffsetY = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
		}

		// Token: 0x06002336 RID: 9014 RVA: 0x000916EC File Offset: 0x0008F8EC
		private void ReadMapSpatialElementTemplateElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialElementTemplate mapSpatialElementTemplate, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName != null)
			{
				switch (localName.Length)
				{
				case 5:
				{
					char c = localName[0];
					if (c != 'L')
					{
						if (c != 'S')
						{
							return;
						}
						if (!(localName == "Style"))
						{
							return;
						}
						this.ReadMapStyle(mapSpatialElementTemplate, context);
						return;
					}
					else
					{
						if (!(localName == "Label"))
						{
							return;
						}
						mapSpatialElementTemplate.Label = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						return;
					}
					break;
				}
				case 6:
					if (!(localName == "Hidden"))
					{
						return;
					}
					mapSpatialElementTemplate.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
					return;
				case 7:
				{
					char c = localName[6];
					if (c != 'X')
					{
						if (c != 'Y')
						{
							if (c != 'p')
							{
								return;
							}
							if (!(localName == "ToolTip"))
							{
								return;
							}
							mapSpatialElementTemplate.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							return;
						}
						else
						{
							if (!(localName == "OffsetY"))
							{
								return;
							}
							mapSpatialElementTemplate.OffsetY = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
							return;
						}
					}
					else
					{
						if (!(localName == "OffsetX"))
						{
							return;
						}
						mapSpatialElementTemplate.OffsetX = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
						return;
					}
					break;
				}
				case 8:
				case 9:
				case 11:
				case 12:
				case 13:
				case 14:
					break;
				case 10:
				{
					if (!(localName == "ActionInfo"))
					{
						return;
					}
					bool flag = false;
					mapSpatialElementTemplate.Action = this.ReadActionInfo(context, StyleOwnerType.Map, out flag);
					return;
				}
				case 15:
					if (!(localName == "DataElementName"))
					{
						return;
					}
					mapSpatialElementTemplate.DataElementName = this.m_reader.ReadString();
					return;
				case 16:
					if (!(localName == "DataElementLabel"))
					{
						return;
					}
					mapSpatialElementTemplate.DataElementLabel = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					break;
				case 17:
					if (!(localName == "DataElementOutput"))
					{
						return;
					}
					mapSpatialElementTemplate.DataElementOutput = this.ReadDataElementOutput();
					return;
				default:
					return;
				}
			}
		}

		// Token: 0x06002337 RID: 9015 RVA: 0x00091908 File Offset: 0x0008FB08
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerTemplate ReadMapMarkerTemplate(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerTemplate mapMarkerTemplate = new Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerTemplate(mapVectorLayer, map, map.GenerateActionOwnerID());
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapMarkerTemplate" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapMarkerTemplateElement(map, mapMarkerTemplate, context);
					}
				}
				while (!flag);
			}
			return mapMarkerTemplate;
		}

		// Token: 0x06002338 RID: 9016 RVA: 0x0009197D File Offset: 0x0008FB7D
		private void ReadMapMarkerTemplateElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapMarkerTemplate mapMarkerTemplate, PublishingContextStruct context)
		{
			if (this.m_reader.LocalName == "MapMarker")
			{
				mapMarkerTemplate.MapMarker = this.ReadMapMarker(map, context);
				return;
			}
			this.ReadMapPointTemplateElement(map, mapMarkerTemplate, context);
		}

		// Token: 0x06002339 RID: 9017 RVA: 0x000919B0 File Offset: 0x0008FBB0
		private void ReadMapPointTemplateElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapPointTemplate mapPointTemplate, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (!(localName == "Size"))
			{
				if (!(localName == "LabelPlacement"))
				{
					this.ReadMapSpatialElementTemplateElement(map, mapPointTemplate, context);
				}
				else
				{
					mapPointTemplate.LabelPlacement = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					if (!mapPointTemplate.LabelPlacement.IsExpression)
					{
						Validator.ValidateMapPointLabelPlacement(mapPointTemplate.LabelPlacement.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
						return;
					}
				}
				return;
			}
			mapPointTemplate.Size = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
			PublishingValidator.ValidateSize(mapPointTemplate.Size, Validator.NormalMin, Validator.NormalMax, map.ObjectType, map.Name, "Size", this.m_errorContext);
		}

		// Token: 0x0600233A RID: 9018 RVA: 0x00091A88 File Offset: 0x0008FC88
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapField ReadMapField(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapField mapField = new Microsoft.ReportingServices.ReportIntermediateFormat.MapField(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapField" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapFieldElement(map, mapField, context);
					}
				}
				while (!flag);
			}
			return mapField;
		}

		// Token: 0x0600233B RID: 9019 RVA: 0x00091AF8 File Offset: 0x0008FCF8
		private void ReadMapFieldElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapField mapField, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Name")
			{
				mapField.Name = this.m_reader.ReadString();
				return;
			}
			if (!(localName == "Value"))
			{
				return;
			}
			mapField.Value = this.m_reader.ReadString();
		}

		// Token: 0x0600233C RID: 9020 RVA: 0x00091B50 File Offset: 0x0008FD50
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapField> ReadMapFields(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapField> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapField>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapFields")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapField")
					{
						list.Add(this.ReadMapField(map, context));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x0600233D RID: 9021 RVA: 0x00091BDC File Offset: 0x0008FDDC
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapLine ReadMapLine(Microsoft.ReportingServices.ReportIntermediateFormat.MapLineLayer mapLineLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapLine mapLine = new Microsoft.ReportingServices.ReportIntermediateFormat.MapLine(mapLineLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapLine" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapLineElement(mapLineLayer, map, mapLine, context);
					}
				}
				while (!flag);
			}
			return mapLine;
		}

		// Token: 0x0600233E RID: 9022 RVA: 0x00091C4C File Offset: 0x0008FE4C
		private void ReadMapLineElement(Microsoft.ReportingServices.ReportIntermediateFormat.MapLineLayer mapLineLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapLine mapLine, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "UseCustomLineTemplate")
			{
				mapLine.UseCustomLineTemplate = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
				return;
			}
			if (!(localName == "MapLineTemplate"))
			{
				this.ReadMapSpatialElementElement(map, mapLine, context);
				return;
			}
			mapLine.MapLineTemplate = this.ReadMapLineTemplate(mapLineLayer, map, context);
		}

		// Token: 0x0600233F RID: 9023 RVA: 0x00091CB8 File Offset: 0x0008FEB8
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapLine> ReadMapLines(Microsoft.ReportingServices.ReportIntermediateFormat.MapLineLayer mapLineLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapLine> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapLine>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapLines")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapLine")
					{
						list.Add(this.ReadMapLine(mapLineLayer, map, context));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x06002340 RID: 9024 RVA: 0x00091D44 File Offset: 0x0008FF44
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygon ReadMapPolygon(Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonLayer mapPolygonLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygon mapPolygon = new Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygon(mapPolygonLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapPolygon" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapPolygonElement(mapPolygonLayer, map, mapPolygon, context);
					}
				}
				while (!flag);
			}
			return mapPolygon;
		}

		// Token: 0x06002341 RID: 9025 RVA: 0x00091DB4 File Offset: 0x0008FFB4
		private void ReadMapPolygonElement(Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonLayer mapPolygonLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygon mapPolygon, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "UseCustomPolygonTemplate")
			{
				mapPolygon.UseCustomPolygonTemplate = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
				return;
			}
			if (localName == "MapPolygonTemplate")
			{
				mapPolygon.MapPolygonTemplate = this.ReadMapPolygonTemplate(mapPolygonLayer, map, context);
				return;
			}
			if (localName == "UseCustomCenterPointTemplate")
			{
				mapPolygon.UseCustomCenterPointTemplate = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
				return;
			}
			if (!(localName == "MapMarkerTemplate"))
			{
				this.ReadMapSpatialElementElement(map, mapPolygon, context);
				return;
			}
			Microsoft.ReportingServices.ReportIntermediateFormat.MapPointTemplate mapCenterPointTemplate = mapPolygon.MapCenterPointTemplate;
			this.ReadMapPointTemplate(mapPolygonLayer, map, context, ref mapCenterPointTemplate, this.m_reader.LocalName);
			mapPolygon.MapCenterPointTemplate = mapCenterPointTemplate;
		}

		// Token: 0x06002342 RID: 9026 RVA: 0x00091E7C File Offset: 0x0009007C
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygon> ReadMapPolygons(Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonLayer mapPolygonLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygon> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygon>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapPolygons")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapPolygon")
					{
						list.Add(this.ReadMapPolygon(mapPolygonLayer, map, context));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x06002343 RID: 9027 RVA: 0x00091F08 File Offset: 0x00090108
		private void ReadMapSpatialElementElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialElement mapSpatialElement, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "VectorData")
			{
				mapSpatialElement.VectorData = this.m_reader.ReadString();
				return;
			}
			if (!(localName == "MapFields"))
			{
				return;
			}
			mapSpatialElement.MapFields = this.ReadMapFields(map, context);
		}

		// Token: 0x06002344 RID: 9028 RVA: 0x00091F5C File Offset: 0x0009015C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapPoint ReadMapPoint(Microsoft.ReportingServices.ReportIntermediateFormat.MapPointLayer mapPointLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapPoint mapPoint = new Microsoft.ReportingServices.ReportIntermediateFormat.MapPoint(mapPointLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapPoint" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapPointElement(mapPointLayer, map, mapPoint, context);
					}
				}
				while (!flag);
			}
			return mapPoint;
		}

		// Token: 0x06002345 RID: 9029 RVA: 0x00091FCC File Offset: 0x000901CC
		private void ReadMapPointElement(Microsoft.ReportingServices.ReportIntermediateFormat.MapPointLayer mapPointLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapPoint mapPoint, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "UseCustomPointTemplate")
			{
				mapPoint.UseCustomPointTemplate = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
				return;
			}
			if (!(localName == "MapMarkerTemplate"))
			{
				this.ReadMapSpatialElementElement(map, mapPoint, context);
				return;
			}
			Microsoft.ReportingServices.ReportIntermediateFormat.MapPointTemplate mapPointTemplate = mapPoint.MapPointTemplate;
			this.ReadMapPointTemplate(mapPointLayer, map, context, ref mapPointTemplate, this.m_reader.LocalName);
			mapPoint.MapPointTemplate = mapPointTemplate;
		}

		// Token: 0x06002346 RID: 9030 RVA: 0x00092050 File Offset: 0x00090250
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapPoint> ReadMapPoints(Microsoft.ReportingServices.ReportIntermediateFormat.MapPointLayer mapPointLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapPoint> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapPoint>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapPoints")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapPoint")
					{
						list.Add(this.ReadMapPoint(mapPointLayer, map, context));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x06002347 RID: 9031 RVA: 0x000920DC File Offset: 0x000902DC
		private void ReadMapPointTemplate(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, ref Microsoft.ReportingServices.ReportIntermediateFormat.MapPointTemplate symbolTemplate, string propertyName)
		{
			if (symbolTemplate != null)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsMapPropertyAlreadyDefined, Severity.Error, context.ObjectType, context.ObjectName, propertyName, Array.Empty<string>());
				return;
			}
			if (propertyName == "MapMarkerTemplate")
			{
				symbolTemplate = this.ReadMapMarkerTemplate(mapVectorLayer, map, context);
			}
		}

		// Token: 0x06002348 RID: 9032 RVA: 0x00092130 File Offset: 0x00090330
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldDefinition ReadMapFieldDefinition(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldDefinition mapFieldDefinition = new Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldDefinition(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapFieldDefinition" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapFieldDefinitionElement(map, mapFieldDefinition, context);
					}
				}
				while (!flag);
			}
			return mapFieldDefinition;
		}

		// Token: 0x06002349 RID: 9033 RVA: 0x000921A0 File Offset: 0x000903A0
		private void ReadMapFieldDefinitionElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldDefinition mapFieldDefinition, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Name")
			{
				mapFieldDefinition.Name = this.m_reader.ReadString();
				return;
			}
			if (!(localName == "DataType"))
			{
				return;
			}
			mapFieldDefinition.DataType = this.ReadDataType();
		}

		// Token: 0x0600234A RID: 9034 RVA: 0x000921F2 File Offset: 0x000903F2
		private MapDataType ReadDataType()
		{
			return (MapDataType)Enum.Parse(typeof(MapDataType), this.m_reader.ReadString(), false);
		}

		// Token: 0x0600234B RID: 9035 RVA: 0x00092214 File Offset: 0x00090414
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldDefinition> ReadMapFieldDefinitions(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldDefinition> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldDefinition>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapFieldDefinitions")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapFieldDefinition")
					{
						list.Add(this.ReadMapFieldDefinition(map, context));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x0600234C RID: 9036 RVA: 0x000922A0 File Offset: 0x000904A0
		private void ReadMapLayerElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapLayer mapLayer, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (!(localName == "VisibilityMode"))
			{
				if (localName == "MinimumZoom")
				{
					mapLayer.MinimumZoom = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
					return;
				}
				if (localName == "MaximumZoom")
				{
					mapLayer.MaximumZoom = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
					return;
				}
				if (!(localName == "Transparency"))
				{
					return;
				}
				mapLayer.Transparency = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
			}
			else
			{
				mapLayer.VisibilityMode = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				if (!mapLayer.VisibilityMode.IsExpression)
				{
					Validator.ValidateMapVisibilityMode(mapLayer.VisibilityMode.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
					return;
				}
			}
		}

		// Token: 0x0600234D RID: 9037 RVA: 0x00092390 File Offset: 0x00090590
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapLayer> ReadMapLayers(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapLayer> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapLayer>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapLayers")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "MapTileLayer"))
						{
							if (!(localName == "MapPolygonLayer"))
							{
								if (!(localName == "MapPointLayer"))
								{
									if (localName == "MapLineLayer")
									{
										list.Add(this.ReadMapLineLayer(map, context, dynamicImageObjectUniqueNameValidator));
									}
								}
								else
								{
									list.Add(this.ReadMapPointLayer(map, context, dynamicImageObjectUniqueNameValidator));
								}
							}
							else
							{
								list.Add(this.ReadMapPolygonLayer(map, context, dynamicImageObjectUniqueNameValidator));
							}
						}
						else
						{
							list.Add(this.ReadMapTileLayer(map, context, dynamicImageObjectUniqueNameValidator));
						}
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x0600234E RID: 9038 RVA: 0x00092490 File Offset: 0x00090690
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapLineLayer ReadMapLineLayer(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapLineLayer mapLineLayer = new Microsoft.ReportingServices.ReportIntermediateFormat.MapLineLayer(this.GenerateID(), map);
			mapLineLayer.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "MapLayer", Microsoft.ReportingServices.ReportProcessing.ObjectType.Map, map.Name, mapLineLayer.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapLineLayer" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapLineLayerElement(map, mapLineLayer, context);
					}
				}
				while (!flag);
			}
			mapLineLayer.Validate(this.m_errorContext);
			return mapLineLayer;
		}

		// Token: 0x0600234F RID: 9039 RVA: 0x00092548 File Offset: 0x00090748
		private void ReadMapLineLayerElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapLineLayer mapLineLayer, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "MapLineTemplate")
			{
				mapLineLayer.MapLineTemplate = this.ReadMapLineTemplate(mapLineLayer, map, context);
				return;
			}
			if (localName == "MapLineRules")
			{
				mapLineLayer.MapLineRules = this.ReadMapLineRules(mapLineLayer, map, context);
				return;
			}
			if (!(localName == "MapLines"))
			{
				this.ReadMapVectorLayerElement(map, mapLineLayer, context);
				return;
			}
			mapLineLayer.MapLines = this.ReadMapLines(mapLineLayer, map, context);
		}

		// Token: 0x06002350 RID: 9040 RVA: 0x000925C4 File Offset: 0x000907C4
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapShapefile ReadMapShapefile(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapShapefile mapShapefile = new Microsoft.ReportingServices.ReportIntermediateFormat.MapShapefile(mapVectorLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapShapefile" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapShapefileElement(map, mapShapefile, context);
					}
				}
				while (!flag);
			}
			return mapShapefile;
		}

		// Token: 0x06002351 RID: 9041 RVA: 0x00092634 File Offset: 0x00090834
		private void ReadMapShapefileElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapShapefile mapShapefile, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Source")
			{
				mapShapefile.Source = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (!(localName == "MapFieldNames"))
			{
				return;
			}
			mapShapefile.MapFieldNames = this.ReadMapFieldNames(map, context);
		}

		// Token: 0x06002352 RID: 9042 RVA: 0x00092694 File Offset: 0x00090894
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonLayer ReadMapPolygonLayer(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonLayer mapPolygonLayer = new Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonLayer(this.GenerateID(), map);
			mapPolygonLayer.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "MapLayer", Microsoft.ReportingServices.ReportProcessing.ObjectType.Map, map.Name, mapPolygonLayer.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapPolygonLayer" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapPolygonLayerElement(map, mapPolygonLayer, context);
					}
				}
				while (!flag);
			}
			mapPolygonLayer.Validate(this.m_errorContext);
			return mapPolygonLayer;
		}

		// Token: 0x06002353 RID: 9043 RVA: 0x0009274C File Offset: 0x0009094C
		private void ReadMapPolygonLayerElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapPolygonLayer mapPolygonLayer, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "MapPolygonTemplate")
			{
				mapPolygonLayer.MapPolygonTemplate = this.ReadMapPolygonTemplate(mapPolygonLayer, map, context);
				return;
			}
			if (localName == "MapPolygonRules")
			{
				mapPolygonLayer.MapPolygonRules = this.ReadMapPolygonRules(mapPolygonLayer, map, context);
				return;
			}
			if (localName == "MapMarkerTemplate")
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.MapPointTemplate mapCenterPointTemplate = mapPolygonLayer.MapCenterPointTemplate;
				this.ReadMapPointTemplate(mapPolygonLayer, map, context, ref mapCenterPointTemplate, this.m_reader.LocalName);
				mapPolygonLayer.MapCenterPointTemplate = mapCenterPointTemplate;
				return;
			}
			if (localName == "MapCenterPointRules")
			{
				mapPolygonLayer.MapCenterPointRules = this.ReadMapPointRules(mapPolygonLayer, map, context, "MapCenterPointRules");
				return;
			}
			if (!(localName == "MapPolygons"))
			{
				this.ReadMapVectorLayerElement(map, mapPolygonLayer, context);
				return;
			}
			mapPolygonLayer.MapPolygons = this.ReadMapPolygons(mapPolygonLayer, map, context);
		}

		// Token: 0x06002354 RID: 9044 RVA: 0x0009281C File Offset: 0x00090A1C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialDataRegion ReadMapSpatialDataRegion(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialDataRegion mapSpatialDataRegion = new Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialDataRegion(mapVectorLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapSpatialDataRegion" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapSpatialDataRegionElement(map, mapSpatialDataRegion, context);
					}
				}
				while (!flag);
			}
			return mapSpatialDataRegion;
		}

		// Token: 0x06002355 RID: 9045 RVA: 0x0009288B File Offset: 0x00090A8B
		private void ReadMapSpatialDataRegionElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialDataRegion mapSpatialDataRegion, PublishingContextStruct context)
		{
			if (this.m_reader.LocalName == "VectorData")
			{
				mapSpatialDataRegion.VectorData = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
			}
		}

		// Token: 0x06002356 RID: 9046 RVA: 0x000928C0 File Offset: 0x00090AC0
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialDataSet ReadMapSpatialDataSet(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialDataSet mapSpatialDataSet = new Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialDataSet(mapVectorLayer, map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapSpatialDataSet" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapSpatialDataSetElement(map, mapSpatialDataSet, context);
					}
				}
				while (!flag);
			}
			return mapSpatialDataSet;
		}

		// Token: 0x06002357 RID: 9047 RVA: 0x00092930 File Offset: 0x00090B30
		private void ReadMapSpatialDataSetElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialDataSet mapSpatialDataSet, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "DataSetName")
			{
				mapSpatialDataSet.DataSetName = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (localName == "SpatialField")
			{
				mapSpatialDataSet.SpatialField = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (!(localName == "MapFieldNames"))
			{
				return;
			}
			mapSpatialDataSet.MapFieldNames = this.ReadMapFieldNames(map, context);
		}

		// Token: 0x06002358 RID: 9048 RVA: 0x000929B8 File Offset: 0x00090BB8
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapPointLayer ReadMapPointLayer(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapPointLayer mapPointLayer = new Microsoft.ReportingServices.ReportIntermediateFormat.MapPointLayer(this.GenerateID(), map);
			mapPointLayer.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "MapLayer", Microsoft.ReportingServices.ReportProcessing.ObjectType.Map, map.Name, mapPointLayer.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapPointLayer" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapPointLayerElement(map, mapPointLayer, context);
					}
				}
				while (!flag);
			}
			mapPointLayer.Validate(this.m_errorContext);
			return mapPointLayer;
		}

		// Token: 0x06002359 RID: 9049 RVA: 0x00092A70 File Offset: 0x00090C70
		private void ReadMapPointLayerElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapPointLayer mapPointLayer, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "MapMarkerTemplate")
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.MapPointTemplate mapPointTemplate = mapPointLayer.MapPointTemplate;
				this.ReadMapPointTemplate(mapPointLayer, map, context, ref mapPointTemplate, this.m_reader.LocalName);
				mapPointLayer.MapPointTemplate = mapPointTemplate;
				return;
			}
			if (localName == "MapPointRules")
			{
				mapPointLayer.MapPointRules = this.ReadMapPointRules(mapPointLayer, map, context, "MapPointRules");
				return;
			}
			if (!(localName == "MapPoints"))
			{
				this.ReadMapVectorLayerElement(map, mapPointLayer, context);
				return;
			}
			mapPointLayer.MapPoints = this.ReadMapPoints(mapPointLayer, map, context);
		}

		// Token: 0x0600235A RID: 9050 RVA: 0x00092B08 File Offset: 0x00090D08
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapTile ReadMapTile(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapTile mapTile = new Microsoft.ReportingServices.ReportIntermediateFormat.MapTile(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapTile" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapTileElement(map, mapTile, context);
					}
				}
				while (!flag);
			}
			return mapTile;
		}

		// Token: 0x0600235B RID: 9051 RVA: 0x00092B78 File Offset: 0x00090D78
		private void ReadMapTileElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapTile mapTile, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Name")
			{
				mapTile.Name = this.m_reader.ReadString();
				return;
			}
			if (localName == "TileData")
			{
				mapTile.TileData = this.m_reader.ReadString();
				return;
			}
			if (!(localName == "MIMEType"))
			{
				return;
			}
			mapTile.MIMEType = this.m_reader.ReadString();
		}

		// Token: 0x0600235C RID: 9052 RVA: 0x00092BF0 File Offset: 0x00090DF0
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapTile> ReadMapTiles(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapTile> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapTile>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapTiles")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapTile")
					{
						list.Add(this.ReadMapTile(map, context));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x0600235D RID: 9053 RVA: 0x00092C7C File Offset: 0x00090E7C
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapTileLayer ReadMapTileLayer(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapTileLayer mapTileLayer = new Microsoft.ReportingServices.ReportIntermediateFormat.MapTileLayer(map);
			mapTileLayer.Name = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "MapLayer", Microsoft.ReportingServices.ReportProcessing.ObjectType.Map, map.Name, mapTileLayer.Name, this.m_errorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapTileLayer" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapTileLayerElement(map, mapTileLayer, context);
					}
				}
				while (!flag);
			}
			return mapTileLayer;
		}

		// Token: 0x0600235E RID: 9054 RVA: 0x00092D24 File Offset: 0x00090F24
		private void ReadMapTileLayerElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapTileLayer mapTileLayer, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (!(localName == "ServiceUrl"))
			{
				if (!(localName == "TileStyle"))
				{
					if (localName == "UseSecureConnection")
					{
						mapTileLayer.UseSecureConnection = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
						return;
					}
					if (localName == "MapTiles")
					{
						mapTileLayer.MapTiles = this.ReadMapTiles(map, context);
						return;
					}
					this.ReadMapLayerElement(map, mapTileLayer, context);
				}
				else
				{
					mapTileLayer.TileStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
					if (!mapTileLayer.TileStyle.IsExpression)
					{
						Validator.ValidateMapTileStyle(mapTileLayer.TileStyle.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
						return;
					}
				}
				return;
			}
			mapTileLayer.ServiceUrl = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x0600235F RID: 9055 RVA: 0x00092E14 File Offset: 0x00091014
		private void ReadMapVectorLayerElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName != null)
			{
				switch (localName.Length)
				{
				case 12:
					if (!(localName == "MapShapefile"))
					{
						goto IL_0189;
					}
					break;
				case 13:
				case 14:
				case 16:
				case 18:
					goto IL_0189;
				case 15:
					if (!(localName == "DataElementName"))
					{
						goto IL_0189;
					}
					mapVectorLayer.DataElementName = this.m_reader.ReadString();
					return;
				case 17:
				{
					char c = localName[3];
					if (c != 'D')
					{
						if (c != 'S')
						{
							if (c != 'a')
							{
								goto IL_0189;
							}
							if (!(localName == "DataElementOutput"))
							{
								goto IL_0189;
							}
							mapVectorLayer.DataElementOutput = this.ReadDataElementOutput();
							return;
						}
						else if (!(localName == "MapSpatialDataSet"))
						{
							goto IL_0189;
						}
					}
					else
					{
						if (!(localName == "MapDataRegionName"))
						{
							goto IL_0189;
						}
						mapVectorLayer.MapDataRegionName = this.m_reader.ReadString();
						return;
					}
					break;
				}
				case 19:
					if (!(localName == "MapFieldDefinitions"))
					{
						goto IL_0189;
					}
					mapVectorLayer.MapFieldDefinitions = this.ReadMapFieldDefinitions(map, context);
					return;
				case 20:
				{
					char c = localName[3];
					if (c != 'B')
					{
						if (c != 'S')
						{
							goto IL_0189;
						}
						if (!(localName == "MapSpatialDataRegion"))
						{
							goto IL_0189;
						}
					}
					else
					{
						if (!(localName == "MapBindingFieldPairs"))
						{
							goto IL_0189;
						}
						mapVectorLayer.MapBindingFieldPairs = this.ReadMapBindingFieldPairs(map, mapVectorLayer, context);
						return;
					}
					break;
				}
				default:
					goto IL_0189;
				}
				Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialData mapSpatialData = mapVectorLayer.MapSpatialData;
				this.ReadMapSpatialData(mapVectorLayer, map, context, ref mapSpatialData, this.m_reader.LocalName);
				mapVectorLayer.MapSpatialData = mapSpatialData;
				return;
			}
			IL_0189:
			this.ReadMapLayerElement(map, mapVectorLayer, context);
		}

		// Token: 0x06002360 RID: 9056 RVA: 0x00092FB4 File Offset: 0x000911B4
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldName> ReadMapFieldNames(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldName> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldName>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "MapFieldNames")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "MapFieldName")
					{
						list.Add(new Microsoft.ReportingServices.ReportIntermediateFormat.MapFieldName(map)
						{
							Name = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context)
						});
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x06002361 RID: 9057 RVA: 0x00093060 File Offset: 0x00091260
		private void ReadMapSpatialData(Microsoft.ReportingServices.ReportIntermediateFormat.MapVectorLayer mapVectorLayer, Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, ref Microsoft.ReportingServices.ReportIntermediateFormat.MapSpatialData mapSpatialData, string propertyName)
		{
			if (mapSpatialData != null)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsMapPropertyAlreadyDefined, Severity.Error, context.ObjectType, context.ObjectName, propertyName, Array.Empty<string>());
				return;
			}
			if (propertyName == "MapShapefile")
			{
				mapSpatialData = this.ReadMapShapefile(mapVectorLayer, map, context);
				return;
			}
			if (propertyName == "MapSpatialDataRegion")
			{
				mapSpatialData = this.ReadMapSpatialDataRegion(mapVectorLayer, map, context);
				return;
			}
			if (!(propertyName == "MapSpatialDataSet"))
			{
				return;
			}
			mapSpatialData = this.ReadMapSpatialDataSet(mapVectorLayer, map, context);
		}

		// Token: 0x06002362 RID: 9058 RVA: 0x000930EC File Offset: 0x000912EC
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapBorderSkin ReadMapBorderSkin(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapBorderSkin mapBorderSkin = new Microsoft.ReportingServices.ReportIntermediateFormat.MapBorderSkin(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapBorderSkin" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapBorderSkinElement(map, mapBorderSkin, context);
					}
				}
				while (!flag);
			}
			return mapBorderSkin;
		}

		// Token: 0x06002363 RID: 9059 RVA: 0x0009315C File Offset: 0x0009135C
		private void ReadMapBorderSkinElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapBorderSkin mapBorderSkin, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "Style")
			{
				this.ReadMapStyle(mapBorderSkin, context);
				return;
			}
			if (!(localName == "MapBorderSkinType"))
			{
				return;
			}
			mapBorderSkin.MapBorderSkinType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
			if (!mapBorderSkin.MapBorderSkinType.IsExpression)
			{
				Validator.ValidateMapBorderSkinType(mapBorderSkin.MapBorderSkinType.StringValue, this.m_errorContext, context, this.m_reader.LocalName);
			}
		}

		// Token: 0x06002364 RID: 9060 RVA: 0x000931E4 File Offset: 0x000913E4
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomView ReadMapCustomView(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomView mapCustomView = new Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomView(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapCustomView" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapCustomViewElement(map, mapCustomView, context);
					}
				}
				while (!flag);
			}
			return mapCustomView;
		}

		// Token: 0x06002365 RID: 9061 RVA: 0x00093254 File Offset: 0x00091454
		private void ReadMapCustomViewElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapCustomView mapCustomView, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "CenterX")
			{
				mapCustomView.CenterX = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
				return;
			}
			if (!(localName == "CenterY"))
			{
				this.ReadMapViewElement(map, mapCustomView, context);
				return;
			}
			mapCustomView.CenterY = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
		}

		// Token: 0x06002366 RID: 9062 RVA: 0x000932CC File Offset: 0x000914CC
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapDataBoundView ReadMapDataBoundView(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapDataBoundView mapDataBoundView = new Microsoft.ReportingServices.ReportIntermediateFormat.MapDataBoundView(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapDataBoundView" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapDataBoundViewElement(map, mapDataBoundView, context);
					}
				}
				while (!flag);
			}
			return mapDataBoundView;
		}

		// Token: 0x06002367 RID: 9063 RVA: 0x0009333A File Offset: 0x0009153A
		private void ReadMapDataBoundViewElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapDataBoundView mapDataBoundView, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			this.ReadMapViewElement(map, mapDataBoundView, context);
		}

		// Token: 0x06002368 RID: 9064 RVA: 0x00093354 File Offset: 0x00091554
		private Microsoft.ReportingServices.ReportIntermediateFormat.MapElementView ReadMapElementView(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.MapElementView mapElementView = new Microsoft.ReportingServices.ReportIntermediateFormat.MapElementView(map);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("MapElementView" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						this.ReadMapElementViewElement(map, mapElementView, context);
					}
				}
				while (!flag);
			}
			return mapElementView;
		}

		// Token: 0x06002369 RID: 9065 RVA: 0x000933C4 File Offset: 0x000915C4
		private void ReadMapElementViewElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapElementView mapElementView, PublishingContextStruct context)
		{
			string localName = this.m_reader.LocalName;
			if (localName == "LayerName")
			{
				mapElementView.LayerName = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
				return;
			}
			if (!(localName == "MapBindingFieldPairs"))
			{
				this.ReadMapViewElement(map, mapElementView, context);
				return;
			}
			mapElementView.MapBindingFieldPairs = this.ReadMapBindingFieldPairs(map, null, context);
		}

		// Token: 0x0600236A RID: 9066 RVA: 0x0009342E File Offset: 0x0009162E
		private void ReadMapViewElement(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, Microsoft.ReportingServices.ReportIntermediateFormat.MapView mapView, PublishingContextStruct context)
		{
			if (this.m_reader.LocalName == "Zoom")
			{
				mapView.Zoom = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
			}
		}

		// Token: 0x0600236B RID: 9067 RVA: 0x00093464 File Offset: 0x00091664
		private void ReadMapView(Microsoft.ReportingServices.ReportIntermediateFormat.Map map, PublishingContextStruct context, ref Microsoft.ReportingServices.ReportIntermediateFormat.MapView mapView, string propertyName)
		{
			if (mapView != null)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsMapPropertyAlreadyDefined, Severity.Error, context.ObjectType, context.ObjectName, propertyName, Array.Empty<string>());
				return;
			}
			if (propertyName == "MapCustomView")
			{
				mapView = this.ReadMapCustomView(map, context);
				return;
			}
			if (propertyName == "MapElementView")
			{
				mapView = this.ReadMapElementView(map, context);
				return;
			}
			if (!(propertyName == "MapDataBoundView"))
			{
				return;
			}
			mapView = this.ReadMapDataBoundView(map, context);
		}

		// Token: 0x0600236C RID: 9068 RVA: 0x000934E8 File Offset: 0x000916E8
		internal ReportPublishing(PublishingContextBase publishingContext, PublishingErrorContext errorContext)
		{
			this.m_publishingContext = publishingContext;
			this.m_errorContext = errorContext;
		}

		// Token: 0x0600236D RID: 9069 RVA: 0x000935DC File Offset: 0x000917DC
		internal ReportPublishing(PublishingContextBase publishingContext, PublishingErrorContext errorContext, ReportUpgradeStrategy reportUpgradeStrategy)
		{
			this.m_publishingContext = publishingContext;
			this.m_errorContext = errorContext;
			this.m_reportUpgradeStrategy = reportUpgradeStrategy;
		}

		// Token: 0x0600236E RID: 9070 RVA: 0x000936D4 File Offset: 0x000918D4
		internal Microsoft.ReportingServices.ReportIntermediateFormat.Report CreateDataShapeIntermediateFormat(out DataSourceInfoCollection dataSources)
		{
			DataShapePublishingContext dataShapePublishingContext = (DataShapePublishingContext)this.m_publishingContext;
			this.CheckForMissingDefinition(dataShapePublishingContext.DataShapeDefinition);
			Microsoft.ReportingServices.ReportIntermediateFormat.Report report;
			try
			{
				this.m_report = null;
				ReportProcessingCompatibilityVersion.TraceCompatibilityVersion(this.m_publishingContext.Configuration);
				dataSources = this.DataShapePhase1();
				this.Phase2();
				ParameterInfoCollection parameterInfoCollection;
				Dictionary<string, int> dictionary;
				this.Phase3(out parameterInfoCollection, out dictionary);
				ArrayList arrayList = null;
				this.Phase4(dictionary, out arrayList);
				if (this.m_errorContext.HasError)
				{
					throw new ReportPublishingException(this.m_errorContext.Messages, ReportProcessingFlags.OnDemandEngine);
				}
				report = this.m_report;
			}
			finally
			{
				this.m_report = null;
				this.m_errorContext = null;
			}
			return report;
		}

		// Token: 0x0600236F RID: 9071 RVA: 0x00093780 File Offset: 0x00091980
		internal Microsoft.ReportingServices.ReportIntermediateFormat.Report CreateProgressiveIntermediateFormat(Stream definitionStream, out string reportDescription, out ParameterInfoCollection parameters, out DataSourceInfoCollection dataSources)
		{
			DataSetInfoCollection dataSetInfoCollection = null;
			ArrayList arrayList = null;
			byte[] array = null;
			this.CheckForMissingDefinition(definitionStream);
			string text;
			EmbeddedDataSetInfoCollection embeddedDataSetInfoCollection;
			UserLocationFlags userLocationFlags;
			bool flag;
			bool flag2;
			int? num;
			return this.InternalCreateIntermediateFormat(definitionStream, out reportDescription, out text, out parameters, out dataSources, out embeddedDataSetInfoCollection, out dataSetInfoCollection, out userLocationFlags, out arrayList, out flag, out flag2, out array, out num);
		}

		// Token: 0x06002370 RID: 9072 RVA: 0x000937BC File Offset: 0x000919BC
		internal Microsoft.ReportingServices.ReportIntermediateFormat.Report CreateIntermediateFormat(byte[] definition, out string description, out string language, out ParameterInfoCollection parameters, out DataSourceInfoCollection dataSources, out EmbeddedDataSetInfoCollection embeddedDataSets, out DataSetInfoCollection sharedDataSetReferences, out UserLocationFlags userReferenceLocation, out ArrayList dataSetsName, out bool hasExternalImages, out bool hasHyperlinks, out byte[] dataSetsHash, out ExpressionUsage expressionUsage, out string webAuthoringVersion, out string defaultView, out AuthoringMetadata authoringMetadata, out bool hasSubReports, out bool hasDrillthroughs, out string rdlReportLanguage, out int? customCodeSize)
		{
			this.CheckForMissingDefinition(definition);
			Stream stream = new MemoryStream(definition, false);
			return this.InternalCreateIntermediateFormat(stream, out description, out language, out parameters, out dataSources, out embeddedDataSets, out sharedDataSetReferences, out userReferenceLocation, out dataSetsName, out hasExternalImages, out hasHyperlinks, out dataSetsHash, out expressionUsage, out webAuthoringVersion, out defaultView, out authoringMetadata, out hasSubReports, out hasDrillthroughs, out rdlReportLanguage, out customCodeSize);
		}

		// Token: 0x06002371 RID: 9073 RVA: 0x00093803 File Offset: 0x00091A03
		private void CheckForMissingDefinition(object definition)
		{
			if (definition == null)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsNotAReportDefinition, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.Report, null, null, Array.Empty<string>());
				throw new ReportPublishingException(this.m_errorContext.Messages, ReportProcessingFlags.YukonEngine);
			}
		}

		// Token: 0x06002372 RID: 9074 RVA: 0x00093838 File Offset: 0x00091A38
		private Microsoft.ReportingServices.ReportIntermediateFormat.Report InternalCreateIntermediateFormat(Stream definitionStream, out string description, out string language, out ParameterInfoCollection parameters, out DataSourceInfoCollection dataSources, out EmbeddedDataSetInfoCollection embeddedDataSets, out DataSetInfoCollection sharedDataSetReferences, out UserLocationFlags userReferenceLocation, out ArrayList dataSetsName, out bool hasExternalImages, out bool hasHyperlinks, out byte[] dataSetsHash, out int? customCodeSize)
		{
			ExpressionUsage expressionUsage;
			string text;
			string text2;
			AuthoringMetadata authoringMetadata;
			bool flag;
			bool flag2;
			string text3;
			return this.InternalCreateIntermediateFormat(definitionStream, out description, out language, out parameters, out dataSources, out embeddedDataSets, out sharedDataSetReferences, out userReferenceLocation, out dataSetsName, out hasExternalImages, out hasHyperlinks, out dataSetsHash, out expressionUsage, out text, out text2, out authoringMetadata, out flag, out flag2, out text3, out customCodeSize);
		}

		// Token: 0x06002373 RID: 9075 RVA: 0x00093870 File Offset: 0x00091A70
		private Microsoft.ReportingServices.ReportIntermediateFormat.Report InternalCreateIntermediateFormat(Stream definitionStream, out string description, out string language, out ParameterInfoCollection parameters, out DataSourceInfoCollection dataSources, out EmbeddedDataSetInfoCollection embeddedDataSets, out DataSetInfoCollection sharedDataSetReferences, out UserLocationFlags userReferenceLocation, out ArrayList dataSetsName, out bool hasExternalImages, out bool hasHyperlinks, out byte[] dataSetsHash, out ExpressionUsage expressionUsage, out string webAuthoringVersion, out string defaultView, out AuthoringMetadata authoringMetadata, out bool hasSubReports, out bool hasDrillthroughs, out string rdlReportLanguage, out int? customCodeSize)
		{
			ReportArchive reportArchive = null;
			Stream stream = null;
			Microsoft.ReportingServices.ReportIntermediateFormat.Report report;
			try
			{
				this.m_report = null;
				if (this.m_publishingContext.IsPackagedReportArchive)
				{
					try
					{
						reportArchive = ReportArchive.Load(definitionStream);
						stream = definitionStream;
						definitionStream = reportArchive.GetReportDefinitionStream();
					}
					catch (Exception ex)
					{
						throw new ReportPublishingException(ErrorCode.rsInvalidReportArchiveFormat, ex, Array.Empty<object>());
					}
					if (definitionStream == null)
					{
						throw new ReportPublishingException(ErrorCode.rsInvalidReportArchiveFormat, null, Array.Empty<object>());
					}
				}
				ReportProcessingCompatibilityVersion.TraceCompatibilityVersion(this.m_publishingContext.Configuration);
				this.Phase1(definitionStream, out description, out language, out dataSources, out embeddedDataSets, out sharedDataSetReferences, out hasExternalImages, out hasHyperlinks, out expressionUsage, out webAuthoringVersion, out defaultView, out authoringMetadata, out hasSubReports, out hasDrillthroughs, out rdlReportLanguage, out customCodeSize);
				dataSetsHash = this.CreateHashForCachedDataSets();
				this.Phase2();
				Dictionary<string, int> dictionary;
				this.Phase3(out parameters, out dictionary);
				this.Phase4(dictionary, out dataSetsName);
				userReferenceLocation = this.m_userReferenceLocation;
				if (this.m_errorContext.HasError)
				{
					throw new ReportPublishingException(this.m_errorContext.Messages, ReportProcessingFlags.YukonEngine);
				}
				report = this.m_report;
			}
			finally
			{
				if (stream != null)
				{
					stream.Close();
				}
				if (reportArchive != null)
				{
					reportArchive.Close();
				}
				this.m_report = null;
				this.m_errorContext = null;
			}
			return report;
		}

		// Token: 0x06002374 RID: 9076 RVA: 0x00093998 File Offset: 0x00091B98
		private byte[] CreateHashForCachedDataSets()
		{
			MemoryStream memoryStream = new MemoryStream();
			byte[] hash;
			try
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IntermediateFormatWriter intermediateFormatWriter = new Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IntermediateFormatWriter(memoryStream, 0);
				Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.Declaration declaration = new Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.Declaration(Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.ObjectType.RIFObject, Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.ObjectType.Null, new List<Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.MemberInfo>
				{
					new Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.MemberInfo(MemberName.Value, Token.Object)
				});
				intermediateFormatWriter.RegisterDeclaration(declaration);
				intermediateFormatWriter.NextMember();
				intermediateFormatWriter.WriteVariantOrPersistable(this.m_report.Language);
				intermediateFormatWriter.WriteVariantOrPersistable(this.m_report.Code);
				if (((IExpressionHostAssemblyHolder)this.m_report).CodeModules != null)
				{
					using (List<string>.Enumerator enumerator = ((IExpressionHostAssemblyHolder)this.m_report).CodeModules.GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							string text = enumerator.Current;
							intermediateFormatWriter.WriteVariantOrPersistable(text);
						}
						goto IL_00B7;
					}
				}
				intermediateFormatWriter.WriteNull();
				IL_00B7:
				if (((IExpressionHostAssemblyHolder)this.m_report).CodeClasses != null)
				{
					using (List<Microsoft.ReportingServices.ReportIntermediateFormat.CodeClass>.Enumerator enumerator2 = ((IExpressionHostAssemblyHolder)this.m_report).CodeClasses.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							Microsoft.ReportingServices.ReportIntermediateFormat.CodeClass codeClass = enumerator2.Current;
							intermediateFormatWriter.WriteVariantOrPersistable(codeClass);
						}
						goto IL_010F;
					}
				}
				intermediateFormatWriter.WriteNull();
				IL_010F:
				if (this.m_report.DataSources != null)
				{
					using (List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSource>.Enumerator enumerator3 = this.m_report.DataSources.GetEnumerator())
					{
						while (enumerator3.MoveNext())
						{
							Microsoft.ReportingServices.ReportIntermediateFormat.DataSource dataSource = enumerator3.Current;
							intermediateFormatWriter.WriteVariantOrPersistable(dataSource.Name);
							intermediateFormatWriter.WriteVariantOrPersistable(dataSource.Transaction);
							intermediateFormatWriter.WriteVariantOrPersistable(dataSource.Type);
							intermediateFormatWriter.WriteVariantOrPersistable(dataSource.ConnectStringExpression);
							intermediateFormatWriter.WriteVariantOrPersistable(dataSource.IntegratedSecurity);
							intermediateFormatWriter.WriteVariantOrPersistable(dataSource.Prompt);
							intermediateFormatWriter.WriteVariantOrPersistable(dataSource.DataSourceReference);
						}
						goto IL_01C8;
					}
				}
				intermediateFormatWriter.WriteNull();
				IL_01C8:
				if (this.m_dataSets != null)
				{
					using (List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSet>.Enumerator enumerator4 = this.m_dataSets.GetEnumerator())
					{
						while (enumerator4.MoveNext())
						{
							Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet = enumerator4.Current;
							intermediateFormatWriter.WriteVariantOrPersistable(dataSet.Name);
							intermediateFormatWriter.WriteVariantOrPersistable(dataSet.Query);
							if (dataSet.Query != null)
							{
								intermediateFormatWriter.WriteVariantOrPersistable(dataSet.Query.DataSourceName);
							}
							if (dataSet.Fields != null)
							{
								using (List<Microsoft.ReportingServices.ReportIntermediateFormat.Field>.Enumerator enumerator5 = dataSet.Fields.GetEnumerator())
								{
									while (enumerator5.MoveNext())
									{
										Microsoft.ReportingServices.ReportIntermediateFormat.Field field = enumerator5.Current;
										intermediateFormatWriter.WriteVariantOrPersistable(field);
									}
									continue;
								}
							}
							intermediateFormatWriter.WriteNull();
						}
						goto IL_0294;
					}
				}
				intermediateFormatWriter.WriteNull();
				IL_0294:
				memoryStream.Flush();
				memoryStream.Seek(0L, SeekOrigin.Begin);
				using (HashAlgorithm hashAlgorithm = SHA1.Create())
				{
					hashAlgorithm.ComputeHash(memoryStream);
					hash = hashAlgorithm.Hash;
				}
			}
			finally
			{
				if (memoryStream != null)
				{
					memoryStream.Close();
					memoryStream = null;
				}
			}
			return hash;
		}

		// Token: 0x06002375 RID: 9077 RVA: 0x00093D2C File Offset: 0x00091F2C
		private void RegisterDataRegion(Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion dataRegion)
		{
			this.m_dataRegionCount++;
			this.m_aggregateHolderList.Add(dataRegion);
			this.m_runningValueHolderList.Add(dataRegion);
		}

		// Token: 0x06002376 RID: 9078 RVA: 0x00093D54 File Offset: 0x00091F54
		private int GenerateID()
		{
			int num = this.m_idCounter + 1;
			this.m_idCounter = num;
			return num;
		}

		// Token: 0x06002377 RID: 9079 RVA: 0x00093D74 File Offset: 0x00091F74
		private int GenerateVariableSequenceID()
		{
			Holder<int> variableSequenceIdCounter = this.m_variableSequenceIdCounter;
			int value = variableSequenceIdCounter.Value;
			variableSequenceIdCounter.Value = value + 1;
			return value;
		}

		// Token: 0x06002378 RID: 9080 RVA: 0x00093D98 File Offset: 0x00091F98
		private int GenerateTextboxSequenceID()
		{
			Holder<int> textboxSequenceIdCounter = this.m_textboxSequenceIdCounter;
			int value = textboxSequenceIdCounter.Value;
			textboxSequenceIdCounter.Value = value + 1;
			return value;
		}

		// Token: 0x06002379 RID: 9081 RVA: 0x00093DBC File Offset: 0x00091FBC
		private DataSourceInfoCollection DataShapePhase1()
		{
			Global.Tracer.Assert(this.m_reportUpgradeStrategy == null, "An upgrade strategy must not be specified for data shape processing.");
			this.m_dataSources = new DataSourceInfoCollection();
			DataShapePublishingContext dataShapePublishingContext = (DataShapePublishingContext)this.m_publishingContext;
			DataShapeDefinition dataShapeDefinition = dataShapePublishingContext.DataShapeDefinition;
			this.m_reportCT = new ExprHostCompiler(new Microsoft.ReportingServices.RdlExpressions.VBExpressionParser(this.m_errorContext), this.m_errorContext);
			ReportPublishing.DataShapeDefinitionToRifConverter dataShapeDefinitionToRifConverter = new ReportPublishing.DataShapeDefinitionToRifConverter(this, this.m_reportCT, dataShapePublishingContext.DataSourceContext);
			this.m_report = dataShapeDefinitionToRifConverter.Convert(dataShapeDefinition);
			return this.m_dataSources;
		}

		// Token: 0x0600237A RID: 9082 RVA: 0x00093E44 File Offset: 0x00092044
		private void Phase1(Stream definitionStream, out string description, out string language, out DataSourceInfoCollection dataSources, out EmbeddedDataSetInfoCollection embeddedDataSets, out DataSetInfoCollection sharedDataSetReferences, out bool hasExternalImages, out bool hasHyperlinks, out ExpressionUsage expressionUsage, out string webAuthoringVersion, out string defaultView, out AuthoringMetadata reportMetadata, out bool hasSubReports, out bool hasDrillthroughs, out string rdlReportLanguage, out int? customCodeSize)
		{
			try
			{
				Global.Tracer.Assert(this.m_reportUpgradeStrategy != null, "There is no Upgrade Strategy for this stream.");
				Stream stream = this.m_reportUpgradeStrategy.Upgrade(definitionStream);
				Pair<string, Stream> pair = default(Pair<string, Stream>);
				List<Pair<string, Stream>> list = new List<Pair<string, Stream>>();
				pair = this.GetRDLNamespaceSchemaStreamPair("http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition", "Microsoft.ReportingServices.ReportProcessing.ReportPublishing.ReportDefinition.xsd");
				list.Add(pair);
				pair = this.GetRDLNamespaceSchemaStreamPair("http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition", "Microsoft.ReportingServices.ReportProcessing.ReportPublishing.ReportDefinition2010.xsd");
				list.Add(pair);
				pair = this.GetRDLNamespaceSchemaStreamPair("http://schemas.microsoft.com/sqlserver/reporting/2011/01/reportdefinition", "Microsoft.ReportingServices.ReportProcessing.ReportPublishing.ReportDefinition2011.xsd");
				list.Add(pair);
				pair = this.GetRDLNamespaceSchemaStreamPair("http://schemas.microsoft.com/sqlserver/reporting/2012/01/reportdefinition", "Microsoft.ReportingServices.ReportProcessing.ReportPublishing.ReportDefinition2012.xsd");
				list.Add(pair);
				pair = this.GetRDLNamespaceSchemaStreamPair("http://schemas.microsoft.com/sqlserver/reporting/2013/01/reportdefinition", "Microsoft.ReportingServices.ReportProcessing.ReportPublishing.ReportDefinition2013.xsd");
				list.Add(pair);
				pair = this.GetRDLNamespaceSchemaStreamPair("http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition/defaultfontfamily", "Microsoft.ReportingServices.ReportProcessing.ReportPublishing.DefaultFontFamily.xsd");
				list.Add(pair);
				pair = this.GetRDLNamespaceSchemaStreamPair("http://schemas.microsoft.com/sqlserver/reporting/webauthoring", "Microsoft.ReportingServices.ReportProcessing.ReportPublishing.WebAuthoring.xsd");
				list.Add(pair);
				pair = this.GetRDLNamespaceSchemaStreamPair("http://schemas.microsoft.com/sqlserver/reporting/authoringmetadata", "Microsoft.ReportingServices.ReportProcessing.ReportPublishing.AuthoringMetadata.xsd");
				list.Add(pair);
				pair = this.GetRDLNamespaceSchemaStreamPair("http://schemas.microsoft.com/sqlserver/reporting/accessibilityproperties", "Microsoft.ReportingServices.ReportProcessing.ReportPublishing.AccessibilityProperties.xsd");
				list.Add(pair);
				this.m_reader = new RmlValidatingReader(stream, list, this.m_errorContext, this.m_publishingContext.IsRdlx ? RmlValidatingReader.ItemType.Rdlx : RmlValidatingReader.ItemType.Rdl, this.m_publishingContext.PublishingVersioning);
				this.m_reportItemNames = new CLSUniqueNameValidator(ProcessingErrorCode.rsInvalidNameNotCLSCompliant, ProcessingErrorCode.rsDuplicateReportItemName, ProcessingErrorCode.rsInvalidNameLength);
				this.m_reportSectionNames = new CLSUniqueNameValidator(ProcessingErrorCode.rsInvalidNameNotCLSCompliant, ProcessingErrorCode.rsDuplicateReportSectionName, ProcessingErrorCode.rsInvalidNameLength);
				this.m_variableNames = new VariableNameValidator();
				this.m_scopeNames = new ScopeNameValidator();
				this.m_dataSources = new DataSourceInfoCollection();
				this.m_embeddedDataSets = new EmbeddedDataSetInfoCollection();
				sharedDataSetReferences = null;
				this.m_sharedDataSetReferences = new DataSetInfoCollection();
				this.m_subReports = new List<Microsoft.ReportingServices.ReportIntermediateFormat.SubReport>();
				this.m_expressionUsage = new ExpressionUsage();
				while (this.m_reader.Read())
				{
					if (XmlNodeType.Element == this.m_reader.NodeType && "Report" == this.m_reader.LocalName)
					{
						this.m_reportCT = new ExprHostCompiler(new Microsoft.ReportingServices.RdlExpressions.VBExpressionParser(this.m_errorContext, this.m_expressionUsage), this.m_errorContext);
						this.ReadReport(this.m_publishingContext.DataProtection);
					}
				}
				if (this.m_report == null)
				{
					this.m_errorContext.Register(ProcessingErrorCode.rsNotACurrentReportDefinition, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.Report, null, "Namespace", new string[] { "http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" });
					throw new ReportProcessingException(this.m_errorContext.Messages);
				}
			}
			catch (XmlSchemaException ex)
			{
				this.CreateInvalidReportDefinitionException(ex);
			}
			catch (XmlException ex2)
			{
				this.CreateInvalidReportDefinitionException(ex2);
			}
			catch (ArgumentException ex3)
			{
				this.CreateInvalidReportDefinitionException(ex3);
			}
			catch (IndexOutOfRangeException ex4)
			{
				this.CreateInvalidReportDefinitionException(ex4);
			}
			catch (FormatException ex5)
			{
				this.CreateInvalidReportDefinitionException(ex5);
			}
			finally
			{
				if (this.m_reader != null)
				{
					this.m_reader.Close();
					this.m_reader = null;
				}
				description = this.m_description;
				language = null;
				if (this.m_reportLanguage != null)
				{
					language = this.m_reportLanguage.Name;
				}
				dataSources = this.m_dataSources;
				embeddedDataSets = this.m_embeddedDataSets;
				sharedDataSetReferences = this.m_sharedDataSetReferences;
				hasExternalImages = this.m_hasExternalImages;
				hasHyperlinks = this.m_hasHyperlinks;
				Microsoft.ReportingServices.ReportIntermediateFormat.Report report = this.m_report;
				int? num;
				if (report == null)
				{
					num = null;
				}
				else
				{
					string code = report.Code;
					num = ((code != null) ? new int?(code.Length) : null);
				}
				customCodeSize = num;
				expressionUsage = this.m_expressionUsage;
				webAuthoringVersion = this.m_webAuthoringVersion;
				defaultView = this.m_defaultView;
				reportMetadata = this.m_authoringMetadata;
				List<Microsoft.ReportingServices.ReportIntermediateFormat.SubReport> subReports = this.m_subReports;
				hasSubReports = subReports != null && subReports.Count > 0;
				hasDrillthroughs = this.m_hasDrillthroughs;
				rdlReportLanguage = this.m_rdlReportLanguage;
				this.m_description = null;
				this.m_dataSources = null;
			}
		}

		// Token: 0x0600237B RID: 9083 RVA: 0x00094298 File Offset: 0x00092498
		private Pair<string, Stream> GetRDLNamespaceSchemaStreamPair(string validationNamespace, string xsdResource)
		{
			Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(xsdResource);
			Global.Tracer.Assert(manifestResourceStream != null, "(schemaStream != null)");
			return new Pair<string, Stream>(validationNamespace, manifestResourceStream);
		}

		// Token: 0x0600237C RID: 9084 RVA: 0x000942D0 File Offset: 0x000924D0
		private void CreateInvalidReportDefinitionException(Exception e)
		{
			this.m_errorContext.Register(ProcessingErrorCode.rsInvalidReportDefinition, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.Report, null, null, new string[] { e.Message });
			throw new ReportProcessingException(this.m_errorContext.Messages);
		}

		// Token: 0x0600237D RID: 9085 RVA: 0x00094314 File Offset: 0x00092514
		private void ReadReport(IDataProtection dataProtection)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Report report = new Microsoft.ReportingServices.ReportIntermediateFormat.Report(this.GenerateID(), this.GenerateID());
			report.Name = "Report";
			int num = -1;
			if (this.m_publishingContext.IsRdlSandboxingEnabled)
			{
				num = this.m_publishingContext.Configuration.RdlSandboxing.MaxExpressionLength;
			}
			this.m_report = report;
			PublishingContextStruct publishingContextStruct = new PublishingContextStruct(LocationFlags.None, report.ObjectType, num, this.m_errorContext);
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = null;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Report" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						switch (localName.Length)
						{
						case 4:
							if (localName == "Code")
							{
								string text = this.m_reader.ReadString();
								if (this.m_publishingContext.IsRdlSandboxingEnabled)
								{
									publishingContextStruct.ErrorContext.Register(ProcessingErrorCode.rsSandboxingCustomCodeNotAllowed, Severity.Error, publishingContextStruct.ObjectType, publishingContextStruct.ObjectName, "Code", Array.Empty<string>());
								}
								else if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.Report_Code))
								{
									publishingContextStruct.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, publishingContextStruct.ObjectType, publishingContextStruct.ObjectName, this.m_reader.LocalName, Array.Empty<string>());
								}
								else
								{
									report.Code = text;
									this.m_reportCT.Builder.SetCustomCode();
								}
							}
							break;
						case 6:
							if (localName == "Author")
							{
								report.Author = this.m_reader.ReadString();
							}
							break;
						case 7:
							if (localName == "Classes")
							{
								List<Microsoft.ReportingServices.ReportIntermediateFormat.CodeClass> list = this.ReadClasses(publishingContextStruct);
								if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.Report_Classes))
								{
									publishingContextStruct.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, publishingContextStruct.ObjectType, publishingContextStruct.ObjectName, this.m_reader.LocalName, Array.Empty<string>());
								}
								else
								{
									((IExpressionHostAssemblyHolder)report).CodeClasses = list;
								}
							}
							break;
						case 8:
						{
							char c = localName[0];
							if (c != 'D')
							{
								if (c == 'L')
								{
									if (localName == "Language")
									{
										expressionInfo = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.ReportLanguage, DataType.String, publishingContextStruct);
										report.Language = expressionInfo;
									}
								}
							}
							else if (localName == "DataSets")
							{
								this.ReadDataSets(publishingContextStruct);
							}
							break;
						}
						case 9:
							if (localName == "Variables")
							{
								report.Variables = this.ReadVariables(publishingContextStruct, false, null);
							}
							break;
						case 10:
							if (localName == "DataSchema")
							{
								report.DataSchema = this.m_reader.ReadString();
							}
							break;
						case 11:
						{
							char c = localName[4];
							if (c <= 'R')
							{
								if (c != 'M')
								{
									if (c == 'R')
									{
										if (localName == "AutoRefresh")
										{
											report.AutoRefreshExpression = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, publishingContextStruct);
										}
									}
								}
								else if (localName == "CodeModules")
								{
									List<string> list2 = this.ReadCodeModules(publishingContextStruct);
									if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.Report_CodeModules))
									{
										publishingContextStruct.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, publishingContextStruct.ObjectType, publishingContextStruct.ObjectName, this.m_reader.LocalName, Array.Empty<string>());
									}
									else
									{
										((IExpressionHostAssemblyHolder)report).CodeModules = list2;
									}
								}
							}
							else if (c != 'S')
							{
								if (c != 'r')
								{
									if (c == 'u')
									{
										if (localName == "DefaultView")
										{
											this.m_defaultView = this.m_reader.ReadString();
										}
									}
								}
								else if (localName == "Description")
								{
									this.m_description = this.m_reader.ReadString();
								}
							}
							else if (localName == "DataSources")
							{
								List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSource> list3 = this.ReadDataSources(publishingContextStruct, dataProtection);
								if (report.DataSources == null)
								{
									report.DataSources = list3;
								}
								else
								{
									report.DataSources.AddRange(list3);
								}
							}
							break;
						}
						case 13:
							if (localName == "DataTransform")
							{
								report.DataTransform = this.m_reader.ReadString();
							}
							break;
						case 14:
						{
							char c = localName[0];
							if (c != 'E')
							{
								if (c == 'R')
								{
									if (localName == "ReportSections")
									{
										report.ReportSections = this.ReadReportSections(publishingContextStruct, report);
									}
								}
							}
							else if (localName == "EmbeddedImages")
							{
								report.EmbeddedImages = this.ReadEmbeddedImages(publishingContextStruct);
							}
							break;
						}
						case 15:
						{
							char c = localName[0];
							if (c != 'D')
							{
								if (c == 'I')
								{
									if (localName == "InitialPageName")
									{
										bool flag2;
										report.InitialPageName = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, publishingContextStruct, out flag2);
									}
								}
							}
							else if (localName == "DataElementName")
							{
								report.DataElementName = this.m_reader.ReadString();
							}
							break;
						}
						case 16:
						{
							char c = localName[0];
							if (c != 'C')
							{
								if (c != 'D')
								{
									if (c == 'R')
									{
										if (localName == "ReportParameters")
										{
											report.Parameters = this.ReadReportParameters(publishingContextStruct);
										}
									}
								}
								else if (localName == "DataElementStyle")
								{
									report.DataElementStyleAttribute = this.ReadDataElementStyle();
								}
							}
							else if (localName == "CustomProperties")
							{
								report.CustomProperties = this.ReadCustomProperties(publishingContextStruct);
							}
							break;
						}
						case 17:
						{
							char c = localName[0];
							if (c != 'A')
							{
								if (c == 'D')
								{
									if (localName == "DefaultFontFamily")
									{
										string text2 = this.m_reader.ReadString();
										if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.DefaultFontFamily))
										{
											publishingContextStruct.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, publishingContextStruct.ObjectType, publishingContextStruct.ObjectName, this.m_reader.LocalName, Array.Empty<string>());
										}
										else if (!text2.IsNullOrWhiteSpace())
										{
											report.DefaultFontFamily = text2;
										}
									}
								}
							}
							else if (localName == "AuthoringMetadata")
							{
								this.m_authoringMetadata = this.ReadAuthoringMetadata(publishingContextStruct);
							}
							break;
						}
						case 19:
							if (localName == "WebAuthoringVersion")
							{
								this.m_webAuthoringVersion = this.m_reader.ReadString();
							}
							break;
						case 22:
							if (localName == "ReportParametersLayout")
							{
								this.m_parametersLayout = this.ReadReportParametersLayout(publishingContextStruct, report.Parameters);
							}
							break;
						case 23:
							if (localName == "DeferVariableEvaluation")
							{
								report.DeferVariableEvaluation = this.m_reader.ReadBoolean(publishingContextStruct.ObjectType, publishingContextStruct.ObjectName, this.m_reader.LocalName);
							}
							break;
						case 26:
							if (localName == "ConsumeContainerWhitespace")
							{
								report.ConsumeContainerWhitespace = this.m_reader.ReadBoolean(publishingContextStruct.ObjectType, publishingContextStruct.ObjectName, this.m_reader.LocalName);
							}
							break;
						}
					}
				}
			}
			while (!flag);
			if (report.Parameters != null && this.m_parametersLayout != null)
			{
				ReportParametersGridLayoutValidator.Validate(report.Parameters, this.m_parametersLayout, this.m_errorContext);
			}
			if (expressionInfo == null)
			{
				this.m_reportLanguage = Localization.DefaultReportServerSpecificCulture;
				this.m_rdlReportLanguage = null;
			}
			else if (Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant == expressionInfo.Type)
			{
				PublishingValidator.ValidateSpecificLanguage(expressionInfo, Microsoft.ReportingServices.ReportProcessing.ObjectType.Report, null, "Language", publishingContextStruct.ErrorContext, out this.m_reportLanguage);
				if (this.m_reportLanguage != null)
				{
					this.m_rdlReportLanguage = this.m_reportLanguage.Name;
				}
			}
			if (this.m_interactive)
			{
				report.ShowHideType = Microsoft.ReportingServices.ReportIntermediateFormat.Report.ShowHideTypes.Interactive;
			}
			else if (this.m_static)
			{
				report.ShowHideType = Microsoft.ReportingServices.ReportIntermediateFormat.Report.ShowHideTypes.Static;
			}
			else
			{
				report.ShowHideType = Microsoft.ReportingServices.ReportIntermediateFormat.Report.ShowHideTypes.None;
			}
			report.SubReports = this.m_subReports;
			report.LastID = this.m_idCounter;
		}

		// Token: 0x0600237E RID: 9086 RVA: 0x00094C48 File Offset: 0x00092E48
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection> ReadReportSections(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.Report report)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection>();
			bool flag = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ReportSections")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ReportSection")
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection reportSection = this.ReadReportSection(context, report, list.Count);
						list.Add(reportSection);
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x0600237F RID: 9087 RVA: 0x00094CDC File Offset: 0x00092EDC
		private Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection ReadReportSection(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.Report report, int sectionIndex)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection reportSection = new Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection(sectionIndex, report, this.GenerateID(), this.GenerateID());
			context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.ReportSection;
			string attributeLocalName = this.m_reader.GetAttributeLocalName("Name");
			if (attributeLocalName != null)
			{
				if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.ReportSectionName))
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlAttribute, Severity.Error, context.ObjectType, attributeLocalName, "Name", Array.Empty<string>());
				}
				reportSection.Name = attributeLocalName;
			}
			else
			{
				reportSection.Name = "ReportSection" + sectionIndex.ToString(CultureInfo.InvariantCulture);
			}
			context.ObjectName = reportSection.Name;
			this.m_reportSectionNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext);
			this.m_reportItemCollectionList.Add(reportSection.ReportItems);
			this.m_currentReportSection = reportSection;
			bool flag = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ReportSection")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Body"))
						{
							if (!(localName == "Width"))
							{
								if (!(localName == "Page"))
								{
									if (!(localName == "DataElementName"))
									{
										if (!(localName == "DataElementOutput"))
										{
											if (localName == "LayoutDirection")
											{
												reportSection.LayoutDirection = this.ReadLayoutDirection();
												if (reportSection.LayoutDirection && this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.ReportSection_LayoutDirection))
												{
													context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, attributeLocalName, "LayoutDirection", Array.Empty<string>());
												}
											}
										}
										else
										{
											reportSection.DataElementOutput = this.ReadDataElementOutput();
										}
									}
									else
									{
										reportSection.DataElementName = this.m_reader.ReadString();
									}
								}
								else
								{
									reportSection.Page = this.ReadPage(context, reportSection, sectionIndex);
								}
							}
							else
							{
								reportSection.Width = this.ReadSize();
							}
						}
						else
						{
							this.ReadBody(reportSection, context);
						}
					}
				}
				while (!flag);
			}
			return reportSection;
		}

		// Token: 0x06002380 RID: 9088 RVA: 0x00094F24 File Offset: 0x00093124
		private Microsoft.ReportingServices.ReportIntermediateFormat.Page ReadPage(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection section, int sectionNum)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Page page = new Microsoft.ReportingServices.ReportIntermediateFormat.Page(this.GenerateID());
			this.m_aggregateHolderList.Add(page);
			bool flag = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "Page")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Body, false);
									if (sectionNum == 0)
									{
										page.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, context.ErrorContext);
									}
									else if (styleInformation.Attributes.Count > 0)
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsPagePropertyInSubsequentReportSection, Severity.Warning, context.ObjectType, context.ObjectName, "Style", Array.Empty<string>());
									}
								}
								break;
							case 7:
								if (localName == "Columns")
								{
									int num = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
									if (PublishingValidator.ValidateColumns(num, context.ObjectType, context.ObjectName, "Columns", context.ErrorContext, sectionNum))
									{
										page.Columns = num;
									}
								}
								break;
							case 9:
							{
								char c = localName[0];
								if (c != 'P')
								{
									if (c == 'T')
									{
										if (localName == "TopMargin")
										{
											string text = this.ReadSize();
											if (sectionNum == 0)
											{
												page.TopMargin = text;
											}
											else
											{
												context.ErrorContext.Register(ProcessingErrorCode.rsPagePropertyInSubsequentReportSection, Severity.Warning, context.ObjectType, context.ObjectName, "TopMargin", Array.Empty<string>());
											}
										}
									}
								}
								else if (localName == "PageWidth")
								{
									string text2 = this.ReadSize();
									if (sectionNum == 0)
									{
										page.PageWidth = text2;
									}
									else
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsPagePropertyInSubsequentReportSection, Severity.Warning, context.ObjectType, context.ObjectName, "PageWidth", Array.Empty<string>());
									}
								}
								break;
							}
							case 10:
							{
								char c = localName[6];
								if (c <= 'i')
								{
									if (c != 'a')
									{
										if (c == 'i')
										{
											if (localName == "PageHeight")
											{
												string text3 = this.ReadSize();
												if (sectionNum == 0)
												{
													page.PageHeight = text3;
												}
												else
												{
													context.ErrorContext.Register(ProcessingErrorCode.rsPagePropertyInSubsequentReportSection, Severity.Warning, context.ObjectType, context.ObjectName, "PageHeight", Array.Empty<string>());
												}
											}
										}
									}
									else if (localName == "PageHeader")
									{
										page.PageHeader = this.ReadPageSection(true, section, context);
										if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.PageHeaderFooter))
										{
											page.PageHeader = null;
											context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "PageHeader", Array.Empty<string>());
										}
									}
								}
								else if (c != 'o')
								{
									if (c == 'r')
									{
										if (localName == "LeftMargin")
										{
											string text4 = this.ReadSize();
											if (sectionNum == 0)
											{
												page.LeftMargin = text4;
											}
											else
											{
												context.ErrorContext.Register(ProcessingErrorCode.rsPagePropertyInSubsequentReportSection, Severity.Warning, context.ObjectType, context.ObjectName, "LeftMargin", Array.Empty<string>());
											}
										}
									}
								}
								else if (localName == "PageFooter")
								{
									page.PageFooter = this.ReadPageSection(false, section, context);
									if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.PageHeaderFooter))
									{
										page.PageFooter = null;
										context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "PageFooter", Array.Empty<string>());
									}
								}
								break;
							}
							case 11:
								if (localName == "RightMargin")
								{
									string text5 = this.ReadSize();
									if (sectionNum == 0)
									{
										page.RightMargin = text5;
									}
									else
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsPagePropertyInSubsequentReportSection, Severity.Warning, context.ObjectType, context.ObjectName, "RightMargin", Array.Empty<string>());
									}
								}
								break;
							case 12:
								if (localName == "BottomMargin")
								{
									string text6 = this.ReadSize();
									if (sectionNum == 0)
									{
										page.BottomMargin = text6;
									}
									else
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsPagePropertyInSubsequentReportSection, Severity.Warning, context.ObjectType, context.ObjectName, "BottomMargin", Array.Empty<string>());
									}
								}
								break;
							case 13:
								if (localName == "ColumnSpacing")
								{
									page.ColumnSpacing = this.ReadSize();
								}
								break;
							case 16:
								if (localName == "InteractiveWidth")
								{
									string text7 = this.ReadSize();
									if (sectionNum == 0)
									{
										page.InteractiveWidth = text7;
									}
									else
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsPagePropertyInSubsequentReportSection, Severity.Warning, context.ObjectType, context.ObjectName, "InteractiveWidth", Array.Empty<string>());
									}
								}
								break;
							case 17:
								if (localName == "InteractiveHeight")
								{
									string text8 = this.ReadSize();
									if (sectionNum == 0)
									{
										page.InteractiveHeight = text8;
									}
									else
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsPagePropertyInSubsequentReportSection, Severity.Warning, context.ObjectType, context.ObjectName, "InteractiveHeight", Array.Empty<string>());
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return page;
		}

		// Token: 0x06002381 RID: 9089 RVA: 0x0009554C File Offset: 0x0009374C
		private List<string> ReadCodeModules(PublishingContextStruct context)
		{
			List<string> list = new List<string>();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("CodeModules" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "CodeModule")
				{
					list.Add(this.m_reader.ReadString());
				}
			}
			while (!flag);
			return list;
		}

		// Token: 0x06002382 RID: 9090 RVA: 0x000955CC File Offset: 0x000937CC
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.CodeClass> ReadClasses(PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.CodeClass> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.CodeClass>();
			CLSUniqueNameValidator clsuniqueNameValidator = new CLSUniqueNameValidator(ProcessingErrorCode.rsInvalidNameNotCLSCompliant, ProcessingErrorCode.rsDuplicateClassInstanceName, ProcessingErrorCode.rsInvalidNameLength);
			context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.CodeClass;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Classes" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "Class")
				{
					this.ReadClass(list, clsuniqueNameValidator, context);
				}
			}
			while (!flag);
			this.m_reportCT.Builder.SetCustomCode();
			return list;
		}

		// Token: 0x06002383 RID: 9091 RVA: 0x00095670 File Offset: 0x00093870
		private void ReadClass(List<Microsoft.ReportingServices.ReportIntermediateFormat.CodeClass> codeClasses, CLSUniqueNameValidator instanceNameValidator, PublishingContextStruct context)
		{
			bool flag = false;
			Microsoft.ReportingServices.ReportIntermediateFormat.CodeClass codeClass = default(Microsoft.ReportingServices.ReportIntermediateFormat.CodeClass);
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Class" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "ClassName"))
					{
						if (localName == "InstanceName")
						{
							codeClass.InstanceName = this.m_reader.ReadString();
							if (!instanceNameValidator.Validate(context.ObjectType, codeClass.InstanceName, context.ErrorContext))
							{
								codeClass.InstanceName = null;
							}
						}
					}
					else
					{
						codeClass.ClassName = this.m_reader.ReadString();
					}
				}
			}
			while (!flag);
			codeClasses.Add(codeClass);
		}

		// Token: 0x06002384 RID: 9092 RVA: 0x00095748 File Offset: 0x00093948
		private void ReadBody(Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection section, PublishingContextStruct context)
		{
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Body" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "ReportItems"))
						{
							if (!(localName == "Height"))
							{
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Body, false);
									section.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, context.ErrorContext);
								}
							}
							else
							{
								section.Height = this.ReadSize();
							}
						}
						else
						{
							this.ReadReportItems(null, section, section.ReportItems, context, null);
						}
					}
				}
				while (!flag);
			}
		}

		// Token: 0x06002385 RID: 9093 RVA: 0x00095840 File Offset: 0x00093A40
		private Microsoft.ReportingServices.ReportIntermediateFormat.PageSection ReadPageSection(bool isHeader, Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection section, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.PageSection pageSection = new Microsoft.ReportingServices.ReportIntermediateFormat.PageSection(isHeader, this.GenerateID(), this.GenerateID(), section);
			pageSection.Name = section.Name + "." + (isHeader ? "PageHeader" : "PageFooter");
			context.Location |= LocationFlags.InPageSection;
			context.ObjectType = pageSection.ObjectType;
			context.ObjectName = pageSection.Name;
			this.m_report.HasHeadersOrFooters = true;
			this.m_reportItemCollectionList.Add(pageSection.ReportItems);
			this.m_reportLocationFlags = UserLocationFlags.ReportPageSection;
			this.m_reportCT.ResetPageSectionRefersFlags();
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if (isHeader)
						{
							if ("PageHeader" == this.m_reader.LocalName)
							{
								flag3 = true;
							}
						}
						else if ("PageFooter" == this.m_reader.LocalName)
						{
							flag3 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "Height"))
					{
						if (!(localName == "PrintOnFirstPage"))
						{
							if (!(localName == "PrintOnLastPage"))
							{
								if (!(localName == "PrintBetweenSections"))
								{
									if (!(localName == "ReportItems"))
									{
										if (localName == "Style")
										{
											StyleInformation styleInformation = this.ReadStyle(context, out flag2);
											styleInformation.Filter(StyleOwnerType.PageSection, false);
											pageSection.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, context.ErrorContext);
										}
									}
									else
									{
										this.ReadReportItems(null, pageSection, pageSection.ReportItems, context, null, out flag);
									}
								}
								else
								{
									pageSection.PrintBetweenSections = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
								}
							}
							else
							{
								pageSection.PrintOnLastPage = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
						}
						else
						{
							pageSection.PrintOnFirstPage = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
						}
					}
					else
					{
						pageSection.Height = this.ReadSize();
					}
				}
			}
			while (!flag3);
			section.NeedsReportItemsOnPage |= this.m_reportCT.PageSectionRefersToReportItems;
			section.NeedsOverallTotalPages |= this.m_reportCT.PageSectionRefersToOverallTotalPages;
			section.NeedsPageBreakTotalPages |= this.m_reportCT.PageSectionRefersToTotalPages;
			this.m_reportLocationFlags = UserLocationFlags.ReportBody;
			return pageSection;
		}

		// Token: 0x06002386 RID: 9094 RVA: 0x00095B00 File Offset: 0x00093D00
		private void ReadReportItems(string propertyName, Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, Microsoft.ReportingServices.ReportIntermediateFormat.ReportItemCollection parentCollection, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget, out bool computed)
		{
			computed = false;
			int num = 0;
			bool flag = parent is Microsoft.ReportingServices.ReportIntermediateFormat.Tablix;
			bool flag2 = false;
			do
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem reportItem = null;
				Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem reportItem2 = null;
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("ReportItems" == this.m_reader.LocalName)
						{
							flag2 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						switch (localName.Length)
						{
						case 3:
							if (localName == "Map")
							{
								num++;
								reportItem = this.ReadMap(parent, context);
							}
							break;
						case 4:
							if (localName == "Line")
							{
								num++;
								reportItem = this.ReadLine(parent, context);
							}
							break;
						case 5:
						{
							char c = localName[0];
							if (c != 'C')
							{
								if (c == 'I')
								{
									if (localName == "Image")
									{
										num++;
										reportItem = this.ReadImage(parent, context);
									}
								}
							}
							else if (localName == "Chart")
							{
								num++;
								reportItem = this.ReadChart(parent, context);
							}
							break;
						}
						case 6:
							if (localName == "Tablix")
							{
								num++;
								reportItem = this.ReadTablix(parent, context);
							}
							break;
						case 7:
							if (localName == "Textbox")
							{
								num++;
								reportItem = this.ReadTextbox(parent, context, textBoxesWithDefaultSortTarget);
							}
							break;
						case 9:
						{
							char c = localName[0];
							if (c != 'R')
							{
								if (c == 'S')
								{
									if (localName == "Subreport")
									{
										num++;
										reportItem = this.ReadSubreport(parent, context);
									}
								}
							}
							else if (localName == "Rectangle")
							{
								num++;
								reportItem = this.ReadRectangle(parent, context, textBoxesWithDefaultSortTarget);
							}
							break;
						}
						case 10:
							if (localName == "GaugePanel")
							{
								num++;
								reportItem = this.ReadGaugePanel(parent, context);
							}
							break;
						case 16:
							if (localName == "CustomReportItem")
							{
								num++;
								reportItem = this.ReadCustomReportItem(parent, context, textBoxesWithDefaultSortTarget, out reportItem2);
								Global.Tracer.Assert(reportItem2 != null);
							}
							break;
						}
					}
					if (reportItem != null)
					{
						computed |= this.AddReportItemToParentCollection(reportItem, parentCollection, flag);
						if (reportItem2 != null)
						{
							computed |= this.AddReportItemToParentCollection(reportItem2, parentCollection, flag);
						}
					}
				}
			}
			while (!flag2);
		}

		// Token: 0x06002387 RID: 9095 RVA: 0x00095DD2 File Offset: 0x00093FD2
		private bool AddReportItemToParentCollection(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem reportItem, Microsoft.ReportingServices.ReportIntermediateFormat.ReportItemCollection parentCollection, bool isParentTablix)
		{
			parentCollection.AddReportItem(reportItem);
			return reportItem.Computed;
		}

		// Token: 0x06002388 RID: 9096 RVA: 0x00095DE4 File Offset: 0x00093FE4
		private void ReadReportItems(string propertyName, Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, Microsoft.ReportingServices.ReportIntermediateFormat.ReportItemCollection parentCollection, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			bool flag;
			this.ReadReportItems(propertyName, parent, parentCollection, context, textBoxesWithDefaultSortTarget, out flag);
		}

		// Token: 0x06002389 RID: 9097 RVA: 0x00095E00 File Offset: 0x00094000
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadPageNameExpression(PublishingContextStruct context)
		{
			bool flag;
			return this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag);
		}

		// Token: 0x0600238A RID: 9098 RVA: 0x00095E24 File Offset: 0x00094024
		private void ReadPageBreak(IPageBreakOwner pageBreakOwner, PublishingContextStruct context)
		{
			bool flag = false;
			if (!this.m_reader.IsEmptyElement)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.PageBreak pageBreak = new Microsoft.ReportingServices.ReportIntermediateFormat.PageBreak();
				pageBreakOwner.PageBreak = pageBreak;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							flag = this.m_reader.LocalName == "PageBreak";
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "BreakLocation"))
						{
							if (!(localName == "ResetPageNumber"))
							{
								if (localName == "Disabled")
								{
									bool flag2;
									pageBreak.Disabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context, out flag2);
								}
							}
							else
							{
								bool flag2;
								pageBreak.ResetPageNumber = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context, out flag2);
							}
						}
						else
						{
							pageBreak.BreakLocation = this.ReadPageBreakLocation();
						}
					}
				}
				while (!flag);
			}
		}

		// Token: 0x0600238B RID: 9099 RVA: 0x00095F18 File Offset: 0x00094118
		private void SetSortTargetForTextBoxes(List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxes, Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope target)
		{
			if (textBoxes != null)
			{
				for (int i = 0; i < textBoxes.Count; i++)
				{
					textBoxes[i].UserSort.SetDefaultSortTarget(target);
				}
			}
		}

		// Token: 0x0600238C RID: 9100 RVA: 0x00095F4C File Offset: 0x0009414C
		private Microsoft.ReportingServices.ReportIntermediateFormat.SubReport ReadSubreport(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.SubReport subReport = new Microsoft.ReportingServices.ReportIntermediateFormat.SubReport(this.GenerateID(), parent);
			subReport.Name = this.m_reader.GetAttribute("Name");
			subReport.SetContainingSection(this.m_currentReportSection);
			context.ObjectType = subReport.ObjectType;
			context.ObjectName = subReport.Name;
			this.m_reportItemNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext);
			bool flag = true;
			if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsDataRegionInPageSection, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
				flag = false;
			}
			bool flag2 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Subreport" == this.m_reader.LocalName)
						{
							flag2 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						switch (localName.Length)
						{
						case 3:
							if (localName == "Top")
							{
								subReport.Top = this.ReadSize();
							}
							break;
						case 4:
							if (localName == "Left")
							{
								subReport.Left = this.ReadSize();
							}
							break;
						case 5:
						{
							char c = localName[0];
							if (c != 'S')
							{
								if (c == 'W')
								{
									if (localName == "Width")
									{
										subReport.Width = this.ReadSize();
									}
								}
							}
							else if (localName == "Style")
							{
								StyleInformation styleInformation = this.ReadStyle(context);
								styleInformation.Filter(StyleOwnerType.SubReport, false);
								subReport.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, context.ErrorContext);
							}
							break;
						}
						case 6:
						{
							char c = localName[0];
							if (c != 'H')
							{
								if (c == 'Z')
								{
									if (localName == "ZIndex")
									{
										subReport.ZIndex = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
									}
								}
							}
							else if (localName == "Height")
							{
								subReport.Height = this.ReadSize();
							}
							break;
						}
						case 7:
							if (localName == "ToolTip")
							{
								subReport.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							}
							break;
						case 8:
							if (localName == "Bookmark")
							{
								subReport.Bookmark = this.ReadBookmarkExpression(this.m_reader.LocalName, context);
							}
							break;
						case 10:
						{
							char c = localName[0];
							if (c != 'P')
							{
								if (c != 'R')
								{
									if (c == 'V')
									{
										if (localName == "Visibility")
										{
											subReport.Visibility = this.ReadVisibility(context);
										}
									}
								}
								else if (localName == "ReportName")
								{
									subReport.ReportName = PublishingValidator.ValidateReportName(this.m_publishingContext.CatalogContext, this.m_reader.ReadString(), context.ObjectType, context.ObjectName, "ReportName", context.ErrorContext);
								}
							}
							else if (localName == "Parameters")
							{
								subReport.Parameters = this.ReadParameters(context, true);
							}
							break;
						}
						case 12:
							if (localName == "KeepTogether")
							{
								subReport.KeepTogether = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						case 13:
							if (localName == "NoRowsMessage")
							{
								subReport.NoRowsMessage = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							}
							break;
						case 15:
							if (localName == "DataElementName")
							{
								subReport.DataElementName = this.m_reader.ReadString();
							}
							break;
						case 16:
						{
							char c = localName[0];
							if (c != 'C')
							{
								if (c == 'D')
								{
									if (localName == "DocumentMapLabel")
									{
										subReport.DocumentMapLabel = this.ReadDocumentMapLabelExpression(this.m_reader.LocalName, context);
									}
								}
							}
							else if (localName == "CustomProperties")
							{
								subReport.CustomProperties = this.ReadCustomProperties(context);
							}
							break;
						}
						case 17:
						{
							char c = localName[0];
							if (c != 'D')
							{
								if (c == 'M')
								{
									if (localName == "MergeTransactions")
									{
										subReport.MergeTransactions = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										if (subReport.MergeTransactions)
										{
											this.m_subReportMergeTransactions = true;
										}
									}
								}
							}
							else if (localName == "DataElementOutput")
							{
								subReport.DataElementOutput = this.ReadDataElementOutput();
							}
							break;
						}
						case 21:
							if (localName == "OmitBorderOnPageBreak")
							{
								subReport.OmitBorderOnPageBreak = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						}
					}
				}
			}
			while (!flag2);
			if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.SubReports))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "Subreport", Array.Empty<string>());
			}
			subReport.Computed = true;
			if (flag)
			{
				this.m_subReports.Add(subReport);
				this.m_parametersNotUsedInQuery = false;
				return subReport;
			}
			return null;
		}

		// Token: 0x0600238D RID: 9101 RVA: 0x000965C4 File Offset: 0x000947C4
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataValueList ReadCustomProperties(PublishingContextStruct context)
		{
			bool flag;
			return this.ReadCustomProperties(context, out flag);
		}

		// Token: 0x0600238E RID: 9102 RVA: 0x000965DC File Offset: 0x000947DC
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataValueList ReadCustomProperties(PublishingContextStruct context, out bool computed)
		{
			bool flag = false;
			computed = false;
			int num = 0;
			Microsoft.ReportingServices.ReportIntermediateFormat.DataValueList dataValueList = new Microsoft.ReportingServices.ReportIntermediateFormat.DataValueList();
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("CustomProperties" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "CustomProperty")
				{
					dataValueList.Add(this.ReadDataValue(true, true, ++num, ref computed, context));
				}
			}
			while (!flag);
			return dataValueList;
		}

		// Token: 0x0600238F RID: 9103 RVA: 0x00096668 File Offset: 0x00094868
		private DataType ReadDataTypeAttribute()
		{
			bool flag;
			return this.ReadDataTypeAttribute(out flag);
		}

		// Token: 0x06002390 RID: 9104 RVA: 0x00096680 File Offset: 0x00094880
		private DataType ReadDataTypeAttribute(out bool hadExplicitDataType)
		{
			if (this.m_reader.HasAttributes)
			{
				string attribute = this.m_reader.GetAttribute("DataType");
				if (attribute != null)
				{
					hadExplicitDataType = true;
					return (DataType)Enum.Parse(typeof(DataType), attribute, false);
				}
			}
			hadExplicitDataType = false;
			return DataType.String;
		}

		// Token: 0x06002391 RID: 9105 RVA: 0x000966D0 File Offset: 0x000948D0
		private PageBreakLocation ReadPageBreakLocation()
		{
			string text = this.m_reader.ReadString();
			return (PageBreakLocation)Enum.Parse(typeof(PageBreakLocation), text, false);
		}

		// Token: 0x06002392 RID: 9106 RVA: 0x000966FF File Offset: 0x000948FF
		private bool ReadDataElementStyle()
		{
			return Validator.CompareWithInvariantCulture(this.m_reader.ReadString(), "Attribute");
		}

		// Token: 0x06002393 RID: 9107 RVA: 0x00096718 File Offset: 0x00094918
		private Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem.DataElementStyles ReadDataElementStyleRDL()
		{
			string text = this.m_reader.ReadString();
			return (Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem.DataElementStyles)Enum.Parse(typeof(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem.DataElementStyles), text, false);
		}

		// Token: 0x06002394 RID: 9108 RVA: 0x00096748 File Offset: 0x00094948
		private DataElementOutputTypes ReadDataElementOutput()
		{
			string text = this.m_reader.ReadString();
			return (DataElementOutputTypes)Enum.Parse(typeof(DataElementOutputTypes), text, false);
		}

		// Token: 0x06002395 RID: 9109 RVA: 0x00096778 File Offset: 0x00094978
		private StructureTypeOverwriteType ReadStructureTypeOverwrite()
		{
			string text = this.m_reader.ReadString();
			return (StructureTypeOverwriteType)Enum.Parse(typeof(StructureTypeOverwriteType), text, false);
		}

		// Token: 0x06002396 RID: 9110 RVA: 0x000967A8 File Offset: 0x000949A8
		private Microsoft.ReportingServices.ReportIntermediateFormat.Action ReadActionInfo(PublishingContextStruct context, StyleOwnerType styleOwnerType, out bool computed)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Action action = new Microsoft.ReportingServices.ReportIntermediateFormat.Action();
			bool flag = false;
			bool flag2 = false;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag3 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ActionInfo" == this.m_reader.LocalName)
							{
								flag3 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Style"))
						{
							if (localName == "Actions")
							{
								this.ReadActionItemList(action, context, out flag2);
								if (action.ActionItems.Count > 1)
								{
									context.ErrorContext.Register(ProcessingErrorCode.rsInvalidActionsCount, Severity.Error, context.ObjectType, context.ObjectName, "ActionInfo", new string[] { "Action" });
								}
							}
						}
						else
						{
							StyleInformation styleInformation = this.ReadStyle(context, out flag);
							styleInformation.Filter(styleOwnerType, false);
							action.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, context.ErrorContext);
						}
					}
				}
				while (!flag3);
			}
			computed = flag || flag2;
			return action;
		}

		// Token: 0x06002397 RID: 9111 RVA: 0x000968DC File Offset: 0x00094ADC
		private void ReadActionItemList(Microsoft.ReportingServices.ReportIntermediateFormat.Action actionInfo, PublishingContextStruct context, out bool computed)
		{
			computed = false;
			int num = -1;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Actions" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "Action")
				{
					bool flag4;
					actionInfo.ActionItems.Add(this.ReadActionItem(context, out flag2, ref num, ref flag3, out flag4));
					actionInfo.TrackFieldsUsedInValueExpression = actionInfo.TrackFieldsUsedInValueExpression || flag4;
				}
			}
			while (!flag);
			num++;
			computed = num > 0;
			if (flag3 && actionInfo.ActionItems.Count > 1)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidActionLabel, Severity.Error, context.ObjectType, context.ObjectName, "Actions", Array.Empty<string>());
			}
		}

		// Token: 0x06002398 RID: 9112 RVA: 0x000969C0 File Offset: 0x00094BC0
		private Microsoft.ReportingServices.ReportIntermediateFormat.ActionItem ReadActionItem(PublishingContextStruct context, out bool computed, ref int computedIndex, ref bool missingLabel, out bool hasDrillthroughParameter)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ActionItem actionItem = new Microsoft.ReportingServices.ReportIntermediateFormat.ActionItem();
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			hasDrillthroughParameter = false;
			context.PrefixPropertyName = "ActionInfo.Action.";
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag9 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Action" == this.m_reader.LocalName)
							{
								flag9 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Hyperlink"))
						{
							if (!(localName == "Drillthrough"))
							{
								if (!(localName == "BookmarkLink"))
								{
									if (localName == "Label")
									{
										flag4 = true;
										actionItem.Label = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag8);
									}
								}
								else
								{
									flag3 = true;
									actionItem.BookmarkLink = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag7);
								}
							}
							else
							{
								this.m_hasDrillthroughs = true;
								flag2 = true;
								this.ReadDrillthrough(context, actionItem, out flag6);
							}
						}
						else
						{
							this.m_hasHyperlinks = true;
							flag = true;
							actionItem.HyperLinkURL = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag5);
						}
					}
				}
				while (!flag9);
			}
			int num = 0;
			if (flag)
			{
				num++;
			}
			if (flag2)
			{
				num++;
				hasDrillthroughParameter = actionItem.DrillthroughParameters != null && actionItem.DrillthroughParameters.Count > 0;
			}
			if (flag3)
			{
				num++;
			}
			if (1 != num)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidAction, Severity.Error, context.ObjectType, context.ObjectName, "Action", Array.Empty<string>());
			}
			if (!flag4)
			{
				missingLabel = true;
			}
			computed = flag5 || flag6 || flag7 || flag8;
			if (computed)
			{
				computedIndex++;
				actionItem.ComputedIndex = computedIndex;
			}
			return actionItem;
		}

		// Token: 0x06002399 RID: 9113 RVA: 0x00096BB4 File Offset: 0x00094DB4
		private void ReadDrillthrough(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.ActionItem actionItem, out bool computed)
		{
			computed = false;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			context.PrefixPropertyName = "ActionInfo.Action.Drillthrough.";
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Drillthrough" == this.m_reader.LocalName)
						{
							flag4 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "ReportName"))
					{
						if (!(localName == "Parameters"))
						{
							if (localName == "BookmarkLink")
							{
								actionItem.DrillthroughBookmarkLink = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2);
							}
						}
						else
						{
							actionItem.DrillthroughParameters = this.ReadParameters(context, true, false, false, out flag);
						}
					}
					else
					{
						actionItem.DrillthroughReportName = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag3);
						if (Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant == actionItem.DrillthroughReportName.Type)
						{
							actionItem.DrillthroughReportName.StringValue = PublishingValidator.ValidateReportName(this.m_publishingContext.CatalogContext, actionItem.DrillthroughReportName.StringValue, context.ObjectType, context.ObjectName, "DrillthroughReportName", context.ErrorContext);
						}
					}
				}
			}
			while (!flag4);
			computed = flag || flag2 || flag3;
		}

		// Token: 0x0600239A RID: 9114 RVA: 0x00096D10 File Offset: 0x00094F10
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadBookmarkExpression(PublishingContextStruct context, out bool computedBookmark)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadBookmarkExpression(this.m_reader.LocalName, context, out computedBookmark);
			if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsBookmarkInPageSection, Severity.Warning, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
			}
			return expressionInfo;
		}

		// Token: 0x0600239B RID: 9115 RVA: 0x00096D64 File Offset: 0x00094F64
		private AuthoringMetadata ReadAuthoringMetadata(PublishingContextStruct context)
		{
			AuthoringMetadata authoringMetadata = new AuthoringMetadata();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("AuthoringMetadata" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "CreatedBy"))
					{
						if (!(localName == "UpdatedBy"))
						{
							if (localName == "LastModifiedTimestamp")
							{
								authoringMetadata.LastModifiedTimestamp = this.m_reader.ReadString();
							}
						}
						else
						{
							authoringMetadata.UpdatedBy = this.ReadAuthoringToolProperty("UpdatedBy", context);
						}
					}
					else
					{
						authoringMetadata.CreatedBy = this.ReadAuthoringToolProperty("CreatedBy", context);
					}
				}
			}
			while (!flag);
			return authoringMetadata;
		}

		// Token: 0x0600239C RID: 9116 RVA: 0x00096E30 File Offset: 0x00095030
		private AuthoringToolProperty ReadAuthoringToolProperty(string tagName, PublishingContextStruct context)
		{
			AuthoringToolProperty authoringToolProperty = new AuthoringToolProperty();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if (tagName == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "Name"))
					{
						if (localName == "Version")
						{
							authoringToolProperty.Version = this.m_reader.ReadString();
						}
					}
					else
					{
						authoringToolProperty.Name = this.m_reader.ReadString();
					}
				}
			}
			while (!flag);
			return authoringToolProperty;
		}

		// Token: 0x0600239D RID: 9117 RVA: 0x00096ED4 File Offset: 0x000950D4
		private Microsoft.ReportingServices.ReportIntermediateFormat.BandLayoutOptions ReadBandLayoutOptions(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.BandLayoutOptions bandLayoutOptions = new Microsoft.ReportingServices.ReportIntermediateFormat.BandLayoutOptions();
			int num = 0;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "BandLayoutOptions")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "RowCount"))
						{
							if (!(localName == "ColumnCount"))
							{
								if (!(localName == "Coverflow"))
								{
									if (!(localName == "Tabstrip"))
									{
										if (localName == "PlayAxis")
										{
											num++;
											if (bandLayoutOptions.Navigation == null)
											{
												bandLayoutOptions.Navigation = this.ReadPlayAxis(context);
											}
										}
									}
									else
									{
										num++;
										if (bandLayoutOptions.Navigation == null)
										{
											bandLayoutOptions.Navigation = this.ReadTabstrip(tablix, context);
										}
									}
								}
								else
								{
									num++;
									if (bandLayoutOptions.Navigation == null)
									{
										bandLayoutOptions.Navigation = this.ReadCoverflow(tablix, context);
									}
								}
							}
							else
							{
								bandLayoutOptions.ColumnCount = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
						}
						else
						{
							bandLayoutOptions.RowCount = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
						}
					}
				}
				while (!flag);
			}
			if (num > 1)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidBandNavigations, Severity.Error, context.ObjectType, tablix.Name, null, Array.Empty<string>());
			}
			return bandLayoutOptions;
		}

		// Token: 0x0600239E RID: 9118 RVA: 0x00097080 File Offset: 0x00095280
		private Microsoft.ReportingServices.ReportIntermediateFormat.NavigationItem ReadNavigationItem(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, string navigationType)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.NavigationItem navigationItem = new Microsoft.ReportingServices.ReportIntermediateFormat.NavigationItem();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "NavigationItem")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "ReportItemReference"))
						{
							if (localName == "ReportItem")
							{
								List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox>();
								navigationItem.BandNavigationCell = new BandNavigationCell(this.GenerateID(), tablix);
								Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem reportItem;
								int? num;
								int? num2;
								navigationItem.BandNavigationCell.CellContents = this.ReadCellContents(tablix, context, list, false, out reportItem, out num, out num2);
								navigationItem.BandNavigationCell.AltCellContents = reportItem;
							}
						}
						else
						{
							navigationItem.ReportItemReference = this.m_reader.ReadString();
						}
					}
				}
				while (!flag);
				if (navigationItem.ReportItemReference != null && navigationItem.BandNavigationCell != null)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidBandNavigationItem, Severity.Error, context.ObjectType, tablix.Name, navigationType, Array.Empty<string>());
				}
			}
			return navigationItem;
		}

		// Token: 0x0600239F RID: 9119 RVA: 0x000971A4 File Offset: 0x000953A4
		private Microsoft.ReportingServices.ReportIntermediateFormat.Coverflow ReadCoverflow(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Coverflow coverflow = new Microsoft.ReportingServices.ReportIntermediateFormat.Coverflow();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "Coverflow")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "NavigationItem"))
						{
							if (localName == "Slider")
							{
								coverflow.Slider = this.ReadSlider(context);
							}
						}
						else
						{
							coverflow.NavigationItem = this.ReadNavigationItem(tablix, context, "Coverflow");
						}
					}
				}
				while (!flag);
			}
			return coverflow;
		}

		// Token: 0x060023A0 RID: 9120 RVA: 0x00097258 File Offset: 0x00095458
		private Microsoft.ReportingServices.ReportIntermediateFormat.Tabstrip ReadTabstrip(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Tabstrip tabstrip = new Microsoft.ReportingServices.ReportIntermediateFormat.Tabstrip();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "Tabstrip")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "NavigationItem"))
						{
							if (localName == "Slider")
							{
								tabstrip.Slider = this.ReadSlider(context);
							}
						}
						else
						{
							tabstrip.NavigationItem = this.ReadNavigationItem(tablix, context, "Tabstrip");
						}
					}
				}
				while (!flag);
			}
			return tabstrip;
		}

		// Token: 0x060023A1 RID: 9121 RVA: 0x0009730C File Offset: 0x0009550C
		private Microsoft.ReportingServices.ReportIntermediateFormat.PlayAxis ReadPlayAxis(PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.PlayAxis playAxis = new Microsoft.ReportingServices.ReportIntermediateFormat.PlayAxis();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "PlayAxis")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Slider"))
						{
							if (localName == "DockingOption")
							{
								playAxis.DockingOption = this.ReadDockingOption();
							}
						}
						else
						{
							playAxis.Slider = this.ReadSlider(context);
						}
					}
				}
				while (!flag);
			}
			return playAxis;
		}

		// Token: 0x060023A2 RID: 9122 RVA: 0x000973BC File Offset: 0x000955BC
		private DockingOption ReadDockingOption()
		{
			string text = this.m_reader.ReadString();
			return (DockingOption)Enum.Parse(typeof(DockingOption), text, false);
		}

		// Token: 0x060023A3 RID: 9123 RVA: 0x000973EC File Offset: 0x000955EC
		private Microsoft.ReportingServices.ReportIntermediateFormat.Slider ReadSlider(PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Slider slider = new Microsoft.ReportingServices.ReportIntermediateFormat.Slider();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "Slider")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Hidden"))
						{
							if (localName == "LabelData")
							{
								slider.LabelData = this.ReadLabelData(context);
							}
						}
						else
						{
							slider.Hidden = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
						}
					}
				}
				while (!flag);
			}
			return slider;
		}

		// Token: 0x060023A4 RID: 9124 RVA: 0x000974B8 File Offset: 0x000956B8
		private Microsoft.ReportingServices.ReportIntermediateFormat.LabelData ReadLabelData(PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.LabelData labelData = new Microsoft.ReportingServices.ReportIntermediateFormat.LabelData();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "LabelData")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "DataSetName"))
						{
							if (!(localName == "Key"))
							{
								if (!(localName == "KeyFields"))
								{
									if (localName == "Label")
									{
										labelData.Label = this.m_reader.ReadString();
									}
								}
								else
								{
									labelData.KeyFields = this.ReadKeyFields();
									if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.LabelData_KeyFields))
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "KeyFields", Array.Empty<string>());
									}
								}
							}
							else
							{
								string text = this.m_reader.ReadString();
								if (labelData.KeyFields == null)
								{
									labelData.KeyFields = new List<string>(1);
									labelData.KeyFields.Add(text);
								}
							}
						}
						else
						{
							labelData.DataSetName = this.m_reader.ReadString();
						}
					}
				}
				while (!flag);
			}
			if (labelData.KeyFields == null)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidReportDefinition, Severity.Error, context.ObjectType, context.ObjectName, "LabelData", new string[] { "KeyFields" });
			}
			return labelData;
		}

		// Token: 0x060023A5 RID: 9125 RVA: 0x00097658 File Offset: 0x00095858
		private List<string> ReadKeyFields()
		{
			List<string> list = new List<string>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "KeyFields")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "Key")
					{
						list.Add(this.m_reader.ReadString());
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023A6 RID: 9126 RVA: 0x000976E4 File Offset: 0x000958E4
		private Microsoft.ReportingServices.ReportIntermediateFormat.Chart ReadChart(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart = new Microsoft.ReportingServices.ReportIntermediateFormat.Chart(this.GenerateID(), parent);
			chart.Name = this.m_reader.GetAttribute("Name");
			if ((context.Location & LocationFlags.InDataRegion) != (LocationFlags)0)
			{
				Global.Tracer.Assert(this.m_nestedDataRegions != null, "(m_nestedDataRegions != null)");
				this.m_nestedDataRegions.Add(chart);
			}
			context.Location = context.Location | LocationFlags.InDataSet | LocationFlags.InDataRegion;
			context.ObjectType = chart.ObjectType;
			context.ObjectName = chart.Name;
			this.RegisterDataRegion(chart);
			bool flag = true;
			if (!this.m_reportItemNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				flag = false;
			}
			if (this.m_scopeNames.Validate(false, context.ObjectName, context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				this.m_reportScopes.Add(chart.Name, chart);
			}
			else
			{
				flag = false;
			}
			if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsDataRegionInPageSection, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
				flag = false;
			}
			StyleInformation styleInformation = null;
			IdcRelationship idcRelationship = null;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Chart" == this.m_reader.LocalName)
							{
								flag2 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 3:
								if (localName == "Top")
								{
									chart.Top = this.ReadSize();
								}
								break;
							case 4:
								if (localName == "Left")
								{
									chart.Left = this.ReadSize();
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											chart.Width = this.ReadSize();
										}
									}
								}
								else if (localName == "Style")
								{
									styleInformation = this.ReadStyle(context);
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'Z')
									{
										if (localName == "ZIndex")
										{
											chart.ZIndex = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "Height")
								{
									chart.Height = this.ReadSize();
								}
								break;
							}
							case 7:
							{
								char c = localName[0];
								if (c != 'F')
								{
									if (c != 'P')
									{
										if (c == 'T')
										{
											if (localName == "ToolTip")
											{
												chart.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											}
										}
									}
									else if (localName == "Palette")
									{
										chart.Palette = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!chart.Palette.IsExpression)
										{
											Validator.ValidatePalette(chart.Palette.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "Filters")
								{
									chart.Filters = this.ReadFilters(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.DataRegionFilters, context);
								}
								break;
							}
							case 8:
							{
								char c = localName[0];
								if (c != 'B')
								{
									if (c == 'P')
									{
										if (localName == "PageName")
										{
											chart.PageName = this.ReadPageNameExpression(context);
										}
									}
								}
								else if (localName == "Bookmark")
								{
									chart.Bookmark = this.ReadBookmarkExpression(this.m_reader.LocalName, context);
								}
								break;
							}
							case 9:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'P')
									{
										if (localName == "PageBreak")
										{
											this.ReadPageBreak(chart, context);
										}
									}
								}
								else if (localName == "ChartData")
								{
									bool flag3;
									this.ReadChartData(chart, context, out flag3);
									chart.HasDataValueAggregates = flag3;
								}
								break;
							}
							case 10:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'V')
									{
										if (localName == "Visibility")
										{
											chart.Visibility = this.ReadVisibility(context);
										}
									}
								}
								else if (localName == "ChartAreas")
								{
									chart.ChartAreas = this.ReadChartAreas(chart, context);
								}
								break;
							}
							case 11:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'D')
									{
										if (localName == "DataSetName")
										{
											chart.DataSetName = this.m_reader.ReadString();
										}
									}
								}
								else if (localName == "ChartTitles")
								{
									chart.Titles = this.ReadChartTitles(chart, context);
								}
								break;
							}
							case 12:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c != 'D')
									{
										if (c == 'R')
										{
											if (localName == "Relationship")
											{
												idcRelationship = this.ReadRelationship(context);
											}
										}
									}
									else if (localName == "DynamicWidth")
									{
										chart.DynamicWidth = this.ReadExpression("DynamicWidth", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
								else if (localName == "ChartLegends")
								{
									chart.Legends = this.ReadChartLegends(chart, context);
								}
								break;
							}
							case 13:
							{
								char c = localName[0];
								if (c != 'D')
								{
									if (c == 'N')
									{
										if (localName == "NoRowsMessage")
										{
											chart.NoRowsMessage = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "DynamicHeight")
								{
									chart.DynamicHeight = this.ReadExpression("DynamicHeight", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 15:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c != 'D')
									{
										if (c == 'S')
										{
											if (localName == "SortExpressions")
											{
												chart.Sorting = this.ReadSortExpressions(true, context);
											}
										}
									}
									else if (localName == "DataElementName")
									{
										chart.DataElementName = this.m_reader.ReadString();
									}
								}
								else if (localName == "ChartBorderSkin")
								{
									chart.BorderSkin = this.ReadChartBorderSkin(chart, context);
								}
								break;
							}
							case 16:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'D')
									{
										if (localName == "DocumentMapLabel")
										{
											chart.DocumentMapLabel = this.ReadDocumentMapLabelExpression(this.m_reader.LocalName, context);
										}
									}
								}
								else if (localName == "CustomProperties")
								{
									chart.CustomProperties = this.ReadCustomProperties(context);
								}
								break;
							}
							case 17:
								if (localName == "DataElementOutput")
								{
									chart.DataElementOutput = this.ReadDataElementOutput();
								}
								break;
							case 18:
								if (localName == "ChartNoDataMessage")
								{
									ChartNoDataMessage chartNoDataMessage = new ChartNoDataMessage(chart);
									this.ReadChartTitle(chart, chartNoDataMessage, true, context, new DynamicImageObjectUniqueNameValidator());
									chart.NoDataMessage = chartNoDataMessage;
								}
								break;
							case 19:
								if (localName == "ChartCodeParameters")
								{
									chart.CodeParameters = this.ReadChartCodeParameters(context);
								}
								break;
							case 20:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'P')
									{
										if (localName == "PaletteHatchBehavior")
										{
											chart.PaletteHatchBehavior = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chart.PaletteHatchBehavior.IsExpression)
											{
												Validator.ValidatePaletteHatchBehavior(chart.PaletteHatchBehavior.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "ChartSeriesHierarchy")
								{
									chart.SeriesMembers = this.ReadChartHierarchy(chart, context, false);
								}
								break;
							}
							case 22:
								if (localName == "ChartCategoryHierarchy")
								{
									chart.CategoryMembers = this.ReadChartHierarchy(chart, context, true);
								}
								break;
							case 24:
								if (localName == "ChartCustomPaletteColors")
								{
									chart.CustomPaletteColors = this.ReadChartCustomPaletteColors(chart, context);
								}
								break;
							}
						}
					}
				}
				while (!flag2);
			}
			chart.SetColumnGroupingDirection(this.m_publishingContext.IsRdlx);
			chart.DataScopeInfo.SetRelationship(chart.DataSetName, idcRelationship);
			if (styleInformation != null)
			{
				styleInformation.Filter(StyleOwnerType.Chart, chart.NoRowsMessage != null);
				chart.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, false, context.ErrorContext);
			}
			if (chart.CategoryMembers == null || chart.CategoryMembers.Count == 0)
			{
				this.ChartFakeStaticCategory(chart);
			}
			if (chart.SeriesMembers == null || chart.SeriesMembers.Count == 0)
			{
				this.ChartFakeStaticSeries(chart);
			}
			if (chart.StyleClass != null)
			{
				PublishingValidator.ValidateBorderColorNotTransparent(chart.ObjectType, chart.Name, chart.StyleClass, "BorderColor", context.ErrorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(chart.ObjectType, chart.Name, chart.StyleClass, "BorderColorBottom", context.ErrorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(chart.ObjectType, chart.Name, chart.StyleClass, "BorderColorTop", context.ErrorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(chart.ObjectType, chart.Name, chart.StyleClass, "BorderColorLeft", context.ErrorContext);
				PublishingValidator.ValidateBorderColorNotTransparent(chart.ObjectType, chart.Name, chart.StyleClass, "BorderColorRight", context.ErrorContext);
			}
			chart.Computed = true;
			if (flag)
			{
				this.m_hasImageStreams = true;
				return chart;
			}
			return null;
		}

		// Token: 0x060023A7 RID: 9127 RVA: 0x0009823C File Offset: 0x0009643C
		private ChartMemberList ReadChartHierarchy(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, bool isCategoryHierarchy)
		{
			ChartMemberList chartMemberList = null;
			int num = 0;
			int num2 = 0;
			bool flag = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == (isCategoryHierarchy ? "ChartCategoryHierarchy" : "ChartSeriesHierarchy"))
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "ChartMembers"))
						{
							if (localName == "EnableDrilldown")
							{
								if (isCategoryHierarchy)
								{
									bool flag2 = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
									if (flag2 && this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.ChartHierarchy_EnableDrilldown))
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, chart.Name, "EnableDrilldown", Array.Empty<string>());
									}
									chart.EnableCategoryDrilldown = flag2;
								}
							}
						}
						else
						{
							chartMemberList = this.ReadChartMembers(chart, context, isCategoryHierarchy, 0, ref num, ref num2);
						}
					}
				}
				while (!flag);
			}
			if (isCategoryHierarchy)
			{
				chart.CategoryCount = num;
			}
			else
			{
				chart.SeriesCount = num;
			}
			this.SetCategoryOrSeriesSpans(chartMemberList, isCategoryHierarchy, num2 + 1);
			return chartMemberList;
		}

		// Token: 0x060023A8 RID: 9128 RVA: 0x00098390 File Offset: 0x00096590
		private void SetCategoryOrSeriesSpans(ChartMemberList members, bool isCategoryHierarchy, int totalSpansFromLevel)
		{
			foreach (object obj in members)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember chartMember = (Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember)obj;
				int num;
				if (chartMember.ChartMembers != null && chartMember.ChartMembers.Count > 0)
				{
					num = 1;
					this.SetCategoryOrSeriesSpans(chartMember.ChartMembers, isCategoryHierarchy, totalSpansFromLevel - 1);
				}
				else
				{
					num = totalSpansFromLevel;
				}
				if (isCategoryHierarchy)
				{
					chartMember.RowSpan = num;
				}
				else
				{
					chartMember.ColSpan = num;
				}
			}
		}

		// Token: 0x060023A9 RID: 9129 RVA: 0x0009841C File Offset: 0x0009661C
		private ChartMemberList ReadChartMembers(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, bool isCategoryHierarchy, int level, ref int leafNodes, ref int maxLevel)
		{
			ChartMemberList chartMemberList = new ChartMemberList();
			bool flag = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartMembers" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartMember")
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember chartMember = this.ReadChartMember(chart, context, isCategoryHierarchy, level, ref leafNodes, ref maxLevel);
						chartMemberList.Add(chartMember);
					}
				}
				while (!flag);
			}
			if (chartMemberList.Count <= 0)
			{
				return null;
			}
			return chartMemberList;
		}

		// Token: 0x060023AA RID: 9130 RVA: 0x000984BC File Offset: 0x000966BC
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember ReadChartMember(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, bool isCategoryHierarchy, int level, ref int aLeafNodes, ref int maxLevel)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember chartMember = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember(this.GenerateID(), chart);
			this.m_runningValueHolderList.Add(chartMember);
			chartMember.IsColumn = isCategoryHierarchy;
			chartMember.Level = level;
			maxLevel = Math.Max(maxLevel, level);
			bool flag = false;
			int num = 0;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartMember" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							if (length != 5)
							{
								switch (length)
								{
								case 12:
									if (localName == "ChartMembers")
									{
										chartMember.ChartMembers = this.ReadChartMembers(chart, context, isCategoryHierarchy, level + 1, ref num, ref maxLevel);
									}
									break;
								case 15:
								{
									char c = localName[0];
									if (c != 'D')
									{
										if (c == 'S')
										{
											if (localName == "SortExpressions")
											{
												chartMember.Sorting = this.ReadSortExpressions(false, context);
											}
										}
									}
									else if (localName == "DataElementName")
									{
										chartMember.DataElementName = this.m_reader.ReadString();
									}
									break;
								}
								case 16:
									if (localName == "CustomProperties")
									{
										chartMember.CustomProperties = this.ReadCustomProperties(context);
									}
									break;
								case 17:
									if (localName == "DataElementOutput")
									{
										chartMember.DataElementOutput = this.ReadDataElementOutput();
									}
									break;
								}
							}
							else
							{
								char c = localName[0];
								if (c != 'G')
								{
									if (c == 'L')
									{
										if (localName == "Label")
										{
											chartMember.Label = this.ReadExpression("Label", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "Group")
								{
									chartMember.Grouping = this.ReadGrouping(chartMember, context);
									if (chartMember.Grouping.PageBreak != null && chartMember.Grouping.PageBreak.BreakLocation != PageBreakLocation.None)
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsPageBreakOnChartGroup, Severity.Warning, context.ObjectType, context.ObjectName, isCategoryHierarchy ? "CategoryGroupings" : "SeriesGroupings", new string[] { chartMember.Grouping.Name });
									}
								}
							}
						}
					}
				}
				while (!flag);
			}
			if (chartMember.ChartMembers == null || chartMember.ChartMembers.Count == 0)
			{
				aLeafNodes++;
				if (isCategoryHierarchy)
				{
					chartMember.ColSpan = 1;
				}
				else
				{
					chartMember.RowSpan = 1;
				}
			}
			else
			{
				aLeafNodes += num;
				if (isCategoryHierarchy)
				{
					chartMember.ColSpan = num;
				}
				else
				{
					chartMember.RowSpan = num;
				}
			}
			this.ValidateAndProcessMemberGroupAndSort(chartMember, context);
			if (chartMember.Grouping != null)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo label = chartMember.Label;
				if ((label == null || (label.Type == Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant && label.StringValue.Length == 0)) && chartMember.Grouping.GroupExpressions != null && chartMember.Grouping.GroupExpressions.Count > 0)
				{
					chartMember.Label = chartMember.Grouping.GroupExpressions[0];
				}
			}
			else
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo label2 = chartMember.Label;
				if (label2.Type == Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant && label2.StringValue.Length == 0)
				{
					label2.StringValue = null;
				}
			}
			return chartMember;
		}

		// Token: 0x060023AB RID: 9131 RVA: 0x00098844 File Offset: 0x00096A44
		private void ChartFakeStaticSeries(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart)
		{
			Global.Tracer.Assert(chart != null);
			Global.Tracer.Assert(((chart.SeriesMembers != null) ? chart.SeriesMembers.Count : 0) == 0);
			chart.SeriesCount = 1;
			chart.SeriesMembers = new ChartMemberList(1);
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember chartMember = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember(this.GenerateID(), chart);
			chartMember.ColSpan = 1;
			chartMember.RowSpan = 1;
			chart.SeriesMembers.Add(chartMember);
		}

		// Token: 0x060023AC RID: 9132 RVA: 0x000988C0 File Offset: 0x00096AC0
		private void ChartFakeStaticCategory(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart)
		{
			Global.Tracer.Assert(chart != null);
			Global.Tracer.Assert(((chart.CategoryMembers != null) ? chart.CategoryMembers.Count : 0) == 0);
			chart.CategoryCount = 1;
			chart.CategoryMembers = new ChartMemberList(1);
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember chartMember = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember(this.GenerateID(), chart);
			chartMember.ColSpan = 1;
			chartMember.RowSpan = 1;
			chart.CategoryMembers.Add(chartMember);
		}

		// Token: 0x060023AD RID: 9133 RVA: 0x0009893C File Offset: 0x00096B3C
		private void ReadChartTitle(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartTitle title, bool isNoDataMessage, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator namesValidator)
		{
			if (!isNoDataMessage)
			{
				title.TitleName = this.m_reader.GetAttribute("Name");
				namesValidator.Validate(Severity.Error, "ChartTitle", Microsoft.ReportingServices.ReportProcessing.ObjectType.Chart, chart.Name, title.TitleName, context.ErrorContext);
			}
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (isNoDataMessage)
							{
								if ("ChartNoDataMessage" == this.m_reader.LocalName)
								{
									flag = true;
								}
							}
							else if ("ChartTitle" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Chart, false);
									title.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
								break;
							case 6:
								if (localName == "Hidden")
								{
									title.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 7:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c != 'D')
									{
										if (c == 'T')
										{
											if (localName == "ToolTip")
											{
												title.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											}
										}
									}
									else if (localName == "Docking")
									{
										title.Docking = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!title.Docking.IsExpression)
										{
											Validator.ValidateChartTitleDockings(title.Docking.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "Caption")
								{
									title.Caption = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 8:
								if (localName == "Position")
								{
									title.Position = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!title.Position.IsExpression)
									{
										Validator.ValidateChartTitlePositions(title.Position.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 9:
							case 11:
							case 12:
							case 13:
							case 14:
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'D')
									{
										if (localName == "DockOffset")
										{
											title.DockOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
										}
									}
								}
								else if (localName == "ActionInfo")
								{
									bool flag2;
									title.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							}
							case 15:
							{
								char c = localName[0];
								if (c != 'D')
								{
									if (c == 'T')
									{
										if (localName == "TextOrientation")
										{
											title.TextOrientation = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!title.TextOrientation.IsExpression)
											{
												Validator.ValidateTextOrientations(title.TextOrientation.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "DockToChartArea")
								{
									title.DockToChartArea = this.m_reader.ReadString();
								}
								break;
							}
							default:
								if (length == 20)
								{
									char c = localName[0];
									if (c != 'C')
									{
										if (c == 'D')
										{
											if (localName == "DockOutsideChartArea")
											{
												title.DockOutsideChartArea = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "ChartElementPosition")
									{
										title.ChartElementPosition = this.ReadChartElementPosition(chart, context, "ChartElementPosition");
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
		}

		// Token: 0x060023AE RID: 9134 RVA: 0x00098E0C File Offset: 0x0009700C
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxisTitle ReadChartAxisTitle(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxisTitle chartAxisTitle = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxisTitle(chart);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartAxisTitle" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Caption"))
						{
							if (!(localName == "Style"))
							{
								if (!(localName == "Position"))
								{
									if (localName == "TextOrientation")
									{
										chartAxisTitle.TextOrientation = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!chartAxisTitle.TextOrientation.IsExpression)
										{
											Validator.ValidateTextOrientations(chartAxisTitle.TextOrientation.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
										}
									}
								}
								else
								{
									chartAxisTitle.Position = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartAxisTitle.Position.IsExpression)
									{
										Validator.ValidateChartAxisTitlePositions(chartAxisTitle.Position.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
							}
							else
							{
								StyleInformation styleInformation = this.ReadStyle(context);
								styleInformation.Filter(StyleOwnerType.Chart, false);
								chartAxisTitle.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
							}
						}
						else
						{
							chartAxisTitle.Caption = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						}
					}
				}
				while (!flag);
			}
			return chartAxisTitle;
		}

		// Token: 0x060023AF RID: 9135 RVA: 0x00098FC4 File Offset: 0x000971C4
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendTitle ReadChartLegendTitle(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendTitle chartLegendTitle = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendTitle(chart);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartLegendTitle" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Caption"))
						{
							if (!(localName == "Style"))
							{
								if (localName == "TitleSeparator")
								{
									chartLegendTitle.TitleSeparator = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
							}
							else
							{
								StyleInformation styleInformation = this.ReadStyle(context);
								styleInformation.FilterChartLegendTitleStyle();
								chartLegendTitle.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
							}
						}
						else
						{
							chartLegendTitle.Caption = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						}
					}
				}
				while (!flag);
			}
			return chartLegendTitle;
		}

		// Token: 0x060023B0 RID: 9136 RVA: 0x000990E0 File Offset: 0x000972E0
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxis> ReadValueAxes(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxis> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxis>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartValueAxes")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartAxis")
					{
						list.Add(this.ReadAxis(chart, context, false, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023B1 RID: 9137 RVA: 0x00099174 File Offset: 0x00097374
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxis> ReadCategoryAxes(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxis> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxis>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartCategoryAxes")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartAxis")
					{
						list.Add(this.ReadAxis(chart, context, true, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023B2 RID: 9138 RVA: 0x00099208 File Offset: 0x00097408
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartArea> ReadChartAreas(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartArea> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartArea>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartAreas")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartArea")
					{
						list.Add(this.ReadChartArea(chart, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023B3 RID: 9139 RVA: 0x00099298 File Offset: 0x00097498
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartTitle> ReadChartTitles(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartTitle> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartTitle>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartTitles")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartTitle")
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.ChartTitle chartTitle = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartTitle(chart);
						this.ReadChartTitle(chart, chartTitle, false, context, dynamicImageObjectUniqueNameValidator);
						list.Add(chartTitle);
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023B4 RID: 9140 RVA: 0x00099338 File Offset: 0x00097538
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegend> ReadChartLegends(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegend> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegend>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartLegends")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartLegend")
					{
						list.Add(this.ReadChartLegend(chart, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023B5 RID: 9141 RVA: 0x000993C8 File Offset: 0x000975C8
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartTickMarks ReadChartTickMarks(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, bool isMajor)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartTickMarks chartTickMarks = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartTickMarks(chart);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ((isMajor && "ChartMajorTickMarks" == this.m_reader.LocalName) || (!isMajor && "ChartMinorTickMarks" == this.m_reader.LocalName))
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 4:
								if (localName == "Type")
								{
									chartTickMarks.Type = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartTickMarks.Type.IsExpression)
									{
										Validator.ValidateChartTickMarksType(chartTickMarks.Type.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Chart, false);
									chartTickMarks.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
								break;
							case 6:
								if (localName == "Length")
								{
									chartTickMarks.Length = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 7:
								if (localName == "Enabled")
								{
									chartTickMarks.Enabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
								if (localName == "Interval")
								{
									chartTickMarks.Interval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 12:
								if (localName == "IntervalType")
								{
									chartTickMarks.IntervalType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartTickMarks.IntervalType.IsExpression)
									{
										Validator.ValidateChartIntervalType(chartTickMarks.IntervalType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 14:
								if (localName == "IntervalOffset")
								{
									chartTickMarks.IntervalOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 18:
								if (localName == "IntervalOffsetType")
								{
									chartTickMarks.IntervalOffsetType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartTickMarks.IntervalOffsetType.IsExpression)
									{
										Validator.ValidateChartIntervalType(chartTickMarks.IntervalOffsetType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartTickMarks;
		}

		// Token: 0x060023B6 RID: 9142 RVA: 0x00099720 File Offset: 0x00097920
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxis ReadAxis(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, bool isCategory, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxis chartAxis = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxis(chart);
			chartAxis.AxisName = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, isCategory ? "ChartCategoryAxis" : "ChartValueAxis", Microsoft.ReportingServices.ReportProcessing.ObjectType.Chart, chart.Name, chartAxis.AxisName, context.ErrorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartAxis" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'S')
									{
										if (localName == "Style")
										{
											StyleInformation styleInformation = this.ReadStyle(context);
											styleInformation.Filter(StyleOwnerType.Chart, false);
											chartAxis.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
										}
									}
								}
								else if (localName == "Angle")
								{
									chartAxis.Angle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c != 'M')
									{
										if (c == 'S')
										{
											if (localName == "Scalar")
											{
												chartAxis.Scalar = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
											}
										}
									}
									else if (localName == "Margin")
									{
										chartAxis.Margin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!chartAxis.Margin.IsExpression)
										{
											Validator.ValidateChartAutoBool(chartAxis.Margin.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "Arrows")
								{
									chartAxis.Arrows = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartAxis.Arrows.IsExpression)
									{
										Validator.ValidateChartAxisArrow(chartAxis.Arrows.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 7:
							{
								char c = localName[2];
								if (c <= 'o')
								{
									if (c != 'g')
									{
										if (c != 'n')
										{
											if (c == 'o')
											{
												if (localName == "CrossAt")
												{
													chartAxis.CrossAt = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												}
											}
										}
										else if (localName == "Minimum")
										{
											chartAxis.Minimum = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
									else if (localName == "LogBase")
									{
										chartAxis.LogBase = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (c != 's')
								{
									if (c != 'v')
									{
										if (c == 'x')
										{
											if (localName == "Maximum")
											{
												chartAxis.Maximum = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											}
										}
									}
									else if (localName == "Reverse")
									{
										chartAxis.Reverse = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
								}
								else if (localName == "Visible")
								{
									chartAxis.Visible = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartAxis.Visible.IsExpression)
									{
										Validator.ValidateChartAutoBool(chartAxis.Visible.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 8:
							{
								char c = localName[2];
								if (c != 'c')
								{
									if (c != 'g')
									{
										if (c == 't')
										{
											if (localName == "Interval")
											{
												chartAxis.Interval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
											}
										}
									}
									else if (localName == "LogScale")
									{
										chartAxis.LogScale = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
								}
								else if (localName == "Location")
								{
									chartAxis.Location = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartAxis.Location.IsExpression)
									{
										Validator.ValidateChartAxisLocation(chartAxis.Location.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 10:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'I')
									{
										if (localName == "Interlaced")
										{
											chartAxis.Interlaced = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "HideLabels")
								{
									chartAxis.HideLabels = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 11:
							{
								char c = localName[1];
								if (c != 'a')
								{
									if (c != 'i')
									{
										if (c == 'n')
										{
											if (localName == "IncludeZero")
											{
												chartAxis.IncludeZero = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "MinFontSize")
									{
										chartAxis.MinFontSize = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!chartAxis.MinFontSize.IsExpression)
										{
											PublishingValidator.ValidateSize(chartAxis.MinFontSize, Validator.FontSizeMin, Validator.FontSizeMax, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
										}
									}
								}
								else if (localName == "MaxFontSize")
								{
									chartAxis.MaxFontSize = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartAxis.MaxFontSize.IsExpression)
									{
										PublishingValidator.ValidateSize(chartAxis.MaxFontSize, Validator.FontSizeMin, Validator.FontSizeMax, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
									}
								}
								break;
							}
							case 12:
							{
								char c = localName[0];
								if (c != 'I')
								{
									if (c == 'O')
									{
										if (localName == "OffsetLabels")
										{
											chartAxis.OffsetLabels = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "IntervalType")
								{
									chartAxis.IntervalType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartAxis.IntervalType.IsExpression)
									{
										Validator.ValidateChartIntervalType(chartAxis.IntervalType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 13:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'L')
									{
										if (localName == "LabelInterval")
										{
											chartAxis.LabelInterval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "HideEndLabels")
								{
									chartAxis.HideEndLabels = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 14:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'I')
									{
										if (localName == "IntervalOffset")
										{
											chartAxis.IntervalOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
								}
								else if (localName == "ChartAxisTitle")
								{
									chartAxis.Title = this.ReadChartAxisTitle(chart, context);
								}
								break;
							}
							case 15:
							{
								char c = localName[7];
								if (c <= 'W')
								{
									if (c != 'F')
									{
										if (c == 'W')
										{
											if (localName == "PreventWordWrap")
											{
												chartAxis.PreventWordWrap = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "PreventFontGrow")
									{
										chartAxis.PreventFontGrow = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
								}
								else if (c != 'c')
								{
									if (c == 'r')
									{
										if (localName == "ChartStripLines")
										{
											chartAxis.StripLines = this.ReadChartStripLines(chart, context);
										}
									}
								}
								else if (localName == "InterlacedColor")
								{
									chartAxis.InterlacedColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartAxis.InterlacedColor.IsExpression)
									{
										PublishingValidator.ValidateColor(chartAxis.InterlacedColor, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
									}
								}
								break;
							}
							case 16:
								if (localName == "CustomProperties")
								{
									chartAxis.CustomProperties = this.ReadCustomProperties(context);
								}
								break;
							case 17:
							{
								char c = localName[0];
								if (c != 'L')
								{
									if (c == 'P')
									{
										if (localName == "PreventFontShrink")
										{
											chartAxis.PreventFontShrink = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "LabelIntervalType")
								{
									chartAxis.LabelIntervalType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartAxis.LabelIntervalType.IsExpression)
									{
										Validator.ValidateChartIntervalType(chartAxis.LabelIntervalType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 18:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c != 'I')
									{
										if (c == 'P')
										{
											if (localName == "PreventLabelOffset")
											{
												chartAxis.PreventLabelOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "IntervalOffsetType")
									{
										chartAxis.IntervalOffsetType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!chartAxis.IntervalOffsetType.IsExpression)
										{
											Validator.ValidateChartIntervalType(chartAxis.IntervalOffsetType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "AllowLabelRotation")
								{
									chartAxis.AllowLabelRotation = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartAxis.AllowLabelRotation.IsExpression)
									{
										Validator.ValidateChartAxisLabelRotation(chartAxis.AllowLabelRotation.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 19:
							{
								char c = localName[6];
								if (c <= 'i')
								{
									if (c != 'a')
									{
										if (c == 'i')
										{
											if (!(localName == "ChartMinorTickMarks"))
											{
												if (localName == "ChartMinorGridLines")
												{
													chartAxis.MinorGridLines = this.ReadGridLines(chart, context, false);
												}
											}
											else
											{
												chartAxis.MinorTickMarks = this.ReadChartTickMarks(chart, context, false);
											}
										}
									}
									else if (!(localName == "ChartMajorTickMarks"))
									{
										if (localName == "ChartMajorGridLines")
										{
											chartAxis.MajorGridLines = this.ReadGridLines(chart, context, true);
										}
									}
									else
									{
										chartAxis.MajorTickMarks = this.ReadChartTickMarks(chart, context, true);
									}
								}
								else if (c != 'n')
								{
									if (c == 'x')
									{
										if (localName == "ChartAxisScaleBreak")
										{
											chartAxis.AxisScaleBreak = this.ReadChartAxisScaleBreak(chart, context);
										}
									}
								}
								else if (localName == "LabelIntervalOffset")
								{
									chartAxis.LabelIntervalOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 20:
								if (localName == "VariableAutoInterval")
								{
									chartAxis.VariableAutoInterval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 21:
							{
								char c = localName[0];
								if (c != 'L')
								{
									if (c == 'M')
									{
										if (localName == "MarksAlwaysAtPlotEdge")
										{
											chartAxis.MarksAlwaysAtPlotEdge = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "LabelsAutoFitDisabled")
								{
									chartAxis.LabelsAutoFitDisabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 23:
								if (localName == "LabelIntervalOffsetType")
								{
									chartAxis.LabelIntervalOffsetType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartAxis.LabelIntervalOffsetType.IsExpression)
									{
										Validator.ValidateChartIntervalType(chartAxis.LabelIntervalOffsetType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartAxis;
		}

		// Token: 0x060023B7 RID: 9143 RVA: 0x0009A664 File Offset: 0x00098864
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxisScaleBreak ReadChartAxisScaleBreak(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxisScaleBreak chartAxisScaleBreak = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxisScaleBreak(chart);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartAxisScaleBreak" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							if (length <= 11)
							{
								if (length != 5)
								{
									if (length != 7)
									{
										if (length == 11)
										{
											if (localName == "IncludeZero")
											{
												chartAxisScaleBreak.IncludeZero = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												if (!chartAxisScaleBreak.IncludeZero.IsExpression)
												{
													Validator.ValidateChartAutoBool(chartAxisScaleBreak.IncludeZero.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
												}
											}
										}
									}
									else
									{
										char c = localName[0];
										if (c != 'E')
										{
											if (c == 'S')
											{
												if (localName == "Spacing")
												{
													chartAxisScaleBreak.Spacing = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
												}
											}
										}
										else if (localName == "Enabled")
										{
											chartAxisScaleBreak.Enabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Chart, false);
									chartAxisScaleBreak.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
							}
							else if (length != 13)
							{
								if (length != 17)
								{
									if (length == 25)
									{
										if (localName == "CollapsibleSpaceThreshold")
										{
											chartAxisScaleBreak.CollapsibleSpaceThreshold = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
										}
									}
								}
								else if (localName == "MaxNumberOfBreaks")
								{
									chartAxisScaleBreak.MaxNumberOfBreaks = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
							}
							else if (localName == "BreakLineType")
							{
								chartAxisScaleBreak.BreakLineType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								if (!chartAxisScaleBreak.BreakLineType.IsExpression)
								{
									Validator.ValidateChartBreakLineType(chartAxisScaleBreak.BreakLineType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
								}
							}
						}
					}
				}
				while (!flag);
			}
			return chartAxisScaleBreak;
		}

		// Token: 0x060023B8 RID: 9144 RVA: 0x0009A938 File Offset: 0x00098B38
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartFormulaParameter> ReadChartFormulaParameters(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries chartDerivedSeries, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartFormulaParameter> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartFormulaParameter>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartFormulaParameters")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartFormulaParameter")
					{
						list.Add(this.ReadChartFormulaParameter(chart, chartDerivedSeries, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023B9 RID: 9145 RVA: 0x0009A9CC File Offset: 0x00098BCC
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartFormulaParameter ReadChartFormulaParameter(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries chartDerivedSeries, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartFormulaParameter chartFormulaParameter = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartFormulaParameter(chart, chartDerivedSeries);
			chartFormulaParameter.FormulaParameterName = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "ChartFormulaParameter", Microsoft.ReportingServices.ReportProcessing.ObjectType.Chart, chart.Name, chartFormulaParameter.FormulaParameterName, context.ErrorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartFormulaParameter" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Value"))
						{
							if (localName == "Source")
							{
								chartFormulaParameter.Source = this.m_reader.ReadString();
							}
						}
						else
						{
							chartFormulaParameter.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
						}
					}
				}
				while (!flag);
			}
			return chartFormulaParameter;
		}

		// Token: 0x060023BA RID: 9146 RVA: 0x0009AAC8 File Offset: 0x00098CC8
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartNoMoveDirections ReadChartNoMoveDirections(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeries chartSeries, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartNoMoveDirections chartNoMoveDirections = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartNoMoveDirections(chart, chartSeries);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartNoMoveDirections" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 2:
								if (localName == "Up")
								{
									chartNoMoveDirections.Up = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 4:
							{
								char c = localName[0];
								if (c != 'D')
								{
									if (c == 'L')
									{
										if (localName == "Left")
										{
											chartNoMoveDirections.Left = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "Down")
								{
									chartNoMoveDirections.Down = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 5:
								if (localName == "Right")
								{
									chartNoMoveDirections.Right = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 6:
								if (localName == "UpLeft")
								{
									chartNoMoveDirections.UpLeft = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 7:
								if (localName == "UpRight")
								{
									chartNoMoveDirections.UpRight = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 8:
								if (localName == "DownLeft")
								{
									chartNoMoveDirections.DownLeft = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 9:
								if (localName == "DownRight")
								{
									chartNoMoveDirections.DownRight = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartNoMoveDirections;
		}

		// Token: 0x060023BB RID: 9147 RVA: 0x0009AD30 File Offset: 0x00098F30
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumn ReadChartLegendColumn(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumn chartLegendColumn = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumn(chart, chart.GenerateActionOwnerID());
			chartLegendColumn.LegendColumnName = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "ChartLegendColumn", Microsoft.ReportingServices.ReportProcessing.ObjectType.Chart, chart.Name, chartLegendColumn.LegendColumnName, context.ErrorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartLegendColumn" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'V')
									{
										if (localName == "Value")
										{
											chartLegendColumn.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Chart, false);
									chartLegendColumn.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
								break;
							}
							case 6:
								if (localName == "Header")
								{
									chartLegendColumn.Header = this.ReadChartLegendColumnHeader(chart, context);
								}
								break;
							case 7:
								if (localName == "ToolTip")
								{
									chartLegendColumn.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
							case 9:
							case 11:
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'C')
									{
										if (localName == "ColumnType")
										{
											chartLegendColumn.ColumnType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartLegendColumn.ColumnType.IsExpression)
											{
												Validator.ValidateChartColumnType(chartLegendColumn.ColumnType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "ActionInfo")
								{
									chartLegendColumn.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							}
							case 12:
							{
								char c = localName[1];
								if (c != 'a')
								{
									if (c == 'i')
									{
										if (localName == "MinimumWidth")
										{
											chartLegendColumn.MinimumWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartLegendColumn.MinimumWidth.IsExpression)
											{
												PublishingValidator.ValidateSize(chartLegendColumn.MinimumWidth, Validator.NormalMin, Validator.NormalMax, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
											}
										}
									}
								}
								else if (localName == "MaximumWidth")
								{
									chartLegendColumn.MaximumWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartLegendColumn.MaximumWidth.IsExpression)
									{
										PublishingValidator.ValidateSize(chartLegendColumn.MaximumWidth, Validator.NormalMin, Validator.NormalMax, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
									}
								}
								break;
							}
							default:
								if (length != 17)
								{
									if (length == 18)
									{
										if (localName == "SeriesSymbolHeight")
										{
											chartLegendColumn.SeriesSymbolHeight = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
										}
									}
								}
								else if (localName == "SeriesSymbolWidth")
								{
									chartLegendColumn.SeriesSymbolWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartLegendColumn;
		}

		// Token: 0x060023BC RID: 9148 RVA: 0x0009B16C File Offset: 0x0009936C
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartElementPosition ReadChartElementPosition(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, string chartElementPositionName)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartElementPosition chartElementPosition = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartElementPosition(chart);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (chartElementPositionName == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Top"))
						{
							if (!(localName == "Left"))
							{
								if (!(localName == "Height"))
								{
									if (localName == "Width")
									{
										chartElementPosition.Width = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else
								{
									chartElementPosition.Height = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
							}
							else
							{
								chartElementPosition.Left = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
							}
						}
						else
						{
							chartElementPosition.Top = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
						}
					}
				}
				while (!flag);
			}
			return chartElementPosition;
		}

		// Token: 0x060023BD RID: 9149 RVA: 0x0009B290 File Offset: 0x00099490
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartSmartLabel ReadChartSmartLabel(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeries chartSeries, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartSmartLabel chartSmartLabel = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartSmartLabel(chart, chartSeries);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartSmartLabel" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							if (length != 8)
							{
								switch (length)
								{
								case 12:
									if (localName == "CalloutStyle")
									{
										chartSmartLabel.CalloutStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!chartSmartLabel.CalloutStyle.IsExpression)
										{
											Validator.ValidateChartCalloutStyle(chartSmartLabel.CalloutStyle.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
										}
									}
									break;
								case 14:
									if (localName == "ShowOverlapped")
									{
										chartSmartLabel.ShowOverlapped = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
									break;
								case 16:
								{
									char c = localName[11];
									if (c != 'C')
									{
										if (c != 'S')
										{
											if (c == 'W')
											{
												if (localName == "CalloutLineWidth")
												{
													chartSmartLabel.CalloutLineWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
													if (!chartSmartLabel.CalloutLineWidth.IsExpression)
													{
														PublishingValidator.ValidateSize(chartSmartLabel.CalloutLineWidth, Validator.NormalMin, Validator.NormalMax, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
													}
												}
											}
										}
										else if (localName == "CalloutLineStyle")
										{
											chartSmartLabel.CalloutLineStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartSmartLabel.CalloutLineStyle.IsExpression)
											{
												Validator.ValidateChartCalloutLineStyle(chartSmartLabel.CalloutLineStyle.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
											}
										}
									}
									else if (!(localName == "CalloutBackColor"))
									{
										if (localName == "CalloutLineColor")
										{
											chartSmartLabel.CalloutLineColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartSmartLabel.CalloutLineColor.IsExpression)
											{
												PublishingValidator.ValidateColor(chartSmartLabel.CalloutLineColor, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
											}
										}
									}
									else
									{
										chartSmartLabel.CalloutBackColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!chartSmartLabel.CalloutBackColor.IsExpression)
										{
											PublishingValidator.ValidateColor(chartSmartLabel.CalloutBackColor, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
										}
									}
									break;
								}
								case 17:
								{
									char c = localName[2];
									if (c <= 'n')
									{
										if (c != 'l')
										{
											if (c == 'n')
											{
												if (localName == "MinMovingDistance")
												{
													chartSmartLabel.MinMovingDistance = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
													if (!chartSmartLabel.MinMovingDistance.IsExpression)
													{
														PublishingValidator.ValidateSize(chartSmartLabel.MinMovingDistance, Validator.NormalMin, Validator.NormalMax, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
													}
												}
											}
										}
										else if (localName == "CalloutLineAnchor")
										{
											chartSmartLabel.CalloutLineAnchor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartSmartLabel.CalloutLineAnchor.IsExpression)
											{
												Validator.ValidateChartCalloutLineAnchor(chartSmartLabel.CalloutLineAnchor.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
											}
										}
									}
									else if (c != 'r')
									{
										if (c == 'x')
										{
											if (localName == "MaxMovingDistance")
											{
												chartSmartLabel.MaxMovingDistance = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												if (!chartSmartLabel.MaxMovingDistance.IsExpression)
												{
													PublishingValidator.ValidateSize(chartSmartLabel.MaxMovingDistance, Validator.NormalMin, Validator.NormalMax, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
												}
											}
										}
									}
									else if (localName == "MarkerOverlapping")
									{
										chartSmartLabel.MarkerOverlapping = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
									break;
								}
								case 20:
									if (localName == "AllowOutSidePlotArea")
									{
										chartSmartLabel.AllowOutSidePlotArea = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!chartSmartLabel.AllowOutSidePlotArea.IsExpression)
										{
											Validator.ValidateChartAllowOutsideChartArea(chartSmartLabel.AllowOutSidePlotArea.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
										}
									}
									break;
								case 21:
									if (localName == "ChartNoMoveDirections")
									{
										chartSmartLabel.NoMoveDirections = this.ReadChartNoMoveDirections(chart, chartSeries, context);
									}
									break;
								}
							}
							else if (localName == "Disabled")
							{
								chartSmartLabel.Disabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
							}
						}
					}
				}
				while (!flag);
			}
			return chartSmartLabel;
		}

		// Token: 0x060023BE RID: 9150 RVA: 0x0009B868 File Offset: 0x00099A68
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItemCell ReadChartLegendCustomItemCell(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItemCell chartLegendCustomItemCell = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItemCell(chart, chart.GenerateActionOwnerID());
			chartLegendCustomItemCell.LegendCustomItemCellName = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "ChartLegendCustomItemCell", Microsoft.ReportingServices.ReportProcessing.ObjectType.Chart, chart.Name, chartLegendCustomItemCell.LegendCustomItemCellName, context.ErrorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartLegendCustomItemCell" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 4:
								if (localName == "Text")
								{
									chartLegendCustomItemCell.Text = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Chart, false);
									chartLegendCustomItemCell.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
								break;
							case 7:
								if (localName == "ToolTip")
								{
									chartLegendCustomItemCell.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
							{
								char c = localName[4];
								if (c != 'S')
								{
									if (c == 'T')
									{
										if (localName == "CellType")
										{
											chartLegendCustomItemCell.CellType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartLegendCustomItemCell.CellType.IsExpression)
											{
												Validator.ValidateChartCellType(chartLegendCustomItemCell.CellType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "CellSpan")
								{
									chartLegendCustomItemCell.CellSpan = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							}
							case 9:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'T')
									{
										if (localName == "TopMargin")
										{
											chartLegendCustomItemCell.TopMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
										}
									}
								}
								else if (localName == "Alignment")
								{
									chartLegendCustomItemCell.Alignment = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c != 'I')
									{
										if (c == 'L')
										{
											if (localName == "LeftMargin")
											{
												chartLegendCustomItemCell.LeftMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
											}
										}
									}
									else if (localName == "ImageWidth")
									{
										chartLegendCustomItemCell.ImageWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
									}
								}
								else if (localName == "ActionInfo")
								{
									chartLegendCustomItemCell.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							}
							case 11:
							{
								char c = localName[0];
								if (c != 'I')
								{
									if (c != 'R')
									{
										if (c == 'S')
										{
											if (localName == "SymbolWidth")
											{
												chartLegendCustomItemCell.SymbolWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
											}
										}
									}
									else if (localName == "RightMargin")
									{
										chartLegendCustomItemCell.RightMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
									}
								}
								else if (localName == "ImageHeight")
								{
									chartLegendCustomItemCell.ImageHeight = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							}
							case 12:
							{
								char c = localName[0];
								if (c != 'B')
								{
									if (c == 'S')
									{
										if (localName == "SymbolHeight")
										{
											chartLegendCustomItemCell.SymbolHeight = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
										}
									}
								}
								else if (localName == "BottomMargin")
								{
									chartLegendCustomItemCell.BottomMargin = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							}
							}
						}
					}
				}
				while (!flag);
			}
			return chartLegendCustomItemCell;
		}

		// Token: 0x060023BF RID: 9151 RVA: 0x0009BD88 File Offset: 0x00099F88
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItem ReadChartLegendCustomItem(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItem chartLegendCustomItem = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItem(chart, chart.GenerateActionOwnerID());
			chartLegendCustomItem.LegendCustomItemName = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "ChartLegendCustomItem", Microsoft.ReportingServices.ReportProcessing.ObjectType.Chart, chart.Name, chartLegendCustomItem.LegendCustomItemName, context.ErrorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartLegendCustomItem" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Chart, false);
									chartLegendCustomItem.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
								break;
							case 6:
							case 8:
							case 12:
							case 13:
								break;
							case 7:
								if (localName == "ToolTip")
								{
									chartLegendCustomItem.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 9:
								if (localName == "Separator")
								{
									chartLegendCustomItem.Separator = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartLegendCustomItem.Separator.IsExpression)
									{
										Validator.ValidateChartCustomItemSeparator(chartLegendCustomItem.Separator.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 10:
								if (localName == "ActionInfo")
								{
									chartLegendCustomItem.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							case 11:
								if (localName == "ChartMarker")
								{
									chartLegendCustomItem.Marker = this.ReadChartMarker(chart, null, null, context);
								}
								break;
							case 14:
								if (localName == "SeparatorColor")
								{
									chartLegendCustomItem.SeparatorColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartLegendCustomItem.SeparatorColor.IsExpression)
									{
										PublishingValidator.ValidateColor(chartLegendCustomItem.SeparatorColor, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
									}
								}
								break;
							default:
								if (length == 26)
								{
									if (localName == "ChartLegendCustomItemCells")
									{
										chartLegendCustomItem.LegendCustomItemCells = this.ReadChartLegendCustomItemCells(chart, context);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartLegendCustomItem;
		}

		// Token: 0x060023C0 RID: 9152 RVA: 0x0009C070 File Offset: 0x0009A270
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItemCell> ReadChartLegendCustomItemCells(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItemCell> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItemCell>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartLegendCustomItemCells")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartLegendCustomItemCell")
					{
						list.Add(this.ReadChartLegendCustomItemCell(chart, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023C1 RID: 9153 RVA: 0x0009C100 File Offset: 0x0009A300
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegend ReadChartLegend(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegend chartLegend = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegend(chart);
			chartLegend.LegendName = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "ChartLegend", Microsoft.ReportingServices.ReportProcessing.ObjectType.Chart, chart.Name, chartLegend.LegendName, context.ErrorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartLegend" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Chart, false);
									chartLegend.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
								break;
							case 6:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'L')
									{
										if (localName == "Layout")
										{
											chartLegend.Layout = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "Hidden")
								{
									chartLegend.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 8:
							{
								char c = localName[0];
								if (c != 'P')
								{
									if (c == 'R')
									{
										if (localName == "Reversed")
										{
											chartLegend.Reversed = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartLegend.Reversed.IsExpression)
											{
												Validator.ValidateChartAutoBool(chartLegend.Reversed.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "Position")
								{
									chartLegend.Position = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 11:
							{
								char c = localName[1];
								if (c != 'a')
								{
									if (c == 'i')
									{
										if (localName == "MinFontSize")
										{
											chartLegend.MinFontSize = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartLegend.MinFontSize.IsExpression)
											{
												PublishingValidator.ValidateSize(chartLegend.MinFontSize, Validator.FontSizeMin, Validator.FontSizeMax, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
											}
										}
									}
								}
								else if (localName == "MaxAutoSize")
								{
									chartLegend.MaxAutoSize = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							}
							case 13:
								if (localName == "ColumnSpacing")
								{
									chartLegend.ColumnSpacing = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							case 14:
								if (localName == "InterlacedRows")
								{
									chartLegend.InterlacedRows = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 15:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c != 'D')
									{
										if (c == 'H')
										{
											if (localName == "HeaderSeparator")
											{
												chartLegend.HeaderSeparator = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												if (!chartLegend.HeaderSeparator.IsExpression)
												{
													Validator.ValidateChartCustomItemSeparator(chartLegend.HeaderSeparator.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
												}
											}
										}
									}
									else if (localName == "DockToChartArea")
									{
										chartLegend.DockToChartArea = this.m_reader.ReadString();
									}
								}
								else if (localName == "ColumnSeparator")
								{
									chartLegend.ColumnSeparator = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartLegend.ColumnSeparator.IsExpression)
									{
										Validator.ValidateChartCustomItemSeparator(chartLegend.ColumnSeparator.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 16:
								if (localName == "ChartLegendTitle")
								{
									chartLegend.LegendTitle = this.ReadChartLegendTitle(chart, context);
								}
								break;
							case 17:
								if (localName == "TextWrapThreshold")
								{
									chartLegend.TextWrapThreshold = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							case 18:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'E')
									{
										if (localName == "EquallySpacedItems")
										{
											chartLegend.EquallySpacedItems = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "ChartLegendColumns")
								{
									chartLegend.LegendColumns = this.ReadChartLegendColumns(chart, context);
								}
								break;
							}
							case 19:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c == 'I')
									{
										if (localName == "InterlacedRowsColor")
										{
											chartLegend.InterlacedRowsColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartLegend.InterlacedRowsColor.IsExpression)
											{
												PublishingValidator.ValidateColor(chartLegend.InterlacedRowsColor, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
											}
										}
									}
								}
								else if (localName == "AutoFitTextDisabled")
								{
									chartLegend.AutoFitTextDisabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 20:
							{
								char c = localName[3];
								if (c <= 'k')
								{
									if (c != 'd')
									{
										if (c == 'k')
										{
											if (localName == "DockOutsideChartArea")
											{
												chartLegend.DockOutsideChartArea = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
											}
										}
									}
									else if (localName == "HeaderSeparatorColor")
									{
										chartLegend.HeaderSeparatorColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!chartLegend.HeaderSeparatorColor.IsExpression)
										{
											PublishingValidator.ValidateColor(chartLegend.HeaderSeparatorColor, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
										}
									}
								}
								else if (c != 'r')
								{
									if (c == 'u')
									{
										if (localName == "ColumnSeparatorColor")
										{
											chartLegend.ColumnSeparatorColor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartLegend.ColumnSeparatorColor.IsExpression)
											{
												PublishingValidator.ValidateColor(chartLegend.ColumnSeparatorColor, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
											}
										}
									}
								}
								else if (localName == "ChartElementPosition")
								{
									chartLegend.ChartElementPosition = this.ReadChartElementPosition(chart, context, "ChartElementPosition");
								}
								break;
							}
							case 22:
								if (localName == "ChartLegendCustomItems")
								{
									chartLegend.LegendCustomItems = this.ReadChartLegendCustomItems(chart, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartLegend;
		}

		// Token: 0x060023C2 RID: 9154 RVA: 0x0009C968 File Offset: 0x0009AB68
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumn> ReadChartLegendColumns(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumn> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumn>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartLegendColumns")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartLegendColumn")
					{
						list.Add(this.ReadChartLegendColumn(chart, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023C3 RID: 9155 RVA: 0x0009C9F8 File Offset: 0x0009ABF8
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItem> ReadChartLegendCustomItems(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItem> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItem>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartLegendCustomItems")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartLegendCustomItem")
					{
						list.Add(this.ReadChartLegendCustomItem(chart, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023C4 RID: 9156 RVA: 0x0009CA88 File Offset: 0x0009AC88
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartStripLine> ReadChartStripLines(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartStripLine> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartStripLine>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartStripLines")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartStripLine")
					{
						list.Add(this.ReadChartStripLine(chart, context));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023C5 RID: 9157 RVA: 0x0009CB14 File Offset: 0x0009AD14
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries> ReadChartDerivedSeriesCollection(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "ChartDerivedSeriesCollection")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartDerivedSeries")
					{
						list.Add(this.ReadChartDerivedSeries(chart, context, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023C6 RID: 9158 RVA: 0x0009CBA4 File Offset: 0x0009ADA4
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries ReadChartDerivedSeries(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries chartDerivedSeries = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries(chart);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartDerivedSeries" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "ChartSeries"))
						{
							if (!(localName == "SourceChartSeriesName"))
							{
								if (!(localName == "DerivedSeriesFormula"))
								{
									if (localName == "ChartFormulaParameters")
									{
										chartDerivedSeries.FormulaParameters = this.ReadChartFormulaParameters(chart, chartDerivedSeries, context);
									}
								}
								else
								{
									chartDerivedSeries.DerivedSeriesFormula = (ChartSeriesFormula)Enum.Parse(typeof(ChartSeriesFormula), this.m_reader.ReadString(), false);
								}
							}
							else
							{
								chartDerivedSeries.SourceChartSeriesName = this.m_reader.ReadString();
							}
						}
						else
						{
							chartDerivedSeries.Series = this.ReadChartSeries(chart, chartDerivedSeries, context, ref flag2, nameValidator);
						}
					}
				}
				while (!flag);
			}
			return chartDerivedSeries;
		}

		// Token: 0x060023C7 RID: 9159 RVA: 0x0009CCBC File Offset: 0x0009AEBC
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartStripLine ReadChartStripLine(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartStripLine chartStripLine = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartStripLine(chart, chart.GenerateActionOwnerID());
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartStripLine" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'T')
									{
										if (localName == "Title")
										{
											chartStripLine.Title = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.FilterChartStripLineStyle();
									chartStripLine.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
								break;
							}
							case 7:
								if (localName == "ToolTip")
								{
									chartStripLine.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 8:
								if (localName == "Interval")
								{
									chartStripLine.Interval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'A')
								{
									if (c != 'S')
									{
										if (c == 'T')
										{
											if (localName == "TitleAngle")
											{
												chartStripLine.TitleAngle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
											}
										}
									}
									else if (localName == "StripWidth")
									{
										chartStripLine.StripWidth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
									}
								}
								else if (localName == "ActionInfo")
								{
									chartStripLine.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							}
							case 12:
								if (localName == "IntervalType")
								{
									chartStripLine.IntervalType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartStripLine.IntervalType.IsExpression)
									{
										Validator.ValidateChartIntervalType(chartStripLine.IntervalType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 14:
							{
								char c = localName[0];
								if (c != 'I')
								{
									if (c == 'S')
									{
										if (localName == "StripWidthType")
										{
											chartStripLine.StripWidthType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartStripLine.StripWidthType.IsExpression)
											{
												Validator.ValidateChartIntervalType(chartStripLine.StripWidthType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "IntervalOffset")
								{
									chartStripLine.IntervalOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
								break;
							}
							case 15:
								if (localName == "TextOrientation")
								{
									chartStripLine.TextOrientation = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartStripLine.TextOrientation.IsExpression)
									{
										Validator.ValidateTextOrientations(chartStripLine.TextOrientation.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 18:
								if (localName == "IntervalOffsetType")
								{
									chartStripLine.IntervalOffsetType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartStripLine.IntervalOffsetType.IsExpression)
									{
										Validator.ValidateChartIntervalType(chartStripLine.IntervalOffsetType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartStripLine;
		}

		// Token: 0x060023C8 RID: 9160 RVA: 0x0009D158 File Offset: 0x0009B358
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartGridLines ReadGridLines(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, bool isMajor)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartGridLines chartGridLines = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartGridLines(chart);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ((isMajor && "ChartMajorGridLines" == this.m_reader.LocalName) || (!isMajor && "ChartMinorGridLines" == this.m_reader.LocalName))
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Style"))
						{
							if (!(localName == "Enabled"))
							{
								if (!(localName == "Interval"))
								{
									if (!(localName == "IntervalType"))
									{
										if (!(localName == "IntervalOffset"))
										{
											if (localName == "IntervalOffsetType")
											{
												chartGridLines.IntervalOffsetType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
												if (!chartGridLines.IntervalOffsetType.IsExpression)
												{
													Validator.ValidateChartIntervalType(chartGridLines.IntervalOffsetType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
												}
											}
										}
										else
										{
											chartGridLines.IntervalOffset = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
										}
									}
									else
									{
										chartGridLines.IntervalType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										if (!chartGridLines.IntervalType.IsExpression)
										{
											Validator.ValidateChartIntervalType(chartGridLines.IntervalType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
										}
									}
								}
								else
								{
									chartGridLines.Interval = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context);
								}
							}
							else
							{
								chartGridLines.Enabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							}
						}
						else
						{
							StyleInformation styleInformation = this.ReadStyle(context);
							styleInformation.Filter(StyleOwnerType.Chart, false);
							chartGridLines.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
						}
					}
				}
				while (!flag);
			}
			return chartGridLines;
		}

		// Token: 0x060023C9 RID: 9161 RVA: 0x0009D398 File Offset: 0x0009B598
		private void ReadChartData(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, out bool hasAggregates)
		{
			hasAggregates = false;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartData" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "ChartSeriesCollection"))
						{
							if (localName == "ChartDerivedSeriesCollection")
							{
								chart.DerivedSeriesCollection = this.ReadChartDerivedSeriesCollection(chart, context);
							}
						}
						else
						{
							chart.ChartSeriesCollection = this.ReadChartSeriesCollection(chart, context, ref hasAggregates);
						}
					}
				}
				while (!flag);
			}
			if (chart.DerivedSeriesCollection != null)
			{
				foreach (Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries chartDerivedSeries in chart.DerivedSeriesCollection)
				{
					if (chartDerivedSeries.SourceSeries == null)
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsInvalidSourceSeriesName, Severity.Error, context.ObjectType, context.ObjectName, "SourceChartSeriesName", new string[] { chartDerivedSeries.SourceChartSeriesName });
					}
				}
			}
		}

		// Token: 0x060023CA RID: 9162 RVA: 0x0009D4CC File Offset: 0x0009B6CC
		private ChartSeriesList ReadChartSeriesCollection(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, ref bool hasAggregates)
		{
			DynamicImageObjectUniqueNameValidator dynamicImageObjectUniqueNameValidator = new DynamicImageObjectUniqueNameValidator();
			ChartSeriesList chartSeriesList = new ChartSeriesList();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartSeriesCollection" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartSeries")
					{
						chartSeriesList.Add(this.ReadChartSeries(chart, null, context, ref hasAggregates, dynamicImageObjectUniqueNameValidator));
					}
				}
				while (!flag);
			}
			return chartSeriesList;
		}

		// Token: 0x060023CB RID: 9163 RVA: 0x0009D560 File Offset: 0x0009B760
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartArea ReadChartArea(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartArea chartArea = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartArea(chart);
			chartArea.ChartAreaName = this.m_reader.GetAttribute("Name");
			nameValidator.Validate(Severity.Error, "ChartArea", Microsoft.ReportingServices.ReportProcessing.ObjectType.Chart, chart.Name, chartArea.ChartAreaName, context.ErrorContext);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartArea" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							if (length != 5)
							{
								if (length != 6)
								{
									switch (length)
									{
									case 14:
									{
										char c = localName[5];
										if (c != 'A')
										{
											if (c == 'V')
											{
												if (localName == "ChartValueAxes")
												{
													chartArea.ValueAxes = this.ReadValueAxes(chart, context);
												}
											}
										}
										else if (localName == "ChartAlignType")
										{
											chartArea.ChartAlignType = this.ReadChartAlignType(chart, context);
										}
										break;
									}
									case 16:
										if (localName == "AlignOrientation")
										{
											chartArea.AlignOrientation = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
										break;
									case 17:
										if (localName == "ChartCategoryAxes")
										{
											chartArea.CategoryAxes = this.ReadCategoryAxes(chart, context);
										}
										break;
									case 18:
										if (localName == "AlignWithChartArea")
										{
											chartArea.AlignWithChartArea = this.m_reader.ReadString();
										}
										break;
									case 20:
									{
										char c = localName[0];
										if (c != 'C')
										{
											if (c == 'E')
											{
												if (localName == "EquallySizedAxesFont")
												{
													chartArea.EquallySizedAxesFont = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
												}
											}
										}
										else if (localName == "ChartElementPosition")
										{
											chartArea.ChartElementPosition = this.ReadChartElementPosition(chart, context, "ChartElementPosition");
										}
										break;
									}
									case 21:
										if (localName == "ChartThreeDProperties")
										{
											chartArea.ThreeDProperties = this.ReadThreeDProperties(chart, context);
										}
										break;
									case 22:
										if (localName == "ChartInnerPlotPosition")
										{
											chartArea.ChartInnerPlotPosition = this.ReadChartElementPosition(chart, context, "ChartInnerPlotPosition");
										}
										break;
									}
								}
								else if (localName == "Hidden")
								{
									chartArea.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
							}
							else if (localName == "Style")
							{
								StyleInformation styleInformation = this.ReadStyle(context);
								styleInformation.Filter(StyleOwnerType.Chart, false);
								chartArea.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
							}
						}
					}
				}
				while (!flag);
			}
			return chartArea;
		}

		// Token: 0x060023CC RID: 9164 RVA: 0x0009D8B0 File Offset: 0x0009BAB0
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartAlignType ReadChartAlignType(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartAlignType chartAlignType = null;
			if (!this.m_reader.IsEmptyElement)
			{
				chartAlignType = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartAlignType(chart);
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartAlignType" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Position"))
						{
							if (!(localName == "InnerPlotPosition"))
							{
								if (!(localName == "AxesView"))
								{
									if (localName == "Cursor")
									{
										chartAlignType.Cursor = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
								}
								else
								{
									chartAlignType.AxesView = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
							}
							else
							{
								chartAlignType.InnerPlotPosition = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
							}
						}
						else
						{
							chartAlignType.Position = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
						}
					}
				}
				while (!flag);
			}
			return chartAlignType;
		}

		// Token: 0x060023CD RID: 9165 RVA: 0x0009D9D8 File Offset: 0x0009BBD8
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeries ReadChartSeries(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries chartDerivedSeries, PublishingContextStruct context, ref bool hasAggregates, DynamicImageObjectUniqueNameValidator nameValidator)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeries chartSeries = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeries(chart, chartDerivedSeries, this.GenerateID());
			chartSeries.Name = this.m_reader.GetAttribute("Name");
			if (!string.IsNullOrEmpty(chartSeries.Name))
			{
				nameValidator.Validate(Severity.Error, "ChartSeries", Microsoft.ReportingServices.ReportProcessing.ObjectType.Chart, chart.Name, chartSeries.Name, context.ErrorContext);
			}
			if (!this.m_reader.IsEmptyElement)
			{
				string text = null;
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartSeries" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 4:
								if (localName == "Type")
								{
									chartSeries.Type = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartSeries.Type.IsExpression)
									{
										Validator.ValidateChartSeriesType(chartSeries.Type.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									if (chartDerivedSeries != null)
									{
										styleInformation.Filter(StyleOwnerType.Chart, false);
									}
									else
									{
										styleInformation.FilterChartSeriesStyle();
									}
									chartSeries.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
								break;
							case 6:
								if (localName == "Hidden")
								{
									chartSeries.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 7:
								if (localName == "Subtype")
								{
									Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!expressionInfo.IsExpression)
									{
										Validator.ValidateChartSeriesSubtype(expressionInfo.StringValue, context.ErrorContext, context, this.m_reader.LocalName, this.m_reader.NamespaceURI);
									}
									if (text == null || RdlNamespaceComparer.Instance.Compare(this.m_reader.NamespaceURI, text) > 0)
									{
										chartSeries.Subtype = expressionInfo;
										text = this.m_reader.NamespaceURI;
									}
								}
								break;
							case 10:
								if (localName == "LegendName")
								{
									chartSeries.LegendName = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 11:
								if (localName == "ChartMarker")
								{
									if (chartDerivedSeries != null)
									{
										chartSeries.Marker = this.ReadChartMarker(chart, chartSeries, null, context);
									}
								}
								break;
							case 13:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'V')
									{
										if (localName == "ValueAxisName")
										{
											chartSeries.ValueAxisName = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "ChartAreaName")
								{
									chartSeries.ChartAreaName = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 14:
								if (localName == "ChartDataLabel")
								{
									if (chartDerivedSeries != null)
									{
										chartSeries.DataLabel = this.ReadChartDataLabel(chart, chartSeries, null, context);
									}
								}
								break;
							case 15:
							{
								char c = localName[5];
								if (c != 'D')
								{
									if (c == 'S')
									{
										if (localName == "ChartSmartLabel")
										{
											chartSeries.ChartSmartLabel = this.ReadChartSmartLabel(chart, chartSeries, context);
										}
									}
								}
								else if (localName == "ChartDataPoints")
								{
									chartSeries.DataPoints = this.ReadChartDataPoints(chart, context, ref hasAggregates);
								}
								break;
							}
							case 16:
							{
								char c = localName[1];
								if (c != 'a')
								{
									if (c != 'h')
									{
										if (c == 'u')
										{
											if (localName == "CustomProperties")
											{
												chartSeries.CustomProperties = this.ReadCustomProperties(context);
											}
										}
									}
									else if (localName == "ChartEmptyPoints")
									{
										chartSeries.EmptyPoints = this.ReadChartEmptyPoints(chart, chartSeries, context);
									}
								}
								else if (localName == "CategoryAxisName")
								{
									chartSeries.CategoryAxisName = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 17:
								if (localName == "ChartItemInLegend")
								{
									chartSeries.ChartItemInLegend = this.ReadChartItemInLegend(chart, chartSeries, null, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartSeries;
		}

		// Token: 0x060023CE RID: 9166 RVA: 0x0009DEF0 File Offset: 0x0009C0F0
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPointList ReadChartDataPoints(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, ref bool hasAggregates)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPointList chartDataPointList = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPointList();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartDataPoints" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartDataPoint")
					{
						chartDataPointList.Add(this.ReadChartDataPoint(chart, context, ref hasAggregates));
					}
				}
				while (!flag);
			}
			return chartDataPointList;
		}

		// Token: 0x060023CF RID: 9167 RVA: 0x0009DF7C File Offset: 0x0009C17C
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPoint ReadChartDataPoint(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context, ref bool hasAggregates)
		{
			context.Location |= LocationFlags.InDynamicTablixCell;
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPoint chartDataPoint = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPoint(this.GenerateID(), chart);
			this.m_aggregateHolderList.Add(chartDataPoint);
			this.m_runningValueHolderList.Add(chartDataPoint);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				string text = null;
				List<IdcRelationship> list = null;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartDataPoint" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Chart, false);
									chartDataPoint.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
								break;
							case 7:
								if (localName == "ToolTip")
								{
									chartDataPoint.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 9:
								if (localName == "AxisLabel")
								{
									chartDataPoint.AxisLabel = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 10:
								if (localName == "ActionInfo")
								{
									chartDataPoint.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							case 11:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'D')
									{
										if (localName == "DataSetName")
										{
											text = this.m_reader.ReadString();
										}
									}
								}
								else if (localName == "ChartMarker")
								{
									chartDataPoint.Marker = this.ReadChartMarker(chart, null, chartDataPoint, context);
								}
								break;
							}
							case 13:
								if (localName == "Relationships")
								{
									list = this.ReadRelationships(context);
								}
								break;
							case 14:
								if (localName == "ChartDataLabel")
								{
									chartDataPoint.DataLabel = this.ReadChartDataLabel(chart, null, chartDataPoint, context);
								}
								break;
							case 15:
								if (localName == "DataElementName")
								{
									chartDataPoint.DataElementName = this.m_reader.ReadString();
								}
								break;
							case 16:
								if (localName == "CustomProperties")
								{
									chartDataPoint.CustomProperties = this.ReadCustomProperties(context);
								}
								break;
							case 17:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'D')
									{
										if (localName == "DataElementOutput")
										{
											chartDataPoint.DataElementOutput = this.ReadDataElementOutput();
										}
									}
								}
								else if (localName == "ChartItemInLegend")
								{
									chartDataPoint.ItemInLegend = this.ReadChartItemInLegend(chart, null, chartDataPoint, context);
								}
								break;
							}
							case 20:
								if (localName == "ChartDataPointValues")
								{
									chartDataPoint.DataPointValues = this.ReadChartDataPointValues(chart, chartDataPoint, context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
				chartDataPoint.DataScopeInfo.SetRelationship(text, list);
			}
			return chartDataPoint;
		}

		// Token: 0x060023D0 RID: 9168 RVA: 0x0009E32C File Offset: 0x0009C52C
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartMarker ReadChartMarker(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeries series, Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPoint dataPoint, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartMarker chartMarker;
			if (dataPoint != null)
			{
				chartMarker = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartMarker(chart, dataPoint);
			}
			else
			{
				chartMarker = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartMarker(chart, series);
			}
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartMarker" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Type"))
						{
							if (!(localName == "Size"))
							{
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Chart, false);
									chartMarker.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
							}
							else
							{
								chartMarker.Size = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								if (!chartMarker.Size.IsExpression)
								{
									PublishingValidator.ValidateSize(chartMarker.Size, Validator.NormalMin, Validator.NormalMax, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext);
								}
							}
						}
						else
						{
							chartMarker.Type = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							if (!chartMarker.Type.IsExpression)
							{
								Validator.ValidateChartMarkerType(chartMarker.Type.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
							}
						}
					}
				}
				while (!flag);
			}
			return chartMarker;
		}

		// Token: 0x060023D1 RID: 9169 RVA: 0x0009E4E0 File Offset: 0x0009C6E0
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataLabel ReadChartDataLabel(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeries series, Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPoint dataPoint, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataLabel chartDataLabel;
			if (dataPoint != null)
			{
				chartDataLabel = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataLabel(chart, dataPoint);
			}
			else
			{
				chartDataLabel = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataLabel(chart, series);
			}
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartDataLabel" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 5:
							{
								char c = localName[0];
								if (c != 'L')
								{
									if (c == 'S')
									{
										if (localName == "Style")
										{
											StyleInformation styleInformation = this.ReadStyle(context);
											styleInformation.Filter(StyleOwnerType.Chart, false);
											chartDataLabel.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
										}
									}
								}
								else if (localName == "Label")
								{
									chartDataLabel.Label = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 6:
							case 9:
								break;
							case 7:
							{
								char c = localName[0];
								if (c != 'T')
								{
									if (c == 'V')
									{
										if (localName == "Visible")
										{
											chartDataLabel.Visible = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
										}
									}
								}
								else if (localName == "ToolTip")
								{
									chartDataLabel.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 8:
							{
								char c = localName[0];
								if (c != 'P')
								{
									if (c == 'R')
									{
										if (localName == "Rotation")
										{
											chartDataLabel.Rotation = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
										}
									}
								}
								else if (localName == "Position")
								{
									chartDataLabel.Position = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartDataLabel.Position.IsExpression)
									{
										Validator.ValidateChartDataLabelPosition(chartDataLabel.Position.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
							case 10:
								if (localName == "ActionInfo")
								{
									bool flag2;
									chartDataLabel.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							default:
								if (length == 15)
								{
									if (localName == "UseValueAsLabel")
									{
										chartDataLabel.UseValueAsLabel = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartDataLabel;
		}

		// Token: 0x060023D2 RID: 9170 RVA: 0x0009E7EC File Offset: 0x0009C9EC
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadChartDataPointFormatExpressionValues(string propertyName, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = null;
			if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.CellLevelFormatting))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, propertyName, Array.Empty<string>());
			}
			else
			{
				expressionInfo = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
			}
			return expressionInfo;
		}

		// Token: 0x060023D3 RID: 9171 RVA: 0x0009E850 File Offset: 0x0009CA50
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPointValues ReadChartDataPointValues(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPoint dataPoint, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPointValues chartDataPointValues = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPointValues(chart, dataPoint);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartDataPointValues" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 1:
							{
								char c = localName[0];
								if (c != 'X')
								{
									if (c == 'Y')
									{
										chartDataPointValues.Y = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
								else
								{
									chartDataPointValues.X = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 2:
							case 8:
							case 9:
							case 11:
							case 12:
							case 14:
							case 15:
							case 16:
								break;
							case 3:
							{
								char c = localName[0];
								if (c != 'E')
								{
									if (c == 'L')
									{
										if (localName == "Low")
										{
											chartDataPointValues.Low = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
										}
									}
								}
								else if (localName == "End")
								{
									chartDataPointValues.End = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 4:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c != 'M')
									{
										if (c == 'S')
										{
											if (localName == "Size")
											{
												chartDataPointValues.Size = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											}
										}
									}
									else if (localName == "Mean")
									{
										chartDataPointValues.Mean = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
								else if (localName == "High")
								{
									chartDataPointValues.High = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 5:
								if (localName == "Start")
								{
									chartDataPointValues.Start = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 6:
								if (localName == "Median")
								{
									chartDataPointValues.Median = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 7:
							{
								char c = localName[6];
								if (c != 'X')
								{
									if (c == 'Y')
									{
										if (localName == "FormatY")
										{
											Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadChartDataPointFormatExpressionValues("FormatY", context);
											if (expressionInfo != null)
											{
												chartDataPointValues.FormatY = expressionInfo;
											}
										}
									}
								}
								else if (localName == "FormatX")
								{
									Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo2 = this.ReadChartDataPointFormatExpressionValues("FormatX", context);
									if (expressionInfo2 != null)
									{
										chartDataPointValues.FormatX = expressionInfo2;
									}
								}
								break;
							}
							case 10:
							{
								char c = localName[9];
								if (c != 'X')
								{
									if (c != 'Y')
									{
										if (c == 'e')
										{
											if (localName == "FormatSize")
											{
												Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo3 = this.ReadChartDataPointFormatExpressionValues("FormatSize", context);
												if (expressionInfo3 != null)
												{
													chartDataPointValues.FormatSize = expressionInfo3;
												}
											}
										}
									}
									else if (localName == "HighlightY")
									{
										chartDataPointValues.HighlightY = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
								else if (localName == "HighlightX")
								{
									chartDataPointValues.HighlightX = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							}
							case 13:
								if (localName == "HighlightSize")
								{
									chartDataPointValues.HighlightSize = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 17:
							{
								char c = localName[16];
								if (c != 'X')
								{
									if (c == 'Y')
									{
										if (localName == "CurrencyLanguageY")
										{
											Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo4 = this.ReadChartDataPointFormatExpressionValues("CurrencyLanguageY", context);
											if (expressionInfo4 != null)
											{
												chartDataPointValues.CurrencyLanguageY = expressionInfo4;
											}
										}
									}
								}
								else if (localName == "CurrencyLanguageX")
								{
									Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo5 = this.ReadChartDataPointFormatExpressionValues("CurrencyLanguageX", context);
									if (expressionInfo5 != null)
									{
										chartDataPointValues.CurrencyLanguageX = expressionInfo5;
									}
								}
								break;
							}
							default:
								if (length == 20)
								{
									if (localName == "CurrencyLanguageSize")
									{
										Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo6 = this.ReadChartDataPointFormatExpressionValues("CurrencyLanguageSize", context);
										if (expressionInfo6 != null)
										{
											chartDataPointValues.CurrencyLanguageSize = expressionInfo6;
										}
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartDataPointValues;
		}

		// Token: 0x060023D4 RID: 9172 RVA: 0x0009EDA4 File Offset: 0x0009CFA4
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartThreeDProperties ReadThreeDProperties(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartThreeDProperties chartThreeDProperties = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartThreeDProperties(chart);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartThreeDProperties" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 7:
							{
								char c = localName[0];
								if (c != 'E')
								{
									if (c == 'S')
									{
										if (localName == "Shading")
										{
											chartThreeDProperties.Shading = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
											if (!chartThreeDProperties.Shading.IsExpression)
											{
												Validator.ValidateChartThreeDShading(chartThreeDProperties.Shading.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
											}
										}
									}
								}
								else if (localName == "Enabled")
								{
									chartThreeDProperties.Enabled = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							}
							case 8:
							{
								char c = localName[0];
								if (c != 'G')
								{
									if (c == 'R')
									{
										if (localName == "Rotation")
										{
											chartThreeDProperties.Rotation = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
										}
									}
								}
								else if (localName == "GapDepth")
								{
									chartThreeDProperties.GapDepth = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							}
							case 9:
								if (localName == "Clustered")
								{
									chartThreeDProperties.Clustered = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
								}
								break;
							case 10:
								if (localName == "DepthRatio")
								{
									chartThreeDProperties.DepthRatio = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							case 11:
							{
								char c = localName[0];
								if (c != 'I')
								{
									if (c == 'P')
									{
										if (localName == "Perspective")
										{
											chartThreeDProperties.Perspective = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
										}
									}
								}
								else if (localName == "Inclination")
								{
									chartThreeDProperties.Inclination = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							}
							case 13:
								if (localName == "WallThickness")
								{
									chartThreeDProperties.WallThickness = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context);
								}
								break;
							case 14:
								if (localName == "ProjectionMode")
								{
									chartThreeDProperties.ProjectionMode = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									if (!chartThreeDProperties.ProjectionMode.IsExpression)
									{
										Validator.ValidateChartThreeDProjectionMode(chartThreeDProperties.ProjectionMode.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartThreeDProperties;
		}

		// Token: 0x060023D5 RID: 9173 RVA: 0x0009F118 File Offset: 0x0009D318
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartCustomPaletteColor> ReadChartCustomPaletteColors(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartCustomPaletteColor> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ChartCustomPaletteColor>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartCustomPaletteColors" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartCustomPaletteColor")
					{
						list.Add(new Microsoft.ReportingServices.ReportIntermediateFormat.ChartCustomPaletteColor(chart)
						{
							Color = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context)
						});
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x060023D6 RID: 9174 RVA: 0x0009F1C4 File Offset: 0x0009D3C4
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataValueList ReadChartCodeParameters(PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.DataValueList dataValueList = new Microsoft.ReportingServices.ReportIntermediateFormat.DataValueList();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				int num = 0;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("CustomProperties" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "ChartCodeParameter")
					{
						dataValueList.Add(this.ReadDataValue(false, true, ++num, ref flag2, context));
					}
				}
				while (!flag);
			}
			return dataValueList;
		}

		// Token: 0x060023D7 RID: 9175 RVA: 0x0009F260 File Offset: 0x0009D460
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartItemInLegend ReadChartItemInLegend(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeries series, Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPoint dataPoint, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartItemInLegend chartItemInLegend;
			if (dataPoint != null)
			{
				chartItemInLegend = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartItemInLegend(chart, dataPoint);
			}
			else
			{
				chartItemInLegend = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartItemInLegend(chart, series);
			}
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartItemInLegend" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "ActionInfo"))
						{
							if (!(localName == "LegendText"))
							{
								if (!(localName == "ToolTip"))
								{
									if (localName == "Hidden")
									{
										chartItemInLegend.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context);
									}
								}
								else
								{
									chartItemInLegend.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
							}
							else
							{
								chartItemInLegend.LegendText = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							}
						}
						else
						{
							chartItemInLegend.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
						}
					}
				}
				while (!flag);
			}
			return chartItemInLegend;
		}

		// Token: 0x060023D8 RID: 9176 RVA: 0x0009F398 File Offset: 0x0009D598
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartEmptyPoints ReadChartEmptyPoints(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeries series, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartEmptyPoints chartEmptyPoints = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartEmptyPoints(chart, series);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				bool flag2 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartEmptyPoints" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context);
									styleInformation.Filter(StyleOwnerType.Chart, false);
									chartEmptyPoints.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
								}
								break;
							case 7:
								if (localName == "ToolTip")
								{
									chartEmptyPoints.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 9:
								if (localName == "AxisLabel")
								{
									chartEmptyPoints.AxisLabel = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								}
								break;
							case 10:
								if (localName == "ActionInfo")
								{
									chartEmptyPoints.Action = this.ReadActionInfo(context, StyleOwnerType.Chart, out flag2);
								}
								break;
							case 11:
								if (localName == "ChartMarker")
								{
									chartEmptyPoints.Marker = this.ReadChartMarker(chart, series, null, context);
								}
								break;
							case 14:
								if (localName == "ChartDataLabel")
								{
									chartEmptyPoints.DataLabel = this.ReadChartDataLabel(chart, series, null, context);
								}
								break;
							case 16:
								if (localName == "CustomProperties")
								{
									chartEmptyPoints.CustomProperties = this.ReadCustomProperties(context);
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return chartEmptyPoints;
		}

		// Token: 0x060023D9 RID: 9177 RVA: 0x0009F5C4 File Offset: 0x0009D7C4
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumnHeader ReadChartLegendColumnHeader(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumnHeader chartLegendColumnHeader = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumnHeader(chart);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartLegendColumnHeader" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Style"))
						{
							if (localName == "Value")
							{
								chartLegendColumnHeader.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							}
						}
						else
						{
							StyleInformation styleInformation = this.ReadStyle(context);
							styleInformation.Filter(StyleOwnerType.Chart, false);
							chartLegendColumnHeader.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
						}
					}
				}
				while (!flag);
			}
			return chartLegendColumnHeader;
		}

		// Token: 0x060023DA RID: 9178 RVA: 0x0009F6B8 File Offset: 0x0009D8B8
		private Microsoft.ReportingServices.ReportIntermediateFormat.ChartBorderSkin ReadChartBorderSkin(Microsoft.ReportingServices.ReportIntermediateFormat.Chart chart, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ChartBorderSkin chartBorderSkin = new Microsoft.ReportingServices.ReportIntermediateFormat.ChartBorderSkin(chart);
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ChartBorderSkin" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Style"))
						{
							if (localName == "ChartBorderSkinType")
							{
								chartBorderSkin.BorderSkinType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
								if (!chartBorderSkin.BorderSkinType.IsExpression)
								{
									Validator.ValidateChartBorderSkinType(chartBorderSkin.BorderSkinType.StringValue, context.ErrorContext, context, this.m_reader.LocalName);
								}
							}
						}
						else
						{
							StyleInformation styleInformation = this.ReadStyle(context);
							styleInformation.Filter(StyleOwnerType.Chart, false);
							chartBorderSkin.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, true, context.ErrorContext);
						}
					}
				}
				while (!flag);
			}
			return chartBorderSkin;
		}

		// Token: 0x060023DB RID: 9179 RVA: 0x0009F7E0 File Offset: 0x0009D9E0
		private Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem ReadCustomReportItem(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget, out Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem altReportItem)
		{
			altReportItem = null;
			Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem customReportItem = new Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem(this.GenerateID(), parent);
			customReportItem.Name = this.m_reader.GetAttribute("Name");
			context.ObjectType = customReportItem.ObjectType;
			context.ObjectName = customReportItem.Name;
			this.RegisterDataRegion(customReportItem);
			bool flag = true;
			if (!this.m_reportItemNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				flag = false;
			}
			if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsCRIInPageSection, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
				flag = false;
			}
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("CustomReportItem" == this.m_reader.LocalName)
							{
								flag4 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 3:
								if (localName == "Top")
								{
									customReportItem.Top = this.ReadSize();
								}
								break;
							case 4:
							{
								char c = localName[0];
								if (c != 'L')
								{
									if (c == 'T')
									{
										if (localName == "Type")
										{
											customReportItem.Type = this.m_reader.ReadString();
										}
									}
								}
								else if (localName == "Left")
								{
									customReportItem.Left = this.ReadSize();
								}
								break;
							}
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											customReportItem.Width = this.ReadSize();
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context, out flag2);
									customReportItem.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, context.ErrorContext);
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'Z')
									{
										if (localName == "ZIndex")
										{
											customReportItem.ZIndex = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "Height")
								{
									customReportItem.Height = this.ReadSize();
								}
								break;
							}
							case 7:
							case 8:
							case 9:
							case 11:
							case 12:
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c != 'R')
									{
										if (c == 'V')
										{
											if (localName == "Visibility")
											{
												customReportItem.Visibility = this.ReadVisibility(context, out flag3);
											}
										}
									}
									else if (localName == "RepeatWith")
									{
										customReportItem.RepeatedSibling = true;
										customReportItem.RepeatWith = this.m_reader.ReadString();
									}
								}
								else if (localName == "CustomData")
								{
									this.ReadCustomData(customReportItem, context, ref flag);
								}
								break;
							}
							case 13:
								if (localName == "AltReportItem")
								{
									customReportItem.AltReportItem = this.ReadAltReportItem(parent, context, textBoxesWithDefaultSortTarget);
								}
								break;
							default:
								if (length == 16)
								{
									if (localName == "CustomProperties")
									{
										customReportItem.CustomProperties = this.ReadCustomProperties(context);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag4);
			}
			customReportItem.Computed = true;
			if (customReportItem.AltReportItem == null)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.Rectangle rectangle = new Microsoft.ReportingServices.ReportIntermediateFormat.Rectangle(this.GenerateID(), this.GenerateID(), parent);
				rectangle.Name = string.Concat(new string[]
				{
					customReportItem.Name,
					"_",
					customReportItem.ID.ToString(),
					"_",
					rectangle.ID.ToString()
				});
				this.m_reportItemNames.Validate(rectangle.ObjectType, rectangle.Name, context.ErrorContext);
				rectangle.Computed = false;
				rectangle.Visibility = new Microsoft.ReportingServices.ReportIntermediateFormat.Visibility
				{
					Hidden = Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.CreateConstExpression(true)
				};
				this.m_reportItemCollectionList.Add(rectangle.ReportItems);
				customReportItem.AltReportItem = rectangle;
			}
			else
			{
				customReportItem.ExplicitlyDefinedAltReportItem = true;
			}
			customReportItem.AltReportItem.Top = customReportItem.Top;
			customReportItem.AltReportItem.Left = customReportItem.Left;
			customReportItem.AltReportItem.Height = customReportItem.Height;
			customReportItem.AltReportItem.Width = customReportItem.Width;
			customReportItem.AltReportItem.ZIndex = customReportItem.ZIndex;
			if (flag)
			{
				this.m_createSubtotalsDefs.Add(customReportItem);
			}
			altReportItem = customReportItem.AltReportItem;
			if (!flag)
			{
				return null;
			}
			return customReportItem;
		}

		// Token: 0x060023DC RID: 9180 RVA: 0x0009FD4C File Offset: 0x0009DF4C
		private Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem ReadAltReportItem(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem reportItem = null;
			if (!this.m_reader.IsEmptyElement)
			{
				int num = 0;
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "AltReportItem")
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 4:
								if (localName == "Line")
								{
									reportItem = this.ReadLine(parent, context);
									num++;
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'I')
									{
										if (localName == "Image")
										{
											reportItem = this.ReadImage(parent, context);
											num++;
										}
									}
								}
								else if (localName == "Chart")
								{
									reportItem = this.ReadChart(parent, context);
									num++;
								}
								break;
							}
							case 6:
								if (localName == "Tablix")
								{
									reportItem = this.ReadTablix(parent, context);
									num++;
								}
								break;
							case 7:
								if (localName == "Textbox")
								{
									reportItem = this.ReadTextbox(parent, context, textBoxesWithDefaultSortTarget);
									num++;
								}
								break;
							case 8:
								break;
							case 9:
							{
								char c = localName[0];
								if (c != 'R')
								{
									if (c == 'S')
									{
										if (localName == "Subreport")
										{
											reportItem = this.ReadSubreport(parent, context);
											num++;
										}
									}
								}
								else if (localName == "Rectangle")
								{
									reportItem = this.ReadRectangle(parent, context, textBoxesWithDefaultSortTarget);
									num++;
								}
								break;
							}
							default:
								if (length == 16)
								{
									if (localName == "CustomReportItem")
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsInvalidAltReportItem, Severity.Error, context.ObjectType, context.ObjectName, "AltReportItem", Array.Empty<string>());
										num++;
									}
								}
								break;
							}
						}
						if (num > 1)
						{
							reportItem = null;
							context.ErrorContext.Register(ProcessingErrorCode.rsMultiReportItemsInCustomReportItem, Severity.Error, context.ObjectType, context.ObjectName, "AltReportItem", Array.Empty<string>());
						}
					}
				}
				while (!flag);
			}
			return reportItem;
		}

		// Token: 0x060023DD RID: 9181 RVA: 0x0009FFB8 File Offset: 0x0009E1B8
		private void ReadCustomData(Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem crItem, PublishingContextStruct context, ref bool validName)
		{
			crItem.SetAsDataRegion();
			if ((context.Location & LocationFlags.InDataRegion) != (LocationFlags)0)
			{
				Global.Tracer.Assert(this.m_nestedDataRegions != null);
				this.m_nestedDataRegions.Add(crItem);
			}
			context.Location = context.Location | LocationFlags.InDataSet | LocationFlags.InDataRegion;
			if (this.m_scopeNames.Validate(false, context.ObjectName, context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				this.m_reportScopes.Add(crItem.Name, crItem);
			}
			else
			{
				validName = true;
			}
			if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsDataRegionInPageSection, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
			}
			bool flag = false;
			IdcRelationship idcRelationship = null;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("CustomData" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						switch (localName.Length)
						{
						case 7:
							if (localName == "Filters")
							{
								crItem.Filters = this.ReadFilters(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.DataRegionFilters, context);
							}
							break;
						case 8:
							if (localName == "DataRows")
							{
								crItem.DataRows = this.ReadCustomDataRows(crItem, context);
							}
							break;
						case 11:
							if (localName == "DataSetName")
							{
								crItem.DataSetName = this.m_reader.ReadString();
							}
							break;
						case 12:
							if (localName == "Relationship")
							{
								idcRelationship = this.ReadRelationship(context);
							}
							break;
						case 15:
							if (localName == "SortExpressions")
							{
								crItem.Sorting = this.ReadSortExpressions(true, context);
							}
							break;
						case 16:
							if (localName == "DataRowHierarchy")
							{
								crItem.DataRowMembers = this.ReadCustomDataHierarchy(crItem, context, false, ref validName);
							}
							break;
						case 19:
							if (localName == "DataColumnHierarchy")
							{
								crItem.DataColumnMembers = this.ReadCustomDataHierarchy(crItem, context, true, ref validName);
							}
							break;
						}
					}
				}
			}
			while (!flag);
			crItem.DataScopeInfo.SetRelationship(crItem.DataSetName, idcRelationship);
		}

		// Token: 0x060023DE RID: 9182 RVA: 0x000A0224 File Offset: 0x0009E424
		private DataMemberList ReadCustomDataHierarchy(Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem crItem, PublishingContextStruct context, bool isColumnHierarchy, ref bool validName)
		{
			DataMemberList dataMemberList = null;
			int num = 0;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if (this.m_reader.LocalName == (isColumnHierarchy ? "DataColumnHierarchy" : "DataRowHierarchy"))
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "DataMembers")
				{
					dataMemberList = this.ReadCustomDataMembers(crItem, context, isColumnHierarchy, 0, ref num, ref validName);
				}
			}
			while (!flag);
			if (isColumnHierarchy)
			{
				crItem.ColumnCount = num;
			}
			else
			{
				crItem.RowCount = num;
			}
			return dataMemberList;
		}

		// Token: 0x060023DF RID: 9183 RVA: 0x000A02BC File Offset: 0x0009E4BC
		private DataMemberList ReadCustomDataMembers(Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem crItem, PublishingContextStruct context, bool isColumnHierarchy, int level, ref int leafNodes, ref bool validName)
		{
			DataMemberList dataMemberList = new DataMemberList();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("DataMembers" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "DataMember")
				{
					dataMemberList.Add(this.ReadCustomDataMember(crItem, context, isColumnHierarchy, level, ref leafNodes, ref validName));
				}
			}
			while (!flag);
			if (dataMemberList.Count <= 0)
			{
				return null;
			}
			return dataMemberList;
		}

		// Token: 0x060023E0 RID: 9184 RVA: 0x000A034C File Offset: 0x0009E54C
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataMember ReadCustomDataMember(Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem crItem, PublishingContextStruct context, bool isColumnHierarchy, int level, ref int aLeafNodes, ref bool validName)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.DataMember dataMember = new Microsoft.ReportingServices.ReportIntermediateFormat.DataMember(this.GenerateID(), crItem);
			this.m_runningValueHolderList.Add(dataMember);
			dataMember.IsColumn = isColumnHierarchy;
			dataMember.Level = level;
			int num = 0;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("DataMember" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Group"))
						{
							if (!(localName == "SortExpressions"))
							{
								if (!(localName == "CustomProperties"))
								{
									if (localName == "DataMembers")
									{
										dataMember.SubMembers = this.ReadCustomDataMembers(crItem, context, isColumnHierarchy, level + 1, ref num, ref validName);
									}
								}
								else
								{
									dataMember.CustomProperties = this.ReadCustomProperties(context);
								}
							}
							else
							{
								dataMember.Sorting = this.ReadSortExpressions(false, context);
							}
						}
						else
						{
							dataMember.Grouping = this.ReadGrouping(dataMember, context, ref validName);
						}
					}
				}
				while (!flag);
			}
			if (dataMember.SubMembers == null || dataMember.SubMembers.Count == 0)
			{
				aLeafNodes++;
				if (isColumnHierarchy)
				{
					dataMember.ColSpan = 1;
				}
				else
				{
					dataMember.RowSpan = 1;
				}
			}
			else
			{
				aLeafNodes += num;
				if (isColumnHierarchy)
				{
					dataMember.ColSpan = num;
				}
				else
				{
					dataMember.RowSpan = num;
				}
			}
			this.ValidateAndProcessMemberGroupAndSort(dataMember, context);
			return dataMember;
		}

		// Token: 0x060023E1 RID: 9185 RVA: 0x000A04C4 File Offset: 0x0009E6C4
		private CustomDataRowList ReadCustomDataRows(Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem crItem, PublishingContextStruct context)
		{
			CustomDataRowList customDataRowList = new CustomDataRowList();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("DataRows" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "DataRow")
				{
					customDataRowList.Add(this.ReadCustomDataRow(crItem, context));
				}
			}
			while (!flag);
			return customDataRowList;
		}

		// Token: 0x060023E2 RID: 9186 RVA: 0x000A0544 File Offset: 0x0009E744
		private CustomDataRow ReadCustomDataRow(Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem crItem, PublishingContextStruct context)
		{
			CustomDataRow customDataRow = new CustomDataRow(this.GenerateID());
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("DataRow" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "DataCell")
				{
					if (customDataRow.DataCells == null)
					{
						customDataRow.DataCells = new Microsoft.ReportingServices.ReportIntermediateFormat.DataCellList();
					}
					customDataRow.DataCells.Add(this.ReadCustomDataCell(crItem, context));
				}
			}
			while (!flag);
			return customDataRow;
		}

		// Token: 0x060023E3 RID: 9187 RVA: 0x000A05E0 File Offset: 0x0009E7E0
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataCell ReadCustomDataCell(Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem crItem, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.DataCell dataCell = new Microsoft.ReportingServices.ReportIntermediateFormat.DataCell(this.GenerateID(), crItem);
			this.m_aggregateHolderList.Add(dataCell);
			this.m_runningValueHolderList.Add(dataCell);
			string text = null;
			List<IdcRelationship> list = null;
			int num = 0;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if (this.m_reader.LocalName == "DataCell")
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "DataValue"))
					{
						if (!(localName == "DataSetName"))
						{
							if (localName == "Relationships")
							{
								list = this.ReadRelationships(context);
							}
						}
						else
						{
							text = this.m_reader.ReadString();
						}
					}
					else
					{
						if (dataCell.DataValues == null)
						{
							dataCell.DataValues = new Microsoft.ReportingServices.ReportIntermediateFormat.DataValueList();
						}
						dataCell.DataValues.Add(this.ReadDataValue(false, false, ++num, context));
					}
				}
			}
			while (!flag);
			dataCell.DataScopeInfo.SetRelationship(text, list);
			return dataCell;
		}

		// Token: 0x060023E4 RID: 9188 RVA: 0x000A06F8 File Offset: 0x0009E8F8
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataValue ReadDataValue(bool isCustomProperty, bool nameRequired, int index, PublishingContextStruct context)
		{
			bool flag = false;
			return this.ReadDataValue(isCustomProperty, nameRequired, index, ref flag, context);
		}

		// Token: 0x060023E5 RID: 9189 RVA: 0x000A0714 File Offset: 0x0009E914
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataValue ReadDataValue(bool isCustomProperty, bool nameRequired, int index, ref bool isComputed, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.DataValue dataValue = new Microsoft.ReportingServices.ReportIntermediateFormat.DataValue();
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ((isCustomProperty && "CustomProperty" == this.m_reader.LocalName) || (!isCustomProperty && "DataValue" == this.m_reader.LocalName))
						{
							flag3 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "Name"))
					{
						if (localName == "Value")
						{
							dataValue.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2);
						}
					}
					else
					{
						dataValue.Name = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag);
					}
				}
			}
			while (!flag3);
			Global.Tracer.Assert(dataValue.Value != null);
			if (dataValue.Name == null && nameRequired)
			{
				if (isCustomProperty)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsMissingCustomPropertyName, Severity.Error, context.ObjectType, context.ObjectName, "Name", new string[] { index.ToString(CultureInfo.CurrentCulture) });
				}
				else
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsMissingChartDataValueName, Severity.Error, context.ObjectType, context.ObjectName, "DataValue", new string[]
					{
						index.ToString(CultureInfo.CurrentCulture),
						"Name"
					});
				}
			}
			isComputed = isComputed || flag2 || flag;
			return dataValue;
		}

		// Token: 0x060023E6 RID: 9190 RVA: 0x000A08B0 File Offset: 0x0009EAB0
		private void ReadConnectionProperties(Microsoft.ReportingServices.ReportIntermediateFormat.DataSource dataSource, PublishingContextStruct context, ref bool hasComplexParams, Dictionary<string, bool> parametersInQuery)
		{
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("ConnectionProperties" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "DataProvider"))
					{
						if (!(localName == "ConnectString"))
						{
							if (!(localName == "IntegratedSecurity"))
							{
								if (localName == "Prompt")
								{
									dataSource.Prompt = this.m_reader.ReadString();
								}
							}
							else
							{
								dataSource.IntegratedSecurity = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
						}
						else
						{
							Global.Tracer.Assert(Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSource == context.ObjectType);
							dataSource.ConnectStringExpression = this.ReadQueryOrParameterExpression(context, DataType.String, ref hasComplexParams, parametersInQuery);
							if (!dataSource.ConnectStringExpression.IsExpression && DataSourceInfo.HasUseridReference(dataSource.ConnectStringExpression.OriginalText))
							{
								this.SetConnectionStringUserProfileDependency();
							}
						}
					}
					else
					{
						dataSource.Type = this.m_reader.ReadString();
					}
				}
			}
			while (!flag);
		}

		// Token: 0x060023E7 RID: 9191 RVA: 0x000A09F4 File Offset: 0x0009EBF4
		private void ReadDataSets(PublishingContextStruct context)
		{
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("DataSets" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "DataSet")
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet = this.ReadDataSet(context);
					this.m_dataSets.Add(dataSet);
					if (dataSet.IsReferenceToSharedDataSet && this.m_report.SharedDSContainer == null)
					{
						this.m_report.SharedDSContainerCollectionIndex = this.m_report.DataSourceCount;
						this.m_report.SharedDSContainer = new Microsoft.ReportingServices.ReportIntermediateFormat.DataSource(this.GenerateID(), Guid.Empty);
						if (this.m_report.DataSources == null)
						{
							this.m_report.DataSources = new List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSource>();
						}
						this.m_report.DataSources.Add(this.m_report.SharedDSContainer);
					}
				}
			}
			while (!flag);
		}

		// Token: 0x060023E8 RID: 9192 RVA: 0x000A0B00 File Offset: 0x0009ED00
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataSet ReadDataSet(PublishingContextStruct context)
		{
			int num = this.GenerateID();
			int num2 = this.m_dataSetIndexCounter;
			this.m_dataSetIndexCounter = num2 + 1;
			Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet = new Microsoft.ReportingServices.ReportIntermediateFormat.DataSet(num, num2);
			dataSet.Name = this.m_reader.GetAttribute("Name");
			context.Location |= LocationFlags.InDataSet;
			context.ObjectType = dataSet.ObjectType;
			context.ObjectName = dataSet.Name;
			if (this.m_scopeNames.Validate(false, context.ObjectName, context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				this.m_reportScopes.Add(dataSet.Name, dataSet);
			}
			this.m_aggregateHolderList.Add(dataSet);
			bool flag = false;
			Dictionary<string, bool> dictionary = new Dictionary<string, bool>();
			bool flag2 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("DataSet" == this.m_reader.LocalName)
						{
							flag2 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						num2 = localName.Length;
						switch (num2)
						{
						case 5:
							if (localName == "Query")
							{
								dataSet.Query = this.ReadQuery(context, ref flag, dictionary);
							}
							break;
						case 6:
							if (localName == "Fields")
							{
								int num3;
								dataSet.Fields = this.ReadFields(context, out num3);
								dataSet.NonCalculatedFieldCount = num3;
							}
							break;
						case 7:
							if (localName == "Filters")
							{
								dataSet.Filters = this.ReadFilters(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.DataSetFilters, context, ref flag, dictionary);
							}
							break;
						case 8:
						case 10:
						case 11:
						case 12:
						case 14:
						case 18:
							break;
						case 9:
							if (localName == "Collation")
							{
								dataSet.Collation = this.m_reader.ReadString();
								uint num4;
								if (DataSetValidator.ValidateCollation(dataSet.Collation, out num4))
								{
									dataSet.LCID = num4;
								}
								else
								{
									context.ErrorContext.Register(ProcessingErrorCode.rsInvalidCollationName, Severity.Warning, context.ObjectType, context.ObjectName, null, new string[] { dataSet.Collation });
								}
							}
							break;
						case 13:
						{
							char c = localName[0];
							if (c != 'N')
							{
								if (c == 'S')
								{
									if (localName == "SharedDataSet")
									{
										dataSet.SharedDataSetQuery = this.ReadSharedDataSetQuery(context, ref flag, dictionary);
									}
								}
							}
							else if (localName == "NullsAsBlanks")
							{
								dataSet.NullsAsBlanks = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						}
						case 15:
							if (localName == "CaseSensitivity")
							{
								dataSet.CaseSensitivity = this.ReadTriState();
							}
							break;
						case 16:
						{
							char c = localName[0];
							if (c != 'C')
							{
								if (c == 'W')
								{
									if (localName == "WidthSensitivity")
									{
										dataSet.WidthSensitivity = this.ReadTriState();
									}
								}
							}
							else if (localName == "CollationCulture")
							{
								dataSet.CollationCulture = this.m_reader.ReadString();
								this.ValidateCollationCultureAndSetLcid(dataSet, context);
							}
							break;
						}
						case 17:
							if (localName == "AccentSensitivity")
							{
								dataSet.AccentSensitivity = this.ReadTriState();
							}
							break;
						case 19:
							if (localName == "KanatypeSensitivity")
							{
								dataSet.KanatypeSensitivity = this.ReadTriState();
							}
							break;
						case 20:
							if (localName == "DefaultRelationships")
							{
								dataSet.DefaultRelationships = this.ReadDefaultRelationships(context);
							}
							break;
						default:
							if (num2 == 27)
							{
								if (localName == "InterpretSubtotalsAsDetails")
								{
									dataSet.InterpretSubtotalsAsDetails = this.ReadTriState();
								}
							}
							break;
						}
					}
				}
			}
			while (!flag2);
			if (!string.IsNullOrEmpty(dataSet.Collation) && !string.IsNullOrEmpty(dataSet.CollationCulture))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsCollationAndCollationCultureSpecified, Severity.Error, context.ObjectType, context.ObjectName, "CollationCulture", new string[] { "Collation" });
			}
			this.ValidateDataSet(dataSet, context, flag, dictionary);
			if (dataSet.Query != null)
			{
				this.m_embeddedDataSets.Add(new EmbeddedDataSetInfo(dataSet.Name, string.IsNullOrEmpty(dataSet.Query.DataSourceName) ? "" : dataSet.Query.DataSourceName, string.IsNullOrEmpty((string)dataSet.Query.CommandText.Value) ? "" : ((string)dataSet.Query.CommandText.Value)));
			}
			return dataSet;
		}

		// Token: 0x060023E9 RID: 9193 RVA: 0x000A1010 File Offset: 0x0009F210
		private SharedDataSetQuery ReadSharedDataSetQuery(PublishingContextStruct context, ref bool isComplex, Dictionary<string, bool> referencedReportParameters)
		{
			SharedDataSetQuery sharedDataSetQuery = new SharedDataSetQuery();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("SharedDataSet" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "SharedDataSetReference"))
					{
						if (localName == "QueryParameters")
						{
							sharedDataSetQuery.Parameters = this.ReadQueryParameters(context, ref isComplex, referencedReportParameters);
						}
					}
					else
					{
						sharedDataSetQuery.SharedDataSetReference = this.m_reader.ReadString();
					}
				}
			}
			while (!flag);
			return sharedDataSetQuery;
		}

		// Token: 0x060023EA RID: 9194 RVA: 0x000A10B4 File Offset: 0x0009F2B4
		private Microsoft.ReportingServices.ReportIntermediateFormat.ReportQuery ReadQuery(PublishingContextStruct context, ref bool isComplex, Dictionary<string, bool> referencedReportParameters)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ReportQuery reportQuery = new Microsoft.ReportingServices.ReportIntermediateFormat.ReportQuery();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Query" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "DataSourceName"))
					{
						if (!(localName == "CommandType"))
						{
							if (!(localName == "CommandText"))
							{
								if (!(localName == "PreviewCommandText"))
								{
									if (!(localName == "QueryParameters"))
									{
										if (localName == "Timeout")
										{
											reportQuery.TimeOut = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										}
									}
									else
									{
										reportQuery.Parameters = this.ReadQueryParameters(context, ref isComplex, referencedReportParameters);
									}
								}
								else
								{
									reportQuery.PreviewCommandText = this.m_reader.ReadString();
								}
							}
							else
							{
								Global.Tracer.Assert(Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSet == context.ObjectType);
								context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.Query;
								reportQuery.CommandText = this.ReadQueryOrParameterExpression(context, DataType.String, ref isComplex, referencedReportParameters);
								context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSet;
							}
						}
						else
						{
							reportQuery.CommandType = this.ReadCommandType();
						}
					}
					else
					{
						reportQuery.DataSourceName = this.m_reader.ReadString();
					}
				}
			}
			while (!flag);
			return reportQuery;
		}

		// Token: 0x060023EB RID: 9195 RVA: 0x000A122C File Offset: 0x0009F42C
		private CommandType ReadCommandType()
		{
			string text = this.m_reader.ReadString();
			return (CommandType)Enum.Parse(typeof(CommandType), text, false);
		}

		// Token: 0x060023EC RID: 9196 RVA: 0x000A125C File Offset: 0x0009F45C
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue> ReadQueryParameters(PublishingContextStruct context, ref bool hasComplexParams, Dictionary<string, bool> parametersInQuery)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue>();
			bool flag = false;
			string objectName = context.ObjectName;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("QueryParameters" == this.m_reader.LocalName || "DataSetParameters" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "QueryParameter"))
					{
						if (localName == "DataSetParameter")
						{
							list.Add(this.ReadRSDDataSetParameter(context, ref hasComplexParams, parametersInQuery));
						}
					}
					else
					{
						list.Add(this.ReadQueryParameter(context, ref hasComplexParams, parametersInQuery));
					}
				}
			}
			while (!flag);
			context.ObjectName = objectName;
			return list;
		}

		// Token: 0x060023ED RID: 9197 RVA: 0x000A1328 File Offset: 0x0009F528
		private Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue ReadQueryParameter(PublishingContextStruct context, ref bool isComplex, Dictionary<string, bool> parametersInQuery)
		{
			Global.Tracer.Assert(Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSet == context.ObjectType);
			Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue parameterValue = new Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue();
			parameterValue.Name = this.m_reader.GetAttribute("Name");
			context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.QueryParameter;
			context.ObjectName = parameterValue.Name;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("QueryParameter" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "Value")
				{
					parameterValue.ConstantDataType = this.ReadDataTypeAttribute();
					parameterValue.Value = this.ReadQueryOrParameterExpression(context, parameterValue.ConstantDataType, ref isComplex, parametersInQuery);
				}
			}
			while (!flag);
			return parameterValue;
		}

		// Token: 0x060023EE RID: 9198 RVA: 0x000A13F8 File Offset: 0x0009F5F8
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.Field> ReadFields(PublishingContextStruct context, out int calculatedFieldStartIndex)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.Field> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.Field>();
			List<string> list2 = new List<string>();
			CLSUniqueNameValidator clsuniqueNameValidator = new CLSUniqueNameValidator(ProcessingErrorCode.rsInvalidFieldNameNotCLSCompliant, ProcessingErrorCode.rsDuplicateFieldName, ProcessingErrorCode.rsInvalidFieldNameLength);
			bool flag = false;
			calculatedFieldStartIndex = -1;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Fields" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "Field")
				{
					string text;
					Microsoft.ReportingServices.ReportIntermediateFormat.Field field = this.ReadField(clsuniqueNameValidator, context, out text);
					this.InsertField(field, text, list, list2, ref calculatedFieldStartIndex);
				}
			}
			while (!flag);
			if (0 > calculatedFieldStartIndex)
			{
				calculatedFieldStartIndex = list.Count;
			}
			ReportPublishing.AssignAndValidateAggregateIndicatorFieldIndex(context, list, list2);
			return list;
		}

		// Token: 0x060023EF RID: 9199 RVA: 0x000A14B0 File Offset: 0x0009F6B0
		private static void AssignAndValidateAggregateIndicatorFieldIndex(PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.Field> fields, List<string> aggregateIndicatorFieldNames)
		{
			Dictionary<string, int> dictionary = new Dictionary<string, int>(fields.Count, StringComparer.Ordinal);
			for (int i = 0; i < fields.Count; i++)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.Field field = fields[i];
				dictionary[field.Name] = i;
			}
			for (int j = 0; j < aggregateIndicatorFieldNames.Count; j++)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.Field field2 = fields[j];
				string text = aggregateIndicatorFieldNames[j];
				if (!string.IsNullOrEmpty(text))
				{
					if (field2.IsCalculatedField)
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsAggregateIndicatorFieldOnCalculatedField, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.Field, field2.Name, "AggregateIndicatorField", new string[] { "Value", context.ObjectName });
					}
					int num;
					if (dictionary.TryGetValue(text, out num))
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.Field field3 = fields[num];
						if (field3.IsCalculatedField && field3.Value.Type != Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Literal && (field3.Value.Type != Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant || field3.Value.ConstantType != DataType.Boolean))
						{
							context.ErrorContext.Register(ProcessingErrorCode.rsInvalidAggregateIndicatorField, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.Field, field2.Name, "AggregateIndicatorField", new string[] { context.ObjectName });
						}
						field2.AggregateIndicatorFieldIndex = num;
					}
					else
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsInvalidAggregateIndicatorField, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.Field, field2.Name, "AggregateIndicatorField", new string[] { context.ObjectName });
					}
				}
			}
		}

		// Token: 0x060023F0 RID: 9200 RVA: 0x000A1628 File Offset: 0x0009F828
		private Microsoft.ReportingServices.ReportIntermediateFormat.Field ReadField(CLSUniqueNameValidator names, PublishingContextStruct context, out string aggregateIndicatorFieldName)
		{
			Global.Tracer.Assert(Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSet == context.ObjectType || Microsoft.ReportingServices.ReportProcessing.ObjectType.SharedDataSet == context.ObjectType);
			string objectName = context.ObjectName;
			Microsoft.ReportingServices.ReportIntermediateFormat.Field field = new Microsoft.ReportingServices.ReportIntermediateFormat.Field();
			context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.Field;
			string text = null;
			aggregateIndicatorFieldName = null;
			field.Name = this.m_reader.GetAttribute("Name");
			Global.Tracer.Assert(field.Name != null, "Name is a mandatory attribute of field elements");
			context.ObjectName = field.Name;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Field" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "DataField"))
						{
							if (!(localName == "AggregateIndicatorField"))
							{
								if (localName == "Value")
								{
									field.DataType = this.ReadDataTypeAttribute();
									Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode evaluationMode = this.ReadEvaluationModeAttribute();
									text = this.m_reader.ReadString();
									if (text != null)
									{
										field.Value = this.ReadExpression(text, this.m_reader.LocalName, objectName, evaluationMode, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.FieldValue, field.DataType, context);
									}
								}
							}
							else
							{
								aggregateIndicatorFieldName = this.m_reader.ReadString();
							}
						}
						else
						{
							field.DataField = this.m_reader.ReadString();
							names.Validate(field.Name, field.DataField, objectName, context.ErrorContext);
						}
					}
				}
				while (!flag);
			}
			this.ValidateField(field, text, context, objectName);
			return field;
		}

		// Token: 0x060023F1 RID: 9201 RVA: 0x000A17DC File Offset: 0x0009F9DC
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.Filter> ReadFilters(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, PublishingContextStruct context)
		{
			bool flag = false;
			Dictionary<string, bool> dictionary = new Dictionary<string, bool>();
			return this.ReadFilters(expressionType, context, ref flag, dictionary);
		}

		// Token: 0x060023F2 RID: 9202 RVA: 0x000A17FC File Offset: 0x0009F9FC
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.Filter> ReadFilters(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, PublishingContextStruct context, ref bool isComplex, Dictionary<string, bool> referencedReportParameters)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.Filter> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.Filter>();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Filters" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "Filter")
				{
					list.Add(this.ReadFilter(expressionType, context, ref isComplex, referencedReportParameters));
				}
			}
			while (!flag);
			if (list.Count > 0 && this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.Filters))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "Filters", Array.Empty<string>());
			}
			return list;
		}

		// Token: 0x060023F3 RID: 9203 RVA: 0x000A18C4 File Offset: 0x0009FAC4
		private Microsoft.ReportingServices.ReportIntermediateFormat.Filter ReadFilter(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, PublishingContextStruct context, ref bool isComplex, Dictionary<string, bool> referencedReportParameters)
		{
			this.m_hasFilters = true;
			Microsoft.ReportingServices.ReportIntermediateFormat.Filter filter = new Microsoft.ReportingServices.ReportIntermediateFormat.Filter();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Filter" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "FilterExpression"))
					{
						if (!(localName == "Operator"))
						{
							if (localName == "FilterValues")
							{
								filter.Values = this.ReadFilterValues(expressionType, context, ref isComplex, referencedReportParameters);
							}
						}
						else
						{
							filter.Operator = this.ReadOperator();
						}
					}
					else
					{
						filter.Expression = this.ReadFilterExpression(this.m_reader.LocalName, expressionType, DataType.String, context, ref isComplex, referencedReportParameters);
					}
				}
			}
			while (!flag);
			int num = ((filter.Values == null) ? 0 : filter.Values.Count);
			switch (filter.Operator)
			{
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.Equal:
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.Like:
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.GreaterThan:
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.GreaterThanOrEqual:
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.LessThan:
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.LessThanOrEqual:
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.NotEqual:
				this.VerifyFilterValueCount(context, filter, num, 1);
				break;
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.TopN:
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.BottomN:
				this.VerifyTopBottomFilterValue(context, filter, num, false);
				break;
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.TopPercent:
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.BottomPercent:
				this.VerifyTopBottomFilterValue(context, filter, num, true);
				break;
			case Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators.Between:
				this.VerifyFilterValueCount(context, filter, num, 2);
				break;
			}
			if (Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.GroupingFilters == expressionType && filter.Expression.HasRecursiveAggregates())
			{
				this.m_hasSpecialRecursiveAggregates = true;
			}
			return filter;
		}

		// Token: 0x060023F4 RID: 9204 RVA: 0x000A1A48 File Offset: 0x0009FC48
		private void VerifyTopBottomFilterValue(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.Filter filter, int count, bool isPercentFilter)
		{
			if (this.VerifyFilterValueCount(context, filter, count, 1))
			{
				ExpressionInfoTypeValuePair expressionInfoTypeValuePair = filter.Values[0];
				if (!expressionInfoTypeValuePair.Value.IsExpression)
				{
					if (expressionInfoTypeValuePair.HadExplicitDataType)
					{
						if (isPercentFilter)
						{
							if (expressionInfoTypeValuePair.DataType != DataType.Integer && expressionInfoTypeValuePair.DataType != DataType.Float)
							{
								context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFilterValueDataType, Severity.Error, context.ObjectType, context.ObjectName, "FilterValues", new string[]
								{
									filter.Operator.ToString(),
									RPRes.rsDataTypeIntegerOrFloat
								});
								return;
							}
						}
						else if (expressionInfoTypeValuePair.DataType != DataType.Integer)
						{
							context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFilterValueDataType, Severity.Error, context.ObjectType, context.ObjectName, "FilterValues", new string[]
							{
								filter.Operator.ToString(),
								RPRes.rsDataTypeInteger
							});
							return;
						}
					}
					else
					{
						DataType dataType;
						if (isPercentFilter)
						{
							dataType = DataType.Float;
						}
						else
						{
							dataType = DataType.Integer;
						}
						Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo value = expressionInfoTypeValuePair.Value;
						Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ParseRDLConstant(value.StringValue, value, dataType, context.ErrorContext, context.ObjectType, context.ObjectName, "FilterValues");
					}
				}
			}
		}

		// Token: 0x060023F5 RID: 9205 RVA: 0x000A1B8C File Offset: 0x0009FD8C
		private bool VerifyFilterValueCount(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.Filter filter, int expectedCount, int actualCount)
		{
			if (expectedCount != actualCount)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidNumberOfFilterValues, Severity.Error, context.ObjectType, context.ObjectName, "FilterValues", new string[]
				{
					filter.Operator.ToString(),
					Convert.ToString(expectedCount, CultureInfo.InvariantCulture)
				});
				return false;
			}
			return true;
		}

		// Token: 0x060023F6 RID: 9206 RVA: 0x000A1BF4 File Offset: 0x0009FDF4
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadFilterExpression(string propertyName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, DataType dataType, PublishingContextStruct context, ref bool isComplex, Dictionary<string, bool> referencedReportParameters)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(this.m_reader.LocalName, expressionType, dataType, context);
			if (expressionInfo != null)
			{
				isComplex |= expressionInfo.HasDynamicParameterReference;
				if (expressionInfo.ReferencedParameters != null)
				{
					foreach (string text in expressionInfo.ReferencedParameters)
					{
						if (!string.IsNullOrEmpty(text))
						{
							referencedReportParameters[text] = true;
						}
					}
				}
			}
			return expressionInfo;
		}

		// Token: 0x060023F7 RID: 9207 RVA: 0x000A1C80 File Offset: 0x0009FE80
		private List<ExpressionInfoTypeValuePair> ReadFilterValues(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, PublishingContextStruct context, ref bool isComplex, Dictionary<string, bool> referencedReportParameters)
		{
			List<ExpressionInfoTypeValuePair> list = new List<ExpressionInfoTypeValuePair>();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("FilterValues" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "FilterValue")
				{
					bool flag2;
					DataType dataType = this.ReadDataTypeAttribute(out flag2);
					Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadFilterExpression(this.m_reader.LocalName, expressionType, dataType, context, ref isComplex, referencedReportParameters);
					list.Add(new ExpressionInfoTypeValuePair(dataType, flag2, expressionInfo));
					if (Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.GroupingFilters == expressionType && expressionInfo.HasRecursiveAggregates())
					{
						this.m_hasSpecialRecursiveAggregates = true;
					}
				}
			}
			while (!flag);
			return list;
		}

		// Token: 0x060023F8 RID: 9208 RVA: 0x000A1D3C File Offset: 0x0009FF3C
		private Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators ReadOperator()
		{
			string text = this.m_reader.ReadString();
			return (Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators)Enum.Parse(typeof(Microsoft.ReportingServices.ReportIntermediateFormat.Filter.Operators), text, false);
		}

		// Token: 0x060023F9 RID: 9209 RVA: 0x000A1D6C File Offset: 0x0009FF6C
		private DataSetReference ReadDataSetReference()
		{
			string text = null;
			string text2 = null;
			string text3 = null;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("DataSetReference" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "DataSetName"))
					{
						if (!(localName == "ValueField"))
						{
							if (localName == "LabelField")
							{
								text3 = this.m_reader.ReadString();
							}
						}
						else
						{
							text2 = this.m_reader.ReadString();
						}
					}
					else
					{
						text = this.m_reader.ReadString();
					}
				}
			}
			while (!flag);
			return new DataSetReference(text, text2, text3);
		}

		// Token: 0x060023FA RID: 9210 RVA: 0x000A1E34 File Offset: 0x000A0034
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSource> ReadDataSources(PublishingContextStruct context, IDataProtection dataProtection)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSource> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSource>();
			DataSourceNameValidator dataSourceNameValidator = new DataSourceNameValidator();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("DataSources" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "DataSource")
				{
					list.Add(this.ReadDataSource(dataSourceNameValidator, context, dataProtection));
				}
			}
			while (!flag);
			return list;
		}

		// Token: 0x060023FB RID: 9211 RVA: 0x000A1EB8 File Offset: 0x000A00B8
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataSource ReadDataSource(DataSourceNameValidator dataSourceNames, PublishingContextStruct context, IDataProtection dataProtection)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.DataSource dataSource = new Microsoft.ReportingServices.ReportIntermediateFormat.DataSource(this.GenerateID());
			dataSource.Name = this.m_reader.GetAttribute("Name");
			context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSource;
			context.ObjectName = dataSource.Name;
			bool flag = false;
			if (dataSourceNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				flag = true;
			}
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			Dictionary<string, bool> dictionary = new Dictionary<string, bool>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag5 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("DataSource" == this.m_reader.LocalName)
							{
								flag5 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Transaction"))
						{
							if (!(localName == "ConnectionProperties"))
							{
								if (localName == "DataSourceReference")
								{
									flag3 = true;
									dataSource.DataSourceReference = this.m_reader.ReadString();
								}
							}
							else
							{
								flag2 = true;
								this.ReadConnectionProperties(dataSource, context, ref flag4, dictionary);
							}
						}
						else
						{
							dataSource.Transaction = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
						}
					}
				}
				while (!flag5);
			}
			if ((!flag3 && !flag2) || (flag3 && flag2))
			{
				flag = false;
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidDataSource, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
			}
			if (flag && !this.m_dataSourceNames.ContainsKey(dataSource.Name))
			{
				this.m_dataSourceNames.Add(dataSource.Name, null);
			}
			DataSourceInfo dataSourceInfo = null;
			if (flag2)
			{
				dataSource.IsComplex = flag4;
				dataSource.ParameterNames = dictionary;
				bool flag6 = false;
				if (dataSource.ConnectStringExpression.Type != Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant)
				{
					flag6 = true;
				}
				dataSourceInfo = new DataSourceInfo(dataSource.Name, dataSource.Type, flag6 ? null : dataSource.ConnectStringExpression.OriginalText, flag6, dataSource.IntegratedSecurity, dataSource.Prompt, dataProtection);
			}
			else if (flag3)
			{
				dataSourceInfo = this.CreateSharedDataSourceLink(context, dataSource);
			}
			if (dataSourceInfo != null)
			{
				if (this.m_publishingContext.ResolveTemporaryDataSourceCallback != null)
				{
					this.m_publishingContext.ResolveTemporaryDataSourceCallback(dataSourceInfo, this.m_publishingContext.OriginalDataSources);
				}
				dataSource.ID = dataSourceInfo.ID;
				this.m_dataSources.Add(dataSourceInfo);
			}
			return dataSource;
		}

		// Token: 0x060023FC RID: 9212 RVA: 0x000A2128 File Offset: 0x000A0328
		private DataSourceInfo CreateSharedDataSourceLink(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.DataSource dataSource)
		{
			string text;
			if (this.m_publishingContext.CatalogContext != null)
			{
				text = this.m_publishingContext.CatalogContext.MapUserProvidedPath(dataSource.DataSourceReference);
			}
			else
			{
				text = dataSource.DataSourceReference;
			}
			DataSourceInfo dataSourceInfo;
			if (this.m_publishingContext.CheckDataSourceCallback == null)
			{
				dataSourceInfo = new DataSourceInfo(dataSource.Name, text, Guid.Empty);
			}
			else
			{
				Guid empty = Guid.Empty;
				DataSourceInfo dataSourceInfo2 = this.m_publishingContext.CheckDataSourceCallback(text, out empty);
				if (dataSourceInfo2 == null)
				{
					dataSourceInfo = new DataSourceInfo(dataSource.Name);
					string text2 = ((this.m_publishingContext.PublishingContextKind == PublishingContextKind.SharedDataSet) ? dataSource.DataSourceReference : dataSource.Name);
					context.ErrorContext.Register(ProcessingErrorCode.rsDataSourceReferenceNotPublished, Severity.Warning, context.ObjectType, context.ObjectName, (this.m_publishingContext.PublishingContextKind == PublishingContextKind.SharedDataSet) ? RPRes.rsObjectTypeSharedDataSet : RPRes.rsObjectTypeReport, new string[] { text2 });
				}
				else
				{
					dataSourceInfo = new DataSourceInfo(dataSource.Name, text, empty, dataSourceInfo2);
				}
			}
			return dataSourceInfo;
		}

		// Token: 0x060023FD RID: 9213 RVA: 0x000A2224 File Offset: 0x000A0424
		private void ValidateCollationCultureAndSetLcid(Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet, PublishingContextStruct context)
		{
			CultureInfo cultureInfo;
			if (Validator.ValidateSpecificLanguage(dataSet.CollationCulture, out cultureInfo))
			{
				if (cultureInfo != null)
				{
					dataSet.LCID = (uint)cultureInfo.LCID;
					return;
				}
			}
			else
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidLanguage, Severity.Error, context.ObjectType, context.ObjectName, "CollationCulture", new string[] { dataSet.CollationCulture });
			}
		}

		// Token: 0x060023FE RID: 9214 RVA: 0x000A2288 File Offset: 0x000A0488
		private void ValidateDataSet(Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet, PublishingContextStruct context, bool isComplex, Dictionary<string, bool> referencedReportParameters)
		{
			PublishingDataSetInfo publishingDataSetInfo = new PublishingDataSetInfo(dataSet.Name, this.m_dataSets.Count, isComplex, referencedReportParameters);
			if (dataSet.Query == null == (dataSet.SharedDataSetQuery == null))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidDataSetQuery, Severity.Error, context.ObjectType, dataSet.Name, null, Array.Empty<string>());
				return;
			}
			if (!this.m_dataSetQueryInfo.ContainsKey(context.ObjectName))
			{
				this.m_dataSetQueryInfo.Add(context.ObjectName, publishingDataSetInfo);
				int num = ((dataSet.Fields != null) ? dataSet.Fields.Count : 0);
				while (num > 0 && dataSet.Fields[num - 1].IsCalculatedField)
				{
					num--;
				}
				publishingDataSetInfo.CalculatedFieldIndex = num;
			}
			if (dataSet.IsReferenceToSharedDataSet)
			{
				if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.SharedDataSetReferences))
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, dataSet.Name, "SharedDataSet", Array.Empty<string>());
					return;
				}
				string text;
				if (this.m_publishingContext.CatalogContext != null)
				{
					text = this.m_publishingContext.CatalogContext.MapUserProvidedPath(dataSet.SharedDataSetQuery.SharedDataSetReference);
				}
				else
				{
					text = dataSet.SharedDataSetQuery.SharedDataSetReference;
				}
				DataSetInfo dataSetInfo;
				if (this.m_publishingContext.CheckDataSetCallback == null)
				{
					dataSetInfo = new DataSetInfo(dataSet.DataSetCore.Name, text);
				}
				else
				{
					Guid empty = Guid.Empty;
					if (this.m_publishingContext.CheckDataSetCallback(text, out empty))
					{
						dataSetInfo = new DataSetInfo(dataSet.DataSetCore.Name, text, empty);
					}
					else
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsDataSetReferenceNotPublished, Severity.Warning, context.ObjectType, context.ObjectName, null, new string[] { text });
						dataSetInfo = new DataSetInfo(dataSet.DataSetCore.Name, text);
					}
				}
				if (this.m_publishingContext.ResolveTemporaryDataSetCallback != null)
				{
					this.m_publishingContext.ResolveTemporaryDataSetCallback(dataSetInfo, this.m_publishingContext.OriginalDataSets);
				}
				dataSet.DataSetCore.SetCatalogID(dataSetInfo.ID);
				this.m_sharedDataSetReferences.Add(dataSetInfo);
			}
		}

		// Token: 0x060023FF RID: 9215 RVA: 0x000A24A8 File Offset: 0x000A06A8
		private void InsertField(Microsoft.ReportingServices.ReportIntermediateFormat.Field field, string aggregateIndicatorFieldName, List<Microsoft.ReportingServices.ReportIntermediateFormat.Field> fields, List<string> aggregateIndicatorFieldNames, ref int calculatedFieldStartIndex)
		{
			if (field.IsCalculatedField)
			{
				if (calculatedFieldStartIndex < 0)
				{
					calculatedFieldStartIndex = fields.Count;
				}
				fields.Add(field);
				aggregateIndicatorFieldNames.Add(aggregateIndicatorFieldName);
				return;
			}
			if (calculatedFieldStartIndex < 0)
			{
				fields.Add(field);
				aggregateIndicatorFieldNames.Add(aggregateIndicatorFieldName);
				return;
			}
			fields.Insert(calculatedFieldStartIndex, field);
			aggregateIndicatorFieldNames.Insert(calculatedFieldStartIndex, aggregateIndicatorFieldName);
			calculatedFieldStartIndex++;
		}

		// Token: 0x06002400 RID: 9216 RVA: 0x000A2510 File Offset: 0x000A0710
		private void ValidateField(Microsoft.ReportingServices.ReportIntermediateFormat.Field field, object fieldValue, PublishingContextStruct context, string dataSetName)
		{
			if (field.DataField != null == (fieldValue != null))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidField, Severity.Error, context.ObjectType, field.Name, null, new string[] { dataSetName });
			}
		}

		// Token: 0x06002401 RID: 9217 RVA: 0x000A2558 File Offset: 0x000A0758
		private Microsoft.ReportingServices.ReportIntermediateFormat.Sorting ReadSortExpressions(bool isDataRowSortExpression, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Sorting sorting = new Microsoft.ReportingServices.ReportIntermediateFormat.Sorting(Microsoft.ReportingServices.ReportIntermediateFormat.ConstructionPhase.Publishing);
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("SortExpressions" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "SortExpression")
				{
					this.ReadSortExpression(sorting, isDataRowSortExpression, context);
				}
			}
			while (!flag);
			if (sorting.SortExpressions == null || sorting.SortExpressions.Count == 0)
			{
				sorting = null;
			}
			else
			{
				this.m_hasSorting = true;
				sorting.ValidateNaturalSortFlags(context);
				sorting.ValidateDeferredSortFlags(context);
				if (this.m_publishingContext.IsRestrictedDataRegionSort(isDataRowSortExpression) || this.m_publishingContext.IsRestrictedGroupSort(isDataRowSortExpression, sorting))
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "SortExpressions", Array.Empty<string>());
				}
				else if (sorting.NaturalSort && isDataRowSortExpression)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidNaturalSortContainer, Severity.Error, context.ObjectType, context.ObjectName, "SortExpressions", Array.Empty<string>());
				}
				else if (sorting.DeferredSort && isDataRowSortExpression)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidDeferredSortContainer, Severity.Error, context.ObjectType, context.ObjectName, "SortExpressions", Array.Empty<string>());
				}
			}
			return sorting;
		}

		// Token: 0x06002402 RID: 9218 RVA: 0x000A26B8 File Offset: 0x000A08B8
		private void ReadSortExpression(Microsoft.ReportingServices.ReportIntermediateFormat.Sorting sorting, bool isDataRowSortExpression, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = null;
			bool flag = true;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("SortExpression" == this.m_reader.LocalName)
						{
							flag4 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "Value"))
					{
						if (!(localName == "Direction"))
						{
							if (!(localName == "NaturalSort"))
							{
								if (localName == "DeferredSort")
								{
									flag3 = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
								}
							}
							else
							{
								flag2 = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
						}
						else
						{
							flag = this.ReadDirection();
						}
					}
					else
					{
						expressionInfo = this.ReadExpression("SortExpression." + this.m_reader.LocalName, isDataRowSortExpression ? Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.DataRegionSortExpression : Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.SortExpression, DataType.String, context);
					}
				}
			}
			while (!flag4);
			if (expressionInfo.IsExpression)
			{
				sorting.SortExpressions.Add(expressionInfo);
				sorting.SortDirections.Add(flag);
				sorting.NaturalSortFlags.Add(flag2);
				sorting.DeferredSortFlags.Add(flag3);
				if (expressionInfo.HasRecursiveAggregates())
				{
					this.m_hasSpecialRecursiveAggregates = true;
				}
			}
			if (flag2 && this.m_publishingContext.IsRestrictedNaturalGroupSort(expressionInfo))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidNaturalSortGroupExpressionNotSimpleFieldReference, Severity.Error, context.ObjectType, context.ObjectName, "SortExpressions", new string[] { "NaturalSort" });
			}
			if (flag3 && this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.DeferredSort))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "DeferredSort", Array.Empty<string>());
			}
			if (flag2 && flag3)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsConflictingSortFlags, Severity.Error, context.ObjectType, context.ObjectName, "SortExpression", Array.Empty<string>());
			}
		}

		// Token: 0x06002403 RID: 9219 RVA: 0x000A28E4 File Offset: 0x000A0AE4
		private bool ReadDirection()
		{
			string text = this.m_reader.ReadString();
			return ReportProcessing.CompareWithInvariantCulture(text, "Ascending", false) == 0;
		}

		// Token: 0x06002404 RID: 9220 RVA: 0x000A290C File Offset: 0x000A0B0C
		private void ValidateAndProcessMemberGroupAndSort(Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode member, PublishingContextStruct context)
		{
			if (member.IsStatic)
			{
				if (member.Sorting != null)
				{
					this.m_errorContext.Register(ProcessingErrorCode.rsInvalidSortNotAllowed, Severity.Error, context.ObjectType, context.ObjectName, "SortExpressions", new string[] { "Group", member.RdlElementName });
					return;
				}
			}
			else
			{
				this.MergeGroupingAndSortingIfCompatible(member);
				if (member.Sorting != null && member.Sorting.NaturalSort && !member.Grouping.NaturalGroup)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidNaturalSortContainer, Severity.Error, context.ObjectType, context.ObjectName, "SortExpressions", Array.Empty<string>());
				}
			}
		}

		// Token: 0x06002405 RID: 9221 RVA: 0x000A29C0 File Offset: 0x000A0BC0
		private bool ShouldMergeGroupingAndSorting(Microsoft.ReportingServices.ReportIntermediateFormat.Grouping grouping, Microsoft.ReportingServices.ReportIntermediateFormat.Sorting sorting)
		{
			if (grouping != null && grouping.Parent == null && sorting != null && grouping.GroupExpressions != null && sorting.SortExpressions != null && sorting.ShouldApplySorting && grouping.GroupExpressions.Count == sorting.SortExpressions.Count)
			{
				for (int i = 0; i < grouping.GroupExpressions.Count; i++)
				{
					if (grouping.GroupExpressions[i].OriginalText != sorting.SortExpressions[i].OriginalText)
					{
						return false;
					}
				}
				return true;
			}
			return false;
		}

		// Token: 0x06002406 RID: 9222 RVA: 0x000A2A50 File Offset: 0x000A0C50
		private void MergeGroupingAndSortingIfCompatible(Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode member)
		{
			if (this.ShouldMergeGroupingAndSorting(member.Grouping, member.Sorting))
			{
				member.Grouping.GroupAndSort = true;
				member.Grouping.SortDirections = member.Sorting.SortDirections;
				member.Sorting = null;
			}
			if (member.Sorting != null && member.Sorting.ShouldApplySorting)
			{
				this.m_requiresSortingPostGrouping = true;
			}
		}

		// Token: 0x06002407 RID: 9223 RVA: 0x000A2AB8 File Offset: 0x000A0CB8
		private Microsoft.ReportingServices.ReportIntermediateFormat.Grouping ReadGrouping(Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode scope, PublishingContextStruct context)
		{
			bool flag = false;
			return this.ReadGrouping(scope, context, ref flag);
		}

		// Token: 0x06002408 RID: 9224 RVA: 0x000A2AD4 File Offset: 0x000A0CD4
		private Microsoft.ReportingServices.ReportIntermediateFormat.Grouping ReadGrouping(Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode scope, PublishingContextStruct context, ref bool validName)
		{
			this.m_hasGrouping = true;
			Microsoft.ReportingServices.ReportIntermediateFormat.Grouping grouping = new Microsoft.ReportingServices.ReportIntermediateFormat.Grouping(this.GenerateID(), Microsoft.ReportingServices.ReportIntermediateFormat.ConstructionPhase.Publishing);
			grouping.Name = this.m_reader.GetAttribute("Name");
			if (this.m_scopeNames.Validate(true, grouping.Name, context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				this.m_reportScopes.Add(grouping.Name, grouping);
			}
			else
			{
				validName = false;
			}
			this.m_aggregateHolderList.Add(grouping);
			string text = null;
			IdcRelationship idcRelationship = null;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Group" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 6:
								if (localName == "Parent")
								{
									grouping.Parent = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo>();
									grouping.Parent.Add(this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.GroupExpression, DataType.String, context));
									if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.GroupParent))
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.Grouping, grouping.Name, "Parent", Array.Empty<string>());
									}
								}
								break;
							case 7:
								if (localName == "Filters")
								{
									grouping.Filters = this.ReadFilters(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.GroupingFilters, context);
									this.m_hasGroupFilters = true;
								}
								break;
							case 8:
								if (localName == "PageName")
								{
									grouping.PageName = this.ReadPageNameExpression(context);
								}
								break;
							case 9:
							{
								char c = localName[0];
								if (c != 'P')
								{
									if (c == 'V')
									{
										if (localName == "Variables")
										{
											grouping.Variables = this.ReadVariables(context, true, grouping.Name);
										}
									}
								}
								else if (localName == "PageBreak")
								{
									this.ReadPageBreak(grouping, context);
								}
								break;
							}
							case 11:
							{
								char c = localName[1];
								if (c != 'a')
								{
									if (c == 'o')
									{
										if (localName == "DomainScope")
										{
											grouping.DomainScope = this.m_reader.ReadString();
											if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.DomainScope))
											{
												context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.Grouping, grouping.Name, "DomainScope", Array.Empty<string>());
											}
										}
									}
								}
								else if (localName == "DataSetName")
								{
									text = this.m_reader.ReadString();
								}
								break;
							}
							case 12:
							{
								char c = localName[0];
								if (c != 'N')
								{
									if (c == 'R')
									{
										if (localName == "Relationship")
										{
											idcRelationship = this.ReadRelationship(context);
										}
									}
								}
								else if (localName == "NaturalGroup")
								{
									grouping.NaturalGroup = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
								}
								break;
							}
							case 15:
								if (localName == "DataElementName")
								{
									grouping.DataElementName = this.m_reader.ReadString();
								}
								break;
							case 16:
							{
								char c = localName[0];
								if (c != 'D')
								{
									if (c == 'G')
									{
										if (localName == "GroupExpressions")
										{
											this.ReadGroupExpressions(grouping.GroupExpressions, context);
										}
									}
								}
								else if (localName == "DocumentMapLabel")
								{
									grouping.GroupLabel = this.ReadDocumentMapLabelExpression(this.m_reader.LocalName, context);
								}
								break;
							}
							case 17:
								if (localName == "DataElementOutput")
								{
									grouping.DataElementOutput = this.ReadDataElementOutput();
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			scope.DataScopeInfo.SetRelationship(text, idcRelationship);
			if (grouping.Parent != null && 1 != grouping.GroupExpressions.Count)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidGroupingParent, Severity.Error, context.ObjectType, context.ObjectName, "Parent", Array.Empty<string>());
			}
			if (grouping.NaturalGroup)
			{
				if (grouping.Parent != null)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidGroupingNaturalGroupFeature, Severity.Warning, context.ObjectType, context.ObjectName, "NaturalGroup", new string[] { "Parent" });
					grouping.NaturalGroup = false;
				}
				if (grouping.DomainScope != null)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidGroupingNaturalGroupFeature, Severity.Warning, context.ObjectType, context.ObjectName, "NaturalGroup", new string[] { "DomainScope" });
					grouping.NaturalGroup = false;
				}
				foreach (Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo in grouping.GroupExpressions)
				{
					if (this.m_publishingContext.IsRestrictedNaturalGroupSort(expressionInfo))
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsInvalidNaturalSortGroupExpressionNotSimpleFieldReference, Severity.Error, context.ObjectType, context.ObjectName, "GroupExpression", new string[] { "NaturalGroup" });
					}
				}
			}
			if (grouping.DomainScope != null)
			{
				if (grouping.Parent != null)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidGroupingDomainScopeWithParent, Severity.Error, context.ObjectType, context.ObjectName, "DomainScope", new string[] { grouping.Name, grouping.DomainScope });
				}
				else if (grouping.GroupExpressions.Count == 0)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidGroupingDomainScopeWithDetailGroup, Severity.Error, context.ObjectType, context.ObjectName, "DomainScope", new string[] { grouping.Name, grouping.DomainScope });
				}
				else
				{
					this.m_domainScopeGroups.Add(grouping);
				}
			}
			return grouping;
		}

		// Token: 0x06002409 RID: 9225 RVA: 0x000A3164 File Offset: 0x000A1364
		private void ReadGroupExpressions(List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo> groupExpressions, PublishingContextStruct context)
		{
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("GroupExpressions" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "GroupExpression")
				{
					groupExpressions.Add(this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.GroupExpression, DataType.String, context));
				}
			}
			while (!flag);
		}

		// Token: 0x0600240A RID: 9226 RVA: 0x000A31E8 File Offset: 0x000A13E8
		private List<Variable> ReadVariables(PublishingContextStruct context, bool isGrouping, string groupName)
		{
			List<Variable> list = new List<Variable>();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Variables" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "Variable")
				{
					list.Add(this.ReadVariable(context, isGrouping, groupName));
				}
			}
			while (!flag);
			if (list.Count == 0)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidVariableCount, Severity.Error, context.ObjectType, context.ObjectName, "Variables", Array.Empty<string>());
			}
			else if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.Variables))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "Variables", Array.Empty<string>());
			}
			return list;
		}

		// Token: 0x0600240B RID: 9227 RVA: 0x000A32DC File Offset: 0x000A14DC
		private Variable ReadVariable(PublishingContextStruct context, bool isGrouping, string groupingName)
		{
			Variable variable = new Variable();
			variable.SequenceID = this.GenerateVariableSequenceID();
			variable.Name = this.m_reader.GetAttribute("Name");
			this.m_variableNames.Validate(variable.Name, context.ObjectType, context.ObjectName, context.ErrorContext, isGrouping, groupingName);
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Variable" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "Value"))
					{
						if (localName == "Writable")
						{
							if ((context.Location & (LocationFlags.InDataRegion | LocationFlags.InGrouping)) != (LocationFlags)0)
							{
								context.ErrorContext.Register(ProcessingErrorCode.rsInvalidWritableVariable, Severity.Error, context.ObjectType, context.ObjectName, variable.Name, new string[] { "Variable" });
							}
							else
							{
								variable.Writable = this.m_reader.ReadBoolean(context.ObjectType, variable.Name, "Writable");
								if (variable.Writable)
								{
									this.m_userReferenceLocation |= UserLocationFlags.ReportBody;
								}
							}
						}
					}
					else
					{
						variable.DataType = this.ReadDataTypeAttribute();
						variable.Value = this.ReadExpression(variable.GetPropertyName(), isGrouping ? Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.GroupVariableValue : Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.VariableValue, variable.DataType, context);
					}
				}
			}
			while (!flag);
			if (variable.Value == null)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsMissingExpression, Severity.Error, context.ObjectType, context.ObjectName, "Variable", Array.Empty<string>());
			}
			return variable;
		}

		// Token: 0x0600240C RID: 9228 RVA: 0x000A3494 File Offset: 0x000A1694
		private List<IdcRelationship> ReadRelationships(PublishingContextStruct context)
		{
			List<IdcRelationship> list = new List<IdcRelationship>();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Relationships" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "Relationship")
				{
					list.Add(this.ReadRelationship(context));
				}
			}
			while (!flag);
			if (list.Count == 0)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsElementMustContainChildren, Severity.Error, context.ObjectType, context.ObjectName, "Relationships", new string[] { "Relationship" });
			}
			return list;
		}

		// Token: 0x0600240D RID: 9229 RVA: 0x000A354C File Offset: 0x000A174C
		private IdcRelationship ReadRelationship(PublishingContextStruct context)
		{
			IdcRelationship idcRelationship = new IdcRelationship();
			bool flag = false;
			bool flag2 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Relationship" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "ParentScope"))
					{
						if (!(localName == "NaturalJoin"))
						{
							if (localName == "JoinConditions")
							{
								this.ReadJoinConditions(context, idcRelationship, out flag2);
							}
						}
						else
						{
							idcRelationship.NaturalJoin = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
						}
					}
					else
					{
						idcRelationship.ParentScope = this.m_reader.ReadString();
					}
				}
			}
			while (!flag);
			if (!idcRelationship.NaturalJoin && flag2)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidSortDirectionMustNotBeSpecified, Severity.Error, context.ObjectType, context.ObjectName, "JoinCondition", new string[] { "SortDirection", "ParentScope", idcRelationship.ParentScope });
			}
			return idcRelationship;
		}

		// Token: 0x0600240E RID: 9230 RVA: 0x000A3684 File Offset: 0x000A1884
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship> ReadDefaultRelationships(PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship>();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("DefaultRelationships" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "DefaultRelationship")
				{
					list.Add(this.ReadDefaultRelationship(context));
				}
			}
			while (!flag);
			if (list.Count == 0)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsElementMustContainChildren, Severity.Error, context.ObjectType, context.ObjectName, "DefaultRelationships", new string[] { "DefaultRelationship" });
			}
			return list;
		}

		// Token: 0x0600240F RID: 9231 RVA: 0x000A373C File Offset: 0x000A193C
		private Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship ReadDefaultRelationship(PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship defaultRelationship = new Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship();
			bool flag = false;
			bool flag2 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("DefaultRelationship" == this.m_reader.LocalName)
						{
							flag2 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "RelatedDataSet"))
					{
						if (!(localName == "NaturalJoin"))
						{
							if (localName == "JoinConditions")
							{
								this.ReadJoinConditions(context, defaultRelationship, out flag);
							}
						}
						else
						{
							defaultRelationship.NaturalJoin = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
						}
					}
					else
					{
						defaultRelationship.RelatedDataSetName = this.m_reader.ReadString();
					}
				}
			}
			while (!flag2);
			if (!defaultRelationship.NaturalJoin && flag)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidSortDirectionMustNotBeSpecified, Severity.Error, context.ObjectType, context.ObjectName, "JoinCondition", new string[] { "SortDirection", "RelatedDataSet", defaultRelationship.RelatedDataSetName });
			}
			return defaultRelationship;
		}

		// Token: 0x06002410 RID: 9232 RVA: 0x000A3874 File Offset: 0x000A1A74
		private void ReadJoinConditions(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.Relationship relationship, out bool sortDirectionSpecified)
		{
			bool flag = false;
			sortDirectionSpecified = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("JoinConditions" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "JoinCondition")
				{
					this.ReadJoinCondition(context, relationship, ref sortDirectionSpecified);
				}
			}
			while (!flag);
			if (relationship.JoinConditionCount == 0)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsElementMustContainChildren, Severity.Error, context.ObjectType, context.ObjectName, "JoinConditions", new string[] { "JoinCondition" });
			}
		}

		// Token: 0x06002411 RID: 9233 RVA: 0x000A3924 File Offset: 0x000A1B24
		private void ReadJoinCondition(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.Relationship relationship, ref bool sortDirectionSpecified)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = null;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo2 = null;
			Microsoft.ReportingServices.ReportIntermediateFormat.SortDirection sortDirection = Microsoft.ReportingServices.ReportIntermediateFormat.SortDirection.Ascending;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("JoinCondition" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "ForeignKey"))
					{
						if (!(localName == "PrimaryKey"))
						{
							if (localName == "SortDirection")
							{
								sortDirectionSpecified = true;
								sortDirection = this.ReadSortDirection();
							}
						}
						else
						{
							expressionInfo2 = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.JoinExpression, DataType.String, context);
						}
					}
					else
					{
						expressionInfo = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.JoinExpression, DataType.String, context);
					}
				}
			}
			while (!flag);
			if (expressionInfo == null)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsElementMustContainChild, Severity.Error, context.ObjectType, context.ObjectName, "JoinCondition", new string[] { "ForeignKey" });
			}
			if (expressionInfo2 == null)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsElementMustContainChild, Severity.Error, context.ObjectType, context.ObjectName, "JoinCondition", new string[] { "PrimaryKey" });
			}
			if (expressionInfo != null && expressionInfo2 != null)
			{
				relationship.AddJoinCondition(expressionInfo, expressionInfo2, sortDirection);
			}
		}

		// Token: 0x06002412 RID: 9234 RVA: 0x000A3A75 File Offset: 0x000A1C75
		private Microsoft.ReportingServices.ReportIntermediateFormat.SortDirection ReadSortDirection()
		{
			return (Microsoft.ReportingServices.ReportIntermediateFormat.SortDirection)Enum.Parse(typeof(Microsoft.ReportingServices.ReportIntermediateFormat.SortDirection), this.m_reader.ReadString());
		}

		// Token: 0x06002413 RID: 9235 RVA: 0x000A3A98 File Offset: 0x000A1C98
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadExpression(string expression, string propertyName, string dataSetName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode mode, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, DataType constantType, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionContext expressionContext = context.CreateExpressionContext(expressionType, constantType, propertyName, dataSetName, this.m_publishingContext);
			if (!this.CheckUserProfileDependency())
			{
				return this.m_reportCT.ParseExpression(expression, mode, expressionContext);
			}
			bool flag;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.m_reportCT.ParseExpression(expression, expressionContext, mode, out flag);
			if (flag)
			{
				this.SetUserProfileDependency();
			}
			return expressionInfo;
		}

		// Token: 0x06002414 RID: 9236 RVA: 0x000A3AEC File Offset: 0x000A1CEC
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadExpression(string propertyName, string dataSetName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, DataType constantType, PublishingContextStruct context, out bool userCollectionReferenced)
		{
			Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionContext expressionContext = context.CreateExpressionContext(expressionType, constantType, propertyName, dataSetName, this.m_publishingContext);
			Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode evaluationMode = this.ReadEvaluationModeAttribute();
			return this.m_reportCT.ParseExpression(this.m_reader.ReadString(), expressionContext, evaluationMode, out userCollectionReferenced);
		}

		// Token: 0x06002415 RID: 9237 RVA: 0x000A3B30 File Offset: 0x000A1D30
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadExpression(string propertyName, string dataSetName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, DataType constantType, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode evaluationMode = this.ReadEvaluationModeAttribute();
			return this.ReadExpression(this.m_reader.ReadString(), propertyName, dataSetName, evaluationMode, expressionType, constantType, context);
		}

		// Token: 0x06002416 RID: 9238 RVA: 0x000A3B5D File Offset: 0x000A1D5D
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadExpression(string propertyName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, DataType constantType, PublishingContextStruct context)
		{
			return this.ReadExpression(propertyName, null, expressionType, constantType, context);
		}

		// Token: 0x06002417 RID: 9239 RVA: 0x000A3B6C File Offset: 0x000A1D6C
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadExpression(string propertyName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, DataType constantType, PublishingContextStruct context, out bool computed)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(propertyName, expressionType, constantType, context);
			if (Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant == expressionInfo.Type)
			{
				computed = false;
			}
			else
			{
				computed = true;
			}
			return expressionInfo;
		}

		// Token: 0x06002418 RID: 9240 RVA: 0x000A3B9C File Offset: 0x000A1D9C
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadDocumentMapLabelExpression(string propertyName, PublishingContextStruct context)
		{
			bool flag = false;
			return this.ReadDocumentMapLabelExpression(propertyName, context, out flag);
		}

		// Token: 0x06002419 RID: 9241 RVA: 0x000A3BB8 File Offset: 0x000A1DB8
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadDocumentMapLabelExpression(string propertyName, PublishingContextStruct context, out bool computed)
		{
			Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType = Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General;
			DataType dataType = DataType.String;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = null;
			computed = false;
			if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0)
			{
				if (context.ObjectType != Microsoft.ReportingServices.ReportProcessing.ObjectType.Tablix && context.ObjectType != Microsoft.ReportingServices.ReportProcessing.ObjectType.Subreport && context.ObjectType != Microsoft.ReportingServices.ReportProcessing.ObjectType.Chart && context.ObjectType != Microsoft.ReportingServices.ReportProcessing.ObjectType.GaugePanel && context.ObjectType != Microsoft.ReportingServices.ReportProcessing.ObjectType.Map)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidReportItemInPageSection, Severity.Warning, context.ObjectType, context.ObjectName, "DocumentMapLabel", Array.Empty<string>());
				}
			}
			else
			{
				expressionInfo = this.ReadExpression(propertyName, expressionType, dataType, context, out computed);
				if (expressionInfo != null && (expressionInfo.Type != Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant || !string.IsNullOrEmpty(expressionInfo.StringValue)))
				{
					this.m_hasLabels = true;
				}
			}
			return expressionInfo;
		}

		// Token: 0x0600241A RID: 9242 RVA: 0x000A3C70 File Offset: 0x000A1E70
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadBookmarkExpression(string propertyName, PublishingContextStruct context)
		{
			bool flag = false;
			return this.ReadBookmarkExpression(propertyName, context, out flag);
		}

		// Token: 0x0600241B RID: 9243 RVA: 0x000A3C8C File Offset: 0x000A1E8C
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadBookmarkExpression(string propertyName, PublishingContextStruct context, out bool computed)
		{
			Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType = Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General;
			DataType dataType = DataType.String;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(propertyName, expressionType, dataType, context, out computed);
			if (expressionInfo != null && (expressionInfo.Type != Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant || expressionInfo.StringValue != null))
			{
				this.m_hasBookmarks = true;
			}
			return expressionInfo;
		}

		// Token: 0x0600241C RID: 9244 RVA: 0x000A3CC8 File Offset: 0x000A1EC8
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadExpression(string expression, string propertyName, string dataSetName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, DataType constantType, PublishingContextStruct context, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode evaluationMode, out bool reportParameterReferenced, out string reportParameterName)
		{
			bool flag;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(expression, propertyName, dataSetName, expressionType, constantType, context, evaluationMode, out reportParameterReferenced, out reportParameterName, out flag);
			if (flag)
			{
				this.SetUserProfileDependency();
			}
			return expressionInfo;
		}

		// Token: 0x0600241D RID: 9245 RVA: 0x000A3CF8 File Offset: 0x000A1EF8
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadExpression(string expression, string propertyName, string dataSetName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType, DataType constantType, PublishingContextStruct context, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode evaluationMode, out bool reportParameterReferenced, out string reportParameterName, out bool userCollectionReferenced)
		{
			Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionContext expressionContext = context.CreateExpressionContext(expressionType, constantType, propertyName, dataSetName, this.m_publishingContext);
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.m_reportCT.ParseExpression(expression, expressionContext, evaluationMode, out userCollectionReferenced);
			if (expressionInfo != null && expressionInfo.IsExpression)
			{
				reportParameterReferenced = true;
				reportParameterName = expressionInfo.SimpleParameterName;
			}
			else
			{
				reportParameterName = null;
				reportParameterReferenced = false;
			}
			return expressionInfo;
		}

		// Token: 0x0600241E RID: 9246 RVA: 0x000A3D50 File Offset: 0x000A1F50
		private bool CheckUserProfileDependency()
		{
			bool flag = false;
			if (this.m_reportLocationFlags == UserLocationFlags.ReportBody)
			{
				if ((this.m_userReferenceLocation & UserLocationFlags.ReportBody) == (UserLocationFlags)0)
				{
					flag = true;
				}
			}
			else if (this.m_reportLocationFlags == UserLocationFlags.ReportPageSection)
			{
				if ((this.m_userReferenceLocation & UserLocationFlags.ReportPageSection) == (UserLocationFlags)0)
				{
					flag = true;
				}
			}
			else if (this.m_reportLocationFlags == UserLocationFlags.ReportQueries && (this.m_userReferenceLocation & UserLocationFlags.ReportQueries) == (UserLocationFlags)0)
			{
				flag = true;
			}
			return flag;
		}

		// Token: 0x0600241F RID: 9247 RVA: 0x000A3DA4 File Offset: 0x000A1FA4
		private void SetUserProfileDependency()
		{
			if (this.m_reportLocationFlags == UserLocationFlags.ReportBody)
			{
				this.m_userReferenceLocation |= UserLocationFlags.ReportBody;
				return;
			}
			if (this.m_reportLocationFlags == UserLocationFlags.ReportPageSection)
			{
				this.m_userReferenceLocation |= UserLocationFlags.ReportPageSection;
				return;
			}
			if (this.m_reportLocationFlags == UserLocationFlags.ReportQueries)
			{
				this.m_userReferenceLocation |= UserLocationFlags.ReportQueries;
			}
		}

		// Token: 0x06002420 RID: 9248 RVA: 0x000A3DF8 File Offset: 0x000A1FF8
		private void SetConnectionStringUserProfileDependency()
		{
			this.m_userReferenceLocation |= UserLocationFlags.ReportQueries;
		}

		// Token: 0x06002421 RID: 9249 RVA: 0x000A3E08 File Offset: 0x000A2008
		private Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode ReadEvaluationModeAttribute()
		{
			if (this.m_reader.HasAttributes)
			{
				string attribute = this.m_reader.GetAttribute("EvaluationMode");
				if (attribute != null)
				{
					return (Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode)Enum.Parse(typeof(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode), attribute, false);
				}
			}
			return Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode.Auto;
		}

		// Token: 0x06002422 RID: 9250 RVA: 0x000A3E50 File Offset: 0x000A2050
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadToggleImage(PublishingContextStruct context, out bool computed)
		{
			computed = false;
			this.m_static = true;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = null;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("ToggleImage" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "InitialState")
				{
					expressionInfo = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context, out computed);
				}
			}
			while (!flag);
			return expressionInfo;
		}

		// Token: 0x06002423 RID: 9251 RVA: 0x000A3EDC File Offset: 0x000A20DC
		private Microsoft.ReportingServices.ReportIntermediateFormat.Image ReadImage(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Image image = new Microsoft.ReportingServices.ReportIntermediateFormat.Image(this.GenerateID(), parent);
			image.Name = this.m_reader.GetAttribute("Name");
			context.ObjectType = image.ObjectType;
			context.ObjectName = image.Name;
			bool flag = true;
			if (!this.m_reportItemNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				flag = false;
			}
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			Microsoft.ReportingServices.OnDemandReportRendering.Image.EmbeddingModes? embeddingModes = null;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Image" == this.m_reader.LocalName)
						{
							flag12 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						switch (localName.Length)
						{
						case 3:
						{
							char c = localName[1];
							if (c != 'a')
							{
								if (c == 'o')
								{
									if (localName == "Top")
									{
										image.Top = this.ReadSize();
									}
								}
							}
							else if (localName == "Tag")
							{
								if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.ImageTag))
								{
									context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "Tag", Array.Empty<string>());
								}
								else
								{
									Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag11);
									if (image.Tags == null)
									{
										image.Tags = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo>(1) { expressionInfo };
									}
								}
							}
							break;
						}
						case 4:
						{
							char c = localName[0];
							if (c != 'L')
							{
								if (c == 'T')
								{
									if (localName == "Tags")
									{
										List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo> list = this.ReadImageTagsCollection(context, ref flag11);
										if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.ImageTagsCollection))
										{
											context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "Tags", Array.Empty<string>());
										}
										else
										{
											image.Tags = list;
										}
									}
								}
							}
							else if (localName == "Left")
							{
								image.Left = this.ReadSize();
							}
							break;
						}
						case 5:
							switch (localName[0])
							{
							case 'S':
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context, out flag2);
									styleInformation.Filter(StyleOwnerType.Image, false);
									image.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, context.ErrorContext);
								}
								break;
							case 'V':
								if (localName == "Value")
								{
									image.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag8);
								}
								break;
							case 'W':
								if (localName == "Width")
								{
									image.Width = this.ReadSize();
								}
								break;
							}
							break;
						case 6:
						{
							char c = localName[1];
							if (c <= 'e')
							{
								if (c != 'I')
								{
									if (c == 'e')
									{
										if (localName == "Height")
										{
											image.Height = this.ReadSize();
										}
									}
								}
								else if (localName == "ZIndex")
								{
									image.ZIndex = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
								}
							}
							else if (c != 'i')
							{
								if (c == 'o')
								{
									if (localName == "Source")
									{
										image.Source = this.ReadSource();
									}
								}
							}
							else if (localName == "Sizing")
							{
								image.Sizing = this.ReadSizing();
							}
							break;
						}
						case 7:
							if (localName == "ToolTip")
							{
								image.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag7);
							}
							break;
						case 8:
						{
							char c = localName[0];
							if (c != 'B')
							{
								if (c == 'M')
								{
									if (localName == "MIMEType")
									{
										image.MIMEType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag9);
									}
								}
							}
							else if (localName == "Bookmark")
							{
								image.Bookmark = this.ReadBookmarkExpression(context, out flag6);
							}
							break;
						}
						case 10:
						{
							char c = localName[0];
							if (c != 'A')
							{
								if (c != 'R')
								{
									if (c == 'V')
									{
										if (localName == "Visibility")
										{
											image.Visibility = this.ReadVisibility(context, out flag4);
										}
									}
								}
								else if (localName == "RepeatWith")
								{
									image.RepeatedSibling = true;
									image.RepeatWith = this.m_reader.ReadString();
								}
							}
							else if (localName == "ActionInfo")
							{
								image.Action = this.ReadActionInfo(context, StyleOwnerType.Image, out flag3);
							}
							break;
						}
						case 13:
							if (localName == "EmbeddingMode")
							{
								embeddingModes = new Microsoft.ReportingServices.OnDemandReportRendering.Image.EmbeddingModes?(this.ReadEmbeddingMode(context));
								image.EmbeddingMode = embeddingModes.Value;
							}
							break;
						case 16:
						{
							char c = localName[0];
							if (c != 'C')
							{
								if (c == 'D')
								{
									if (localName == "DocumentMapLabel")
									{
										image.DocumentMapLabel = this.ReadDocumentMapLabelExpression(this.m_reader.LocalName, context, out flag5);
									}
								}
							}
							else if (localName == "CustomProperties")
							{
								image.CustomProperties = this.ReadCustomProperties(context, out flag10);
							}
							break;
						}
						}
					}
				}
			}
			while (!flag12);
			this.ValidateImageEmbeddingMode(context, new Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType?(image.Source), embeddingModes);
			if (Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType.Database == image.Source)
			{
				if (image.Tags == null || !this.m_publishingContext.IsRdlx)
				{
					Global.Tracer.Assert(image.Value != null);
					if (Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant == image.Value.Type)
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsBinaryConstant, Severity.Error, context.ObjectType, context.ObjectName, "Value", Array.Empty<string>());
					}
				}
				if (!PublishingValidator.ValidateMimeType(image.MIMEType, context.ObjectType, context.ObjectName, "MIMEType", context.ErrorContext))
				{
					image.MIMEType = null;
				}
			}
			else
			{
				if (image.Source == Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType.External && Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant == image.Value.Type && image.Value.StringValue != null && image.Value.StringValue.Trim().Length == 0)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidEmptyImageReference, Severity.Error, context.ObjectType, context.ObjectName, "Value", Array.Empty<string>());
				}
				image.MIMEType = null;
			}
			image.Computed = flag2 || flag3 || flag4 || flag10 || flag5 || flag6 || flag7 || flag8 || flag9 || flag11;
			this.m_hasImageStreams = true;
			if (image.Source == Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType.External)
			{
				this.m_hasExternalImages = true;
			}
			if (!flag)
			{
				return null;
			}
			return image;
		}

		// Token: 0x06002424 RID: 9252 RVA: 0x000A4708 File Offset: 0x000A2908
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo> ReadImageTagsCollection(PublishingContextStruct context, ref bool computedTag)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo>();
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (this.m_reader.LocalName == "Tags")
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "Tag")
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out computedTag);
						list.Add(expressionInfo);
					}
				}
				while (!flag);
			}
			return list;
		}

		// Token: 0x06002425 RID: 9253 RVA: 0x000A47A4 File Offset: 0x000A29A4
		private Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType ReadSource()
		{
			string text = this.m_reader.ReadString();
			return (Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType)Enum.Parse(typeof(Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType), text, false);
		}

		// Token: 0x06002426 RID: 9254 RVA: 0x000A47D4 File Offset: 0x000A29D4
		private void ReadBackgroundImage(StyleInformation styleInfo, PublishingContextStruct context, out bool computed)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			string text = null;
			Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType? sourceType = null;
			Microsoft.ReportingServices.OnDemandReportRendering.Image.EmbeddingModes? embeddingModes = null;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("BackgroundImage" == this.m_reader.LocalName)
						{
							flag4 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						int length = localName.Length;
						switch (length)
						{
						case 5:
							if (localName == "Value")
							{
								styleInfo.AddAttribute("BackgroundImageValue", this.ReadExpression("BackgroundImageValue", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag));
							}
							break;
						case 6:
							if (localName == "Source")
							{
								sourceType = new Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType?(this.ReadSource());
								Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.CreateConstExpression((int)sourceType.Value);
								styleInfo.AddAttribute("BackgroundImageSource", expressionInfo);
								Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType? sourceType2 = sourceType;
								Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType sourceType3 = Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType.External;
								if ((sourceType2.GetValueOrDefault() == sourceType3) & (sourceType2 != null))
								{
									this.m_hasExternalImages = true;
								}
							}
							break;
						case 7:
						case 9:
						case 10:
						case 11:
							break;
						case 8:
						{
							char c = localName[0];
							if (c != 'M')
							{
								if (c == 'P')
								{
									if (localName == "Position")
									{
										styleInfo.AddAttribute("Position", this.ReadExpression("Position", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag6));
									}
								}
							}
							else if (localName == "MIMEType")
							{
								styleInfo.AddAttribute("BackgroundImageMIMEType", this.ReadExpression("BackgroundImageMIMEType", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2));
							}
							break;
						}
						case 12:
							if (localName == "Transparency")
							{
								if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.BackgroundImageTransparency))
								{
									context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "Transparency", Array.Empty<string>());
								}
								else
								{
									styleInfo.AddAttribute("Transparency", this.ReadExpression("Transparency", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Float, context, out flag7));
								}
							}
							break;
						case 13:
							if (localName == "EmbeddingMode")
							{
								embeddingModes = new Microsoft.ReportingServices.OnDemandReportRendering.Image.EmbeddingModes?(this.ReadEmbeddingMode(context));
								Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo2 = Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.CreateConstExpression((int)embeddingModes.Value);
								styleInfo.AddAttribute("EmbeddingMode", expressionInfo2);
							}
							break;
						default:
							if (length == 16)
							{
								char c = localName[0];
								if (c != 'B')
								{
									if (c == 'T')
									{
										if (localName == "TransparentColor")
										{
											styleInfo.AddAttribute("TransparentColor", this.ReadExpression("TransparentColor", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag5));
										}
									}
								}
								else if (localName == "BackgroundRepeat")
								{
									if (this.ReadMultiNamespaceStyleAttribute(styleInfo, context, RdlFeatures.BackgroundImageFitting, false, ref text, out flag3))
									{
										StyleInformation.StyleInformationAttribute attributeByName = styleInfo.GetAttributeByName("BackgroundRepeat");
										if (!attributeByName.Value.IsExpression)
										{
											string stringValue = attributeByName.Value.StringValue;
											if (!Validator.ValidateBackgroundRepeatForNamespace(stringValue, text))
											{
												context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlPropertyValue, Severity.Error, context.ObjectType, context.ObjectName, "BackgroundRepeat", new string[] { stringValue });
											}
										}
									}
								}
							}
							break;
						}
					}
				}
			}
			while (!flag4);
			this.ValidateImageEmbeddingMode(context, sourceType, embeddingModes);
			computed = flag || flag2 || flag3 || flag7 || flag5 || flag6;
			this.m_hasImageStreams = true;
		}

		// Token: 0x06002427 RID: 9255 RVA: 0x000A4B94 File Offset: 0x000A2D94
		private void ValidateImageEmbeddingMode(PublishingContextStruct context, Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType? source, Microsoft.ReportingServices.OnDemandReportRendering.Image.EmbeddingModes? embeddingMode)
		{
			if (source.GetValueOrDefault() == Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType.Embedded)
			{
				Microsoft.ReportingServices.OnDemandReportRendering.Image.EmbeddingModes valueOrDefault = embeddingMode.GetValueOrDefault();
				if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.Image_Embedded))
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlPropertyValue, Severity.Error, context.ObjectType, context.ObjectName, "Source", new string[] { source.ToString() });
				}
				if (valueOrDefault == Microsoft.ReportingServices.OnDemandReportRendering.Image.EmbeddingModes.Inline && this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.EmbeddingMode_Inline))
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlPropertyValue, Severity.Error, context.ObjectType, context.ObjectName, "EmbeddingMode", new string[] { valueOrDefault.ToString() });
				}
			}
			if (embeddingMode != null && Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType.Embedded != source.GetValueOrDefault())
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidEmbeddingModeImageProperty, Severity.Error, context.ObjectType, context.ObjectName, "EmbeddingMode", Array.Empty<string>());
			}
		}

		// Token: 0x06002428 RID: 9256 RVA: 0x000A4C98 File Offset: 0x000A2E98
		private Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.ImageInfo> ReadEmbeddedImages(PublishingContextStruct context)
		{
			Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.ImageInfo> dictionary = new Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.ImageInfo>();
			CLSUniqueNameValidator clsuniqueNameValidator = new CLSUniqueNameValidator(ProcessingErrorCode.rsInvalidEmbeddedImageNameNotCLSCompliant, ProcessingErrorCode.rsDuplicateEmbeddedImageName, ProcessingErrorCode.rsInvalidEmbeddedImageNameLength);
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("EmbeddedImages" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "EmbeddedImage")
				{
					this.ReadEmbeddedImage(dictionary, clsuniqueNameValidator, context);
				}
			}
			while (!flag);
			return dictionary;
		}

		// Token: 0x06002429 RID: 9257 RVA: 0x000A4D1C File Offset: 0x000A2F1C
		private void ReadEmbeddedImage(Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.ImageInfo> embeddedImages, CLSUniqueNameValidator embeddedImageNames, PublishingContextStruct context)
		{
			string attribute = this.m_reader.GetAttribute("Name");
			context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.EmbeddedImage;
			context.ObjectName = attribute;
			embeddedImageNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext);
			bool flag = false;
			byte[] array = null;
			string text = null;
			for (;;)
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						goto IL_0118;
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "MIMEType"))
					{
						if (localName == "ImageData")
						{
							string text2 = this.m_reader.ReadString();
							try
							{
								array = Convert.FromBase64String(text2);
								goto IL_0131;
							}
							catch
							{
								context.ErrorContext.Register(ProcessingErrorCode.rsInvalidEmbeddedImage, Severity.Error, context.ObjectType, context.ObjectName, "ImageData", Array.Empty<string>());
								goto IL_0131;
							}
							goto IL_0118;
						}
					}
					else
					{
						text = this.m_reader.ReadString();
						if (!PublishingValidator.ValidateMimeType(text, context.ObjectType, context.ObjectName, this.m_reader.LocalName, context.ErrorContext))
						{
							text = null;
						}
					}
				}
				IL_0131:
				if (flag)
				{
					break;
				}
				continue;
				IL_0118:
				if ("EmbeddedImage" == this.m_reader.LocalName)
				{
					flag = true;
					goto IL_0131;
				}
				goto IL_0131;
			}
			string text3 = Guid.NewGuid().ToString();
			embeddedImages[attribute] = new Microsoft.ReportingServices.ReportIntermediateFormat.ImageInfo(text3, text);
			if (array != null && text != null && this.m_publishingContext.CreateChunkFactory != null)
			{
				using (Stream stream = this.m_publishingContext.CreateChunkFactory.CreateChunk(text3, ReportProcessing.ReportChunkTypes.StaticImage, text))
				{
					stream.Write(array, 0, array.Length);
				}
			}
		}

		// Token: 0x0600242A RID: 9258 RVA: 0x000A4EE4 File Offset: 0x000A30E4
		private Microsoft.ReportingServices.OnDemandReportRendering.Image.Sizings ReadSizing()
		{
			string text = this.m_reader.ReadString();
			return (Microsoft.ReportingServices.OnDemandReportRendering.Image.Sizings)Enum.Parse(typeof(Microsoft.ReportingServices.OnDemandReportRendering.Image.Sizings), text, false);
		}

		// Token: 0x0600242B RID: 9259 RVA: 0x000A4F14 File Offset: 0x000A3114
		private Microsoft.ReportingServices.OnDemandReportRendering.Image.EmbeddingModes ReadEmbeddingMode(PublishingContextStruct context)
		{
			if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.EmbeddingMode))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, "EmbeddingMode", Array.Empty<string>());
			}
			string text = this.m_reader.ReadString();
			return (Microsoft.ReportingServices.OnDemandReportRendering.Image.EmbeddingModes)Enum.Parse(typeof(Microsoft.ReportingServices.OnDemandReportRendering.Image.EmbeddingModes), text, false);
		}

		// Token: 0x0600242C RID: 9260 RVA: 0x000A4F82 File Offset: 0x000A3182
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadQueryOrParameterExpression(PublishingContextStruct context, DataType dataType, ref bool isComplex, Dictionary<string, bool> parametersInQuery)
		{
			return this.ReadQueryOrParameterExpression(this.m_reader.ReadString(), this.m_reader.LocalName, this.ReadEvaluationModeAttribute(), context, dataType, ref isComplex, parametersInQuery);
		}

		// Token: 0x0600242D RID: 9261 RVA: 0x000A4FAC File Offset: 0x000A31AC
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadQueryOrParameterExpression(string expression, string propertyName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode evaluationMode, PublishingContextStruct context, DataType dataType, ref bool isComplex, Dictionary<string, bool> parametersInQuery)
		{
			Global.Tracer.Assert(Microsoft.ReportingServices.ReportProcessing.ObjectType.QueryParameter == context.ObjectType || Microsoft.ReportingServices.ReportProcessing.ObjectType.Query == context.ObjectType || Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSource == context.ObjectType);
			this.m_reportLocationFlags = UserLocationFlags.ReportQueries;
			bool flag;
			string text;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(expression, propertyName, context.ObjectName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.QueryParameter, dataType, context, evaluationMode, out flag, out text);
			if ((this.m_parametersNotUsedInQuery || !isComplex) && flag)
			{
				if (text == null)
				{
					this.m_parametersNotUsedInQuery = false;
					isComplex = true;
				}
				else
				{
					if (!this.m_usedInQueryInfos.Contains(text))
					{
						this.m_usedInQueryInfos.Add(text, true);
					}
					if (!isComplex && parametersInQuery != null)
					{
						parametersInQuery[text] = true;
					}
				}
			}
			this.m_reportLocationFlags = UserLocationFlags.ReportBody;
			return expressionInfo;
		}

		// Token: 0x0600242E RID: 9262 RVA: 0x000A5060 File Offset: 0x000A3260
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef> ReadReportParameters(PublishingContextStruct context)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef>();
			CLSUniqueNameValidator clsuniqueNameValidator = new CLSUniqueNameValidator(ProcessingErrorCode.rsInvalidNameNotCLSCompliant, ProcessingErrorCode.rsDuplicateReportParameterName, ProcessingErrorCode.rsInvalidParameterNameLength, ProcessingErrorCode.rsDuplicateCaseInsensitiveReportParameterName);
			bool flag = false;
			int num = 0;
			Hashtable hashtable = new Hashtable();
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("ReportParameters" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "ReportParameter")
				{
					list.Add(this.ReadReportParameter(clsuniqueNameValidator, hashtable, context, num));
					num++;
				}
			}
			while (!flag);
			return list;
		}

		// Token: 0x0600242F RID: 9263 RVA: 0x000A5104 File Offset: 0x000A3304
		private Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef ReadReportParameter(CLSUniqueNameValidator reportParameterNames, Hashtable parameterNames, PublishingContextStruct context, int count)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef parameterDef = new Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef(this.GenerateID());
			parameterDef.Name = this.m_reader.GetAttribute("Name");
			context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.ReportParameter;
			context.ObjectName = parameterDef.Name;
			reportParameterNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext);
			string text = null;
			string text2 = null;
			bool flag = false;
			string text3 = null;
			bool flag2 = false;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = null;
			List<string> list = null;
			string text4 = null;
			string text5 = null;
			bool flag3 = false;
			bool flag4 = false;
			DataSetReference dataSetReference = null;
			DataSetReference dataSetReference2 = null;
			bool flag5 = false;
			string text6 = null;
			bool flag6 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("ReportParameter" == this.m_reader.LocalName)
						{
							flag6 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						int length = localName.Length;
						switch (length)
						{
						case 6:
						{
							char c = localName[0];
							if (c != 'H')
							{
								if (c == 'P')
								{
									if (localName == "Prompt")
									{
										flag2 = true;
										expressionInfo = this.ReadParameterPromptExpression(this.m_reader.LocalName, context, parameterDef, parameterNames);
									}
								}
							}
							else if (localName == "Hidden")
							{
								flag5 = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						}
						case 7:
						case 9:
							break;
						case 8:
						{
							char c = localName[0];
							if (c != 'D')
							{
								if (c == 'N')
								{
									if (localName == "Nullable")
									{
										text2 = this.m_reader.ReadString();
									}
								}
							}
							else if (localName == "DataType")
							{
								text = this.m_reader.ReadString();
							}
							break;
						}
						case 10:
						{
							char c = localName[0];
							if (c != 'A')
							{
								if (c == 'M')
								{
									if (localName == "MultiValue")
									{
										text4 = this.m_reader.ReadString();
									}
								}
							}
							else if (localName == "AllowBlank")
							{
								text3 = this.m_reader.ReadString();
							}
							break;
						}
						case 11:
						{
							char c = localName[0];
							if (c != 'U')
							{
								if (c == 'V')
								{
									if (localName == "ValidValues")
									{
										flag4 = this.ReadValidValues(context, parameterDef, parameterNames, ref flag3, out dataSetReference);
									}
								}
							}
							else if (localName == "UsedInQuery")
							{
								text5 = this.m_reader.ReadString();
							}
							break;
						}
						case 12:
							if (localName == "DefaultValue")
							{
								flag = true;
								list = this.ReadDefaultValue(context, parameterDef, parameterNames, ref flag3, out dataSetReference2);
							}
							break;
						default:
							if (length == 17)
							{
								if (localName == "UseAllValidValues")
								{
									text6 = this.m_reader.ReadString();
								}
							}
							break;
						}
					}
				}
			}
			while (!flag6);
			if (flag3 && parameterNames.Count > 0)
			{
				parameterDef.Dependencies = (Hashtable)parameterNames.Clone();
			}
			parameterDef.Parse(parameterDef.Name, list, text, text2, expressionInfo, null, text3, text4, text5, flag5, context.ErrorContext, CultureInfo.InvariantCulture, text6);
			if (parameterDef.Nullable && !flag)
			{
				parameterDef.DefaultValues = new object[1];
				parameterDef.DefaultValues[0] = null;
			}
			if (parameterDef.DataType == DataType.Boolean)
			{
				dataSetReference = null;
			}
			if (!flag2 && !flag && !flag5 && (!parameterDef.Nullable || (parameterDef.ValidValuesValueExpressions != null && !flag4)))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsMissingParameterDefault, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
			}
			if (parameterDef.Nullable && parameterDef.MultiValue)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidMultiValueParameter, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
			}
			if (!parameterDef.MultiValue && list != null && list.Count > 1)
			{
				list.RemoveRange(1, list.Count - 1);
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidDefaultValueValues, Severity.Warning, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
			}
			if (dataSetReference2 != null || dataSetReference != null)
			{
				this.m_dynamicParameters.Add(new DynamicParameter(dataSetReference, dataSetReference2, count, flag3));
			}
			if (!parameterNames.ContainsKey(parameterDef.Name))
			{
				parameterNames.Add(parameterDef.Name, count);
			}
			return parameterDef;
		}

		// Token: 0x06002430 RID: 9264 RVA: 0x000A55D8 File Offset: 0x000A37D8
		private List<string> ReadDefaultValue(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef parameter, Hashtable parameterNames, ref bool isComplex, out DataSetReference defaultDataSet)
		{
			bool flag = false;
			bool flag2 = false;
			List<string> list = null;
			defaultDataSet = null;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag3 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("DefaultValue" == this.m_reader.LocalName)
							{
								flag3 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "DataSetReference"))
						{
							if (localName == "Values")
							{
								flag2 = true;
								list = this.ReadValues(context, parameter, parameterNames, ref isComplex);
							}
						}
						else
						{
							flag = true;
							defaultDataSet = this.ReadDataSetReference();
						}
					}
				}
				while (!flag3);
			}
			if (flag == flag2)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidDefaultValue, Severity.Error, context.ObjectType, context.ObjectName, "DefaultValue", Array.Empty<string>());
			}
			return list;
		}

		// Token: 0x06002431 RID: 9265 RVA: 0x000A56BC File Offset: 0x000A38BC
		private List<string> ReadValues(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef parameter, Hashtable parameterNames, ref bool isComplex)
		{
			List<string> list = null;
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo> list2 = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo>();
			bool flag = false;
			bool flag2 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Values" == this.m_reader.LocalName)
						{
							flag2 = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "Value")
				{
					string attribute = this.m_reader.GetAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance");
					Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo;
					if (attribute != null && XmlConvert.ToBoolean(attribute))
					{
						expressionInfo = Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.CreateConstExpression(null);
					}
					else
					{
						expressionInfo = this.ReadParameterExpression(this.m_reader.LocalName, context, parameter, parameterNames, ref flag, ref isComplex);
					}
					list2.Add(expressionInfo);
				}
			}
			while (!flag2);
			if (flag)
			{
				parameter.DefaultExpressions = list2;
			}
			else
			{
				list = new List<string>(list2.Count);
				for (int i = 0; i < list2.Count; i++)
				{
					list.Add(list2[i].StringValue);
				}
			}
			return list;
		}

		// Token: 0x06002432 RID: 9266 RVA: 0x000A57CC File Offset: 0x000A39CC
		private bool ReadValidValues(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef parameter, Hashtable parameterNames, ref bool isComplex, out DataSetReference validValueDataSet)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			validValueDataSet = null;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag4 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("ValidValues" == this.m_reader.LocalName)
							{
								flag4 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "DataSetReference"))
						{
							if (localName == "ParameterValues")
							{
								flag2 = true;
								this.ReadParameterValues(context, parameter, parameterNames, ref isComplex, ref flag3);
							}
						}
						else
						{
							flag = true;
							validValueDataSet = this.ReadDataSetReference();
						}
					}
				}
				while (!flag4);
			}
			if (flag == flag2)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidValidValues, Severity.Error, context.ObjectType, context.ObjectName, "ValidValues", Array.Empty<string>());
			}
			return flag3;
		}

		// Token: 0x06002433 RID: 9267 RVA: 0x000A58B4 File Offset: 0x000A3AB4
		private void ReadParameterValues(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef parameter, Hashtable parameterNames, ref bool isComplex, ref bool containsExplicitNull)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo>();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo> list2 = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo>();
			bool flag = isComplex;
			bool flag2 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("ParameterValues" == this.m_reader.LocalName)
						{
							flag2 = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "ParameterValue")
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = null;
					Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo2 = null;
					if (!this.m_reader.IsEmptyElement)
					{
						bool flag3 = false;
						do
						{
							this.m_reader.Read();
							XmlNodeType nodeType2 = this.m_reader.NodeType;
							if (nodeType2 != XmlNodeType.Element)
							{
								if (nodeType2 == XmlNodeType.EndElement)
								{
									if ("ParameterValue" == this.m_reader.LocalName)
									{
										flag3 = true;
									}
								}
							}
							else
							{
								string localName = this.m_reader.LocalName;
								if (!(localName == "Value"))
								{
									if (localName == "Label")
									{
										expressionInfo2 = this.ReadParameterExpression(this.m_reader.LocalName, context, parameter, parameterNames, ref flag, ref isComplex);
									}
								}
								else
								{
									expressionInfo = this.ReadParameterExpression(this.m_reader.LocalName, context, parameter, parameterNames, ref flag, ref isComplex);
								}
							}
						}
						while (!flag3);
					}
					containsExplicitNull |= expressionInfo == null;
					list.Add(expressionInfo);
					list2.Add(expressionInfo2);
				}
			}
			while (!flag2);
			parameter.ValidValuesValueExpressions = list;
			parameter.ValidValuesLabelExpressions = list2;
		}

		// Token: 0x06002434 RID: 9268 RVA: 0x000A5A28 File Offset: 0x000A3C28
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadParameterExpression(string propertyName, PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef parameter, Hashtable parameterNames, ref bool dynamic, ref bool isComplex)
		{
			string text = null;
			bool flag = false;
			bool flag2;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo;
			if (isComplex)
			{
				dynamic = true;
				expressionInfo = this.ReadExpression(propertyName, null, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.ReportParameter, DataType.String, context, out flag2);
			}
			else
			{
				bool flag3;
				expressionInfo = this.ReadExpression(this.m_reader.ReadString(), propertyName, null, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.ReportParameter, DataType.String, context, this.ReadEvaluationModeAttribute(), out flag3, out text, out flag2);
				if (flag3)
				{
					dynamic = true;
					if (text == null)
					{
						isComplex = true;
					}
					else if (!parameterNames.ContainsKey(text))
					{
						flag = true;
					}
					else
					{
						if (parameter.Dependencies == null)
						{
							parameter.Dependencies = new Hashtable();
						}
						if (!parameter.Dependencies.ContainsKey(text))
						{
							parameter.Dependencies.Add(text, parameterNames[text]);
						}
					}
				}
			}
			if (flag2)
			{
				if (parameter.Name != null && !this.m_reportParamUserProfile.Contains(parameter.Name))
				{
					this.m_reportParamUserProfile.Add(parameter.Name, true);
				}
				this.m_userReferenceLocation |= UserLocationFlags.ReportBody;
			}
			if (flag)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidReportParameterDependency, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.ReportParameter, parameter.Name, "ValidValues", new string[] { text });
			}
			return expressionInfo;
		}

		// Token: 0x06002435 RID: 9269 RVA: 0x000A5B40 File Offset: 0x000A3D40
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadParameterPromptExpression(string propertyName, PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef parameter, Hashtable parameterNames)
		{
			bool flag;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(propertyName, null, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.ReportParameter, DataType.String, context, out flag);
			List<string> referencedParameters = expressionInfo.ReferencedParameters;
			if (referencedParameters != null && referencedParameters.Count > 0)
			{
				foreach (string text in expressionInfo.ReferencedParameters)
				{
					if (!parameterNames.ContainsKey(text))
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsInvalidReportParameterDependency, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.ReportParameter, parameter.Name, "ValidValues", new string[] { text });
						return expressionInfo;
					}
					if (parameter.Dependencies == null)
					{
						parameter.Dependencies = new Hashtable();
					}
					if (!parameter.Dependencies.ContainsKey(text))
					{
						parameter.Dependencies.Add(text, parameterNames[text]);
					}
				}
			}
			if (flag)
			{
				if (parameter.Name != null && !this.m_reportParamUserProfile.Contains(parameter.Name))
				{
					this.m_reportParamUserProfile.Add(parameter.Name, true);
				}
				this.m_userReferenceLocation |= UserLocationFlags.ReportBody;
			}
			return expressionInfo;
		}

		// Token: 0x06002436 RID: 9270 RVA: 0x000A5C70 File Offset: 0x000A3E70
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue> ReadParameters(PublishingContextStruct context, bool doClsValidation)
		{
			bool flag;
			return this.ReadParameters(context, false, doClsValidation, true, out flag);
		}

		// Token: 0x06002437 RID: 9271 RVA: 0x000A5C8C File Offset: 0x000A3E8C
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue> ReadParameters(PublishingContextStruct context, bool omitAllowed, bool doClsValidation, bool isSubreportParameter, out bool computed)
		{
			computed = false;
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue>();
			ParameterNameValidator parameterNameValidator = new ParameterNameValidator();
			string text = (isSubreportParameter ? "SubreportParameters" : "DrillthroughParameters");
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Parameters" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "Parameter")
				{
					bool flag2;
					list.Add(this.ReadParameter(parameterNameValidator, context, text, omitAllowed, doClsValidation, isSubreportParameter, out flag2));
					computed = computed || flag2;
				}
			}
			while (!flag);
			return list;
		}

		// Token: 0x06002438 RID: 9272 RVA: 0x000A5D38 File Offset: 0x000A3F38
		private Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue ReadParameter(ParameterNameValidator parameterNames, PublishingContextStruct context, string propertyNamePrefix, bool omitAllowed, bool doClsValidation, bool isSubreportParameter, out bool computed)
		{
			Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType expressionType = (isSubreportParameter ? Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.SubReportParameter : Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General);
			computed = false;
			bool flag = false;
			bool flag2 = false;
			Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue parameterValue = new Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue();
			parameterValue.Name = this.m_reader.GetAttribute("Name");
			if (doClsValidation)
			{
				parameterNames.Validate(parameterValue.Name, context.ObjectType, context.ObjectName, context.ErrorContext);
			}
			parameterValue.Value = null;
			parameterValue.Omit = null;
			bool flag3 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Parameter" == this.m_reader.LocalName)
						{
							flag3 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "Value"))
					{
						if (localName == "Omit")
						{
							if (omitAllowed)
							{
								parameterValue.Omit = this.ReadExpression(propertyNamePrefix + "." + this.m_reader.LocalName, expressionType, DataType.Boolean, context, out flag2);
							}
						}
					}
					else
					{
						parameterValue.Value = this.ReadExpression(propertyNamePrefix + "." + this.m_reader.LocalName, expressionType, DataType.String, context, out flag);
					}
				}
			}
			while (!flag3);
			computed = flag || flag2;
			return parameterValue;
		}

		// Token: 0x06002439 RID: 9273 RVA: 0x000A5E80 File Offset: 0x000A4080
		private ParametersGridLayout ReadReportParametersLayout(PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef> parameters)
		{
			ParametersGridLayout parametersGridLayout = null;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("ReportParametersLayout" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "GridLayoutDefinition")
				{
					parametersGridLayout = this.ReadGridLayoutDefinition(context);
				}
			}
			while (!flag);
			return parametersGridLayout;
		}

		// Token: 0x0600243A RID: 9274 RVA: 0x000A5EF4 File Offset: 0x000A40F4
		private ParametersGridLayout ReadGridLayoutDefinition(PublishingContextStruct context)
		{
			ParametersGridLayout parametersGridLayout = new ParametersGridLayout();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("GridLayoutDefinition" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "NumberOfColumns"))
					{
						if (!(localName == "NumberOfRows"))
						{
							if (localName == "CellDefinitions")
							{
								parametersGridLayout.CellDefinitions = this.ReadCellDefinitions(context);
							}
						}
						else
						{
							parametersGridLayout.NumberOfRows = this.m_reader.ReadInteger(Microsoft.ReportingServices.ReportProcessing.ObjectType.ParameterLayout, "GridLayoutDefinition", "NumberOfRows");
						}
					}
					else
					{
						parametersGridLayout.NumberOfColumns = this.m_reader.ReadInteger(Microsoft.ReportingServices.ReportProcessing.ObjectType.ParameterLayout, "GridLayoutDefinition", "NumberOfColumns");
					}
				}
			}
			while (!flag);
			return parametersGridLayout;
		}

		// Token: 0x0600243B RID: 9275 RVA: 0x000A5FD4 File Offset: 0x000A41D4
		private ParametersGridCellDefinitionList ReadCellDefinitions(PublishingContextStruct context)
		{
			ParametersGridCellDefinitionList parametersGridCellDefinitionList = new ParametersGridCellDefinitionList();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("CellDefinitions" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "CellDefinition")
				{
					parametersGridCellDefinitionList.Add(this.ReadCellDefinition(context));
				}
			}
			while (!flag);
			return parametersGridCellDefinitionList;
		}

		// Token: 0x0600243C RID: 9276 RVA: 0x000A6050 File Offset: 0x000A4250
		private ParameterGridLayoutCellDefinition ReadCellDefinition(PublishingContextStruct context)
		{
			ParameterGridLayoutCellDefinition parameterGridLayoutCellDefinition = new ParameterGridLayoutCellDefinition();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("CellDefinition" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "RowIndex"))
					{
						if (!(localName == "ColumnIndex"))
						{
							if (localName == "ParameterName")
							{
								parameterGridLayoutCellDefinition.ParameterName = this.m_reader.ReadString();
							}
						}
						else
						{
							parameterGridLayoutCellDefinition.ColumnIndex = this.m_reader.ReadInteger(Microsoft.ReportingServices.ReportProcessing.ObjectType.ParameterLayout, "CellDefinition", "ColumnIndex");
						}
					}
					else
					{
						parameterGridLayoutCellDefinition.RowIndex = this.m_reader.ReadInteger(Microsoft.ReportingServices.ReportProcessing.ObjectType.ParameterLayout, "CellDefinition", "RowIndex");
					}
				}
			}
			while (!flag);
			return parameterGridLayoutCellDefinition;
		}

		// Token: 0x0600243D RID: 9277 RVA: 0x000A6134 File Offset: 0x000A4334
		private Microsoft.ReportingServices.ReportIntermediateFormat.TextBox ReadTextbox(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.TextBox textBox = new Microsoft.ReportingServices.ReportIntermediateFormat.TextBox(this.GenerateID(), parent);
			textBox.Name = this.m_reader.GetAttribute("Name");
			textBox.SequenceID = this.GenerateTextboxSequenceID();
			context.ObjectType = textBox.ObjectType;
			context.ObjectName = textBox.Name;
			bool flag = true;
			if (!this.m_reportItemNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				flag = false;
			}
			Global.Tracer.Assert(!this.m_reportCT.ValueReferenced);
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Textbox" == this.m_reader.LocalName)
						{
							flag11 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						switch (localName.Length)
						{
						case 3:
							if (localName == "Top")
							{
								textBox.Top = this.ReadSize();
							}
							break;
						case 4:
							if (localName == "Left")
							{
								textBox.Left = this.ReadSize();
							}
							break;
						case 5:
						{
							char c = localName[0];
							if (c != 'S')
							{
								if (c == 'W')
								{
									if (localName == "Width")
									{
										textBox.Width = this.ReadSize();
									}
								}
							}
							else if (localName == "Style")
							{
								if (this.m_reportCT.ValueReferenced)
								{
									textBox.ValueReferenced = true;
									this.m_reportCT.ResetValueReferencedFlag();
								}
								StyleInformation styleInformation = this.ReadStyle(context, out flag2);
								styleInformation.Filter(StyleOwnerType.TextBox, false);
								bool flag12;
								textBox.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, textBox.ObjectType, textBox.Name, context.ErrorContext, this.m_reportCT.ValueReferenced && !textBox.ValueReferenced, out flag12);
								if (flag12)
								{
									textBox.ValueReferenced = true;
								}
								this.m_reportCT.ResetValueReferencedFlag();
							}
							break;
						}
						case 6:
						{
							char c = localName[0];
							if (c != 'H')
							{
								if (c == 'Z')
								{
									if (localName == "ZIndex")
									{
										textBox.ZIndex = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
									}
								}
							}
							else if (localName == "Height")
							{
								textBox.Height = this.ReadSize();
							}
							break;
						}
						case 7:
						{
							char c = localName[0];
							if (c != 'C')
							{
								if (c == 'T')
								{
									if (localName == "ToolTip")
									{
										textBox.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag7);
									}
								}
							}
							else if (localName == "CanGrow")
							{
								textBox.CanGrow = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						}
						case 8:
						{
							char c = localName[0];
							if (c != 'B')
							{
								if (c == 'U')
								{
									if (localName == "UserSort")
									{
										this.ReadUserSort(context, textBox, textBoxesWithDefaultSortTarget);
										this.m_hasUserSort = true;
									}
								}
							}
							else if (localName == "Bookmark")
							{
								textBox.Bookmark = this.ReadBookmarkExpression(context, out flag6);
							}
							break;
						}
						case 9:
							if (localName == "CanShrink")
							{
								textBox.CanShrink = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						case 10:
						{
							char c = localName[0];
							if (c <= 'P')
							{
								if (c != 'A')
								{
									if (c == 'P')
									{
										if (localName == "Paragraphs")
										{
											if (this.m_reportCT.ValueReferenced)
											{
												textBox.ValueReferenced = true;
												this.m_reportCT.ResetValueReferencedFlag();
											}
											textBox.Paragraphs = this.ReadParagraphs(context, textBox, out flag8);
										}
									}
								}
								else if (localName == "ActionInfo")
								{
									textBox.Action = this.ReadActionInfo(context, StyleOwnerType.TextBox, out flag3);
								}
							}
							else if (c != 'R')
							{
								if (c == 'V')
								{
									if (localName == "Visibility")
									{
										textBox.Visibility = this.ReadVisibility(context, out flag4);
									}
								}
							}
							else if (localName == "RepeatWith")
							{
								textBox.RepeatedSibling = true;
								textBox.RepeatWith = this.m_reader.ReadString();
							}
							break;
						}
						case 11:
							if (localName == "ToggleImage")
							{
								textBox.InitialToggleState = this.ReadToggleImage(context, out flag9);
							}
							break;
						case 12:
							if (localName == "KeepTogether")
							{
								textBox.KeepTogether = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						case 14:
							if (localName == "HideDuplicates")
							{
								string text = this.m_reader.ReadString();
								if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0 || text == null || text.Length <= 0)
								{
									textBox.HideDuplicates = null;
								}
								else
								{
									textBox.HideDuplicates = text;
								}
							}
							break;
						case 15:
							if (localName == "DataElementName")
							{
								textBox.DataElementName = this.m_reader.ReadString();
							}
							break;
						case 16:
						{
							char c = localName[1];
							if (c != 'a')
							{
								if (c != 'o')
								{
									if (c == 'u')
									{
										if (localName == "CustomProperties")
										{
											textBox.CustomProperties = this.ReadCustomProperties(context, out flag10);
										}
									}
								}
								else if (localName == "DocumentMapLabel")
								{
									textBox.DocumentMapLabel = this.ReadDocumentMapLabelExpression(this.m_reader.LocalName, context, out flag5);
								}
							}
							else if (localName == "DataElementStyle")
							{
								Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem.DataElementStyles dataElementStyles = this.ReadDataElementStyleRDL();
								if (Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem.DataElementStyles.Auto != dataElementStyles)
								{
									textBox.OverrideReportDataElementStyle = true;
									textBox.DataElementStyleAttribute = dataElementStyles == Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem.DataElementStyles.Attribute;
								}
							}
							break;
						}
						case 17:
							if (localName == "DataElementOutput")
							{
								textBox.DataElementOutput = this.ReadDataElementOutput();
							}
							break;
						case 19:
							if (localName == "CanScrollVertically")
							{
								textBox.CanScrollVertically = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						case 22:
							if (localName == "StructureTypeOverwrite")
							{
								StructureTypeOverwriteType structureTypeOverwriteType = this.ReadStructureTypeOverwrite();
								Validator.ValidateTextBoxStructureTypeOverwrite(structureTypeOverwriteType.ToString(), context.ErrorContext, context, this.m_reader.LocalName);
								textBox.StructureTypeOverwrite = structureTypeOverwriteType;
							}
							break;
						}
					}
				}
			}
			while (!flag11);
			textBox.Computed = flag2 || flag3 || flag4 || flag10 || flag5 || flag6 || flag7 || flag8 || flag9 || textBox.UserSort != null || textBox.HideDuplicates != null;
			textBox.ValueReferenced |= this.m_reportCT.ValueReferenced;
			this.m_reportCT.ResetValueReferencedFlag();
			if (!flag)
			{
				return null;
			}
			return textBox;
		}

		// Token: 0x0600243E RID: 9278 RVA: 0x000A69A0 File Offset: 0x000A4BA0
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.Paragraph> ReadParagraphs(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.TextBox textbox, out bool computed)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.Paragraph> paragraphs = textbox.Paragraphs;
			computed = false;
			int num = 0;
			bool flag = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Paragraphs" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "Paragraph")
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.Paragraph paragraph = this.ReadParagraph(context, textbox, num, ref computed);
						paragraphs.Add(paragraph);
						if (paragraph.TextRunValueReferenced)
						{
							textbox.TextRunValueReferenced = true;
						}
						num++;
					}
				}
				while (!flag);
			}
			if (paragraphs.Count > 0)
			{
				return paragraphs;
			}
			return null;
		}

		// Token: 0x0600243F RID: 9279 RVA: 0x000A6A58 File Offset: 0x000A4C58
		private Microsoft.ReportingServices.ReportIntermediateFormat.Paragraph ReadParagraph(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.TextBox textbox, int index, ref bool computed)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Paragraph paragraph = new Microsoft.ReportingServices.ReportIntermediateFormat.Paragraph(textbox, index, this.GenerateID());
			context.ObjectType = paragraph.ObjectType;
			context.ObjectName = paragraph.Name;
			bool flag = false;
			bool flag2 = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Paragraph" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
								if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context, out flag2);
									computed = computed || flag2;
									styleInformation.Filter(StyleOwnerType.Paragraph, false);
									paragraph.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, paragraph.ObjectType, paragraph.Name, context.ErrorContext);
								}
								break;
							case 8:
								if (localName == "TextRuns")
								{
									paragraph.TextRuns = this.ReadTextRuns(context, paragraph, index, ref computed);
								}
								break;
							case 9:
							{
								char c = localName[4];
								if (c != 'L')
								{
									if (c == 'S')
									{
										if (localName == "ListStyle")
										{
											paragraph.ListStyle = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2);
											computed = computed || flag2;
											if (!flag2)
											{
												PublishingValidator.ValidateParagraphListStyle(paragraph.ListStyle.StringValue, paragraph.ObjectType, paragraph.Name, "ListStyle", context.ErrorContext);
											}
										}
									}
								}
								else if (localName == "ListLevel")
								{
									Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context, out flag2);
									paragraph.ListLevel = expressionInfo;
									computed = computed || flag2;
									int? num;
									if (expressionInfo != null && !expressionInfo.IsExpression && !Validator.ValidateParagraphListLevel(expressionInfo.IntValue, out num))
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsOutOfRangeSize, Severity.Error, paragraph.ObjectType, paragraph.Name, "ListLevel", new string[]
										{
											expressionInfo.OriginalText,
											Convert.ToString(0, CultureInfo.InvariantCulture),
											Convert.ToString(9, CultureInfo.InvariantCulture)
										});
									}
								}
								break;
							}
							case 10:
							{
								char c = localName[0];
								if (c != 'L')
								{
									if (c == 'S')
									{
										if (localName == "SpaceAfter")
										{
											paragraph.SpaceAfter = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2);
											computed = computed || flag2;
											if (!flag2)
											{
												PublishingValidator.ValidateSize(paragraph.SpaceAfter.StringValue, paragraph.ObjectType, paragraph.Name, "SpaceAfter", context.ErrorContext);
											}
										}
									}
								}
								else if (localName == "LeftIndent")
								{
									paragraph.LeftIndent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2);
									computed = computed || flag2;
									if (!flag2)
									{
										PublishingValidator.ValidateSize(paragraph.LeftIndent.StringValue, paragraph.ObjectType, paragraph.Name, "LeftIndent", context.ErrorContext);
									}
								}
								break;
							}
							case 11:
							{
								char c = localName[0];
								if (c != 'R')
								{
									if (c == 'S')
									{
										if (localName == "SpaceBefore")
										{
											paragraph.SpaceBefore = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2);
											computed = computed || flag2;
											if (!flag2)
											{
												PublishingValidator.ValidateSize(paragraph.SpaceBefore.StringValue, paragraph.ObjectType, paragraph.Name, "SpaceBefore", context.ErrorContext);
											}
										}
									}
								}
								else if (localName == "RightIndent")
								{
									paragraph.RightIndent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2);
									computed = computed || flag2;
									if (!flag2)
									{
										PublishingValidator.ValidateSize(paragraph.RightIndent.StringValue, paragraph.ObjectType, paragraph.Name, "RightIndent", context.ErrorContext);
									}
								}
								break;
							}
							case 13:
								if (localName == "HangingIndent")
								{
									paragraph.HangingIndent = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2);
									computed = computed || flag2;
									if (!flag2)
									{
										double num2;
										string text;
										PublishingValidator.ValidateSize(paragraph.HangingIndent.StringValue, paragraph.ObjectType, paragraph.Name, "HangingIndent", false, true, context.ErrorContext, out num2, out text);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			return paragraph;
		}

		// Token: 0x06002440 RID: 9280 RVA: 0x000A6F74 File Offset: 0x000A5174
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.TextRun> ReadTextRuns(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.Paragraph paragraph, int paragraphIndex, ref bool computed)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.TextRun> textRuns = paragraph.TextRuns;
			int num = 0;
			bool flag = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("TextRuns" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "TextRun")
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.TextRun textRun = this.ReadTextRun(context, paragraph, paragraphIndex, num, ref computed);
						textRuns.Add(textRun);
						if (textRun.ValueReferenced)
						{
							paragraph.TextRunValueReferenced = true;
						}
						num++;
					}
				}
				while (!flag);
			}
			if (textRuns.Count > 0)
			{
				return textRuns;
			}
			return null;
		}

		// Token: 0x06002441 RID: 9281 RVA: 0x000A7030 File Offset: 0x000A5230
		private Microsoft.ReportingServices.ReportIntermediateFormat.TextRun ReadTextRun(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.Paragraph paragraph, int paragraphIndex, int index, ref bool computed)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.TextRun textRun = new Microsoft.ReportingServices.ReportIntermediateFormat.TextRun(paragraph, index, this.GenerateID());
			context.ObjectType = textRun.ObjectType;
			context.ObjectName = textRun.Name;
			bool flag = false;
			bool flag2 = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("TextRun" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "ActionInfo"))
						{
							if (!(localName == "Style"))
							{
								if (!(localName == "Value"))
								{
									if (!(localName == "Label"))
									{
										if (!(localName == "ToolTip"))
										{
											if (localName == "MarkupType")
											{
												textRun.MarkupType = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2);
												computed = computed || flag2;
												if (!flag2)
												{
													PublishingValidator.ValidateTextRunMarkupType(textRun.MarkupType.StringValue, textRun.ObjectType, textRun.Name, "MarkupType", context.ErrorContext);
												}
											}
										}
										else
										{
											textRun.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2);
											computed = computed || flag2;
										}
									}
									else
									{
										textRun.Label = this.m_reader.ReadString();
									}
								}
								else
								{
									textRun.DataType = this.ReadDataTypeAttribute();
									textRun.Value = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, textRun.DataType, context, out flag2);
									computed = computed || flag2;
								}
							}
							else
							{
								if (this.m_reportCT.ValueReferenced)
								{
									textRun.ValueReferenced = true;
									this.m_reportCT.ResetValueReferencedFlag();
								}
								StyleInformation styleInformation = this.ReadStyle(context, out flag2);
								computed = computed || flag2;
								styleInformation.Filter(StyleOwnerType.TextRun, false);
								bool flag3;
								textRun.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, textRun.ObjectType, textRun.Name, context.ErrorContext, this.m_reportCT.ValueReferenced && !textRun.ValueReferenced, out flag3);
								if (flag3)
								{
									textRun.ValueReferenced = true;
								}
								this.m_reportCT.ResetValueReferencedFlag();
							}
						}
						else
						{
							textRun.Action = this.ReadActionInfo(context, StyleOwnerType.TextRun, out flag2);
							computed = computed || flag2;
						}
					}
				}
				while (!flag);
			}
			if (this.m_reportCT.ValueReferenced)
			{
				textRun.ValueReferenced = true;
				this.m_reportCT.ResetValueReferencedFlag();
			}
			return textRun;
		}

		// Token: 0x06002442 RID: 9282 RVA: 0x000A72D4 File Offset: 0x000A54D4
		private void ReadUserSort(PublishingContextStruct context, Microsoft.ReportingServices.ReportIntermediateFormat.TextBox textbox, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			bool flag = (context.Location & LocationFlags.InPageSection) > (LocationFlags)0;
			bool flag2 = false;
			Microsoft.ReportingServices.ReportIntermediateFormat.EndUserSort endUserSort = new Microsoft.ReportingServices.ReportIntermediateFormat.EndUserSort();
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("UserSort" == this.m_reader.LocalName)
						{
							flag2 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "SortExpression"))
					{
						if (!(localName == "SortExpressionScope"))
						{
							if (localName == "SortTarget")
							{
								this.m_hasUserSortPeerScopes = true;
								endUserSort.SortTargetString = this.m_reader.ReadString();
							}
						}
						else
						{
							endUserSort.SortExpressionScopeString = this.m_reader.ReadString();
						}
					}
					else
					{
						bool flag3;
						endUserSort.SortExpression = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.UserSortExpression, DataType.String, context, out flag3);
					}
				}
			}
			while (!flag2);
			if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.UserSort))
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.Textbox, textbox.Name, "UserSort", Array.Empty<string>());
				return;
			}
			if (flag)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTextboxInPageSection, Severity.Error, textbox.ObjectType, textbox.Name, "UserSort", Array.Empty<string>());
				return;
			}
			textbox.UserSort = endUserSort;
			if (endUserSort.SortTargetString == null)
			{
				if (textBoxesWithDefaultSortTarget != null)
				{
					textBoxesWithDefaultSortTarget.Add(textbox);
					return;
				}
			}
			else
			{
				this.m_textBoxesWithUserSortTarget.Add(textbox);
			}
		}

		// Token: 0x06002443 RID: 9283 RVA: 0x000A7454 File Offset: 0x000A5654
		private Microsoft.ReportingServices.ReportIntermediateFormat.Rectangle ReadRectangle(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Rectangle rectangle = new Microsoft.ReportingServices.ReportIntermediateFormat.Rectangle(this.GenerateID(), this.GenerateID(), parent);
			rectangle.Name = this.m_reader.GetAttribute("Name");
			context.ObjectType = rectangle.ObjectType;
			context.ObjectName = rectangle.Name;
			bool flag = true;
			if (!this.m_reportItemNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				flag = false;
			}
			this.m_reportItemCollectionList.Add(rectangle.ReportItems);
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			string text = null;
			Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = null;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Rectangle" == this.m_reader.LocalName)
							{
								flag9 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 3:
								if (localName == "Top")
								{
									rectangle.Top = this.ReadSize();
								}
								break;
							case 4:
								if (localName == "Left")
								{
									rectangle.Left = this.ReadSize();
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											rectangle.Width = this.ReadSize();
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context, out flag2);
									styleInformation.Filter(StyleOwnerType.Rectangle, false);
									rectangle.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, context.ErrorContext);
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'Z')
									{
										if (localName == "ZIndex")
										{
											rectangle.ZIndex = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "Height")
								{
									rectangle.Height = this.ReadSize();
								}
								break;
							}
							case 7:
								if (localName == "ToolTip")
								{
									rectangle.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag6);
								}
								break;
							case 8:
							{
								char c = localName[0];
								if (c != 'B')
								{
									if (c == 'P')
									{
										if (localName == "PageName")
										{
											bool flag10;
											rectangle.PageName = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag10);
										}
									}
								}
								else if (localName == "Bookmark")
								{
									rectangle.Bookmark = this.ReadBookmarkExpression(context, out flag5);
								}
								break;
							}
							case 9:
								if (localName == "PageBreak")
								{
									this.ReadPageBreak(rectangle, context);
								}
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'R')
								{
									if (c == 'V')
									{
										if (localName == "Visibility")
										{
											rectangle.Visibility = this.ReadVisibility(context, out flag3);
										}
									}
								}
								else if (localName == "RepeatWith")
								{
									rectangle.RepeatedSibling = true;
									rectangle.RepeatWith = this.m_reader.ReadString();
								}
								break;
							}
							case 11:
							{
								char c = localName[0];
								if (c != 'L')
								{
									if (c == 'R')
									{
										if (localName == "ReportItems")
										{
											this.ReadReportItems(null, rectangle, rectangle.ReportItems, context, textBoxesWithDefaultSortTarget, out flag7);
										}
									}
								}
								else if (localName == "LinkToChild")
								{
									text = this.m_reader.ReadString();
								}
								break;
							}
							case 12:
								if (localName == "KeepTogether")
								{
									rectangle.KeepTogether = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
								}
								break;
							case 15:
								if (localName == "DataElementName")
								{
									rectangle.DataElementName = this.m_reader.ReadString();
								}
								break;
							case 16:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'D')
									{
										if (localName == "DocumentMapLabel")
										{
											expressionInfo = this.ReadDocumentMapLabelExpression(this.m_reader.LocalName, context, out flag4);
											rectangle.DocumentMapLabel = expressionInfo;
										}
									}
								}
								else if (localName == "CustomProperties")
								{
									rectangle.CustomProperties = this.ReadCustomProperties(context, out flag8);
								}
								break;
							}
							case 17:
								if (localName == "DataElementOutput")
								{
									rectangle.DataElementOutput = this.ReadDataElementOutput();
								}
								break;
							case 21:
								if (localName == "OmitBorderOnPageBreak")
								{
									rectangle.OmitBorderOnPageBreak = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
								}
								break;
							}
						}
					}
				}
				while (!flag9);
			}
			rectangle.Computed = flag2 || flag3 || flag4 || flag5 || flag7 || flag6 || flag8 || (rectangle.PageBreak != null && rectangle.PageBreak.BreakLocation > PageBreakLocation.None);
			if (expressionInfo != null && text != null)
			{
				rectangle.ReportItems.LinkToChild = text;
			}
			if (!flag)
			{
				return null;
			}
			return rectangle;
		}

		// Token: 0x06002444 RID: 9284 RVA: 0x000A7ABC File Offset: 0x000A5CBC
		private Microsoft.ReportingServices.ReportIntermediateFormat.Line ReadLine(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Line line = new Microsoft.ReportingServices.ReportIntermediateFormat.Line(this.GenerateID(), parent);
			line.Name = this.m_reader.GetAttribute("Name");
			context.ObjectType = line.ObjectType;
			context.ObjectName = line.Name;
			bool flag = true;
			if (!this.m_reportItemNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				flag = false;
			}
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Line" == this.m_reader.LocalName)
							{
								flag7 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							int length = localName.Length;
							switch (length)
							{
							case 3:
								if (localName == "Top")
								{
									line.Top = this.ReadSize();
								}
								break;
							case 4:
								if (localName == "Left")
								{
									line.Left = this.ReadSize();
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'S')
								{
									if (c == 'W')
									{
										if (localName == "Width")
										{
											line.Width = this.ReadSize();
										}
									}
								}
								else if (localName == "Style")
								{
									StyleInformation styleInformation = this.ReadStyle(context, out flag2);
									styleInformation.Filter(StyleOwnerType.Line, false);
									line.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, context.ErrorContext);
								}
								break;
							}
							case 6:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c == 'Z')
									{
										if (localName == "ZIndex")
										{
											line.ZIndex = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "Height")
								{
									line.Height = this.ReadSize();
								}
								break;
							}
							case 7:
							case 9:
								break;
							case 8:
								if (localName == "Bookmark")
								{
									line.Bookmark = this.ReadBookmarkExpression(context, out flag5);
								}
								break;
							case 10:
							{
								char c = localName[0];
								if (c != 'R')
								{
									if (c == 'V')
									{
										if (localName == "Visibility")
										{
											line.Visibility = this.ReadVisibility(context, out flag3);
										}
									}
								}
								else if (localName == "RepeatWith")
								{
									line.RepeatedSibling = true;
									line.RepeatWith = this.m_reader.ReadString();
								}
								break;
							}
							default:
								if (length == 16)
								{
									char c = localName[0];
									if (c != 'C')
									{
										if (c == 'D')
										{
											if (localName == "DocumentMapLabel")
											{
												line.DocumentMapLabel = this.ReadDocumentMapLabelExpression(this.m_reader.LocalName, context, out flag4);
											}
										}
									}
									else if (localName == "CustomProperties")
									{
										line.CustomProperties = this.ReadCustomProperties(context, out flag6);
									}
								}
								break;
							}
						}
					}
				}
				while (!flag7);
			}
			line.Computed = flag2 || flag3 || flag4 || flag5 || flag6;
			if (!flag)
			{
				return null;
			}
			return line;
		}

		// Token: 0x06002445 RID: 9285 RVA: 0x000A7E90 File Offset: 0x000A6090
		private StyleInformation ReadStyle(PublishingContextStruct context, out bool computed)
		{
			computed = false;
			StyleInformation styleInformation = new StyleInformation();
			if (!this.m_reader.IsEmptyElement)
			{
				string text = null;
				string text2 = null;
				string text3 = null;
				string text4 = null;
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Style" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						bool flag2 = false;
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
								if (!(localName == "Color"))
								{
									goto IL_0681;
								}
								this.ReadMultiNamespaceStyleAttribute(styleInformation, context, RdlFeatures.ThemeColors, true, ref text2, out flag2);
								goto IL_0681;
							case 6:
							{
								char c = localName[0];
								if (c != 'B')
								{
									if (c != 'F')
									{
										goto IL_0681;
									}
									if (!(localName == "Format"))
									{
										goto IL_0681;
									}
								}
								else
								{
									if (!(localName == "Border"))
									{
										goto IL_0681;
									}
									this.ReadBorderAttributes("", styleInformation, context, out flag2);
									goto IL_0681;
								}
								break;
							}
							case 7:
							case 17:
							case 18:
							case 20:
							case 21:
							case 23:
							case 24:
							case 25:
								goto IL_0681;
							case 8:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c != 'F')
									{
										if (c != 'L')
										{
											goto IL_0681;
										}
										if (!(localName == "Language"))
										{
											goto IL_0681;
										}
									}
									else if (!(localName == "FontSize"))
									{
										goto IL_0681;
									}
								}
								else if (!(localName == "Calendar"))
								{
									goto IL_0681;
								}
								break;
							}
							case 9:
							{
								char c = localName[2];
								switch (c)
								{
								case 'n':
									if (!(localName == "FontStyle"))
									{
										goto IL_0681;
									}
									break;
								case 'o':
								case 'q':
									goto IL_0681;
								case 'p':
									if (!(localName == "TopBorder"))
									{
										goto IL_0681;
									}
									this.ReadBorderAttributes("Top", styleInformation, context, out flag2);
									goto IL_0681;
								case 'r':
									if (!(localName == "Direction"))
									{
										goto IL_0681;
									}
									break;
								default:
									if (c != 'x')
									{
										goto IL_0681;
									}
									if (!(localName == "TextAlign"))
									{
										goto IL_0681;
									}
									break;
								}
								break;
							}
							case 10:
							{
								char c = localName[4];
								switch (c)
								{
								case 'B':
									if (!(localName == "LeftBorder"))
									{
										goto IL_0681;
									}
									this.ReadBorderAttributes("Left", styleInformation, context, out flag2);
									goto IL_0681;
								case 'C':
								case 'D':
								case 'G':
									goto IL_0681;
								case 'E':
									if (!(localName == "TextEffect"))
									{
										goto IL_0681;
									}
									break;
								case 'F':
									if (!(localName == "FontFamily"))
									{
										goto IL_0681;
									}
									this.ReadMultiNamespaceStyleAttribute(styleInformation, context, RdlFeatures.ThemeFonts, true, ref text, out flag2);
									goto IL_0681;
								case 'H':
									if (!(localName == "LineHeight"))
									{
										goto IL_0681;
									}
									break;
								default:
									if (c != 'W')
									{
										if (c != 'i')
										{
											goto IL_0681;
										}
										if (!(localName == "PaddingTop"))
										{
											goto IL_0681;
										}
									}
									else if (!(localName == "FontWeight"))
									{
										goto IL_0681;
									}
									break;
								}
								break;
							}
							case 11:
								switch (localName[0])
								{
								case 'P':
									if (!(localName == "PaddingLeft"))
									{
										goto IL_0681;
									}
									break;
								case 'Q':
								case 'T':
								case 'V':
									goto IL_0681;
								case 'R':
									if (!(localName == "RightBorder"))
									{
										goto IL_0681;
									}
									this.ReadBorderAttributes("Right", styleInformation, context, out flag2);
									goto IL_0681;
								case 'S':
									if (!(localName == "ShadowColor"))
									{
										goto IL_0681;
									}
									break;
								case 'U':
									if (!(localName == "UnicodeBiDi"))
									{
										goto IL_0681;
									}
									break;
								case 'W':
									if (!(localName == "WritingMode"))
									{
										goto IL_0681;
									}
									break;
								default:
									goto IL_0681;
								}
								break;
							case 12:
							{
								char c = localName[0];
								if (c != 'B')
								{
									if (c != 'P')
									{
										if (c != 'S')
										{
											goto IL_0681;
										}
										if (!(localName == "ShadowOffset"))
										{
											goto IL_0681;
										}
									}
									else if (!(localName == "PaddingRight"))
									{
										goto IL_0681;
									}
								}
								else
								{
									if (!(localName == "BottomBorder"))
									{
										goto IL_0681;
									}
									this.ReadBorderAttributes("Bottom", styleInformation, context, out flag2);
									goto IL_0681;
								}
								break;
							}
							case 13:
							{
								char c = localName[0];
								if (c != 'P')
								{
									if (c != 'V')
									{
										goto IL_0681;
									}
									if (!(localName == "VerticalAlign"))
									{
										goto IL_0681;
									}
								}
								else if (!(localName == "PaddingBottom"))
								{
									goto IL_0681;
								}
								break;
							}
							case 14:
							{
								char c = localName[0];
								if (c != 'N')
								{
									if (c != 'T')
									{
										goto IL_0681;
									}
									if (!(localName == "TextDecoration"))
									{
										goto IL_0681;
									}
								}
								else
								{
									if (!(localName == "NumeralVariant"))
									{
										goto IL_0681;
									}
									styleInformation.AddAttribute(this.m_reader.LocalName, this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Integer, context, out flag2));
									goto IL_0681;
								}
								break;
							}
							case 15:
							{
								char c = localName[10];
								if (c != 'C')
								{
									if (c != 'I')
									{
										if (c != 'g')
										{
											goto IL_0681;
										}
										if (!(localName == "NumeralLanguage"))
										{
											goto IL_0681;
										}
									}
									else
									{
										if (!(localName == "BackgroundImage"))
										{
											goto IL_0681;
										}
										this.ReadBackgroundImage(styleInformation, context, out flag2);
										goto IL_0681;
									}
								}
								else
								{
									if (!(localName == "BackgroundColor"))
									{
										goto IL_0681;
									}
									this.ReadMultiNamespaceStyleAttribute(styleInformation, context, RdlFeatures.ThemeColors, true, ref text3, out flag2);
									goto IL_0681;
								}
								break;
							}
							case 16:
								if (!(localName == "CurrencyLanguage"))
								{
									goto IL_0681;
								}
								this.ReadMultiNamespaceStyleAttribute(styleInformation, context, RdlFeatures.CellLevelFormatting, true, ref text4, out flag2);
								goto IL_0681;
							case 19:
								if (!(localName == "BackgroundHatchType"))
								{
									goto IL_0681;
								}
								break;
							case 22:
								if (!(localName == "BackgroundGradientType"))
								{
									goto IL_0681;
								}
								break;
							case 26:
								if (!(localName == "BackgroundGradientEndColor"))
								{
									goto IL_0681;
								}
								break;
							default:
								goto IL_0681;
							}
							styleInformation.AddAttribute(this.m_reader.LocalName, this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2));
						}
						IL_0681:
						computed = computed || flag2;
					}
				}
				while (!flag);
			}
			return styleInformation;
		}

		// Token: 0x06002446 RID: 9286 RVA: 0x000A854C File Offset: 0x000A674C
		private bool ReadMultiNamespaceStyleAttribute(StyleInformation styleInfo, PublishingContextStruct context, RdlFeatures feature, bool readValueType, ref string attributeNamespace, out bool computedAttribute)
		{
			computedAttribute = false;
			string localName = this.m_reader.LocalName;
			if (attributeNamespace == null || RdlNamespaceComparer.Instance.Compare(this.m_reader.NamespaceURI, attributeNamespace) > 0)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.ValueType valueType = Microsoft.ReportingServices.ReportIntermediateFormat.ValueType.Constant;
				if (this.m_reader.NamespaceURI == "http://schemas.microsoft.com/sqlserver/reporting/2012/01/reportdefinition" || this.m_reader.NamespaceURI == "http://schemas.microsoft.com/sqlserver/reporting/2013/01/reportdefinition")
				{
					if (this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(feature))
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, context.ObjectName, localName, Array.Empty<string>());
					}
					if (readValueType)
					{
						string attribute = this.m_reader.GetAttribute("ValueType", this.m_reader.NamespaceURI);
						if (!string.IsNullOrEmpty(attribute))
						{
							valueType = (Microsoft.ReportingServices.ReportIntermediateFormat.ValueType)Enum.Parse(typeof(Microsoft.ReportingServices.ReportIntermediateFormat.ValueType), attribute);
						}
					}
				}
				if (attributeNamespace != null)
				{
					styleInfo.RemoveAttribute(localName);
				}
				attributeNamespace = this.m_reader.NamespaceURI;
				Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.ReadExpression(localName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out computedAttribute);
				if (feature == RdlFeatures.ThemeFonts && string.IsNullOrEmpty(expressionInfo.StringValue))
				{
					expressionInfo.StringValue = "Arial";
				}
				styleInfo.AddAttribute(localName, expressionInfo, valueType);
				return true;
			}
			return false;
		}

		// Token: 0x06002447 RID: 9287 RVA: 0x000A8688 File Offset: 0x000A6888
		private StyleInformation ReadStyle(PublishingContextStruct context)
		{
			bool flag;
			return this.ReadStyle(context, out flag);
		}

		// Token: 0x06002448 RID: 9288 RVA: 0x000A86A0 File Offset: 0x000A68A0
		private void ReadBorderAttributes(string borderLocation, StyleInformation styleInfo, PublishingContextStruct context, out bool computed)
		{
			computed = false;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if (borderLocation + "Border" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						bool flag2 = false;
						string localName = this.m_reader.LocalName;
						if (!(localName == "Color"))
						{
							if (!(localName == "Style"))
							{
								if (localName == "Width")
								{
									styleInfo.AddAttribute("BorderWidth" + borderLocation, this.ReadExpression("BorderWidth", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2));
								}
							}
							else
							{
								styleInfo.AddAttribute("BorderStyle" + borderLocation, this.ReadExpression("BorderStyle", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2));
							}
						}
						else
						{
							styleInfo.AddAttribute("BorderColor" + borderLocation, this.ReadExpression("BorderColor", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context, out flag2));
						}
						computed = computed || flag2;
					}
				}
				while (!flag);
			}
		}

		// Token: 0x06002449 RID: 9289 RVA: 0x000A87BC File Offset: 0x000A69BC
		private string ReadSize()
		{
			return this.m_reader.ReadString();
		}

		// Token: 0x0600244A RID: 9290 RVA: 0x000A87C9 File Offset: 0x000A69C9
		private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo ReadSizeExpression(PublishingContextStruct context)
		{
			return this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
		}

		// Token: 0x0600244B RID: 9291 RVA: 0x000A87E0 File Offset: 0x000A69E0
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataSet.TriState ReadTriState()
		{
			string text = this.m_reader.ReadString();
			return (Microsoft.ReportingServices.ReportIntermediateFormat.DataSet.TriState)Enum.Parse(typeof(Microsoft.ReportingServices.ReportIntermediateFormat.DataSet.TriState), text, false);
		}

		// Token: 0x0600244C RID: 9292 RVA: 0x000A8810 File Offset: 0x000A6A10
		private Microsoft.ReportingServices.ReportIntermediateFormat.Visibility ReadVisibility(PublishingContextStruct context, out bool computed)
		{
			this.m_static = true;
			Microsoft.ReportingServices.ReportIntermediateFormat.Visibility visibility = new Microsoft.ReportingServices.ReportIntermediateFormat.Visibility();
			bool flag = false;
			bool flag2 = false;
			context.PrefixPropertyName = "Visibility.";
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag3 = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("Visibility" == this.m_reader.LocalName)
							{
								flag3 = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "Hidden"))
						{
							if (localName == "ToggleItem")
							{
								flag2 = true;
								if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0)
								{
									context.ErrorContext.Register(ProcessingErrorCode.rsToggleInPageSection, Severity.Error, context.ObjectType, context.ObjectName, "ToggleItem", Array.Empty<string>());
								}
								this.m_interactive = true;
								visibility.Toggle = this.m_reader.ReadString();
							}
						}
						else
						{
							visibility.Hidden = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.Boolean, context, out flag);
						}
					}
				}
				while (!flag3);
			}
			computed = flag || flag2;
			return visibility;
		}

		// Token: 0x0600244D RID: 9293 RVA: 0x000A893C File Offset: 0x000A6B3C
		private Microsoft.ReportingServices.ReportIntermediateFormat.Visibility ReadVisibility(PublishingContextStruct context)
		{
			bool flag;
			return this.ReadVisibility(context, out flag);
		}

		// Token: 0x0600244E RID: 9294 RVA: 0x000A8954 File Offset: 0x000A6B54
		private Microsoft.ReportingServices.ReportIntermediateFormat.Tablix ReadTablix(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix = new Microsoft.ReportingServices.ReportIntermediateFormat.Tablix(this.GenerateID(), parent);
			tablix.Name = this.m_reader.GetAttribute("Name");
			bool flag = false;
			if ((context.Location & LocationFlags.InDataRegion) == (LocationFlags)0)
			{
				flag = true;
				this.m_nestedDataRegions = new List<Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion>();
			}
			else
			{
				Global.Tracer.Assert(this.m_nestedDataRegions != null);
				this.m_nestedDataRegions.Add(tablix);
			}
			context.Location |= LocationFlags.InDataSet | LocationFlags.InDataRegion;
			context.ObjectType = tablix.ObjectType;
			context.ObjectName = tablix.Name;
			this.RegisterDataRegion(tablix);
			bool flag2 = true;
			if (!this.m_reportItemNames.Validate(context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				flag2 = false;
			}
			if (this.m_scopeNames.Validate(false, context.ObjectName, context.ObjectType, context.ObjectName, context.ErrorContext))
			{
				this.m_reportScopes.Add(tablix.Name, tablix);
			}
			else
			{
				flag2 = false;
			}
			if ((context.Location & LocationFlags.InPageSection) != (LocationFlags)0)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsDataRegionInPageSection, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
				flag2 = false;
			}
			StyleInformation styleInformation = null;
			bool flag3 = false;
			List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox>();
			IdcRelationship idcRelationship = null;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Tablix" == this.m_reader.LocalName)
						{
							flag3 = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						switch (localName.Length)
						{
						case 3:
							if (localName == "Top")
							{
								tablix.Top = this.ReadSize();
							}
							break;
						case 4:
							if (localName == "Left")
							{
								tablix.Left = this.ReadSize();
							}
							break;
						case 5:
						{
							char c = localName[0];
							if (c != 'S')
							{
								if (c == 'W')
								{
									if (localName == "Width")
									{
										tablix.Width = this.ReadSize();
									}
								}
							}
							else if (localName == "Style")
							{
								styleInformation = this.ReadStyle(context);
							}
							break;
						}
						case 6:
						{
							char c = localName[0];
							if (c != 'H')
							{
								if (c == 'Z')
								{
									if (localName == "ZIndex")
									{
										tablix.ZIndex = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
									}
								}
							}
							else if (localName == "Height")
							{
								tablix.Height = this.ReadSize();
							}
							break;
						}
						case 7:
						{
							char c = localName[0];
							if (c != 'F')
							{
								if (c == 'T')
								{
									if (localName == "ToolTip")
									{
										tablix.ToolTip = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
									}
								}
							}
							else if (localName == "Filters")
							{
								tablix.Filters = this.ReadFilters(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.DataRegionFilters, context);
							}
							break;
						}
						case 8:
						{
							char c = localName[0];
							if (c != 'B')
							{
								if (c == 'P')
								{
									if (localName == "PageName")
									{
										tablix.PageName = this.ReadPageNameExpression(context);
									}
								}
							}
							else if (localName == "Bookmark")
							{
								tablix.Bookmark = this.ReadBookmarkExpression(this.m_reader.LocalName, context);
							}
							break;
						}
						case 9:
						{
							char c = localName[0];
							if (c != 'C')
							{
								if (c != 'P')
								{
									if (c == 'T')
									{
										if (localName == "TopMargin")
										{
											tablix.TopMargin = this.ReadSizeExpression(context);
										}
									}
								}
								else if (localName == "PageBreak")
								{
									this.ReadPageBreak(tablix, context);
								}
							}
							else if (localName == "CanScroll")
							{
								tablix.CanScroll = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						}
						case 10:
						{
							char c = localName[0];
							if (c != 'L')
							{
								if (c != 'T')
								{
									if (c == 'V')
									{
										if (localName == "Visibility")
										{
											tablix.Visibility = this.ReadVisibility(context);
										}
									}
								}
								else if (localName == "TablixBody")
								{
									this.ReadTablixBody(tablix, context, list);
								}
							}
							else if (localName == "LeftMargin")
							{
								tablix.LeftMargin = this.ReadSizeExpression(context);
							}
							break;
						}
						case 11:
						{
							char c = localName[0];
							if (c != 'D')
							{
								if (c == 'R')
								{
									if (localName == "RightMargin")
									{
										tablix.RightMargin = this.ReadSizeExpression(context);
									}
								}
							}
							else if (localName == "DataSetName")
							{
								tablix.DataSetName = this.m_reader.ReadString();
							}
							break;
						}
						case 12:
						{
							char c = localName[0];
							if (c <= 'K')
							{
								if (c != 'B')
								{
									if (c == 'K')
									{
										if (localName == "KeepTogether")
										{
											tablix.KeepTogether = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "BottomMargin")
								{
									tablix.BottomMargin = this.ReadSizeExpression(context);
								}
							}
							else if (c != 'R')
							{
								if (c == 'T')
								{
									if (localName == "TablixCorner")
									{
										this.ReadTablixCorner(tablix, context, list);
									}
								}
							}
							else if (localName == "Relationship")
							{
								idcRelationship = this.ReadRelationship(context);
							}
							break;
						}
						case 13:
							if (localName == "NoRowsMessage")
							{
								tablix.NoRowsMessage = this.ReadExpression(this.m_reader.LocalName, Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.General, DataType.String, context);
							}
							break;
						case 15:
						{
							char c = localName[0];
							if (c <= 'F')
							{
								if (c != 'D')
								{
									if (c == 'F')
									{
										if (localName == "FixedRowHeaders")
										{
											tablix.FixedRowHeaders = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "DataElementName")
								{
									tablix.DataElementName = this.m_reader.ReadString();
								}
							}
							else if (c != 'L')
							{
								if (c == 'S')
								{
									if (localName == "SortExpressions")
									{
										tablix.Sorting = this.ReadSortExpressions(true, context);
									}
								}
							}
							else if (localName == "LayoutDirection")
							{
								tablix.LayoutDirection = this.ReadLayoutDirection();
							}
							break;
						}
						case 16:
						{
							char c = localName[0];
							if (c != 'C')
							{
								if (c != 'D')
								{
									if (c == 'R')
									{
										if (localName == "RepeatRowHeaders")
										{
											tablix.RepeatRowHeaders = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										}
									}
								}
								else if (localName == "DocumentMapLabel")
								{
									tablix.DocumentMapLabel = this.ReadDocumentMapLabelExpression(this.m_reader.LocalName, context);
								}
							}
							else if (localName == "CustomProperties")
							{
								tablix.CustomProperties = this.ReadCustomProperties(context);
							}
							break;
						}
						case 17:
						{
							char c = localName[0];
							if (c != 'B')
							{
								if (c == 'D')
								{
									if (localName == "DataElementOutput")
									{
										tablix.DataElementOutput = this.ReadDataElementOutput();
									}
								}
							}
							else if (localName == "BandLayoutOptions")
							{
								tablix.BandLayout = this.ReadBandLayoutOptions(tablix, context);
							}
							break;
						}
						case 18:
						{
							char c = localName[0];
							if (c != 'F')
							{
								if (c == 'T')
								{
									if (localName == "TablixRowHierarchy")
									{
										tablix.TablixRowMembers = this.ReadTablixHierarchy(tablix, context, list, false, ref flag2);
									}
								}
							}
							else if (localName == "FixedColumnHeaders")
							{
								tablix.FixedColumnHeaders = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						}
						case 19:
							if (localName == "RepeatColumnHeaders")
							{
								tablix.RepeatColumnHeaders = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						case 21:
						{
							char c = localName[0];
							if (c != 'O')
							{
								if (c == 'T')
								{
									if (localName == "TablixColumnHierarchy")
									{
										tablix.TablixColumnMembers = this.ReadTablixHierarchy(tablix, context, list, true, ref flag2);
									}
								}
							}
							else if (localName == "OmitBorderOnPageBreak")
							{
								tablix.OmitBorderOnPageBreak = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						}
						case 22:
							if (localName == "GroupsBeforeRowHeaders")
							{
								tablix.GroupsBeforeRowHeaders = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							}
							break;
						}
					}
				}
			}
			while (!flag3);
			tablix.InitializationData.IsTopLevelDataRegion = flag;
			if (tablix.BandLayout != null)
			{
				tablix.ValidateBandStructure(context);
			}
			tablix.DataScopeInfo.SetRelationship(tablix.DataSetName, idcRelationship);
			if (tablix.Height == null)
			{
				tablix.ComputeHeight = true;
			}
			if (tablix.Width == null)
			{
				tablix.ComputeWidth = true;
			}
			if (styleInformation != null)
			{
				styleInformation.Filter(StyleOwnerType.Tablix, tablix.NoRowsMessage != null);
				tablix.StyleClass = PublishingValidator.ValidateAndCreateStyle(styleInformation.Attributes, context.ObjectType, context.ObjectName, context.ErrorContext);
			}
			this.SetSortTargetForTextBoxes(list, tablix);
			tablix.Computed = true;
			if (flag2)
			{
				this.m_createSubtotalsDefs.Add(tablix);
				if (tablix.Corner == null && tablix.ColumnHeaderRowCount > 0 && tablix.RowHeaderColumnCount > 0)
				{
					tablix.Corner = new List<List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell>>(1)
					{
						new List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell>(1)
						{
							new Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell(this.GenerateID(), tablix)
							{
								RowSpan = tablix.ColumnHeaderRowCount,
								ColSpan = tablix.RowHeaderColumnCount
							}
						}
					};
				}
			}
			if (!flag2)
			{
				return null;
			}
			return tablix;
		}

		// Token: 0x0600244F RID: 9295 RVA: 0x000A958C File Offset: 0x000A778C
		private TablixMemberList ReadTablixHierarchy(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget, bool isColumnHierarchy, ref bool validName)
		{
			TablixMemberList tablixMemberList = null;
			bool flag = false;
			int num = 0;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if (this.m_reader.LocalName == (isColumnHierarchy ? "TablixColumnHierarchy" : "TablixRowHierarchy"))
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "TablixMembers"))
					{
						if (localName == "EnableDrilldown")
						{
							bool flag2 = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
							if (flag2 && this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.TablixHierarchy_EnableDrilldown))
							{
								context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFeatureRdlElement, Severity.Error, context.ObjectType, tablix.Name, "EnableDrilldown", Array.Empty<string>());
							}
							if (isColumnHierarchy)
							{
								tablix.EnableColumnDrilldown = flag2;
							}
							else
							{
								tablix.EnableRowDrilldown = flag2;
							}
						}
					}
					else
					{
						bool flag3;
						tablixMemberList = this.ReadTablixMembers(tablix, null, context, textBoxesWithDefaultSortTarget, isColumnHierarchy, 0, ref num, ref validName, out flag3);
					}
				}
			}
			while (!flag);
			this.ValidateHeaderSizesAndSetSpans(tablix, context, tablixMemberList, isColumnHierarchy);
			if (isColumnHierarchy)
			{
				tablix.ColumnCount = num;
			}
			else
			{
				tablix.RowCount = num;
			}
			return tablixMemberList;
		}

		// Token: 0x06002450 RID: 9296 RVA: 0x000A96DC File Offset: 0x000A78DC
		private void ValidateHeaderSizesAndSetSpans(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, TablixMemberList members, bool isColumnHierarchy)
		{
			bool hasError = context.ErrorContext.HasError;
			context.ErrorContext.HasError = false;
			this.m_headerLevelSizeList = new SortedList<double, Pair<double, int>>(Validator.DoubleComparer.Instance);
			this.m_headerLevelSizeList.Add(0.0, new Pair<double, int>(0.0, 0));
			this.m_firstCumulativeHeaderSize = -1.0;
			int num = 0;
			int num2;
			this.ValidateHeaderSizes(context, members, isColumnHierarchy, 0.0, 0, ref num, out num2);
			IList<Pair<double, int>> values = this.m_headerLevelSizeList.Values;
			int totalSpanCount = this.GetTotalSpanCount();
			if (isColumnHierarchy)
			{
				tablix.InitializationData.ColumnHeaderLevelSizeList = values;
				tablix.ColumnHeaderRowCount = totalSpanCount;
			}
			else
			{
				tablix.InitializationData.RowHeaderLevelSizeList = values;
				tablix.RowHeaderColumnCount = totalSpanCount;
			}
			if (!context.ErrorContext.HasError)
			{
				bool[] array = new bool[totalSpanCount];
				this.SetHeaderSpans(context, members, isColumnHierarchy, 0.0, false, 0, array);
			}
			context.ErrorContext.HasError = hasError;
		}

		// Token: 0x06002451 RID: 9297 RVA: 0x000A97E4 File Offset: 0x000A79E4
		private int GetTotalSpanCount()
		{
			int num = -1;
			for (int i = 0; i < this.m_headerLevelSizeList.Count; i++)
			{
				num += this.m_headerLevelSizeList.Values[i].Second + 1;
			}
			return num;
		}

		// Token: 0x06002452 RID: 9298 RVA: 0x000A9828 File Offset: 0x000A7A28
		private bool ValidateHeaderSizes(PublishingContextStruct context, TablixMemberList members, bool isColumnHierarchy, double ancestorHeaderSize, int consecutiveZeroHeightAncestorCount, ref int rowOrColumnNumber, out int maxConsecutiveZeroHeightDescendentCount)
		{
			bool? flag = null;
			bool flag2 = false;
			maxConsecutiveZeroHeightDescendentCount = 0;
			bool flag3 = false;
			for (int i = 0; i < members.Count; i++)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.TablixMember tablixMember = members[i];
				tablixMember.ConsecutiveZeroHeightAncestorCount = consecutiveZeroHeightAncestorCount;
				flag2 = false;
				double num = 0.0;
				double num2 = 0.0;
				bool flag4 = false;
				if (tablixMember.TablixHeader != null)
				{
					flag2 = true;
					num = tablixMember.TablixHeader.SizeValue;
					num2 = ancestorHeaderSize + num;
					if (num == 0.0)
					{
						flag4 = true;
						flag3 = true;
						int second = this.m_headerLevelSizeList[num2].Second;
						this.m_headerLevelSizeList[num2] = new Pair<double, int>(num2, Math.Max(consecutiveZeroHeightAncestorCount + 1, second));
					}
					else if (!this.m_headerLevelSizeList.ContainsKey(num2))
					{
						this.m_headerLevelSizeList.Add(num2, new Pair<double, int>(num2, 0));
					}
				}
				if (tablixMember.SubMembers != null)
				{
					int num3;
					flag2 |= this.ValidateHeaderSizes(context, tablixMember.SubMembers, isColumnHierarchy, ancestorHeaderSize + num, flag4 ? (consecutiveZeroHeightAncestorCount + 1) : 0, ref rowOrColumnNumber, out num3);
					maxConsecutiveZeroHeightDescendentCount = Math.Max(num3, maxConsecutiveZeroHeightDescendentCount);
					tablixMember.ConsecutiveZeroHeightDescendentCount = maxConsecutiveZeroHeightDescendentCount;
				}
				else
				{
					rowOrColumnNumber++;
				}
				if (tablixMember.IsInnerMostMemberWithHeader)
				{
					int num4 = 0;
					if (tablixMember.SubMembers != null)
					{
						if (isColumnHierarchy)
						{
							num4 = tablixMember.ColSpan - 1;
						}
						else
						{
							num4 = tablixMember.RowSpan - 1;
						}
					}
					if (this.m_firstCumulativeHeaderSize == -1.0)
					{
						this.m_firstCumulativeHeaderSize = num2;
					}
					else
					{
						double num5 = Math.Round(this.m_firstCumulativeHeaderSize, 4);
						double num6 = Math.Round(num2, 4);
						if (Validator.CompareDoubles(num5, num6) != 0)
						{
							context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTablixHeaderSize, Severity.Error, context.ObjectType, context.ObjectName, isColumnHierarchy ? "TablixColumnHierarchy" : "TablixRowHierarchy", new string[]
							{
								"TablixHeader.Size",
								(rowOrColumnNumber - num4).ToString(CultureInfo.InvariantCulture.NumberFormat),
								num5.ToString(CultureInfo.InvariantCulture.NumberFormat) + "mm",
								num6.ToString(CultureInfo.InvariantCulture.NumberFormat) + "mm",
								isColumnHierarchy ? "TablixColumn" : "TablixRow"
							});
						}
					}
				}
				if (flag == null)
				{
					flag = new bool?(flag2);
				}
				if (flag2 != flag.Value)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTablixHeaders, Severity.Error, context.ObjectType, context.ObjectName, isColumnHierarchy ? "TablixColumnHierarchy" : "TablixRowHierarchy", new string[]
					{
						"TablixMember",
						"TablixHeader",
						members[i].Level.ToString(CultureInfo.InvariantCulture.NumberFormat)
					});
				}
			}
			if (flag3)
			{
				maxConsecutiveZeroHeightDescendentCount++;
			}
			else
			{
				maxConsecutiveZeroHeightDescendentCount = 0;
			}
			return flag2;
		}

		// Token: 0x06002453 RID: 9299 RVA: 0x000A9B1C File Offset: 0x000A7D1C
		private void SetHeaderSpans(PublishingContextStruct context, TablixMemberList members, bool isColumnHierarchy, double ancestorHeaderSize, bool outerConsumedInnerZeroHeightLevel, int parentHeaderLevelPlusSpans, bool[] parentHeaderLevelHasStaticArray)
		{
			for (int i = 0; i < members.Count; i++)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.TablixMember tablixMember = members[i];
				double num = 0.0;
				int num2 = 0;
				bool flag = false;
				if (tablixMember.TablixHeader != null)
				{
					num = tablixMember.TablixHeader.SizeValue;
					if (num == 0.0)
					{
						flag = outerConsumedInnerZeroHeightLevel;
						num2 = 1;
					}
					else
					{
						num2 = this.GetSpans(tablixMember, ancestorHeaderSize, num, outerConsumedInnerZeroHeightLevel, out flag);
					}
					if (isColumnHierarchy)
					{
						tablixMember.RowSpan = num2;
					}
					else
					{
						tablixMember.ColSpan = num2;
					}
					tablixMember.HeaderLevel = parentHeaderLevelPlusSpans;
					if (parentHeaderLevelHasStaticArray != null)
					{
						parentHeaderLevelHasStaticArray[parentHeaderLevelPlusSpans] |= tablixMember.IsStatic;
					}
				}
				bool[] array = parentHeaderLevelHasStaticArray;
				if (tablixMember.HasConditionalOrToggleableVisibility)
				{
					array = new bool[parentHeaderLevelHasStaticArray.Length];
					tablixMember.HeaderLevelHasStaticArray = array;
				}
				if (tablixMember.SubMembers != null)
				{
					double num3 = ancestorHeaderSize + num;
					this.SetHeaderSpans(context, tablixMember.SubMembers, isColumnHierarchy, num3, flag, parentHeaderLevelPlusSpans + num2, array);
				}
				if (parentHeaderLevelHasStaticArray != null && tablixMember.HasConditionalOrToggleableVisibility)
				{
					for (int j = tablixMember.HeaderLevel + 1; j < parentHeaderLevelHasStaticArray.Length; j++)
					{
						parentHeaderLevelHasStaticArray[j] |= array[j];
					}
				}
			}
		}

		// Token: 0x06002454 RID: 9300 RVA: 0x000A9C40 File Offset: 0x000A7E40
		private int GetSpans(Microsoft.ReportingServices.ReportIntermediateFormat.TablixMember member, double ancestorHeaderSize, double headerSize, bool outerConsumedInnerZeroHeightLevel, out bool consumedInnerZeroHeightLevel)
		{
			double num = ancestorHeaderSize + headerSize;
			int num2 = 0;
			consumedInnerZeroHeightLevel = false;
			int num3 = this.m_headerLevelSizeList.IndexOfKey(ancestorHeaderSize);
			if (!outerConsumedInnerZeroHeightLevel)
			{
				int num4 = this.m_headerLevelSizeList.Values[num3].Second;
				if (num4 > 0)
				{
					num2 += num4 - member.ConsecutiveZeroHeightAncestorCount;
				}
			}
			int i = num3 + 1;
			while (i < this.m_headerLevelSizeList.Count)
			{
				double first = this.m_headerLevelSizeList.Values[i].First;
				int num4 = this.m_headerLevelSizeList.Values[i].Second;
				num2++;
				if (Validator.CompareDoubles(first, num) == 0)
				{
					if (num4 <= 0)
					{
						break;
					}
					int num5 = num4 - member.ConsecutiveZeroHeightDescendentCount;
					if (num5 > 0)
					{
						consumedInnerZeroHeightLevel = true;
						num2 += num5;
						break;
					}
					break;
				}
				else
				{
					num2 += num4;
					i++;
				}
			}
			return num2;
		}

		// Token: 0x06002455 RID: 9301 RVA: 0x000A9D08 File Offset: 0x000A7F08
		private TablixMemberList ReadTablixMembers(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, Microsoft.ReportingServices.ReportIntermediateFormat.TablixMember parentMember, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget, bool isColumnHierarchy, int level, ref int leafNodes, ref bool validName, out bool innerMostMemberWithHeaderFound)
		{
			TablixMemberList tablixMemberList = new TablixMemberList();
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			innerMostMemberWithHeaderFound = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixMembers" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "TablixMember")
				{
					int num = leafNodes;
					List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox>();
					Microsoft.ReportingServices.ReportIntermediateFormat.TablixMember tablixMember = this.ReadTablixMember(tablix, context, list, isColumnHierarchy, level, ref leafNodes, ref flag4, ref validName, out innerMostMemberWithHeaderFound);
					tablixMember.ParentMember = parentMember;
					if (level == 0)
					{
						if (flag3)
						{
							if (tablixMember.FixedData)
							{
								context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFixedDataNotContiguous, Severity.Error, context.ObjectType, context.ObjectName, "FixedData", new string[] { isColumnHierarchy ? "TablixColumnHierarchy" : "TablixRowHierarchy" });
							}
						}
						else if (flag2)
						{
							if (tablixMember.FixedData)
							{
								tablix.InitializationData.FixedColLength += tablixMember.ColSpan;
							}
							else
							{
								flag3 = true;
							}
						}
						else if (tablixMember.FixedData)
						{
							if (isColumnHierarchy)
							{
								tablix.InitializationData.HasFixedColData = true;
								tablix.InitializationData.FixedColStartIndex = num;
								tablix.InitializationData.FixedColLength = tablixMember.ColSpan;
							}
							else
							{
								tablix.InitializationData.HasFixedRowData = true;
							}
							flag2 = true;
						}
					}
					else
					{
						if (tablixMember.FixedData && !parentMember.FixedData)
						{
							context.ErrorContext.Register(ProcessingErrorCode.rsInvalidFixedDataInHierarchy, Severity.Warning, context.ObjectType, context.ObjectName, "FixedData", new string[] { isColumnHierarchy ? "TablixColumnHierarchy" : "TablixRowHierarchy" });
						}
						tablixMember.FixedData = parentMember.FixedData;
					}
					tablixMemberList.Add(tablixMember);
					if (tablixMember.Grouping != null)
					{
						this.SetSortTargetForTextBoxes(list, tablixMember.Grouping);
					}
					else
					{
						textBoxesWithDefaultSortTarget.AddRange(list);
					}
				}
			}
			while (!flag);
			if (flag4)
			{
				foreach (object obj in tablixMemberList)
				{
					((Microsoft.ReportingServices.ReportIntermediateFormat.TablixMember)obj).HasStaticPeerWithHeader = true;
				}
			}
			if (tablixMemberList.Count <= 0)
			{
				return null;
			}
			return tablixMemberList;
		}

		// Token: 0x06002456 RID: 9302 RVA: 0x000A9F7C File Offset: 0x000A817C
		private Microsoft.ReportingServices.ReportIntermediateFormat.TablixMember ReadTablixMember(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget, bool isColumnHierarchy, int level, ref int aLeafNodes, ref bool isStaticWithHeader, ref bool validName, out bool innerMostMemberWithHeaderFound)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.TablixMember tablixMember = new Microsoft.ReportingServices.ReportIntermediateFormat.TablixMember(this.GenerateID(), tablix);
			this.m_runningValueHolderList.Add(tablixMember);
			tablixMember.IsColumn = isColumnHierarchy;
			tablixMember.Level = level;
			innerMostMemberWithHeaderFound = false;
			bool flag = false;
			bool flag2 = false;
			int num = 0;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("TablixMember" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 5:
								if (localName == "Group")
								{
									tablixMember.Grouping = this.ReadGrouping(tablixMember, context, ref validName);
								}
								break;
							case 9:
								if (localName == "FixedData")
								{
									tablixMember.FixedData = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
								}
								break;
							case 10:
								if (localName == "Visibility")
								{
									tablixMember.Visibility = this.ReadVisibility(context, out flag2);
								}
								break;
							case 12:
							{
								char c = localName[0];
								if (c != 'H')
								{
									if (c != 'K')
									{
										if (c == 'T')
										{
											if (localName == "TablixHeader")
											{
												tablixMember.TablixHeader = this.ReadTablixHeader(tablix, context, textBoxesWithDefaultSortTarget);
												tablixMember.TablixHeader.SizeValue = context.ValidateSize(tablixMember.TablixHeader.Size, isColumnHierarchy ? "Height" : "Width", context.ErrorContext);
											}
										}
									}
									else if (localName == "KeepTogether")
									{
										tablixMember.KeepTogether = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
										tablixMember.KeepTogetherSpecified = true;
									}
								}
								else if (localName == "HideIfNoRows")
								{
									tablixMember.HideIfNoRows = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
								}
								break;
							}
							case 13:
							{
								char c = localName[0];
								if (c != 'K')
								{
									if (c == 'T')
									{
										if (localName == "TablixMembers")
										{
											tablixMember.SubMembers = this.ReadTablixMembers(tablix, tablixMember, context, textBoxesWithDefaultSortTarget, isColumnHierarchy, level + 1, ref num, ref validName, out innerMostMemberWithHeaderFound);
										}
									}
								}
								else if (localName == "KeepWithGroup")
								{
									tablixMember.KeepWithGroup = (KeepWithGroup)Enum.Parse(typeof(KeepWithGroup), this.m_reader.ReadString());
								}
								break;
							}
							case 15:
							{
								char c = localName[0];
								if (c != 'D')
								{
									if (c != 'R')
									{
										if (c == 'S')
										{
											if (localName == "SortExpressions")
											{
												tablixMember.Sorting = this.ReadSortExpressions(false, context);
											}
										}
									}
									else if (localName == "RepeatOnNewPage")
									{
										tablixMember.RepeatOnNewPage = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
									}
								}
								else if (localName == "DataElementName")
								{
									tablixMember.DataElementName = this.m_reader.ReadString();
								}
								break;
							}
							case 16:
								if (localName == "CustomProperties")
								{
									tablixMember.CustomProperties = this.ReadCustomProperties(context);
								}
								break;
							case 17:
								if (localName == "DataElementOutput")
								{
									tablixMember.DataElementOutput = this.ReadDataElementOutput();
								}
								break;
							}
						}
					}
				}
				while (!flag);
			}
			if (!innerMostMemberWithHeaderFound && tablixMember.TablixHeader != null)
			{
				tablixMember.IsInnerMostMemberWithHeader = true;
				innerMostMemberWithHeaderFound = true;
			}
			if (tablixMember.SubMembers == null || tablixMember.SubMembers.Count == 0)
			{
				aLeafNodes++;
				if (isColumnHierarchy)
				{
					tablixMember.ColSpan = 1;
				}
				else
				{
					tablixMember.RowSpan = 1;
				}
			}
			else
			{
				aLeafNodes += num;
				if (isColumnHierarchy)
				{
					tablixMember.ColSpan = num;
				}
				else
				{
					tablixMember.RowSpan = num;
				}
			}
			this.ValidateAndProcessMemberGroupAndSort(tablixMember, context);
			if (tablixMember.IsStatic && tablixMember.TablixHeader != null)
			{
				isStaticWithHeader = true;
			}
			if (isColumnHierarchy)
			{
				if (tablixMember.KeepWithGroup != KeepWithGroup.None)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidKeepWithGroupOnColumnTablixMember, Severity.Error, context.ObjectType, context.ObjectName, "TablixMember", new string[] { "KeepWithGroup", "None" });
				}
				if (tablixMember.RepeatOnNewPage)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidRepeatOnNewPageOnColumnTablixMember, Severity.Error, context.ObjectType, context.ObjectName, "TablixMember", new string[] { "RepeatOnNewPage" });
				}
			}
			return tablixMember;
		}

		// Token: 0x06002457 RID: 9303 RVA: 0x000AA4CC File Offset: 0x000A86CC
		private Microsoft.ReportingServices.ReportIntermediateFormat.TablixHeader ReadTablixHeader(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.TablixHeader tablixHeader = new Microsoft.ReportingServices.ReportIntermediateFormat.TablixHeader(this.GenerateID());
			int? num = null;
			int? num2 = null;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixHeader" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "Size"))
					{
						if (localName == "CellContents")
						{
							Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem reportItem;
							tablixHeader.CellContents = this.ReadCellContents(tablix, context, textBoxesWithDefaultSortTarget, true, out reportItem, out num, out num2);
							tablixHeader.AltCellContents = reportItem;
						}
					}
					else
					{
						tablixHeader.Size = this.ReadSize();
					}
				}
			}
			while (!flag);
			return tablixHeader;
		}

		// Token: 0x06002458 RID: 9304 RVA: 0x000AA598 File Offset: 0x000A8798
		private void ReadTablixCorner(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixCorner" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "TablixCornerRows")
				{
					tablix.Corner = this.ReadTablixCornerRows(tablix, context, textBoxesWithDefaultSortTarget);
				}
			}
			while (!flag);
		}

		// Token: 0x06002459 RID: 9305 RVA: 0x000AA610 File Offset: 0x000A8810
		private List<List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell>> ReadTablixCornerRows(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			List<List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell>> list = new List<List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell>>();
			int[] array = null;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixCornerRows" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "TablixCornerRow")
				{
					List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell> list2 = this.ReadTablixCornerRow(tablix, context, array, textBoxesWithDefaultSortTarget);
					if (array == null)
					{
						array = new int[list2.Count];
						for (int i = 0; i < array.Length; i++)
						{
							array[i] = 1;
						}
					}
					else if (array.Length != list2.Count)
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsInconsistentNumberofCellsInRow, Severity.Error, context.ObjectType, context.ObjectName, "TablixCorner", Array.Empty<string>());
						int num = array.Length;
						if (num < list2.Count)
						{
							int j = 0;
							int[] array2 = new int[list2.Count];
							while (j < num)
							{
								array2[j] = array[j];
								j++;
							}
							while (j < array2.Length)
							{
								array2[j] = 1;
								j++;
							}
							array = array2;
						}
					}
					for (int k = 0; k < list2.Count; k++)
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell tablixCornerCell = list2[k];
						if (array[k] <= 1)
						{
							array[k] = tablixCornerCell.RowSpan;
							if (tablixCornerCell.RowSpan > 1 && tablixCornerCell.ColSpan > 1)
							{
								for (int l = 1; l < tablixCornerCell.ColSpan; l++)
								{
									k++;
									if (k == array.Length)
									{
										context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTablixCornerCellSpan, Severity.Error, context.ObjectType, context.ObjectName, "ColSpan", Array.Empty<string>());
										break;
									}
									array[k] = tablixCornerCell.RowSpan;
								}
							}
						}
						else
						{
							array[k]--;
						}
					}
					list.Add(list2);
				}
			}
			while (!flag);
			return list;
		}

		// Token: 0x0600245A RID: 9306 RVA: 0x000AA808 File Offset: 0x000A8A08
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell> ReadTablixCornerRow(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, int[] rowSpans, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell>();
			bool flag = false;
			int num = 1;
			int num2 = 0;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixCornerRow" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "TablixCornerCell")
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell tablixCornerCell = this.ReadTablixCornerCell(tablix, context, num > 1 || (rowSpans != null && rowSpans.Length > num2 && rowSpans[num2] > 1), textBoxesWithDefaultSortTarget);
					if (num <= 1)
					{
						num = tablixCornerCell.ColSpan;
					}
					else
					{
						num--;
					}
					list.Add(tablixCornerCell);
					num2++;
				}
			}
			while (!flag);
			return list;
		}

		// Token: 0x0600245B RID: 9307 RVA: 0x000AA8C4 File Offset: 0x000A8AC4
		private Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell ReadTablixCornerCell(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, bool shouldBeEmpty, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell tablixCornerCell = new Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell(this.GenerateID(), tablix);
			bool flag = false;
			int? num = null;
			int? num2 = null;
			if (!this.m_reader.IsEmptyElement)
			{
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("TablixCornerCell" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else if (this.m_reader.LocalName == "CellContents")
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem reportItem;
						tablixCornerCell.CellContents = this.ReadCellContents(tablix, context, textBoxesWithDefaultSortTarget, true, out reportItem, out num2, out num);
						tablixCornerCell.AltCellContents = reportItem;
					}
				}
				while (!flag);
			}
			if (shouldBeEmpty)
			{
				if (tablixCornerCell.CellContents != null)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsCellContentsNotOmitted, Severity.Error, context.ObjectType, context.ObjectName, "TablixCornerCell", Array.Empty<string>());
				}
				if (num2 != null)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTablixCornerCellSpan, Severity.Error, context.ObjectType, context.ObjectName, "ColSpan", Array.Empty<string>());
				}
				if (num != null)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTablixCornerCellSpan, Severity.Error, context.ObjectType, context.ObjectName, "RowSpan", Array.Empty<string>());
				}
			}
			else if (tablixCornerCell.CellContents == null)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsCellContentsRequired, Severity.Error, context.ObjectType, context.ObjectName, "TablixCornerCell", Array.Empty<string>());
			}
			else
			{
				if (num == null)
				{
					tablixCornerCell.RowSpan = 1;
				}
				else
				{
					int? num3 = num;
					int num4 = 0;
					if ((num3.GetValueOrDefault() == num4) & (num3 != null))
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTablixCornerCellSpan, Severity.Error, context.ObjectType, context.ObjectName, "RowSpan", Array.Empty<string>());
					}
					else
					{
						tablixCornerCell.RowSpan = num.Value;
					}
				}
				if (num2 == null)
				{
					tablixCornerCell.ColSpan = 1;
				}
				else
				{
					int? num3 = num2;
					int num4 = 0;
					if ((num3.GetValueOrDefault() == num4) & (num3 != null))
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTablixCornerCellSpan, Severity.Error, context.ObjectType, context.ObjectName, "ColSpan", Array.Empty<string>());
					}
					else
					{
						tablixCornerCell.ColSpan = num2.Value;
					}
				}
			}
			return tablixCornerCell;
		}

		// Token: 0x0600245C RID: 9308 RVA: 0x000AAB28 File Offset: 0x000A8D28
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixColumn> ReadTablixColumns(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixColumn> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.TablixColumn>();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixColumns" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "TablixColumn")
				{
					list.Add(this.ReadTablixColumn(tablix, context, textBoxesWithDefaultSortTarget));
				}
			}
			while (!flag);
			return list;
		}

		// Token: 0x0600245D RID: 9309 RVA: 0x000AABA8 File Offset: 0x000A8DA8
		private Microsoft.ReportingServices.ReportIntermediateFormat.TablixRow ReadTablixRow(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.TablixRow tablixRow = new Microsoft.ReportingServices.ReportIntermediateFormat.TablixRow(this.GenerateID());
			int num = -1;
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixRow" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "Height"))
					{
						if (localName == "TablixCells")
						{
							tablixRow.TablixCells = this.ReadTablixCells(tablix, context, textBoxesWithDefaultSortTarget);
							if (num > 0 && tablixRow.Cells.Count != num)
							{
								context.ErrorContext.Register(ProcessingErrorCode.rsInconsistentNumberofCellsInRow, Severity.Error, context.ObjectType, context.ObjectName, "Tablix", Array.Empty<string>());
							}
							num = tablixRow.Cells.Count;
						}
					}
					else
					{
						tablixRow.Height = this.ReadSize();
					}
				}
			}
			while (!flag);
			if (tablixRow.Cells == null)
			{
				tablixRow.TablixCells = new TablixCellList();
			}
			return tablixRow;
		}

		// Token: 0x0600245E RID: 9310 RVA: 0x000AACB8 File Offset: 0x000A8EB8
		private TablixCellList ReadTablixCells(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			TablixCellList tablixCellList = new TablixCellList();
			bool flag = false;
			int num = 1;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixCells" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "TablixCell")
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.TablixCell tablixCell = this.ReadTablixCell(tablix, context, num > 1, textBoxesWithDefaultSortTarget);
					if (num == 1)
					{
						num = tablixCell.ColSpan;
					}
					else
					{
						num--;
					}
					tablixCellList.Add(tablixCell);
				}
			}
			while (!flag);
			return tablixCellList;
		}

		// Token: 0x0600245F RID: 9311 RVA: 0x000AAD58 File Offset: 0x000A8F58
		private Microsoft.ReportingServices.ReportIntermediateFormat.TablixCell ReadTablixCell(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, bool shouldBeEmpty, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.TablixCell tablixCell = new Microsoft.ReportingServices.ReportIntermediateFormat.TablixCell(this.GenerateID(), tablix);
			this.m_aggregateHolderList.Add(tablixCell);
			this.m_runningValueHolderList.Add(tablixCell);
			bool flag = false;
			int? num = null;
			int? num2 = null;
			bool flag2 = false;
			if (!this.m_reader.IsEmptyElement)
			{
				string text = null;
				List<IdcRelationship> list = null;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("TablixCell" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "DataSetName"))
						{
							if (!(localName == "Relationships"))
							{
								if (!(localName == "CellContents"))
								{
									if (!(localName == "DataElementName"))
									{
										if (!(localName == "DataElementOutput"))
										{
											if (localName == "StructureTypeOverwrite")
											{
												StructureTypeOverwriteType structureTypeOverwriteType = this.ReadStructureTypeOverwrite();
												Validator.ValidateTablixCellStructureTypeOverwrite(structureTypeOverwriteType.ToString(), context.ErrorContext, context, this.m_reader.LocalName);
												tablixCell.StructureTypeOverwrite = structureTypeOverwriteType;
											}
										}
										else
										{
											tablixCell.DataElementOutput = this.ReadDataElementOutput();
										}
									}
									else
									{
										tablixCell.DataElementName = this.m_reader.ReadString();
									}
								}
								else
								{
									flag2 = true;
									Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem reportItem;
									tablixCell.CellContents = this.ReadCellContents(tablix, context, textBoxesWithDefaultSortTarget, true, out reportItem, out num, out num2);
									tablixCell.AltCellContents = reportItem;
								}
							}
							else
							{
								list = this.ReadRelationships(context);
							}
						}
						else
						{
							text = this.m_reader.ReadString();
						}
					}
				}
				while (!flag);
				tablixCell.DataScopeInfo.SetRelationship(text, list);
			}
			if (shouldBeEmpty)
			{
				if (flag2)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsCellContentsNotOmitted, Severity.Error, context.ObjectType, context.ObjectName, "TablixCell", Array.Empty<string>());
				}
				if (num != null && num.Value != 0)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTablixCellCellSpan, Severity.Error, context.ObjectType, context.ObjectName, "ColSpan", Array.Empty<string>());
				}
			}
			else
			{
				if (!flag2)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsCellContentsRequired, Severity.Error, context.ObjectType, context.ObjectName, "TablixCell", Array.Empty<string>());
				}
				if (num == null)
				{
					tablixCell.ColSpan = 1;
				}
				else if (num.Value == 0)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTablixCellCellSpan, Severity.Error, context.ObjectType, context.ObjectName, "ColSpan", Array.Empty<string>());
				}
				else
				{
					tablixCell.ColSpan = num.Value;
				}
			}
			if (num2 != null && num2.Value != 1)
			{
				context.ErrorContext.Register(ProcessingErrorCode.rsInvalidTablixCellRowSpan, Severity.Error, context.ObjectType, context.ObjectName, "RowSpan", Array.Empty<string>());
			}
			else
			{
				tablixCell.RowSpan = 1;
			}
			return tablixCell;
		}

		// Token: 0x06002460 RID: 9312 RVA: 0x000AB058 File Offset: 0x000A9258
		private Microsoft.ReportingServices.ReportIntermediateFormat.TablixColumn ReadTablixColumn(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.TablixColumn tablixColumn = new Microsoft.ReportingServices.ReportIntermediateFormat.TablixColumn(this.GenerateID());
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixColumn" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "Width")
				{
					tablixColumn.Width = this.ReadSize();
				}
			}
			while (!flag);
			return tablixColumn;
		}

		// Token: 0x06002461 RID: 9313 RVA: 0x000AB0D8 File Offset: 0x000A92D8
		private TablixRowList ReadTablixRows(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			TablixRowList tablixRowList = new TablixRowList();
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixRows" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else if (this.m_reader.LocalName == "TablixRow")
				{
					tablixRowList.Add(this.ReadTablixRow(tablix, context, textBoxesWithDefaultSortTarget));
				}
			}
			while (!flag);
			return tablixRowList;
		}

		// Token: 0x06002462 RID: 9314 RVA: 0x000AB158 File Offset: 0x000A9358
		private void ReadTablixBody(Microsoft.ReportingServices.ReportIntermediateFormat.Tablix tablix, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget)
		{
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("TablixBody" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "TablixColumns"))
					{
						if (localName == "TablixRows")
						{
							tablix.TablixRows = this.ReadTablixRows(tablix, context, textBoxesWithDefaultSortTarget);
						}
					}
					else
					{
						tablix.TablixColumns = this.ReadTablixColumns(tablix, context, textBoxesWithDefaultSortTarget);
					}
				}
			}
			while (!flag);
		}

		// Token: 0x06002463 RID: 9315 RVA: 0x000AB1F4 File Offset: 0x000A93F4
		private Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem ReadCellContents(Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parent, PublishingContextStruct context, List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> textBoxesWithDefaultSortTarget, bool readRowColSpans, out Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem altCellContents, out int? colSpan, out int? rowSpan)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem reportItem = null;
			altCellContents = null;
			colSpan = null;
			rowSpan = null;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ((readRowColSpans && this.m_reader.LocalName == "CellContents") || (!readRowColSpans && this.m_reader.LocalName == "ReportItem"))
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (localName != null)
						{
							switch (localName.Length)
							{
							case 3:
								if (localName == "Map")
								{
									reportItem = this.ReadMap(parent, context);
									goto IL_032C;
								}
								break;
							case 4:
								if (localName == "Line")
								{
									reportItem = this.ReadLine(parent, context);
									goto IL_032C;
								}
								break;
							case 5:
							{
								char c = localName[0];
								if (c != 'C')
								{
									if (c == 'I')
									{
										if (localName == "Image")
										{
											reportItem = this.ReadImage(parent, context);
											goto IL_032C;
										}
									}
								}
								else if (localName == "Chart")
								{
									reportItem = this.ReadChart(parent, context);
									goto IL_032C;
								}
								break;
							}
							case 6:
								if (localName == "Tablix")
								{
									reportItem = this.ReadTablix(parent, context);
									goto IL_032C;
								}
								break;
							case 7:
								if (localName == "Textbox")
								{
									reportItem = this.ReadTextbox(parent, context, textBoxesWithDefaultSortTarget);
									goto IL_032C;
								}
								break;
							case 9:
							{
								char c = localName[0];
								if (c != 'R')
								{
									if (c == 'S')
									{
										if (localName == "Subreport")
										{
											reportItem = this.ReadSubreport(parent, context);
											goto IL_032C;
										}
									}
								}
								else if (localName == "Rectangle")
								{
									reportItem = this.ReadRectangle(parent, context, textBoxesWithDefaultSortTarget);
									goto IL_032C;
								}
								break;
							}
							case 10:
								if (localName == "GaugePanel")
								{
									reportItem = this.ReadGaugePanel(parent, context);
									goto IL_032C;
								}
								break;
							case 16:
								if (localName == "CustomReportItem")
								{
									reportItem = this.ReadCustomReportItem(parent, context, textBoxesWithDefaultSortTarget, out altCellContents);
									Global.Tracer.Assert(altCellContents != null);
									goto IL_032C;
								}
								break;
							}
						}
						if (readRowColSpans)
						{
							string localName2 = this.m_reader.LocalName;
							if (!(localName2 == "ColSpan"))
							{
								if (localName2 == "RowSpan")
								{
									rowSpan = new int?(this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName));
								}
							}
							else
							{
								colSpan = new int?(this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName));
							}
						}
					}
					IL_032C:;
				}
				while (!flag);
			}
			return reportItem;
		}

		// Token: 0x06002464 RID: 9316 RVA: 0x000AB534 File Offset: 0x000A9734
		private bool ReadLayoutDirection()
		{
			string text = this.m_reader.ReadString();
			return ReportProcessing.CompareWithInvariantCulture(text, "RTL", false) == 0;
		}

		// Token: 0x06002465 RID: 9317 RVA: 0x000AB55C File Offset: 0x000A975C
		private void Phase2()
		{
			if (1 < this.m_dataSets.Count)
			{
				this.m_reportCT.ConvertFields2ComplexExpr();
			}
			else
			{
				this.m_report.OneDataSetName = ((this.m_dataSets.Count == 1) ? this.m_dataSets[0].Name : null);
			}
			if (0 < this.m_textBoxesWithUserSortTarget.Count)
			{
				for (int i = 0; i < this.m_textBoxesWithUserSortTarget.Count; i++)
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.EndUserSort userSort = this.m_textBoxesWithUserSortTarget[i].UserSort;
					Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope sortFilterScope = null;
					this.m_reportScopes.TryGetValue(userSort.SortTargetString, out sortFilterScope);
					if (sortFilterScope != null)
					{
						userSort.SetSortTarget(sortFilterScope);
					}
				}
			}
			this.m_report.LastAggregateID = this.m_reportCT.LastAggregateID;
			this.m_report.LastLookupID = this.m_reportCT.LastLookupID;
			this.MapAndValidateDataSets();
			this.CreateAutomaticSubtotalsAndDomainScopeMembers();
			this.m_report.MergeOnePass = !this.m_hasGrouping && !this.m_hasSorting && !this.m_reportCT.BodyRefersToReportItems && !this.m_reportCT.ValueReferencedGlobal && !this.m_subReportMergeTransactions && !this.m_hasUserSort && !this.m_reportCT.AggregateOfAggregateUsed;
			this.m_report.SubReportMergeTransactions = this.m_subReportMergeTransactions;
			this.m_report.NeedPostGroupProcessing = this.m_requiresSortingPostGrouping || this.m_hasGroupFilters || this.m_reportCT.AggregateOfAggregateUsed || this.m_domainScopeGroups.Count > 0;
			this.m_report.HasSpecialRecursiveAggregates = this.m_hasSpecialRecursiveAggregates;
			this.m_report.HasReportItemReferences = this.m_reportCT.BodyRefersToReportItems;
			this.m_report.HasImageStreams = this.m_hasImageStreams;
			this.m_report.HasBookmarks = this.m_hasBookmarks;
			this.m_report.HasLabels = this.m_hasLabels;
			this.m_report.HasUserSortFilter = this.m_hasUserSort;
			if (this.m_report.ReportSections != null)
			{
				foreach (Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection reportSection in this.m_report.ReportSections)
				{
					reportSection.NeedsReportItemsOnPage |= reportSection.Page.PageAggregates.Count != 0;
				}
			}
		}

		// Token: 0x06002466 RID: 9318 RVA: 0x000AB7C0 File Offset: 0x000A99C0
		private static void RegisterDataSetWithDataSource(Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet, Microsoft.ReportingServices.ReportIntermediateFormat.DataSource dataSource, int dataSourceIndex, Hashtable dataSetQueryInfo, bool hasDynamicParameters)
		{
			dataSet.DataSource = dataSource;
			if (dataSource.DataSets == null)
			{
				dataSource.DataSets = new List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSet>();
			}
			if (hasDynamicParameters)
			{
				PublishingDataSetInfo publishingDataSetInfo = (PublishingDataSetInfo)dataSetQueryInfo[dataSet.Name];
				Global.Tracer.Assert(publishingDataSetInfo != null, "(null != dataSetInfo)");
				publishingDataSetInfo.DataSourceIndex = dataSourceIndex;
				publishingDataSetInfo.DataSetIndex = dataSource.DataSets.Count;
				publishingDataSetInfo.MergeFlagsFromDataSource(dataSource.IsComplex, dataSource.ParameterNames);
			}
			dataSource.DataSets.Add(dataSet);
		}

		// Token: 0x06002467 RID: 9319 RVA: 0x000AB848 File Offset: 0x000A9A48
		private void MapAndValidateDataSets()
		{
			if (this.m_dataSets == null || this.m_dataSets.Count == 0)
			{
				return;
			}
			bool flag = false;
			if (this.m_dynamicParameters != null && this.m_dynamicParameters.Count > 0)
			{
				flag = true;
			}
			foreach (Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet in this.m_dataSets)
			{
				bool flag2 = false;
				if (dataSet.IsReferenceToSharedDataSet)
				{
					if (this.m_report.SharedDSContainer != null)
					{
						flag2 = true;
						ReportPublishing.RegisterDataSetWithDataSource(dataSet, this.m_report.SharedDSContainer, this.m_report.SharedDSContainerCollectionIndex, this.m_dataSetQueryInfo, flag);
					}
				}
				else if (dataSet.Query != null && this.m_report.DataSources != null)
				{
					for (int i = 0; i < this.m_report.DataSources.Count; i++)
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.DataSource dataSource = this.m_report.DataSources[i];
						if (dataSet.Query.DataSourceName == dataSource.Name)
						{
							flag2 = true;
							ReportPublishing.RegisterDataSetWithDataSource(dataSet, dataSource, i, this.m_dataSetQueryInfo, flag);
							break;
						}
					}
				}
				if (!flag2 && dataSet.Query != null)
				{
					this.m_errorContext.Register(ProcessingErrorCode.rsInvalidDataSourceReference, Severity.Error, dataSet.ObjectType, dataSet.Name, "DataSourceName", new string[] { dataSet.Query.DataSourceName });
				}
			}
		}

		// Token: 0x06002468 RID: 9320 RVA: 0x000AB9CC File Offset: 0x000A9BCC
		private void CreateAutomaticSubtotalsAndDomainScopeMembers()
		{
			if (!this.m_errorContext.HasError && (this.ShouldCreateAutomaticSubtotals() || this.ShouldCreateDomainScopeMembers()))
			{
				AutomaticSubtotalContext automaticSubtotalContext = new AutomaticSubtotalContext(this.m_report, this.m_createSubtotalsDefs, this.m_domainScopeGroups, this.m_reportItemNames, this.m_scopeNames, this.m_variableNames, this.m_reportScopes, this.m_reportItemCollectionList, this.m_aggregateHolderList, this.m_runningValueHolderList, this.m_variableSequenceIdCounter, this.m_textboxSequenceIdCounter, this.m_report.BuildScopeTree());
				if (this.ShouldCreateAutomaticSubtotals())
				{
					for (int i = 0; i < this.m_createSubtotalsDefs.Count; i++)
					{
						this.m_createSubtotalsDefs[i].CreateAutomaticSubtotals(automaticSubtotalContext);
					}
				}
				if (this.ShouldCreateDomainScopeMembers())
				{
					foreach (Microsoft.ReportingServices.ReportIntermediateFormat.Grouping grouping in this.m_domainScopeGroups)
					{
						this.CreateDomainScopeMember(grouping, automaticSubtotalContext);
					}
				}
			}
			this.m_reportItemNames = null;
			this.m_scopeNames = null;
			this.m_variableNames = null;
		}

		// Token: 0x06002469 RID: 9321 RVA: 0x000ABAEC File Offset: 0x000A9CEC
		private bool ShouldCreateDomainScopeMembers()
		{
			return this.m_domainScopeGroups.Count > 0 && !this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.DomainScope);
		}

		// Token: 0x0600246A RID: 9322 RVA: 0x000ABB13 File Offset: 0x000A9D13
		private bool ShouldCreateAutomaticSubtotals()
		{
			return this.m_createSubtotalsDefs.Count > 0 && !this.m_publishingContext.PublishingVersioning.IsRdlFeatureRestricted(RdlFeatures.AutomaticSubtotals);
		}

		// Token: 0x0600246B RID: 9323 RVA: 0x000ABB3C File Offset: 0x000A9D3C
		private void CreateDomainScopeMember(Microsoft.ReportingServices.ReportIntermediateFormat.Grouping group, AutomaticSubtotalContext context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode owner = group.Owner;
			Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion dataRegionDef = owner.DataRegionDef;
			if (owner.InnerDynamicMembers != null && owner.InnerDynamicMembers.Count > 0)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsInvalidGroupingDomainScopeNotLeaf, Severity.Error, dataRegionDef.ObjectType, dataRegionDef.Name, "DomainScope", new string[] { group.Name, group.DomainScope });
				return;
			}
			if (!this.m_reportScopes.ContainsKey(group.DomainScope))
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsInvalidGroupingDomainScope, Severity.Error, dataRegionDef.ObjectType, dataRegionDef.Name, "DomainScope", new string[] { group.Name, group.DomainScope });
				return;
			}
			Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope sortFilterScope = this.m_reportScopes[group.DomainScope];
			if (sortFilterScope is Microsoft.ReportingServices.ReportIntermediateFormat.DataSet)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsInvalidGroupingDomainScopeDataSet, Severity.Error, dataRegionDef.ObjectType, dataRegionDef.Name, "DomainScope", new string[] { group.Name, group.DomainScope });
				return;
			}
			Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode reportHierarchyNode = null;
			Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion dataRegion;
			if (sortFilterScope is Microsoft.ReportingServices.ReportIntermediateFormat.Grouping)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.Grouping grouping = (Microsoft.ReportingServices.ReportIntermediateFormat.Grouping)sortFilterScope;
				if (grouping.Parent != null)
				{
					this.m_errorContext.Register(ProcessingErrorCode.rsInvalidGroupingDomainScopeTargetWithParent, Severity.Error, dataRegionDef.ObjectType, dataRegionDef.Name, "DomainScope", new string[] { group.Name, group.DomainScope });
					return;
				}
				reportHierarchyNode = grouping.Owner;
				dataRegion = reportHierarchyNode.DataRegionDef;
			}
			else
			{
				dataRegion = (Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion)sortFilterScope;
			}
			dataRegion.CreateDomainScopeMember(reportHierarchyNode, group, context);
		}

		// Token: 0x0600246C RID: 9324 RVA: 0x000ABCCC File Offset: 0x000A9ECC
		private void Phase3(out ParameterInfoCollection parameters, out Dictionary<string, int> groupingExprCountAtScope)
		{
			try
			{
				this.m_report.HasPreviousAggregates = this.m_reportCT.PreviousAggregateUsed;
				this.m_report.HasAggregatesOfAggregates = this.m_reportCT.AggregateOfAggregateUsed;
				this.m_report.HasAggregatesOfAggregatesInUserSort = this.m_reportCT.AggregateOfAggregateUsedInUserSort;
				this.m_scopeTree = ScopeTreeBuilderForDataScopeDataSet.BuildScopeTree(this.m_report, this.m_errorContext);
				this.m_reportCT.Builder.ReportStart();
				Microsoft.ReportingServices.ReportIntermediateFormat.InitializationContext initializationContext = new Microsoft.ReportingServices.ReportIntermediateFormat.InitializationContext(this.m_publishingContext.CatalogContext, this.m_hasFilters, this.m_dataSourceNames, this.m_dataSets, this.m_dynamicParameters, this.m_dataSetQueryInfo, this.m_errorContext, this.m_reportCT.Builder, this.m_report, this.m_reportLanguage, this.m_reportScopes, this.m_hasUserSortPeerScopes, this.m_hasUserSort, this.m_dataRegionCount, this.m_textboxSequenceIdCounter.Value, this.m_variableSequenceIdCounter.Value, this.m_publishingContext, this.m_scopeTree, false);
				this.m_report.Initialize(initializationContext);
				this.InitializeParameters(initializationContext, out parameters);
				groupingExprCountAtScope = initializationContext.GroupingExprCountAtScope;
				this.m_reportCT.Builder.ReportEnd();
				if (!this.m_errorContext.HasError)
				{
					((IExpressionHostAssemblyHolder)this.m_report).CompiledCode = this.m_reportCT.Compile(this.m_report, this.m_publishingContext.CompilationTempAppDomain, this.m_publishingContext.GenerateExpressionHostWithRefusedPermissions, this.m_publishingContext.PublishingVersioning);
				}
				int num = 0;
				for (int i = 0; i < this.m_dataSets.Count; i++)
				{
					if (!this.m_dataSets[i].UsedOnlyInParameters)
					{
						if (num == 0)
						{
							this.m_report.FirstDataSet = this.m_dataSets[i];
						}
						num++;
						if (1 < num)
						{
							this.m_report.MergeOnePass = false;
						}
					}
				}
				this.m_report.DataSetsNotOnlyUsedInParameters = num;
				this.m_report.HasLookups = initializationContext.HasLookups;
			}
			finally
			{
				this.m_reportCT = null;
			}
		}

		// Token: 0x0600246D RID: 9325 RVA: 0x000ABEE0 File Offset: 0x000AA0E0
		private void InitializeParameters(Microsoft.ReportingServices.ReportIntermediateFormat.InitializationContext context, out ParameterInfoCollection parameters)
		{
			bool flag = false;
			parameters = new ParameterInfoCollection();
			parameters.ParametersLayout = this.m_parametersLayout;
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef> parameters2 = this.m_report.Parameters;
			if (parameters2 != null && parameters2.Count > 0)
			{
				context.InitializeParameters(this.m_report.Parameters, this.m_dataSets);
				for (int i = 0; i < parameters2.Count; i++)
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef parameterDef = parameters2[i];
					if (parameterDef.UsedInQueryAsDefined == ParameterBase.UsedInQueryType.Auto)
					{
						if (this.m_parametersNotUsedInQuery)
						{
							if (this.m_usedInQueryInfos.Contains(parameterDef.Name))
							{
								parameterDef.UsedInQuery = true;
							}
							else
							{
								parameterDef.UsedInQuery = false;
								flag = true;
							}
						}
						else
						{
							parameterDef.UsedInQuery = true;
						}
					}
					else if (parameterDef.UsedInQueryAsDefined == ParameterBase.UsedInQueryType.False)
					{
						flag = true;
						parameterDef.UsedInQuery = false;
					}
					if (parameterDef.UsedInQuery && (this.m_userReferenceLocation & UserLocationFlags.ReportQueries) == (UserLocationFlags)0 && this.m_reportParamUserProfile.Contains(parameterDef.Name))
					{
						this.m_userReferenceLocation |= UserLocationFlags.ReportQueries;
					}
					parameterDef.Initialize(context);
					Microsoft.ReportingServices.ReportProcessing.ParameterInfo parameterInfo = new Microsoft.ReportingServices.ReportProcessing.ParameterInfo(parameterDef);
					if (parameterDef.PromptExpression != null)
					{
						if (parameterDef.PromptExpression.Type == Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant)
						{
							parameterInfo.DynamicPrompt = false;
							parameterInfo.Prompt = parameterDef.PromptExpression.StringValue;
						}
						else
						{
							parameterInfo.DynamicPrompt = true;
							parameterInfo.Prompt = parameterDef.Name;
						}
					}
					if (parameterDef.Dependencies != null && parameterDef.Dependencies.Count > 0)
					{
						IDictionaryEnumerator enumerator = parameterDef.Dependencies.GetEnumerator();
						List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef>();
						ParameterInfoCollection parameterInfoCollection = new ParameterInfoCollection();
						while (enumerator.MoveNext())
						{
							int num = (int)enumerator.Value;
							list.Add(parameters2[num]);
							parameterInfoCollection.Add(parameters[num]);
							if (parameterDef.UsedInQuery)
							{
								parameters[num].UsedInQuery = true;
							}
						}
						parameterDef.DependencyList = list;
						parameterInfo.DependencyList = parameterInfoCollection;
					}
					if (parameterDef.ValidValuesDataSource != null)
					{
						parameterInfo.DynamicValidValues = true;
					}
					else if (parameterDef.ValidValuesValueExpressions != null)
					{
						int count = parameterDef.ValidValuesValueExpressions.Count;
						int num2 = 0;
						while (num2 < count && !parameterInfo.DynamicValidValues)
						{
							Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = parameterDef.ValidValuesValueExpressions[num2];
							Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo2 = parameterDef.ValidValuesLabelExpressions[num2];
							if ((expressionInfo != null && Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant != expressionInfo.Type) || (expressionInfo2 != null && Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo.Types.Constant != expressionInfo2.Type))
							{
								parameterInfo.DynamicValidValues = true;
							}
							num2++;
						}
						if (!parameterInfo.DynamicValidValues)
						{
							parameterInfo.ValidValues = new ValidValueList(count);
							for (int j = 0; j < count; j++)
							{
								Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo3 = parameterDef.ValidValuesValueExpressions[j];
								Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo4 = parameterDef.ValidValuesLabelExpressions[j];
								object obj = null;
								string text = null;
								if (expressionInfo4 != null)
								{
									text = expressionInfo4.StringValue;
								}
								if (expressionInfo3 != null)
								{
									DataType constantType = expressionInfo3.ConstantType;
									if (constantType <= DataType.Integer)
									{
										if (constantType != DataType.Boolean)
										{
											if (constantType == DataType.Integer)
											{
												obj = expressionInfo3.IntValue;
											}
										}
										else
										{
											obj = expressionInfo3.BoolValue;
										}
									}
									else if (constantType != DataType.Float)
									{
										if (constantType != DataType.DateTime)
										{
											if (constantType == DataType.String)
											{
												obj = expressionInfo3.StringValue;
											}
										}
										else
										{
											obj = expressionInfo3.GetDateTimeValue();
										}
									}
									else
									{
										obj = expressionInfo3.FloatValue;
									}
								}
								parameterInfo.AddValidValueExplicit(obj, text);
							}
						}
					}
					parameterInfo.DynamicDefaultValue = parameterDef.DefaultDataSource != null || parameterDef.DefaultExpressions != null;
					parameterInfo.Values = parameterDef.DefaultValues;
					parameters.Add(parameterInfo);
				}
			}
			else
			{
				flag = true;
			}
			this.m_parametersNotUsedInQuery = flag;
			this.m_report.ParametersNotUsedInQuery = this.m_parametersNotUsedInQuery;
		}

		// Token: 0x0600246E RID: 9326 RVA: 0x000AC29C File Offset: 0x000AA49C
		private void Phase4(Dictionary<string, int> groupingExprCountAtScope, out ArrayList dataSetsName)
		{
			this.PopulateReportItemCollections();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion> list;
			this.CompactAggregates(out list);
			this.CompactRunningValues(groupingExprCountAtScope);
			for (int i = 0; i < list.Count; i++)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion dataRegion = list[i];
				bool flag = false;
				if (dataRegion.CellAggregates != null)
				{
					this.m_aggregateHashByType.Clear();
					this.CompactAggregates(dataRegion.CellAggregates, true, this.m_aggregateHashByType);
					flag = true;
				}
				if (dataRegion.CellPostSortAggregates != null)
				{
					this.m_aggregateHashByType.Clear();
					if (this.CompactAggregates(dataRegion.CellPostSortAggregates, true, this.m_aggregateHashByType))
					{
						this.m_report.HasPostSortAggregates = true;
					}
					flag = true;
				}
				if (dataRegion.CellRunningValues != null)
				{
					this.m_runningValueHashByType.Clear();
					this.CompactRunningValueList(groupingExprCountAtScope, dataRegion.CellRunningValues, true, this.m_runningValueHashByType);
					flag = true;
				}
				if (flag)
				{
					dataRegion.ConvertCellAggregatesToIndexes();
				}
			}
			dataSetsName = null;
			if (!this.m_errorContext.HasError)
			{
				for (int j = 0; j < this.m_dataSets.Count; j++)
				{
					if (this.m_publishingContext.IsRdlx)
					{
						this.m_dataSets[j].RestrictDataSetAggregates(this.m_errorContext);
					}
					if (!this.m_dataSets[j].UsedOnlyInParameters)
					{
						if (dataSetsName == null)
						{
							dataSetsName = new ArrayList();
						}
						dataSetsName.Add(this.m_dataSets[j].Name);
					}
					else
					{
						this.m_report.ClearDatasetParameterOnlyDependencies(this.m_dataSets[j].IndexInCollection);
					}
				}
				this.m_report.Phase4_DetermineFirstDatasetToProcess();
			}
		}

		// Token: 0x0600246F RID: 9327 RVA: 0x000AC42C File Offset: 0x000AA62C
		private void PopulateReportItemCollections()
		{
			try
			{
				Global.Tracer.Assert(this.m_reportItemCollectionList != null);
				for (int i = 0; i < this.m_reportItemCollectionList.Count; i++)
				{
					this.m_reportItemCollectionList[i].Populate(this.m_errorContext);
				}
			}
			finally
			{
				this.m_reportItemCollectionList = null;
			}
		}

		// Token: 0x06002470 RID: 9328 RVA: 0x000AC494 File Offset: 0x000AA694
		private void CompactAggregates(out List<Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion> dataRegions)
		{
			dataRegions = new List<Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion>();
			try
			{
				for (int i = 0; i < this.m_aggregateHolderList.Count; i++)
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder aggregateHolder = this.m_aggregateHolderList[i];
					Global.Tracer.Assert(aggregateHolder != null);
					List<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo> list = aggregateHolder.GetAggregateList();
					Global.Tracer.Assert(list != null);
					this.m_aggregateHashByType.Clear();
					this.CompactAggregates(list, false, this.m_aggregateHashByType);
					list = aggregateHolder.GetPostSortAggregateList();
					this.m_aggregateHashByType.Clear();
					if (list != null && this.CompactAggregates(list, false, this.m_aggregateHashByType))
					{
						this.m_report.HasPostSortAggregates = true;
					}
					DataScopeInfo dataScopeInfo = aggregateHolder.DataScopeInfo;
					if (dataScopeInfo != null)
					{
						BucketedDataAggregateInfos bucketedDataAggregateInfos = dataScopeInfo.AggregatesOfAggregates;
						if (list != null)
						{
							this.m_aggregateHashByType.Clear();
							this.CompactAggregates(bucketedDataAggregateInfos, false, this.m_aggregateHashByType);
						}
						bucketedDataAggregateInfos = dataScopeInfo.PostSortAggregatesOfAggregates;
						this.m_aggregateHashByType.Clear();
						if (list != null && this.CompactAggregates(bucketedDataAggregateInfos, false, this.m_aggregateHashByType))
						{
							this.m_report.HasPostSortAggregates = true;
						}
						dataScopeInfo.ClearAggregatesIfEmpty();
					}
					if (aggregateHolder is Microsoft.ReportingServices.ReportIntermediateFormat.Grouping)
					{
						if (this.CompactAggregates(((Microsoft.ReportingServices.ReportIntermediateFormat.Grouping)aggregateHolder).RecursiveAggregates, false, this.m_aggregateHashByType))
						{
							this.m_report.NeedPostGroupProcessing = true;
						}
					}
					else if (aggregateHolder is Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion && ((Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion)aggregateHolder).IsDataRegion)
					{
						dataRegions.Add(aggregateHolder as Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion);
					}
					aggregateHolder.ClearIfEmpty();
				}
			}
			finally
			{
				this.m_aggregateHolderList = null;
			}
		}

		// Token: 0x06002471 RID: 9329 RVA: 0x000AC628 File Offset: 0x000AA828
		private bool CompactAggregates(BucketedDataAggregateInfos aggregates, bool nonDataRegionScopedCellAggs, Dictionary<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo.AggregateTypes, Dictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo>>> aggregateHashByType)
		{
			bool flag = false;
			foreach (AggregateBucket<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo> aggregateBucket in aggregates.Buckets)
			{
				if (aggregateBucket.Aggregates != null)
				{
					flag |= this.CompactAggregates(aggregateBucket.Aggregates, nonDataRegionScopedCellAggs, aggregateHashByType);
				}
			}
			return flag;
		}

		// Token: 0x06002472 RID: 9330 RVA: 0x000AC690 File Offset: 0x000AA890
		private bool CompactAggregates(List<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo> aggregates, bool nonDataRegionScopedCellAggs, Dictionary<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo.AggregateTypes, Dictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo>>> aggregateHashByType)
		{
			Global.Tracer.Assert(aggregates != null);
			Global.Tracer.Assert(aggregateHashByType != null);
			bool flag = false;
			for (int i = aggregates.Count - 1; i >= 0; i--)
			{
				flag = true;
				Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo dataAggregateInfo = aggregates[i];
				Global.Tracer.Assert(dataAggregateInfo != null);
				string text;
				if (nonDataRegionScopedCellAggs)
				{
					text = dataAggregateInfo.EvaluationScopeName;
				}
				else
				{
					text = "";
				}
				bool flag2 = false;
				Dictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo>> dictionary;
				if (aggregateHashByType.TryGetValue(dataAggregateInfo.AggregateType, out dictionary))
				{
					Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo> dictionary2;
					if (dictionary.TryGetValue(text, out dictionary2))
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo dataAggregateInfo2;
						if (dictionary2.TryGetValue(dataAggregateInfo.ExpressionTextForCompaction, out dataAggregateInfo2))
						{
							if (!dataAggregateInfo.IsAggregateOfAggregate || this.AreNestedAggregateScopesIdentical(dataAggregateInfo, dataAggregateInfo2))
							{
								if (dataAggregateInfo2.DuplicateNames == null)
								{
									dataAggregateInfo2.DuplicateNames = new List<string>();
								}
								dataAggregateInfo2.DuplicateNames.Add(dataAggregateInfo.Name);
								if (dataAggregateInfo.DuplicateNames != null)
								{
									dataAggregateInfo2.DuplicateNames.AddRange(dataAggregateInfo.DuplicateNames);
								}
								aggregates.RemoveAt(i);
								flag2 = true;
							}
						}
						else
						{
							dictionary2.Add(dataAggregateInfo.ExpressionTextForCompaction, dataAggregateInfo);
						}
					}
					else
					{
						dictionary2 = new Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo>();
						dictionary2.Add(dataAggregateInfo.ExpressionTextForCompaction, dataAggregateInfo);
						dictionary.Add(text, dictionary2);
					}
				}
				else
				{
					Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo> dictionary3 = new Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo>();
					dictionary3.Add(dataAggregateInfo.ExpressionTextForCompaction, dataAggregateInfo);
					dictionary = new Dictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo>>();
					dictionary.Add(text, dictionary3);
					aggregateHashByType.Add(dataAggregateInfo.AggregateType, dictionary);
				}
				if (!flag2)
				{
					this.ProcessPostCompactedAggOrRv(dataAggregateInfo);
				}
			}
			return flag;
		}

		// Token: 0x06002473 RID: 9331 RVA: 0x000AC80C File Offset: 0x000AAA0C
		private bool AreNestedAggregateScopesIdentical(Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo agg1, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo agg2)
		{
			List<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo> nestedAggregates = agg1.PublishingInfo.NestedAggregates;
			List<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo> nestedAggregates2 = agg2.PublishingInfo.NestedAggregates;
			Global.Tracer.Assert(nestedAggregates.Count == nestedAggregates2.Count, "Duplicate candidate has identical text but different number of nested aggs.");
			for (int i = 0; i < nestedAggregates.Count; i++)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo dataAggregateInfo = nestedAggregates[i];
				Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo dataAggregateInfo2 = nestedAggregates2[i];
				if (dataAggregateInfo.EvaluationScope != dataAggregateInfo2.EvaluationScope)
				{
					return false;
				}
				if (dataAggregateInfo.IsAggregateOfAggregate && !this.AreNestedAggregateScopesIdentical(dataAggregateInfo, dataAggregateInfo2))
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x06002474 RID: 9332 RVA: 0x000AC898 File Offset: 0x000AAA98
		private void ProcessPostCompactedAggOrRv(Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo aggregate)
		{
			if (!aggregate.IsAggregateOfAggregate)
			{
				this.TraceAggregateInformation(aggregate, null);
				return;
			}
			IRIFDataScope irifdataScope = aggregate.EvaluationScope;
			if (irifdataScope == null)
			{
				return;
			}
			foreach (Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo dataAggregateInfo in aggregate.PublishingInfo.NestedAggregates)
			{
				IRIFDataScope evaluationScope = dataAggregateInfo.EvaluationScope;
				if (evaluationScope != null)
				{
					if (!this.m_scopeTree.IsSameOrProperParentScope(aggregate.EvaluationScope, evaluationScope))
					{
						this.RegisterIncompatibleAggregateScopes(aggregate.EvaluationScope, evaluationScope, ProcessingErrorCode.rsInvalidNestedAggregateScope, aggregate);
					}
					if (this.m_scopeTree.IsSameOrProperParentScope(irifdataScope, evaluationScope))
					{
						irifdataScope = dataAggregateInfo.EvaluationScope;
					}
					else if (!this.m_scopeTree.IsSameOrProperParentScope(evaluationScope, irifdataScope))
					{
						this.RegisterIncompatibleAggregateScopes(irifdataScope, evaluationScope, ProcessingErrorCode.rsIncompatibleNestedAggregateScopes, aggregate);
					}
				}
			}
			if (irifdataScope != null && irifdataScope.DataScopeInfo != null)
			{
				aggregate.UpdatesAtRowScope = aggregate.PublishingInfo.HasAnyFieldReferences;
				irifdataScope.DataScopeInfo.HasAggregatesToUpdateAtRowScope |= aggregate.PublishingInfo.HasAnyFieldReferences;
				aggregate.UpdateScopeID = irifdataScope.DataScopeInfo.ScopeID;
				if (!aggregate.IsRunningValue() && !aggregate.IsPostSortAggregate())
				{
					this.m_scopeTree.Traverse(new ScopeTree.ScopeTreeVisitor(this.CheckSpannedGroupFilters), aggregate.EvaluationScope, irifdataScope, false);
					this.m_report.NeedPostGroupProcessing = true;
				}
			}
			this.TraceAggregateInformation(aggregate, irifdataScope);
		}

		// Token: 0x06002475 RID: 9333 RVA: 0x000AC9FC File Offset: 0x000AABFC
		private void RegisterIncompatibleAggregateScopes(IRIFDataScope firstScope, IRIFDataScope secondScope, ProcessingErrorCode fallbackMessage, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo aggregate)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode reportHierarchyNode = firstScope as Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode;
			Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode reportHierarchyNode2 = secondScope as Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode;
			if (reportHierarchyNode != null && reportHierarchyNode2 != null && reportHierarchyNode.DataRegionDef == reportHierarchyNode2.DataRegionDef && reportHierarchyNode.IsColumn != reportHierarchyNode2.IsColumn)
			{
				this.RegisterAggregateScopeValidationError(ProcessingErrorCode.rsNestedAggregateScopesFromDifferentAxes, aggregate);
				return;
			}
			if (secondScope is Cell)
			{
				this.RegisterAggregateScopeValidationError(ProcessingErrorCode.rsNestedAggregateScopeRequired, aggregate);
				return;
			}
			this.RegisterAggregateScopeValidationError(fallbackMessage, aggregate);
		}

		// Token: 0x06002476 RID: 9334 RVA: 0x000ACA66 File Offset: 0x000AAC66
		private void RegisterAggregateScopeValidationError(ProcessingErrorCode errorCode, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo aggregate)
		{
			this.m_errorContext.Register(errorCode, Severity.Error, aggregate.PublishingInfo.ObjectType, aggregate.PublishingInfo.ObjectName, aggregate.PublishingInfo.PropertyName, Array.Empty<string>());
		}

		// Token: 0x06002477 RID: 9335 RVA: 0x000ACA9C File Offset: 0x000AAC9C
		private void TraceAggregateInformation(Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo aggregate, IRIFDataScope commonAggregateScope)
		{
			if (!Global.Tracer.TraceVerbose || aggregate.AggregateType == Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo.AggregateTypes.Previous)
			{
				return;
			}
			if (!this.m_wroteAggregateHeaderInformation)
			{
				this.m_wroteAggregateHeaderInformation = true;
				Global.Tracer.Trace(TraceLevel.Verbose, "Aggregate Debugging Information (duplicate items removed):");
			}
			string scopeName = this.GetScopeName(aggregate.EvaluationScope);
			Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo runningValueInfo = aggregate as Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo;
			string text;
			if (runningValueInfo != null)
			{
				text = runningValueInfo.Scope;
			}
			else
			{
				text = scopeName;
			}
			string text2;
			if (commonAggregateScope == null)
			{
				text2 = scopeName + "-ROW";
			}
			else
			{
				text2 = this.GetScopeName(commonAggregateScope);
				if (aggregate.UpdatesAtRowScope)
				{
					text2 += "-ROW";
				}
			}
			Global.Tracer.Trace(TraceLevel.Verbose, "    Aggregate: ContainingObject:{4} ContainingProperty:{5} Text:{0} UpdateScope:{1} OutputScope:{2} ResetScope:{3}", new object[]
			{
				aggregate.GetAsString(),
				text2,
				scopeName,
				text,
				aggregate.PublishingInfo.ObjectName,
				aggregate.PublishingInfo.PropertyName
			});
		}

		// Token: 0x06002478 RID: 9336 RVA: 0x000ACB78 File Offset: 0x000AAD78
		private string GetScopeName(IRIFDataScope dataScope)
		{
			if (dataScope == null)
			{
				return "UNKNOWN";
			}
			Cell cell = dataScope as Cell;
			if (cell != null)
			{
				return this.m_scopeTree.GetScopeName(cell);
			}
			return dataScope.Name;
		}

		// Token: 0x06002479 RID: 9337 RVA: 0x000ACBAC File Offset: 0x000AADAC
		private void CheckSpannedGroupFilters(IRIFDataScope dataScope)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode reportHierarchyNode = dataScope as Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode;
			if (reportHierarchyNode != null && reportHierarchyNode.Grouping != null && reportHierarchyNode.Grouping.Filters != null && reportHierarchyNode.Grouping.Filters.Count > 0)
			{
				reportHierarchyNode.DataScopeInfo.AggregatesSpanGroupFilter = true;
			}
		}

		// Token: 0x0600247A RID: 9338 RVA: 0x000ACBF8 File Offset: 0x000AADF8
		private void CompactRunningValues(Dictionary<string, int> groupingExprCountAtScope)
		{
			try
			{
				for (int i = 0; i < this.m_runningValueHolderList.Count; i++)
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder runningValueHolder = this.m_runningValueHolderList[i];
					Global.Tracer.Assert(runningValueHolder != null);
					this.m_runningValueHashByType.Clear();
					this.CompactRunningValueList(groupingExprCountAtScope, runningValueHolder.GetRunningValueList(), false, this.m_runningValueHashByType);
					DataScopeInfo dataScopeInfo = runningValueHolder.DataScopeInfo;
					if (dataScopeInfo != null)
					{
						this.m_runningValueHashByType.Clear();
						this.CompactRunningValueList(groupingExprCountAtScope, dataScopeInfo.RunningValuesOfAggregates, false, this.m_runningValueHashByType);
						dataScopeInfo.ClearRunningValuesIfEmpty();
					}
					runningValueHolder.ClearIfEmpty();
				}
			}
			finally
			{
				this.m_runningValueHolderList = null;
			}
		}

		// Token: 0x0600247B RID: 9339 RVA: 0x000ACCA8 File Offset: 0x000AAEA8
		private void CompactRunningValueList(Dictionary<string, int> groupingExprCountAtScope, List<Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo> runningValueList, bool nonDataRegionScopedCellRVs, Dictionary<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo.AggregateTypes, Dictionary<string, AllowNullKeyDictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>>>> runningValueHashByType)
		{
			Global.Tracer.Assert(runningValueList != null);
			Global.Tracer.Assert(runningValueHashByType != null);
			for (int i = runningValueList.Count - 1; i >= 0; i--)
			{
				this.m_report.HasPostSortAggregates = true;
				Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo runningValueInfo = runningValueList[i];
				Global.Tracer.Assert(runningValueInfo != null);
				string text;
				if (nonDataRegionScopedCellRVs)
				{
					text = runningValueInfo.EvaluationScopeName;
				}
				else
				{
					text = "";
				}
				if (runningValueInfo.AggregateType == Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo.AggregateTypes.Previous && runningValueInfo.Scope != null)
				{
					int num;
					if (groupingExprCountAtScope.TryGetValue(runningValueInfo.Scope, out num))
					{
						runningValueInfo.TotalGroupingExpressionCount = num;
					}
					else
					{
						Global.Tracer.Assert(false);
					}
				}
				bool flag = false;
				Dictionary<string, AllowNullKeyDictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>>> dictionary;
				if (runningValueHashByType.TryGetValue(runningValueInfo.AggregateType, out dictionary))
				{
					AllowNullKeyDictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>> allowNullKeyDictionary;
					if (dictionary.TryGetValue(text, out allowNullKeyDictionary))
					{
						Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo> dictionary2;
						if (allowNullKeyDictionary.TryGetValue(runningValueInfo.Scope, out dictionary2))
						{
							Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo runningValueInfo2;
							if (dictionary2.TryGetValue(runningValueInfo.ExpressionTextForCompaction, out runningValueInfo2))
							{
								if (runningValueInfo2.DuplicateNames == null)
								{
									runningValueInfo2.DuplicateNames = new List<string>();
								}
								runningValueInfo2.DuplicateNames.Add(runningValueInfo.Name);
								if (runningValueInfo.DuplicateNames != null)
								{
									runningValueInfo2.DuplicateNames.AddRange(runningValueInfo.DuplicateNames);
								}
								runningValueList.RemoveAt(i);
								flag = true;
							}
							else
							{
								dictionary2.Add(runningValueInfo.ExpressionTextForCompaction, runningValueInfo);
							}
						}
						else
						{
							dictionary2 = new Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>();
							dictionary2.Add(runningValueInfo.ExpressionTextForCompaction, runningValueInfo);
							allowNullKeyDictionary.Add(runningValueInfo.Scope, dictionary2);
						}
					}
					else
					{
						Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo> dictionary3 = new Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>();
						dictionary3.Add(runningValueInfo.ExpressionTextForCompaction, runningValueInfo);
						allowNullKeyDictionary = new AllowNullKeyDictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>>();
						allowNullKeyDictionary.Add(runningValueInfo.Scope, dictionary3);
						dictionary.Add(text, allowNullKeyDictionary);
					}
				}
				else
				{
					Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo> dictionary4 = new Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>();
					dictionary4.Add(runningValueInfo.ExpressionTextForCompaction, runningValueInfo);
					AllowNullKeyDictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>> allowNullKeyDictionary2 = new AllowNullKeyDictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>>();
					allowNullKeyDictionary2.Add(runningValueInfo.Scope, dictionary4);
					dictionary = new Dictionary<string, AllowNullKeyDictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>>>();
					dictionary.Add(text, allowNullKeyDictionary2);
					runningValueHashByType.Add(runningValueInfo.AggregateType, dictionary);
				}
				if (!flag)
				{
					this.ProcessPostCompactedAggOrRv(runningValueInfo);
				}
			}
			runningValueHashByType.Clear();
		}

		// Token: 0x0600247C RID: 9340 RVA: 0x000ACEC0 File Offset: 0x000AB0C0
		internal DataSetPublishingResult CreateSharedDataSet(byte[] definition)
		{
			if (definition == null)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsNotASharedDataSetDefinition, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.SharedDataSet, null, null, Array.Empty<string>());
				throw new DataSetPublishingException(this.m_errorContext.Messages);
			}
			this.RSDPhase1(definition);
			ParameterInfoCollection parameterInfoCollection;
			this.RSDPhase3(out parameterInfoCollection);
			if (!this.m_errorContext.HasError)
			{
				DataSourceInfo theOnlyDataSource = this.m_dataSources.GetTheOnlyDataSource();
				DataSetDefinition dataSetDefinition = new DataSetDefinition(this.m_dataSetCore, this.m_description, theOnlyDataSource, parameterInfoCollection);
				this.SerializeSharedDataSetDefinition();
				if (this.m_userReferenceLocation != UserLocationFlags.None)
				{
					this.m_userReferenceLocation = UserLocationFlags.ReportQueries;
				}
				return new DataSetPublishingResult(dataSetDefinition, theOnlyDataSource, this.m_userReferenceLocation, this.m_errorContext.Messages);
			}
			throw new DataSetPublishingException(this.m_errorContext.Messages);
		}

		// Token: 0x0600247D RID: 9341 RVA: 0x000ACF7C File Offset: 0x000AB17C
		private void SerializeSharedDataSetDefinition()
		{
			if (this.m_dataSetCore == null || this.m_publishingContext.CreateChunkFactory == null)
			{
				return;
			}
			Stream stream = null;
			try
			{
				stream = this.m_publishingContext.CreateChunkFactory.CreateChunk("CompiledDefinition", ReportProcessing.ReportChunkTypes.CompiledDefinition, null);
				int compatibilityVersion = ReportProcessingCompatibilityVersion.GetCompatibilityVersion(this.m_publishingContext.Configuration);
				Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IntermediateFormatWriter intermediateFormatWriter = new Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IntermediateFormatWriter(stream, compatibilityVersion);
				intermediateFormatWriter.Write(this.m_dataSetCore);
			}
			finally
			{
				if (stream != null)
				{
					stream.Close();
				}
			}
		}

		// Token: 0x0600247E RID: 9342 RVA: 0x000AD000 File Offset: 0x000AB200
		private void RSDPhase1(byte[] definition)
		{
			try
			{
				this.m_dataSources = new DataSourceInfoCollection();
				Stream stream = new MemoryStream(definition, false);
				Pair<string, Stream> pair = default(Pair<string, Stream>);
				List<Pair<string, Stream>> list = new List<Pair<string, Stream>>();
				pair = this.GetRSDNamespaceSchemaStreamPair("http://schemas.microsoft.com/sqlserver/reporting/2010/01/shareddatasetdefinition", "Microsoft.ReportingServices.ReportProcessing.ReportPublishing.SharedDataSetDefinition.xsd");
				list.Add(pair);
				this.m_reader = new RmlValidatingReader(stream, list, this.m_errorContext, RmlValidatingReader.ItemType.Rsd, null);
				while (this.m_reader.Read())
				{
					if (XmlNodeType.Element == this.m_reader.NodeType && "SharedDataSet" == this.m_reader.LocalName)
					{
						this.m_reportCT = new ExprHostCompiler(new Microsoft.ReportingServices.RdlExpressions.VBExpressionParser(this.m_errorContext), this.m_errorContext);
						this.ReadRSDSharedDataSet();
					}
				}
				if (this.m_dataSetCore == null)
				{
					this.m_errorContext.Register(ProcessingErrorCode.rsNotASharedDataSetDefinition, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.SharedDataSet, null, "Namespace", Array.Empty<string>());
					throw new ReportProcessingException(this.m_errorContext.Messages);
				}
			}
			catch (XmlException ex)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsInvalidSharedDataSetDefinition, Severity.Error, Microsoft.ReportingServices.ReportProcessing.ObjectType.SharedDataSet, null, null, new string[] { ex.Message });
				throw new ReportProcessingException(this.m_errorContext.Messages);
			}
			finally
			{
				if (this.m_reader != null)
				{
					this.m_reader.Close();
					this.m_reader = null;
				}
			}
		}

		// Token: 0x0600247F RID: 9343 RVA: 0x000AD174 File Offset: 0x000AB374
		private Pair<string, Stream> GetRSDNamespaceSchemaStreamPair(string validationNamespace, string xsdResource)
		{
			Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(xsdResource);
			Global.Tracer.Assert(manifestResourceStream != null, "(schemaStream != null)");
			return new Pair<string, Stream>(validationNamespace, manifestResourceStream);
		}

		// Token: 0x06002480 RID: 9344 RVA: 0x000AD1AC File Offset: 0x000AB3AC
		private void ReadRSDSharedDataSet()
		{
			int num = -1;
			if (this.m_publishingContext.IsRdlSandboxingEnabled)
			{
				num = this.m_publishingContext.Configuration.RdlSandboxing.MaxExpressionLength;
			}
			PublishingContextStruct publishingContextStruct = new PublishingContextStruct(LocationFlags.None, Microsoft.ReportingServices.ReportProcessing.ObjectType.SharedDataSet, num, this.m_errorContext);
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("SharedDataSet" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "Description"))
					{
						if (localName == "DataSet")
						{
							this.m_dataSets.Add(this.ReadRSDDataSet(publishingContextStruct));
						}
					}
					else
					{
						this.m_description = this.m_reader.ReadString();
					}
				}
			}
			while (!flag);
		}

		// Token: 0x06002481 RID: 9345 RVA: 0x000AD288 File Offset: 0x000AB488
		private Microsoft.ReportingServices.ReportIntermediateFormat.DataSet ReadRSDDataSet(PublishingContextStruct context)
		{
			int num = this.GenerateID();
			int num2 = this.m_dataSetIndexCounter;
			this.m_dataSetIndexCounter = num2 + 1;
			Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet = new Microsoft.ReportingServices.ReportIntermediateFormat.DataSet(num, num2);
			this.m_dataSetCore = dataSet.DataSetCore;
			this.m_dataSetCore.Name = this.m_reader.GetAttribute("Name");
			context.Location |= LocationFlags.InDataSet;
			context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.SharedDataSet;
			context.ObjectName = this.m_dataSetCore.Name;
			this.m_reportScopes.Add(this.m_dataSetCore.Name, dataSet);
			bool flag = false;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("DataSet" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (localName != null)
					{
						num2 = localName.Length;
						switch (num2)
						{
						case 5:
							if (localName == "Query")
							{
								this.m_dataSetCore.Query = this.ReadRSDQuery(context);
							}
							break;
						case 6:
							if (localName == "Fields")
							{
								int num3;
								this.m_dataSetCore.Fields = this.ReadFields(context, out num3);
								this.m_dataSetCore.NonCalculatedFieldCount = num3;
							}
							break;
						case 7:
							if (localName == "Filters")
							{
								this.m_dataSetCore.Filters = this.ReadFilters(Microsoft.ReportingServices.RdlExpressions.ExpressionParser.ExpressionType.DataSetFilters, context);
							}
							break;
						case 8:
						case 10:
						case 11:
						case 12:
						case 13:
						case 14:
						case 18:
							break;
						case 9:
							if (localName == "Collation")
							{
								this.m_dataSetCore.Collation = this.m_reader.ReadString();
								uint num4;
								if (DataSetValidator.ValidateCollation(this.m_dataSetCore.Collation, out num4))
								{
									this.m_dataSetCore.LCID = num4;
								}
								else
								{
									this.m_errorContext.Register(ProcessingErrorCode.rsInvalidCollationName, Severity.Warning, context.ObjectType, context.ObjectName, null, new string[] { this.m_dataSetCore.Collation });
								}
							}
							break;
						case 15:
							if (localName == "CaseSensitivity")
							{
								this.m_dataSetCore.CaseSensitivity = this.ReadTriState();
							}
							break;
						case 16:
							if (localName == "WidthSensitivity")
							{
								this.m_dataSetCore.WidthSensitivity = this.ReadTriState();
							}
							break;
						case 17:
							if (localName == "AccentSensitivity")
							{
								this.m_dataSetCore.AccentSensitivity = this.ReadTriState();
							}
							break;
						case 19:
							if (localName == "KanatypeSensitivity")
							{
								this.m_dataSetCore.KanatypeSensitivity = this.ReadTriState();
							}
							break;
						default:
							if (num2 == 27)
							{
								if (localName == "InterpretSubtotalsAsDetails")
								{
									this.m_dataSetCore.InterpretSubtotalsAsDetails = this.ReadTriState();
								}
							}
							break;
						}
					}
				}
			}
			while (!flag);
			if (this.m_dataSetCore.Fields == null || this.m_dataSetCore.Fields.Count == 0)
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsDataSetWithoutFields, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
			}
			return dataSet;
		}

		// Token: 0x06002482 RID: 9346 RVA: 0x000AD608 File Offset: 0x000AB808
		private Microsoft.ReportingServices.ReportIntermediateFormat.ReportQuery ReadRSDQuery(PublishingContextStruct context)
		{
			Microsoft.ReportingServices.ReportIntermediateFormat.ReportQuery reportQuery = new Microsoft.ReportingServices.ReportIntermediateFormat.ReportQuery();
			Microsoft.ReportingServices.ReportIntermediateFormat.DataSource dataSource = new Microsoft.ReportingServices.ReportIntermediateFormat.DataSource(this.GenerateID());
			bool flag = false;
			bool flag2 = false;
			Dictionary<string, bool> dictionary = null;
			do
			{
				this.m_reader.Read();
				XmlNodeType nodeType = this.m_reader.NodeType;
				if (nodeType != XmlNodeType.Element)
				{
					if (nodeType == XmlNodeType.EndElement)
					{
						if ("Query" == this.m_reader.LocalName)
						{
							flag = true;
						}
					}
				}
				else
				{
					string localName = this.m_reader.LocalName;
					if (!(localName == "DataSourceReference"))
					{
						if (!(localName == "CommandType"))
						{
							if (!(localName == "CommandText"))
							{
								if (!(localName == "DataSetParameters"))
								{
									if (localName == "Timeout")
									{
										reportQuery.TimeOut = this.m_reader.ReadInteger(context.ObjectType, context.ObjectName, this.m_reader.LocalName);
									}
								}
								else
								{
									reportQuery.Parameters = this.ReadQueryParameters(context, ref flag2, dictionary);
									SharedDataSetParameterNameMapper.MakeUnique(reportQuery.Parameters);
								}
							}
							else
							{
								Microsoft.ReportingServices.ReportProcessing.ObjectType objectType = context.ObjectType;
								context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.Query;
								reportQuery.CommandText = this.ReadQueryOrParameterExpression(context, DataType.String, ref flag2, dictionary);
								context.ObjectType = objectType;
							}
						}
						else
						{
							reportQuery.CommandType = this.ReadCommandType();
						}
					}
					else
					{
						dataSource.DataSourceReference = this.m_reader.ReadString();
						reportQuery.DataSourceName = (dataSource.Name = "DataSetDataSource");
					}
				}
			}
			while (!flag);
			if (reportQuery.DataSourceName != null)
			{
				DataSourceInfo dataSourceInfo = this.CreateSharedDataSourceLink(context, dataSource);
				if (dataSourceInfo != null)
				{
					if (this.m_publishingContext.ResolveTemporaryDataSourceCallback != null)
					{
						this.m_publishingContext.ResolveTemporaryDataSourceCallback(dataSourceInfo, this.m_publishingContext.OriginalDataSources);
					}
					dataSource.ID = dataSourceInfo.ID;
					this.m_dataSources.Add(dataSourceInfo);
				}
			}
			return reportQuery;
		}

		// Token: 0x06002483 RID: 9347 RVA: 0x000AD7EC File Offset: 0x000AB9EC
		private Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue ReadRSDDataSetParameter(PublishingContextStruct context, ref bool isComplex, Dictionary<string, bool> parametersInQuery)
		{
			Global.Tracer.Assert(Microsoft.ReportingServices.ReportProcessing.ObjectType.SharedDataSet == context.ObjectType);
			DataSetParameterValue dataSetParameterValue = new DataSetParameterValue();
			dataSetParameterValue.UniqueName = this.m_reader.GetAttribute("UniqueName");
			dataSetParameterValue.Name = this.m_reader.GetAttribute("Name");
			context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.QueryParameter;
			context.ObjectName = dataSetParameterValue.Name;
			if (!this.m_reader.IsEmptyElement)
			{
				bool flag = false;
				do
				{
					this.m_reader.Read();
					XmlNodeType nodeType = this.m_reader.NodeType;
					if (nodeType != XmlNodeType.Element)
					{
						if (nodeType == XmlNodeType.EndElement)
						{
							if ("DataSetParameter" == this.m_reader.LocalName)
							{
								flag = true;
							}
						}
					}
					else
					{
						string localName = this.m_reader.LocalName;
						if (!(localName == "DefaultValue"))
						{
							if (!(localName == "ReadOnly"))
							{
								if (!(localName == "Nullable"))
								{
									if (localName == "OmitFromQuery")
									{
										dataSetParameterValue.OmitFromQuery = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, "OmitFromQuery");
									}
								}
								else
								{
									dataSetParameterValue.Nullable = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, "Nullable");
								}
							}
							else
							{
								dataSetParameterValue.ReadOnly = this.m_reader.ReadBoolean(context.ObjectType, context.ObjectName, "ReadOnly");
							}
						}
						else
						{
							dataSetParameterValue.ConstantDataType = this.ReadDataTypeAttribute();
							dataSetParameterValue.Value = this.ReadQueryOrParameterExpression(context, dataSetParameterValue.ConstantDataType, ref isComplex, parametersInQuery);
						}
					}
				}
				while (!flag);
			}
			if (dataSetParameterValue.ReadOnly && !dataSetParameterValue.Nullable && (dataSetParameterValue.Value == null || dataSetParameterValue.Value.OriginalText == null))
			{
				this.m_errorContext.Register(ProcessingErrorCode.rsMissingDataSetParameterDefault, Severity.Error, context.ObjectType, context.ObjectName, null, Array.Empty<string>());
			}
			return dataSetParameterValue;
		}

		// Token: 0x06002484 RID: 9348 RVA: 0x000AD9DC File Offset: 0x000ABBDC
		private void RSDPhase3(out ParameterInfoCollection parameters)
		{
			try
			{
				this.m_report = new Microsoft.ReportingServices.ReportIntermediateFormat.Report();
				this.m_reportCT.Builder.SharedDataSetStart();
				Microsoft.ReportingServices.ReportIntermediateFormat.InitializationContext initializationContext = new Microsoft.ReportingServices.ReportIntermediateFormat.InitializationContext(this.m_publishingContext.CatalogContext, this.m_dataSets, this.m_errorContext, this.m_reportCT.Builder, this.m_report, this.m_reportScopes, this.m_publishingContext);
				initializationContext.RSDRegisterDataSetParameters(this.m_dataSetCore);
				initializationContext.ExprHostBuilder.DataSetStart(this.m_dataSetCore.Name);
				initializationContext.Location |= LocationFlags.InDataSet;
				initializationContext.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.SharedDataSet;
				initializationContext.ObjectName = this.m_dataSetCore.Name;
				this.m_dataSetCore.Initialize(initializationContext);
				this.InitializeDataSetParameters(initializationContext, out parameters);
				this.m_dataSetCore.ExprHostID = initializationContext.ExprHostBuilder.DataSetEnd();
				this.m_reportCT.Builder.SharedDataSetEnd();
				if (!this.m_errorContext.HasError)
				{
					((IExpressionHostAssemblyHolder)this.m_dataSetCore).CompiledCode = this.m_reportCT.Compile(this.m_dataSetCore, this.m_publishingContext.CompilationTempAppDomain, this.m_publishingContext.GenerateExpressionHostWithRefusedPermissions, this.m_publishingContext.PublishingVersioning);
				}
			}
			finally
			{
				this.m_reportCT = null;
			}
		}

		// Token: 0x06002485 RID: 9349 RVA: 0x000ADB3C File Offset: 0x000ABD3C
		private void InitializeDataSetParameters(Microsoft.ReportingServices.ReportIntermediateFormat.InitializationContext context, out ParameterInfoCollection parameters)
		{
			parameters = new ParameterInfoCollection();
			List<Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue> parameters2 = this.m_dataSetCore.Query.Parameters;
			if (parameters2 != null && parameters2.Count > 0)
			{
				foreach (Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue parameterValue in parameters2)
				{
					DataSetParameterValue dataSetParameterValue = (DataSetParameterValue)parameterValue;
					bool flag = true;
					Microsoft.ReportingServices.ReportProcessing.ParameterInfo parameterInfo = new Microsoft.ReportingServices.ReportProcessing.ParameterInfo(dataSetParameterValue, flag);
					parameters.Add(parameterInfo);
					if (dataSetParameterValue.Value != null && dataSetParameterValue.Value.IsExpression)
					{
						parameterInfo.DynamicDefaultValue = true;
					}
				}
			}
		}

		// Token: 0x0400151E RID: 5406
		private bool m_static;

		// Token: 0x0400151F RID: 5407
		private bool m_interactive;

		// Token: 0x04001520 RID: 5408
		private int m_idCounter;

		// Token: 0x04001521 RID: 5409
		private int m_dataSetIndexCounter;

		// Token: 0x04001522 RID: 5410
		private RmlValidatingReader m_reader;

		// Token: 0x04001523 RID: 5411
		private CLSUniqueNameValidator m_reportItemNames;

		// Token: 0x04001524 RID: 5412
		private CLSUniqueNameValidator m_reportSectionNames;

		// Token: 0x04001525 RID: 5413
		private VariableNameValidator m_variableNames;

		// Token: 0x04001526 RID: 5414
		private ScopeNameValidator m_scopeNames;

		// Token: 0x04001527 RID: 5415
		private string m_description;

		// Token: 0x04001528 RID: 5416
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.SubReport> m_subReports;

		// Token: 0x04001529 RID: 5417
		private UserLocationFlags m_reportLocationFlags = UserLocationFlags.ReportBody;

		// Token: 0x0400152A RID: 5418
		private UserLocationFlags m_userReferenceLocation = UserLocationFlags.None;

		// Token: 0x0400152B RID: 5419
		private bool m_hasExternalImages;

		// Token: 0x0400152C RID: 5420
		private bool m_hasHyperlinks;

		// Token: 0x0400152D RID: 5421
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion> m_nestedDataRegions;

		// Token: 0x0400152E RID: 5422
		private SortedList<double, Pair<double, int>> m_headerLevelSizeList;

		// Token: 0x0400152F RID: 5423
		private double m_firstCumulativeHeaderSize;

		// Token: 0x04001530 RID: 5424
		private Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection m_currentReportSection;

		// Token: 0x04001531 RID: 5425
		private DataSourceInfoCollection m_dataSources;

		// Token: 0x04001532 RID: 5426
		private EmbeddedDataSetInfoCollection m_embeddedDataSets;

		// Token: 0x04001533 RID: 5427
		private DataSetInfoCollection m_sharedDataSetReferences;

		// Token: 0x04001534 RID: 5428
		private ExpressionUsage m_expressionUsage;

		// Token: 0x04001535 RID: 5429
		private string m_webAuthoringVersion;

		// Token: 0x04001536 RID: 5430
		private string m_defaultView;

		// Token: 0x04001537 RID: 5431
		private AuthoringMetadata m_authoringMetadata;

		// Token: 0x04001538 RID: 5432
		private bool m_hasDrillthroughs;

		// Token: 0x04001539 RID: 5433
		private string m_rdlReportLanguage;

		// Token: 0x0400153A RID: 5434
		private bool m_hasGrouping;

		// Token: 0x0400153B RID: 5435
		private bool m_hasSorting;

		// Token: 0x0400153C RID: 5436
		private bool m_requiresSortingPostGrouping;

		// Token: 0x0400153D RID: 5437
		private bool m_hasUserSort;

		// Token: 0x0400153E RID: 5438
		private bool m_hasGroupFilters;

		// Token: 0x0400153F RID: 5439
		private bool m_hasSpecialRecursiveAggregates;

		// Token: 0x04001540 RID: 5440
		private bool m_subReportMergeTransactions;

		// Token: 0x04001541 RID: 5441
		private ExprHostCompiler m_reportCT;

		// Token: 0x04001542 RID: 5442
		private bool m_hasImageStreams;

		// Token: 0x04001543 RID: 5443
		private bool m_hasLabels;

		// Token: 0x04001544 RID: 5444
		private bool m_hasBookmarks;

		// Token: 0x04001545 RID: 5445
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox> m_textBoxesWithUserSortTarget = new List<Microsoft.ReportingServices.ReportIntermediateFormat.TextBox>();

		// Token: 0x04001546 RID: 5446
		private List<ICreateSubtotals> m_createSubtotalsDefs = new List<ICreateSubtotals>();

		// Token: 0x04001547 RID: 5447
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.Grouping> m_domainScopeGroups = new List<Microsoft.ReportingServices.ReportIntermediateFormat.Grouping>();

		// Token: 0x04001548 RID: 5448
		private Holder<int> m_variableSequenceIdCounter = new Holder<int>();

		// Token: 0x04001549 RID: 5449
		private Holder<int> m_textboxSequenceIdCounter = new Holder<int>();

		// Token: 0x0400154A RID: 5450
		private bool m_hasFilters;

		// Token: 0x0400154B RID: 5451
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSet> m_dataSets = new List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSet>();

		// Token: 0x0400154C RID: 5452
		private bool m_parametersNotUsedInQuery = true;

		// Token: 0x0400154D RID: 5453
		private Hashtable m_usedInQueryInfos = new Hashtable();

		// Token: 0x0400154E RID: 5454
		private Hashtable m_reportParamUserProfile = new Hashtable();

		// Token: 0x0400154F RID: 5455
		private Hashtable m_dataSetQueryInfo = new Hashtable();

		// Token: 0x04001550 RID: 5456
		private ArrayList m_dynamicParameters = new ArrayList();

		// Token: 0x04001551 RID: 5457
		private CultureInfo m_reportLanguage;

		// Token: 0x04001552 RID: 5458
		private bool m_hasUserSortPeerScopes;

		// Token: 0x04001553 RID: 5459
		private Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope> m_reportScopes = new Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope>();

		// Token: 0x04001554 RID: 5460
		private StringDictionary m_dataSourceNames = new StringDictionary();

		// Token: 0x04001555 RID: 5461
		private int m_dataRegionCount;

		// Token: 0x04001556 RID: 5462
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportItemCollection> m_reportItemCollectionList = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportItemCollection>();

		// Token: 0x04001557 RID: 5463
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder> m_aggregateHolderList = new List<Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder>();

		// Token: 0x04001558 RID: 5464
		private List<Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder> m_runningValueHolderList = new List<Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder>();

		// Token: 0x04001559 RID: 5465
		private Microsoft.ReportingServices.ReportIntermediateFormat.Report m_report;

		// Token: 0x0400155A RID: 5466
		private ParametersGridLayout m_parametersLayout;

		// Token: 0x0400155B RID: 5467
		private PublishingErrorContext m_errorContext;

		// Token: 0x0400155C RID: 5468
		private PublishingContextBase m_publishingContext;

		// Token: 0x0400155D RID: 5469
		private readonly ReportUpgradeStrategy m_reportUpgradeStrategy;

		// Token: 0x0400155E RID: 5470
		private ScopeTree m_scopeTree;

		// Token: 0x0400155F RID: 5471
		private Dictionary<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo.AggregateTypes, Dictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo>>> m_aggregateHashByType = new Dictionary<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo.AggregateTypes, Dictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo>>>();

		// Token: 0x04001560 RID: 5472
		private Dictionary<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo.AggregateTypes, Dictionary<string, AllowNullKeyDictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>>>> m_runningValueHashByType = new Dictionary<Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo.AggregateTypes, Dictionary<string, AllowNullKeyDictionary<string, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo>>>>();

		// Token: 0x04001561 RID: 5473
		private bool m_wroteAggregateHeaderInformation;

		// Token: 0x04001562 RID: 5474
		private DataSetCore m_dataSetCore;

		// Token: 0x02000953 RID: 2387
		internal sealed class DataShapeDefinitionToRifConverter
		{
			// Token: 0x06007FC3 RID: 32707 RVA: 0x0020EDDE File Offset: 0x0020CFDE
			internal DataShapeDefinitionToRifConverter(ReportPublishing reportPublishingInstance, ExprHostCompiler exprHostCompiler, DataShapeProcessingDataSourceContext dataSourceContext)
			{
				this.m_reportPublishingInstance = reportPublishingInstance;
				this.m_expressionConverter = new DataShapeDefinitionExpressionTreeConverter(exprHostCompiler);
				this.m_dataSourceContext = dataSourceContext;
				this.m_memberMappingPerDataShape = new Dictionary<Microsoft.ReportingServices.ReportIntermediateFormat.DataShape, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeMember>>();
			}

			// Token: 0x06007FC4 RID: 32708 RVA: 0x0020EE0B File Offset: 0x0020D00B
			internal Microsoft.ReportingServices.ReportIntermediateFormat.Report Convert(DataShapeDefinition dataShapeDefinition)
			{
				Global.Tracer.Assert(this.m_reportPublishingInstance.m_idCounter == 0, "m_reportPublishingInstance.m_idCounter == 0");
				return this.VisitDataShapeDefinition(dataShapeDefinition);
			}

			// Token: 0x06007FC5 RID: 32709 RVA: 0x0020EE34 File Offset: 0x0020D034
			private Microsoft.ReportingServices.ReportIntermediateFormat.Report VisitDataShapeDefinition(DataShapeDefinition dataShapeDefinition)
			{
				if (dataShapeDefinition == null)
				{
					return null;
				}
				Microsoft.ReportingServices.ReportIntermediateFormat.Report report = new Microsoft.ReportingServices.ReportIntermediateFormat.Report();
				int num = -1;
				if (this.m_reportPublishingInstance.m_publishingContext.IsRdlSandboxingEnabled)
				{
					num = this.m_reportPublishingInstance.m_publishingContext.Configuration.RdlSandboxing.MaxExpressionLength;
				}
				PublishingContextStruct publishingContextStruct = new PublishingContextStruct(LocationFlags.None, report.ObjectType, num, this.m_reportPublishingInstance.m_errorContext);
				report.DataSources = this.VisitDataSources(dataShapeDefinition.DataSources);
				this.VisitDataSets(dataShapeDefinition.DataSets, report, publishingContextStruct);
				report.DataShapes = this.VisitDataShapes(dataShapeDefinition.DataShapes, null, report, publishingContextStruct);
				return report;
			}

			// Token: 0x06007FC6 RID: 32710 RVA: 0x0020EECC File Offset: 0x0020D0CC
			private List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSource> VisitDataSources(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.DataSource> dataSources)
			{
				if (dataSources == null)
				{
					return null;
				}
				List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSource> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.DataSource>();
				foreach (Microsoft.ReportingServices.DataShapeDefinition.DataSource dataSource in dataSources)
				{
					list.Add(this.VisitDataSource(dataSource));
				}
				if (list.Count != 0)
				{
					return list;
				}
				return null;
			}

			// Token: 0x06007FC7 RID: 32711 RVA: 0x0020EF30 File Offset: 0x0020D130
			private void VisitDataSets(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.DataSet> dataSets, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				if (dataSets == null)
				{
					return;
				}
				int num = 0;
				foreach (Microsoft.ReportingServices.DataShapeDefinition.DataSet dataSet in dataSets)
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet2 = this.VisitDataSet(dataSet, num++, parentInstancePath, context);
					this.m_reportPublishingInstance.m_dataSets.Add(dataSet2);
					Global.Tracer.Assert(!dataSet2.IsReferenceToSharedDataSet, "Shared data sets are not supported in data shapes.");
				}
			}

			// Token: 0x06007FC8 RID: 32712 RVA: 0x0020EFB0 File Offset: 0x0020D1B0
			private void VisitLimits(IEnumerable<Limit> limits, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape)
			{
				List<Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeLimit> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeLimit>();
				foreach (Limit limit in limits)
				{
					list.Add(this.VisitLimit(limit));
				}
				rifDataShape.Limits = list;
			}

			// Token: 0x06007FC9 RID: 32713 RVA: 0x0020F00C File Offset: 0x0020D20C
			private Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeLimit VisitLimit(Limit limit)
			{
				return new Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeLimit(limit.ID, limit.Operator.TranslateToRIF(), limit.Target, limit.Within);
			}

			// Token: 0x06007FCA RID: 32714 RVA: 0x0020F030 File Offset: 0x0020D230
			private List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem> VisitDataShapes(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.DataShape> dataShapes, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape dataShapeParent, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				if (dataShapes == null)
				{
					return null;
				}
				List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem>();
				foreach (Microsoft.ReportingServices.DataShapeDefinition.DataShape dataShape in dataShapes)
				{
					list.Add(this.VisitDataShape(dataShape, dataShapeParent, parentInstancePath, context));
				}
				return list;
			}

			// Token: 0x06007FCB RID: 32715 RVA: 0x0020F090 File Offset: 0x0020D290
			private Microsoft.ReportingServices.ReportIntermediateFormat.DataSource VisitDataSource(Microsoft.ReportingServices.DataShapeDefinition.DataSource dataSource)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.DataSource dataSource2 = new Microsoft.ReportingServices.ReportIntermediateFormat.DataSource(this.GenerateID());
				dataSource2.Name = dataSource.ID;
				dataSource2.DataSourceReference = dataSource.DataSourceReference;
				this.VisitConnectionProperties(dataSource2, dataSource.ConnectionProperties);
				DataShapeProcessingDataSourceContext dataShapeProcessingDataSourceContext = this.ResolveDataSource(dataSource);
				dataSource2.ConnectionCategory = dataShapeProcessingDataSourceContext.ConnectionCategory;
				DataSourceInfo dataSourceInfo = dataShapeProcessingDataSourceContext.DataSourceInfo;
				if (dataSourceInfo != null)
				{
					dataSource2.ID = dataSourceInfo.ID;
					this.m_reportPublishingInstance.m_dataSources.Add(dataSourceInfo);
				}
				return dataSource2;
			}

			// Token: 0x06007FCC RID: 32716 RVA: 0x0020F10C File Offset: 0x0020D30C
			private DataShapeProcessingDataSourceContext ResolveDataSource(Microsoft.ReportingServices.DataShapeDefinition.DataSource dataSource)
			{
				Global.Tracer.Assert((dataSource.DataSourceInfoId == Guid.Empty && this.m_dataSourceContext.DataSourceInfo == null) || dataSource.DataSourceInfoId == this.m_dataSourceContext.DataSourceInfo.ID, "Data source info ID in the DSD data source does not match data source info ID provided in the data source context.");
				return this.m_dataSourceContext;
			}

			// Token: 0x06007FCD RID: 32717 RVA: 0x0020F16B File Offset: 0x0020D36B
			private DataShapeProcessingDataSourceContext ResolveDataSource(string dsdDataSourceId)
			{
				return this.m_dataSourceContext;
			}

			// Token: 0x06007FCE RID: 32718 RVA: 0x0020F173 File Offset: 0x0020D373
			private object VisitConnectionProperties(Microsoft.ReportingServices.ReportIntermediateFormat.DataSource rifDataSource, ConnectionProperties connectionProperties)
			{
				if (connectionProperties == null)
				{
					return null;
				}
				Global.Tracer.Assert(false, "Connection property conversion is not supported.");
				return null;
			}

			// Token: 0x06007FCF RID: 32719 RVA: 0x0020F18C File Offset: 0x0020D38C
			private Microsoft.ReportingServices.ReportIntermediateFormat.DataSet VisitDataSet(Microsoft.ReportingServices.DataShapeDefinition.DataSet dataSet, int indexCounter, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet2 = new Microsoft.ReportingServices.ReportIntermediateFormat.DataSet(this.GenerateID(), indexCounter);
				dataSet2.ParentInstancePath = parentInstancePath;
				dataSet2.Name = dataSet.ID;
				dataSet2.CollationCulture = dataSet.CollationCulture;
				this.m_reportPublishingInstance.ValidateCollationCultureAndSetLcid(dataSet2, context);
				dataSet2.CaseSensitivity = ReportPublishing.DataShapeDefinitionToRifConverter.ConvertTriState(dataSet.CaseSensitivity);
				dataSet2.AccentSensitivity = ReportPublishing.DataShapeDefinitionToRifConverter.ConvertTriState(dataSet.AccentSensitivity);
				dataSet2.KanatypeSensitivity = ReportPublishing.DataShapeDefinitionToRifConverter.ConvertTriState(dataSet.KanatypeSensitivity);
				dataSet2.WidthSensitivity = ReportPublishing.DataShapeDefinitionToRifConverter.ConvertTriState(dataSet.WidthSensitivity);
				dataSet2.InterpretSubtotalsAsDetails = ReportPublishing.DataShapeDefinitionToRifConverter.ConvertTriState(dataSet.InterpretSubtotalsAsDetails);
				dataSet2.NullsAsBlanks = dataSet.NullsAsBlanks;
				dataSet2.UseOrdinalStringKeyGeneration = dataSet.UseOrdinalStringKeyGeneration;
				context.Location |= LocationFlags.InDataSet;
				context.ObjectType = dataSet2.ObjectType;
				context.ObjectName = dataSet.ID;
				dataSet2.DefaultRelationships = this.VisitDefaultRelationships(dataSet.DefaultRelationships, context);
				this.m_reportPublishingInstance.m_reportScopes.Add(dataSet2.Name, dataSet2);
				this.m_reportPublishingInstance.m_aggregateHolderList.Add(dataSet2);
				int num;
				dataSet2.Fields = this.VisitFields(dataSet.Fields, context, out num);
				dataSet2.NonCalculatedFieldCount = num;
				bool flag = false;
				Dictionary<string, bool> dictionary = new Dictionary<string, bool>();
				dataSet2.Query = this.VisitQuery(dataSet.Query, dictionary, ref flag, context);
				Global.Tracer.Assert(!flag, "Complex queries not supported in data shapes.");
				Global.Tracer.Assert(dictionary.Count == 0, "Query parameters not supported in data shapes.");
				this.m_reportPublishingInstance.ValidateDataSet(dataSet2, context, flag, dictionary);
				return dataSet2;
			}

			// Token: 0x06007FD0 RID: 32720 RVA: 0x0020F320 File Offset: 0x0020D520
			private List<Microsoft.ReportingServices.ReportIntermediateFormat.Field> VisitFields(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.Field> fields, PublishingContextStruct context, out int calculatedFieldStartIndex)
			{
				calculatedFieldStartIndex = -1;
				List<Microsoft.ReportingServices.ReportIntermediateFormat.Field> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.Field>();
				List<string> list2 = new List<string>();
				if (fields != null)
				{
					foreach (Microsoft.ReportingServices.DataShapeDefinition.Field field in fields)
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.Field field2 = this.VisitField(field, context);
						this.m_reportPublishingInstance.InsertField(field2, field.AggregateIndicatorField, list, list2, ref calculatedFieldStartIndex);
					}
				}
				if (calculatedFieldStartIndex < 0)
				{
					calculatedFieldStartIndex = list.Count;
				}
				ReportPublishing.AssignAndValidateAggregateIndicatorFieldIndex(context, list, list2);
				return list;
			}

			// Token: 0x06007FD1 RID: 32721 RVA: 0x0020F3AC File Offset: 0x0020D5AC
			private Microsoft.ReportingServices.ReportIntermediateFormat.Field VisitField(Microsoft.ReportingServices.DataShapeDefinition.Field field, PublishingContextStruct context)
			{
				string objectName = context.ObjectName;
				context.ObjectName = field.ID;
				context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.Field;
				Microsoft.ReportingServices.ReportIntermediateFormat.Field field2 = new Microsoft.ReportingServices.ReportIntermediateFormat.Field();
				field2.Name = field.ID;
				field2.DataField = field.DataField;
				Expression value = field.Value;
				if (value != null)
				{
					field2.Value = this.VisitExpression(value);
				}
				this.m_reportPublishingInstance.ValidateField(field2, value, context, objectName);
				return field2;
			}

			// Token: 0x06007FD2 RID: 32722 RVA: 0x0020F41C File Offset: 0x0020D61C
			private Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo VisitExpression(Expression expression)
			{
				return this.m_expressionConverter.Convert(expression.ExpressionTree);
			}

			// Token: 0x06007FD3 RID: 32723 RVA: 0x0020F430 File Offset: 0x0020D630
			private Microsoft.ReportingServices.ReportIntermediateFormat.ReportQuery VisitQuery(Query query, Dictionary<string, bool> parametersInQuery, ref bool isComplexQuery, PublishingContextStruct context)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.ReportQuery reportQuery = new Microsoft.ReportingServices.ReportIntermediateFormat.ReportQuery();
				reportQuery.CommandType = CommandType.Text;
				reportQuery.DataSourceName = query.DataSourceId;
				context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.Query;
				reportQuery.CommandText = this.m_reportPublishingInstance.ReadQueryOrParameterExpression(query.CommandText, "CommandText", Microsoft.ReportingServices.RdlExpressions.ExpressionParser.EvaluationMode.Auto, context, DataType.String, ref isComplexQuery, parametersInQuery);
				DataShapeProcessingDataSourceContext dataShapeProcessingDataSourceContext = this.ResolveDataSource(query.DataSourceId);
				reportQuery.TimeOut = dataShapeProcessingDataSourceContext.CommandTimeout;
				return reportQuery;
			}

			// Token: 0x06007FD4 RID: 32724 RVA: 0x0020F49C File Offset: 0x0020D69C
			private Microsoft.ReportingServices.ReportIntermediateFormat.DataShape VisitDataShape(Microsoft.ReportingServices.DataShapeDefinition.DataShape dataShape, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape dataShapeParent, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape = new Microsoft.ReportingServices.ReportIntermediateFormat.DataShape(this.GenerateID(), dataShapeParent);
				rifDataShape.Name = dataShape.ID;
				rifDataShape.ParentInstancePath = parentInstancePath;
				rifDataShape.RequestedPrimaryLeafCount = dataShape.RequestedPrimaryLeafCount;
				if (dataShape.RestartDefinitions != null)
				{
					this.m_memberMappingPerDataShape.Add(rifDataShape, new Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeMember>());
				}
				context.Location |= LocationFlags.InDataSet | LocationFlags.InDataRegion;
				context.ObjectType = rifDataShape.ObjectType;
				context.ObjectName = dataShape.ID;
				this.m_reportPublishingInstance.RegisterDataRegion(rifDataShape);
				this.VisitDataShapeMessages(dataShape, rifDataShape);
				if (rifDataShape.ErrorContext.HasError)
				{
					return rifDataShape;
				}
				List<IdcRelationship> list = this.VisitDataBinding(dataShape.DataBinding, rifDataShape.DataScopeInfo, rifDataShape, context);
				this.AssertRelationShipCount(list, 1, "DataShape");
				string text = ((dataShape.DataBinding == null) ? null : dataShape.DataBinding.DataSetId);
				rifDataShape.DataScopeInfo.SetRelationship(text, (list == null) ? null : list[0]);
				this.VisitDataShapeHierarchy(dataShape.PrimaryHierarchy, rifDataShape, false, rifDataShape, context);
				this.VisitDataShapeHierarchy(dataShape.SecondaryHierarchy, rifDataShape, true, rifDataShape, context);
				this.VisitDataItem(dataShape, rifDataShape, delegate(List<Microsoft.ReportingServices.ReportIntermediateFormat.Calculation> calculations)
				{
					rifDataShape.Calculations = calculations;
				}, delegate(List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem> nestedDataShapes)
				{
					rifDataShape.DataShapes = nestedDataShapes;
				}, rifDataShape, context);
				rifDataShape.DataRows = this.VisitDataRows(dataShape.DataRows, rifDataShape, context);
				if (dataShape.Limits != null)
				{
					this.VisitLimits(dataShape.Limits, rifDataShape);
				}
				if (dataShape.RestartDefinitions != null)
				{
					this.VisitRestartDefinition(dataShape.RestartDefinitions, rifDataShape);
				}
				return rifDataShape;
			}

			// Token: 0x06007FD5 RID: 32725 RVA: 0x0020F690 File Offset: 0x0020D890
			private void VisitDataShapeMessages(Microsoft.ReportingServices.DataShapeDefinition.DataShape dataShape, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape)
			{
				if (dataShape.DataShapeMessages == null)
				{
					return;
				}
				foreach (DataShapeMessage dataShapeMessage in dataShape.DataShapeMessages)
				{
					rifDataShape.ErrorContext.Add(DataShapeErrorMessage.Create(dataShapeMessage));
				}
			}

			// Token: 0x06007FD6 RID: 32726 RVA: 0x0020F6F0 File Offset: 0x0020D8F0
			private void VisitDataShapeHierarchy(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.DataMember> hierarchyMembers, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape, bool isColumnHierarchy, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				int num = 0;
				DataShapeMemberList dataShapeMemberList = this.VisitDataMembers(hierarchyMembers, rifDataShape, null, isColumnHierarchy, 0, ref num, parentInstancePath, context);
				if (isColumnHierarchy)
				{
					rifDataShape.SecondaryHierarchy = dataShapeMemberList;
					rifDataShape.ColumnCount = num;
					return;
				}
				rifDataShape.PrimaryHierarchy = dataShapeMemberList;
				rifDataShape.RowCount = num;
			}

			// Token: 0x06007FD7 RID: 32727 RVA: 0x0020F734 File Offset: 0x0020D934
			private List<IdcRelationship> VisitDataBinding(DataBinding dataBinding, DataScopeInfo rifDataBinding, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape, PublishingContextStruct context)
			{
				Global.Tracer.Assert(context.ObjectType == Microsoft.ReportingServices.ReportProcessing.ObjectType.Grouping || context.ObjectType == Microsoft.ReportingServices.ReportProcessing.ObjectType.DataShape || context.ObjectType == Microsoft.ReportingServices.ReportProcessing.ObjectType.DataShapeIntersection, "Data bindings can only appear in groupings, data shapes, data members and data intersections.");
				if (dataBinding == null)
				{
					return null;
				}
				Microsoft.ReportingServices.ReportProcessing.ObjectType objectType = context.ObjectType;
				context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.DataBinding;
				List<IdcRelationship> list = this.VisitRelationships(dataBinding.Relationships, context);
				string dataSetId = dataBinding.DataSetId;
				Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet = this.ResolveDataSet(dataSetId);
				if (dataSet != null && !dataSet.DataRegions.Contains(rifDataShape))
				{
					dataSet.DataRegions.Add(rifDataShape);
				}
				return list;
			}

			// Token: 0x06007FD8 RID: 32728 RVA: 0x0020F7C4 File Offset: 0x0020D9C4
			private List<Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship> VisitDefaultRelationships(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.DefaultRelationship> relationships, PublishingContextStruct context)
			{
				if (relationships == null)
				{
					return null;
				}
				List<Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship> list = null;
				foreach (Microsoft.ReportingServices.DataShapeDefinition.DefaultRelationship defaultRelationship in relationships)
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship defaultRelationship2 = this.VisitDefaultRelationship(defaultRelationship, context);
					if (list == null)
					{
						list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship>();
					}
					list.Add(defaultRelationship2);
				}
				return list;
			}

			// Token: 0x06007FD9 RID: 32729 RVA: 0x0020F828 File Offset: 0x0020DA28
			private Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship VisitDefaultRelationship(Microsoft.ReportingServices.DataShapeDefinition.DefaultRelationship relationship, PublishingContextStruct context)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship defaultRelationship = new Microsoft.ReportingServices.ReportIntermediateFormat.DefaultRelationship();
				defaultRelationship.RelatedDataSetName = relationship.RelatedDataSet;
				defaultRelationship.NaturalJoin = relationship.NaturalJoin;
				this.PopulateAndValidateJoinConditions(defaultRelationship, relationship.JoinConditions, relationship.RelatedDataSet, relationship.NaturalJoin, context);
				return defaultRelationship;
			}

			// Token: 0x06007FDA RID: 32730 RVA: 0x0020F870 File Offset: 0x0020DA70
			private List<IdcRelationship> VisitRelationships(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.Relationship> relationships, PublishingContextStruct context)
			{
				if (relationships == null)
				{
					return null;
				}
				List<IdcRelationship> list = new List<IdcRelationship>();
				foreach (Microsoft.ReportingServices.DataShapeDefinition.Relationship relationship in relationships)
				{
					IdcRelationship idcRelationship = this.VisitRelationship(relationship, context);
					if (idcRelationship != null)
					{
						list.Add(idcRelationship);
					}
				}
				if (list.Count != 0)
				{
					return list;
				}
				return null;
			}

			// Token: 0x06007FDB RID: 32731 RVA: 0x0020F8DC File Offset: 0x0020DADC
			private IdcRelationship VisitRelationship(Microsoft.ReportingServices.DataShapeDefinition.Relationship relationship, PublishingContextStruct context)
			{
				IdcRelationship idcRelationship = new IdcRelationship();
				idcRelationship.ParentScope = relationship.ParentScopeName;
				idcRelationship.NaturalJoin = relationship.NaturalJoin;
				this.PopulateAndValidateJoinConditions(idcRelationship, relationship.JoinConditions, relationship.ParentScopeName, relationship.NaturalJoin, context);
				return idcRelationship;
			}

			// Token: 0x06007FDC RID: 32732 RVA: 0x0020F924 File Offset: 0x0020DB24
			private void PopulateAndValidateJoinConditions(Microsoft.ReportingServices.ReportIntermediateFormat.Relationship rifRelationship, IEnumerable<JoinCondition> joinConditions, string parentScope, bool naturalJoin, PublishingContextStruct context)
			{
				bool flag;
				IEnumerable<Microsoft.ReportingServices.ReportIntermediateFormat.Relationship.JoinCondition> enumerable = this.VisitJoinConditions(joinConditions, context, out flag);
				if (enumerable != null)
				{
					foreach (Microsoft.ReportingServices.ReportIntermediateFormat.Relationship.JoinCondition joinCondition in enumerable)
					{
						rifRelationship.AddJoinCondition(joinCondition);
					}
				}
				if (!naturalJoin && flag)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsInvalidSortDirectionMustNotBeSpecified, Severity.Error, context.ObjectType, context.ObjectName, "JoinCondition", new string[] { "SortDirection", "ParentScope", parentScope });
				}
			}

			// Token: 0x06007FDD RID: 32733 RVA: 0x0020F9C4 File Offset: 0x0020DBC4
			private IEnumerable<Microsoft.ReportingServices.ReportIntermediateFormat.Relationship.JoinCondition> VisitJoinConditions(IEnumerable<JoinCondition> joinConditions, PublishingContextStruct context, out bool sortDirectionSpecified)
			{
				sortDirectionSpecified = false;
				if (joinConditions == null)
				{
					return null;
				}
				List<Microsoft.ReportingServices.ReportIntermediateFormat.Relationship.JoinCondition> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.Relationship.JoinCondition>();
				foreach (JoinCondition joinCondition in joinConditions)
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.Relationship.JoinCondition joinCondition2 = this.VisitJoinCondition(joinCondition, ref sortDirectionSpecified, context);
					if (joinCondition2 != null)
					{
						list.Add(joinCondition2);
					}
				}
				return list;
			}

			// Token: 0x06007FDE RID: 32734 RVA: 0x0020FA28 File Offset: 0x0020DC28
			private Microsoft.ReportingServices.ReportIntermediateFormat.Relationship.JoinCondition VisitJoinCondition(JoinCondition joinCondition, ref bool sortDirectionSpecified, PublishingContextStruct context)
			{
				if (joinCondition.SortDirection != Microsoft.ReportingServices.DataShapeDefinition.SortDirection.Unspecified)
				{
					sortDirectionSpecified = true;
				}
				Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.VisitExpression(joinCondition.ForeignKey);
				if (expressionInfo == null)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsElementMustContainChild, Severity.Error, context.ObjectType, context.ObjectName, "JoinCondition", new string[] { "ForeignKey" });
				}
				Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo2 = this.VisitExpression(joinCondition.PrimaryKey);
				if (expressionInfo2 == null)
				{
					context.ErrorContext.Register(ProcessingErrorCode.rsElementMustContainChild, Severity.Error, context.ObjectType, context.ObjectName, "JoinCondition", new string[] { "PrimaryKey" });
				}
				if (expressionInfo == null || expressionInfo2 == null)
				{
					return null;
				}
				return new Microsoft.ReportingServices.ReportIntermediateFormat.Relationship.JoinCondition(expressionInfo, expressionInfo2, ReportPublishing.DataShapeDefinitionToRifConverter.ConvertSortDirection(joinCondition.SortDirection));
			}

			// Token: 0x06007FDF RID: 32735 RVA: 0x0020FAE4 File Offset: 0x0020DCE4
			private DataShapeMemberList VisitDataMembers(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.DataMember> dataMembers, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape, Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeMember parentMember, bool isColumnHierarchy, int level, ref int totalLeafNodes, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				if (dataMembers == null)
				{
					return null;
				}
				DataShapeMemberList dataShapeMemberList = new DataShapeMemberList();
				foreach (Microsoft.ReportingServices.DataShapeDefinition.DataMember dataMember in dataMembers)
				{
					dataShapeMemberList.Add(this.VisitDataMember(dataMember, rifDataShape, parentMember, isColumnHierarchy, level, ref totalLeafNodes, parentInstancePath, context));
				}
				if (dataShapeMemberList.Count != 0)
				{
					return dataShapeMemberList;
				}
				return null;
			}

			// Token: 0x06007FE0 RID: 32736 RVA: 0x0020FB58 File Offset: 0x0020DD58
			private DataShapeRowList VisitDataRows(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.DataRow> dataRows, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape, PublishingContextStruct context)
			{
				if (dataRows == null)
				{
					return null;
				}
				List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode> list = ((rifDataShape.SecondaryHierarchy == null) ? null : rifDataShape.SecondaryHierarchy.GetLeafNodes());
				List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode> list2 = ((rifDataShape.PrimaryHierarchy == null) ? null : rifDataShape.PrimaryHierarchy.GetLeafNodes());
				DataShapeRowList dataShapeRowList = new DataShapeRowList();
				int num = 0;
				int num2 = ((list2 == null) ? 0 : list2.Count);
				foreach (Microsoft.ReportingServices.DataShapeDefinition.DataRow dataRow in dataRows)
				{
					IInstancePath instancePath = ((num < num2) ? list2[num] : null);
					Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeRow dataShapeRow = this.VisitDataRow(rifDataShape, dataRow, list, instancePath, context);
					dataShapeRowList.Add(dataShapeRow);
					num++;
				}
				if (dataShapeRowList.Count != 0)
				{
					return dataShapeRowList;
				}
				return null;
			}

			// Token: 0x06007FE1 RID: 32737 RVA: 0x0020FC20 File Offset: 0x0020DE20
			private Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeMember VisitDataMember(Microsoft.ReportingServices.DataShapeDefinition.DataMember dataMember, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape, Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeMember parentMember, bool isColumnHierarchy, int level, ref int totalLeafNodes, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.DataShapeMember;
				Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeMember rifDataMember = new Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeMember(this.GenerateID(), rifDataShape);
				rifDataMember.Name = dataMember.ID;
				rifDataMember.ParentMember = parentMember;
				rifDataMember.ParentInstancePath = parentInstancePath;
				rifDataMember.IsColumn = isColumnHierarchy;
				rifDataMember.Level = level;
				this.m_reportPublishingInstance.m_runningValueHolderList.Add(rifDataMember);
				rifDataMember.Grouping = this.VisitGroup(dataMember.Group, dataMember.ID, rifDataMember, rifDataShape, context);
				int num = 0;
				DataShapeMemberList dataShapeMemberList = this.VisitDataMembers(dataMember.DataMembers, rifDataShape, rifDataMember, isColumnHierarchy, level + 1, ref num, rifDataMember, context);
				rifDataMember.SubMembers = dataShapeMemberList;
				this.VisitDataItem(dataMember, rifDataShape, delegate(List<Microsoft.ReportingServices.ReportIntermediateFormat.Calculation> calculations)
				{
					rifDataMember.Calculations = calculations;
				}, delegate(List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem> nestedDataShapes)
				{
					rifDataMember.DataShapes = nestedDataShapes;
				}, rifDataMember, context);
				if (dataShapeMemberList == null || dataShapeMemberList.Count == 0)
				{
					num = 1;
				}
				totalLeafNodes += num;
				if (isColumnHierarchy)
				{
					rifDataMember.ColSpan = num;
				}
				else
				{
					rifDataMember.RowSpan = num;
				}
				if (this.m_memberMappingPerDataShape.ContainsKey(rifDataShape))
				{
					this.m_memberMappingPerDataShape[rifDataShape].Add(dataMember.ID, rifDataMember);
				}
				return rifDataMember;
			}

			// Token: 0x06007FE2 RID: 32738 RVA: 0x0020FD8C File Offset: 0x0020DF8C
			private void AssertRelationShipCount(List<IdcRelationship> idcRelationShips, int maxRelationShip, string objectName)
			{
				int num = ((idcRelationShips == null) ? 0 : idcRelationShips.Count);
				Global.Tracer.Assert(num <= maxRelationShip, string.Concat(new string[]
				{
					"Found ",
					num.ToString(),
					" relationships. ",
					objectName,
					"must have at most 1 relationship."
				}));
			}

			// Token: 0x06007FE3 RID: 32739 RVA: 0x0020FDE8 File Offset: 0x0020DFE8
			private Microsoft.ReportingServices.ReportIntermediateFormat.Grouping VisitGroup(Microsoft.ReportingServices.DataShapeDefinition.Group group, string rifGroupName, Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeMember rifDataMember, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape, PublishingContextStruct context)
			{
				if (group == null)
				{
					return null;
				}
				context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.Grouping;
				context.ObjectName = rifGroupName;
				this.m_reportPublishingInstance.m_hasGrouping = true;
				Microsoft.ReportingServices.ReportIntermediateFormat.Grouping grouping = new Microsoft.ReportingServices.ReportIntermediateFormat.Grouping(this.GenerateID(), Microsoft.ReportingServices.ReportIntermediateFormat.ConstructionPhase.Publishing);
				grouping.NaturalGroup = group.NaturalGroup;
				grouping.StartPositions = group.StartPositions;
				grouping.Name = rifGroupName;
				this.m_reportPublishingInstance.m_aggregateHolderList.Add(grouping);
				List<IdcRelationship> list = this.VisitDataBinding(group.DataBinding, rifDataMember.DataScopeInfo, rifDataShape, context);
				this.AssertRelationShipCount(list, 1, "Grouping");
				string text = ((group.DataBinding == null) ? null : group.DataBinding.DataSetId);
				rifDataMember.DataScopeInfo.SetRelationship(text, (list == null) ? null : list[0]);
				grouping.ScopeIDDefinition = this.VisitScopeIdDefinition(group.ScopeIdDefinition, context);
				grouping.GroupExpressions = this.VisitGroupExpressions(group.GroupExpressions, context);
				if (grouping.NaturalGroup)
				{
					foreach (Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo in grouping.GroupExpressions)
					{
						if (this.m_reportPublishingInstance.m_publishingContext.IsRestrictedNaturalGroupSort(expressionInfo))
						{
							context.ErrorContext.Register(ProcessingErrorCode.rsInvalidNaturalSortGroupExpressionNotSimpleFieldReference, Severity.Error, context.ObjectType, context.ObjectName, "GroupExpression", new string[] { "NaturalGroup" });
						}
					}
				}
				return grouping;
			}

			// Token: 0x06007FE4 RID: 32740 RVA: 0x0020FF64 File Offset: 0x0020E164
			private List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo> VisitGroupExpressions(IEnumerable<Expression> groupExpressions, PublishingContextStruct context)
			{
				if (groupExpressions == null)
				{
					return null;
				}
				List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo>();
				foreach (Expression expression in groupExpressions)
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.VisitExpression(expression);
					list.Add(expressionInfo);
				}
				if (list.Count != 0)
				{
					return list;
				}
				return null;
			}

			// Token: 0x06007FE5 RID: 32741 RVA: 0x0020FFCC File Offset: 0x0020E1CC
			private ScopeIDDefinition VisitScopeIdDefinition(ScopeIdDefinition scopeIdDefinition, PublishingContextStruct context)
			{
				if (scopeIdDefinition == null)
				{
					return null;
				}
				return new ScopeIDDefinition
				{
					ScopeValues = this.VisitScopeValueDefinitions(scopeIdDefinition.Values, context),
					OmitScopeIdFromDataShapeResult = scopeIdDefinition.OmitScopeIdFromDataShapeResult
				};
			}

			// Token: 0x06007FE6 RID: 32742 RVA: 0x0020FFF8 File Offset: 0x0020E1F8
			private List<Microsoft.ReportingServices.ReportIntermediateFormat.ScopeValueDefinition> VisitScopeValueDefinitions(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.ScopeValueDefinition> scopeValueDefinitions, PublishingContextStruct context)
			{
				if (scopeValueDefinitions == null)
				{
					return null;
				}
				List<Microsoft.ReportingServices.ReportIntermediateFormat.ScopeValueDefinition> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.ScopeValueDefinition>();
				foreach (Microsoft.ReportingServices.DataShapeDefinition.ScopeValueDefinition scopeValueDefinition in scopeValueDefinitions)
				{
					list.Add(this.VisitScopeValueDefinition(scopeValueDefinition, context));
				}
				return list;
			}

			// Token: 0x06007FE7 RID: 32743 RVA: 0x00210054 File Offset: 0x0020E254
			private Microsoft.ReportingServices.ReportIntermediateFormat.ScopeValueDefinition VisitScopeValueDefinition(Microsoft.ReportingServices.DataShapeDefinition.ScopeValueDefinition scopeValueDefinition, PublishingContextStruct context)
			{
				return new Microsoft.ReportingServices.ReportIntermediateFormat.ScopeValueDefinition
				{
					Value = this.VisitExpression(scopeValueDefinition.Value)
				};
			}

			// Token: 0x06007FE8 RID: 32744 RVA: 0x00210070 File Offset: 0x0020E270
			private Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeRow VisitDataRow(Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape, Microsoft.ReportingServices.DataShapeDefinition.DataRow dataRow, List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode> secondaryHierarchyLeafNodes, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeRow dataShapeRow = new Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeRow(this.GenerateID())
				{
					ParentInstancePath = parentInstancePath,
					DataShapeIntersections = new DataShapeIntersectionList()
				};
				if (dataRow != null)
				{
					int num = -1;
					int num2 = 0;
					int num3 = ((secondaryHierarchyLeafNodes == null) ? 0 : secondaryHierarchyLeafNodes.Count);
					foreach (DataIntersection dataIntersection in dataRow)
					{
						Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode reportHierarchyNode = ((num2 < num3) ? secondaryHierarchyLeafNodes[num2] : null);
						Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeIntersection dataShapeIntersection = this.VisitDataIntersection(dataIntersection, rifDataShape, reportHierarchyNode, dataShapeRow, context);
						dataShapeRow.DataShapeIntersections.Add(dataShapeIntersection);
						num2++;
					}
					int num4 = ((dataShapeRow.Cells == null) ? 0 : dataShapeRow.Cells.Count);
					if (num > 0 && num4 != num)
					{
						context.ErrorContext.Register(ProcessingErrorCode.rsInconsistentNumberofCellsInRow, Severity.Error, context.ObjectType, context.ObjectName, "DataShape", Array.Empty<string>());
					}
					num = num4;
				}
				return dataShapeRow;
			}

			// Token: 0x06007FE9 RID: 32745 RVA: 0x00210170 File Offset: 0x0020E370
			private Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeIntersection VisitDataIntersection(DataIntersection dataIntersection, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape, Microsoft.ReportingServices.ReportIntermediateFormat.IDOwner parentColumnIDOwner, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.DataShapeIntersection;
				Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeIntersection rifDataIntersection = new Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeIntersection(this.GenerateID(), rifDataShape);
				rifDataIntersection.Name = dataIntersection.ID;
				rifDataIntersection.ParentInstancePath = parentInstancePath;
				rifDataIntersection.SetParentColumnIDOwner(parentColumnIDOwner);
				this.m_reportPublishingInstance.m_aggregateHolderList.Add(rifDataIntersection);
				this.m_reportPublishingInstance.m_runningValueHolderList.Add(rifDataIntersection);
				if (dataIntersection != null)
				{
					List<IdcRelationship> list = this.VisitDataBinding(dataIntersection.DataBinding, rifDataIntersection.DataScopeInfo, rifDataShape, context);
					this.AssertRelationShipCount(list, 2, "Intersections");
					string text = ((dataIntersection.DataBinding == null) ? null : dataIntersection.DataBinding.DataSetId);
					rifDataIntersection.DataScopeInfo.SetRelationship(text, list);
					this.VisitDataItem(dataIntersection, rifDataShape, delegate(List<Microsoft.ReportingServices.ReportIntermediateFormat.Calculation> calculations)
					{
						rifDataIntersection.Calculations = calculations;
					}, delegate(List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem> nestedDataShapes)
					{
						rifDataIntersection.DataShapes = nestedDataShapes;
					}, rifDataIntersection, context);
				}
				return rifDataIntersection;
			}

			// Token: 0x06007FEA RID: 32746 RVA: 0x00210278 File Offset: 0x0020E478
			private List<Microsoft.ReportingServices.ReportIntermediateFormat.Calculation> VisitCalculations(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.Calculation> calculations, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				if (calculations == null)
				{
					return null;
				}
				List<Microsoft.ReportingServices.ReportIntermediateFormat.Calculation> list = new List<Microsoft.ReportingServices.ReportIntermediateFormat.Calculation>();
				foreach (Microsoft.ReportingServices.DataShapeDefinition.Calculation calculation in calculations)
				{
					list.Add(this.VisitCalculation(calculation, parentInstancePath, context));
				}
				if (list.Count != 0)
				{
					return list;
				}
				return null;
			}

			// Token: 0x06007FEB RID: 32747 RVA: 0x002102E0 File Offset: 0x0020E4E0
			private Microsoft.ReportingServices.ReportIntermediateFormat.Calculation VisitCalculation(Microsoft.ReportingServices.DataShapeDefinition.Calculation calculation, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				string id = calculation.ID;
				context.ObjectType = Microsoft.ReportingServices.ReportProcessing.ObjectType.Calculation;
				context.ObjectName = id;
				Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo expressionInfo = this.VisitExpression(calculation.Expression);
				return new Microsoft.ReportingServices.ReportIntermediateFormat.Calculation(parentInstancePath, id, expressionInfo);
			}

			// Token: 0x06007FEC RID: 32748 RVA: 0x0021031C File Offset: 0x0020E51C
			private void VisitDataItem(DataItem dataItem, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape dataShapeParent, Action<List<Microsoft.ReportingServices.ReportIntermediateFormat.Calculation>> setCalculations, Action<List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem>> setDataShapes, IInstancePath parentInstancePath, PublishingContextStruct context)
			{
				if (dataItem == null)
				{
					return;
				}
				List<Microsoft.ReportingServices.ReportIntermediateFormat.Calculation> list = this.VisitCalculations(dataItem.Calculations, parentInstancePath, context);
				setCalculations(list);
				List<Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem> list2 = this.VisitDataShapes(dataItem.DataShapes, dataShapeParent, parentInstancePath, context);
				setDataShapes(list2);
			}

			// Token: 0x06007FED RID: 32749 RVA: 0x0021035F File Offset: 0x0020E55F
			private static DataType ConvertDataType(string dataType)
			{
				if (!string.IsNullOrEmpty(dataType))
				{
					return (DataType)Enum.Parse(typeof(DataType), dataType, true);
				}
				return DataType.String;
			}

			// Token: 0x06007FEE RID: 32750 RVA: 0x00210382 File Offset: 0x0020E582
			private static Microsoft.ReportingServices.ReportIntermediateFormat.SortDirection ConvertSortDirection(Microsoft.ReportingServices.DataShapeDefinition.SortDirection direction)
			{
				if (direction <= Microsoft.ReportingServices.DataShapeDefinition.SortDirection.Ascending)
				{
					return Microsoft.ReportingServices.ReportIntermediateFormat.SortDirection.Ascending;
				}
				if (direction == Microsoft.ReportingServices.DataShapeDefinition.SortDirection.Descending)
				{
					return Microsoft.ReportingServices.ReportIntermediateFormat.SortDirection.Descending;
				}
				Global.Tracer.Assert(false, "Unsupported sort direction detected.");
				throw new NotSupportedException();
			}

			// Token: 0x06007FEF RID: 32751 RVA: 0x002103A5 File Offset: 0x0020E5A5
			private static Microsoft.ReportingServices.ReportIntermediateFormat.DataSet.TriState ConvertTriState(Microsoft.ReportingServices.DataShapeDefinition.DataSet.TriState triStateValue)
			{
				switch (triStateValue)
				{
				case Microsoft.ReportingServices.DataShapeDefinition.DataSet.TriState.Auto:
					return Microsoft.ReportingServices.ReportIntermediateFormat.DataSet.TriState.Auto;
				case Microsoft.ReportingServices.DataShapeDefinition.DataSet.TriState.True:
					return Microsoft.ReportingServices.ReportIntermediateFormat.DataSet.TriState.True;
				case Microsoft.ReportingServices.DataShapeDefinition.DataSet.TriState.False:
					return Microsoft.ReportingServices.ReportIntermediateFormat.DataSet.TriState.False;
				default:
					Global.Tracer.Assert(false, "Unsupported TriState value detected!");
					throw new NotSupportedException();
				}
			}

			// Token: 0x06007FF0 RID: 32752 RVA: 0x002103D8 File Offset: 0x0020E5D8
			private Microsoft.ReportingServices.ReportIntermediateFormat.DataSet ResolveDataSet(string dataSetName)
			{
				return this.m_reportPublishingInstance.m_dataSets.Find((Microsoft.ReportingServices.ReportIntermediateFormat.DataSet ds) => ds.Name == dataSetName);
			}

			// Token: 0x06007FF1 RID: 32753 RVA: 0x00210410 File Offset: 0x0020E610
			private int GenerateID()
			{
				ReportPublishing reportPublishingInstance = this.m_reportPublishingInstance;
				int num = reportPublishingInstance.m_idCounter + 1;
				reportPublishingInstance.m_idCounter = num;
				return num;
			}

			// Token: 0x06007FF2 RID: 32754 RVA: 0x00210434 File Offset: 0x0020E634
			private void VisitRestartDefinition(IEnumerable<Microsoft.ReportingServices.DataShapeDefinition.RestartDefinition> restartDefinitions, Microsoft.ReportingServices.ReportIntermediateFormat.DataShape rifDataShape)
			{
				rifDataShape.RestartDefinitions = new List<Microsoft.ReportingServices.ReportIntermediateFormat.RestartDefinition>();
				Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeMember> dictionary = this.m_memberMappingPerDataShape[rifDataShape];
				foreach (Microsoft.ReportingServices.DataShapeDefinition.RestartDefinition restartDefinition in restartDefinitions)
				{
					rifDataShape.RestartDefinitions.Add(new Microsoft.ReportingServices.ReportIntermediateFormat.RestartDefinition(dictionary[restartDefinition.DataMemberId], restartDefinition.IsTotal));
				}
			}

			// Token: 0x04004072 RID: 16498
			private readonly ReportPublishing m_reportPublishingInstance;

			// Token: 0x04004073 RID: 16499
			private readonly DataShapeDefinitionExpressionTreeConverter m_expressionConverter;

			// Token: 0x04004074 RID: 16500
			private readonly DataShapeProcessingDataSourceContext m_dataSourceContext;

			// Token: 0x04004075 RID: 16501
			private readonly Dictionary<Microsoft.ReportingServices.ReportIntermediateFormat.DataShape, Dictionary<string, Microsoft.ReportingServices.ReportIntermediateFormat.DataShapeMember>> m_memberMappingPerDataShape;
		}
	}
}
