using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Threading;
using Microsoft.Data.SqlClient;
using Microsoft.ReportingServices.Common;
using Microsoft.ReportingServices.DataExtensions;
using Microsoft.ReportingServices.DataProcessing;
using Microsoft.ReportingServices.Diagnostics;
using Microsoft.ReportingServices.Diagnostics.Internal;
using Microsoft.ReportingServices.Diagnostics.Utilities;
using Microsoft.ReportingServices.Interfaces;
using Microsoft.ReportingServices.OnDemandProcessing;
using Microsoft.ReportingServices.OnDemandProcessing.Scalability;
using Microsoft.ReportingServices.OnDemandReportRendering;
using Microsoft.ReportingServices.RdlExpressions;
using Microsoft.ReportingServices.ReportIntermediateFormat;
using Microsoft.ReportingServices.ReportIntermediateFormat.Persistence;
using Microsoft.ReportingServices.ReportProcessing.Execution;
using Microsoft.ReportingServices.ReportProcessing.ExprHostObjectModel;
using Microsoft.ReportingServices.ReportProcessing.Persistence;
using Microsoft.ReportingServices.ReportProcessing.ReportObjectModel;
using Microsoft.ReportingServices.ReportProcessing.Upgrade;
using Microsoft.ReportingServices.ReportPublishing;
using Microsoft.ReportingServices.ReportRendering;
using Microsoft.SqlServer.Types;

namespace Microsoft.ReportingServices.ReportProcessing
{
	// Token: 0x02000603 RID: 1539
	public sealed class ReportProcessing : IReportPublishingApi, IReportProcessingApi
	{
		// Token: 0x060054A2 RID: 21666 RVA: 0x00162EBC File Offset: 0x001610BC
		public bool ProcessToggleEvent(string showHideToggle, IChunkFactory getReportChunkFactory, EventInformation oldShowHideInfo, out EventInformation newShowHideInfo, out bool showHideInfoChanged)
		{
			newShowHideInfo = null;
			showHideInfoChanged = false;
			if (getReportChunkFactory == null)
			{
				return false;
			}
			if (showHideToggle == null)
			{
				return false;
			}
			if (ReportProcessing.ContainsFlag(getReportChunkFactory.ReportProcessingFlags, ReportProcessingFlags.OnDemandEngine))
			{
				return ReportProcessing.ProcessOdpToggleEvent(showHideToggle, getReportChunkFactory, oldShowHideInfo, out newShowHideInfo, out showHideInfoChanged);
			}
			ChunkFactoryAdapter chunkFactoryAdapter = new ChunkFactoryAdapter(getReportChunkFactory);
			return this.ProcessYukonToggleEvent(showHideToggle, new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk), oldShowHideInfo, out newShowHideInfo, out showHideInfoChanged);
		}

		// Token: 0x060054A3 RID: 21667 RVA: 0x00162F18 File Offset: 0x00161118
		internal static bool ProcessOdpToggleEvent(string showHideToggle, IChunkFactory getReportChunkFactory, EventInformation oldShowHideInfo, out EventInformation newShowHideInfo, out bool showHideInfoChanged)
		{
			newShowHideInfo = null;
			showHideInfoChanged = false;
			if (showHideToggle == null || oldShowHideInfo == null || !oldShowHideInfo.ValidToggleSender(showHideToggle))
			{
				return false;
			}
			newShowHideInfo = new EventInformation(oldShowHideInfo);
			showHideInfoChanged = true;
			if (newShowHideInfo.ToggleStateInfo == null)
			{
				newShowHideInfo.ToggleStateInfo = new Hashtable();
			}
			Hashtable toggleStateInfo = newShowHideInfo.ToggleStateInfo;
			if (toggleStateInfo.ContainsKey(showHideToggle))
			{
				toggleStateInfo.Remove(showHideToggle);
			}
			else
			{
				toggleStateInfo.Add(showHideToggle, null);
			}
			return true;
		}

		// Token: 0x060054A4 RID: 21668 RVA: 0x00162F84 File Offset: 0x00161184
		private bool ProcessYukonToggleEvent(string showHideToggle, ReportProcessing.GetReportChunk getReportChunk, EventInformation oldShowHideInfo, out EventInformation newShowHideInfo, out bool showHideInfoChanged)
		{
			newShowHideInfo = null;
			showHideInfoChanged = false;
			ChunkManager.EventsChunkManager eventsChunkManager = null;
			bool flag;
			try
			{
				eventsChunkManager = new ChunkManager.EventsChunkManager(getReportChunk);
				flag = new ReportProcessing.ShowHideProcessing().Process(showHideToggle, oldShowHideInfo, eventsChunkManager, out showHideInfoChanged, out newShowHideInfo);
			}
			finally
			{
				if (eventsChunkManager != null)
				{
					eventsChunkManager.Close();
				}
			}
			return flag;
		}

		// Token: 0x060054A5 RID: 21669 RVA: 0x00162FD4 File Offset: 0x001611D4
		public int ProcessFindStringEvent(int startPage, int endPage, string findValue, EventInformation eventInfo, Microsoft.ReportingServices.ReportProcessing.ProcessingContext processingContext, out OnDemandProcessingResult result)
		{
			result = null;
			if (findValue == null || processingContext == null || startPage <= 0 || endPage <= 0)
			{
				return 0;
			}
			if (ReportProcessing.ContainsFlag(processingContext.ReportProcessingFlags, ReportProcessingFlags.OnDemandEngine))
			{
				return this.ProcessOdpFindStringEvent(startPage, endPage, findValue, eventInfo, processingContext, out result);
			}
			return this.ProcessYukonFindStringEvent(startPage, endPage, findValue, processingContext, eventInfo);
		}

		// Token: 0x060054A6 RID: 21670 RVA: 0x00163024 File Offset: 0x00161224
		private int ProcessOdpFindStringEvent(int startPage, int endPage, string findValue, EventInformation eventInfo, Microsoft.ReportingServices.ReportProcessing.ProcessingContext processingContext, out OnDemandProcessingResult result)
		{
			ExecutionLogContext executionLogContext = new ExecutionLogContext(processingContext.JobContext);
			ProcessingErrorContext processingErrorContext = null;
			OnDemandProcessingContext onDemandProcessingContext = null;
			Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext renderingContext = null;
			ReportSnapshot reportSnapshot = null;
			bool flag = false;
			CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
			int num;
			try
			{
				Microsoft.ReportingServices.OnDemandReportRendering.Report report = this.GenerateEventROM(processingContext, null, eventInfo, executionLogContext, out processingErrorContext, out onDemandProcessingContext, out renderingContext, out reportSnapshot);
				num = InteractivityPaginationModuleFactory.CreateInteractivityPaginationModule().ProcessFindStringEvent(report, -1, startPage, endPage, findValue);
			}
			catch (Exception ex)
			{
				flag = true;
				Exception ex2;
				if (this.NeedWrapperException(ex, processingErrorContext, out ex2))
				{
					throw ex2;
				}
				throw;
			}
			finally
			{
				result = this.CleanupEventROM(processingContext, executionLogContext, processingErrorContext, onDemandProcessingContext, renderingContext, reportSnapshot, flag);
				if (currentCulture != null)
				{
					Thread.CurrentThread.CurrentCulture = currentCulture;
				}
			}
			return num;
		}

		// Token: 0x060054A7 RID: 21671 RVA: 0x001630DC File Offset: 0x001612DC
		private int ProcessYukonFindStringEvent(int startPage, int endPage, string findValue, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, EventInformation eventInfo)
		{
			Microsoft.ReportingServices.OnDemandReportRendering.Report report = null;
			int num;
			try
			{
				ReportProcessing.GenerateEventShimROM(pc.ChunkFactory, eventInfo, pc, out report);
				num = InteractivityPaginationModuleFactory.CreateInteractivityPaginationModule().ProcessFindStringEvent(report, -1, startPage, endPage, findValue);
			}
			finally
			{
				if (report != null)
				{
					report.RenderingContext.CloseRenderingChunkManager();
				}
			}
			return num;
		}

		// Token: 0x060054A8 RID: 21672 RVA: 0x00163130 File Offset: 0x00161330
		public int ProcessBookmarkNavigationEvent(string bookmarkId, EventInformation eventInfo, Microsoft.ReportingServices.ReportProcessing.ProcessingContext processingContext, out string uniqueName, out OnDemandProcessingResult result)
		{
			uniqueName = null;
			result = null;
			if (processingContext == null || bookmarkId == null)
			{
				return 0;
			}
			if (ReportProcessing.ContainsFlag(processingContext.ReportProcessingFlags, ReportProcessingFlags.OnDemandEngine))
			{
				return this.ProcessOdpBookmarkNavigationEvent(bookmarkId, eventInfo, processingContext, out uniqueName, out result);
			}
			result = null;
			return this.ProcessYukonBookmarkNavigationEvent(bookmarkId, processingContext, out uniqueName);
		}

		// Token: 0x060054A9 RID: 21673 RVA: 0x0016316C File Offset: 0x0016136C
		private int ProcessOdpBookmarkNavigationEvent(string bookmarkId, EventInformation eventInfo, Microsoft.ReportingServices.ReportProcessing.ProcessingContext processingContext, out string uniqueName, out OnDemandProcessingResult result)
		{
			uniqueName = null;
			result = null;
			ExecutionLogContext executionLogContext = new ExecutionLogContext(processingContext.JobContext);
			ProcessingErrorContext processingErrorContext = null;
			OnDemandProcessingContext onDemandProcessingContext = null;
			Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext renderingContext = null;
			ReportSnapshot reportSnapshot = null;
			bool flag = false;
			CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
			int num;
			try
			{
				Microsoft.ReportingServices.OnDemandReportRendering.Report report = this.GenerateEventROM(processingContext, null, eventInfo, executionLogContext, out processingErrorContext, out onDemandProcessingContext, out renderingContext, out reportSnapshot);
				num = InteractivityPaginationModuleFactory.CreateInteractivityPaginationModule().ProcessBookmarkNavigationEvent(report, -1, bookmarkId, out uniqueName);
			}
			catch (Exception ex)
			{
				flag = true;
				Exception ex2;
				if (this.NeedWrapperException(ex, processingErrorContext, out ex2))
				{
					throw ex2;
				}
				throw;
			}
			finally
			{
				result = this.CleanupEventROM(processingContext, executionLogContext, processingErrorContext, onDemandProcessingContext, renderingContext, reportSnapshot, flag);
				if (currentCulture != null)
				{
					Thread.CurrentThread.CurrentCulture = currentCulture;
				}
			}
			return num;
		}

		// Token: 0x060054AA RID: 21674 RVA: 0x00163228 File Offset: 0x00161428
		private int ProcessYukonBookmarkNavigationEvent(string bookmarkId, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, out string uniqueName)
		{
			uniqueName = null;
			Microsoft.ReportingServices.OnDemandReportRendering.Report report = null;
			int num;
			try
			{
				ReportProcessing.GenerateEventShimROM(pc.ChunkFactory, null, pc, out report);
				num = InteractivityPaginationModuleFactory.CreateInteractivityPaginationModule().ProcessBookmarkNavigationEvent(report, -1, bookmarkId, out uniqueName);
			}
			finally
			{
				if (report != null)
				{
					report.RenderingContext.CloseRenderingChunkManager();
				}
			}
			return num;
		}

		// Token: 0x060054AB RID: 21675 RVA: 0x0016327C File Offset: 0x0016147C
		public int ProcessDocumentMapNavigationEvent(string documentMapId, EventInformation eventInfo, Microsoft.ReportingServices.ReportProcessing.ProcessingContext processingContext, out OnDemandProcessingResult result)
		{
			result = null;
			if (processingContext == null || documentMapId == null)
			{
				return 0;
			}
			if (ReportProcessing.ContainsFlag(processingContext.ReportProcessingFlags, ReportProcessingFlags.OnDemandEngine))
			{
				return this.ProcessOdpDocumentMapNavigationEvent(documentMapId, eventInfo, processingContext, out result);
			}
			result = null;
			return this.ProcessYukonDocumentMapNavigationEvent(documentMapId, processingContext);
		}

		// Token: 0x060054AC RID: 21676 RVA: 0x001632B0 File Offset: 0x001614B0
		private int ProcessOdpDocumentMapNavigationEvent(string documentMapId, EventInformation eventInfo, Microsoft.ReportingServices.ReportProcessing.ProcessingContext processingContext, out OnDemandProcessingResult result)
		{
			result = null;
			OnDemandMetadata onDemandMetadata = ChunkManager.OnDemandProcessingManager.DeserializeOnDemandMetadata(processingContext.ChunkFactory, null);
			if (!onDemandMetadata.ReportSnapshot.HasDocumentMap)
			{
				return 0;
			}
			ExecutionLogContext executionLogContext = new ExecutionLogContext(processingContext.JobContext);
			ProcessingErrorContext processingErrorContext = null;
			OnDemandProcessingContext onDemandProcessingContext = null;
			Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext renderingContext = null;
			ReportSnapshot reportSnapshot = null;
			bool flag = false;
			CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
			int num;
			try
			{
				Microsoft.ReportingServices.OnDemandReportRendering.Report report = this.GenerateEventROM(processingContext, onDemandMetadata, eventInfo, executionLogContext, out processingErrorContext, out onDemandProcessingContext, out renderingContext, out reportSnapshot);
				num = InteractivityPaginationModuleFactory.CreateInteractivityPaginationModule().ProcessDocumentMapNavigationEvent(report, documentMapId);
			}
			catch (Exception ex)
			{
				flag = true;
				Exception ex2;
				if (this.NeedWrapperException(ex, processingErrorContext, out ex2))
				{
					throw ex2;
				}
				throw;
			}
			finally
			{
				result = this.CleanupEventROM(processingContext, executionLogContext, processingErrorContext, onDemandProcessingContext, renderingContext, reportSnapshot, flag);
				if (currentCulture != null)
				{
					Thread.CurrentThread.CurrentCulture = currentCulture;
				}
			}
			return num;
		}

		// Token: 0x060054AD RID: 21677 RVA: 0x00163384 File Offset: 0x00161584
		private int ProcessYukonDocumentMapNavigationEvent(string documentMapId, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc)
		{
			Microsoft.ReportingServices.OnDemandReportRendering.Report report = null;
			int num;
			try
			{
				ReportProcessing.GenerateEventShimROM(pc.ChunkFactory, null, pc, out report);
				num = InteractivityPaginationModuleFactory.CreateInteractivityPaginationModule().ProcessDocumentMapNavigationEvent(report, documentMapId);
			}
			finally
			{
				if (report != null)
				{
					report.RenderingContext.CloseRenderingChunkManager();
				}
			}
			return num;
		}

		// Token: 0x060054AE RID: 21678 RVA: 0x001633D4 File Offset: 0x001615D4
		public IDocumentMap GetDocumentMap(EventInformation eventInfo, Microsoft.ReportingServices.ReportProcessing.ProcessingContext processingContext, out OnDemandProcessingResult result)
		{
			result = null;
			if (ReportProcessing.ContainsFlag(processingContext.ReportProcessingFlags, ReportProcessingFlags.OnDemandEngine))
			{
				return this.GetOdpDocumentMap(eventInfo, processingContext, out result);
			}
			ChunkFactoryAdapter chunkFactoryAdapter = new ChunkFactoryAdapter(processingContext.ChunkFactory);
			return new ShimDocumentMap(this.GetYukonDocumentMap(new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk)));
		}

		// Token: 0x060054AF RID: 21679 RVA: 0x00163420 File Offset: 0x00161620
		private IDocumentMap GetOdpDocumentMap(EventInformation eventInfo, Microsoft.ReportingServices.ReportProcessing.ProcessingContext processingContext, out OnDemandProcessingResult result)
		{
			result = null;
			OnDemandMetadata onDemandMetadata = ChunkManager.OnDemandProcessingManager.DeserializeOnDemandMetadata(processingContext.ChunkFactory, null);
			if (!onDemandMetadata.ReportSnapshot.HasDocumentMap)
			{
				return null;
			}
			Stream stream = ChunkManager.OnDemandProcessingManager.OpenExistingDocumentMapStream(onDemandMetadata, processingContext.ReportContext, processingContext.ChunkFactory);
			if (stream == null)
			{
				ExecutionLogContext executionLogContext = new ExecutionLogContext(processingContext.JobContext);
				ProcessingErrorContext processingErrorContext = null;
				OnDemandProcessingContext onDemandProcessingContext = null;
				Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext renderingContext = null;
				ReportSnapshot reportSnapshot = null;
				bool flag = false;
				CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
				try
				{
					Microsoft.ReportingServices.OnDemandReportRendering.Report report = this.GenerateEventROM(processingContext, onDemandMetadata, eventInfo, executionLogContext, out processingErrorContext, out onDemandProcessingContext, out renderingContext, out reportSnapshot);
					NullRenderer nullRenderer = new NullRenderer();
					nullRenderer.Process(report, onDemandProcessingContext, true, false);
					stream = nullRenderer.DocumentMapStream;
					if (stream == null)
					{
						onDemandMetadata.ReportSnapshot.HasDocumentMap = false;
					}
					else
					{
						stream.Seek(0L, SeekOrigin.Begin);
					}
				}
				catch (Exception ex)
				{
					flag = true;
					Exception ex2;
					if (this.NeedWrapperException(ex, processingErrorContext, out ex2))
					{
						throw ex2;
					}
					throw;
				}
				finally
				{
					result = this.CleanupEventROM(processingContext, executionLogContext, processingErrorContext, onDemandProcessingContext, renderingContext, reportSnapshot, flag);
					if (currentCulture != null)
					{
						Thread.CurrentThread.CurrentCulture = currentCulture;
					}
				}
			}
			if (stream != null)
			{
				return new InternalDocumentMap(new DocumentMapReader(stream));
			}
			return null;
		}

		// Token: 0x060054B0 RID: 21680 RVA: 0x00163540 File Offset: 0x00161740
		private Microsoft.ReportingServices.ReportProcessing.DocumentMapNode GetYukonDocumentMap(ReportProcessing.GetReportChunk getReportChunk)
		{
			if (getReportChunk == null)
			{
				return null;
			}
			Microsoft.ReportingServices.ReportProcessing.DocumentMapNode documentMapNode = null;
			ChunkManager.EventsChunkManager eventsChunkManager = null;
			try
			{
				eventsChunkManager = new ChunkManager.EventsChunkManager(getReportChunk);
				documentMapNode = eventsChunkManager.GetDocumentMapNode();
			}
			finally
			{
				if (eventsChunkManager != null)
				{
					eventsChunkManager.Close();
				}
			}
			return documentMapNode;
		}

		// Token: 0x060054B1 RID: 21681 RVA: 0x00163584 File Offset: 0x00161784
		public string ProcessDrillthroughEvent(string drillthroughId, EventInformation eventInfo, Microsoft.ReportingServices.ReportProcessing.ProcessingContext processingContext, out NameValueCollection parameters, out OnDemandProcessingResult result)
		{
			parameters = null;
			result = null;
			if (processingContext == null || drillthroughId == null)
			{
				return null;
			}
			DrillthroughInfo drillthroughInfo = null;
			if (eventInfo != null)
			{
				drillthroughInfo = eventInfo.GetDrillthroughInfo(drillthroughId);
			}
			string reportName;
			if (drillthroughInfo == null)
			{
				ExecutionLogContext executionLogContext = new ExecutionLogContext(processingContext.JobContext);
				ProcessingErrorContext processingErrorContext = null;
				OnDemandProcessingContext onDemandProcessingContext = null;
				Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext renderingContext = null;
				ReportSnapshot reportSnapshot = null;
				bool flag = false;
				CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
				try
				{
					Microsoft.ReportingServices.OnDemandReportRendering.Report report = this.GenerateEventROM(processingContext, null, eventInfo, executionLogContext, out processingErrorContext, out onDemandProcessingContext, out renderingContext, out reportSnapshot);
					return InteractivityPaginationModuleFactory.CreateInteractivityPaginationModule().ProcessDrillthroughEvent(report, -1, drillthroughId, out parameters);
				}
				catch (Exception ex)
				{
					flag = true;
					Exception ex2;
					if (this.NeedWrapperException(ex, processingErrorContext, out ex2))
					{
						throw ex2;
					}
					throw;
				}
				finally
				{
					result = this.CleanupEventROM(processingContext, executionLogContext, processingErrorContext, onDemandProcessingContext, renderingContext, reportSnapshot, flag);
					if (currentCulture != null)
					{
						Thread.CurrentThread.CurrentCulture = currentCulture;
					}
				}
				return reportName;
			}
			reportName = drillthroughInfo.ReportName;
			DrillthroughParameters reportParameters = drillthroughInfo.ReportParameters;
			parameters = ReportProcessing.ConvertDrillthroughParametersToNameValueCollection(reportParameters);
			return reportName;
		}

		// Token: 0x060054B2 RID: 21682 RVA: 0x00163680 File Offset: 0x00161880
		private static NameValueCollection ConvertDrillthroughParametersToNameValueCollection(DrillthroughParameters reportParameters)
		{
			NameValueCollection nameValueCollection = null;
			CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
			try
			{
				if (reportParameters != null)
				{
					Thread.CurrentThread.CurrentCulture = Localization.ClientPrimaryCulture;
					nameValueCollection = new NameValueCollection();
					for (int i = 0; i < reportParameters.Count; i++)
					{
						string key = reportParameters.GetKey(i);
						object value = reportParameters.GetValue(i);
						object[] array = value as object[];
						if (array != null)
						{
							for (int j = 0; j < array.Length; j++)
							{
								nameValueCollection.Add(key, ReportProcessing.ConvertToStringUsingThreadCulture(array[j]));
							}
						}
						else
						{
							nameValueCollection.Add(key, ReportProcessing.ConvertToStringUsingThreadCulture(value));
						}
					}
				}
			}
			finally
			{
				Thread.CurrentThread.CurrentCulture = currentCulture;
			}
			return nameValueCollection;
		}

		// Token: 0x060054B3 RID: 21683 RVA: 0x0016373C File Offset: 0x0016193C
		private static string ConvertToStringUsingThreadCulture(object value)
		{
			if (value == null)
			{
				return null;
			}
			return value.ToString();
		}

		// Token: 0x060054B4 RID: 21684 RVA: 0x0016374C File Offset: 0x0016194C
		public OnDemandProcessingResult ProcessUserSortEvent(string reportItem, SortOptions sortOption, bool clearOldSorts, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory originalSnapshot, out string newReportItem, out int page)
		{
			if (ReportProcessing.ContainsFlag(pc.ReportProcessingFlags, ReportProcessingFlags.OnDemandEngine))
			{
				return this.ProcessOdpUserSortEvent(reportItem, sortOption, clearOldSorts, pc, rc, originalSnapshot, out newReportItem, out page);
			}
			return this.ProcessYukonUserSortEvent(reportItem, sortOption, clearOldSorts, pc, rc, originalSnapshot, out newReportItem, out page);
		}

		// Token: 0x060054B5 RID: 21685 RVA: 0x00163790 File Offset: 0x00161990
		private OnDemandProcessingResult ProcessOdpUserSortEvent(string reportItem, SortOptions sortOption, bool clearOldSorts, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory originalSnapshotChunks, out string newReportItem, out int page)
		{
			page = 1;
			newReportItem = null;
			if (originalSnapshotChunks == null || reportItem == null)
			{
				return null;
			}
			EventInformation eventInformation = null;
			EventInformation eventInfo = rc.EventInfo;
			if (eventInfo != null)
			{
				eventInformation = new EventInformation(eventInfo);
			}
			bool flag = this.ProcessOdpUserSortInformation(reportItem, sortOption, clearOldSorts, ref eventInformation);
			OnDemandProcessingResult onDemandProcessingResult = null;
			ExecutionLogContext executionLogContext = new ExecutionLogContext(pc.JobContext);
			OnDemandProcessingContext onDemandProcessingContext = null;
			Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext renderingContext = null;
			ReportSnapshot reportSnapshot = null;
			bool flag2 = false;
			string itemName = pc.ReportContext.ItemName;
			ProcessingErrorContext processingErrorContext = new ProcessingErrorContext();
			int previousTotalPages = rc.PreviousTotalPages;
			PaginationMode clientPaginationMode = rc.ClientPaginationMode;
			executionLogContext.StartProcessingTimer();
			CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
			try
			{
				OnDemandMetadata onDemandMetadata = null;
				newReportItem = reportItem;
				Microsoft.ReportingServices.ReportIntermediateFormat.Report report;
				GlobalIDOwnerCollection globalIDOwnerCollection = ChunkManager.OnDemandProcessingManager.DeserializeOdpReportSnapshot(pc, originalSnapshotChunks, processingErrorContext, true, !flag, this.m_configuration, ref onDemandMetadata, out report);
				SortFilterEventInfoMap sortFilterEventInfoMap = ChunkManager.OnDemandProcessingManager.DeserializeSortFilterEventInfo(originalSnapshotChunks, globalIDOwnerCollection);
				if (flag)
				{
					reportSnapshot = new ProcessReportOdpUserSort(this.Configuration, pc, report, processingErrorContext, rc.StoreServerParametersCallback, globalIDOwnerCollection, executionLogContext, onDemandMetadata, sortFilterEventInfoMap, eventInformation, newReportItem).Execute(out onDemandProcessingContext);
					eventInformation = onDemandProcessingContext.GetUserSortFilterInformation(out newReportItem);
					renderingContext = new Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext(rc.Format, reportSnapshot, eventInformation, onDemandProcessingContext);
				}
				else
				{
					reportSnapshot = new ProcessReportOdpSnapshot(this.Configuration, pc, report, processingErrorContext, rc.StoreServerParametersCallback, globalIDOwnerCollection, executionLogContext, onDemandMetadata).Execute(out onDemandProcessingContext);
					eventInformation = null;
					renderingContext = new Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext(rc.Format, reportSnapshot, rc.EventInfo, onDemandProcessingContext);
				}
				if (eventInformation != null)
				{
					eventInformation.Changed = true;
				}
				Microsoft.ReportingServices.OnDemandReportRendering.Report report2 = new Microsoft.ReportingServices.OnDemandReportRendering.Report(reportSnapshot.Report, reportSnapshot.ReportInstance, renderingContext, itemName, rc.ReportDescription);
				IInteractivityPaginationModule interactivityPaginationModule = InteractivityPaginationModuleFactory.CreateInteractivityPaginationModule();
				page = interactivityPaginationModule.ProcessUserSortEvent(report2, newReportItem, ref previousTotalPages, ref clientPaginationMode);
				if (page <= 0)
				{
					if (flag && eventInformation != null && eventInformation.Changed)
					{
						if (Global.Tracer.TraceVerbose)
						{
							Global.Tracer.Trace(TraceLevel.Verbose, "SortId not found in reprocessed report. Original=" + reportItem + " Reprocessed=" + newReportItem);
						}
					}
					else if (Global.Tracer.TraceVerbose)
					{
						Global.Tracer.Trace(TraceLevel.Verbose, "SortId '" + reportItem + "' not found.");
					}
				}
			}
			catch (Exception ex)
			{
				flag2 = true;
				Exception ex2;
				if (this.NeedWrapperException(ex, processingErrorContext, out ex2))
				{
					throw ex2;
				}
				throw;
			}
			finally
			{
				onDemandProcessingResult = this.CleanupEventROM(pc, executionLogContext, processingErrorContext, onDemandProcessingContext, renderingContext, reportSnapshot, previousTotalPages, clientPaginationMode, flag2);
				if (currentCulture != null)
				{
					Thread.CurrentThread.CurrentCulture = currentCulture;
				}
			}
			return onDemandProcessingResult;
		}

		// Token: 0x060054B6 RID: 21686 RVA: 0x00163A0C File Offset: 0x00161C0C
		private OnDemandProcessingResult ProcessYukonUserSortEvent(string reportItem, SortOptions sortOption, bool clearOldSorts, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory sourceSnapshotChunks, out string newReportItem, out int page)
		{
			page = 1;
			newReportItem = null;
			EventInformation eventInformation = null;
			if (sourceSnapshotChunks == null || reportItem == null)
			{
				return null;
			}
			ChunkFactoryAdapter chunkFactoryAdapter = new ChunkFactoryAdapter(sourceSnapshotChunks);
			ChunkFactoryAdapter chunkFactoryAdapter2 = new ChunkFactoryAdapter(pc.ChunkFactory);
			EventInformation eventInfo = rc.EventInfo;
			if (eventInfo != null)
			{
				eventInformation = new EventInformation(eventInfo);
			}
			int num;
			if (!this.ProcessUserSortInformation(reportItem, sortOption, clearOldSorts, ref eventInformation, out num))
			{
				return null;
			}
			ChunkManager.EventsChunkManager eventsChunkManager = null;
			ExecutionLogContext executionLogContext = new ExecutionLogContext(pc.JobContext);
			executionLogContext.StartProcessingTimer();
			string itemName = pc.ReportContext.ItemName;
			ProcessingErrorContext processingErrorContext = new ProcessingErrorContext();
			Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext renderingContext = null;
			OnDemandProcessingResult onDemandProcessingResult;
			try
			{
				DateTime dateTime;
				Hashtable hashtable;
				IntermediateFormatVersion intermediateFormatVersion;
				Microsoft.ReportingServices.ReportProcessing.Report report = ReportProcessing.DeserializeReportFromSnapshot(new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk), out dateTime, out hashtable, out intermediateFormatVersion);
				ReportProcessing.ProcessingContext processingContext = pc.CreateInternalProcessingContext(null, report, processingErrorContext, dateTime, pc.AllowUserProfileState, false, true, false, new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk), null);
				processingContext.CreateReportChunkFactory = pc.ChunkFactory;
				processingContext.UserSortFilterProcessing = true;
				eventsChunkManager = new ChunkManager.EventsChunkManager(new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk), hashtable, intermediateFormatVersion);
				processingContext.OldSortFilterEventInfo = eventsChunkManager.GetSortFilterEventInfo();
				processingContext.UserSortFilterInfo = eventInformation;
				if (pc.Parameters != null)
				{
					pc.Parameters.StoreLabels();
				}
				UserProfileState userProfileState;
				ReportSnapshot reportSnapshot = this.ProcessReport(report, pc, processingContext, out userProfileState);
				eventInformation = processingContext.GetUserSortFilterInformation(ref num, ref page);
				newReportItem = num.ToString(CultureInfo.InvariantCulture);
				ChunkManager.RenderingChunkManager renderingChunkManager = new ChunkManager.RenderingChunkManager(new ReportProcessing.GetReportChunk(chunkFactoryAdapter2.GetReportChunk), null, hashtable, null, report.IntermediateFormatVersion);
				Microsoft.ReportingServices.ReportRendering.RenderingContext renderingContext2 = new Microsoft.ReportingServices.ReportRendering.RenderingContext(reportSnapshot, null, dateTime, report.EmbeddedImages, report.ImageStreamNames, null, pc.ReportContext, null, null, new ReportProcessing.GetReportChunk(chunkFactoryAdapter2.GetReportChunk), renderingChunkManager, pc.GetResourceCallback, null, rc.StoreServerParametersCallback, false, pc.AllowUserProfileState, pc.ReportRuntimeSetup, pc.JobContext, pc.DataProtection);
				renderingContext = new Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext(null, reportSnapshot, pc.ChunkFactory, eventInfo);
				Microsoft.ReportingServices.OnDemandReportRendering.Report report2 = new Microsoft.ReportingServices.OnDemandReportRendering.Report(reportSnapshot.Report, reportSnapshot.ReportInstance, renderingContext2, renderingContext, itemName, null);
				int previousTotalPages = rc.PreviousTotalPages;
				PaginationMode clientPaginationMode = rc.ClientPaginationMode;
				IInteractivityPaginationModule interactivityPaginationModule = InteractivityPaginationModuleFactory.CreateInteractivityPaginationModule();
				page = interactivityPaginationModule.ProcessUserSortEvent(report2, newReportItem, ref previousTotalPages, ref clientPaginationMode);
				onDemandProcessingResult = new YukonProcessingResult(reportSnapshot, processingContext.ChunkManager, pc.ChunkFactory, pc.Parameters, report.AutoRefresh, previousTotalPages, processingErrorContext.Messages, false, renderingContext2.RenderingInfoManager, true, eventInformation, clientPaginationMode, pc.ChunkFactory.ReportProcessingFlags, userProfileState | renderingContext2.UsedUserProfileState, executionLogContext);
			}
			catch (RSException)
			{
				throw;
			}
			catch (Exception ex)
			{
				throw new ReportProcessingException(ex, processingErrorContext.Messages);
			}
			finally
			{
				if (eventsChunkManager != null)
				{
					eventsChunkManager.Close();
				}
				if (renderingContext != null)
				{
					renderingContext.CloseRenderingChunkManager();
				}
				ReportProcessing.UpdateHostingEnvironment(processingErrorContext, pc.ReportContext, executionLogContext, ProcessingEngine.YukonEngine, pc.JobContext);
			}
			return onDemandProcessingResult;
		}

		// Token: 0x060054B7 RID: 21687 RVA: 0x00163D14 File Offset: 0x00161F14
		private Microsoft.ReportingServices.OnDemandReportRendering.Report GenerateEventROM(Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, OnDemandMetadata odpMetadata, EventInformation eventInfo, ExecutionLogContext executionLogContext, out ProcessingErrorContext errorContext, out OnDemandProcessingContext odpContext, out Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext odpRenderingContext, out ReportSnapshot odpReportSnapshot)
		{
			Global.Tracer.Assert(executionLogContext != null, "ExecutionLogContext may not be null");
			odpRenderingContext = null;
			odpContext = null;
			errorContext = new ProcessingErrorContext();
			executionLogContext.StartProcessingTimer();
			Microsoft.ReportingServices.ReportIntermediateFormat.Report report;
			GlobalIDOwnerCollection globalIDOwnerCollection = ChunkManager.OnDemandProcessingManager.DeserializeOdpReportSnapshot(pc, null, errorContext, true, true, this.m_configuration, ref odpMetadata, out report);
			odpReportSnapshot = odpMetadata.ReportSnapshot;
			ProcessReportOdpSnapshot processReportOdpSnapshot = new ProcessReportOdpSnapshot(this.Configuration, pc, report, errorContext, null, globalIDOwnerCollection, executionLogContext, odpMetadata);
			odpReportSnapshot = processReportOdpSnapshot.Execute(out odpContext);
			odpRenderingContext = new Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext(null, odpReportSnapshot, eventInfo, odpContext);
			return new Microsoft.ReportingServices.OnDemandReportRendering.Report(odpReportSnapshot.Report, odpReportSnapshot.ReportInstance, odpRenderingContext, pc.ReportContext.ItemName, null);
		}

		// Token: 0x060054B8 RID: 21688 RVA: 0x00163DC1 File Offset: 0x00161FC1
		private bool NeedWrapperException(Exception exception, ProcessingErrorContext errorContext, out Exception wrappedException)
		{
			if (exception is RSException)
			{
				wrappedException = null;
				return false;
			}
			wrappedException = new ReportProcessingException(exception, errorContext.Messages);
			return true;
		}

		// Token: 0x060054B9 RID: 21689 RVA: 0x00163DE0 File Offset: 0x00161FE0
		private OnDemandProcessingResult CleanupEventROM(Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, ExecutionLogContext executionLogContext, ProcessingErrorContext errorContext, OnDemandProcessingContext odpContext, Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext odpRenderingContext, ReportSnapshot odpReportSnapshot, bool exceptionGenerated)
		{
			return this.CleanupEventROM(pc, executionLogContext, errorContext, odpContext, odpRenderingContext, odpReportSnapshot, 0, PaginationMode.Estimate, exceptionGenerated);
		}

		// Token: 0x060054BA RID: 21690 RVA: 0x00163E00 File Offset: 0x00162000
		private OnDemandProcessingResult CleanupEventROM(Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, ExecutionLogContext executionLogContext, ProcessingErrorContext errorContext, OnDemandProcessingContext odpContext, Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext odpRenderingContext, ReportSnapshot odpReportSnapshot, int pageCount, PaginationMode updatedPaginationMode, bool exceptionGenerated)
		{
			OnDemandProcessingResult onDemandProcessingResult2;
			try
			{
				bool flag = false;
				EventInformation eventInformation = null;
				if (odpRenderingContext != null)
				{
					ReportProcessing.UpdateEventInfo(odpReportSnapshot, odpContext, odpRenderingContext, ref flag);
					eventInformation = odpRenderingContext.EventInfo;
					odpRenderingContext.CloseRenderingChunkManager();
				}
				if (errorContext != null && odpReportSnapshot != null)
				{
					errorContext.Combine(odpReportSnapshot.Warnings);
				}
				ReportProcessing.CleanupOnDemandProcessing(odpContext, false);
				OnDemandProcessingResult onDemandProcessingResult = null;
				if (exceptionGenerated)
				{
					ReportProcessing.RequestErrorGroupTreeCleanup(odpContext);
				}
				else
				{
					ChunkManager.OnDemandProcessingManager.PreparePartitionedTreesForAsyncSerialization(odpContext);
					onDemandProcessingResult = new FullOnDemandProcessingResult(odpReportSnapshot, odpContext.OdpMetadata.OdpChunkManager, odpContext.OdpMetadata.SnapshotHasChanged, pc.ChunkFactory, pc.Parameters, odpReportSnapshot.Report.EvaluateAutoRefresh(null, odpContext), pageCount, errorContext.Messages, flag, eventInformation, updatedPaginationMode, pc.ReportProcessingFlags, odpContext.HasUserProfileState, executionLogContext);
				}
				onDemandProcessingResult2 = onDemandProcessingResult;
			}
			finally
			{
				if (odpContext != null)
				{
					odpContext.FreeAllResources();
				}
				ReportProcessing.UpdateHostingEnvironment(errorContext, pc.ReportContext, executionLogContext, ProcessingEngine.OnDemandEngine, pc.JobContext);
			}
			return onDemandProcessingResult2;
		}

		// Token: 0x060054BB RID: 21691 RVA: 0x00163EF0 File Offset: 0x001620F0
		private static void GenerateEventShimROM(IChunkFactory chunkFactory, EventInformation eventInfo, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, out Microsoft.ReportingServices.OnDemandReportRendering.Report reportToRender)
		{
			bool flag = false;
			reportToRender = null;
			Stream stream = null;
			ReportSnapshot reportSnapshot = null;
			Hashtable hashtable = null;
			Hashtable hashtable2 = null;
			Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader.State state = null;
			try
			{
				string text;
				stream = chunkFactory.GetChunk("Main", ReportProcessing.ReportChunkTypes.Main, ChunkMode.Open, out text);
				if (stream != null)
				{
					flag = true;
				}
				if (flag)
				{
					Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader intermediateFormatReader = new Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader(stream);
					reportSnapshot = intermediateFormatReader.ReadReportSnapshot();
					hashtable = intermediateFormatReader.InstanceObjects;
					state = intermediateFormatReader.ReaderState;
					hashtable2 = intermediateFormatReader.DefinitionObjects;
				}
			}
			finally
			{
				if (stream != null)
				{
					stream.Close();
				}
			}
			Global.Tracer.Assert(reportSnapshot != null, "(null != reportSnapshot)");
			Global.Tracer.Assert(reportSnapshot.Report != null, "(null != reportSnapshot.Report)");
			Global.Tracer.Assert(reportSnapshot.ReportInstance != null, "(null != reportSnapshot.ReportInstance)");
			ChunkFactoryAdapter chunkFactoryAdapter = new ChunkFactoryAdapter(chunkFactory);
			ChunkManager.RenderingChunkManager renderingChunkManager = new ChunkManager.RenderingChunkManager(new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk), hashtable, hashtable2, state, reportSnapshot.Report.IntermediateFormatVersion);
			Microsoft.ReportingServices.ReportRendering.RenderingContext renderingContext = new Microsoft.ReportingServices.ReportRendering.RenderingContext(reportSnapshot, null, reportSnapshot.ExecutionTime, null, null, eventInfo, null, null, null, new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk), renderingChunkManager, null, null, null, false, UserProfileState.None, pc.ReportRuntimeSetup, pc.JobContext, pc.DataProtection);
			Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext renderingContext2 = new Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext(null, reportSnapshot, chunkFactory, eventInfo);
			reportToRender = new Microsoft.ReportingServices.OnDemandReportRendering.Report(reportSnapshot.Report, reportSnapshot.ReportInstance, renderingContext, renderingContext2, null, null);
		}

		// Token: 0x060054BC RID: 21692 RVA: 0x00164038 File Offset: 0x00162238
		internal void ProcessShowHideToggle(string showHideToggle, ReportSnapshot reportSnapshot, EventInformation oldOverrideInformation, ChunkManager.RenderingChunkManager chunkManager, out bool showHideInformationChanged, out EventInformation newOverrideInformation)
		{
			new ReportProcessing.ShowHideProcessing().Process(showHideToggle, reportSnapshot, oldOverrideInformation, chunkManager, out showHideInformationChanged, out newOverrideInformation);
		}

		// Token: 0x060054BD RID: 21693 RVA: 0x00164050 File Offset: 0x00162250
		private bool ProcessOdpUserSortInformation(string reportItemUniqueName, SortOptions sortOption, bool clearOldSorts, ref EventInformation userSortInformation)
		{
			bool flag = false;
			bool flag2 = false;
			if (sortOption == SortOptions.None)
			{
				if (userSortInformation != null && userSortInformation.OdpSortInfo != null && this.ProcessOdpUserSortInformation(reportItemUniqueName, sortOption, clearOldSorts, ref userSortInformation, out flag2))
				{
					if (userSortInformation.OdpSortInfo.Count == 0)
					{
						if (userSortInformation.ToggleStateInfo == null && userSortInformation.HiddenInfo == null)
						{
							userSortInformation = null;
						}
						else
						{
							userSortInformation.OdpSortInfo = null;
						}
					}
					flag = true;
				}
			}
			else
			{
				if (userSortInformation == null)
				{
					userSortInformation = new EventInformation();
				}
				if (userSortInformation.OdpSortInfo == null)
				{
					userSortInformation.OdpSortInfo = new EventInformation.OdpSortEventInfo();
				}
				flag = this.ProcessOdpUserSortInformation(reportItemUniqueName, sortOption, clearOldSorts, ref userSortInformation, out flag2);
				if (!flag2)
				{
					userSortInformation.OdpSortInfo.Add(reportItemUniqueName, sortOption == SortOptions.Ascending, null);
					flag = true;
				}
			}
			return flag;
		}

		// Token: 0x060054BE RID: 21694 RVA: 0x0016410C File Offset: 0x0016230C
		private bool ProcessOdpUserSortInformation(string reportItemUniqueName, SortOptions sortOption, bool clearOldSorts, ref EventInformation userSortInformation, out bool eventExists)
		{
			eventExists = false;
			bool flag = false;
			if (clearOldSorts)
			{
				flag = userSortInformation.OdpSortInfo.ClearPeerSorts(reportItemUniqueName);
			}
			SortOptions sortState = userSortInformation.OdpSortInfo.GetSortState(reportItemUniqueName);
			if (sortState != SortOptions.None)
			{
				if (sortState == sortOption)
				{
					eventExists = true;
				}
				else
				{
					flag |= userSortInformation.OdpSortInfo.Remove(reportItemUniqueName);
				}
			}
			return flag;
		}

		// Token: 0x060054BF RID: 21695 RVA: 0x00164160 File Offset: 0x00162360
		private bool ProcessUserSortInformation(string reportItem, SortOptions sortOption, bool clearOldSorts, ref EventInformation userSortInformation, out int reportItemUniqueName)
		{
			reportItemUniqueName = -1;
			if (!int.TryParse(reportItem, NumberStyles.None, CultureInfo.InvariantCulture, out reportItemUniqueName))
			{
				throw new ReportProcessingException(ErrorCode.rsInvalidSortItemID);
			}
			if (0 > reportItemUniqueName)
			{
				throw new ReportProcessingException(ErrorCode.rsInvalidSortItemID);
			}
			bool flag = false;
			bool flag2 = false;
			if (sortOption == SortOptions.None)
			{
				if (userSortInformation != null && userSortInformation.SortInfo != null && this.ProcessUserSortInformation(reportItemUniqueName, sortOption, clearOldSorts, ref userSortInformation, out flag2))
				{
					if (userSortInformation.SortInfo.Count == 0)
					{
						if (userSortInformation.ToggleStateInfo == null && userSortInformation.HiddenInfo == null)
						{
							userSortInformation = null;
						}
						else
						{
							userSortInformation.SortInfo = null;
						}
					}
					flag = true;
				}
			}
			else
			{
				if (userSortInformation == null)
				{
					userSortInformation = new EventInformation();
				}
				if (userSortInformation.SortInfo == null)
				{
					userSortInformation.SortInfo = new EventInformation.SortEventInfo();
				}
				flag = this.ProcessUserSortInformation(reportItemUniqueName, sortOption, clearOldSorts, ref userSortInformation, out flag2);
				if (!flag2)
				{
					userSortInformation.SortInfo.Add(reportItemUniqueName, sortOption == SortOptions.Ascending, null);
					flag = true;
				}
			}
			return flag;
		}

		// Token: 0x060054C0 RID: 21696 RVA: 0x00164254 File Offset: 0x00162454
		private bool ProcessUserSortInformation(int reportItemUniqueName, SortOptions sortOption, bool clearOldSorts, ref EventInformation userSortInformation, out bool eventExists)
		{
			eventExists = false;
			bool flag = false;
			if (clearOldSorts)
			{
				flag = userSortInformation.SortInfo.ClearPeerSorts(reportItemUniqueName);
			}
			SortOptions sortState = userSortInformation.SortInfo.GetSortState(reportItemUniqueName);
			if (sortState != SortOptions.None)
			{
				if (sortState == sortOption)
				{
					eventExists = true;
				}
				else
				{
					flag |= userSortInformation.SortInfo.Remove(reportItemUniqueName);
				}
			}
			return flag;
		}

		// Token: 0x060054C1 RID: 21697 RVA: 0x001642A7 File Offset: 0x001624A7
		public ReportProcessing()
		{
		}

		// Token: 0x060054C2 RID: 21698 RVA: 0x001642AF File Offset: 0x001624AF
		public ReportProcessing(IConfiguration configuration)
		{
			this.m_configuration = configuration;
		}

		// Token: 0x060054C3 RID: 21699 RVA: 0x001642BE File Offset: 0x001624BE
		public static bool NeedsUpgradeToLatest(ReportProcessingFlags processingFlags)
		{
			return processingFlags == ReportProcessingFlags.NotSet;
		}

		// Token: 0x060054C4 RID: 21700 RVA: 0x001642C4 File Offset: 0x001624C4
		public static ReportProcessing.ReportChunkTypes GetImageChunkTypeToCopy(ReportProcessingFlags processingFlags)
		{
			if (ReportProcessing.ContainsFlag(processingFlags, ReportProcessingFlags.OnDemandEngine))
			{
				return ReportProcessing.ReportChunkTypes.StaticImage;
			}
			return ReportProcessing.ReportChunkTypes.Image;
		}

		// Token: 0x060054C5 RID: 21701 RVA: 0x001642D4 File Offset: 0x001624D4
		internal static void CheckReportCredentialsAndConnectionUserDependency(Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc)
		{
			if (pc == null)
			{
				return;
			}
			string text = ((pc.ReportContext != null) ? pc.ReportContext.ItemName : null);
			ReportProcessing.CheckReportCredentialsAndConnectionUserDependency(pc.DataSources, pc.AllowUserProfileState, text);
		}

		// Token: 0x060054C6 RID: 21702 RVA: 0x0016430E File Offset: 0x0016250E
		internal static void CheckReportCredentialsAndConnectionUserDependency(RuntimeDataSourceInfoCollection dataSources, UserProfileState allowUserProfileState, string itemName)
		{
			if (dataSources == null)
			{
				return;
			}
			if (dataSources.NeedPrompt)
			{
				throw new ReportProcessingException(ErrorCode.rsCredentialsNotSpecified);
			}
			if ((allowUserProfileState & UserProfileState.InQuery) == UserProfileState.None && dataSources.HasConnectionStringUseridReference())
			{
				throw new ReportProcessingException(ErrorCode.rsHasUserProfileDependencies, null, new object[] { itemName });
			}
		}

		// Token: 0x060054C7 RID: 21703 RVA: 0x00164348 File Offset: 0x00162548
		public static bool UpgradeSnapshot(IChunkFactory getChunkFactory, bool isSnapshot, IChunkFactory createChunkFactory, ICatalogItemContext reportContext, out int pageCount, out bool hasDocumentMap)
		{
			pageCount = 0;
			hasDocumentMap = false;
			if (createChunkFactory == null || getChunkFactory == null)
			{
				return false;
			}
			object obj = new ChunkFactoryAdapter(createChunkFactory);
			ChunkFactoryAdapter chunkFactoryAdapter = new ChunkFactoryAdapter(getChunkFactory);
			ReportProcessing.CreateReportChunk createReportChunk = new ReportProcessing.CreateReportChunk(obj.CreateReportChunk);
			ReportProcessing.GetReportChunk getReportChunk = new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk);
			if (!isSnapshot)
			{
				ReportProcessing.SerializeReport(ReportProcessing.DeserializeReport(getReportChunk), createReportChunk);
				return true;
			}
			Stream stream = null;
			ChunkManager.RenderingChunkManager renderingChunkManager = null;
			ChunkManager.UpgradeManager upgradeManager = null;
			try
			{
				string text;
				stream = getReportChunk("Main", ReportProcessing.ReportChunkTypes.Main, out text);
				Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader intermediateFormatReader = new Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader(stream);
				ReportSnapshot reportSnapshot = intermediateFormatReader.ReadReportSnapshot();
				Hashtable instanceObjects = intermediateFormatReader.InstanceObjects;
				Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader.State readerState = intermediateFormatReader.ReaderState;
				Hashtable definitionObjects = intermediateFormatReader.DefinitionObjects;
				Global.Tracer.Assert(reportSnapshot != null, "(null != reportSnapshot)");
				Global.Tracer.Assert(reportSnapshot.Report != null, "(null != reportSnapshot.Report)");
				Global.Tracer.Assert(reportSnapshot.ReportInstance != null, "(null != reportSnapshot.ReportInstance)");
				renderingChunkManager = new ChunkManager.RenderingChunkManager(getReportChunk, instanceObjects, definitionObjects, readerState, reportSnapshot.Report.IntermediateFormatVersion);
				Upgrader.UpgradeToCurrent(reportSnapshot, renderingChunkManager, createReportChunk);
				Upgrader.UpgradeDatasetIDs(reportSnapshot.Report);
				reportSnapshot.DocumentMap = reportSnapshot.GetDocumentMap(renderingChunkManager);
				hasDocumentMap = reportSnapshot.DocumentMap != null;
				pageCount = reportSnapshot.ReportInstance.NumberOfPages;
				reportSnapshot.QuickFind = reportSnapshot.GetQuickFind(renderingChunkManager);
				reportSnapshot.ShowHideReceiverInfo = reportSnapshot.GetShowHideReceiverInfo(renderingChunkManager);
				reportSnapshot.ShowHideSenderInfo = reportSnapshot.GetShowHideSenderInfo(renderingChunkManager);
				upgradeManager = new ChunkManager.UpgradeManager(createReportChunk);
				Upgrader.CreateBookmarkDrillthroughChunks(reportSnapshot, renderingChunkManager, upgradeManager);
				renderingChunkManager.Close();
				renderingChunkManager = null;
				if (stream != null)
				{
					stream.Close();
					stream = null;
				}
				upgradeManager.FinalFlush();
				upgradeManager.SaveFirstPage();
				upgradeManager.SaveReportSnapshot(reportSnapshot);
			}
			finally
			{
				if (stream != null)
				{
					stream.Close();
				}
				if (renderingChunkManager != null)
				{
					renderingChunkManager.Close();
				}
				if (upgradeManager != null)
				{
					upgradeManager.Close();
				}
			}
			return true;
		}

		// Token: 0x060054C8 RID: 21704 RVA: 0x00164530 File Offset: 0x00162730
		public OnDemandProcessingResult CreateSnapshot(DateTime executionTimeStamp, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, IChunkFactory yukonCompiledDefinition)
		{
			ExecutionLogContext executionLogContext = new ExecutionLogContext(pc.JobContext);
			executionLogContext.StartProcessingTimer();
			ProcessingEngine processingEngine = ProcessingEngine.OnDemandEngine;
			ProcessingErrorContext processingErrorContext = new ProcessingErrorContext();
			Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext renderingContext = null;
			OnDemandProcessingContext onDemandProcessingContext = null;
			CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
			OnDemandProcessingResult onDemandProcessingResult;
			try
			{
				if (!pc.Parameters.ValuesAreValid())
				{
					throw new ReportProcessingException(ErrorCode.rsParameterError);
				}
				string itemName = pc.ReportContext.ItemName;
				ReportProcessing.CheckReportCredentialsAndConnectionUserDependency(pc.DataSources, pc.AllowUserProfileState, itemName);
				if (pc.ReportProcessingFlags == ReportProcessingFlags.NotSet || ReportProcessing.ContainsFlag(pc.ReportProcessingFlags, ReportProcessingFlags.YukonEngine))
				{
					processingEngine = ProcessingEngine.YukonEngine;
					ChunkFactoryAdapter chunkFactoryAdapter = new ChunkFactoryAdapter(pc.ChunkFactory);
					Microsoft.ReportingServices.ReportProcessing.Report report = ReportProcessing.DeserializeReport(new ReportProcessing.GetReportChunk(new ChunkFactoryAdapter(yukonCompiledDefinition).GetReportChunk));
					ReportProcessing.ProcessingContext processingContext;
					UserProfileState userProfileState;
					ReportSnapshot reportSnapshot = this.ProcessReport(report, pc, false, false, new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk), processingErrorContext, executionTimeStamp, null, out processingContext, out userProfileState);
					Global.Tracer.Assert(processingContext != null && processingContext.ChunkManager != null, "(null != context && null != context.ChunkManager)");
					Global.Tracer.Assert(reportSnapshot != null, "(null != reportSnapshot)");
					executionLogContext.AddLegacyDataProcessingTime(processingContext.DataProcessingDurationMs);
					processingContext.ChunkManager.SaveFirstPage();
					processingContext.ChunkManager.SaveReportSnapshot(reportSnapshot);
					onDemandProcessingResult = new YukonProcessingResult(reportSnapshot, processingContext.ChunkManager, pc.Parameters, report.AutoRefresh, reportSnapshot.ReportInstance.NumberOfPages, processingErrorContext.Messages, pc.ChunkFactory.ReportProcessingFlags, userProfileState, executionLogContext);
				}
				else
				{
					processingEngine = ProcessingEngine.OnDemandEngine;
					GlobalIDOwnerCollection globalIDOwnerCollection = new GlobalIDOwnerCollection();
					Microsoft.ReportingServices.ReportIntermediateFormat.Report report2 = ReportProcessing.DeserializeKatmaiReport(pc.ChunkFactory, false, globalIDOwnerCollection);
					ReportSnapshot reportSnapshot2 = new ProcessReportOdpInitial(this.Configuration, pc, report2, processingErrorContext, null, globalIDOwnerCollection, executionLogContext, executionTimeStamp).Execute(out onDemandProcessingContext);
					renderingContext = new Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext(null, reportSnapshot2, null, onDemandProcessingContext);
					Microsoft.ReportingServices.OnDemandReportRendering.Report report3 = new Microsoft.ReportingServices.OnDemandReportRendering.Report(reportSnapshot2.Report, reportSnapshot2.ReportInstance, renderingContext, itemName, null);
					new NullRenderer().Process(report3, onDemandProcessingContext, false, true);
					ReportProcessing.CleanupOnDemandProcessing(onDemandProcessingContext, false);
					bool flag = false;
					ReportProcessing.UpdateEventInfo(reportSnapshot2, onDemandProcessingContext, renderingContext, ref flag);
					ChunkManager.OnDemandProcessingManager.PreparePartitionedTreesForSyncSerialization(onDemandProcessingContext);
					FullOnDemandProcessingResult fullOnDemandProcessingResult = new FullOnDemandProcessingResult(reportSnapshot2, onDemandProcessingContext.OdpMetadata.OdpChunkManager, onDemandProcessingContext.OdpMetadata.SnapshotHasChanged, pc.ChunkFactory, pc.Parameters, reportSnapshot2.Report.EvaluateAutoRefresh(null, onDemandProcessingContext), 0, processingErrorContext.Messages, flag, renderingContext.EventInfo, PaginationMode.Estimate, pc.ChunkFactory.ReportProcessingFlags, onDemandProcessingContext.HasUserProfileState, executionLogContext);
					fullOnDemandProcessingResult.Save();
					onDemandProcessingResult = fullOnDemandProcessingResult;
				}
			}
			catch (RSException)
			{
				ReportProcessing.RequestErrorGroupTreeCleanup(onDemandProcessingContext);
				throw;
			}
			catch (Exception ex)
			{
				ReportProcessing.RequestErrorGroupTreeCleanup(onDemandProcessingContext);
				throw new ReportProcessingException(ex, processingErrorContext.Messages);
			}
			finally
			{
				if (onDemandProcessingContext != null)
				{
					onDemandProcessingContext.FreeAllResources();
				}
				if (renderingContext != null)
				{
					renderingContext.CloseRenderingChunkManager();
				}
				ReportProcessing.UpdateHostingEnvironment(processingErrorContext, pc.ReportContext, executionLogContext, processingEngine, pc.JobContext);
				if (currentCulture != null)
				{
					Thread.CurrentThread.CurrentCulture = currentCulture;
				}
			}
			return onDemandProcessingResult;
		}

		// Token: 0x060054C9 RID: 21705 RVA: 0x0016483C File Offset: 0x00162A3C
		public static void CreateRenderer(string format, IExtensionFactory extFactory, out IRenderingExtension newRenderer)
		{
			newRenderer = null;
			try
			{
				newRenderer = ReportRendererFactory.GetNewRenderer(format, extFactory);
				if (newRenderer == null)
				{
					throw new ReportProcessingException(ErrorCode.rsRenderingExtensionNotFound);
				}
			}
			catch (RSException)
			{
				throw;
			}
			catch (Exception ex)
			{
				throw new ReportProcessingException(ex, null);
			}
		}

		// Token: 0x060054CA RID: 21706 RVA: 0x0016488C File Offset: 0x00162A8C
		public OnDemandProcessingResult RenderReportAndCacheData(DateTime executionTimeStamp, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory metaDataChunkFactory, IChunkFactory yukonCompiledDefinition)
		{
			IRenderingExtension renderingExtension;
			ReportProcessing.CreateRenderer(rc.Format, pc.ExtFactory, out renderingExtension);
			return this.RenderReportAndCacheData(renderingExtension, executionTimeStamp, pc, rc, metaDataChunkFactory, yukonCompiledDefinition);
		}

		// Token: 0x060054CB RID: 21707 RVA: 0x001648BC File Offset: 0x00162ABC
		public OnDemandProcessingResult RenderReportAndCacheData(IRenderingExtension newRenderer, DateTime executionTimeStamp, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory metaDataChunkFactory, IChunkFactory yukonCompiledDefinition)
		{
			RenderReport renderReport;
			if (ReportProcessing.IsYukonProcessingEngine(pc.ReportProcessingFlags))
			{
				renderReport = new RenderReportYukonInitial(pc, rc, executionTimeStamp, this, yukonCompiledDefinition);
			}
			else
			{
				renderReport = new RenderReportOdpLiveAndCacheData(pc, rc, executionTimeStamp, this.Configuration, metaDataChunkFactory);
			}
			return renderReport.Execute(newRenderer);
		}

		// Token: 0x060054CC RID: 21708 RVA: 0x00164900 File Offset: 0x00162B00
		public OnDemandProcessingResult RenderDefinitionOnly(DateTime executionTimeStamp, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory yukonCompiledDefinition)
		{
			IRenderingExtension renderingExtension;
			ReportProcessing.CreateRenderer(rc.Format, pc.ExtFactory, out renderingExtension);
			return this.RenderDefinitionOnly(renderingExtension, executionTimeStamp, pc, rc, yukonCompiledDefinition);
		}

		// Token: 0x060054CD RID: 21709 RVA: 0x0016492C File Offset: 0x00162B2C
		public OnDemandProcessingResult RenderDefinitionOnly(IRenderingExtension newRenderer, DateTime executionTimeStamp, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory yukonCompiledDefinition)
		{
			RenderReport renderReport;
			if (ReportProcessing.IsYukonProcessingEngine(pc.ReportProcessingFlags))
			{
				renderReport = new RenderReportYukonDefinitionOnly(pc, rc, executionTimeStamp, this, yukonCompiledDefinition);
			}
			else
			{
				renderReport = new RenderReportDefinitionOnly(pc, rc, executionTimeStamp, this.Configuration);
			}
			return renderReport.Execute(newRenderer);
		}

		// Token: 0x060054CE RID: 21710 RVA: 0x0016496C File Offset: 0x00162B6C
		public OnDemandProcessingResult RenderReport(DateTime executionTimeStamp, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory yukonCompiledDefinition)
		{
			IRenderingExtension renderingExtension;
			ReportProcessing.CreateRenderer(rc.Format, pc.ExtFactory, out renderingExtension);
			return this.RenderReport(renderingExtension, executionTimeStamp, pc, rc, yukonCompiledDefinition);
		}

		// Token: 0x060054CF RID: 21711 RVA: 0x00164998 File Offset: 0x00162B98
		public OnDemandProcessingResult RenderReport(IRenderingExtension newRenderer, DateTime executionTimeStamp, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory yukonCompiledDefinition)
		{
			RenderReport renderReport;
			if (ReportProcessing.IsYukonProcessingEngine(pc.ReportProcessingFlags))
			{
				renderReport = new RenderReportYukonInitial(pc, rc, executionTimeStamp, this, yukonCompiledDefinition);
			}
			else
			{
				renderReport = new RenderReportOdpInitial(pc, rc, executionTimeStamp, this.Configuration);
			}
			return renderReport.Execute(newRenderer);
		}

		// Token: 0x060054D0 RID: 21712 RVA: 0x001649D8 File Offset: 0x00162BD8
		public OnDemandProcessingResult RenderSnapshot(Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc)
		{
			IRenderingExtension renderingExtension;
			ReportProcessing.CreateRenderer(rc.Format, pc.ExtFactory, out renderingExtension);
			return this.RenderSnapshot(renderingExtension, rc, pc);
		}

		// Token: 0x060054D1 RID: 21713 RVA: 0x00164A04 File Offset: 0x00162C04
		public OnDemandProcessingResult RenderSnapshot(IRenderingExtension newRenderer, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc)
		{
			RenderReport renderReport;
			if (ReportProcessing.IsYukonProcessingEngine(pc.ReportProcessingFlags))
			{
				renderReport = new RenderReportYukonSnapshot(pc, rc, this);
			}
			else
			{
				renderReport = new RenderReportOdpSnapshot(pc, rc, this.Configuration);
			}
			return renderReport.Execute(newRenderer);
		}

		// Token: 0x060054D2 RID: 21714 RVA: 0x00164A40 File Offset: 0x00162C40
		public OnDemandProcessingResult RenderReportWithCachedData(DateTime executionTimeStamp, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory getMetaDataFactory)
		{
			IRenderingExtension renderingExtension;
			ReportProcessing.CreateRenderer(rc.Format, pc.ExtFactory, out renderingExtension);
			return this.RenderReportWithCachedData(renderingExtension, executionTimeStamp, pc, rc, getMetaDataFactory);
		}

		// Token: 0x060054D3 RID: 21715 RVA: 0x00164A6C File Offset: 0x00162C6C
		public OnDemandProcessingResult RenderReportWithCachedData(IRenderingExtension newRenderer, DateTime executionTimeStamp, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory getMetaDataFactory)
		{
			if (ReportProcessing.ContainsFlag(pc.ReportProcessingFlags, ReportProcessingFlags.YukonEngine))
			{
				Global.Tracer.Assert(false, "initial processing based on cached data in Yukon");
				throw new InvalidOperationException();
			}
			return new RenderReportOdpWithCachedData(pc, rc, executionTimeStamp, this.Configuration, getMetaDataFactory).Execute(newRenderer);
		}

		// Token: 0x060054D4 RID: 21716 RVA: 0x00164AAC File Offset: 0x00162CAC
		public OnDemandProcessingResult ProcessAndRenderSnapshot(Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory originalSnapshotChunks)
		{
			IRenderingExtension renderingExtension;
			ReportProcessing.CreateRenderer(rc.Format, pc.ExtFactory, out renderingExtension);
			return this.ProcessAndRenderSnapshot(renderingExtension, pc, rc, originalSnapshotChunks);
		}

		// Token: 0x060054D5 RID: 21717 RVA: 0x00164AD8 File Offset: 0x00162CD8
		public OnDemandProcessingResult ProcessAndRenderSnapshot(IRenderingExtension newRenderer, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, IChunkFactory originalSnapshotChunks)
		{
			RenderReport renderReport;
			if (ReportProcessing.IsYukonProcessingEngine(pc.ReportProcessingFlags))
			{
				renderReport = new RenderReportYukonReprocessSnapshot(pc, rc, this, originalSnapshotChunks);
			}
			else
			{
				renderReport = new RenderReportOdpReprocessSnapshot(pc, rc, this.Configuration, originalSnapshotChunks);
			}
			return renderReport.Execute(newRenderer);
		}

		// Token: 0x060054D6 RID: 21718 RVA: 0x00164B18 File Offset: 0x00162D18
		public OnDemandProcessingResult RenderSnapshotStream(string streamName, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc)
		{
			IRenderingExtension renderingExtension;
			ReportProcessing.CreateRenderer(rc.Format, pc.ExtFactory, out renderingExtension);
			return this.RenderSnapshotStream(renderingExtension, streamName, rc, pc);
		}

		// Token: 0x060054D7 RID: 21719 RVA: 0x00164B44 File Offset: 0x00162D44
		public OnDemandProcessingResult RenderSnapshotStream(IRenderingExtension newRenderer, string streamName, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc)
		{
			RenderReport renderReport;
			if (ReportProcessing.IsYukonProcessingEngine(pc.ReportProcessingFlags))
			{
				renderReport = new RenderReportYukonSnapshotStream(pc, rc, this, streamName);
			}
			else
			{
				renderReport = new RenderReportOdpSnapshotStream(pc, rc, this.Configuration, streamName);
			}
			return renderReport.Execute(newRenderer);
		}

		// Token: 0x060054D8 RID: 21720 RVA: 0x00164B84 File Offset: 0x00162D84
		public void CallRenderer(ICatalogItemContext cc, IExtensionFactory extFactory, CreateAndRegisterStream createAndRegisterStreamCallback)
		{
			IRenderingExtension renderingExtension;
			ReportProcessing.CreateRenderer(cc.RSRequestParameters.FormatParamValue, extFactory, out renderingExtension);
			this.CallRenderer(renderingExtension, cc, createAndRegisterStreamCallback);
		}

		// Token: 0x060054D9 RID: 21721 RVA: 0x00164BB0 File Offset: 0x00162DB0
		public void CallRenderer(IRenderingExtension newRenderer, ICatalogItemContext cc, CreateAndRegisterStream createAndRegisterStreamCallback)
		{
			try
			{
				newRenderer.GetRenderingResource(createAndRegisterStreamCallback, cc.RSRequestParameters.RenderingParameters);
			}
			catch (RSException)
			{
				throw;
			}
			catch (ReportRenderingException ex)
			{
				ReportProcessing.HandleRenderingException(ex);
			}
			catch (Exception ex2)
			{
				if (AsynchronousExceptionDetection.IsStoppingException(ex2))
				{
					throw;
				}
				throw new UnhandledReportRenderingException(ex2);
			}
		}

		// Token: 0x060054DA RID: 21722 RVA: 0x00164C14 File Offset: 0x00162E14
		public void GetAllDataSources(ICatalogItemContext reportContext, IChunkFactory getCompiledDefinitionFactory, ReportProcessing.OnDemandSubReportDataSourcesCallback subReportCallback, DataSourceInfoCollection dataSources, DataSetInfoCollection dataSetReferences, bool checkIfUsable, ServerDataSourceSettings serverDatasourceSettings, out RuntimeDataSourceInfoCollection allDataSources, out RuntimeDataSetInfoCollection allDataSetReferences)
		{
			try
			{
				allDataSources = new RuntimeDataSourceInfoCollection();
				allDataSetReferences = new RuntimeDataSetInfoCollection();
				Hashtable hashtable = new Hashtable();
				if (getCompiledDefinitionFactory.ReportProcessingFlags == ReportProcessingFlags.NotSet || ReportProcessing.ContainsFlag(getCompiledDefinitionFactory.ReportProcessingFlags, ReportProcessingFlags.YukonEngine))
				{
					object obj = new ChunkFactoryAdapter(getCompiledDefinitionFactory);
					SubreportCallbackAdapter subreportCallbackAdapter = new SubreportCallbackAdapter(subReportCallback);
					ReportProcessing.CheckCredentials(ReportProcessing.DeserializeReport(new ReportProcessing.GetReportChunk(obj.GetReportChunk)), dataSources, reportContext, new ReportProcessing.SubReportDataSourcesCallback(subreportCallbackAdapter.SubReportDataSourcesCallback), allDataSources, 0, checkIfUsable, serverDatasourceSettings, hashtable);
				}
				else
				{
					ReportProcessing.CheckCredentialsOdp(ReportProcessing.DeserializeKatmaiReport(getCompiledDefinitionFactory), dataSources, dataSetReferences, reportContext, subReportCallback, allDataSources, allDataSetReferences, 0, checkIfUsable, serverDatasourceSettings, hashtable);
				}
			}
			catch (RSException)
			{
				throw;
			}
			catch (Exception ex)
			{
				throw new ReportProcessingException(ex, null);
			}
		}

		// Token: 0x060054DB RID: 21723 RVA: 0x00164CD0 File Offset: 0x00162ED0
		public ParameterInfoCollection GetSnapshotParameters(IChunkFactory getReportChunkFactory)
		{
			ReportProcessingFlags reportProcessingFlags = getReportChunkFactory.ReportProcessingFlags;
			if (reportProcessingFlags == ReportProcessingFlags.NotSet || ReportProcessing.ContainsFlag(reportProcessingFlags, ReportProcessingFlags.YukonEngine))
			{
				ChunkFactoryAdapter chunkFactoryAdapter = new ChunkFactoryAdapter(getReportChunkFactory);
				return this.GetYukonSnapshotParameters(new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk));
			}
			return this.GetOdpSnapshotParameters(getReportChunkFactory);
		}

		// Token: 0x060054DC RID: 21724 RVA: 0x00164D12 File Offset: 0x00162F12
		private ParameterInfoCollection GetOdpSnapshotParameters(IChunkFactory chunkFactory)
		{
			return ChunkManager.OnDemandProcessingManager.DeserializeOnDemandMetadata(chunkFactory, null).ReportSnapshot.Parameters;
		}

		// Token: 0x060054DD RID: 21725 RVA: 0x00164D28 File Offset: 0x00162F28
		private ParameterInfoCollection GetYukonSnapshotParameters(ReportProcessing.GetReportChunk getReportChunkCallback)
		{
			ParameterInfoCollection parameterInfoCollection;
			try
			{
				Stream stream = null;
				try
				{
					string text;
					stream = getReportChunkCallback("Main", ReportProcessing.ReportChunkTypes.Main, out text);
					parameterInfoCollection = new Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader(stream).ReadSnapshotParameters();
				}
				finally
				{
					if (stream != null)
					{
						stream.Close();
					}
				}
			}
			catch (RSException)
			{
				throw;
			}
			catch (Exception ex)
			{
				throw new ReportProcessingException(ex, null);
			}
			return parameterInfoCollection;
		}

		// Token: 0x060054DE RID: 21726 RVA: 0x00164D94 File Offset: 0x00162F94
		public ProcessingMessageList ProcessReportParameters(DateTime executionTimeStamp, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, bool isSnapshot, out bool needsUpgrade)
		{
			needsUpgrade = false;
			bool flag = true;
			ErrorContext errorContext = new ProcessingErrorContext();
			ReportProcessing.ProcessingContext processingContext = null;
			Microsoft.ReportingServices.ReportProcessing.Report report = null;
			OnDemandProcessingContext onDemandProcessingContext = null;
			Microsoft.ReportingServices.ReportIntermediateFormat.Report report2 = null;
			CultureInfo cultureInfo = null;
			if (pc.Parameters.IsAnyParameterDynamic)
			{
				if (ReportProcessing.ContainsFlag(pc.ReportProcessingFlags, ReportProcessingFlags.YukonEngine) || pc.ReportProcessingFlags == ReportProcessingFlags.NotSet)
				{
					flag = false;
					ChunkFactoryAdapter chunkFactoryAdapter = new ChunkFactoryAdapter(pc.ChunkFactory);
					if (isSnapshot)
					{
						DateTime dateTime;
						report = ReportProcessing.DeserializeReportFromSnapshot(new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk), out dateTime);
					}
					else
					{
						report = ReportProcessing.DeserializeReport(new ReportProcessing.GetReportChunk(chunkFactoryAdapter.GetReportChunk));
					}
				}
				else
				{
					flag = true;
					report2 = ReportProcessing.DeserializeKatmaiReport(pc.ChunkFactory);
				}
			}
			if (flag)
			{
				onDemandProcessingContext = new OnDemandProcessingContext(pc, report2, errorContext, executionTimeStamp, isSnapshot, this.m_configuration);
			}
			else
			{
				processingContext = pc.ParametersInternalProcessingContext(errorContext, executionTimeStamp, isSnapshot);
			}
			ProcessingMessageList processingMessageList2;
			try
			{
				cultureInfo = Thread.CurrentThread.CurrentCulture;
				Thread.CurrentThread.CurrentCulture = Localization.ClientPrimaryCulture;
				ProcessingMessageList processingMessageList;
				if (flag)
				{
					processingMessageList = ReportProcessing.ProcessReportParameters(report2, onDemandProcessingContext, pc.Parameters);
				}
				else
				{
					processingMessageList = ReportProcessing.ProcessReportParameters(report, processingContext, pc.Parameters);
				}
				processingMessageList2 = processingMessageList;
			}
			catch (RSException)
			{
				throw;
			}
			catch (Exception ex)
			{
				throw new ReportProcessingException(ex, errorContext.Messages);
			}
			finally
			{
				if (flag)
				{
					onDemandProcessingContext.UnregisterAbortInfo();
					pc.Parameters.UserProfileState |= onDemandProcessingContext.HasUserProfileState;
				}
				else
				{
					processingContext.AbortInfo.Dispose();
					processingContext.AbortInfo = null;
					pc.Parameters.UserProfileState |= processingContext.HasUserProfileState;
				}
				if (cultureInfo != null)
				{
					Thread.CurrentThread.CurrentCulture = cultureInfo;
				}
			}
			return processingMessageList2;
		}

		// Token: 0x060054DF RID: 21727 RVA: 0x00164F30 File Offset: 0x00163130
		internal static bool ContainsFlag(ReportProcessingFlags processingFlags, ReportProcessingFlags flag)
		{
			return (processingFlags & flag) == flag;
		}

		// Token: 0x060054E0 RID: 21728 RVA: 0x00164F38 File Offset: 0x00163138
		internal static bool IsYukonProcessingEngine(ReportProcessingFlags processingFlags)
		{
			return processingFlags == ReportProcessingFlags.NotSet || ReportProcessing.ContainsFlag(processingFlags, ReportProcessingFlags.YukonEngine);
		}

		// Token: 0x060054E1 RID: 21729 RVA: 0x00164F47 File Offset: 0x00163147
		internal static void RequestErrorGroupTreeCleanup(OnDemandProcessingContext odpContext)
		{
			if (odpContext != null && odpContext.OdpMetadata != null)
			{
				odpContext.OdpMetadata.DisposePersistedTreeScalability();
			}
		}

		// Token: 0x060054E2 RID: 21730 RVA: 0x00164F60 File Offset: 0x00163160
		internal static void CleanupOnDemandProcessing(OnDemandProcessingContext topLevelOdpContext, bool resetGroupTreeStorage)
		{
			if (topLevelOdpContext != null)
			{
				topLevelOdpContext.FreeAllResources();
				OnDemandMetadata odpMetadata = topLevelOdpContext.OdpMetadata;
				if (odpMetadata != null)
				{
					if (odpMetadata.OdpChunkManager != null)
					{
						topLevelOdpContext.OdpMetadata.OdpChunkManager.SetOdpContext(topLevelOdpContext);
					}
					if (odpMetadata.GroupTreeScalabilityCache != null)
					{
						ReportProcessing.UpdateExecutionLogContextForTreeCache(topLevelOdpContext, odpMetadata, odpMetadata.GroupTreeScalabilityCache);
					}
					if (odpMetadata.LookupScalabilityCache != null)
					{
						ReportProcessing.UpdateExecutionLogContextForTreeCache(topLevelOdpContext, odpMetadata, odpMetadata.LookupScalabilityCache);
					}
				}
				if (resetGroupTreeStorage)
				{
					ChunkManager.OnDemandProcessingManager.PreparePartitionedTreesForAsyncSerialization(topLevelOdpContext);
				}
			}
		}

		// Token: 0x060054E3 RID: 21731 RVA: 0x00164FCC File Offset: 0x001631CC
		private static void UpdateExecutionLogContextForTreeCache(OnDemandProcessingContext topLevelOdpContext, OnDemandMetadata odpMetadata, PartitionedTreeScalabilityCache cache)
		{
			ExecutionLogContext executionLogContext = topLevelOdpContext.ExecutionLogContext;
			long num = cache.SerializationDurationMs;
			if (odpMetadata.IsInitialProcessingRequest)
			{
				num += cache.DeserializationDurationMs;
			}
			executionLogContext.UpdateForTreeScaleCache(num, cache.PeakMemoryUsageKBytes);
		}

		// Token: 0x060054E4 RID: 21732 RVA: 0x00165003 File Offset: 0x00163203
		internal static void UpdateHostingEnvironment(ErrorContext errorContext, ICatalogItemContext itemContext, ExecutionLogContext executionLogContext, ProcessingEngine processingEngine, IJobContext jobContext)
		{
			ReportProcessing.UpdateHostingEnvironment(errorContext, itemContext, executionLogContext, processingEngine, jobContext, null);
		}

		// Token: 0x060054E5 RID: 21733 RVA: 0x00165014 File Offset: 0x00163214
		internal static void UpdateHostingEnvironment(ErrorContext errorContext, ICatalogItemContext itemContext, ExecutionLogContext executionLogContext, ProcessingEngine processingEngine, IJobContext jobContext, string sharedDataSetMessage)
		{
			if (jobContext != null)
			{
				Global.Tracer.Assert(executionLogContext != null, "ExecutionLogContext must not be null");
				executionLogContext.StopAllRunningTimers();
				long reportProcessingDurationMsNormalized = executionLogContext.ReportProcessingDurationMsNormalized;
				long dataProcessingDurationMsNormalized = executionLogContext.DataProcessingDurationMsNormalized;
				long reportRenderingDurationMsNormalized = executionLogContext.ReportRenderingDurationMsNormalized;
				long processingScalabilityDurationMsNormalized = executionLogContext.ProcessingScalabilityDurationMsNormalized;
				object syncRoot = jobContext.SyncRoot;
				lock (syncRoot)
				{
					if (dataProcessingDurationMsNormalized != 0L)
					{
						jobContext.TimeDataRetrieval += TimeSpan.FromMilliseconds((double)dataProcessingDurationMsNormalized);
					}
					if (reportProcessingDurationMsNormalized != 0L)
					{
						jobContext.TimeProcessing += TimeSpan.FromMilliseconds((double)reportProcessingDurationMsNormalized);
					}
					if (reportRenderingDurationMsNormalized != 0L)
					{
						jobContext.TimeRendering += TimeSpan.FromMilliseconds((double)reportRenderingDurationMsNormalized);
					}
					if (jobContext.AdditionalInfo.ScalabilityTime == null)
					{
						jobContext.AdditionalInfo.ScalabilityTime = new ScaleTimeCategory();
					}
					jobContext.AdditionalInfo.ScalabilityTime.Processing = new long?(executionLogContext.ProcessingScalabilityDurationMsNormalized);
					if (jobContext.AdditionalInfo.EstimatedMemoryUsageKB == null)
					{
						jobContext.AdditionalInfo.EstimatedMemoryUsageKB = new EstimatedMemoryUsageKBCategory();
					}
					jobContext.AdditionalInfo.EstimatedMemoryUsageKB.Processing = new long?(executionLogContext.PeakProcesssingMemoryUsage);
					if (sharedDataSetMessage != null)
					{
						jobContext.AdditionalInfo.SharedDataSet = sharedDataSetMessage;
					}
					else
					{
						AdditionalInfo additionalInfo = jobContext.AdditionalInfo;
						int num = (int)processingEngine;
						additionalInfo.ProcessingEngine = num.ToString(CultureInfo.InvariantCulture);
					}
					if (executionLogContext.ExternalImageCount > 0L)
					{
						ExternalImageCategory externalImageCategory = new ExternalImageCategory();
						externalImageCategory.Count = executionLogContext.ExternalImageCount.ToString(CultureInfo.InvariantCulture);
						externalImageCategory.ByteCount = executionLogContext.ExternalImageBytes.ToString(CultureInfo.InvariantCulture);
						externalImageCategory.ResourceFetchTime = executionLogContext.ExternalImageDurationMs.ToString(CultureInfo.InvariantCulture);
						jobContext.AdditionalInfo.ExternalImages = externalImageCategory;
					}
					jobContext.AdditionalInfo.Connections = executionLogContext.GetConnectionMetrics();
				}
			}
			ReportProcessing.TraceProcessingMessages(errorContext, itemContext);
		}

		// Token: 0x060054E6 RID: 21734 RVA: 0x0016521C File Offset: 0x0016341C
		internal static void TraceProcessingMessages(ErrorContext errorContext, ICatalogItemContext itemContext)
		{
			if (errorContext != null && errorContext.Messages != null)
			{
				ProcessingMessageList messages = errorContext.Messages;
				int count = messages.Count;
				if (Global.Tracer.TraceVerbose && count > 0)
				{
					StringBuilder stringBuilder = new StringBuilder();
					stringBuilder.AppendFormat("The following messages were generated while processing item: '{0}':", itemContext.ItemPathAsString);
					for (int i = 0; i < count; i++)
					{
						stringBuilder.AppendLine();
						stringBuilder.Append("\t");
						stringBuilder.Append(messages[i].FormatMessage());
					}
					Global.Tracer.Trace(TraceLevel.Verbose, stringBuilder.ToString());
				}
			}
		}

		// Token: 0x060054E7 RID: 21735 RVA: 0x001652B0 File Offset: 0x001634B0
		internal static void UpdateEventInfo(ReportSnapshot odpReportSnapshot, OnDemandProcessingContext odpContext, Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext odpRenderingContext, ref bool eventInfoChanged)
		{
			if (odpReportSnapshot != null)
			{
				if (odpContext.NewSortFilterEventInfo != null && odpContext.NewSortFilterEventInfo.Count > 0)
				{
					odpReportSnapshot.SortFilterEventInfo = odpContext.NewSortFilterEventInfo;
				}
				else
				{
					odpReportSnapshot.SortFilterEventInfo = null;
				}
			}
			eventInfoChanged |= odpRenderingContext.EventInfoChanged;
		}

		// Token: 0x060054E8 RID: 21736 RVA: 0x001652EB File Offset: 0x001634EB
		internal static void UpdateEventInfo(ReportSnapshot odpReportSnapshot, OnDemandProcessingContext odpContext, Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext odpRenderingContext, Microsoft.ReportingServices.ReportProcessing.RenderingContext rc, ref bool eventInfoChanged)
		{
			ReportProcessing.UpdateEventInfo(odpReportSnapshot, odpContext, odpRenderingContext, ref eventInfoChanged);
			if (eventInfoChanged)
			{
				rc.EventInfo = odpRenderingContext.EventInfo;
			}
		}

		// Token: 0x060054E9 RID: 21737 RVA: 0x00165308 File Offset: 0x00163508
		internal static void HandleRenderingException(ReportRenderingException rex)
		{
			if (rex.InnerException != null && (rex.InnerException is RSException || rex.InnerException is ReportProcessing.DataCacheUnavailableException))
			{
				if (rex.InnerException is RSException)
				{
					throw new RSException((RSException)rex.InnerException);
				}
				throw new ReportProcessing.DataCacheUnavailableException((ReportProcessing.DataCacheUnavailableException)rex.InnerException);
			}
			else
			{
				if (rex.Unexpected)
				{
					throw new UnhandledReportRenderingException(rex);
				}
				throw new HandledReportRenderingException(rex);
			}
		}

		// Token: 0x060054EA RID: 21738 RVA: 0x0016537C File Offset: 0x0016357C
		private Microsoft.ReportingServices.ReportProcessing.Report CompileYukonReport(ICatalogItemContext reportContext, byte[] reportDefinition, ReportProcessing.CreateReportChunk createChunkCallback, ReportProcessing.CheckSharedDataSource checkDataSourceCallback, ReportProcessing.ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, PublishingErrorContext errorContext, AppDomain compilationTempAppDomain, bool generateExpressionHostWithRefusedPermissions, IDataProtection dataProtection, out string reportDescription, out string reportLanguage, out ParameterInfoCollection parameters, out DataSourceInfoCollection dataSources, out UserLocationFlags userReferenceLocation, out ArrayList dataSetsName, out bool hasExternalImages, out bool hasHyperlinks)
		{
			Microsoft.ReportingServices.ReportProcessing.Report report = new ReportPublishing().CreateIntermediateFormat(reportContext, reportDefinition, createChunkCallback, checkDataSourceCallback, resolveTemporaryDataSourceCallback, originalDataSources, errorContext, compilationTempAppDomain, generateExpressionHostWithRefusedPermissions, dataProtection, out reportDescription, out reportLanguage, out parameters, out dataSources, out userReferenceLocation, out dataSetsName, out hasExternalImages, out hasHyperlinks);
			if (createChunkCallback != null)
			{
				ReportProcessing.SerializeReport(report, createChunkCallback);
			}
			return report;
		}

		// Token: 0x060054EB RID: 21739 RVA: 0x001653C0 File Offset: 0x001635C0
		internal ReportSnapshot ProcessReport(Microsoft.ReportingServices.ReportProcessing.Report report, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, bool snapshotProcessing, bool processWithCachedData, ReportProcessing.GetReportChunk getChunkCallback, ErrorContext errorContext, DateTime executionTime, ReportProcessing.CreateReportChunk cacheDataCallback, out ReportProcessing.ProcessingContext context, out UserProfileState userProfileState)
		{
			context = pc.CreateInternalProcessingContext(null, report, errorContext, executionTime, pc.AllowUserProfileState, pc.IsHistorySnapshot, snapshotProcessing, processWithCachedData, getChunkCallback, cacheDataCallback);
			context.CreateReportChunkFactory = pc.ChunkFactory;
			return this.ProcessReport(report, pc, context, out userProfileState);
		}

		// Token: 0x060054EC RID: 21740 RVA: 0x0016540C File Offset: 0x0016360C
		private bool HasUserSortFilter(Microsoft.ReportingServices.ReportProcessing.Report report, uint subreportLevel, ReportProcessing.ProcessingContext context)
		{
			if (report == null)
			{
				return false;
			}
			if (report.HasUserSortFilter)
			{
				return true;
			}
			if (context.SubReportCallback == null)
			{
				return true;
			}
			if (subreportLevel <= 20U && report.SubReports != null)
			{
				int count = report.SubReports.Count;
				for (int i = 0; i < count; i++)
				{
					Microsoft.ReportingServices.ReportProcessing.SubReport subReport = report.SubReports[i];
					if (subReport.RetrievalStatus == Microsoft.ReportingServices.ReportProcessing.SubReport.Status.NotRetrieved && context.SubReportCallback != null)
					{
						ReportProcessing.RuntimeRICollection.RetrieveSubReport(subReport, context, null, true);
					}
					if (subReport.Report != null && this.HasUserSortFilter(subReport.Report, subreportLevel + 1U, context))
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x060054ED RID: 21741 RVA: 0x0016549C File Offset: 0x0016369C
		internal static void FetchSubReports(Microsoft.ReportingServices.ReportIntermediateFormat.Report report, IChunkFactory getReportChunks, ErrorContext errorContext, OnDemandMetadata odpMetadata, ICatalogItemContext parentReportContext, ReportProcessing.OnDemandSubReportCallback subReportCallback, int subReportLevel, bool snapshotProcessing, bool processWithCachedData, GlobalIDOwnerCollection globalIDOwnerCollection, ParameterInfoCollection parentQueryParameters)
		{
			if ((long)subReportLevel > 20L)
			{
				foreach (Microsoft.ReportingServices.ReportIntermediateFormat.SubReport subReport in report.SubReports)
				{
					subReport.ExceededMaxLevel = true;
				}
				return;
			}
			foreach (Microsoft.ReportingServices.ReportIntermediateFormat.SubReport subReport2 in report.SubReports)
			{
				try
				{
					string reportName = subReport2.ReportName;
					SubReportInfo subReportInfo;
					if (processWithCachedData)
					{
						if (!odpMetadata.TryGetSubReportInfo(subReportLevel == 0, subReport2.SubReportDefinitionPath, reportName, out subReportInfo))
						{
							throw new ReportProcessing.DataCacheUnavailableException();
						}
					}
					else if (!snapshotProcessing)
					{
						subReport2.OriginalCatalogPath = parentReportContext.MapUserProvidedPath(subReport2.ReportName);
						subReportInfo = odpMetadata.AddSubReportInfo(subReportLevel == 0, subReport2.SubReportDefinitionPath, reportName, subReport2.OriginalCatalogPath);
					}
					else
					{
						subReportInfo = odpMetadata.GetSubReportInfo(subReportLevel == 0, subReport2.SubReportDefinitionPath, reportName);
						if (subReportInfo != null && subReportInfo.CommonSubReportInfo != null)
						{
							subReport2.OriginalCatalogPath = subReportInfo.CommonSubReportInfo.OriginalCatalogPath;
						}
					}
					ReportProcessing.DeserializeKatmaiSubReport(subReport2, getReportChunks, parentReportContext, subReportCallback, subReportInfo, snapshotProcessing, errorContext, globalIDOwnerCollection, processWithCachedData, parentQueryParameters);
				}
				catch (ReportProcessing.DataCacheUnavailableException)
				{
					throw;
				}
				catch (Exception ex)
				{
					subReport2.RetrievalStatus = Microsoft.ReportingServices.ReportIntermediateFormat.SubReport.Status.DefinitionRetrieveFailed;
					ReportProcessing.HandleSubReportProcessingError(errorContext, subReport2, "0", null, ex);
				}
				if (subReport2.Report != null)
				{
					if (subReport2.Report.HasSubReports)
					{
						ReportProcessing.FetchSubReports(subReport2.Report, getReportChunks, errorContext, odpMetadata, subReport2.ReportContext, subReportCallback, subReportLevel + 1, snapshotProcessing, processWithCachedData, globalIDOwnerCollection, parentQueryParameters);
					}
					report.ReportOrDescendentHasUserSortFilter |= subReport2.Report.ReportOrDescendentHasUserSortFilter;
				}
			}
		}

		// Token: 0x060054EE RID: 21742 RVA: 0x0016568C File Offset: 0x0016388C
		private static void DeserializeKatmaiSubReport(Microsoft.ReportingServices.ReportIntermediateFormat.SubReport subReport, IChunkFactory getReportChunks, ICatalogItemContext reportContext, ReportProcessing.OnDemandSubReportCallback subReportCallback, SubReportInfo subReportInfo, bool snapshotProcessing, ErrorContext errorContext, GlobalIDOwnerCollection globalIDOwnerCollection, bool processWithCachedData, ParameterInfoCollection parentQueryParameters)
		{
			CommonSubReportInfo commonSubReportInfo = subReportInfo.CommonSubReportInfo;
			try
			{
				IChunkFactory chunkFactory;
				string text;
				if (commonSubReportInfo.DefinitionChunkFactory == null)
				{
					if (snapshotProcessing)
					{
						chunkFactory = getReportChunks;
						text = commonSubReportInfo.DefinitionUniqueName;
						subReport.ReportContext = reportContext.GetSubreportContext(commonSubReportInfo.ReportPath);
						if (commonSubReportInfo.RetrievalFailed)
						{
							subReport.RetrievalStatus = Microsoft.ReportingServices.ReportIntermediateFormat.SubReport.Status.DefinitionRetrieveFailed;
							return;
						}
					}
					else
					{
						ICatalogItemContext catalogItemContext;
						string text2;
						ParameterInfoCollection parameterInfoCollection;
						subReportCallback(reportContext, subReport.ReportName, commonSubReportInfo.DefinitionUniqueName, new ReportProcessing.NeedsUpgrade(ReportProcessing.NeedsUpgradeImpl), parentQueryParameters, out catalogItemContext, out text2, out chunkFactory, out parameterInfoCollection);
						if (chunkFactory == null)
						{
							return;
						}
						if (!ReportProcessing.ContainsFlag(chunkFactory.ReportProcessingFlags, ReportProcessingFlags.OnDemandEngine))
						{
							Global.Tracer.Trace(TraceLevel.Warning, "The subreport '{0}' could not be processed within parent report '{1}' due to a mismatch in execution engines. Either the subreport failed to automatically republish, or the subreport contains a Reporting Services 2005-style CustomReportItem. To correct this error, please attempt to republish the subreport manually. If it contains a CustomReportItem, please upgrade the report to the latest version.", new object[] { subReport.ReportName, reportContext.ItemPathAsString });
							errorContext.Register(ProcessingErrorCode.rsEngineMismatchSubReport, Severity.Warning, subReport.ObjectType, subReport.Name, null, new string[] { subReport.Name, reportContext.ItemPathAsString });
							subReport.RetrievalStatus = Microsoft.ReportingServices.ReportIntermediateFormat.SubReport.Status.DefinitionRetrieveFailed;
						}
						text = "CompiledDefinition";
						commonSubReportInfo.ParametersFromCatalog = parameterInfoCollection;
						commonSubReportInfo.Description = text2;
						subReport.ReportContext = catalogItemContext;
					}
					commonSubReportInfo.DefinitionChunkFactory = chunkFactory;
				}
				else
				{
					if (snapshotProcessing)
					{
						text = commonSubReportInfo.DefinitionUniqueName;
					}
					else
					{
						text = "CompiledDefinition";
					}
					chunkFactory = commonSubReportInfo.DefinitionChunkFactory;
					subReport.ReportContext = reportContext.GetSubreportContext(commonSubReportInfo.ReportPath);
					if (commonSubReportInfo.RetrievalFailed)
					{
						subReport.RetrievalStatus = Microsoft.ReportingServices.ReportIntermediateFormat.SubReport.Status.DefinitionRetrieveFailed;
						return;
					}
				}
				subReport.ParametersFromCatalog = commonSubReportInfo.ParametersFromCatalog;
				subReport.Description = commonSubReportInfo.Description;
				subReport.Report = ReportProcessing.DeserializeKatmaiReport(chunkFactory, text, snapshotProcessing, globalIDOwnerCollection, subReport, subReport);
				subReport.UpdateSubReportEventSourceGlobalDataSetIds(subReportInfo);
				subReport.RetrievalStatus = Microsoft.ReportingServices.ReportIntermediateFormat.SubReport.Status.DefinitionRetrieved;
			}
			catch (IncompatibleFormatVersionException)
			{
				Global.Tracer.Assert(false, "IncompatibleFormatVersion");
			}
			catch (Exception)
			{
				commonSubReportInfo.RetrievalFailed = true;
				subReport.RetrievalStatus = Microsoft.ReportingServices.ReportIntermediateFormat.SubReport.Status.DefinitionRetrieveFailed;
				throw;
			}
		}

		// Token: 0x060054EF RID: 21743 RVA: 0x00165890 File Offset: 0x00163A90
		private static bool NeedsUpgradeImpl(ReportProcessingFlags flags)
		{
			return flags == ReportProcessingFlags.NotSet;
		}

		// Token: 0x060054F0 RID: 21744 RVA: 0x00165898 File Offset: 0x00163A98
		internal static void HandleSubReportProcessingError(ErrorContext errorContext, Microsoft.ReportingServices.ReportIntermediateFormat.SubReport subReport, string instanceID, ErrorContext subReportErrorContext, Exception e)
		{
			if (e is ReportProcessing.DataCacheUnavailableException || e.InnerException is ReportProcessing.DataCacheUnavailableException)
			{
				throw e;
			}
			if (e is ItemNotFoundException)
			{
				if (Global.Tracer.TraceError)
				{
					Global.Tracer.Trace(TraceLevel.Error, "An error has occurred while processing a sub-report.  The report definition could not be retrieved. Details: {0}", new object[] { e.Message });
				}
			}
			else if (!(e is ProcessingAbortedException) && Global.Tracer.TraceError)
			{
				Global.Tracer.Trace(TraceLevel.Error, "An error has occurred while processing a sub-report. Details: {0} Stack trace:\r\n{1}", new object[] { e.Message, e.StackTrace });
			}
			if (subReportErrorContext == null)
			{
				errorContext.Register(ProcessingErrorCode.rsErrorExecutingSubreport, Severity.Warning, subReport.ObjectType, subReport.Name, instanceID, new string[] { e.Message });
				return;
			}
			if (e is RSException)
			{
				subReportErrorContext.Register((RSException)e, subReport.ObjectType);
			}
			errorContext.Register(ProcessingErrorCode.rsErrorExecutingSubreport, Severity.Warning, subReport.ObjectType, subReport.Name, instanceID, subReportErrorContext.Messages, new string[] { e.Message });
		}

		// Token: 0x060054F1 RID: 21745 RVA: 0x001659B0 File Offset: 0x00163BB0
		private ReportSnapshot ProcessReport(Microsoft.ReportingServices.ReportProcessing.Report report, Microsoft.ReportingServices.ReportProcessing.ProcessingContext pc, ReportProcessing.ProcessingContext context, out UserProfileState userProfileState)
		{
			CultureInfo cultureInfo = null;
			bool flag = this.HasUserSortFilter(report, 0U, context);
			if ((pc.InitialUserProfileState & UserProfileState.InQuery) > UserProfileState.None)
			{
				context.SaveSnapshotData = flag;
				context.StopSaveSnapshotDataOnError = !flag;
			}
			else if ((pc.InitialUserProfileState & UserProfileState.InReport) == UserProfileState.None)
			{
				context.SaveSnapshotData = report.ParametersNotUsedInQuery || flag;
				context.StopSaveSnapshotDataOnError = !flag;
			}
			if (pc.IsHistorySnapshot)
			{
				context.SaveSnapshotData = true;
				context.StopSaveSnapshotDataOnError = false;
			}
			userProfileState = UserProfileState.None;
			ReportSnapshot reportSnapshot2;
			try
			{
				ReportSnapshot reportSnapshot = new ReportSnapshot(report, pc.ReportContext.ItemName, pc.Parameters, pc.RequestUserName, context.ExecutionTime, pc.ReportContext.HostRootUri, pc.ReportContext.ParentPath, pc.UserLanguage.Name);
				cultureInfo = Thread.CurrentThread.CurrentCulture;
				ReportProcessing.Merge merge = new ReportProcessing.Merge(report, context);
				if (!context.SnapshotProcessing && !context.ProcessWithCachedData && merge.PrefetchData(pc.Parameters, false))
				{
					context.SnapshotProcessing = true;
					context.ResetForSubreportDataPrefetch = true;
				}
				reportSnapshot.ReportInstance = merge.Process(pc.Parameters, false);
				userProfileState = context.HasUserProfileState;
				ReportDrillthroughInfo drillthroughInfo = context.DrillthroughInfo;
				ReportProcessing.PageMergeInteractive pageMergeInteractive = new ReportProcessing.PageMergeInteractive();
				userProfileState |= pageMergeInteractive.Process(context.PageSectionContext.PageTextboxes, reportSnapshot, pc.ReportContext, pc.ReportContext.ItemName, pc.Parameters, context.ChunkManager, pc.CreateReportChunkCallback, pc.GetResourceCallback, context.ErrorContext, context.AllowUserProfileState, context.ReportRuntimeSetup, context.UniqueNameCounter, pc.DataProtection, ref drillthroughInfo);
				merge.CleanupDataChunk(userProfileState);
				SenderInformationHashtable senderInformationHashtable;
				ReceiverInformationHashtable receiverInformationHashtable;
				context.GetSenderAndReceiverInfo(out senderInformationHashtable, out receiverInformationHashtable);
				reportSnapshot.ShowHideSenderInfo = senderInformationHashtable;
				if (senderInformationHashtable != null || context.HasUserSortFilter)
				{
					reportSnapshot.HasShowHide = true;
				}
				reportSnapshot.ShowHideReceiverInfo = receiverInformationHashtable;
				if (context.QuickFind != null && context.QuickFind.Count > 0)
				{
					reportSnapshot.QuickFind = context.QuickFind;
				}
				else
				{
					reportSnapshot.QuickFind = null;
				}
				if (drillthroughInfo != null && drillthroughInfo.Count > 0)
				{
					reportSnapshot.DrillthroughInfo = drillthroughInfo;
				}
				else
				{
					reportSnapshot.DrillthroughInfo = null;
				}
				reportSnapshot.CreateNavigationActions(context.NavigationInfo);
				if (context.HasImageStreams || report.HasImageStreams)
				{
					reportSnapshot.HasImageStreams = true;
				}
				if (context.NewSortFilterEventInfo != null && context.NewSortFilterEventInfo.Count > 0)
				{
					reportSnapshot.SortFilterEventInfo = context.NewSortFilterEventInfo;
				}
				else
				{
					reportSnapshot.SortFilterEventInfo = null;
				}
				context.ChunkManager.PageSectionFlush(reportSnapshot);
				context.ChunkManager.FinalFlush();
				report.MainChunkSize = context.ChunkManager.TotalCount * 50L;
				reportSnapshot.Warnings = context.ErrorContext.Messages;
				reportSnapshot2 = reportSnapshot;
			}
			finally
			{
				if (cultureInfo != null)
				{
					Thread.CurrentThread.CurrentCulture = cultureInfo;
				}
				foreach (object obj in context.GlobalDataSourceInfo.Values)
				{
					ReportProcessing.DataSourceInfo dataSourceInfo = (ReportProcessing.DataSourceInfo)obj;
					if (dataSourceInfo.TransactionInfo != null)
					{
						if (dataSourceInfo.TransactionInfo.RollbackRequired)
						{
							if (Global.Tracer.TraceInfo)
							{
								Global.Tracer.Trace(TraceLevel.Info, "Data source '{0}': Rolling back transaction.", new object[] { dataSourceInfo.DataSourceName });
							}
							try
							{
								dataSourceInfo.TransactionInfo.Transaction.Rollback();
								goto IL_0399;
							}
							catch (Exception ex)
							{
								throw new ReportProcessingException(ErrorCode.rsErrorRollbackTransaction, ex, new object[] { dataSourceInfo.DataSourceName });
							}
						}
						if (Global.Tracer.TraceVerbose)
						{
							Global.Tracer.Trace(TraceLevel.Verbose, "Data source '{0}': Committing transaction.", new object[] { dataSourceInfo.DataSourceName });
						}
						try
						{
							dataSourceInfo.TransactionInfo.Transaction.Commit();
						}
						catch (Exception ex2)
						{
							throw new ReportProcessingException(ErrorCode.rsErrorCommitTransaction, ex2, new object[] { dataSourceInfo.DataSourceName });
						}
					}
					IL_0399:
					if (dataSourceInfo.Connection != null)
					{
						try
						{
							pc.CreateAndSetupDataExtensionFunction.CloseConnectionWithoutPool(dataSourceInfo.Connection);
						}
						catch (Exception ex3)
						{
							throw new ReportProcessingException(ErrorCode.rsErrorClosingConnection, ex3, new object[] { dataSourceInfo.DataSourceName });
						}
					}
				}
				if (context != null && context.ChunkManager != null)
				{
					context.ChunkManager.Close();
				}
				context.AbortInfo.Dispose();
				context.AbortInfo = null;
			}
			return reportSnapshot2;
		}

		// Token: 0x060054F2 RID: 21746 RVA: 0x00165E5C File Offset: 0x0016405C
		internal static ProcessingMessageList ProcessReportParameters(Microsoft.ReportingServices.ReportProcessing.Report report, ReportProcessing.ProcessingContext mergeContext, ParameterInfoCollection parameters)
		{
			return new LegacyProcessReportParameters(report, (ReportProcessing.ReportProcessingContext)mergeContext).Process(parameters);
		}

		// Token: 0x060054F3 RID: 21747 RVA: 0x00165E70 File Offset: 0x00164070
		internal static ProcessingMessageList ProcessReportParameters(Microsoft.ReportingServices.ReportIntermediateFormat.Report report, OnDemandProcessingContext context, ParameterInfoCollection parameters)
		{
			return new OnDemandProcessReportParameters(report, context).Process(parameters);
		}

		// Token: 0x060054F4 RID: 21748 RVA: 0x00165E7F File Offset: 0x0016407F
		private static Microsoft.ReportingServices.ReportIntermediateFormat.Report DeserializeKatmaiReport(IChunkFactory chunkFactory)
		{
			return ReportProcessing.DeserializeKatmaiReport(chunkFactory, "CompiledDefinition", false, null, null, null);
		}

		// Token: 0x060054F5 RID: 21749 RVA: 0x00165E90 File Offset: 0x00164090
		internal static Microsoft.ReportingServices.ReportIntermediateFormat.Report DeserializeKatmaiReport(IChunkFactory chunkFactory, bool keepReferences, GlobalIDOwnerCollection globalIDOwnerCollection)
		{
			return ReportProcessing.DeserializeKatmaiReport(chunkFactory, "CompiledDefinition", keepReferences, globalIDOwnerCollection, null, null);
		}

		// Token: 0x060054F6 RID: 21750 RVA: 0x00165EA4 File Offset: 0x001640A4
		private static Microsoft.ReportingServices.ReportIntermediateFormat.Report DeserializeKatmaiReport(IChunkFactory chunkFactory, string chunkName, bool keepReferences, GlobalIDOwnerCollection globalIDOwnerCollection, IDOwner parentIDOwner, Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem parentReportItem)
		{
			Stream stream = null;
			Microsoft.ReportingServices.ReportIntermediateFormat.Report report;
			try
			{
				string text;
				stream = chunkFactory.GetChunk(chunkName, ReportProcessing.ReportChunkTypes.CompiledDefinition, ChunkMode.Open, out text);
				report = ChunkManager.DeserializeReport(keepReferences, globalIDOwnerCollection, parentIDOwner, parentReportItem, stream);
			}
			finally
			{
				if (stream != null)
				{
					stream.Close();
				}
			}
			return report;
		}

		// Token: 0x060054F7 RID: 21751 RVA: 0x00165EEC File Offset: 0x001640EC
		private static Microsoft.ReportingServices.ReportProcessing.Report DeserializeReport(ReportProcessing.GetReportChunk getChunkCallback)
		{
			return ReportProcessing.DeserializeReport(getChunkCallback, null);
		}

		// Token: 0x060054F8 RID: 21752 RVA: 0x00165EF5 File Offset: 0x001640F5
		internal static Microsoft.ReportingServices.ReportProcessing.Report DeserializeReport(ReportProcessing.GetReportChunk getChunkCallback, out Hashtable definitionObjects)
		{
			return ReportProcessing.DeserializeReport(getChunkCallback, null, out definitionObjects);
		}

		// Token: 0x060054F9 RID: 21753 RVA: 0x00165F00 File Offset: 0x00164100
		private static Microsoft.ReportingServices.ReportProcessing.Report DeserializeReport(ReportProcessing.GetReportChunk getChunkCallback, Microsoft.ReportingServices.ReportProcessing.ReportItem parent)
		{
			Hashtable hashtable = null;
			return ReportProcessing.DeserializeReport(getChunkCallback, parent, out hashtable);
		}

		// Token: 0x060054FA RID: 21754 RVA: 0x00165F18 File Offset: 0x00164118
		private static Microsoft.ReportingServices.ReportProcessing.Report DeserializeReport(ReportProcessing.GetReportChunk getChunkCallback, Microsoft.ReportingServices.ReportProcessing.ReportItem parent, out Hashtable definitionObjects)
		{
			Stream stream = null;
			Microsoft.ReportingServices.ReportProcessing.Report report2;
			try
			{
				string text;
				stream = getChunkCallback("CompiledDefinition", ReportProcessing.ReportChunkTypes.Main, out text);
				Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader intermediateFormatReader = new Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader(stream);
				Microsoft.ReportingServices.ReportProcessing.Report report = intermediateFormatReader.ReadReport(parent);
				definitionObjects = intermediateFormatReader.DefinitionObjects;
				if (report.IntermediateFormatVersion.IsOldVersion)
				{
					Upgrader.UpgradeToCurrent(report);
					Upgrader.UpgradeDatasetIDs(report);
				}
				report2 = report;
			}
			finally
			{
				if (stream != null)
				{
					stream.Close();
				}
			}
			return report2;
		}

		// Token: 0x060054FB RID: 21755 RVA: 0x00165F88 File Offset: 0x00164188
		private static Microsoft.ReportingServices.ReportProcessing.Report DeserializeReportFromSnapshot(ReportProcessing.GetReportChunk getChunkCallback, out DateTime executionTime)
		{
			Hashtable hashtable;
			IntermediateFormatVersion intermediateFormatVersion;
			return ReportProcessing.DeserializeReportFromSnapshot(getChunkCallback, out executionTime, out hashtable, out intermediateFormatVersion);
		}

		// Token: 0x060054FC RID: 21756 RVA: 0x00165FA0 File Offset: 0x001641A0
		internal static Microsoft.ReportingServices.ReportProcessing.Report DeserializeReportFromSnapshot(ReportProcessing.GetReportChunk getChunkCallback, out DateTime executionTime, out Hashtable definitionObjects)
		{
			IntermediateFormatVersion intermediateFormatVersion;
			return ReportProcessing.DeserializeReportFromSnapshot(getChunkCallback, out executionTime, out definitionObjects, out intermediateFormatVersion);
		}

		// Token: 0x060054FD RID: 21757 RVA: 0x00165FB8 File Offset: 0x001641B8
		private static Microsoft.ReportingServices.ReportProcessing.Report DeserializeReportFromSnapshot(ReportProcessing.GetReportChunk getChunkCallback, out DateTime executionTime, out Hashtable definitionObjects, out IntermediateFormatVersion intermediateFormatVersion)
		{
			Stream stream = null;
			Microsoft.ReportingServices.ReportProcessing.Report report2;
			try
			{
				string text;
				stream = getChunkCallback("Main", ReportProcessing.ReportChunkTypes.Main, out text);
				Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader intermediateFormatReader = new Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader(stream);
				Microsoft.ReportingServices.ReportProcessing.Report report = intermediateFormatReader.ReadReportFromSnapshot(out executionTime);
				report.MainChunkSize = stream.Length;
				definitionObjects = intermediateFormatReader.DefinitionObjects;
				intermediateFormatVersion = intermediateFormatReader.IntermediateFormatVersion;
				if (report.IntermediateFormatVersion.IsOldVersion)
				{
					Upgrader.UpgradeToCurrent(report);
					Upgrader.UpgradeDatasetIDs(report);
				}
				report2 = report;
			}
			finally
			{
				if (stream != null)
				{
					stream.Close();
				}
			}
			return report2;
		}

		// Token: 0x060054FE RID: 21758 RVA: 0x0016603C File Offset: 0x0016423C
		private static void SerializeReport(Microsoft.ReportingServices.ReportProcessing.Report report, ReportProcessing.CreateReportChunk createChunkCallback)
		{
			Stream stream = null;
			try
			{
				stream = createChunkCallback("CompiledDefinition", ReportProcessing.ReportChunkTypes.Main, null);
				new Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatWriter(stream, true).WriteReport(report);
			}
			finally
			{
				if (stream != null)
				{
					stream.Close();
				}
			}
		}

		// Token: 0x060054FF RID: 21759 RVA: 0x00166084 File Offset: 0x00164284
		private static void SerializeReport(Microsoft.ReportingServices.ReportIntermediateFormat.Report report, IChunkFactory chunkFactory, IConfiguration configuration)
		{
			Stream stream = null;
			try
			{
				stream = chunkFactory.CreateChunk("CompiledDefinition", ReportProcessing.ReportChunkTypes.CompiledDefinition, null);
				ChunkManager.SerializeReport(report, stream, configuration);
			}
			finally
			{
				if (stream != null)
				{
					stream.Close();
				}
			}
		}

		// Token: 0x06005500 RID: 21760 RVA: 0x001660C8 File Offset: 0x001642C8
		internal static ReportSnapshot DeserializeReportSnapshot(ReportProcessing.GetReportChunk getChunkCallback, ReportProcessing.CreateReportChunk createChunkCallback, IGetResource getResourceCallback, Microsoft.ReportingServices.ReportProcessing.RenderingContext renderingContext, IDataProtection dataProtection, out Hashtable instanceObjects, out Hashtable definitionObjects, out Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader.State declarationsRead, out bool isOldSnapshot)
		{
			Stream stream = null;
			ChunkManager.RenderingChunkManager renderingChunkManager = null;
			isOldSnapshot = false;
			ReportSnapshot reportSnapshot2;
			try
			{
				string text;
				stream = getChunkCallback("Main", ReportProcessing.ReportChunkTypes.Main, out text);
				Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader intermediateFormatReader = new Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader(stream);
				ReportSnapshot reportSnapshot = intermediateFormatReader.ReadReportSnapshot();
				reportSnapshot.Report.MainChunkSize = stream.Length;
				instanceObjects = intermediateFormatReader.InstanceObjects;
				declarationsRead = intermediateFormatReader.ReaderState;
				definitionObjects = intermediateFormatReader.DefinitionObjects;
				renderingChunkManager = new ChunkManager.RenderingChunkManager(getChunkCallback, instanceObjects, definitionObjects, declarationsRead, reportSnapshot.Report.IntermediateFormatVersion);
				if (reportSnapshot.Report.IntermediateFormatVersion.IsOldVersion)
				{
					Upgrader.UpgradeToCurrent(reportSnapshot, renderingChunkManager, createChunkCallback);
					Upgrader.UpgradeDatasetIDs(reportSnapshot.Report);
					isOldSnapshot = true;
				}
				Upgrader.UpgradeToPageSectionsChunk(reportSnapshot, renderingContext.ReportContext, renderingChunkManager, createChunkCallback, getResourceCallback, renderingContext, dataProtection);
				reportSnapshot2 = reportSnapshot;
			}
			finally
			{
				if (stream != null)
				{
					stream.Close();
				}
				if (renderingChunkManager != null)
				{
					renderingChunkManager.Close();
				}
			}
			return reportSnapshot2;
		}

		// Token: 0x06005501 RID: 21761 RVA: 0x001661B0 File Offset: 0x001643B0
		internal static int CompareTo(object x, object y, CompareInfo compareInfo, CompareOptions compareOptions)
		{
			bool flag;
			return ReportProcessing.CompareTo(x, y, false, compareInfo, compareOptions, true, false, out flag);
		}

		// Token: 0x06005502 RID: 21762 RVA: 0x001661CC File Offset: 0x001643CC
		internal static int CompareTo(object x, object y, bool nullsAsBlanks, CompareInfo compareInfo, CompareOptions compareOptions, bool throwExceptionOnComparisonFailure, bool extendedTypeComparisons, out bool validComparisonResult)
		{
			validComparisonResult = true;
			if (x == null && y == null)
			{
				return 0;
			}
			if (x is string && y is string)
			{
				return compareInfo.Compare((string)x, (string)y, compareOptions);
			}
			if (x is int && y is int)
			{
				return ((int)x).CompareTo(y);
			}
			bool flag;
			DataAggregate.DataTypeCode typeCode = DataAggregate.GetTypeCode(x, false, out flag);
			bool flag2;
			DataAggregate.DataTypeCode typeCode2 = DataAggregate.GetTypeCode(y, false, out flag2);
			if (!flag || !flag2)
			{
				Type type = null;
				if (x is SqlGeography || x is SqlGeometry)
				{
					type = x.GetType();
				}
				else if (y is SqlGeography || y is SqlGeometry)
				{
					type = y.GetType();
				}
				if (!(type != null))
				{
					return ReportProcessing.CompareWithIComparable(x, y, throwExceptionOnComparisonFailure, out validComparisonResult);
				}
				if (throwExceptionOnComparisonFailure)
				{
					throw new ReportProcessingException_SpatialTypeComparisonError(type.ToString());
				}
				validComparisonResult = false;
				return -1;
			}
			else
			{
				if (typeCode == typeCode2)
				{
					IComparable comparable = x as IComparable;
					if (comparable != null)
					{
						return comparable.CompareTo(y);
					}
				}
				DataAggregate.DataTypeCode dataTypeCode = DataTypeUtility.CommonNumericDenominator(typeCode, typeCode2);
				if (dataTypeCode != DataAggregate.DataTypeCode.Null)
				{
					Type numericTypeFromDataTypeCode = DataTypeUtility.GetNumericTypeFromDataTypeCode(dataTypeCode);
					if (DataAggregate.DataTypeCode.Int32 == dataTypeCode)
					{
						int num = (int)Convert.ChangeType(x, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						int num2 = (int)Convert.ChangeType(y, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						return num.CompareTo(num2);
					}
					if (DataAggregate.DataTypeCode.Double == dataTypeCode)
					{
						double num3 = (double)Convert.ChangeType(x, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						double num4 = (double)Convert.ChangeType(y, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						return num3.CompareTo(num4);
					}
					if (DataAggregate.DataTypeCode.Decimal == dataTypeCode)
					{
						decimal num5 = (decimal)Convert.ChangeType(x, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						decimal num6 = (decimal)Convert.ChangeType(y, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						return num5.CompareTo(num6);
					}
					if (DataAggregate.DataTypeCode.UInt32 == dataTypeCode)
					{
						uint num7 = (uint)Convert.ChangeType(x, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						uint num8 = (uint)Convert.ChangeType(y, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						return num7.CompareTo(num8);
					}
					if (DataAggregate.DataTypeCode.Int64 == dataTypeCode)
					{
						long num9 = (long)Convert.ChangeType(x, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						long num10 = (long)Convert.ChangeType(y, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						return num9.CompareTo(num10);
					}
					if (DataAggregate.DataTypeCode.UInt64 == dataTypeCode)
					{
						ulong num11 = (ulong)Convert.ChangeType(x, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						ulong num12 = (ulong)Convert.ChangeType(y, numericTypeFromDataTypeCode, CultureInfo.CurrentCulture);
						return num11.CompareTo(num12);
					}
				}
				if (typeCode == DataAggregate.DataTypeCode.Null && typeCode2 == DataAggregate.DataTypeCode.Null)
				{
					return 0;
				}
				if (typeCode == DataAggregate.DataTypeCode.Null)
				{
					if (nullsAsBlanks && DataTypeUtility.IsNumericLessThanZero(y, typeCode2))
					{
						return 1;
					}
					return -1;
				}
				else
				{
					if (typeCode2 != DataAggregate.DataTypeCode.Null)
					{
						if (extendedTypeComparisons)
						{
							if (typeCode == DataAggregate.DataTypeCode.Int64 && typeCode2 == DataAggregate.DataTypeCode.Double)
							{
								return ReportProcessing.CompareTo((long)x, (double)y);
							}
							if (typeCode == DataAggregate.DataTypeCode.Double && typeCode2 == DataAggregate.DataTypeCode.Int64)
							{
								return ReportProcessing.CompareTo((long)y, (double)x) * -1;
							}
							if (typeCode == DataAggregate.DataTypeCode.Decimal && typeCode2 == DataAggregate.DataTypeCode.Double)
							{
								return ReportProcessing.CompareTo((decimal)x, (double)y);
							}
							if (typeCode == DataAggregate.DataTypeCode.Double && typeCode2 == DataAggregate.DataTypeCode.Decimal)
							{
								return ReportProcessing.CompareTo((decimal)y, (double)x) * -1;
							}
						}
						return ReportProcessing.CompareWithIComparable(x, y, throwExceptionOnComparisonFailure, out validComparisonResult);
					}
					if (nullsAsBlanks && DataTypeUtility.IsNumericLessThanZero(x, typeCode))
					{
						return -1;
					}
					return 1;
				}
			}
		}

		// Token: 0x06005503 RID: 21763 RVA: 0x001664D8 File Offset: 0x001646D8
		private static int CompareTo(long longVal, double doubleVal)
		{
			if (doubleVal > 9.223372036854776E+18)
			{
				return -1;
			}
			if (doubleVal < -9.223372036854776E+18)
			{
				return 1;
			}
			if (!double.IsNaN(doubleVal))
			{
				long num = (long)doubleVal;
				int num2 = longVal.CompareTo(num);
				if (num2 == 0)
				{
					num2 = ((double)num).CompareTo(doubleVal);
				}
				return num2;
			}
			if (longVal < 0L)
			{
				return -1;
			}
			return 1;
		}

		// Token: 0x06005504 RID: 21764 RVA: 0x00166530 File Offset: 0x00164730
		private static int CompareTo(decimal decimalVal, double doubleVal)
		{
			if (doubleVal > 7.922816251426434E+28)
			{
				return -1;
			}
			if (doubleVal < -7.922816251426434E+28)
			{
				return 1;
			}
			if (!double.IsNaN(doubleVal))
			{
				decimal num = (decimal)doubleVal;
				int num2 = decimalVal.CompareTo(num);
				if (num2 == 0)
				{
					num2 = ((double)num).CompareTo(doubleVal);
				}
				return num2;
			}
			if (decimalVal < 0m)
			{
				return -1;
			}
			return 1;
		}

		// Token: 0x06005505 RID: 21765 RVA: 0x00166598 File Offset: 0x00164798
		private static int CompareWithIComparable(object x, object y, bool throwExceptionOnComparisonFailure, out bool validComparisonResult)
		{
			validComparisonResult = true;
			try
			{
				if (x is IComparable)
				{
					return ((IComparable)x).CompareTo(y);
				}
				if (y is IComparable)
				{
					return -((IComparable)y).CompareTo(x);
				}
			}
			catch (Exception ex)
			{
				if (AsynchronousExceptionDetection.IsStoppingException(ex))
				{
					throw;
				}
				validComparisonResult = false;
				if (throwExceptionOnComparisonFailure)
				{
					throw new ReportProcessingException_ComparisonError(x.GetType().ToString(), y.GetType().ToString());
				}
			}
			return -1;
		}

		// Token: 0x06005506 RID: 21766 RVA: 0x0016661C File Offset: 0x0016481C
		internal static int CompareWithInvariantCulture(string x, string y, bool ignoreCase)
		{
			return string.Compare(x, y, ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal);
		}

		// Token: 0x06005507 RID: 21767 RVA: 0x0016662C File Offset: 0x0016482C
		private static void GetInteractivePageHeaderFooter(int pageNumber, Microsoft.ReportingServices.ReportRendering.Report report, out Microsoft.ReportingServices.ReportRendering.PageSection pageHeader, out Microsoft.ReportingServices.ReportRendering.PageSection pageFooter)
		{
			if (report == null)
			{
				throw new ArgumentNullException("report");
			}
			pageHeader = null;
			pageFooter = null;
			pageNumber--;
			if (pageNumber < 0 || pageNumber >= report.NumberOfPages)
			{
				return;
			}
			try
			{
				Global.Tracer.Assert(report.RenderingContext != null && report.RenderingContext.ReportSnapshot != null, "Invalid rendering context");
				ReportSnapshot reportSnapshot = report.RenderingContext.ReportSnapshot;
				int num;
				Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader pageSectionReader = report.RenderingContext.ChunkManager.GetPageSectionReader(pageNumber, out num);
				if (pageSectionReader != null)
				{
					List<PageSectionInstance> list = pageSectionReader.ReadPageSections(pageNumber, num, report.ReportDef.PageHeader, report.ReportDef.PageFooter);
					report.RenderingContext.ChunkManager.SetPageSectionReaderState(pageSectionReader.ReaderState, pageNumber);
					if (list != null)
					{
						Global.Tracer.Assert(2 == list.Count, "Invalid persisted page section structure");
						pageHeader = ReportProcessing.GetRenderingPageSection(list[0], report, pageNumber, true);
						pageFooter = ReportProcessing.GetRenderingPageSection(list[1], report, pageNumber, false);
					}
				}
			}
			catch (RSException)
			{
				throw;
			}
			catch (Exception ex)
			{
				throw new ReportProcessingException(ex, null);
			}
		}

		// Token: 0x06005508 RID: 21768 RVA: 0x00166748 File Offset: 0x00164948
		private static Microsoft.ReportingServices.ReportRendering.PageSection GetRenderingPageSection(PageSectionInstance instance, Microsoft.ReportingServices.ReportRendering.Report report, int pageNumber, bool isHeader)
		{
			Microsoft.ReportingServices.ReportRendering.PageSection pageSection = null;
			if (instance != null)
			{
				string text = pageNumber.ToString(CultureInfo.InvariantCulture) + (isHeader ? "ph" : "pf");
				Microsoft.ReportingServices.ReportRendering.RenderingContext renderingContext = new Microsoft.ReportingServices.ReportRendering.RenderingContext(report.RenderingContext, text);
				pageSection = new Microsoft.ReportingServices.ReportRendering.PageSection(text, isHeader ? report.ReportDef.PageHeader : report.ReportDef.PageFooter, instance, report, renderingContext, false);
			}
			return pageSection;
		}

		// Token: 0x06005509 RID: 21769 RVA: 0x001667B0 File Offset: 0x001649B0
		internal static void EvaluateHeaderFooterExpressions(int pageNumber, int totalPages, Microsoft.ReportingServices.ReportRendering.Report report, PageReportItems pageReportItems, out Microsoft.ReportingServices.ReportRendering.PageSection pageHeader, out Microsoft.ReportingServices.ReportRendering.PageSection pageFooter)
		{
			if (report == null)
			{
				throw new ArgumentNullException("report");
			}
			if (pageReportItems == null)
			{
				ReportProcessing.GetInteractivePageHeaderFooter(pageNumber, report, out pageHeader, out pageFooter);
				return;
			}
			CultureInfo cultureInfo = null;
			ProcessingErrorContext processingErrorContext = new ProcessingErrorContext();
			try
			{
				cultureInfo = Thread.CurrentThread.CurrentCulture;
				new ReportProcessing.PageMerge().Process(pageNumber, totalPages, report, pageReportItems, processingErrorContext, out pageHeader, out pageFooter);
			}
			catch (RSException)
			{
				throw;
			}
			catch (Exception ex)
			{
				throw new ReportProcessingException(ex, processingErrorContext.Messages);
			}
			finally
			{
				if (cultureInfo != null)
				{
					Thread.CurrentThread.CurrentCulture = cultureInfo;
				}
			}
		}

		// Token: 0x0600550A RID: 21770 RVA: 0x00166848 File Offset: 0x00164A48
		internal static void CheckAndConvertDataSources(ICatalogItemContext itemContext, DataSourceInfoCollection dataSources, DataSetInfoCollection dataSetReferences, bool checkIfUsable, ServerDataSourceSettings serverDatasourceSettings, RuntimeDataSourceInfoCollection allDataSources, RuntimeDataSetInfoCollection allDataSetReferences)
		{
			if (dataSetReferences != null)
			{
				foreach (DataSetInfo dataSetInfo in dataSetReferences)
				{
					if (checkIfUsable && !dataSetInfo.IsValidReference())
					{
						throw new InvalidDataSetReferenceException(dataSetInfo.DataSetName);
					}
					allDataSetReferences.Add(dataSetInfo, itemContext);
				}
			}
			if (dataSources != null)
			{
				foreach (object obj in dataSources)
				{
					Microsoft.ReportingServices.DataExtensions.DataSourceInfo dataSourceInfo = (Microsoft.ReportingServices.DataExtensions.DataSourceInfo)obj;
					if (checkIfUsable)
					{
						dataSourceInfo.ThrowIfNotUsable(serverDatasourceSettings);
					}
					if (allDataSources != null)
					{
						allDataSources.Add(dataSourceInfo, itemContext);
					}
				}
			}
		}

		// Token: 0x0600550B RID: 21771 RVA: 0x00166908 File Offset: 0x00164B08
		private static void TraceError(Exception e)
		{
			if (Global.Tracer.TraceError)
			{
				Global.Tracer.Trace(TraceLevel.Error, "An error has occurred while retrieving datasources for a sub-report. The report definition could not be retrieved. Details: {0}", new object[] { e.Message });
			}
		}

		// Token: 0x0600550C RID: 21772 RVA: 0x00166938 File Offset: 0x00164B38
		private static void CheckCredentialsOdp(Microsoft.ReportingServices.ReportIntermediateFormat.Report report, DataSourceInfoCollection dataSources, DataSetInfoCollection dataSetReferences, ICatalogItemContext reportContext, ReportProcessing.OnDemandSubReportDataSourcesCallback subReportCallback, RuntimeDataSourceInfoCollection allDataSources, RuntimeDataSetInfoCollection allDataSetReferences, int subReportLevel, bool checkIfUsable, ServerDataSourceSettings serverDatasourceSettings, Hashtable subReportNames)
		{
			if ((long)subReportLevel <= 20L)
			{
				ReportProcessing.CheckAndConvertDataSources(reportContext, dataSources, dataSetReferences, checkIfUsable, serverDatasourceSettings, allDataSources, allDataSetReferences);
				if (report.SubReports != null)
				{
					DataSourceInfoCollection dataSourceInfoCollection = null;
					DataSetInfoCollection dataSetInfoCollection = null;
					for (int i = 0; i < report.SubReports.Count; i++)
					{
						string reportName = report.SubReports[i].ReportName;
						if (!subReportNames.ContainsKey(reportName))
						{
							subReportNames.Add(reportName, null);
							try
							{
								ICatalogItemContext catalogItemContext;
								IChunkFactory chunkFactory;
								subReportCallback(reportContext, reportName, new ReportProcessing.NeedsUpgrade(ReportProcessing.NeedsUpgradeImpl), out catalogItemContext, out chunkFactory, out dataSourceInfoCollection, out dataSetInfoCollection);
								if (chunkFactory != null && ReportProcessing.ContainsFlag(chunkFactory.ReportProcessingFlags, ReportProcessingFlags.OnDemandEngine))
								{
									report.SubReports[i].Report = ReportProcessing.DeserializeKatmaiReport(chunkFactory);
									ReportProcessing.CheckCredentialsOdp(report.SubReports[i].Report, dataSourceInfoCollection, dataSetInfoCollection, catalogItemContext, subReportCallback, allDataSources, allDataSetReferences, subReportLevel + 1, checkIfUsable, serverDatasourceSettings, subReportNames);
								}
							}
							catch (ReportProcessingException ex)
							{
								ReportProcessing.TraceError(ex);
							}
							catch (ReportCatalogException ex2)
							{
								ReportProcessing.TraceError(ex2);
								if (ex2.Code == ErrorCode.rsReportServerDatabaseUnavailable)
								{
									throw;
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x0600550D RID: 21773 RVA: 0x00166A68 File Offset: 0x00164C68
		private static void CheckCredentials(Microsoft.ReportingServices.ReportProcessing.Report report, DataSourceInfoCollection dataSources, ICatalogItemContext reportContext, ReportProcessing.SubReportDataSourcesCallback subReportCallback, RuntimeDataSourceInfoCollection allDataSources, int subReportLevel, bool checkIfUsable, ServerDataSourceSettings serverDatasourceSettings, Hashtable subReportNames)
		{
			if ((long)subReportLevel <= 20L)
			{
				ReportProcessing.CheckAndConvertDataSources(reportContext, dataSources, null, checkIfUsable, serverDatasourceSettings, allDataSources, null);
				if (report.SubReports != null)
				{
					DataSourceInfoCollection dataSourceInfoCollection = null;
					for (int i = 0; i < report.SubReports.Count; i++)
					{
						string reportPath = report.SubReports[i].ReportPath;
						if (!subReportNames.ContainsKey(reportPath))
						{
							try
							{
								ICatalogItemContext catalogItemContext;
								ReportProcessing.GetReportChunk getReportChunk;
								subReportCallback(reportContext, reportPath, out catalogItemContext, out getReportChunk, out dataSourceInfoCollection);
								if (getReportChunk != null)
								{
									subReportNames.Add(reportPath, null);
									ReportProcessing.CheckCredentials(ReportProcessing.DeserializeReport(getReportChunk), dataSourceInfoCollection, catalogItemContext, subReportCallback, allDataSources, subReportLevel + 1, checkIfUsable, serverDatasourceSettings, subReportNames);
								}
							}
							catch (VersionMismatchException)
							{
								throw;
							}
							catch (ReportProcessingException ex)
							{
								ReportProcessing.TraceError(ex);
							}
							catch (ReportCatalogException ex2)
							{
								ReportProcessing.TraceError(ex2);
								if (ex2.Code == ErrorCode.rsReportServerDatabaseUnavailable)
								{
									throw;
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x17001F1F RID: 7967
		// (get) Token: 0x0600550E RID: 21774 RVA: 0x00166B54 File Offset: 0x00164D54
		// (set) Token: 0x0600550F RID: 21775 RVA: 0x00166B5C File Offset: 0x00164D5C
		public IConfiguration Configuration
		{
			get
			{
				return this.m_configuration;
			}
			internal set
			{
				this.m_configuration = value;
			}
		}

		// Token: 0x06005510 RID: 21776 RVA: 0x00166B68 File Offset: 0x00164D68
		public PublishingResult CreateIntermediateFormat(PublishingContext reportPublishingContext)
		{
			if (reportPublishingContext.DataProtection == null)
			{
				throw new ArgumentNullException("reportPublishingContext.DataProtection");
			}
			Global.Tracer.Assert(reportPublishingContext != null && reportPublishingContext.PublishingContextKind != PublishingContextKind.SharedDataSet, "Publishing a report must provide a correct report publishing context");
			PublishingErrorContext publishingErrorContext = new PublishingErrorContext();
			PublishingResult publishingResult;
			try
			{
				EmbeddedDataSetInfoCollection embeddedDataSetInfoCollection = null;
				DataSetInfoCollection dataSetInfoCollection = null;
				ArrayList arrayList = null;
				byte[] array = null;
				int? num = null;
				ExpressionUsage expressionUsage = null;
				string text = null;
				string text2 = null;
				AuthoringMetadata authoringMetadata = null;
				bool flag = false;
				bool flag2 = false;
				string text3 = null;
				double num2 = 0.0;
				double num3 = 0.0;
				double num4 = 0.0;
				double num5 = 0.0;
				double num6 = 0.0;
				double num7 = 0.0;
				string text4;
				string text5;
				ParameterInfoCollection parameterInfoCollection;
				DataSourceInfoCollection dataSourceInfoCollection;
				UserLocationFlags userLocationFlags;
				bool flag3;
				bool flag4;
				try
				{
					Microsoft.ReportingServices.ReportIntermediateFormat.Report report = this.CompileOdpReport(reportPublishingContext, publishingErrorContext, out text4, out text5, out parameterInfoCollection, out dataSourceInfoCollection, out embeddedDataSetInfoCollection, out dataSetInfoCollection, out userLocationFlags, out arrayList, out flag3, out flag4, out array, out expressionUsage, out text, out text2, out authoringMetadata, out flag, out flag2, out text3, out num);
					Global.Tracer.Assert(report.ReportSections != null && report.ReportSections.Count > 0, "Report should have at least one section.");
					Microsoft.ReportingServices.ReportIntermediateFormat.ReportSection reportSection = report.ReportSections[0];
					num2 = reportSection.Page.PageHeightValue;
					num3 = reportSection.Page.PageWidthValue;
					num4 = reportSection.Page.TopMarginValue;
					num5 = reportSection.Page.BottomMarginValue;
					num6 = reportSection.Page.LeftMarginValue;
					num7 = reportSection.Page.RightMarginValue;
					reportPublishingContext.ProcessingFlags = ReportProcessingFlags.OnDemandEngine;
				}
				catch (CRI2005UpgradeException)
				{
					Microsoft.ReportingServices.ReportProcessing.Report report2 = this.CompileYukonReport(reportPublishingContext.CatalogContext, reportPublishingContext.Definition, new ReportProcessing.CreateReportChunk(reportPublishingContext.CreateChunkFactory.CreateChunk), reportPublishingContext.CheckDataSourceCallback, reportPublishingContext.ResolveTemporaryDataSourceCallback, reportPublishingContext.OriginalDataSources, publishingErrorContext, reportPublishingContext.CompilationTempAppDomain, reportPublishingContext.GenerateExpressionHostWithRefusedPermissions, reportPublishingContext.DataProtection, out text4, out text5, out parameterInfoCollection, out dataSourceInfoCollection, out userLocationFlags, out arrayList, out flag3, out flag4);
					num2 = report2.InteractiveHeightValue;
					num3 = report2.InteractiveWidthValue;
					num4 = report2.TopMarginValue;
					num5 = report2.BottomMarginValue;
					num6 = report2.LeftMarginValue;
					num7 = report2.RightMarginValue;
					reportPublishingContext.ProcessingFlags = ReportProcessingFlags.YukonEngine;
				}
				publishingResult = new PublishingResult(text4, text5, parameterInfoCollection, dataSourceInfoCollection, embeddedDataSetInfoCollection ?? new EmbeddedDataSetInfoCollection(), dataSetInfoCollection ?? new DataSetInfoCollection(), publishingErrorContext.Messages, userLocationFlags, num2, num3, num4, num5, num6, num7, arrayList, flag3, flag4, reportPublishingContext.ProcessingFlags, array, expressionUsage, text, text2, authoringMetadata, flag, flag2, text3, num);
			}
			catch (RSException)
			{
				throw;
			}
			catch (Exception ex)
			{
				ProcessingMessageList processingMessageList;
				if (publishingErrorContext == null)
				{
					processingMessageList = new ProcessingMessageList();
				}
				else
				{
					processingMessageList = publishingErrorContext.Messages;
				}
				throw new ReportProcessingException(ex, processingMessageList);
			}
			return publishingResult;
		}

		// Token: 0x06005511 RID: 21777 RVA: 0x00166E30 File Offset: 0x00165030
		private Microsoft.ReportingServices.ReportIntermediateFormat.Report CompileOdpReport(PublishingContext reportPublishingContext, PublishingErrorContext errorContext, out string reportDescription, out string reportLanguage, out ParameterInfoCollection parameters, out DataSourceInfoCollection dataSources, out EmbeddedDataSetInfoCollection embeddedDataSets, out DataSetInfoCollection sharedDataSetReferences, out UserLocationFlags userReferenceLocation, out ArrayList dataSetsName, out bool hasExternalImages, out bool hasHyperlinks, out byte[] dataSetsHash, out ExpressionUsage expressionUsage, out string webAuthoringVersion, out string defaultView, out AuthoringMetadata authoringMetadata, out bool hasSubReports, out bool hasDrillthroughs, out string rdlReportLanguage, out int? customCodeSize)
		{
			ReportUpgradeStrategy reportUpgradeStrategy;
			if (reportPublishingContext.IsRdlx)
			{
				reportUpgradeStrategy = new NoOpUpgradeStrategy();
			}
			else
			{
				reportUpgradeStrategy = new RdlObjectModelUpgradeStrategy(!reportPublishingContext.IsInternalRepublish, !reportPublishingContext.IsRdlSandboxingEnabled);
			}
			Microsoft.ReportingServices.ReportIntermediateFormat.Report report = new ReportPublishing(reportPublishingContext, errorContext, reportUpgradeStrategy).CreateIntermediateFormat(reportPublishingContext.Definition, out reportDescription, out reportLanguage, out parameters, out dataSources, out embeddedDataSets, out sharedDataSetReferences, out userReferenceLocation, out dataSetsName, out hasExternalImages, out hasHyperlinks, out dataSetsHash, out expressionUsage, out webAuthoringVersion, out defaultView, out authoringMetadata, out hasSubReports, out hasDrillthroughs, out rdlReportLanguage, out customCodeSize);
			if (reportPublishingContext.CreateChunkFactory != null)
			{
				ReportProcessing.SerializeReport(report, reportPublishingContext.CreateChunkFactory, this.m_configuration);
			}
			return report;
		}

		// Token: 0x06005512 RID: 21778 RVA: 0x00166EBC File Offset: 0x001650BC
		public ProcessingMessageList ProcessDataSetParameters(DataSetContext dc, DataSetDefinition dataSetDefinition)
		{
			if (dc == null)
			{
				throw new ArgumentNullException("dc");
			}
			if (dataSetDefinition == null)
			{
				throw new ArgumentNullException("dataSetDefinition");
			}
			OnDemandProcessingContext onDemandProcessingContext = this.CreateODPContextForSharedDataSet(dc, dataSetDefinition);
			CultureInfo cultureInfo = null;
			try
			{
				if (dc.Culture != null)
				{
					cultureInfo = Thread.CurrentThread.CurrentCulture;
					Thread.CurrentThread.CurrentCulture = Localization.ClientPrimaryCulture;
				}
				ReportProcessing.ProcessDataSetParameters(onDemandProcessingContext, dc, dataSetDefinition);
			}
			finally
			{
				ReportProcessing.FinallyBlockForSharedDataSetProcessing(onDemandProcessingContext, dc, cultureInfo);
			}
			return onDemandProcessingContext.ErrorContext.Messages;
		}

		// Token: 0x06005513 RID: 21779 RVA: 0x00166F40 File Offset: 0x00165140
		public DataSetResult ProcessSharedDataSet(DataSetContext dc, DataSetDefinition dataSetDefinition)
		{
			if (dc == null)
			{
				throw new ArgumentNullException("dc");
			}
			if (dataSetDefinition == null)
			{
				throw new ArgumentNullException("dataSetDefinition");
			}
			Global.Tracer.Assert(dataSetDefinition.DataSetCore != null, "Shared dataset definition is missing dataset information");
			OnDemandProcessingContext onDemandProcessingContext = this.CreateODPContextForSharedDataSet(dc, dataSetDefinition);
			onDemandProcessingContext.SetSharedDataSetUniqueName(onDemandProcessingContext.ExternalDataSetContext.TargetChunkNameInSnapshot ?? dataSetDefinition.DataSetCore.Name);
			onDemandProcessingContext.ExecutionLogContext.StartProcessingTimer();
			if (dc.Parameters != null || dataSetDefinition.DataSetCore.Query != null)
			{
				int num = ((dc.Parameters == null) ? 0 : dc.Parameters.Count);
				int num2 = ((dataSetDefinition.DataSetCore.Query == null || dataSetDefinition.DataSetCore.Query.Parameters == null) ? 0 : dataSetDefinition.DataSetCore.Query.Parameters.Count);
				if (num != num2)
				{
					throw new DataSetExecutionException(ErrorCode.rsParameterError);
				}
			}
			bool flag;
			if (dc.Parameters != null && !dc.Parameters.ValuesAreValid(out flag, true))
			{
				throw new DataSetExecutionException(ErrorCode.rsParametersNotSpecified);
			}
			bool flag2 = false;
			CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
			try
			{
				if (dc.Culture != null && Thread.CurrentThread.CurrentCulture != dc.Culture)
				{
					Thread.CurrentThread.CurrentCulture = dc.Culture;
				}
				flag2 = new RetrievalManager(dataSetDefinition, onDemandProcessingContext).FetchSharedDataSet(dc.Parameters);
			}
			catch (Exception innerException)
			{
				if (innerException is ProcessingAbortedException)
				{
					innerException = innerException.InnerException;
				}
				throw new DataSetExecutionException((dc.ConsumerRequest == null || dc.ConsumerRequest.ReportDataSetName == null) ? dc.ItemContext.ItemPathAsString : dc.ConsumerRequest.ReportDataSetName, innerException);
			}
			finally
			{
				ReportProcessing.FinallyBlockForSharedDataSetProcessing(onDemandProcessingContext, dc, currentCulture);
			}
			if (dc.DataSources != null && dc.DataSources.HasConnectionStringUseridReference())
			{
				onDemandProcessingContext.MergeHasUserProfileState(UserProfileState.InQuery);
			}
			return new DataSetResult(dc.Parameters, onDemandProcessingContext.ErrorContext.Messages, onDemandProcessingContext.HasUserProfileState, flag2);
		}

		// Token: 0x06005514 RID: 21780 RVA: 0x00167140 File Offset: 0x00165340
		private static void ProcessDataSetParameters(OnDemandProcessingContext odpContext, DataSetContext dc, DataSetDefinition dataSetDefinition)
		{
			new SharedDataSetProcessReportParameters(dataSetDefinition.DataSetCore, odpContext).Process(dc.Parameters);
		}

		// Token: 0x06005515 RID: 21781 RVA: 0x0016715C File Offset: 0x0016535C
		private static void FinallyBlockForSharedDataSetProcessing(OnDemandProcessingContext odpContext, DataSetContext dc, CultureInfo originalCulture)
		{
			if (originalCulture != null && Thread.CurrentThread.CurrentCulture != originalCulture)
			{
				Thread.CurrentThread.CurrentCulture = originalCulture;
			}
			odpContext.UnregisterAbortInfo();
			dc.Parameters.UserProfileState |= odpContext.HasUserProfileState;
			if (odpContext.ExecutionLogContext != null && odpContext.ExecutionLogContext.IsProcessingTimerRunning)
			{
				ReportProcessing.UpdateHostingEnvironment(null, dc.ItemContext, odpContext.ExecutionLogContext, ProcessingEngine.OnDemandEngine, dc.JobContext, (dc.ConsumerRequest == null) ? "Standalone" : "Inline");
			}
		}

		// Token: 0x06005516 RID: 21782 RVA: 0x001671E4 File Offset: 0x001653E4
		private OnDemandProcessingContext CreateODPContextForSharedDataSet(DataSetContext dc, DataSetDefinition dataSetDefinition)
		{
			ProcessingErrorContext processingErrorContext = new ProcessingErrorContext();
			return new OnDemandProcessingContext(dc, dataSetDefinition, processingErrorContext, this.m_configuration);
		}

		// Token: 0x06005517 RID: 21783 RVA: 0x00167208 File Offset: 0x00165408
		public DataSetPublishingResult CreateSharedDataSet(PublishingContext sharedDataSetPublishingContext)
		{
			Global.Tracer.Assert(sharedDataSetPublishingContext != null && sharedDataSetPublishingContext.PublishingContextKind == PublishingContextKind.SharedDataSet, "CreateSharedDataSet must be called with a valid publishing context");
			PublishingErrorContext publishingErrorContext = new PublishingErrorContext();
			return new ReportPublishing(sharedDataSetPublishingContext, publishingErrorContext).CreateSharedDataSet(sharedDataSetPublishingContext.Definition);
		}

		// Token: 0x04002D03 RID: 11523
		private IConfiguration m_configuration;

		// Token: 0x04002D04 RID: 11524
		internal const int MaximumChartThreads = 5;

		// Token: 0x02000C17 RID: 3095
		private sealed class ShowHideProcessing
		{
			// Token: 0x06008691 RID: 34449 RVA: 0x0021A818 File Offset: 0x00218A18
			internal void Process(string showHideToggle, ReportSnapshot reportSnapshot, EventInformation oldOverrideInformation, ChunkManager.RenderingChunkManager chunkManager, out bool showHideInformationChanged, out EventInformation newOverrideInformation)
			{
				try
				{
					showHideInformationChanged = false;
					newOverrideInformation = null;
					if (showHideToggle != null)
					{
						Global.Tracer.Assert(reportSnapshot != null, "(null != reportSnapshot)");
						this.m_senderInfo = reportSnapshot.GetShowHideSenderInfo(chunkManager);
						this.m_receiverInfo = reportSnapshot.GetShowHideReceiverInfo(chunkManager);
						this.Process(showHideToggle, oldOverrideInformation, ref showHideInformationChanged, ref newOverrideInformation);
					}
				}
				finally
				{
					this.m_showHideInfoChanged = false;
					this.m_senderInfo = null;
					this.m_receiverInfo = null;
					this.m_overrideToggleStateInfo = null;
					this.m_overrideHiddenInfo = null;
				}
			}

			// Token: 0x06008692 RID: 34450 RVA: 0x0021A8A4 File Offset: 0x00218AA4
			internal bool Process(string showHideToggle, EventInformation oldOverrideInformation, ChunkManager.EventsChunkManager eventsChunkManager, out bool showHideInformationChanged, out EventInformation newOverrideInformation)
			{
				bool flag;
				try
				{
					showHideInformationChanged = false;
					newOverrideInformation = null;
					if (showHideToggle == null)
					{
						flag = false;
					}
					else
					{
						Global.Tracer.Assert(eventsChunkManager != null, "(null != eventsChunkManager)");
						eventsChunkManager.GetShowHideInfo(out this.m_senderInfo, out this.m_receiverInfo);
						flag = this.Process(showHideToggle, oldOverrideInformation, ref showHideInformationChanged, ref newOverrideInformation);
					}
				}
				finally
				{
					this.m_showHideInfoChanged = false;
					this.m_senderInfo = null;
					this.m_receiverInfo = null;
					this.m_overrideToggleStateInfo = null;
					this.m_overrideHiddenInfo = null;
				}
				return flag;
			}

			// Token: 0x06008693 RID: 34451 RVA: 0x0021A92C File Offset: 0x00218B2C
			private bool Process(string showHideToggle, EventInformation oldOverrideInformation, ref bool showHideInformationChanged, ref EventInformation newOverrideInformation)
			{
				if (this.m_senderInfo == null || this.m_receiverInfo == null)
				{
					return false;
				}
				int num;
				if (!int.TryParse(showHideToggle, NumberStyles.None, CultureInfo.InvariantCulture, out num))
				{
					return false;
				}
				EventInformation.SortEventInfo sortEventInfo = null;
				if (oldOverrideInformation == null || (oldOverrideInformation.ToggleStateInfo == null && oldOverrideInformation.HiddenInfo == null))
				{
					this.m_overrideToggleStateInfo = new Hashtable();
					this.m_overrideHiddenInfo = new Hashtable();
					if (oldOverrideInformation != null)
					{
						sortEventInfo = oldOverrideInformation.SortInfo;
					}
				}
				else
				{
					this.m_overrideToggleStateInfo = (Hashtable)oldOverrideInformation.ToggleStateInfo.Clone();
					this.m_overrideHiddenInfo = (Hashtable)oldOverrideInformation.HiddenInfo.Clone();
				}
				bool flag = this.ProcessSender(num);
				showHideInformationChanged = this.m_showHideInfoChanged;
				if (!this.m_showHideInfoChanged)
				{
					newOverrideInformation = null;
					return flag;
				}
				if (this.m_overrideToggleStateInfo.Count == 0 && this.m_overrideHiddenInfo.Count == 0)
				{
					newOverrideInformation = null;
					return flag;
				}
				newOverrideInformation = new EventInformation();
				newOverrideInformation.ToggleStateInfo = this.m_overrideToggleStateInfo;
				newOverrideInformation.HiddenInfo = this.m_overrideHiddenInfo;
				newOverrideInformation.SortInfo = sortEventInfo;
				return flag;
			}

			// Token: 0x06008694 RID: 34452 RVA: 0x0021AA28 File Offset: 0x00218C28
			private bool ProcessSender(int senderUniqueName)
			{
				SenderInformation senderInformation = this.m_senderInfo[senderUniqueName];
				if (senderInformation == null)
				{
					return false;
				}
				this.UpdateOverrideToggleStateInfo(senderUniqueName);
				for (int i = 0; i < senderInformation.ReceiverUniqueNames.Count; i++)
				{
					this.ProcessReceiver(senderInformation.ReceiverUniqueNames[i]);
				}
				return true;
			}

			// Token: 0x06008695 RID: 34453 RVA: 0x0021AA78 File Offset: 0x00218C78
			private void ProcessReceiver(int receiverUniqueName)
			{
				ReceiverInformation receiverInformation = this.m_receiverInfo[receiverUniqueName];
				Global.Tracer.Assert(receiverInformation != null, "(null != receiver)");
				this.UpdateOverrideHiddenInfo(receiverUniqueName);
			}

			// Token: 0x06008696 RID: 34454 RVA: 0x0021AAAC File Offset: 0x00218CAC
			private void UpdateOverrideToggleStateInfo(int uniqueName)
			{
				this.m_showHideInfoChanged = true;
				if (!this.m_overrideToggleStateInfo.ContainsKey(uniqueName))
				{
					this.m_overrideToggleStateInfo.Add(uniqueName, null);
					return;
				}
				this.m_overrideToggleStateInfo.Remove(uniqueName);
			}

			// Token: 0x06008697 RID: 34455 RVA: 0x0021AAEC File Offset: 0x00218CEC
			private void UpdateOverrideHiddenInfo(int uniqueName)
			{
				this.m_showHideInfoChanged = true;
				if (!this.m_overrideHiddenInfo.ContainsKey(uniqueName))
				{
					this.m_overrideHiddenInfo.Add(uniqueName, null);
					return;
				}
				this.m_overrideHiddenInfo.Remove(uniqueName);
			}

			// Token: 0x04004841 RID: 18497
			private bool m_showHideInfoChanged;

			// Token: 0x04004842 RID: 18498
			private SenderInformationHashtable m_senderInfo;

			// Token: 0x04004843 RID: 18499
			private ReceiverInformationHashtable m_receiverInfo;

			// Token: 0x04004844 RID: 18500
			private Hashtable m_overrideToggleStateInfo;

			// Token: 0x04004845 RID: 18501
			private Hashtable m_overrideHiddenInfo;
		}

		// Token: 0x02000C18 RID: 3096
		// (Invoke) Token: 0x0600869A RID: 34458
		public delegate void OnDemandSubReportCallback(ICatalogItemContext reportContext, string subreportPath, string newChunkName, ReportProcessing.NeedsUpgrade upgradeCheck, ParameterInfoCollection parentQueryParameters, out ICatalogItemContext subreportContext, out string description, out IChunkFactory getCompiledDefinitionCallback, out ParameterInfoCollection parameters);

		// Token: 0x02000C19 RID: 3097
		// (Invoke) Token: 0x0600869E RID: 34462
		public delegate void OnDemandSubReportDataSourcesCallback(ICatalogItemContext reportContext, string subreportPath, ReportProcessing.NeedsUpgrade upgradeCheck, out ICatalogItemContext subreportContext, out IChunkFactory getCompiledDefinitionCallback, out DataSourceInfoCollection dataSources, out DataSetInfoCollection dataSetReferences);

		// Token: 0x02000C1A RID: 3098
		// (Invoke) Token: 0x060086A2 RID: 34466
		public delegate bool NeedsUpgrade(ReportProcessingFlags processingFlags);

		// Token: 0x02000C1B RID: 3099
		// (Invoke) Token: 0x060086A6 RID: 34470
		public delegate void SubReportCallback(ICatalogItemContext reportContext, string subreportPath, out ICatalogItemContext subreportContext, out string description, out ReportProcessing.GetReportChunk getCompiledDefinitionCallback, out ParameterInfoCollection parameters);

		// Token: 0x02000C1C RID: 3100
		// (Invoke) Token: 0x060086AA RID: 34474
		internal delegate void SubReportDataSourcesCallback(ICatalogItemContext reportContext, string subreportPath, out ICatalogItemContext subreportContext, out ReportProcessing.GetReportChunk getCompiledDefinitionCallback, out DataSourceInfoCollection dataSources);

		// Token: 0x02000C1D RID: 3101
		public interface IErasable
		{
			// Token: 0x060086AD RID: 34477
			bool Erase();
		}

		// Token: 0x02000C1E RID: 3102
		// (Invoke) Token: 0x060086AF RID: 34479
		public delegate Microsoft.ReportingServices.DataExtensions.DataSourceInfo CheckSharedDataSource(string dataSourcePath, out Guid catalogItemId);

		// Token: 0x02000C1F RID: 3103
		// (Invoke) Token: 0x060086B3 RID: 34483
		public delegate Stream CreateReportChunk(string name, ReportProcessing.ReportChunkTypes type, string mimeType);

		// Token: 0x02000C20 RID: 3104
		// (Invoke) Token: 0x060086B7 RID: 34487
		public delegate Stream GetReportChunk(string name, ReportProcessing.ReportChunkTypes type, out string mimeType);

		// Token: 0x02000C21 RID: 3105
		// (Invoke) Token: 0x060086BB RID: 34491
		internal delegate string GetChunkMimeType(string name, ReportProcessing.ReportChunkTypes type);

		// Token: 0x02000C22 RID: 3106
		// (Invoke) Token: 0x060086BF RID: 34495
		public delegate NameValueCollection StoreServerParameters(ICatalogItemContext item, NameValueCollection reportParameters, bool[] sharedParameters, out bool replaced);

		// Token: 0x02000C23 RID: 3107
		// (Invoke) Token: 0x060086C3 RID: 34499
		public delegate IDbConnection CreateDataExtensionInstance(string extensionName, Guid modelID);

		// Token: 0x02000C24 RID: 3108
		// (Invoke) Token: 0x060086C7 RID: 34503
		public delegate IDbConnection CreateAndSetupDataExtensionInstance(Microsoft.ReportingServices.ReportIntermediateFormat.DataSource dataSource, Microsoft.ReportingServices.ReportIntermediateFormat.DataSet dataSet, OnDemandProcessingContext odpContext);

		// Token: 0x02000C25 RID: 3109
		// (Invoke) Token: 0x060086CB RID: 34507
		public delegate void ResolveTemporaryDataSource(Microsoft.ReportingServices.DataExtensions.DataSourceInfo dataSourceInfo, DataSourceInfoCollection originalDataSources);

		// Token: 0x02000C26 RID: 3110
		[Serializable]
		internal sealed class DataCacheUnavailableException : Exception
		{
			// Token: 0x060086CE RID: 34510 RVA: 0x0021AB34 File Offset: 0x00218D34
			public DataCacheUnavailableException()
			{
			}

			// Token: 0x060086CF RID: 34511 RVA: 0x0021AB3C File Offset: 0x00218D3C
			public DataCacheUnavailableException(ReportProcessing.DataCacheUnavailableException ex)
				: base(ex.Message, ex)
			{
			}

			// Token: 0x060086D0 RID: 34512 RVA: 0x0021AB4B File Offset: 0x00218D4B
			private DataCacheUnavailableException(SerializationInfo info, StreamingContext context)
				: base(info, context)
			{
			}
		}

		// Token: 0x02000C27 RID: 3111
		public enum ReportChunkTypes
		{
			// Token: 0x04004847 RID: 18503
			Main,
			// Token: 0x04004848 RID: 18504
			Image,
			// Token: 0x04004849 RID: 18505
			Other,
			// Token: 0x0400484A RID: 18506
			StaticImage,
			// Token: 0x0400484B RID: 18507
			ServerRdlMapping,
			// Token: 0x0400484C RID: 18508
			Data,
			// Token: 0x0400484D RID: 18509
			Interactivity,
			// Token: 0x0400484E RID: 18510
			Pagination,
			// Token: 0x0400484F RID: 18511
			Rendering,
			// Token: 0x04004850 RID: 18512
			CompiledDefinition,
			// Token: 0x04004851 RID: 18513
			GeneratedReportItems,
			// Token: 0x04004852 RID: 18514
			LookupInfo,
			// Token: 0x04004853 RID: 18515
			Shapefile
		}

		// Token: 0x02000C28 RID: 3112
		public enum ExecutionType
		{
			// Token: 0x04004855 RID: 18517
			Live,
			// Token: 0x04004856 RID: 18518
			ServiceAccount,
			// Token: 0x04004857 RID: 18519
			SurrogateAccount
		}

		// Token: 0x02000C29 RID: 3113
		internal class ProcessingComparer : IDataComparer, IEqualityComparer, IEqualityComparer<object>, IComparer, IComparer<object>, IStaticReferenceable
		{
			// Token: 0x060086D1 RID: 34513 RVA: 0x0021AB55 File Offset: 0x00218D55
			internal ProcessingComparer(CompareInfo compareInfo, CompareOptions compareOptions, bool nullsAsBlanks)
				: this(compareInfo, compareOptions, nullsAsBlanks, true)
			{
			}

			// Token: 0x060086D2 RID: 34514 RVA: 0x0021AB61 File Offset: 0x00218D61
			internal ProcessingComparer(CompareInfo compareInfo, CompareOptions compareOptions, bool nullsAsBlanks, bool defaultThrowExceptionOnComparisonFailure)
			{
				this.m_compareInfo = compareInfo;
				this.m_compareOptions = compareOptions;
				this.m_nullsAsBlanks = nullsAsBlanks;
				this.m_defaultThrowExceptionOnComparisonFailure = defaultThrowExceptionOnComparisonFailure;
			}

			// Token: 0x170029E0 RID: 10720
			// (get) Token: 0x060086D3 RID: 34515 RVA: 0x0021AB91 File Offset: 0x00218D91
			int IStaticReferenceable.ID
			{
				get
				{
					return this.m_staticRefId;
				}
			}

			// Token: 0x060086D4 RID: 34516 RVA: 0x0021AB99 File Offset: 0x00218D99
			void IStaticReferenceable.SetID(int id)
			{
				this.m_staticRefId = id;
			}

			// Token: 0x060086D5 RID: 34517 RVA: 0x0021ABA2 File Offset: 0x00218DA2
			Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.ObjectType IStaticReferenceable.GetObjectType()
			{
				return Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.ObjectType.ProcessingComparer;
			}

			// Token: 0x060086D6 RID: 34518 RVA: 0x0021ABA9 File Offset: 0x00218DA9
			bool IEqualityComparer.Equals(object x, object y)
			{
				return this.InternalEquals(x, y);
			}

			// Token: 0x060086D7 RID: 34519 RVA: 0x0021ABB3 File Offset: 0x00218DB3
			bool IEqualityComparer<object>.Equals(object x, object y)
			{
				return this.InternalEquals(x, y);
			}

			// Token: 0x060086D8 RID: 34520 RVA: 0x0021ABC0 File Offset: 0x00218DC0
			private bool InternalEquals(object x, object y)
			{
				bool flag;
				return this.Compare(x, y, this.m_defaultThrowExceptionOnComparisonFailure, false, out flag) == 0;
			}

			// Token: 0x060086D9 RID: 34521 RVA: 0x0021ABE1 File Offset: 0x00218DE1
			int IComparer.Compare(object x, object y)
			{
				return this.Compare(x, y);
			}

			// Token: 0x060086DA RID: 34522 RVA: 0x0021ABEC File Offset: 0x00218DEC
			public int Compare(object x, object y)
			{
				bool flag;
				return this.Compare(x, y, this.m_defaultThrowExceptionOnComparisonFailure, false, out flag);
			}

			// Token: 0x060086DB RID: 34523 RVA: 0x0021AC0C File Offset: 0x00218E0C
			public int Compare(object x, object y, bool extendedTypeComparisons)
			{
				bool flag;
				return this.Compare(x, y, this.m_defaultThrowExceptionOnComparisonFailure, extendedTypeComparisons, out flag);
			}

			// Token: 0x060086DC RID: 34524 RVA: 0x0021AC2A File Offset: 0x00218E2A
			public int Compare(object x, object y, bool throwExceptionOnComparisonFailure, bool extendedTypeComparisons, out bool validComparisonResult)
			{
				return ReportProcessing.CompareTo(x, y, this.m_nullsAsBlanks, this.m_compareInfo, this.m_compareOptions, throwExceptionOnComparisonFailure, extendedTypeComparisons, out validComparisonResult);
			}

			// Token: 0x060086DD RID: 34525 RVA: 0x0021AC4C File Offset: 0x00218E4C
			public int GetHashCode(object obj)
			{
				bool flag;
				DataAggregate.DataTypeCode typeCode = DataAggregate.GetTypeCode(obj, false, out flag);
				if (!flag)
				{
					return obj.GetHashCode();
				}
				switch (typeCode)
				{
				case DataAggregate.DataTypeCode.Null:
					return 0;
				case DataAggregate.DataTypeCode.String:
				{
					string text = (string)obj;
					if (CompareOptions.None < (CompareOptions.IgnoreCase & this.m_compareOptions))
					{
						if (this.m_cultureInfo == null)
						{
							this.m_cultureInfo = new CultureInfo(this.m_compareInfo.Name, false);
						}
						text = text.ToUpper(this.m_cultureInfo);
					}
					return ReportProcessing.ProcessingComparer.InternalGetHashCode(text);
				}
				case DataAggregate.DataTypeCode.Char:
				{
					char c = (char)obj;
					return (int)(c | ((int)c << 16));
				}
				case DataAggregate.DataTypeCode.Boolean:
					if ((bool)obj)
					{
						return 1;
					}
					return 0;
				case DataAggregate.DataTypeCode.Int16:
					return (int)((short)obj);
				case DataAggregate.DataTypeCode.Int32:
					return (int)obj;
				case DataAggregate.DataTypeCode.Int64:
				{
					long num = (long)obj;
					if (num < 2147483647L)
					{
						return (int)num;
					}
					return ReportProcessing.ProcessingComparer.InternalGetHashCode(num);
				}
				case DataAggregate.DataTypeCode.UInt16:
					return (int)((ushort)obj);
				case DataAggregate.DataTypeCode.UInt32:
					return (int)((uint)obj);
				case DataAggregate.DataTypeCode.UInt64:
				{
					ulong num2 = (ulong)obj;
					if (num2 < 2147483647UL)
					{
						return (int)num2;
					}
					return (int)num2 ^ (int)(num2 >> 32);
				}
				case DataAggregate.DataTypeCode.Byte:
					return (int)((byte)obj);
				case DataAggregate.DataTypeCode.SByte:
					return (int)((sbyte)obj);
				case DataAggregate.DataTypeCode.TimeSpan:
				{
					long ticks = ((TimeSpan)obj).Ticks;
					return (int)ticks ^ (int)(ticks >> 32);
				}
				case DataAggregate.DataTypeCode.DateTime:
					return ReportProcessing.ProcessingComparer.InternalGetHashCode((DateTime)obj);
				case DataAggregate.DataTypeCode.Single:
				{
					float num3 = (float)obj;
					int num4 = (int)num3;
					if (num3 == (float)num4)
					{
						return num4;
					}
					return ReportProcessing.ProcessingComparer.InternalGetHashCode((double)num3);
				}
				case DataAggregate.DataTypeCode.Double:
				{
					double num5 = (double)obj;
					int num6 = (int)num5;
					if (num5 == (double)num6)
					{
						return num6;
					}
					return ReportProcessing.ProcessingComparer.InternalGetHashCode(num5);
				}
				case DataAggregate.DataTypeCode.Decimal:
				{
					decimal num7 = (decimal)obj;
					decimal num8 = decimal.Truncate(num7);
					if (num7 == num8)
					{
						if (num8 >= -2147483648m && num8 <= 2147483647m)
						{
							return (int)num8;
						}
						if (num8 >= -9223372036854775808m && num8 <= 9223372036854775807m)
						{
							return ReportProcessing.ProcessingComparer.InternalGetHashCode((long)num8);
						}
					}
					return ReportProcessing.ProcessingComparer.InternalGetHashCode((double)num7);
				}
				case DataAggregate.DataTypeCode.DateTimeOffset:
					return ReportProcessing.ProcessingComparer.InternalGetHashCode(((DateTimeOffset)obj).UtcDateTime);
				}
				return obj.GetHashCode();
			}

			// Token: 0x060086DE RID: 34526 RVA: 0x0021AEA4 File Offset: 0x002190A4
			private static int InternalGetHashCode(string input)
			{
				int num = 5381;
				int num2 = num;
				int num3 = input.Length - 1;
				int length = input.Length;
				for (int i = 0; i < length; i++)
				{
					num = ((num << 5) + num) ^ (int)input[i];
					if (i == num3)
					{
						break;
					}
					i++;
					num2 = ((num2 << 5) + num2) ^ (int)input[i];
				}
				return num + num2 * 1566083941;
			}

			// Token: 0x060086DF RID: 34527 RVA: 0x0021AF0C File Offset: 0x0021910C
			private static int InternalGetHashCode(double value)
			{
				if (value == 0.0)
				{
					return 0;
				}
				long num = BitConverter.DoubleToInt64Bits(value);
				return (int)num ^ (int)(num >> 32);
			}

			// Token: 0x060086E0 RID: 34528 RVA: 0x0021AF38 File Offset: 0x00219138
			private static int InternalGetHashCode(DateTime value)
			{
				long ticks = value.Ticks;
				return (int)ticks ^ (int)(ticks >> 32);
			}

			// Token: 0x060086E1 RID: 34529 RVA: 0x0021AF55 File Offset: 0x00219155
			private static int InternalGetHashCode(long value)
			{
				return (int)value ^ (int)(value >> 32);
			}

			// Token: 0x04004858 RID: 18520
			private readonly CompareInfo m_compareInfo;

			// Token: 0x04004859 RID: 18521
			private readonly CompareOptions m_compareOptions;

			// Token: 0x0400485A RID: 18522
			private readonly bool m_nullsAsBlanks;

			// Token: 0x0400485B RID: 18523
			private readonly bool m_defaultThrowExceptionOnComparisonFailure;

			// Token: 0x0400485C RID: 18524
			private CultureInfo m_cultureInfo;

			// Token: 0x0400485D RID: 18525
			private int m_staticRefId = int.MaxValue;
		}

		// Token: 0x02000C2A RID: 3114
		internal enum ProcessingStages
		{
			// Token: 0x0400485F RID: 18527
			Grouping = 1,
			// Token: 0x04004860 RID: 18528
			SortAndFilter,
			// Token: 0x04004861 RID: 18529
			RunningValues,
			// Token: 0x04004862 RID: 18530
			CreatingInstances,
			// Token: 0x04004863 RID: 18531
			UserSortFilter
		}

		// Token: 0x02000C2B RID: 3115
		[Flags]
		internal enum DataActions
		{
			// Token: 0x04004865 RID: 18533
			None = 0,
			// Token: 0x04004866 RID: 18534
			RecursiveAggregates = 1,
			// Token: 0x04004867 RID: 18535
			PostSortAggregates = 2,
			// Token: 0x04004868 RID: 18536
			UserSort = 4
		}

		// Token: 0x02000C2C RID: 3116
		internal sealed class DataSourceInfoHashtable : Hashtable
		{
			// Token: 0x170029E1 RID: 10721
			internal ReportProcessing.DataSourceInfo this[string dataSourceName]
			{
				get
				{
					return (ReportProcessing.DataSourceInfo)base[dataSourceName];
				}
			}

			// Token: 0x060086E3 RID: 34531 RVA: 0x0021AF70 File Offset: 0x00219170
			internal void Add(IProcessingDataSource procDataSource, IDbConnection connection, ReportProcessing.TransactionInfo transInfo, Microsoft.ReportingServices.DataExtensions.DataSourceInfo dataExtDataSourceInfo)
			{
				ReportProcessing.DataSourceInfo dataSourceInfo = new ReportProcessing.DataSourceInfo(procDataSource, connection, transInfo, dataExtDataSourceInfo);
				this.Add(procDataSource.Name, dataSourceInfo);
			}
		}

		// Token: 0x02000C2D RID: 3117
		internal sealed class TransactionInfo
		{
			// Token: 0x060086E5 RID: 34533 RVA: 0x0021AF9D File Offset: 0x0021919D
			internal TransactionInfo(IDbTransaction transaction)
			{
				Global.Tracer.Assert(transaction != null, "A transaction information object cannot have a null transaction.");
				this.m_transaction = transaction;
			}

			// Token: 0x170029E2 RID: 10722
			// (get) Token: 0x060086E6 RID: 34534 RVA: 0x0021AFBF File Offset: 0x002191BF
			internal IDbTransaction Transaction
			{
				get
				{
					return this.m_transaction;
				}
			}

			// Token: 0x04004869 RID: 18537
			internal bool RollbackRequired;

			// Token: 0x0400486A RID: 18538
			private IDbTransaction m_transaction;
		}

		// Token: 0x02000C2E RID: 3118
		internal struct TableColumnInfo
		{
			// Token: 0x0400486B RID: 18539
			internal int StartIndex;

			// Token: 0x0400486C RID: 18540
			internal int Span;
		}

		// Token: 0x02000C2F RID: 3119
		internal sealed class DataSourceInfo
		{
			// Token: 0x060086E7 RID: 34535 RVA: 0x0021AFC7 File Offset: 0x002191C7
			internal DataSourceInfo(IProcessingDataSource procDataSourceInfo, IDbConnection connection, ReportProcessing.TransactionInfo ti, Microsoft.ReportingServices.DataExtensions.DataSourceInfo dataExtDataSourceInfo)
			{
				this.m_procDataSourceInfo = procDataSourceInfo;
				this.m_connection = connection;
				this.m_transactionInfo = ti;
				this.m_dataExtDataSourceInfo = dataExtDataSourceInfo;
			}

			// Token: 0x170029E3 RID: 10723
			// (get) Token: 0x060086E8 RID: 34536 RVA: 0x0021AFEC File Offset: 0x002191EC
			internal string DataSourceName
			{
				get
				{
					return this.m_procDataSourceInfo.Name;
				}
			}

			// Token: 0x170029E4 RID: 10724
			// (get) Token: 0x060086E9 RID: 34537 RVA: 0x0021AFF9 File Offset: 0x002191F9
			internal Microsoft.ReportingServices.DataExtensions.DataSourceInfo DataExtDataSourceInfo
			{
				get
				{
					return this.m_dataExtDataSourceInfo;
				}
			}

			// Token: 0x170029E5 RID: 10725
			// (get) Token: 0x060086EA RID: 34538 RVA: 0x0021B001 File Offset: 0x00219201
			internal IProcessingDataSource ProcDataSourceInfo
			{
				get
				{
					return this.m_procDataSourceInfo;
				}
			}

			// Token: 0x170029E6 RID: 10726
			// (get) Token: 0x060086EB RID: 34539 RVA: 0x0021B009 File Offset: 0x00219209
			internal IDbConnection Connection
			{
				get
				{
					return this.m_connection;
				}
			}

			// Token: 0x170029E7 RID: 10727
			// (get) Token: 0x060086EC RID: 34540 RVA: 0x0021B011 File Offset: 0x00219211
			internal ReportProcessing.TransactionInfo TransactionInfo
			{
				get
				{
					return this.m_transactionInfo;
				}
			}

			// Token: 0x0400486D RID: 18541
			private IDbConnection m_connection;

			// Token: 0x0400486E RID: 18542
			private ReportProcessing.TransactionInfo m_transactionInfo;

			// Token: 0x0400486F RID: 18543
			private Microsoft.ReportingServices.DataExtensions.DataSourceInfo m_dataExtDataSourceInfo;

			// Token: 0x04004870 RID: 18544
			private IProcessingDataSource m_procDataSourceInfo;
		}

		// Token: 0x02000C30 RID: 3120
		internal sealed class ProcessingAbortEventArgs : EventArgs
		{
			// Token: 0x060086ED RID: 34541 RVA: 0x0021B019 File Offset: 0x00219219
			internal ProcessingAbortEventArgs(int reportUniqueName)
			{
				this.m_reportUniqueName = reportUniqueName;
			}

			// Token: 0x170029E8 RID: 10728
			// (get) Token: 0x060086EE RID: 34542 RVA: 0x0021B028 File Offset: 0x00219228
			internal int ReportUniqueName
			{
				get
				{
					return this.m_reportUniqueName;
				}
			}

			// Token: 0x04004871 RID: 18545
			private int m_reportUniqueName;
		}

		// Token: 0x02000C31 RID: 3121
		internal sealed class ThreadSet
		{
			// Token: 0x060086EF RID: 34543 RVA: 0x0021B030 File Offset: 0x00219230
			internal ThreadSet(int threadCount)
			{
				if (Global.Tracer.TraceVerbose)
				{
					Global.Tracer.Trace(TraceLevel.Verbose, "ThreadSet object created. {0} threads remaining.", new object[] { threadCount });
				}
				this.m_threadsRemaining = threadCount;
				this.m_allThreadsDone = new ManualResetEvent(threadCount <= 0);
			}

			// Token: 0x060086F0 RID: 34544 RVA: 0x0021B088 File Offset: 0x00219288
			internal void ThreadCompleted()
			{
				int num = Interlocked.Decrement(ref this.m_threadsRemaining);
				if (Global.Tracer.TraceVerbose)
				{
					Global.Tracer.Trace(TraceLevel.Verbose, "Thread completed. {0} thread remaining.", new object[] { num });
				}
				if (num <= 0)
				{
					this.m_allThreadsDone.Set();
				}
			}

			// Token: 0x060086F1 RID: 34545 RVA: 0x0021B0DC File Offset: 0x002192DC
			internal void WaitForCompletion()
			{
				this.m_allThreadsDone.WaitOne();
				if (Global.Tracer.TraceVerbose)
				{
					Global.Tracer.Trace(TraceLevel.Verbose, "All the processing threads have completed.");
				}
			}

			// Token: 0x04004872 RID: 18546
			private int m_threadsRemaining;

			// Token: 0x04004873 RID: 18547
			private ManualResetEvent m_allThreadsDone;
		}

		// Token: 0x02000C32 RID: 3122
		public class ProcessingContext : IInternalProcessingContext
		{
			// Token: 0x060086F2 RID: 34546 RVA: 0x0021B108 File Offset: 0x00219308
			protected ProcessingContext(string chartName, string requestUserName, CultureInfo userLanguage, ReportProcessing.SubReportCallback subReportCallback, ICatalogItemContext reportContext, Microsoft.ReportingServices.ReportProcessing.Report report, ErrorContext errorContext, ReportProcessing.CreateReportChunk createReportChunkCallback, IGetResource getResourceCallback, ReportProcessing.ExecutionType interactiveExecution, DateTime executionTime, UserProfileState allowUserProfileState, bool isHistorySnapshot, bool snapshotProcessing, bool processWithCachedData, ReportProcessing.GetReportChunk getChunkCallback, ReportProcessing.CreateReportChunk cacheDataCallback, ReportRuntimeSetup reportRuntimeSetup, IJobContext jobContext, IExtensionFactory extFactory, IProcessingDataExtensionConnection dataExtensionConnection, IDataProtection dataProtection)
			{
				this.m_commonInfo = new ReportProcessing.ProcessingContext.CommonInfo(chartName, requestUserName, userLanguage, subReportCallback, report, createReportChunkCallback, getResourceCallback, interactiveExecution, executionTime, allowUserProfileState, isHistorySnapshot, snapshotProcessing, processWithCachedData, getChunkCallback, cacheDataCallback, reportRuntimeSetup);
				this.m_subReportLevel = 0U;
				this.m_reportContext = reportContext;
				this.m_reportObjectModel = null;
				this.m_reportItemsReferenced = report.HasReportItemReferences;
				this.m_reportItemThisDotValueReferenced = false;
				this.m_showHideInfo = new ReportProcessing.ProcessingContext.ShowHideInfo();
				this.m_dataSourceInfo = new ReportProcessing.DataSourceInfoHashtable();
				this.m_showHideType = report.ShowHideType;
				this.m_embeddedImages = report.EmbeddedImages;
				this.m_imageStreamNames = report.ImageStreamNames;
				this.m_abortHelper = new ReportProcessing.ProcessingContext.AbortHelper(jobContext);
				this.m_inPageSection = false;
				this.m_specialDataRegionFilters = null;
				this.m_errorContext = errorContext;
				this.m_processReportParameters = false;
				this.m_pivotRunningValueScopes = null;
				this.m_reportRuntime = null;
				this.m_delayAddingInstanceInfo = false;
				this.m_specialRecursiveAggregates = report.HasSpecialRecursiveAggregates;
				this.m_pagination = new ReportProcessing.Pagination(report.InteractiveHeightValue);
				this.m_navigationInfo = new ReportProcessing.NavigationInfo();
				this.m_pageSectionContext = new ReportProcessing.PageSectionContext(report.PageHeaderEvaluation || report.PageFooterEvaluation, report.MergeOnePass);
				this.m_userSortFilterContext = new UserSortFilterContext();
				this.m_jobContext = jobContext;
				this.m_extFactory = extFactory;
				this.m_dataExtensionConnection = dataExtensionConnection;
				this.m_dataProtection = dataProtection;
			}

			// Token: 0x060086F3 RID: 34547 RVA: 0x0021B280 File Offset: 0x00219480
			protected ProcessingContext(ReportProcessing.ProcessingContext parentContext, string requestUserName, CultureInfo userlanguage, ICatalogItemContext reportContext, ErrorContext errorContext, ReportProcessing.ExecutionType interactiveExecution, DateTime executionTime, UserProfileState allowUserProfileState, bool snapshotProcessing, ReportRuntimeSetup reportRuntimeSetup, IJobContext jobContext, IExtensionFactory extFactory, IProcessingDataExtensionConnection dataExtensionConnection, IDataProtection dataProtection)
			{
				this.m_commonInfo = new ReportProcessing.ProcessingContext.CommonInfo(null, requestUserName, userlanguage, null, null, null, null, interactiveExecution, executionTime, allowUserProfileState, false, snapshotProcessing, false, null, null, reportRuntimeSetup);
				this.m_subReportLevel = 0U;
				this.m_reportContext = reportContext;
				this.m_reportObjectModel = null;
				this.m_reportItemsReferenced = false;
				this.m_reportItemThisDotValueReferenced = false;
				this.m_showHideInfo = new ReportProcessing.ProcessingContext.ShowHideInfo();
				this.m_dataSourceInfo = new ReportProcessing.DataSourceInfoHashtable();
				this.m_showHideType = Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.None;
				this.m_embeddedImages = null;
				this.m_imageStreamNames = null;
				if (parentContext != null)
				{
					this.m_abortHelper = parentContext.AbortInfo;
				}
				else
				{
					this.m_abortHelper = new ReportProcessing.ProcessingContext.AbortHelper(jobContext);
				}
				this.m_inPageSection = false;
				this.m_specialDataRegionFilters = null;
				this.m_errorContext = errorContext;
				this.m_processReportParameters = true;
				this.m_pivotRunningValueScopes = null;
				this.m_reportRuntime = null;
				this.m_delayAddingInstanceInfo = false;
				this.m_specialRecursiveAggregates = false;
				this.m_pagination = new ReportProcessing.Pagination(0.0);
				this.m_navigationInfo = new ReportProcessing.NavigationInfo();
				this.m_userSortFilterContext = new UserSortFilterContext();
				this.m_jobContext = jobContext;
				this.m_extFactory = extFactory;
				this.m_dataExtensionConnection = dataExtensionConnection;
				this.m_dataProtection = dataProtection;
			}

			// Token: 0x060086F4 RID: 34548 RVA: 0x0021B3C0 File Offset: 0x002195C0
			protected ProcessingContext(Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ErrorContext errorContext, ReportProcessing.ProcessingContext copy, int subReportDataSetUniqueName)
			{
				this.m_commonInfo = copy.m_commonInfo;
				this.m_subReportLevel = copy.m_subReportLevel + 1U;
				this.m_threadCulture = copy.ThreadCulture;
				this.m_languageInstanceId = copy.m_languageInstanceId;
				this.m_reportContext = subReport.ReportContext;
				this.m_reportObjectModel = null;
				this.m_reportItemsReferenced = subReport.Report.HasReportItemReferences;
				this.m_reportItemThisDotValueReferenced = false;
				this.m_showHideInfo = new ReportProcessing.ProcessingContext.ShowHideInfo(copy.m_showHideInfo);
				this.m_dataSourceInfo = copy.m_dataSourceInfo;
				this.m_showHideType = subReport.Report.ShowHideType;
				this.m_embeddedImages = subReport.Report.EmbeddedImages;
				this.m_imageStreamNames = subReport.Report.ImageStreamNames;
				this.m_abortHelper = copy.AbortInfo;
				this.m_inPageSection = false;
				this.m_specialDataRegionFilters = null;
				this.m_errorContext = errorContext;
				this.m_processReportParameters = false;
				this.m_pivotRunningValueScopes = null;
				this.m_reportRuntime = null;
				this.m_delayAddingInstanceInfo = false;
				this.m_specialRecursiveAggregates = subReport.Report.HasSpecialRecursiveAggregates;
				this.m_pagination = copy.m_pagination;
				this.m_dataSetUniqueName = subReportDataSetUniqueName;
				this.m_navigationInfo = copy.m_navigationInfo;
				this.m_pageSectionContext = copy.PageSectionContext;
				this.m_userSortFilterContext = new UserSortFilterContext(copy.UserSortFilterContext, subReport);
				this.m_jobContext = copy.JobContext;
				this.m_extFactory = copy.m_extFactory;
				this.m_dataExtensionConnection = copy.DataExtensionConnection;
				this.m_dataProtection = copy.DataProtection;
			}

			// Token: 0x060086F5 RID: 34549 RVA: 0x0021B558 File Offset: 0x00219758
			internal ProcessingContext(ICatalogItemContext reportContext, Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes showHideType, IGetResource getResourceCallback, EmbeddedImageHashtable embeddedImages, ImageStreamNames imageStreamNames, ErrorContext errorContext, bool reportItemsReferenced, UserProfileState allowUserProfileState, ReportRuntimeSetup reportRuntimeSetup, IDataProtection dataProtection)
			{
				this.m_commonInfo = new ReportProcessing.ProcessingContext.CommonInfo(getResourceCallback, allowUserProfileState, reportRuntimeSetup);
				this.m_subReportLevel = 0U;
				this.m_reportContext = reportContext;
				this.m_reportObjectModel = null;
				this.m_reportItemsReferenced = reportItemsReferenced;
				this.m_reportItemThisDotValueReferenced = false;
				this.m_showHideInfo = null;
				this.m_dataSourceInfo = null;
				this.m_showHideType = showHideType;
				this.m_embeddedImages = embeddedImages;
				this.m_imageStreamNames = imageStreamNames;
				this.m_abortHelper = null;
				this.m_inPageSection = true;
				this.m_specialDataRegionFilters = null;
				this.m_errorContext = errorContext;
				this.m_processReportParameters = false;
				this.m_pivotRunningValueScopes = null;
				this.m_reportRuntime = null;
				this.m_delayAddingInstanceInfo = false;
				this.m_specialRecursiveAggregates = false;
				this.m_pagination = new ReportProcessing.Pagination(0.0);
				this.m_navigationInfo = new ReportProcessing.NavigationInfo();
				this.m_pageSectionContext = new ReportProcessing.PageSectionContext(true, false);
				this.m_userSortFilterContext = new UserSortFilterContext();
				this.m_dataProtection = dataProtection;
			}

			// Token: 0x060086F6 RID: 34550 RVA: 0x0021B660 File Offset: 0x00219860
			internal ProcessingContext(ICatalogItemContext reportContext, Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes showHideType, IGetResource getResourceCallback, EmbeddedImageHashtable embeddedImages, ImageStreamNames imageStreamNames, ErrorContext errorContext, bool reportItemsReferenced, UserProfileState allowUserProfileState, ReportRuntimeSetup reportRuntimeSetup, ReportProcessing.CreateReportChunk createChunkCallback, ChunkManager.ProcessingChunkManager processingChunkManager, int uniqueNameCounter, IDataProtection dataProtection, ref ReportDrillthroughInfo drillthroughInfo)
			{
				this.m_commonInfo = new ReportProcessing.ProcessingContext.CommonInfo(getResourceCallback, allowUserProfileState, reportRuntimeSetup, createChunkCallback, processingChunkManager, uniqueNameCounter, ref drillthroughInfo);
				this.m_inPageSection = true;
				this.m_createPageSectionImageChunks = true;
				this.m_subReportLevel = 0U;
				this.m_reportContext = reportContext;
				this.m_reportObjectModel = null;
				this.m_reportItemsReferenced = reportItemsReferenced;
				this.m_reportItemThisDotValueReferenced = false;
				this.m_showHideInfo = null;
				this.m_dataSourceInfo = null;
				this.m_showHideType = showHideType;
				this.m_embeddedImages = embeddedImages;
				this.m_imageStreamNames = imageStreamNames;
				this.m_abortHelper = null;
				this.m_inPageSection = true;
				this.m_specialDataRegionFilters = null;
				this.m_errorContext = errorContext;
				this.m_processReportParameters = false;
				this.m_pivotRunningValueScopes = null;
				this.m_reportRuntime = null;
				this.m_delayAddingInstanceInfo = false;
				this.m_specialRecursiveAggregates = false;
				this.m_pagination = new ReportProcessing.Pagination(0.0);
				this.m_navigationInfo = new ReportProcessing.NavigationInfo();
				this.m_userSortFilterContext = new UserSortFilterContext();
				this.m_dataProtection = dataProtection;
			}

			// Token: 0x060086F7 RID: 34551 RVA: 0x0021B770 File Offset: 0x00219970
			protected ProcessingContext(ReportProcessing.ProcessingContext copy)
			{
				this.m_commonInfo = copy.m_commonInfo;
				this.m_subReportLevel = copy.m_subReportLevel;
				this.m_reportContext = copy.m_reportContext;
				this.m_threadCulture = copy.m_threadCulture;
				this.m_reportObjectModel = new ObjectModelImpl(copy.ReportObjectModel, this);
				this.m_reportItemsReferenced = copy.ReportItemsReferenced;
				this.m_reportItemThisDotValueReferenced = false;
				this.m_showHideInfo = copy.m_showHideInfo;
				this.m_dataSourceInfo = copy.m_dataSourceInfo;
				this.m_showHideType = copy.m_showHideType;
				this.m_embeddedImages = copy.m_embeddedImages;
				this.m_imageStreamNames = copy.m_imageStreamNames;
				this.m_abortHelper = copy.m_abortHelper;
				this.m_inPageSection = copy.m_inPageSection;
				this.m_specialDataRegionFilters = null;
				this.m_errorContext = copy.m_errorContext;
				this.m_processReportParameters = copy.m_processReportParameters;
				this.m_pivotRunningValueScopes = null;
				this.m_reportRuntime = ((copy.ReportRuntime == null) ? null : new ReportRuntime(this.m_reportObjectModel, this.m_errorContext, copy.ReportRuntime.ReportExprHost, copy.ReportRuntime));
				this.m_delayAddingInstanceInfo = false;
				this.m_specialRecursiveAggregates = copy.m_specialRecursiveAggregates;
				this.m_pagination = copy.m_pagination;
				this.m_dataSetUniqueName = copy.DataSetUniqueName;
				this.m_navigationInfo = copy.m_navigationInfo;
				this.m_pageSectionContext = copy.PageSectionContext;
				this.m_userSortFilterContext = new UserSortFilterContext(copy.UserSortFilterContext);
				this.m_jobContext = copy.m_jobContext;
				this.m_extFactory = copy.m_extFactory;
				this.m_dataExtensionConnection = copy.m_dataExtensionConnection;
				this.m_dataProtection = copy.m_dataProtection;
			}

			// Token: 0x170029E9 RID: 10729
			// (get) Token: 0x060086F8 RID: 34552 RVA: 0x0021B925 File Offset: 0x00219B25
			public bool EnableDataBackedParameters
			{
				get
				{
					return true;
				}
			}

			// Token: 0x170029EA RID: 10730
			// (get) Token: 0x060086F9 RID: 34553 RVA: 0x0021B928 File Offset: 0x00219B28
			internal ReportProcessing.CreateReportChunk CreateReportChunkCallback
			{
				get
				{
					return this.m_commonInfo.CreateReportChunkCallback;
				}
			}

			// Token: 0x170029EB RID: 10731
			// (get) Token: 0x060086FA RID: 34554 RVA: 0x0021B935 File Offset: 0x00219B35
			// (set) Token: 0x060086FB RID: 34555 RVA: 0x0021B942 File Offset: 0x00219B42
			internal IChunkFactory CreateReportChunkFactory
			{
				get
				{
					return this.m_commonInfo.CreateReportChunkFactory;
				}
				set
				{
					this.m_commonInfo.CreateReportChunkFactory = value;
				}
			}

			// Token: 0x170029EC RID: 10732
			// (get) Token: 0x060086FC RID: 34556 RVA: 0x0021B950 File Offset: 0x00219B50
			internal bool IsOnePass
			{
				get
				{
					return this.m_commonInfo.IsOnePass;
				}
			}

			// Token: 0x170029ED RID: 10733
			// (get) Token: 0x060086FD RID: 34557 RVA: 0x0021B95D File Offset: 0x00219B5D
			// (set) Token: 0x060086FE RID: 34558 RVA: 0x0021B96A File Offset: 0x00219B6A
			internal long DataProcessingDurationMs
			{
				get
				{
					return this.m_commonInfo.DataProcessingDurationMs;
				}
				set
				{
					this.m_commonInfo.DataProcessingDurationMs = value;
				}
			}

			// Token: 0x170029EE RID: 10734
			// (get) Token: 0x060086FF RID: 34559 RVA: 0x0021B978 File Offset: 0x00219B78
			internal string OWCChartName
			{
				get
				{
					return this.m_commonInfo.OWCChartName;
				}
			}

			// Token: 0x170029EF RID: 10735
			// (get) Token: 0x06008700 RID: 34560 RVA: 0x0021B985 File Offset: 0x00219B85
			// (set) Token: 0x06008701 RID: 34561 RVA: 0x0021B992 File Offset: 0x00219B92
			internal OWCChartInstanceInfo OWCChartInstance
			{
				get
				{
					return this.m_commonInfo.OWCChartInstance;
				}
				set
				{
					this.m_commonInfo.OWCChartInstance = value;
				}
			}

			// Token: 0x170029F0 RID: 10736
			// (get) Token: 0x06008702 RID: 34562 RVA: 0x0021B9A0 File Offset: 0x00219BA0
			internal string RequestUserName
			{
				get
				{
					return this.m_commonInfo.RequestUserName;
				}
			}

			// Token: 0x170029F1 RID: 10737
			// (get) Token: 0x06008703 RID: 34563 RVA: 0x0021B9AD File Offset: 0x00219BAD
			public DateTime ExecutionTime
			{
				get
				{
					return this.m_commonInfo.ExecutionTime;
				}
			}

			// Token: 0x170029F2 RID: 10738
			// (get) Token: 0x06008704 RID: 34564 RVA: 0x0021B9BA File Offset: 0x00219BBA
			internal CultureInfo UserLanguage
			{
				get
				{
					return this.m_commonInfo.UserLanguage;
				}
			}

			// Token: 0x170029F3 RID: 10739
			// (get) Token: 0x06008705 RID: 34565 RVA: 0x0021B9C7 File Offset: 0x00219BC7
			internal ReportProcessing.SubReportCallback SubReportCallback
			{
				get
				{
					return this.m_commonInfo.SubReportCallback;
				}
			}

			// Token: 0x170029F4 RID: 10740
			// (get) Token: 0x06008706 RID: 34566 RVA: 0x0021B9D4 File Offset: 0x00219BD4
			internal UserProfileState HasUserProfileState
			{
				get
				{
					if (this.m_reportObjectModel != null && this.m_reportObjectModel.UserImpl != null)
					{
						return this.m_reportObjectModel.UserImpl.HasUserProfileState;
					}
					return UserProfileState.None;
				}
			}

			// Token: 0x170029F5 RID: 10741
			// (get) Token: 0x06008707 RID: 34567 RVA: 0x0021B9FD File Offset: 0x00219BFD
			internal ChunkManager.ProcessingChunkManager ChunkManager
			{
				get
				{
					return this.m_commonInfo.ChunkManager;
				}
			}

			// Token: 0x170029F6 RID: 10742
			// (get) Token: 0x06008708 RID: 34568 RVA: 0x0021BA0A File Offset: 0x00219C0A
			internal QuickFindHashtable QuickFind
			{
				get
				{
					return this.m_commonInfo.QuickFind;
				}
			}

			// Token: 0x170029F7 RID: 10743
			// (get) Token: 0x06008709 RID: 34569 RVA: 0x0021BA17 File Offset: 0x00219C17
			// (set) Token: 0x0600870A RID: 34570 RVA: 0x0021BA24 File Offset: 0x00219C24
			internal ReportDrillthroughInfo DrillthroughInfo
			{
				get
				{
					return this.m_commonInfo.DrillthroughInfo;
				}
				set
				{
					this.m_commonInfo.DrillthroughInfo = value;
				}
			}

			// Token: 0x170029F8 RID: 10744
			// (get) Token: 0x0600870B RID: 34571 RVA: 0x0021BA32 File Offset: 0x00219C32
			internal int UniqueNameCounter
			{
				get
				{
					return this.m_commonInfo.UniqueNameCounter;
				}
			}

			// Token: 0x170029F9 RID: 10745
			// (get) Token: 0x0600870C RID: 34572 RVA: 0x0021BA3F File Offset: 0x00219C3F
			internal ReportProcessing.ExecutionType InteractiveExecution
			{
				get
				{
					return this.m_commonInfo.InteractiveExecution;
				}
			}

			// Token: 0x170029FA RID: 10746
			// (get) Token: 0x0600870D RID: 34573 RVA: 0x0021BA4C File Offset: 0x00219C4C
			// (set) Token: 0x0600870E RID: 34574 RVA: 0x0021BA59 File Offset: 0x00219C59
			internal bool HasImageStreams
			{
				get
				{
					return this.m_commonInfo.HasImageStreams;
				}
				set
				{
					this.m_commonInfo.HasImageStreams = value;
				}
			}

			// Token: 0x170029FB RID: 10747
			// (get) Token: 0x0600870F RID: 34575 RVA: 0x0021BA67 File Offset: 0x00219C67
			internal UserProfileState AllowUserProfileState
			{
				get
				{
					return this.m_commonInfo.AllowUserProfileState;
				}
			}

			// Token: 0x170029FC RID: 10748
			// (get) Token: 0x06008710 RID: 34576 RVA: 0x0021BA74 File Offset: 0x00219C74
			// (set) Token: 0x06008711 RID: 34577 RVA: 0x0021BA81 File Offset: 0x00219C81
			internal bool HasUserSortFilter
			{
				get
				{
					return this.m_commonInfo.HasUserSortFilter;
				}
				set
				{
					this.m_commonInfo.HasUserSortFilter = value;
				}
			}

			// Token: 0x170029FD RID: 10749
			// (get) Token: 0x06008712 RID: 34578 RVA: 0x0021BA8F File Offset: 0x00219C8F
			// (set) Token: 0x06008713 RID: 34579 RVA: 0x0021BA9C File Offset: 0x00219C9C
			internal bool SaveSnapshotData
			{
				get
				{
					return this.m_commonInfo.SaveSnapshotData;
				}
				set
				{
					this.m_commonInfo.SaveSnapshotData = value;
				}
			}

			// Token: 0x170029FE RID: 10750
			// (get) Token: 0x06008714 RID: 34580 RVA: 0x0021BAAA File Offset: 0x00219CAA
			// (set) Token: 0x06008715 RID: 34581 RVA: 0x0021BAB7 File Offset: 0x00219CB7
			internal bool StopSaveSnapshotDataOnError
			{
				get
				{
					return this.m_commonInfo.StopSaveSnapshotDataOnError;
				}
				set
				{
					this.m_commonInfo.StopSaveSnapshotDataOnError = value;
				}
			}

			// Token: 0x170029FF RID: 10751
			// (get) Token: 0x06008716 RID: 34582 RVA: 0x0021BAC5 File Offset: 0x00219CC5
			// (set) Token: 0x06008717 RID: 34583 RVA: 0x0021BAD2 File Offset: 0x00219CD2
			internal bool ErrorSavingSnapshotData
			{
				get
				{
					return this.m_commonInfo.ErrorSavingSnapshotData;
				}
				set
				{
					this.m_commonInfo.ErrorSavingSnapshotData = value;
				}
			}

			// Token: 0x17002A00 RID: 10752
			// (get) Token: 0x06008718 RID: 34584 RVA: 0x0021BAE0 File Offset: 0x00219CE0
			internal bool IsHistorySnapshot
			{
				get
				{
					return this.m_commonInfo.IsHistorySnapshot;
				}
			}

			// Token: 0x17002A01 RID: 10753
			// (get) Token: 0x06008719 RID: 34585 RVA: 0x0021BAED File Offset: 0x00219CED
			// (set) Token: 0x0600871A RID: 34586 RVA: 0x0021BAFA File Offset: 0x00219CFA
			public bool SnapshotProcessing
			{
				get
				{
					return this.m_commonInfo.SnapshotProcessing;
				}
				set
				{
					this.m_commonInfo.SnapshotProcessing = value;
				}
			}

			// Token: 0x17002A02 RID: 10754
			// (get) Token: 0x0600871B RID: 34587 RVA: 0x0021BB08 File Offset: 0x00219D08
			// (set) Token: 0x0600871C RID: 34588 RVA: 0x0021BB15 File Offset: 0x00219D15
			internal bool UserSortFilterProcessing
			{
				get
				{
					return this.m_commonInfo.UserSortFilterProcessing;
				}
				set
				{
					this.m_commonInfo.UserSortFilterProcessing = value;
				}
			}

			// Token: 0x17002A03 RID: 10755
			// (get) Token: 0x0600871D RID: 34589 RVA: 0x0021BB23 File Offset: 0x00219D23
			// (set) Token: 0x0600871E RID: 34590 RVA: 0x0021BB30 File Offset: 0x00219D30
			internal bool ResetForSubreportDataPrefetch
			{
				get
				{
					return this.m_commonInfo.ResetForSubreportDataPrefetch;
				}
				set
				{
					this.m_commonInfo.ResetForSubreportDataPrefetch = value;
				}
			}

			// Token: 0x17002A04 RID: 10756
			// (get) Token: 0x0600871F RID: 34591 RVA: 0x0021BB3E File Offset: 0x00219D3E
			internal bool ProcessWithCachedData
			{
				get
				{
					return this.m_commonInfo.ProcessWithCachedData;
				}
			}

			// Token: 0x17002A05 RID: 10757
			// (get) Token: 0x06008720 RID: 34592 RVA: 0x0021BB4B File Offset: 0x00219D4B
			internal ReportProcessing.GetReportChunk GetReportChunkCallback
			{
				get
				{
					return this.m_commonInfo.GetReportChunkCallback;
				}
			}

			// Token: 0x17002A06 RID: 10758
			// (get) Token: 0x06008721 RID: 34593 RVA: 0x0021BB58 File Offset: 0x00219D58
			internal ReportProcessing.CreateReportChunk CacheDataCallback
			{
				get
				{
					return this.m_commonInfo.CacheDataCallback;
				}
			}

			// Token: 0x17002A07 RID: 10759
			// (get) Token: 0x06008722 RID: 34594 RVA: 0x0021BB65 File Offset: 0x00219D65
			// (set) Token: 0x06008723 RID: 34595 RVA: 0x0021BB72 File Offset: 0x00219D72
			internal bool DataCached
			{
				get
				{
					return this.m_commonInfo.DataCached;
				}
				set
				{
					this.m_commonInfo.DataCached = value;
				}
			}

			// Token: 0x17002A08 RID: 10760
			// (get) Token: 0x06008724 RID: 34596 RVA: 0x0021BB80 File Offset: 0x00219D80
			// (set) Token: 0x06008725 RID: 34597 RVA: 0x0021BB8D File Offset: 0x00219D8D
			internal Hashtable CachedDataChunkMapping
			{
				get
				{
					return this.m_commonInfo.CachedDataChunkMapping;
				}
				set
				{
					this.m_commonInfo.CachedDataChunkMapping = value;
				}
			}

			// Token: 0x17002A09 RID: 10761
			// (get) Token: 0x06008726 RID: 34598 RVA: 0x0021BB9B File Offset: 0x00219D9B
			// (set) Token: 0x06008727 RID: 34599 RVA: 0x0021BBA8 File Offset: 0x00219DA8
			internal ReportProcessing.CustomReportItemControls CriProcessingControls
			{
				get
				{
					return this.m_commonInfo.CriProcessingControls;
				}
				set
				{
					this.m_commonInfo.CriProcessingControls = value;
				}
			}

			// Token: 0x17002A0A RID: 10762
			// (get) Token: 0x06008728 RID: 34600 RVA: 0x0021BBB6 File Offset: 0x00219DB6
			// (set) Token: 0x06008729 RID: 34601 RVA: 0x0021BBC3 File Offset: 0x00219DC3
			internal EventInformation UserSortFilterInfo
			{
				get
				{
					return this.m_commonInfo.UserSortFilterInfo;
				}
				set
				{
					this.m_commonInfo.UserSortFilterInfo = value;
				}
			}

			// Token: 0x17002A0B RID: 10763
			// (get) Token: 0x0600872A RID: 34602 RVA: 0x0021BBD1 File Offset: 0x00219DD1
			// (set) Token: 0x0600872B RID: 34603 RVA: 0x0021BBDE File Offset: 0x00219DDE
			internal SortFilterEventInfoHashtable OldSortFilterEventInfo
			{
				get
				{
					return this.m_commonInfo.OldSortFilterEventInfo;
				}
				set
				{
					this.m_commonInfo.OldSortFilterEventInfo = value;
				}
			}

			// Token: 0x17002A0C RID: 10764
			// (get) Token: 0x0600872C RID: 34604 RVA: 0x0021BBEC File Offset: 0x00219DEC
			// (set) Token: 0x0600872D RID: 34605 RVA: 0x0021BBF9 File Offset: 0x00219DF9
			internal SortFilterEventInfoHashtable NewSortFilterEventInfo
			{
				get
				{
					return this.m_commonInfo.NewSortFilterEventInfo;
				}
				set
				{
					this.m_commonInfo.NewSortFilterEventInfo = value;
				}
			}

			// Token: 0x17002A0D RID: 10765
			// (get) Token: 0x0600872E RID: 34606 RVA: 0x0021BC07 File Offset: 0x00219E07
			// (set) Token: 0x0600872F RID: 34607 RVA: 0x0021BC14 File Offset: 0x00219E14
			internal RuntimeSortFilterEventInfoList ReportRuntimeUserSortFilterInfo
			{
				get
				{
					return this.m_commonInfo.ReportRuntimeUserSortFilterInfo;
				}
				set
				{
					this.m_commonInfo.ReportRuntimeUserSortFilterInfo = value;
				}
			}

			// Token: 0x17002A0E RID: 10766
			// (get) Token: 0x06008730 RID: 34608 RVA: 0x0021BC22 File Offset: 0x00219E22
			internal ReportRuntimeSetup ReportRuntimeSetup
			{
				get
				{
					return this.m_commonInfo.ReportRuntimeSetup;
				}
			}

			// Token: 0x17002A0F RID: 10767
			// (get) Token: 0x06008731 RID: 34609 RVA: 0x0021BC2F File Offset: 0x00219E2F
			// (set) Token: 0x06008732 RID: 34610 RVA: 0x0021BC37 File Offset: 0x00219E37
			internal CultureInfo ThreadCulture
			{
				get
				{
					return this.m_threadCulture;
				}
				set
				{
					this.m_threadCulture = value;
				}
			}

			// Token: 0x17002A10 RID: 10768
			// (get) Token: 0x06008733 RID: 34611 RVA: 0x0021BC40 File Offset: 0x00219E40
			// (set) Token: 0x06008734 RID: 34612 RVA: 0x0021BC48 File Offset: 0x00219E48
			internal uint LanguageInstanceId
			{
				get
				{
					return this.m_languageInstanceId;
				}
				set
				{
					this.m_languageInstanceId = value;
				}
			}

			// Token: 0x17002A11 RID: 10769
			// (get) Token: 0x06008735 RID: 34613 RVA: 0x0021BC51 File Offset: 0x00219E51
			internal uint SubReportLevel
			{
				get
				{
					return this.m_subReportLevel;
				}
			}

			// Token: 0x17002A12 RID: 10770
			// (get) Token: 0x06008736 RID: 34614 RVA: 0x0021BC59 File Offset: 0x00219E59
			internal ICatalogItemContext ReportContext
			{
				get
				{
					return this.m_reportContext;
				}
			}

			// Token: 0x17002A13 RID: 10771
			// (get) Token: 0x06008737 RID: 34615 RVA: 0x0021BC61 File Offset: 0x00219E61
			// (set) Token: 0x06008738 RID: 34616 RVA: 0x0021BC69 File Offset: 0x00219E69
			internal ReportRuntime ReportRuntime
			{
				get
				{
					return this.m_reportRuntime;
				}
				set
				{
					this.m_reportRuntime = value;
				}
			}

			// Token: 0x17002A14 RID: 10772
			// (get) Token: 0x06008739 RID: 34617 RVA: 0x0021BC72 File Offset: 0x00219E72
			// (set) Token: 0x0600873A RID: 34618 RVA: 0x0021BC7A File Offset: 0x00219E7A
			internal ObjectModelImpl ReportObjectModel
			{
				get
				{
					return this.m_reportObjectModel;
				}
				set
				{
					this.m_reportObjectModel = value;
				}
			}

			// Token: 0x17002A15 RID: 10773
			// (get) Token: 0x0600873B RID: 34619 RVA: 0x0021BC83 File Offset: 0x00219E83
			internal bool ReportItemsReferenced
			{
				get
				{
					return this.m_reportItemsReferenced;
				}
			}

			// Token: 0x17002A16 RID: 10774
			// (get) Token: 0x0600873C RID: 34620 RVA: 0x0021BC8B File Offset: 0x00219E8B
			internal bool ReportItemThisDotValueReferenced
			{
				get
				{
					return this.m_reportItemThisDotValueReferenced;
				}
			}

			// Token: 0x17002A17 RID: 10775
			// (get) Token: 0x0600873D RID: 34621 RVA: 0x0021BC93 File Offset: 0x00219E93
			internal ReportProcessing.DataSourceInfoHashtable GlobalDataSourceInfo
			{
				get
				{
					return this.m_dataSourceInfo;
				}
			}

			// Token: 0x17002A18 RID: 10776
			// (get) Token: 0x0600873E RID: 34622 RVA: 0x0021BC9B File Offset: 0x00219E9B
			internal Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes ShowHideType
			{
				get
				{
					return this.m_showHideType;
				}
			}

			// Token: 0x17002A19 RID: 10777
			// (get) Token: 0x0600873F RID: 34623 RVA: 0x0021BCA3 File Offset: 0x00219EA3
			internal EmbeddedImageHashtable EmbeddedImages
			{
				get
				{
					return this.m_embeddedImages;
				}
			}

			// Token: 0x17002A1A RID: 10778
			// (get) Token: 0x06008740 RID: 34624 RVA: 0x0021BCAB File Offset: 0x00219EAB
			// (set) Token: 0x06008741 RID: 34625 RVA: 0x0021BCB3 File Offset: 0x00219EB3
			internal ImageStreamNames ImageStreamNames
			{
				get
				{
					return this.m_imageStreamNames;
				}
				set
				{
					this.m_imageStreamNames = value;
				}
			}

			// Token: 0x17002A1B RID: 10779
			// (get) Token: 0x06008742 RID: 34626 RVA: 0x0021BCBC File Offset: 0x00219EBC
			internal bool InPageSection
			{
				get
				{
					return this.m_inPageSection;
				}
			}

			// Token: 0x17002A1C RID: 10780
			// (get) Token: 0x06008743 RID: 34627 RVA: 0x0021BCC4 File Offset: 0x00219EC4
			// (set) Token: 0x06008744 RID: 34628 RVA: 0x0021BCCC File Offset: 0x00219ECC
			internal ReportProcessing.ProcessingContext.AbortHelper AbortInfo
			{
				get
				{
					return this.m_abortHelper;
				}
				set
				{
					this.m_abortHelper = value;
				}
			}

			// Token: 0x17002A1D RID: 10781
			// (get) Token: 0x06008745 RID: 34629 RVA: 0x0021BCD5 File Offset: 0x00219ED5
			public ErrorContext ErrorContext
			{
				get
				{
					return this.m_errorContext;
				}
			}

			// Token: 0x17002A1E RID: 10782
			// (get) Token: 0x06008746 RID: 34630 RVA: 0x0021BCDD File Offset: 0x00219EDD
			internal bool ProcessReportParameters
			{
				get
				{
					return this.m_processReportParameters;
				}
			}

			// Token: 0x17002A1F RID: 10783
			// (get) Token: 0x06008747 RID: 34631 RVA: 0x0021BCE5 File Offset: 0x00219EE5
			// (set) Token: 0x06008748 RID: 34632 RVA: 0x0021BCED File Offset: 0x00219EED
			internal MatrixHeadingInstance HeadingInstance
			{
				get
				{
					return this.m_headingInstance;
				}
				set
				{
					this.m_headingInstance = value;
				}
			}

			// Token: 0x17002A20 RID: 10784
			// (get) Token: 0x06008749 RID: 34633 RVA: 0x0021BCF6 File Offset: 0x00219EF6
			// (set) Token: 0x0600874A RID: 34634 RVA: 0x0021BCFE File Offset: 0x00219EFE
			internal MatrixHeadingInstance HeadingInstanceOld
			{
				get
				{
					return this.m_headingInstanceOld;
				}
				set
				{
					this.m_headingInstanceOld = value;
				}
			}

			// Token: 0x17002A21 RID: 10785
			// (get) Token: 0x0600874B RID: 34635 RVA: 0x0021BD07 File Offset: 0x00219F07
			// (set) Token: 0x0600874C RID: 34636 RVA: 0x0021BD0F File Offset: 0x00219F0F
			internal bool DelayAddingInstanceInfo
			{
				get
				{
					return this.m_delayAddingInstanceInfo;
				}
				set
				{
					this.m_delayAddingInstanceInfo = value;
				}
			}

			// Token: 0x17002A22 RID: 10786
			// (get) Token: 0x0600874D RID: 34637 RVA: 0x0021BD18 File Offset: 0x00219F18
			internal bool SpecialRecursiveAggregates
			{
				get
				{
					return this.m_specialRecursiveAggregates;
				}
			}

			// Token: 0x17002A23 RID: 10787
			// (get) Token: 0x0600874E RID: 34638 RVA: 0x0021BD20 File Offset: 0x00219F20
			// (set) Token: 0x0600874F RID: 34639 RVA: 0x0021BD28 File Offset: 0x00219F28
			internal ReportProcessing.ProcessingContext.SecondPassOperations SecondPassOperation
			{
				get
				{
					return this.m_secondPassOperation;
				}
				set
				{
					this.m_secondPassOperation = value;
				}
			}

			// Token: 0x17002A24 RID: 10788
			// (get) Token: 0x06008750 RID: 34640 RVA: 0x0021BD31 File Offset: 0x00219F31
			// (set) Token: 0x06008751 RID: 34641 RVA: 0x0021BD39 File Offset: 0x00219F39
			internal AggregatesImpl GlobalRVCollection
			{
				get
				{
					return this.m_globalRVCollection;
				}
				set
				{
					this.m_globalRVCollection = value;
				}
			}

			// Token: 0x17002A25 RID: 10789
			// (get) Token: 0x06008752 RID: 34642 RVA: 0x0021BD42 File Offset: 0x00219F42
			// (set) Token: 0x06008753 RID: 34643 RVA: 0x0021BD4A File Offset: 0x00219F4A
			internal string TransparentImageGuid
			{
				get
				{
					return this.m_transparentImageGuid;
				}
				set
				{
					this.m_transparentImageGuid = value;
				}
			}

			// Token: 0x17002A26 RID: 10790
			// (get) Token: 0x06008754 RID: 34644 RVA: 0x0021BD53 File Offset: 0x00219F53
			// (set) Token: 0x06008755 RID: 34645 RVA: 0x0021BD5B File Offset: 0x00219F5B
			internal ReportProcessing.Pagination Pagination
			{
				get
				{
					return this.m_pagination;
				}
				set
				{
					this.m_pagination = value;
				}
			}

			// Token: 0x17002A27 RID: 10791
			// (get) Token: 0x06008756 RID: 34646 RVA: 0x0021BD64 File Offset: 0x00219F64
			// (set) Token: 0x06008757 RID: 34647 RVA: 0x0021BD6C File Offset: 0x00219F6C
			internal ReportProcessing.NavigationInfo NavigationInfo
			{
				get
				{
					return this.m_navigationInfo;
				}
				set
				{
					this.m_navigationInfo = value;
				}
			}

			// Token: 0x17002A28 RID: 10792
			// (get) Token: 0x06008758 RID: 34648 RVA: 0x0021BD75 File Offset: 0x00219F75
			// (set) Token: 0x06008759 RID: 34649 RVA: 0x0021BD7D File Offset: 0x00219F7D
			internal CompareInfo CompareInfo
			{
				get
				{
					return this.m_compareInfo;
				}
				set
				{
					this.m_compareInfo = value;
				}
			}

			// Token: 0x17002A29 RID: 10793
			// (get) Token: 0x0600875A RID: 34650 RVA: 0x0021BD86 File Offset: 0x00219F86
			// (set) Token: 0x0600875B RID: 34651 RVA: 0x0021BD8E File Offset: 0x00219F8E
			internal CompareOptions ClrCompareOptions
			{
				get
				{
					return this.m_clrCompareOptions;
				}
				set
				{
					this.m_clrCompareOptions = value;
				}
			}

			// Token: 0x17002A2A RID: 10794
			// (get) Token: 0x0600875C RID: 34652 RVA: 0x0021BD97 File Offset: 0x00219F97
			internal int DataSetUniqueName
			{
				get
				{
					return this.m_dataSetUniqueName;
				}
			}

			// Token: 0x17002A2B RID: 10795
			// (get) Token: 0x0600875D RID: 34653 RVA: 0x0021BD9F File Offset: 0x00219F9F
			internal bool CreatePageSectionImageChunks
			{
				get
				{
					return this.m_createPageSectionImageChunks;
				}
			}

			// Token: 0x17002A2C RID: 10796
			// (get) Token: 0x0600875E RID: 34654 RVA: 0x0021BDA7 File Offset: 0x00219FA7
			// (set) Token: 0x0600875F RID: 34655 RVA: 0x0021BDAF File Offset: 0x00219FAF
			internal ReportProcessing.PageSectionContext PageSectionContext
			{
				get
				{
					return this.m_pageSectionContext;
				}
				set
				{
					this.m_pageSectionContext = value;
				}
			}

			// Token: 0x17002A2D RID: 10797
			// (get) Token: 0x06008760 RID: 34656 RVA: 0x0021BDB8 File Offset: 0x00219FB8
			// (set) Token: 0x06008761 RID: 34657 RVA: 0x0021BDC0 File Offset: 0x00219FC0
			internal UserSortFilterContext UserSortFilterContext
			{
				get
				{
					return this.m_userSortFilterContext;
				}
				set
				{
					this.m_userSortFilterContext = value;
				}
			}

			// Token: 0x17002A2E RID: 10798
			// (get) Token: 0x06008762 RID: 34658 RVA: 0x0021BDC9 File Offset: 0x00219FC9
			// (set) Token: 0x06008763 RID: 34659 RVA: 0x0021BDD6 File Offset: 0x00219FD6
			internal RuntimeSortFilterEventInfoList RuntimeSortFilterInfo
			{
				get
				{
					return this.m_userSortFilterContext.RuntimeSortFilterInfo;
				}
				set
				{
					this.m_userSortFilterContext.RuntimeSortFilterInfo = value;
				}
			}

			// Token: 0x17002A2F RID: 10799
			// (get) Token: 0x06008764 RID: 34660 RVA: 0x0021BDE4 File Offset: 0x00219FE4
			internal IJobContext JobContext
			{
				get
				{
					return this.m_jobContext;
				}
			}

			// Token: 0x17002A30 RID: 10800
			// (get) Token: 0x06008765 RID: 34661 RVA: 0x0021BDEC File Offset: 0x00219FEC
			internal IExtensionFactory ExtFactory
			{
				get
				{
					return this.m_extFactory;
				}
			}

			// Token: 0x17002A31 RID: 10801
			// (get) Token: 0x06008766 RID: 34662 RVA: 0x0021BDF4 File Offset: 0x00219FF4
			internal IProcessingDataExtensionConnection DataExtensionConnection
			{
				get
				{
					return this.m_dataExtensionConnection;
				}
			}

			// Token: 0x17002A32 RID: 10802
			// (get) Token: 0x06008767 RID: 34663 RVA: 0x0021BDFC File Offset: 0x00219FFC
			internal IDataProtection DataProtection
			{
				get
				{
					return this.m_dataProtection;
				}
			}

			// Token: 0x06008768 RID: 34664 RVA: 0x0021BE04 File Offset: 0x0021A004
			internal virtual ReportProcessing.ProcessingContext ParametersContext(ICatalogItemContext reportContext, ProcessingErrorContext subReportErrorContext)
			{
				return null;
			}

			// Token: 0x06008769 RID: 34665 RVA: 0x0021BE07 File Offset: 0x0021A007
			internal virtual ReportProcessing.ProcessingContext SubReportContext(Microsoft.ReportingServices.ReportProcessing.SubReport subReport, int subReportDataSetUniqueName, ProcessingErrorContext subReportErrorContext)
			{
				return null;
			}

			// Token: 0x0600876A RID: 34666 RVA: 0x0021BE0A File Offset: 0x0021A00A
			internal virtual ReportProcessing.ProcessingContext CloneContext(ReportProcessing.ProcessingContext context)
			{
				return null;
			}

			// Token: 0x0600876B RID: 34667 RVA: 0x0021BE0D File Offset: 0x0021A00D
			internal void CheckAndThrowIfAborted()
			{
				if (this.m_abortHelper.GetStatus(this.DataSetUniqueName) != ProcessingStatus.Success)
				{
					this.m_abortHelper.ThrowAbortException(this.DataSetUniqueName);
				}
			}

			// Token: 0x0600876C RID: 34668 RVA: 0x0021BE34 File Offset: 0x0021A034
			internal void RuntimeInitializeReportItemObjs(Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems, bool traverseDataRegions, bool setValue)
			{
				for (int i = 0; i < reportItems.Count; i++)
				{
					this.RuntimeInitializeReportItemObjs(reportItems[i], traverseDataRegions, setValue);
				}
			}

			// Token: 0x0600876D RID: 34669 RVA: 0x0021BE64 File Offset: 0x0021A064
			internal void RuntimeInitializeReportItemObjs(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, bool traverseDataRegions, bool setValue)
			{
				ReportItemImpl reportItemImpl = null;
				if (reportItem == null)
				{
					return;
				}
				if (!(reportItem is Microsoft.ReportingServices.ReportProcessing.DataRegion))
				{
					if (this.m_reportRuntime.ReportExprHost != null)
					{
						reportItem.SetExprHost(this.m_reportRuntime.ReportExprHost, this.m_reportObjectModel);
					}
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.TextBox)
					{
						Microsoft.ReportingServices.ReportProcessing.TextBox textBox = (Microsoft.ReportingServices.ReportProcessing.TextBox)reportItem;
						if (this.m_reportItemsReferenced || textBox.ValueReferenced)
						{
							TextBoxImpl textBoxImpl = new TextBoxImpl(textBox, this.m_reportRuntime, this.m_reportRuntime);
							if (setValue)
							{
								textBoxImpl.SetResult(default(VariantResult));
							}
							if (textBox.ValueReferenced)
							{
								Global.Tracer.Assert(textBox.ExprHost != null, "(textBoxDef.ExprHost != null)");
								this.m_reportItemThisDotValueReferenced = true;
								textBox.TextBoxExprHost.SetTextBox(textBoxImpl);
							}
							if (this.m_reportItemsReferenced)
							{
								reportItemImpl = textBoxImpl;
							}
						}
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle)
					{
						this.RuntimeInitializeReportItemObjs(((Microsoft.ReportingServices.ReportProcessing.Rectangle)reportItem).ReportItems, traverseDataRegions, setValue);
					}
				}
				else
				{
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.CustomReportItem && ((Microsoft.ReportingServices.ReportProcessing.CustomReportItem)reportItem).DataSetName == null && this.m_reportRuntime.ReportExprHost != null)
					{
						reportItem.SetExprHost(this.m_reportRuntime.ReportExprHost, this.m_reportObjectModel);
					}
					if (traverseDataRegions)
					{
						if (this.m_reportRuntime.ReportExprHost != null)
						{
							reportItem.SetExprHost(this.m_reportRuntime.ReportExprHost, this.m_reportObjectModel);
						}
						if (reportItem is List)
						{
							this.RuntimeInitializeReportItemObjs(((List)reportItem).ReportItems, traverseDataRegions, setValue);
						}
						else if (reportItem is Matrix)
						{
							Matrix matrix = (Matrix)reportItem;
							this.RuntimeInitializeReportItemObjs(matrix.CornerReportItems, traverseDataRegions, setValue);
							this.RuntimeInitializeReportItemObjs(matrix.CellReportItems, traverseDataRegions, setValue);
							this.InitializeMatrixHeadingRuntimeObjs(matrix.Rows, (matrix.ExprHost != null) ? matrix.MatrixExprHost.RowGroupingsHost : null, traverseDataRegions, setValue);
							this.InitializeMatrixHeadingRuntimeObjs(matrix.Columns, (matrix.ExprHost != null) ? matrix.MatrixExprHost.ColumnGroupingsHost : null, traverseDataRegions, setValue);
						}
						else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Chart)
						{
							Microsoft.ReportingServices.ReportProcessing.Chart chart = (Microsoft.ReportingServices.ReportProcessing.Chart)reportItem;
							this.InitializeChartHeadingRuntimeObjs(chart.Rows, (chart.ExprHost != null) ? chart.ChartExprHost.RowGroupingsHost : null);
							this.InitializeChartHeadingRuntimeObjs(chart.Columns, (chart.ExprHost != null) ? chart.ChartExprHost.ColumnGroupingsHost : null);
						}
						else if (reportItem is Microsoft.ReportingServices.ReportProcessing.CustomReportItem)
						{
							Microsoft.ReportingServices.ReportProcessing.CustomReportItem customReportItem = (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)reportItem;
							this.InitializeCRIHeadingRuntimeObjs(customReportItem.Rows, (customReportItem.ExprHost == null) ? null : ((CustomReportItemExprHost)customReportItem.ExprHost).DataGroupingHostsRemotable);
							this.InitializeCRIHeadingRuntimeObjs(customReportItem.Columns, (customReportItem.ExprHost == null) ? null : ((CustomReportItemExprHost)customReportItem.ExprHost).DataGroupingHostsRemotable);
						}
						else if (reportItem is Table)
						{
							Table table = (Table)reportItem;
							if (table.HeaderRows != null)
							{
								for (int i = 0; i < table.HeaderRows.Count; i++)
								{
									this.RuntimeInitializeReportItemObjs(table.HeaderRows[i].ReportItems, traverseDataRegions, setValue);
								}
							}
							if (table.FooterRows != null)
							{
								for (int j = 0; j < table.FooterRows.Count; j++)
								{
									this.RuntimeInitializeReportItemObjs(table.FooterRows[j].ReportItems, traverseDataRegions, setValue);
								}
							}
							if (table.TableDetail != null)
							{
								for (int k = 0; k < table.TableDetail.DetailRows.Count; k++)
								{
									this.RuntimeInitializeReportItemObjs(table.TableDetail.DetailRows[k].ReportItems, traverseDataRegions, setValue);
								}
							}
							ReportProcessing.ProcessingContext.InitializeTableGroupRuntimeObjs(table, table.TableGroups, (table.ExprHost != null) ? table.TableExprHost.TableGroupsHost : null, this, this.m_reportObjectModel, traverseDataRegions, setValue);
						}
					}
				}
				if (reportItemImpl != null)
				{
					this.m_reportObjectModel.ReportItemsImpl.Add(reportItemImpl);
				}
			}

			// Token: 0x0600876E RID: 34670 RVA: 0x0021C244 File Offset: 0x0021A444
			internal void InitializeMatrixHeadingRuntimeObjs(MatrixHeading heading, MatrixDynamicGroupExprHost headingExprHost, bool traverseDataRegions, bool setValue)
			{
				while (heading != null)
				{
					this.RuntimeInitializeReportItemObjs(heading.ReportItems, traverseDataRegions, setValue);
					if (heading.Subtotal != null)
					{
						if (heading.HasExprHost && headingExprHost.SubtotalHost != null)
						{
							heading.Subtotal.SetExprHost(headingExprHost.SubtotalHost, this.m_reportObjectModel);
						}
						this.RuntimeInitializeReportItemObjs(heading.Subtotal.ReportItems, traverseDataRegions, setValue);
					}
					if (heading.HasExprHost)
					{
						heading.SetExprHost(headingExprHost, this.m_reportObjectModel);
						headingExprHost = (MatrixDynamicGroupExprHost)headingExprHost.SubGroupHost;
					}
					heading = heading.SubHeading;
				}
			}

			// Token: 0x0600876F RID: 34671 RVA: 0x0021C2D2 File Offset: 0x0021A4D2
			internal void InitializeChartHeadingRuntimeObjs(ChartHeading heading, ChartDynamicGroupExprHost headingExprHost)
			{
				while (heading != null)
				{
					if (heading.HasExprHost)
					{
						heading.SetExprHost(headingExprHost, this.m_reportObjectModel);
						headingExprHost = (ChartDynamicGroupExprHost)headingExprHost.SubGroupHost;
					}
					heading = heading.SubHeading;
				}
			}

			// Token: 0x06008770 RID: 34672 RVA: 0x0021C304 File Offset: 0x0021A504
			internal static void InitializeTableGroupRuntimeObjs(Table table, TableGroup group, TableGroupExprHost groupExprHost, ReportProcessing.ProcessingContext processingContext, ObjectModelImpl reportObjectModel, bool traverseDataRegions, bool setValue)
			{
				while (group != null)
				{
					if (group.HasExprHost)
					{
						group.SetExprHost(groupExprHost, reportObjectModel);
						groupExprHost = (TableGroupExprHost)groupExprHost.SubGroupHost;
					}
					if (processingContext != null)
					{
						if (group.HeaderRows != null)
						{
							for (int i = 0; i < group.HeaderRows.Count; i++)
							{
								processingContext.RuntimeInitializeReportItemObjs(group.HeaderRows[i].ReportItems, traverseDataRegions, setValue);
							}
						}
						if (group.FooterRows != null)
						{
							for (int j = 0; j < group.FooterRows.Count; j++)
							{
								processingContext.RuntimeInitializeReportItemObjs(group.FooterRows[j].ReportItems, traverseDataRegions, setValue);
							}
						}
					}
					group = group.SubGroup;
				}
				if (table.TableDetail != null && table.TableDetail.HasExprHost)
				{
					table.TableDetail.SetExprHost(groupExprHost, reportObjectModel);
				}
			}

			// Token: 0x06008771 RID: 34673 RVA: 0x0021C3DC File Offset: 0x0021A5DC
			internal void InitializeCRIHeadingRuntimeObjs(CustomReportItemHeadingList headings, IList<DataGroupingExprHost> headingExprHosts)
			{
				if (headings == null)
				{
					return;
				}
				for (int i = 0; i < headings.Count; i++)
				{
					if (headings[i].HasExprHost)
					{
						headings[i].SetExprHost(headingExprHosts, this.m_reportObjectModel);
						if (headings[i].ExprHostID >= 0 && headingExprHosts[headings[i].ExprHostID].DataGroupingHostsRemotable != null)
						{
							Global.Tracer.Assert(headings[i].InnerHeadings != null, "(null != headings[i].InnerHeadings)");
							this.InitializeCRIHeadingRuntimeObjs(headings[i].InnerHeadings, headingExprHosts[headings[i].ExprHostID].DataGroupingHostsRemotable);
						}
					}
				}
			}

			// Token: 0x06008772 RID: 34674 RVA: 0x0021C497 File Offset: 0x0021A697
			internal void EndIgnoreRange()
			{
				Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
				this.m_showHideInfo.EndIgnoreRange();
			}

			// Token: 0x06008773 RID: 34675 RVA: 0x0021C4BC File Offset: 0x0021A6BC
			internal void RegisterIgnoreRange()
			{
				Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
				this.m_showHideInfo.RegisterIgnoreRange();
			}

			// Token: 0x06008774 RID: 34676 RVA: 0x0021C4E1 File Offset: 0x0021A6E1
			internal void UnRegisterIgnoreRange()
			{
				Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
				this.m_showHideInfo.UnRegisterIgnoreRange();
			}

			// Token: 0x17002A33 RID: 10803
			// (set) Token: 0x06008775 RID: 34677 RVA: 0x0021C506 File Offset: 0x0021A706
			internal bool IgnoreAllFromStart
			{
				set
				{
					Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
					this.m_showHideInfo.IgnoreAllFromStart = value;
				}
			}

			// Token: 0x17002A34 RID: 10804
			// (set) Token: 0x06008776 RID: 34678 RVA: 0x0021C52C File Offset: 0x0021A72C
			internal bool UseAllContainers
			{
				set
				{
					Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
					this.m_showHideInfo.UseAllContainers = value;
				}
			}

			// Token: 0x06008777 RID: 34679 RVA: 0x0021C552 File Offset: 0x0021A752
			internal void BeginProcessContainer(int uniqueName, Microsoft.ReportingServices.ReportProcessing.Visibility visibility)
			{
				if (visibility != null && visibility.Toggle != null)
				{
					Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
					this.m_showHideInfo.RegisterContainer(uniqueName);
				}
			}

			// Token: 0x06008778 RID: 34680 RVA: 0x0021C583 File Offset: 0x0021A783
			internal void EndProcessContainer(int uniqueName, Microsoft.ReportingServices.ReportProcessing.Visibility visibility)
			{
				if (visibility != null && visibility.Toggle != null)
				{
					Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
					this.m_showHideInfo.UnRegisterContainer(uniqueName);
				}
			}

			// Token: 0x06008779 RID: 34681 RVA: 0x0021C5B4 File Offset: 0x0021A7B4
			internal bool ProcessSender(int uniqueName, bool startHidden, Microsoft.ReportingServices.ReportProcessing.TextBox textBox)
			{
				bool flag = false;
				if (textBox.InitialToggleState != null)
				{
					flag = this.m_reportRuntime.EvaluateTextBoxInitialToggleStateExpression(textBox);
				}
				if (textBox.IsToggle)
				{
					Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
					this.m_showHideInfo.RegisterSender(textBox.Name, uniqueName, startHidden, textBox.RecursiveSender);
				}
				return flag;
			}

			// Token: 0x0600877A RID: 34682 RVA: 0x0021C614 File Offset: 0x0021A814
			internal bool ProcessReceiver(int uniqueName, Microsoft.ReportingServices.ReportProcessing.Visibility visibility, IVisibilityHiddenExprHost visibilityExprHostRI, Microsoft.ReportingServices.ReportProcessing.ObjectType objectType, string objectName)
			{
				bool flag = false;
				if (visibility != null)
				{
					flag = this.m_reportRuntime.EvaluateStartHiddenExpression(visibility, visibilityExprHostRI, objectType, objectName);
					if (visibility.Toggle != null)
					{
						Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
						this.m_showHideInfo.RegisterReceiver(visibility.Toggle, uniqueName, flag, visibility.RecursiveReceiver);
					}
				}
				return flag;
			}

			// Token: 0x0600877B RID: 34683 RVA: 0x0021C674 File Offset: 0x0021A874
			internal bool ProcessReceiver(int uniqueName, Microsoft.ReportingServices.ReportProcessing.Visibility visibility, IndexedExprHost visibilityExprHostIdx, Microsoft.ReportingServices.ReportProcessing.ObjectType objectType, string objectName)
			{
				bool flag = false;
				if (visibility != null)
				{
					flag = this.m_reportRuntime.EvaluateStartHiddenExpression(visibility, visibilityExprHostIdx, objectType, objectName);
					if (visibility.Toggle != null)
					{
						Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
						this.m_showHideInfo.RegisterReceiver(visibility.Toggle, uniqueName, flag, visibility.RecursiveReceiver);
					}
				}
				return flag;
			}

			// Token: 0x0600877C RID: 34684 RVA: 0x0021C6D2 File Offset: 0x0021A8D2
			internal void EnterGrouping()
			{
				Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
				this.m_showHideInfo.EnterGrouping();
			}

			// Token: 0x0600877D RID: 34685 RVA: 0x0021C6F7 File Offset: 0x0021A8F7
			internal void EnterChildGroupings()
			{
				Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
				this.m_showHideInfo.EnterChildGroupings();
			}

			// Token: 0x0600877E RID: 34686 RVA: 0x0021C71C File Offset: 0x0021A91C
			internal void ExitGrouping()
			{
				Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
				this.m_showHideInfo.ExitGrouping();
			}

			// Token: 0x0600877F RID: 34687 RVA: 0x0021C741 File Offset: 0x0021A941
			internal void ExitChildGroupings()
			{
				Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
				this.m_showHideInfo.ExitChildGroupings();
			}

			// Token: 0x06008780 RID: 34688 RVA: 0x0021C766 File Offset: 0x0021A966
			internal void GetSenderAndReceiverInfo(out SenderInformationHashtable senderInfo, out ReceiverInformationHashtable receiverInfo)
			{
				Global.Tracer.Assert(this.m_showHideInfo != null, "(null != m_showHideInfo)");
				this.m_showHideInfo.GetSenderAndReceiverInfo(out senderInfo, out receiverInfo);
			}

			// Token: 0x06008781 RID: 34689 RVA: 0x0021C78D File Offset: 0x0021A98D
			internal void AddSpecialDataRegionFilters(Filters filters)
			{
				if (this.m_specialDataRegionFilters == null)
				{
					this.m_specialDataRegionFilters = new FiltersList();
				}
				this.m_specialDataRegionFilters.Add(filters);
			}

			// Token: 0x06008782 RID: 34690 RVA: 0x0021C7B0 File Offset: 0x0021A9B0
			private void ProcessDataRegionsWithSpecialFilters()
			{
				if (this.m_specialDataRegionFilters != null)
				{
					int num = this.m_specialDataRegionFilters.Count;
					for (int i = 0; i < num; i++)
					{
						this.m_specialDataRegionFilters[i].FinishReadingRows();
						num = this.m_specialDataRegionFilters.Count;
					}
					this.m_specialDataRegionFilters = null;
				}
			}

			// Token: 0x06008783 RID: 34691 RVA: 0x0021C801 File Offset: 0x0021AA01
			internal void EnterPivotCell(bool escalateScope)
			{
				if (this.m_pivotRunningValueScopes == null)
				{
					this.m_pivotRunningValueScopes = new List<bool>();
				}
				this.m_pivotRunningValueScopes.Add(escalateScope);
			}

			// Token: 0x06008784 RID: 34692 RVA: 0x0021C822 File Offset: 0x0021AA22
			internal void ExitPivotCell()
			{
				Global.Tracer.Assert(this.m_pivotRunningValueScopes != null, "(null != m_pivotRunningValueScopes)");
				this.m_pivotRunningValueScopes.RemoveAt(this.m_pivotRunningValueScopes.Count - 1);
			}

			// Token: 0x06008785 RID: 34693 RVA: 0x0021C854 File Offset: 0x0021AA54
			internal bool PivotEscalateScope()
			{
				return this.m_pivotRunningValueScopes != null && 0 < this.m_pivotRunningValueScopes.Count && this.m_pivotRunningValueScopes[this.m_pivotRunningValueScopes.Count - 1];
			}

			// Token: 0x06008786 RID: 34694 RVA: 0x0021C886 File Offset: 0x0021AA86
			internal bool PopulateRuntimeSortFilterEventInfo(Microsoft.ReportingServices.ReportProcessing.DataSet myDataSet)
			{
				return this.m_userSortFilterContext.PopulateRuntimeSortFilterEventInfo(this, myDataSet);
			}

			// Token: 0x06008787 RID: 34695 RVA: 0x0021C895 File Offset: 0x0021AA95
			internal bool IsSortFilterTarget(bool[] isSortFilterTarget, ReportProcessing.IScope outerScope, ReportProcessing.IHierarchyObj target, ref RuntimeUserSortTargetInfo userSortTargetInfo)
			{
				return this.m_userSortFilterContext.IsSortFilterTarget(isSortFilterTarget, outerScope, target, ref userSortTargetInfo);
			}

			// Token: 0x06008788 RID: 34696 RVA: 0x0021C8A7 File Offset: 0x0021AAA7
			internal EventInformation GetUserSortFilterInformation(ref int oldUniqueName, ref int page)
			{
				return this.m_commonInfo.GetUserSortFilterInformation(ref oldUniqueName, ref page);
			}

			// Token: 0x06008789 RID: 34697 RVA: 0x0021C8B6 File Offset: 0x0021AAB6
			internal void RegisterSortFilterExpressionScope(ReportProcessing.IScope container, ReportProcessing.RuntimeDataRegionObj scopeObj, bool[] isSortFilterExpressionScope)
			{
				this.m_userSortFilterContext.RegisterSortFilterExpressionScope(container, scopeObj, isSortFilterExpressionScope);
			}

			// Token: 0x0600878A RID: 34698 RVA: 0x0021C8C6 File Offset: 0x0021AAC6
			internal void ProcessUserSortForTarget(ReportProcessing.IHierarchyObj target, ref ReportProcessing.DataRowList dataRows, bool targetForNonDetailSort)
			{
				this.m_userSortFilterContext.ProcessUserSortForTarget(this.m_reportObjectModel, this.m_reportRuntime, target, ref dataRows, targetForNonDetailSort);
			}

			// Token: 0x0600878B RID: 34699 RVA: 0x0021C8E4 File Offset: 0x0021AAE4
			internal ProcessingMessageList RegisterComparisonErrorForSortFilterEvent(string propertyName)
			{
				Global.Tracer.Assert(this.m_userSortFilterContext.CurrentSortFilterEventSource != null, "(null != m_userSortFilterContext.CurrentSortFilterEventSource)");
				this.m_errorContext.Register(ProcessingErrorCode.rsComparisonError, Severity.Error, this.m_userSortFilterContext.CurrentSortFilterEventSource.ObjectType, this.m_userSortFilterContext.CurrentSortFilterEventSource.Name, propertyName, Array.Empty<string>());
				return this.m_errorContext.Messages;
			}

			// Token: 0x0600878C RID: 34700 RVA: 0x0021C951 File Offset: 0x0021AB51
			internal void FirstPassPostProcess()
			{
				do
				{
					this.ProcessDataRegionsWithSpecialFilters();
				}
				while (this.m_userSortFilterContext.ProcessUserSort(this));
			}

			// Token: 0x0600878D RID: 34701 RVA: 0x0021C968 File Offset: 0x0021AB68
			internal VariantList[] GetScopeValues(GroupingList containingScopes, ReportProcessing.IScope containingScope)
			{
				VariantList[] array = null;
				if (containingScopes != null && 0 < containingScopes.Count)
				{
					array = new VariantList[containingScopes.Count];
					int num = 0;
					containingScope.GetScopeValues(null, array, ref num);
				}
				return array;
			}

			// Token: 0x0600878E RID: 34702 RVA: 0x0021C99C File Offset: 0x0021AB9C
			internal int CreateUniqueName()
			{
				return this.m_commonInfo.CreateUniqueName();
			}

			// Token: 0x0600878F RID: 34703 RVA: 0x0021C9A9 File Offset: 0x0021ABA9
			internal int CreateIDForSubreport()
			{
				return this.m_commonInfo.CreateIDForSubreport();
			}

			// Token: 0x06008790 RID: 34704 RVA: 0x0021C9B6 File Offset: 0x0021ABB6
			internal int GetLastIDForReport()
			{
				return this.m_commonInfo.GetLastIDForReport();
			}

			// Token: 0x06008791 RID: 34705 RVA: 0x0021C9C4 File Offset: 0x0021ABC4
			internal bool GetResource(string path, out byte[] resource, out string mimeType)
			{
				if (this.m_commonInfo.GetResourceCallback != null)
				{
					bool flag;
					bool flag2;
					this.m_commonInfo.GetResourceCallback.GetResource(this.m_reportContext, path, out resource, out mimeType, out flag, out flag2);
					if (flag)
					{
						this.ErrorContext.Register(ProcessingErrorCode.rsWarningFetchingExternalImages, Severity.Warning, Microsoft.ReportingServices.ReportProcessing.ObjectType.Report, null, null, Array.Empty<string>());
					}
					return true;
				}
				resource = null;
				mimeType = null;
				return false;
			}

			// Token: 0x04004874 RID: 18548
			private ReportProcessing.ProcessingContext.AbortHelper m_abortHelper;

			// Token: 0x04004875 RID: 18549
			private ReportProcessing.ProcessingContext.CommonInfo m_commonInfo;

			// Token: 0x04004876 RID: 18550
			private uint m_subReportLevel;

			// Token: 0x04004877 RID: 18551
			private ICatalogItemContext m_reportContext;

			// Token: 0x04004878 RID: 18552
			private ObjectModelImpl m_reportObjectModel;

			// Token: 0x04004879 RID: 18553
			private bool m_reportItemsReferenced;

			// Token: 0x0400487A RID: 18554
			private bool m_reportItemThisDotValueReferenced;

			// Token: 0x0400487B RID: 18555
			private ReportProcessing.ProcessingContext.ShowHideInfo m_showHideInfo;

			// Token: 0x0400487C RID: 18556
			private ReportProcessing.DataSourceInfoHashtable m_dataSourceInfo;

			// Token: 0x0400487D RID: 18557
			private Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes m_showHideType;

			// Token: 0x0400487E RID: 18558
			private EmbeddedImageHashtable m_embeddedImages;

			// Token: 0x0400487F RID: 18559
			private ImageStreamNames m_imageStreamNames;

			// Token: 0x04004880 RID: 18560
			private bool m_inPageSection;

			// Token: 0x04004881 RID: 18561
			private FiltersList m_specialDataRegionFilters;

			// Token: 0x04004882 RID: 18562
			private ErrorContext m_errorContext;

			// Token: 0x04004883 RID: 18563
			private bool m_processReportParameters;

			// Token: 0x04004884 RID: 18564
			private List<bool> m_pivotRunningValueScopes;

			// Token: 0x04004885 RID: 18565
			private ReportRuntime m_reportRuntime;

			// Token: 0x04004886 RID: 18566
			private MatrixHeadingInstance m_headingInstance;

			// Token: 0x04004887 RID: 18567
			private MatrixHeadingInstance m_headingInstanceOld;

			// Token: 0x04004888 RID: 18568
			private bool m_delayAddingInstanceInfo;

			// Token: 0x04004889 RID: 18569
			private bool m_specialRecursiveAggregates;

			// Token: 0x0400488A RID: 18570
			private ReportProcessing.ProcessingContext.SecondPassOperations m_secondPassOperation;

			// Token: 0x0400488B RID: 18571
			private CultureInfo m_threadCulture;

			// Token: 0x0400488C RID: 18572
			private uint m_languageInstanceId;

			// Token: 0x0400488D RID: 18573
			private AggregatesImpl m_globalRVCollection;

			// Token: 0x0400488E RID: 18574
			private string m_transparentImageGuid;

			// Token: 0x0400488F RID: 18575
			private ReportProcessing.Pagination m_pagination;

			// Token: 0x04004890 RID: 18576
			private ReportProcessing.NavigationInfo m_navigationInfo;

			// Token: 0x04004891 RID: 18577
			private CompareInfo m_compareInfo = Thread.CurrentThread.CurrentCulture.CompareInfo;

			// Token: 0x04004892 RID: 18578
			private CompareOptions m_clrCompareOptions;

			// Token: 0x04004893 RID: 18579
			private int m_dataSetUniqueName = -1;

			// Token: 0x04004894 RID: 18580
			private bool m_createPageSectionImageChunks;

			// Token: 0x04004895 RID: 18581
			private ReportProcessing.PageSectionContext m_pageSectionContext;

			// Token: 0x04004896 RID: 18582
			private UserSortFilterContext m_userSortFilterContext;

			// Token: 0x04004897 RID: 18583
			private IJobContext m_jobContext;

			// Token: 0x04004898 RID: 18584
			private IExtensionFactory m_extFactory;

			// Token: 0x04004899 RID: 18585
			private IProcessingDataExtensionConnection m_dataExtensionConnection;

			// Token: 0x0400489A RID: 18586
			private IDataProtection m_dataProtection;

			// Token: 0x02000D3C RID: 3388
			[Flags]
			internal enum SecondPassOperations
			{
				// Token: 0x040050B3 RID: 20659
				Sorting = 1,
				// Token: 0x040050B4 RID: 20660
				Filtering = 2
			}

			// Token: 0x02000D3D RID: 3389
			internal sealed class AbortHelper : IAbortHelper, IDisposable
			{
				// Token: 0x06008F64 RID: 36708 RVA: 0x00246E79 File Offset: 0x00245079
				internal AbortHelper(IJobContext jobContext)
				{
					this.m_reportStatus = new Hashtable();
					if (jobContext != null)
					{
						this.m_jobContext = jobContext;
						jobContext.AddAbortHelper(this);
					}
				}

				// Token: 0x06008F65 RID: 36709 RVA: 0x00246E9D File Offset: 0x0024509D
				internal void ThrowAbortException(int reportUniqueName)
				{
					if (this.GetStatus(reportUniqueName) == ProcessingStatus.AbnormalTermination)
					{
						throw new ProcessingAbortedException(this.m_exception);
					}
					throw new ProcessingAbortedException();
				}

				// Token: 0x06008F66 RID: 36710 RVA: 0x00246EBA File Offset: 0x002450BA
				public bool Abort(ProcessingStatus status)
				{
					return this.Abort(-1, status);
				}

				// Token: 0x06008F67 RID: 36711 RVA: 0x00246EC4 File Offset: 0x002450C4
				internal bool Abort(int reportUniqueName, ProcessingStatus status)
				{
					if (!Monitor.TryEnter(this))
					{
						if (Global.Tracer.TraceInfo)
						{
							Global.Tracer.Trace(TraceLevel.Info, "Some other thread is aborting processing.");
						}
						return false;
					}
					if (this.GetStatus(reportUniqueName) != ProcessingStatus.Success)
					{
						if (Global.Tracer.TraceInfo)
						{
							Global.Tracer.Trace(TraceLevel.Info, "Some other thread has already aborted processing.");
						}
						Monitor.Exit(this);
						return false;
					}
					bool flag = false;
					try
					{
						this.SetStatus(reportUniqueName, status);
						if (this.ProcessingAbortEvent != null)
						{
							try
							{
								this.ProcessingAbortEvent(this, new ReportProcessing.ProcessingAbortEventArgs(reportUniqueName));
								flag = true;
								if (Global.Tracer.TraceVerbose)
								{
									Global.Tracer.Trace(TraceLevel.Verbose, "Abort callback successful.");
								}
								return flag;
							}
							catch (Exception ex)
							{
								if (Global.Tracer.TraceError)
								{
									Global.Tracer.Trace(TraceLevel.Error, "Exception in abort callback. Details: {0}", new object[] { ex.ToString() });
								}
								return flag;
							}
						}
						if (Global.Tracer.TraceVerbose)
						{
							Global.Tracer.Trace(TraceLevel.Verbose, "No abort callback.");
						}
					}
					finally
					{
						Monitor.Exit(this);
					}
					return flag;
				}

				// Token: 0x06008F68 RID: 36712 RVA: 0x00246FD8 File Offset: 0x002451D8
				internal void AddSubreportInstance(int subreportInstanceUniqueName)
				{
					Hashtable hashtable = Hashtable.Synchronized(this.m_reportStatus);
					Global.Tracer.Assert(!hashtable.ContainsKey(subreportInstanceUniqueName), "(false == reportStatus.ContainsKey(subreportInstanceUniqueName))");
					hashtable.Add(subreportInstanceUniqueName, ProcessingStatus.Success);
				}

				// Token: 0x06008F69 RID: 36713 RVA: 0x00247024 File Offset: 0x00245224
				internal ProcessingStatus GetStatus(int uniqueName)
				{
					if (-1 == uniqueName)
					{
						return this.m_overallStatus;
					}
					Global.Tracer.Assert(this.m_reportStatus.ContainsKey(uniqueName), "(m_reportStatus.ContainsKey(uniqueName))");
					return (ProcessingStatus)this.m_reportStatus[uniqueName];
				}

				// Token: 0x06008F6A RID: 36714 RVA: 0x00247074 File Offset: 0x00245274
				private void SetStatus(int uniqueName, ProcessingStatus newStatus)
				{
					if (-1 == uniqueName)
					{
						this.m_overallStatus = newStatus;
						return;
					}
					Hashtable hashtable = Hashtable.Synchronized(this.m_reportStatus);
					Global.Tracer.Assert(hashtable.ContainsKey(uniqueName), "(reportStatus.ContainsKey(uniqueName))");
					hashtable[uniqueName] = newStatus;
				}

				// Token: 0x06008F6B RID: 36715 RVA: 0x002470C8 File Offset: 0x002452C8
				internal bool SetError(int reportUniqueName, Exception e)
				{
					if (Global.Tracer.TraceVerbose)
					{
						Global.Tracer.Trace(TraceLevel.Verbose, "An exception has occurred. Trying to abort processing. Details: {0}", new object[] { e.ToString() });
					}
					this.m_exception = e;
					return this.Abort(reportUniqueName, ProcessingStatus.AbnormalTermination);
				}

				// Token: 0x14000003 RID: 3
				// (add) Token: 0x06008F6C RID: 36716 RVA: 0x00247114 File Offset: 0x00245314
				// (remove) Token: 0x06008F6D RID: 36717 RVA: 0x0024714C File Offset: 0x0024534C
				internal event EventHandler ProcessingAbortEvent;

				// Token: 0x06008F6E RID: 36718 RVA: 0x00247181 File Offset: 0x00245381
				public void Dispose()
				{
					if (this.m_jobContext != null)
					{
						this.m_jobContext.RemoveAbortHelper();
					}
				}

				// Token: 0x040050B6 RID: 20662
				private ProcessingStatus m_overallStatus;

				// Token: 0x040050B7 RID: 20663
				private Exception m_exception;

				// Token: 0x040050B8 RID: 20664
				private Hashtable m_reportStatus;

				// Token: 0x040050B9 RID: 20665
				private IJobContext m_jobContext;
			}

			// Token: 0x02000D3E RID: 3390
			private sealed class CommonInfo
			{
				// Token: 0x06008F6F RID: 36719 RVA: 0x00247198 File Offset: 0x00245398
				internal CommonInfo(string owcChartName, string requestUserName, CultureInfo userLanguage, ReportProcessing.SubReportCallback subReportCallback, Microsoft.ReportingServices.ReportProcessing.Report report, ReportProcessing.CreateReportChunk createReportChunkCallback, IGetResource getResourceCallback, ReportProcessing.ExecutionType interactiveExecution, DateTime executionTime, UserProfileState allowUserProfileState, bool isHistorySnapshot, bool snapshotProcessing, bool processWithCachedData, ReportProcessing.GetReportChunk getChunkCallback, ReportProcessing.CreateReportChunk cacheDataCallback, ReportRuntimeSetup reportRuntimeSetup)
				{
					this.m_uniqueNameCounter = 0;
					this.m_dataProcessingDurationMs = 0L;
					this.m_owcChartName = owcChartName;
					this.m_owcChartInstance = null;
					this.m_requestUserName = requestUserName;
					this.m_userLanguage = userLanguage;
					this.m_subReportCallback = subReportCallback;
					this.m_isOnePass = report != null && report.MergeOnePass;
					this.m_createReportChunkCallback = createReportChunkCallback;
					this.m_chunkManager = new ChunkManager.ProcessingChunkManager(createReportChunkCallback, this.m_isOnePass);
					this.m_quickFind = new QuickFindHashtable();
					this.m_drillthroughInfo = new ReportDrillthroughInfo();
					this.m_getResourceCallback = getResourceCallback;
					this.m_idCounterForSubreports = ((report == null) ? 0 : report.LastID);
					this.m_interactiveExecution = interactiveExecution;
					this.m_hasImageStreams = false;
					this.m_executionTime = executionTime;
					this.m_allowUserProfileState = allowUserProfileState;
					this.m_isHistorySnapshot = isHistorySnapshot;
					this.m_snapshotProcessing = snapshotProcessing;
					this.m_processWithCachedData = processWithCachedData;
					this.m_getReportChunkCallback = getChunkCallback;
					this.m_cacheDataCallback = cacheDataCallback;
					if (cacheDataCallback != null)
					{
						this.m_dataCached = true;
					}
					this.m_cachedDataChunkMapping = new Hashtable();
					this.m_criControls = new ReportProcessing.CustomReportItemControls();
					this.m_reportRuntimeSetup = reportRuntimeSetup;
				}

				// Token: 0x06008F70 RID: 36720 RVA: 0x002472B8 File Offset: 0x002454B8
				internal CommonInfo(IGetResource getResourceCallback, UserProfileState allowUserProfileState, ReportRuntimeSetup reportRuntimeSetup)
				{
					this.m_uniqueNameCounter = 0;
					this.m_dataProcessingDurationMs = 0L;
					this.m_owcChartName = null;
					this.m_owcChartInstance = null;
					this.m_requestUserName = null;
					this.m_userLanguage = null;
					this.m_subReportCallback = null;
					this.m_chunkManager = null;
					this.m_createReportChunkCallback = null;
					this.m_quickFind = new QuickFindHashtable();
					this.m_drillthroughInfo = new ReportDrillthroughInfo();
					this.m_getResourceCallback = getResourceCallback;
					this.m_idCounterForSubreports = 0;
					this.m_interactiveExecution = ReportProcessing.ExecutionType.Live;
					this.m_hasImageStreams = false;
					this.m_executionTime = DateTime.MinValue;
					this.m_allowUserProfileState = allowUserProfileState;
					this.m_snapshotProcessing = false;
					this.m_processWithCachedData = false;
					this.m_getReportChunkCallback = null;
					this.m_cacheDataCallback = null;
					this.m_dataCached = false;
					this.m_cachedDataChunkMapping = null;
					this.m_criControls = new ReportProcessing.CustomReportItemControls();
					this.m_reportRuntimeSetup = reportRuntimeSetup;
				}

				// Token: 0x06008F71 RID: 36721 RVA: 0x00247394 File Offset: 0x00245594
				internal CommonInfo(IGetResource getResourceCallback, UserProfileState allowUserProfileState, ReportRuntimeSetup reportRuntimeSetup, ReportProcessing.CreateReportChunk createChunkCallback, ChunkManager.ProcessingChunkManager processingChunkManager, int uniqueNameCounter, ref ReportDrillthroughInfo drillthroughInfo)
				{
					this.m_uniqueNameCounter = uniqueNameCounter;
					this.m_dataProcessingDurationMs = 0L;
					this.m_owcChartName = null;
					this.m_owcChartInstance = null;
					this.m_requestUserName = null;
					this.m_userLanguage = null;
					this.m_subReportCallback = null;
					this.m_chunkManager = processingChunkManager;
					this.m_createReportChunkCallback = createChunkCallback;
					this.m_quickFind = new QuickFindHashtable();
					this.m_getResourceCallback = getResourceCallback;
					this.m_idCounterForSubreports = 0;
					this.m_interactiveExecution = ReportProcessing.ExecutionType.Live;
					this.m_hasImageStreams = false;
					this.m_executionTime = DateTime.MinValue;
					this.m_allowUserProfileState = allowUserProfileState;
					this.m_snapshotProcessing = false;
					this.m_processWithCachedData = false;
					this.m_getReportChunkCallback = null;
					this.m_cacheDataCallback = null;
					this.m_dataCached = false;
					this.m_cachedDataChunkMapping = null;
					this.m_criControls = new ReportProcessing.CustomReportItemControls();
					this.m_reportRuntimeSetup = reportRuntimeSetup;
					if (drillthroughInfo == null)
					{
						drillthroughInfo = new ReportDrillthroughInfo();
					}
					this.m_drillthroughInfo = drillthroughInfo;
				}

				// Token: 0x17002BF3 RID: 11251
				// (get) Token: 0x06008F72 RID: 36722 RVA: 0x0024747C File Offset: 0x0024567C
				internal IGetResource GetResourceCallback
				{
					get
					{
						return this.m_getResourceCallback;
					}
				}

				// Token: 0x17002BF4 RID: 11252
				// (get) Token: 0x06008F73 RID: 36723 RVA: 0x00247484 File Offset: 0x00245684
				internal ReportProcessing.CreateReportChunk CreateReportChunkCallback
				{
					get
					{
						return this.m_createReportChunkCallback;
					}
				}

				// Token: 0x17002BF5 RID: 11253
				// (get) Token: 0x06008F74 RID: 36724 RVA: 0x0024748C File Offset: 0x0024568C
				// (set) Token: 0x06008F75 RID: 36725 RVA: 0x00247494 File Offset: 0x00245694
				internal IChunkFactory CreateReportChunkFactory
				{
					get
					{
						return this.m_createReportChunkFactory;
					}
					set
					{
						this.m_createReportChunkFactory = value;
					}
				}

				// Token: 0x17002BF6 RID: 11254
				// (get) Token: 0x06008F76 RID: 36726 RVA: 0x0024749D File Offset: 0x0024569D
				internal bool IsOnePass
				{
					get
					{
						return this.m_isOnePass;
					}
				}

				// Token: 0x17002BF7 RID: 11255
				// (get) Token: 0x06008F77 RID: 36727 RVA: 0x002474A5 File Offset: 0x002456A5
				// (set) Token: 0x06008F78 RID: 36728 RVA: 0x002474AD File Offset: 0x002456AD
				internal long DataProcessingDurationMs
				{
					get
					{
						return this.m_dataProcessingDurationMs;
					}
					set
					{
						this.m_dataProcessingDurationMs = value;
					}
				}

				// Token: 0x17002BF8 RID: 11256
				// (get) Token: 0x06008F79 RID: 36729 RVA: 0x002474B6 File Offset: 0x002456B6
				internal string OWCChartName
				{
					get
					{
						return this.m_owcChartName;
					}
				}

				// Token: 0x17002BF9 RID: 11257
				// (get) Token: 0x06008F7A RID: 36730 RVA: 0x002474BE File Offset: 0x002456BE
				// (set) Token: 0x06008F7B RID: 36731 RVA: 0x002474C6 File Offset: 0x002456C6
				internal OWCChartInstanceInfo OWCChartInstance
				{
					get
					{
						return this.m_owcChartInstance;
					}
					set
					{
						this.m_owcChartInstance = value;
					}
				}

				// Token: 0x17002BFA RID: 11258
				// (get) Token: 0x06008F7C RID: 36732 RVA: 0x002474CF File Offset: 0x002456CF
				internal string RequestUserName
				{
					get
					{
						return this.m_requestUserName;
					}
				}

				// Token: 0x17002BFB RID: 11259
				// (get) Token: 0x06008F7D RID: 36733 RVA: 0x002474D7 File Offset: 0x002456D7
				internal DateTime ExecutionTime
				{
					get
					{
						return this.m_executionTime;
					}
				}

				// Token: 0x17002BFC RID: 11260
				// (get) Token: 0x06008F7E RID: 36734 RVA: 0x002474DF File Offset: 0x002456DF
				internal CultureInfo UserLanguage
				{
					get
					{
						return this.m_userLanguage;
					}
				}

				// Token: 0x17002BFD RID: 11261
				// (get) Token: 0x06008F7F RID: 36735 RVA: 0x002474E7 File Offset: 0x002456E7
				internal ReportProcessing.SubReportCallback SubReportCallback
				{
					get
					{
						return this.m_subReportCallback;
					}
				}

				// Token: 0x17002BFE RID: 11262
				// (get) Token: 0x06008F80 RID: 36736 RVA: 0x002474EF File Offset: 0x002456EF
				internal ChunkManager.ProcessingChunkManager ChunkManager
				{
					get
					{
						return this.m_chunkManager;
					}
				}

				// Token: 0x17002BFF RID: 11263
				// (get) Token: 0x06008F81 RID: 36737 RVA: 0x002474F7 File Offset: 0x002456F7
				internal QuickFindHashtable QuickFind
				{
					get
					{
						return this.m_quickFind;
					}
				}

				// Token: 0x17002C00 RID: 11264
				// (get) Token: 0x06008F82 RID: 36738 RVA: 0x002474FF File Offset: 0x002456FF
				// (set) Token: 0x06008F83 RID: 36739 RVA: 0x00247507 File Offset: 0x00245707
				internal ReportDrillthroughInfo DrillthroughInfo
				{
					get
					{
						return this.m_drillthroughInfo;
					}
					set
					{
						this.m_drillthroughInfo = value;
					}
				}

				// Token: 0x17002C01 RID: 11265
				// (get) Token: 0x06008F84 RID: 36740 RVA: 0x00247510 File Offset: 0x00245710
				internal int UniqueNameCounter
				{
					get
					{
						return this.m_uniqueNameCounter;
					}
				}

				// Token: 0x17002C02 RID: 11266
				// (get) Token: 0x06008F85 RID: 36741 RVA: 0x00247518 File Offset: 0x00245718
				internal ReportProcessing.ExecutionType InteractiveExecution
				{
					get
					{
						return this.m_interactiveExecution;
					}
				}

				// Token: 0x17002C03 RID: 11267
				// (get) Token: 0x06008F86 RID: 36742 RVA: 0x00247520 File Offset: 0x00245720
				// (set) Token: 0x06008F87 RID: 36743 RVA: 0x00247528 File Offset: 0x00245728
				internal bool HasImageStreams
				{
					get
					{
						return this.m_hasImageStreams;
					}
					set
					{
						this.m_hasImageStreams = value;
					}
				}

				// Token: 0x17002C04 RID: 11268
				// (get) Token: 0x06008F88 RID: 36744 RVA: 0x00247531 File Offset: 0x00245731
				internal UserProfileState AllowUserProfileState
				{
					get
					{
						return this.m_allowUserProfileState;
					}
				}

				// Token: 0x17002C05 RID: 11269
				// (get) Token: 0x06008F89 RID: 36745 RVA: 0x00247539 File Offset: 0x00245739
				internal bool IsHistorySnapshot
				{
					get
					{
						return this.m_isHistorySnapshot;
					}
				}

				// Token: 0x17002C06 RID: 11270
				// (get) Token: 0x06008F8A RID: 36746 RVA: 0x00247541 File Offset: 0x00245741
				// (set) Token: 0x06008F8B RID: 36747 RVA: 0x00247549 File Offset: 0x00245749
				internal bool SnapshotProcessing
				{
					get
					{
						return this.m_snapshotProcessing;
					}
					set
					{
						this.m_snapshotProcessing = value;
					}
				}

				// Token: 0x17002C07 RID: 11271
				// (get) Token: 0x06008F8C RID: 36748 RVA: 0x00247552 File Offset: 0x00245752
				// (set) Token: 0x06008F8D RID: 36749 RVA: 0x0024755A File Offset: 0x0024575A
				internal bool UserSortFilterProcessing
				{
					get
					{
						return this.m_userSortFilterProcessing;
					}
					set
					{
						this.m_userSortFilterProcessing = value;
					}
				}

				// Token: 0x17002C08 RID: 11272
				// (get) Token: 0x06008F8E RID: 36750 RVA: 0x00247563 File Offset: 0x00245763
				// (set) Token: 0x06008F8F RID: 36751 RVA: 0x0024756B File Offset: 0x0024576B
				internal bool ResetForSubreportDataPrefetch
				{
					get
					{
						return this.m_resetForSubreportDataPrefetch;
					}
					set
					{
						this.m_resetForSubreportDataPrefetch = value;
					}
				}

				// Token: 0x17002C09 RID: 11273
				// (get) Token: 0x06008F90 RID: 36752 RVA: 0x00247574 File Offset: 0x00245774
				internal bool ProcessWithCachedData
				{
					get
					{
						return this.m_processWithCachedData;
					}
				}

				// Token: 0x17002C0A RID: 11274
				// (get) Token: 0x06008F91 RID: 36753 RVA: 0x0024757C File Offset: 0x0024577C
				internal ReportProcessing.GetReportChunk GetReportChunkCallback
				{
					get
					{
						return this.m_getReportChunkCallback;
					}
				}

				// Token: 0x17002C0B RID: 11275
				// (get) Token: 0x06008F92 RID: 36754 RVA: 0x00247584 File Offset: 0x00245784
				internal ReportProcessing.CreateReportChunk CacheDataCallback
				{
					get
					{
						return this.m_cacheDataCallback;
					}
				}

				// Token: 0x17002C0C RID: 11276
				// (get) Token: 0x06008F93 RID: 36755 RVA: 0x0024758C File Offset: 0x0024578C
				// (set) Token: 0x06008F94 RID: 36756 RVA: 0x00247594 File Offset: 0x00245794
				internal bool HasUserSortFilter
				{
					get
					{
						return this.m_hasUserSortFilter;
					}
					set
					{
						this.m_hasUserSortFilter = value;
					}
				}

				// Token: 0x17002C0D RID: 11277
				// (get) Token: 0x06008F95 RID: 36757 RVA: 0x0024759D File Offset: 0x0024579D
				// (set) Token: 0x06008F96 RID: 36758 RVA: 0x002475A5 File Offset: 0x002457A5
				internal bool SaveSnapshotData
				{
					get
					{
						return this.m_saveSnapshotData;
					}
					set
					{
						this.m_saveSnapshotData = value;
					}
				}

				// Token: 0x17002C0E RID: 11278
				// (get) Token: 0x06008F97 RID: 36759 RVA: 0x002475AE File Offset: 0x002457AE
				// (set) Token: 0x06008F98 RID: 36760 RVA: 0x002475B6 File Offset: 0x002457B6
				internal bool StopSaveSnapshotDataOnError
				{
					get
					{
						return this.m_stopSaveSnapshotDataOnError;
					}
					set
					{
						this.m_stopSaveSnapshotDataOnError = value;
					}
				}

				// Token: 0x17002C0F RID: 11279
				// (get) Token: 0x06008F99 RID: 36761 RVA: 0x002475BF File Offset: 0x002457BF
				// (set) Token: 0x06008F9A RID: 36762 RVA: 0x002475C8 File Offset: 0x002457C8
				internal bool ErrorSavingSnapshotData
				{
					get
					{
						return this.m_errorSavingSnapshotData;
					}
					set
					{
						lock (this)
						{
							this.m_errorSavingSnapshotData = value;
						}
					}
				}

				// Token: 0x17002C10 RID: 11280
				// (get) Token: 0x06008F9B RID: 36763 RVA: 0x00247604 File Offset: 0x00245804
				// (set) Token: 0x06008F9C RID: 36764 RVA: 0x0024760C File Offset: 0x0024580C
				internal bool DataCached
				{
					get
					{
						return this.m_dataCached;
					}
					set
					{
						lock (this)
						{
							this.m_dataCached = value;
						}
					}
				}

				// Token: 0x17002C11 RID: 11281
				// (get) Token: 0x06008F9D RID: 36765 RVA: 0x00247648 File Offset: 0x00245848
				// (set) Token: 0x06008F9E RID: 36766 RVA: 0x00247650 File Offset: 0x00245850
				internal Hashtable CachedDataChunkMapping
				{
					get
					{
						return this.m_cachedDataChunkMapping;
					}
					set
					{
						lock (this)
						{
							this.m_cachedDataChunkMapping = value;
						}
					}
				}

				// Token: 0x17002C12 RID: 11282
				// (get) Token: 0x06008F9F RID: 36767 RVA: 0x0024768C File Offset: 0x0024588C
				// (set) Token: 0x06008FA0 RID: 36768 RVA: 0x00247694 File Offset: 0x00245894
				internal ReportProcessing.CustomReportItemControls CriProcessingControls
				{
					get
					{
						return this.m_criControls;
					}
					set
					{
						lock (this)
						{
							this.m_criControls = value;
						}
					}
				}

				// Token: 0x17002C13 RID: 11283
				// (get) Token: 0x06008FA1 RID: 36769 RVA: 0x002476D0 File Offset: 0x002458D0
				// (set) Token: 0x06008FA2 RID: 36770 RVA: 0x002476D8 File Offset: 0x002458D8
				internal EventInformation UserSortFilterInfo
				{
					get
					{
						return this.m_userSortFilterInfo;
					}
					set
					{
						this.m_userSortFilterInfo = value;
					}
				}

				// Token: 0x17002C14 RID: 11284
				// (get) Token: 0x06008FA3 RID: 36771 RVA: 0x002476E1 File Offset: 0x002458E1
				// (set) Token: 0x06008FA4 RID: 36772 RVA: 0x002476E9 File Offset: 0x002458E9
				internal SortFilterEventInfoHashtable OldSortFilterEventInfo
				{
					get
					{
						return this.m_oldSortFilterEventInfo;
					}
					set
					{
						this.m_oldSortFilterEventInfo = value;
					}
				}

				// Token: 0x17002C15 RID: 11285
				// (get) Token: 0x06008FA5 RID: 36773 RVA: 0x002476F2 File Offset: 0x002458F2
				// (set) Token: 0x06008FA6 RID: 36774 RVA: 0x002476FA File Offset: 0x002458FA
				internal SortFilterEventInfoHashtable NewSortFilterEventInfo
				{
					get
					{
						return this.m_newSortFilterEventInfo;
					}
					set
					{
						this.m_newSortFilterEventInfo = value;
					}
				}

				// Token: 0x17002C16 RID: 11286
				// (get) Token: 0x06008FA7 RID: 36775 RVA: 0x00247703 File Offset: 0x00245903
				// (set) Token: 0x06008FA8 RID: 36776 RVA: 0x0024770B File Offset: 0x0024590B
				internal RuntimeSortFilterEventInfoList ReportRuntimeUserSortFilterInfo
				{
					get
					{
						return this.m_reportRuntimeUserSortFilterInfo;
					}
					set
					{
						this.m_reportRuntimeUserSortFilterInfo = value;
					}
				}

				// Token: 0x17002C17 RID: 11287
				// (get) Token: 0x06008FA9 RID: 36777 RVA: 0x00247714 File Offset: 0x00245914
				internal ReportRuntimeSetup ReportRuntimeSetup
				{
					get
					{
						return this.m_reportRuntimeSetup;
					}
				}

				// Token: 0x06008FAA RID: 36778 RVA: 0x0024771C File Offset: 0x0024591C
				internal int CreateUniqueName()
				{
					if (this.m_isOnePass)
					{
						return Interlocked.Increment(ref this.m_uniqueNameCounter);
					}
					int num = this.m_uniqueNameCounter + 1;
					this.m_uniqueNameCounter = num;
					return num;
				}

				// Token: 0x06008FAB RID: 36779 RVA: 0x00247750 File Offset: 0x00245950
				internal int CreateIDForSubreport()
				{
					if (this.m_isOnePass)
					{
						return Interlocked.Increment(ref this.m_idCounterForSubreports);
					}
					int num = this.m_idCounterForSubreports + 1;
					this.m_idCounterForSubreports = num;
					return num;
				}

				// Token: 0x06008FAC RID: 36780 RVA: 0x00247782 File Offset: 0x00245982
				internal int GetLastIDForReport()
				{
					return this.m_idCounterForSubreports;
				}

				// Token: 0x06008FAD RID: 36781 RVA: 0x0024778C File Offset: 0x0024598C
				internal EventInformation GetUserSortFilterInformation(ref int sourceUniqueName, ref int page)
				{
					if (this.m_reportRuntimeUserSortFilterInfo == null || this.m_reportRuntimeUserSortFilterInfo.Count == 0)
					{
						return null;
					}
					EventInformation.SortEventInfo sortEventInfo = new EventInformation.SortEventInfo();
					for (int i = 0; i < this.m_reportRuntimeUserSortFilterInfo.Count; i++)
					{
						RuntimeSortFilterEventInfo runtimeSortFilterEventInfo = this.m_reportRuntimeUserSortFilterInfo[i];
						if (-1 == runtimeSortFilterEventInfo.NewUniqueName)
						{
							runtimeSortFilterEventInfo.NewUniqueName = runtimeSortFilterEventInfo.OldUniqueName;
						}
						Hashtable hashtable = null;
						if (runtimeSortFilterEventInfo.PeerSortFilters != null)
						{
							hashtable = new Hashtable(runtimeSortFilterEventInfo.PeerSortFilters.Count);
							IDictionaryEnumerator enumerator = runtimeSortFilterEventInfo.PeerSortFilters.GetEnumerator();
							while (enumerator.MoveNext())
							{
								if (enumerator.Value != null)
								{
									hashtable.Add(enumerator.Value, null);
								}
							}
						}
						sortEventInfo.Add(runtimeSortFilterEventInfo.NewUniqueName, runtimeSortFilterEventInfo.SortDirection, hashtable);
						if (runtimeSortFilterEventInfo.OldUniqueName == sourceUniqueName)
						{
							sourceUniqueName = runtimeSortFilterEventInfo.NewUniqueName;
							page = runtimeSortFilterEventInfo.Page + 1;
						}
					}
					return new EventInformation
					{
						SortInfo = sortEventInfo
					};
				}

				// Token: 0x040050BA RID: 20666
				private bool m_isOnePass;

				// Token: 0x040050BB RID: 20667
				private int m_uniqueNameCounter;

				// Token: 0x040050BC RID: 20668
				private long m_dataProcessingDurationMs;

				// Token: 0x040050BD RID: 20669
				private string m_owcChartName;

				// Token: 0x040050BE RID: 20670
				private OWCChartInstanceInfo m_owcChartInstance;

				// Token: 0x040050BF RID: 20671
				private string m_requestUserName;

				// Token: 0x040050C0 RID: 20672
				private CultureInfo m_userLanguage;

				// Token: 0x040050C1 RID: 20673
				private ReportProcessing.SubReportCallback m_subReportCallback;

				// Token: 0x040050C2 RID: 20674
				private ChunkManager.ProcessingChunkManager m_chunkManager;

				// Token: 0x040050C3 RID: 20675
				private ReportProcessing.CreateReportChunk m_createReportChunkCallback;

				// Token: 0x040050C4 RID: 20676
				private IChunkFactory m_createReportChunkFactory;

				// Token: 0x040050C5 RID: 20677
				private QuickFindHashtable m_quickFind;

				// Token: 0x040050C6 RID: 20678
				private IGetResource m_getResourceCallback;

				// Token: 0x040050C7 RID: 20679
				private int m_idCounterForSubreports;

				// Token: 0x040050C8 RID: 20680
				private ReportProcessing.ExecutionType m_interactiveExecution;

				// Token: 0x040050C9 RID: 20681
				private bool m_hasImageStreams;

				// Token: 0x040050CA RID: 20682
				private DateTime m_executionTime;

				// Token: 0x040050CB RID: 20683
				private UserProfileState m_allowUserProfileState;

				// Token: 0x040050CC RID: 20684
				private bool m_hasUserSortFilter;

				// Token: 0x040050CD RID: 20685
				private bool m_saveSnapshotData = true;

				// Token: 0x040050CE RID: 20686
				private bool m_stopSaveSnapshotDataOnError;

				// Token: 0x040050CF RID: 20687
				private bool m_errorSavingSnapshotData;

				// Token: 0x040050D0 RID: 20688
				private bool m_isHistorySnapshot;

				// Token: 0x040050D1 RID: 20689
				private bool m_snapshotProcessing;

				// Token: 0x040050D2 RID: 20690
				private bool m_userSortFilterProcessing;

				// Token: 0x040050D3 RID: 20691
				private bool m_resetForSubreportDataPrefetch;

				// Token: 0x040050D4 RID: 20692
				private bool m_processWithCachedData;

				// Token: 0x040050D5 RID: 20693
				private ReportProcessing.GetReportChunk m_getReportChunkCallback;

				// Token: 0x040050D6 RID: 20694
				private ReportProcessing.CreateReportChunk m_cacheDataCallback;

				// Token: 0x040050D7 RID: 20695
				private bool m_dataCached;

				// Token: 0x040050D8 RID: 20696
				private Hashtable m_cachedDataChunkMapping;

				// Token: 0x040050D9 RID: 20697
				private ReportDrillthroughInfo m_drillthroughInfo;

				// Token: 0x040050DA RID: 20698
				private ReportProcessing.CustomReportItemControls m_criControls;

				// Token: 0x040050DB RID: 20699
				private EventInformation m_userSortFilterInfo;

				// Token: 0x040050DC RID: 20700
				private SortFilterEventInfoHashtable m_oldSortFilterEventInfo;

				// Token: 0x040050DD RID: 20701
				private SortFilterEventInfoHashtable m_newSortFilterEventInfo;

				// Token: 0x040050DE RID: 20702
				private RuntimeSortFilterEventInfoList m_reportRuntimeUserSortFilterInfo;

				// Token: 0x040050DF RID: 20703
				private ReportRuntimeSetup m_reportRuntimeSetup;
			}

			// Token: 0x02000D3F RID: 3391
			private sealed class ShowHideInfo
			{
				// Token: 0x06008FAE RID: 36782 RVA: 0x0024787C File Offset: 0x00245A7C
				internal ShowHideInfo()
				{
					this.m_commonInfo = new ReportProcessing.ProcessingContext.ShowHideInfo.CommonInfo();
					this.m_recursiveSenders = new ArrayList();
					this.m_localSenders = new ArrayList();
					this.m_localSenders.Add(null);
					this.m_localReceivers = null;
					this.m_containerUniqueNames = new IntList();
				}

				// Token: 0x06008FAF RID: 36783 RVA: 0x002478D0 File Offset: 0x00245AD0
				internal ShowHideInfo(ReportProcessing.ProcessingContext.ShowHideInfo copy)
				{
					this.m_commonInfo = copy.m_commonInfo;
					this.m_recursiveSenders = new ArrayList();
					this.m_localSenders = new ArrayList();
					this.m_localSenders.Add(null);
					this.m_localReceivers = null;
					this.m_containerUniqueNames = new IntList();
				}

				// Token: 0x06008FB0 RID: 36784 RVA: 0x00247924 File Offset: 0x00245B24
				internal void EnterGrouping()
				{
					this.m_localSenders.Add(null);
				}

				// Token: 0x06008FB1 RID: 36785 RVA: 0x00247933 File Offset: 0x00245B33
				internal void ExitGrouping()
				{
					this.m_localSenders.RemoveAt(this.m_localSenders.Count - 1);
				}

				// Token: 0x06008FB2 RID: 36786 RVA: 0x0024794D File Offset: 0x00245B4D
				internal void EnterChildGroupings()
				{
					this.m_recursiveSenders.Add(null);
				}

				// Token: 0x06008FB3 RID: 36787 RVA: 0x0024795C File Offset: 0x00245B5C
				internal void ExitChildGroupings()
				{
					this.m_recursiveSenders.RemoveAt(this.m_recursiveSenders.Count - 1);
				}

				// Token: 0x06008FB4 RID: 36788 RVA: 0x00247978 File Offset: 0x00245B78
				internal void RegisterSender(string senderName, int senderUniqueName, bool startHidden, bool recursiveSender)
				{
					int[] containerUniqueNames = this.GetContainerUniqueNames();
					ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo senderInfo = new ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo(senderUniqueName, startHidden, containerUniqueNames);
					ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfoList receiverInfoList = this.RemoveLocalReceivers(senderName);
					if (receiverInfoList != null)
					{
						for (int i = 0; i < receiverInfoList.Count; i++)
						{
							this.m_commonInfo.UpdateSenderAndReceiverInfo(senderInfo, receiverInfoList[i]);
						}
					}
					this.AddLocalSender(senderName, senderInfo);
					if (recursiveSender)
					{
						this.AddRecursiveSender(senderName, senderInfo);
					}
				}

				// Token: 0x06008FB5 RID: 36789 RVA: 0x002479D8 File Offset: 0x00245BD8
				internal void RegisterReceiver(string senderName, int receiverUniqueName, bool startHidden, bool recursiveReceiver)
				{
					ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfo receiverInfo = new ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfo(receiverUniqueName, startHidden);
					if (recursiveReceiver)
					{
						ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo senderInfo = this.FindRecursiveSender(senderName);
						if (senderInfo != null)
						{
							this.m_commonInfo.UpdateSenderAndReceiverInfo(senderInfo, receiverInfo);
						}
						return;
					}
					ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo senderInfo2 = this.FindLocalSender(senderName);
					if (senderInfo2 != null)
					{
						this.m_commonInfo.UpdateSenderAndReceiverInfo(senderInfo2, receiverInfo);
						return;
					}
					this.AddLocalReceiver(senderName, receiverInfo);
				}

				// Token: 0x06008FB6 RID: 36790 RVA: 0x00247A2B File Offset: 0x00245C2B
				internal void RegisterContainer(int containerUniqueName)
				{
					this.m_containerUniqueNames.Add(containerUniqueName);
				}

				// Token: 0x06008FB7 RID: 36791 RVA: 0x00247A3F File Offset: 0x00245C3F
				internal void UnRegisterContainer(int containerUniqueName)
				{
					Global.Tracer.Assert(containerUniqueName == this.m_containerUniqueNames[this.m_containerUniqueNames.Count - 1]);
					this.m_containerUniqueNames.RemoveAt(this.m_containerUniqueNames.Count - 1);
				}

				// Token: 0x06008FB8 RID: 36792 RVA: 0x00247A7E File Offset: 0x00245C7E
				internal void GetSenderAndReceiverInfo(out SenderInformationHashtable senderInfo, out ReceiverInformationHashtable receiverInfo)
				{
					this.m_commonInfo.GetSenderAndReceiverInfo(out senderInfo, out receiverInfo);
					this.m_commonInfo = null;
					this.m_recursiveSenders = null;
					this.m_localSenders = null;
					this.m_localReceivers = null;
					this.m_containerUniqueNames = null;
				}

				// Token: 0x06008FB9 RID: 36793 RVA: 0x00247AB0 File Offset: 0x00245CB0
				private void AddRecursiveSender(string senderName, ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo sender)
				{
					Hashtable hashtable = (Hashtable)this.m_recursiveSenders[this.m_recursiveSenders.Count - 1];
					if (hashtable == null)
					{
						hashtable = new Hashtable();
						this.m_recursiveSenders[this.m_recursiveSenders.Count - 1] = hashtable;
					}
					hashtable[senderName] = sender;
				}

				// Token: 0x06008FBA RID: 36794 RVA: 0x00247B08 File Offset: 0x00245D08
				private ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo FindRecursiveSender(string senderName)
				{
					if (this.m_recursiveSenders.Count - 2 >= 0)
					{
						Hashtable hashtable = (Hashtable)this.m_recursiveSenders[this.m_recursiveSenders.Count - 2];
						if (hashtable != null && hashtable.ContainsKey(senderName))
						{
							return (ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo)hashtable[senderName];
						}
					}
					return null;
				}

				// Token: 0x06008FBB RID: 36795 RVA: 0x00247B60 File Offset: 0x00245D60
				private void AddLocalSender(string senderName, ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo sender)
				{
					Hashtable hashtable = (Hashtable)this.m_localSenders[this.m_localSenders.Count - 1];
					if (hashtable == null)
					{
						hashtable = new Hashtable();
						this.m_localSenders[this.m_localSenders.Count - 1] = hashtable;
					}
					hashtable[senderName] = sender;
				}

				// Token: 0x06008FBC RID: 36796 RVA: 0x00247BB8 File Offset: 0x00245DB8
				private ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo FindLocalSender(string senderName)
				{
					for (int i = this.m_localSenders.Count - 1; i >= 0; i--)
					{
						Hashtable hashtable = (Hashtable)this.m_localSenders[i];
						if (hashtable != null && hashtable.ContainsKey(senderName))
						{
							return (ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo)hashtable[senderName];
						}
					}
					return null;
				}

				// Token: 0x06008FBD RID: 36797 RVA: 0x00247C0C File Offset: 0x00245E0C
				private void AddLocalReceiver(string senderName, ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfo receiver)
				{
					if (this.m_localReceivers == null)
					{
						this.m_localReceivers = new Hashtable();
					}
					ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfoList receiverInfoList = (ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfoList)this.m_localReceivers[senderName];
					if (receiverInfoList == null)
					{
						receiverInfoList = new ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfoList();
						this.m_localReceivers[senderName] = receiverInfoList;
					}
					receiverInfoList.Add(receiver);
				}

				// Token: 0x06008FBE RID: 36798 RVA: 0x00247C5C File Offset: 0x00245E5C
				private ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfoList RemoveLocalReceivers(string senderName)
				{
					if (this.m_localReceivers != null)
					{
						ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfoList receiverInfoList = (ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfoList)this.m_localReceivers[senderName];
						if (receiverInfoList != null)
						{
							this.m_localReceivers.Remove(senderName);
							return receiverInfoList;
						}
					}
					return null;
				}

				// Token: 0x06008FBF RID: 36799 RVA: 0x00247C98 File Offset: 0x00245E98
				private int[] GetContainerUniqueNames()
				{
					if (this.m_containerUniqueNames.Count == 0)
					{
						return null;
					}
					int[] array;
					if (this.m_currentIgnoreRange != null)
					{
						array = this.m_currentIgnoreRange.GetContainerUniqueNames(this.m_containerUniqueNames);
					}
					else
					{
						array = new int[this.m_containerUniqueNames.Count];
						this.m_containerUniqueNames.CopyTo(array);
					}
					return array;
				}

				// Token: 0x06008FC0 RID: 36800 RVA: 0x00247CF0 File Offset: 0x00245EF0
				internal void EndIgnoreRange()
				{
					this.m_currentIgnoreRange.EndIgnoreRange = this.m_containerUniqueNames.Count - 1;
				}

				// Token: 0x17002C18 RID: 11288
				// (set) Token: 0x06008FC1 RID: 36801 RVA: 0x00247D0A File Offset: 0x00245F0A
				internal bool IgnoreAllFromStart
				{
					set
					{
						this.m_currentIgnoreRange.IgnoreAllFromStart = value;
					}
				}

				// Token: 0x17002C19 RID: 11289
				// (set) Token: 0x06008FC2 RID: 36802 RVA: 0x00247D18 File Offset: 0x00245F18
				internal bool UseAllContainers
				{
					set
					{
						this.m_currentIgnoreRange.UseAllContainers = value;
					}
				}

				// Token: 0x06008FC3 RID: 36803 RVA: 0x00247D26 File Offset: 0x00245F26
				internal void RegisterIgnoreRange()
				{
					if (this.m_ignoreRangeList == null)
					{
						this.m_ignoreRangeList = new ReportProcessing.ProcessingContext.ShowHideInfo.IgnoreRangeList();
					}
					this.m_currentIgnoreRange = new ReportProcessing.ProcessingContext.ShowHideInfo.IgnoreRange(this.m_containerUniqueNames.Count);
					this.m_ignoreRangeList.Add(this.m_currentIgnoreRange);
				}

				// Token: 0x06008FC4 RID: 36804 RVA: 0x00247D64 File Offset: 0x00245F64
				internal void UnRegisterIgnoreRange()
				{
					this.m_ignoreRangeList.RemoveAt(this.m_ignoreRangeList.Count - 1);
					if (this.m_ignoreRangeList.Count > 0)
					{
						this.m_currentIgnoreRange = this.m_ignoreRangeList[this.m_ignoreRangeList.Count - 1];
						return;
					}
					this.m_currentIgnoreRange = null;
				}

				// Token: 0x040050E0 RID: 20704
				private ReportProcessing.ProcessingContext.ShowHideInfo.CommonInfo m_commonInfo;

				// Token: 0x040050E1 RID: 20705
				private ArrayList m_recursiveSenders;

				// Token: 0x040050E2 RID: 20706
				private ArrayList m_localSenders;

				// Token: 0x040050E3 RID: 20707
				private Hashtable m_localReceivers;

				// Token: 0x040050E4 RID: 20708
				private IntList m_containerUniqueNames;

				// Token: 0x040050E5 RID: 20709
				private ReportProcessing.ProcessingContext.ShowHideInfo.IgnoreRangeList m_ignoreRangeList;

				// Token: 0x040050E6 RID: 20710
				private ReportProcessing.ProcessingContext.ShowHideInfo.IgnoreRange m_currentIgnoreRange;

				// Token: 0x02000D51 RID: 3409
				private sealed class SenderInfo
				{
					// Token: 0x06008FE9 RID: 36841 RVA: 0x00247FD5 File Offset: 0x002461D5
					internal SenderInfo(int uniqueName, bool startHidden, int[] containers)
					{
						this.UniqueName = uniqueName;
						this.StartHidden = startHidden;
						this.Containers = containers;
					}

					// Token: 0x04005104 RID: 20740
					internal int UniqueName;

					// Token: 0x04005105 RID: 20741
					internal bool StartHidden;

					// Token: 0x04005106 RID: 20742
					internal int[] Containers;
				}

				// Token: 0x02000D52 RID: 3410
				private sealed class ReceiverInfo
				{
					// Token: 0x06008FEA RID: 36842 RVA: 0x00247FF2 File Offset: 0x002461F2
					internal ReceiverInfo(int uniqueName, bool startHidden)
					{
						this.UniqueName = uniqueName;
						this.StartHidden = startHidden;
					}

					// Token: 0x04005107 RID: 20743
					internal int UniqueName;

					// Token: 0x04005108 RID: 20744
					internal bool StartHidden;
				}

				// Token: 0x02000D53 RID: 3411
				private sealed class ReceiverInfoList : ArrayList
				{
					// Token: 0x17002C21 RID: 11297
					internal ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfo this[int index]
					{
						get
						{
							return (ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfo)base[index];
						}
					}
				}

				// Token: 0x02000D54 RID: 3412
				private sealed class IgnoreRange
				{
					// Token: 0x06008FED RID: 36845 RVA: 0x0024801E File Offset: 0x0024621E
					internal IgnoreRange(int startIgnoreRange)
					{
						this.m_startIgnoreRangeIndex = startIgnoreRange;
					}

					// Token: 0x17002C22 RID: 11298
					// (set) Token: 0x06008FEE RID: 36846 RVA: 0x00248034 File Offset: 0x00246234
					internal bool IgnoreAllFromStart
					{
						set
						{
							this.m_ignoreFromStart = value;
						}
					}

					// Token: 0x17002C23 RID: 11299
					// (set) Token: 0x06008FEF RID: 36847 RVA: 0x0024803D File Offset: 0x0024623D
					internal bool UseAllContainers
					{
						set
						{
							this.m_useAllContainers = value;
						}
					}

					// Token: 0x17002C24 RID: 11300
					// (set) Token: 0x06008FF0 RID: 36848 RVA: 0x00248046 File Offset: 0x00246246
					internal int EndIgnoreRange
					{
						set
						{
							this.m_endIgnoreRangeIndex = value;
							this.m_useAllContainers = false;
							this.m_ignoreFromStart = false;
						}
					}

					// Token: 0x06008FF1 RID: 36849 RVA: 0x00248060 File Offset: 0x00246260
					internal int[] GetContainerUniqueNames(IntList containerUniqueNames)
					{
						if (containerUniqueNames.Count == 0)
						{
							return null;
						}
						int[] array;
						if (!this.m_useAllContainers)
						{
							int num = containerUniqueNames.Count;
							int num2 = this.m_endIgnoreRangeIndex;
							if (this.m_ignoreFromStart)
							{
								num2 = num - 1;
							}
							if (num2 >= this.m_startIgnoreRangeIndex)
							{
								num -= this.m_endIgnoreRangeIndex - this.m_startIgnoreRangeIndex + 1;
								if (num == 0)
								{
									return null;
								}
								array = new int[num];
								containerUniqueNames.CopyTo(0, array, 0, this.m_startIgnoreRangeIndex);
								containerUniqueNames.CopyTo(num2 + 1, array, this.m_startIgnoreRangeIndex, containerUniqueNames.Count - num2 - 1);
								return array;
							}
						}
						array = new int[containerUniqueNames.Count];
						containerUniqueNames.CopyTo(array);
						return array;
					}

					// Token: 0x04005109 RID: 20745
					private int m_startIgnoreRangeIndex;

					// Token: 0x0400510A RID: 20746
					private int m_endIgnoreRangeIndex;

					// Token: 0x0400510B RID: 20747
					private bool m_useAllContainers = true;

					// Token: 0x0400510C RID: 20748
					private bool m_ignoreFromStart;
				}

				// Token: 0x02000D55 RID: 3413
				private sealed class IgnoreRangeList : ArrayList
				{
					// Token: 0x17002C25 RID: 11301
					internal ReportProcessing.ProcessingContext.ShowHideInfo.IgnoreRange this[int index]
					{
						get
						{
							return (ReportProcessing.ProcessingContext.ShowHideInfo.IgnoreRange)base[index];
						}
					}
				}

				// Token: 0x02000D56 RID: 3414
				private sealed class CommonInfo
				{
					// Token: 0x06008FF4 RID: 36852 RVA: 0x00248118 File Offset: 0x00246318
					internal void UpdateSenderAndReceiverInfo(ReportProcessing.ProcessingContext.ShowHideInfo.SenderInfo sender, ReportProcessing.ProcessingContext.ShowHideInfo.ReceiverInfo receiver)
					{
						SenderInformation senderInformation = null;
						if (this.m_senderInformation == null)
						{
							this.m_senderInformation = new SenderInformationHashtable();
						}
						else
						{
							senderInformation = this.m_senderInformation[sender.UniqueName];
						}
						if (senderInformation == null)
						{
							senderInformation = new SenderInformation(sender.StartHidden, sender.Containers);
							this.m_senderInformation[sender.UniqueName] = senderInformation;
						}
						senderInformation.ReceiverUniqueNames.Add(receiver.UniqueName);
						if (this.m_receiverInformation == null)
						{
							this.m_receiverInformation = new ReceiverInformationHashtable();
						}
						this.m_receiverInformation[receiver.UniqueName] = new ReceiverInformation(receiver.StartHidden, sender.UniqueName);
					}

					// Token: 0x06008FF5 RID: 36853 RVA: 0x002481C1 File Offset: 0x002463C1
					internal void GetSenderAndReceiverInfo(out SenderInformationHashtable senderInformation, out ReceiverInformationHashtable receiverInformation)
					{
						senderInformation = this.m_senderInformation;
						receiverInformation = this.m_receiverInformation;
						this.m_senderInformation = null;
						this.m_receiverInformation = null;
					}

					// Token: 0x0400510D RID: 20749
					private SenderInformationHashtable m_senderInformation;

					// Token: 0x0400510E RID: 20750
					private ReceiverInformationHashtable m_receiverInformation;
				}
			}
		}

		// Token: 0x02000C33 RID: 3123
		public sealed class ReportProcessingContext : ReportProcessing.ProcessingContext
		{
			// Token: 0x06008792 RID: 34706 RVA: 0x0021CA24 File Offset: 0x0021AC24
			internal ReportProcessingContext(string chartName, RuntimeDataSourceInfoCollection dataSourceInfos, string requestUserName, CultureInfo userLanguage, ReportProcessing.SubReportCallback subReportCallback, ICatalogItemContext reportContext, Microsoft.ReportingServices.ReportProcessing.Report report, ErrorContext errorContext, ReportProcessing.CreateReportChunk createReportChunkCallback, IGetResource getResourceCallback, ReportProcessing.ExecutionType interactiveExecution, DateTime executionTime, UserProfileState allowUserProfileState, bool isHistorySnapshot, bool snapshotProcessing, bool processWithCachedData, ReportProcessing.GetReportChunk getChunkCallback, ReportProcessing.CreateReportChunk cacheDataCallback, IProcessingDataExtensionConnection dataExtensionConnection, ReportRuntimeSetup reportRuntimeSetup, IJobContext jobContext, IExtensionFactory extFactory, IDataProtection dataProtection)
				: base(chartName, requestUserName, userLanguage, subReportCallback, reportContext, report, errorContext, createReportChunkCallback, getResourceCallback, interactiveExecution, executionTime, allowUserProfileState, isHistorySnapshot, snapshotProcessing, processWithCachedData, getChunkCallback, cacheDataCallback, reportRuntimeSetup, jobContext, extFactory, dataExtensionConnection, dataProtection)
			{
				this.m_dataSourceInfos = dataSourceInfos;
			}

			// Token: 0x06008793 RID: 34707 RVA: 0x0021CA68 File Offset: 0x0021AC68
			internal ReportProcessingContext(ReportProcessing.ProcessingContext parentContext, RuntimeDataSourceInfoCollection dataSourceInfos, string requestUserName, CultureInfo userlanguage, ICatalogItemContext reportContext, ErrorContext errorContext, ReportProcessing.ExecutionType interactiveExecution, DateTime executionTime, UserProfileState allowUserProfileState, bool snapshotProcessing, IProcessingDataExtensionConnection dataExtensionConnection, ReportRuntimeSetup reportRuntimeSetup, IJobContext jobContext, IExtensionFactory extFactory, IDataProtection dataProtection)
				: base(parentContext, requestUserName, userlanguage, reportContext, errorContext, interactiveExecution, executionTime, allowUserProfileState, snapshotProcessing, reportRuntimeSetup, jobContext, extFactory, dataExtensionConnection, dataProtection)
			{
				this.m_dataSourceInfos = dataSourceInfos;
			}

			// Token: 0x06008794 RID: 34708 RVA: 0x0021CA9C File Offset: 0x0021AC9C
			private ReportProcessingContext(Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ErrorContext errorContext, ReportProcessing.ReportProcessingContext copy, int subReportUniqueName)
				: base(subReport, errorContext, copy, subReportUniqueName)
			{
				this.m_dataSourceInfos = copy.DataSourceInfos;
			}

			// Token: 0x06008795 RID: 34709 RVA: 0x0021CAB5 File Offset: 0x0021ACB5
			private ReportProcessingContext(ReportProcessing.ReportProcessingContext copy)
				: base(copy)
			{
				this.m_dataSourceInfos = copy.DataSourceInfos;
			}

			// Token: 0x06008796 RID: 34710 RVA: 0x0021CACC File Offset: 0x0021ACCC
			internal override ReportProcessing.ProcessingContext ParametersContext(ICatalogItemContext reportContext, ProcessingErrorContext errorContext)
			{
				return new ReportProcessing.ReportProcessingContext(this, this.DataSourceInfos, base.RequestUserName, base.UserLanguage, reportContext, errorContext, base.InteractiveExecution, base.ExecutionTime, base.AllowUserProfileState, base.SnapshotProcessing, base.DataExtensionConnection, base.ReportRuntimeSetup, base.JobContext, base.ExtFactory, base.DataProtection);
			}

			// Token: 0x06008797 RID: 34711 RVA: 0x0021CB29 File Offset: 0x0021AD29
			internal override ReportProcessing.ProcessingContext SubReportContext(Microsoft.ReportingServices.ReportProcessing.SubReport subReport, int subReportDataSetUniqueName, ProcessingErrorContext subReportErrorContext)
			{
				return new ReportProcessing.ReportProcessingContext(subReport, subReportErrorContext, this, subReportDataSetUniqueName);
			}

			// Token: 0x06008798 RID: 34712 RVA: 0x0021CB34 File Offset: 0x0021AD34
			internal override ReportProcessing.ProcessingContext CloneContext(ReportProcessing.ProcessingContext context)
			{
				return new ReportProcessing.ReportProcessingContext((ReportProcessing.ReportProcessingContext)context);
			}

			// Token: 0x17002A35 RID: 10805
			// (get) Token: 0x06008799 RID: 34713 RVA: 0x0021CB41 File Offset: 0x0021AD41
			internal RuntimeDataSourceInfoCollection DataSourceInfos
			{
				get
				{
					return this.m_dataSourceInfos;
				}
			}

			// Token: 0x0400489B RID: 18587
			private RuntimeDataSourceInfoCollection m_dataSourceInfos;
		}

		// Token: 0x02000C34 RID: 3124
		internal sealed class Pagination
		{
			// Token: 0x0600879A RID: 34714 RVA: 0x0021CB49 File Offset: 0x0021AD49
			internal Pagination(double pageMaxHeight)
			{
				this.m_pageMaxHeight = pageMaxHeight;
			}

			// Token: 0x17002A36 RID: 10806
			// (get) Token: 0x0600879B RID: 34715 RVA: 0x0021CB58 File Offset: 0x0021AD58
			internal double PageHeight
			{
				get
				{
					return this.m_pageMaxHeight;
				}
			}

			// Token: 0x17002A37 RID: 10807
			// (get) Token: 0x0600879C RID: 34716 RVA: 0x0021CB60 File Offset: 0x0021AD60
			internal double CurrentPageHeight
			{
				get
				{
					return this.m_currentPageHeight;
				}
			}

			// Token: 0x17002A38 RID: 10808
			// (get) Token: 0x0600879D RID: 34717 RVA: 0x0021CB68 File Offset: 0x0021AD68
			internal bool IgnorePageBreak
			{
				get
				{
					return this.m_ignorePageBreak != 0;
				}
			}

			// Token: 0x17002A39 RID: 10809
			// (get) Token: 0x0600879E RID: 34718 RVA: 0x0021CB73 File Offset: 0x0021AD73
			internal bool IgnoreHeight
			{
				get
				{
					return this.m_ignoreHeight != 0;
				}
			}

			// Token: 0x0600879F RID: 34719 RVA: 0x0021CB7E File Offset: 0x0021AD7E
			internal void EnterIgnorePageBreak(Microsoft.ReportingServices.ReportProcessing.Visibility visibility, bool ignoreAlways)
			{
				if (ignoreAlways || Microsoft.ReportingServices.ReportRendering.SharedHiddenState.Never != Microsoft.ReportingServices.ReportProcessing.Visibility.GetSharedHidden(visibility))
				{
					this.m_ignorePageBreak++;
				}
			}

			// Token: 0x060087A0 RID: 34720 RVA: 0x0021CB9A File Offset: 0x0021AD9A
			internal void LeaveIgnorePageBreak(Microsoft.ReportingServices.ReportProcessing.Visibility visibility, bool ignoreAlways)
			{
				if (ignoreAlways || Microsoft.ReportingServices.ReportRendering.SharedHiddenState.Never != Microsoft.ReportingServices.ReportProcessing.Visibility.GetSharedHidden(visibility))
				{
					this.m_ignorePageBreak--;
				}
				Global.Tracer.Assert(0 <= this.m_ignorePageBreak, "(0 <= m_ignorePageBreak)");
			}

			// Token: 0x060087A1 RID: 34721 RVA: 0x0021CBD1 File Offset: 0x0021ADD1
			internal void EnterIgnoreHeight(bool startHidden)
			{
				if (startHidden)
				{
					this.m_ignoreHeight++;
				}
			}

			// Token: 0x060087A2 RID: 34722 RVA: 0x0021CBE4 File Offset: 0x0021ADE4
			internal void LeaveIgnoreHeight(bool startHidden)
			{
				if (startHidden)
				{
					this.m_ignoreHeight--;
				}
				Global.Tracer.Assert(0 <= this.m_ignoreHeight, "(0 <= m_ignoreHeight)");
			}

			// Token: 0x060087A3 RID: 34723 RVA: 0x0021CC12 File Offset: 0x0021AE12
			internal void CopyPaginationInfo(ReportProcessing.Pagination pagination)
			{
				this.m_ignoreHeight = pagination.m_ignoreHeight;
				this.m_ignorePageBreak = pagination.m_ignorePageBreak;
			}

			// Token: 0x060087A4 RID: 34724 RVA: 0x0021CC2C File Offset: 0x0021AE2C
			internal bool CalculateSoftPageBreak(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, double itemHeight, double distanceBeforeOrAfter, bool ignoreSoftPageBreak)
			{
				return this.CalculateSoftPageBreak(reportItem, itemHeight, distanceBeforeOrAfter, ignoreSoftPageBreak, this.PageBreakAtStart(reportItem));
			}

			// Token: 0x060087A5 RID: 34725 RVA: 0x0021CC40 File Offset: 0x0021AE40
			internal bool CalculateSoftPageBreak(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, double itemHeight, double distanceBeforeOrAfter, bool ignoreSoftPageBreak, bool logicalPageBreak)
			{
				if (!this.IgnorePageBreak && logicalPageBreak)
				{
					if (0.0 == this.m_currentPageHeight)
					{
						return false;
					}
					this.SetCurrentPageHeight(reportItem, 0.0);
					return true;
				}
				else
				{
					if (this.IgnoreHeight)
					{
						return false;
					}
					if (reportItem != null)
					{
						this.ComputeReportItemTrueTop(reportItem);
					}
					this.m_currentPageHeight += itemHeight + distanceBeforeOrAfter;
					if (!this.IgnorePageBreak && this.m_currentPageHeight > this.m_pageMaxHeight && !ignoreSoftPageBreak)
					{
						this.SetCurrentPageHeight(reportItem, 0.0);
						return true;
					}
					return false;
				}
			}

			// Token: 0x060087A6 RID: 34726 RVA: 0x0021CCD4 File Offset: 0x0021AED4
			internal void ProcessEndPage(IPageItem riInstance, Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, bool pageBreakAtEnd, bool childrenOnThisPage)
			{
				riInstance.StartPage = reportItem.StartPage;
				riInstance.EndPage = reportItem.EndPage;
				if (!(reportItem is List))
				{
					this.LeaveIgnoreHeight(reportItem.StartHidden);
				}
				reportItem.BottomInEndPage = this.m_currentPageHeight;
				if (reportItem.Parent != null && reportItem.EndPage > reportItem.Parent.EndPage)
				{
					reportItem.Parent.EndPage = reportItem.EndPage;
					reportItem.Parent.BottomInEndPage = reportItem.BottomInEndPage;
					if (reportItem.Parent is List)
					{
						((List)reportItem.Parent).ContentStartPage = reportItem.EndPage;
					}
				}
				if (!this.IgnorePageBreak && pageBreakAtEnd)
				{
					if (!this.IgnoreHeight)
					{
						this.AddToCurrentPageHeight(reportItem, this.m_pageMaxHeight + 1.0);
					}
					reportItem.ShareMyLastPage = !childrenOnThisPage;
					return;
				}
				if (reportItem.Parent != null)
				{
					reportItem.Parent.ShareMyLastPage = true;
				}
			}

			// Token: 0x060087A7 RID: 34727 RVA: 0x0021CDC8 File Offset: 0x0021AFC8
			internal void ProcessEndGroupPage(double distance, bool pageBreakAtEnd, Microsoft.ReportingServices.ReportProcessing.ReportItem parent, bool childrenOnThisPage, bool startHidden)
			{
				this.LeaveIgnoreHeight(startHidden);
				if (!this.IgnoreHeight)
				{
					this.m_currentPageHeight += distance;
				}
				if (!this.IgnorePageBreak && pageBreakAtEnd)
				{
					if (!this.IgnoreHeight)
					{
						this.m_currentPageHeight += this.m_pageMaxHeight + 1.0;
					}
					if (parent != null)
					{
						parent.ShareMyLastPage = !childrenOnThisPage;
					}
				}
				else if (parent != null)
				{
					parent.ShareMyLastPage = true;
				}
				if (parent != null)
				{
					parent.BottomInEndPage = this.m_currentPageHeight;
				}
			}

			// Token: 0x060087A8 RID: 34728 RVA: 0x0021CE50 File Offset: 0x0021B050
			internal void SetReportItemStartPage(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, bool softPageAtStart)
			{
				Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItemCollection = null;
				int num = reportItem.StartPage;
				Microsoft.ReportingServices.ReportProcessing.ReportItem parent = reportItem.Parent;
				if (parent != null)
				{
					if (parent is Microsoft.ReportingServices.ReportProcessing.Rectangle)
					{
						reportItemCollection = ((Microsoft.ReportingServices.ReportProcessing.Rectangle)parent).ReportItems;
					}
					else if (parent is List)
					{
						reportItemCollection = ((List)parent).ReportItems;
						num = ((List)parent).ContentStartPage;
					}
					else if (parent is Table)
					{
						num = ((Table)parent).CurrentPage;
					}
					else if (parent is Matrix)
					{
						num = ((Matrix)parent).CurrentPage;
					}
					else if (parent is Microsoft.ReportingServices.ReportProcessing.Report)
					{
						reportItemCollection = ((Microsoft.ReportingServices.ReportProcessing.Report)parent).ReportItems;
					}
					if (-1 == num)
					{
						num = parent.StartPage;
					}
				}
				bool flag = false;
				bool flag2 = false;
				if (reportItemCollection != null && reportItem.SiblingAboveMe != null)
				{
					for (int i = 0; i < reportItem.SiblingAboveMe.Count; i++)
					{
						Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem2 = reportItemCollection[reportItem.SiblingAboveMe[i]];
						int num2 = reportItem2.EndPage;
						if (!reportItemCollection.IsReportItemComputed(reportItem.SiblingAboveMe[i]))
						{
							flag = true;
						}
						bool flag3 = reportItem2.TopValue + reportItem2.HeightValue > reportItem.TopValue + 0.0009;
						if (flag3)
						{
							num2 = reportItem2.StartPage;
						}
						if (num2 > num)
						{
							flag2 = false;
						}
						if (!flag3 && this.PageBreakAtEnd(reportItem2))
						{
							flag2 = num2 >= num;
						}
						num = Math.Max(num, num2);
					}
				}
				else if (reportItem.Parent != null)
				{
					num = Math.Max(num, reportItem.Parent.StartPage);
				}
				bool flag4 = this.PageBreakAtStart(reportItem);
				if (flag2 || softPageAtStart || this.CanMoveToNextPage(flag4))
				{
					num++;
					this.m_currentPageHeight = 0.0;
				}
				if (flag && !this.IgnoreHeight && 0.0 == this.m_currentPageHeight)
				{
					this.m_currentPageHeight += 1.0;
					if (flag4)
					{
						if (flag2)
						{
							num++;
						}
						else if (!softPageAtStart)
						{
							num++;
						}
					}
				}
				reportItem.StartPage = num;
				reportItem.EndPage = num;
				if ((reportItem is Microsoft.ReportingServices.ReportProcessing.TextBox || reportItem is Microsoft.ReportingServices.ReportProcessing.Image || reportItem is Microsoft.ReportingServices.ReportProcessing.Chart) && !this.IgnoreHeight && 0.0 == this.m_currentPageHeight)
				{
					this.m_currentPageHeight += 1.0;
				}
				reportItem.TopInStartPage = this.m_currentPageHeight;
				reportItem.BottomInEndPage = this.m_currentPageHeight;
			}

			// Token: 0x060087A9 RID: 34729 RVA: 0x0021D0B4 File Offset: 0x0021B2B4
			internal bool PageBreakAtEnd(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem)
			{
				return reportItem.SoftPageBreak || (reportItem is List && ((List)reportItem).PropagatedPageBreakAtEnd) || (reportItem is Table && ((Table)reportItem).PropagatedPageBreakAtEnd) || (reportItem is Matrix && ((Matrix)reportItem).PropagatedPageBreakAtEnd) || this.CheckPageBreak(reportItem, false);
			}

			// Token: 0x060087AA RID: 34730 RVA: 0x0021D118 File Offset: 0x0021B318
			internal bool PageBreakAtStart(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem)
			{
				return (reportItem is List && ((List)reportItem).PropagatedPageBreakAtStart) || (reportItem is Table && ((Table)reportItem).PropagatedPageBreakAtStart) || (reportItem is Matrix && ((Matrix)reportItem).PropagatedPageBreakAtStart) || this.CheckPageBreak(reportItem, true);
			}

			// Token: 0x060087AB RID: 34731 RVA: 0x0021D174 File Offset: 0x0021B374
			private bool CheckPageBreak(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, bool start)
			{
				if (this.IgnorePageBreak)
				{
					return false;
				}
				if (!(reportItem is Microsoft.ReportingServices.ReportProcessing.DataRegion) && !(reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle))
				{
					return false;
				}
				IPageBreakItem pageBreakItem = (IPageBreakItem)reportItem;
				return pageBreakItem != null && !pageBreakItem.IgnorePageBreaks() && pageBreakItem.HasPageBreaks(start);
			}

			// Token: 0x060087AC RID: 34732 RVA: 0x0021D1BA File Offset: 0x0021B3BA
			internal bool CanMoveToNextPage(bool pageBreakAtStart)
			{
				return !this.IgnorePageBreak && pageBreakAtStart && 0.0 != this.m_currentPageHeight;
			}

			// Token: 0x060087AD RID: 34733 RVA: 0x0021D1E0 File Offset: 0x0021B3E0
			internal void ProcessListRenderingPages(ListInstance listInstance, List listDef)
			{
				RenderingPagesRangesList childrenStartAndEndPages = listInstance.ChildrenStartAndEndPages;
				Global.Tracer.Assert(childrenStartAndEndPages != null, "(null != listPagesList)");
				bool flag = false;
				if (listDef.Grouping == null)
				{
					if (listInstance.NumberOfContentsOnThisPage > 0)
					{
						childrenStartAndEndPages.Add(new RenderingPagesRanges
						{
							StartRow = listInstance.ListContents.Count - listInstance.NumberOfContentsOnThisPage,
							NumberOfDetails = listInstance.NumberOfContentsOnThisPage
						});
						flag = true;
					}
					if (childrenStartAndEndPages != null && childrenStartAndEndPages.Count > 0)
					{
						listDef.EndPage = listDef.StartPage + childrenStartAndEndPages.Count - 1;
					}
					else
					{
						listDef.EndPage = listDef.StartPage;
					}
				}
				else if (childrenStartAndEndPages.Count > 0)
				{
					listDef.StartPage = childrenStartAndEndPages[0].StartPage;
					listDef.EndPage = childrenStartAndEndPages[listInstance.ListContents.Count - 1].EndPage;
					flag = true;
				}
				else
				{
					listDef.EndPage = listDef.StartPage;
				}
				this.ProcessEndPage(listInstance, listDef, this.PageBreakAtEnd(listDef), flag);
			}

			// Token: 0x060087AE RID: 34734 RVA: 0x0021D2E8 File Offset: 0x0021B4E8
			internal void InitProcessTableRenderingPages(TableInstance tableInstance, Table table)
			{
				double headerHeightValue = table.HeaderHeightValue;
				if (!this.IgnorePageBreak && headerHeightValue < this.m_pageMaxHeight && headerHeightValue + this.m_currentPageHeight > this.m_pageMaxHeight)
				{
					this.SetCurrentPageHeight(table, 0.0);
					int num = table.StartPage;
					table.StartPage = num + 1;
					((IPageItem)tableInstance).StartPage = table.StartPage;
					num = tableInstance.CurrentPage;
					tableInstance.CurrentPage = num + 1;
					table.CurrentPage = tableInstance.CurrentPage;
					return;
				}
				if (!this.IgnoreHeight)
				{
					this.AddToCurrentPageHeight(table, headerHeightValue);
				}
			}

			// Token: 0x060087AF RID: 34735 RVA: 0x0021D378 File Offset: 0x0021B578
			internal void InitProcessingTableGroup(TableInstance tableInstance, Table table, TableGroupInstance tableGroupInstance, TableGroup tableGroup, ref RenderingPagesRanges renderingPagesRanges, bool ignorePageBreakAtStart)
			{
				this.EnterIgnorePageBreak(tableGroup.Visibility, false);
				tableGroup.StartPage = tableInstance.CurrentPage;
				if (tableGroup.InnerHierarchy == null && table.TableDetail == null)
				{
					double headerHeightValue = tableGroup.HeaderHeightValue;
					if (!this.IgnorePageBreak && headerHeightValue + this.m_currentPageHeight > this.m_pageMaxHeight)
					{
						this.SetCurrentPageHeight(table, 0.0);
						int num = tableInstance.CurrentPage;
						tableInstance.CurrentPage = num + 1;
						table.CurrentPage = tableInstance.CurrentPage;
					}
					else if (!this.IgnoreHeight)
					{
						this.AddToCurrentPageHeight(table, headerHeightValue);
					}
				}
				if (!ignorePageBreakAtStart)
				{
					bool flag = this.CalculateSoftPageBreak(null, 0.0, 0.0, false, tableGroup.PropagatedPageBreakAtStart || tableGroup.Grouping.PageBreakAtEnd);
					if (!this.IgnorePageBreak && flag)
					{
						this.SetCurrentPageHeight(table, 0.0);
						int num = tableInstance.CurrentPage;
						tableInstance.CurrentPage = num + 1;
						table.CurrentPage = tableInstance.CurrentPage;
					}
				}
				renderingPagesRanges.StartPage = tableInstance.CurrentPage;
			}

			// Token: 0x060087B0 RID: 34736 RVA: 0x0021D490 File Offset: 0x0021B690
			internal void ProcessTableDetails(Table tableDef, TableDetailInstance detailInstance, IList detailInstances, ref double detailHeightValue, TableRowList rowDefs, RenderingPagesRangesList pagesList, ref int numberOfChildrenOnThisPage)
			{
				if (-1.0 == detailHeightValue)
				{
					detailHeightValue = tableDef.DetailHeightValue;
				}
				if (!this.IgnoreHeight)
				{
					this.AddToCurrentPageHeight(tableDef, detailHeightValue);
				}
				if (!this.IgnorePageBreak && this.m_currentPageHeight >= this.m_pageMaxHeight && numberOfChildrenOnThisPage > 0)
				{
					RenderingPagesRanges renderingPagesRanges = default(RenderingPagesRanges);
					renderingPagesRanges.StartRow = detailInstances.Count - numberOfChildrenOnThisPage;
					renderingPagesRanges.NumberOfDetails = numberOfChildrenOnThisPage;
					this.SetCurrentPageHeight(tableDef, 0.0);
					int currentPage = tableDef.CurrentPage;
					tableDef.CurrentPage = currentPage + 1;
					pagesList.Add(renderingPagesRanges);
					numberOfChildrenOnThisPage = 1;
					return;
				}
				numberOfChildrenOnThisPage++;
			}

			// Token: 0x060087B1 RID: 34737 RVA: 0x0021D540 File Offset: 0x0021B740
			internal void ProcessTableRenderingPages(TableInstance tableInstance, Table reportItem)
			{
				this.ProcessEndPage(tableInstance, reportItem, this.PageBreakAtEnd(reportItem), tableInstance.NumberOfChildrenOnThisPage > 0);
				reportItem.EndPage = tableInstance.CurrentPage;
				reportItem.CurrentPage = tableInstance.CurrentPage;
			}

			// Token: 0x060087B2 RID: 34738 RVA: 0x0021D574 File Offset: 0x0021B774
			internal void ComputeReportItemTrueTop(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem)
			{
				Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItemCollection = null;
				int num = reportItem.StartPage;
				Microsoft.ReportingServices.ReportProcessing.ReportItem parent = reportItem.Parent;
				double num2 = 0.0;
				if (parent != null)
				{
					if (parent is Microsoft.ReportingServices.ReportProcessing.Rectangle)
					{
						reportItemCollection = ((Microsoft.ReportingServices.ReportProcessing.Rectangle)parent).ReportItems;
						num2 = parent.TopInStartPage;
					}
					else if (parent is List)
					{
						reportItemCollection = ((List)parent).ReportItems;
						num = ((List)parent).ContentStartPage;
						num2 = parent.BottomInEndPage;
					}
					else if (parent is Table)
					{
						num = ((Table)parent).CurrentPage;
						num2 = parent.BottomInEndPage;
					}
					else if (parent is Matrix)
					{
						num = ((Matrix)parent).CurrentPage;
						num2 = parent.BottomInEndPage;
					}
					else if (parent is Microsoft.ReportingServices.ReportProcessing.Report)
					{
						reportItemCollection = ((Microsoft.ReportingServices.ReportProcessing.Report)parent).ReportItems;
						num2 = parent.TopInStartPage;
					}
					if (-1 == num)
					{
						num = parent.StartPage;
					}
				}
				if (reportItemCollection != null && reportItem.SiblingAboveMe != null)
				{
					for (int i = 0; i < reportItem.SiblingAboveMe.Count; i++)
					{
						Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem2 = reportItemCollection[reportItem.SiblingAboveMe[i]];
						int num3 = reportItem2.EndPage;
						double num4 = reportItem2.BottomInEndPage;
						if (reportItem2.TopValue + reportItem2.HeightValue > reportItem.TopValue + 0.0009)
						{
							num3 = reportItem2.StartPage;
							num4 = reportItem2.TopInStartPage;
						}
						if (num3 > num)
						{
							num = num3;
							num2 = num4;
						}
						else if (num3 == num)
						{
							num2 = Math.Max(num2, num4);
						}
					}
				}
				this.m_currentPageHeight = num2;
				reportItem.TopInStartPage = num2;
			}

			// Token: 0x060087B3 RID: 34739 RVA: 0x0021D6FA File Offset: 0x0021B8FA
			internal void AddToCurrentPageHeight(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, double distance)
			{
				this.m_currentPageHeight += distance;
				if (reportItem != null)
				{
					reportItem.BottomInEndPage = this.m_currentPageHeight;
				}
			}

			// Token: 0x060087B4 RID: 34740 RVA: 0x0021D719 File Offset: 0x0021B919
			internal void SetCurrentPageHeight(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, double distance)
			{
				this.m_currentPageHeight = distance;
				if (reportItem != null)
				{
					reportItem.BottomInEndPage = this.m_currentPageHeight;
				}
			}

			// Token: 0x060087B5 RID: 34741 RVA: 0x0021D734 File Offset: 0x0021B934
			internal bool ShouldItemMoveToChildStartPage(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem)
			{
				List list = reportItem as List;
				if (list == null)
				{
					return false;
				}
				if (this.IgnoreHeight && this.m_pageMaxHeight < 25.4)
				{
					return false;
				}
				if (list.KeepWithChildFirstPage == 0)
				{
					return false;
				}
				if (-1 == list.KeepWithChildFirstPage)
				{
					Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems = list.ReportItems;
					int num = 0;
					if (reportItems != null && reportItems.Count > 0)
					{
						Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem2 = reportItems[0];
						if (!this.PageBreakAtStart(reportItem2) && reportItem2.TopValue < 12.7)
						{
							num = 1;
						}
					}
					list.KeepWithChildFirstPage = num;
				}
				return 1 == list.KeepWithChildFirstPage;
			}

			// Token: 0x060087B6 RID: 34742 RVA: 0x0021D7C8 File Offset: 0x0021B9C8
			internal int GetTextBoxStartPage(Microsoft.ReportingServices.ReportProcessing.TextBox textBox)
			{
				if (-1 == textBox.StartPage)
				{
					Global.Tracer.Assert(textBox.Parent is Table || textBox.Parent is Matrix || textBox.Parent is Microsoft.ReportingServices.ReportProcessing.CustomReportItem);
					if (textBox.Parent is Table)
					{
						return ((Table)textBox.Parent).CurrentPage;
					}
					if (textBox.Parent is Matrix)
					{
						return ((Matrix)textBox.Parent).CurrentPage;
					}
				}
				return textBox.StartPage;
			}

			// Token: 0x0400489C RID: 18588
			private double m_currentPageHeight;

			// Token: 0x0400489D RID: 18589
			private double m_pageMaxHeight;

			// Token: 0x0400489E RID: 18590
			private int m_ignorePageBreak;

			// Token: 0x0400489F RID: 18591
			private int m_ignoreHeight;

			// Token: 0x040048A0 RID: 18592
			private const double MINIMUM_START_ON_PAGE = 12.7;
		}

		// Token: 0x02000C35 RID: 3125
		internal sealed class NavigationInfo
		{
			// Token: 0x17002A3A RID: 10810
			// (get) Token: 0x060087B7 RID: 34743 RVA: 0x0021D855 File Offset: 0x0021BA55
			internal ReportProcessing.NavigationInfo.DocumentMapNodeLists DocumentMapChildren
			{
				get
				{
					return this.CurrentDocumentMapChildren;
				}
			}

			// Token: 0x17002A3B RID: 10811
			// (get) Token: 0x060087B8 RID: 34744 RVA: 0x0021D860 File Offset: 0x0021BA60
			internal ReportProcessing.NavigationInfo.DocumentMapNodeList CurrentDocumentMapSiblings
			{
				get
				{
					ReportProcessing.NavigationInfo.DocumentMapNodeLists currentDocumentMapChildren = this.CurrentDocumentMapChildren;
					if (currentDocumentMapChildren != null && 0 < currentDocumentMapChildren.Count)
					{
						return currentDocumentMapChildren[currentDocumentMapChildren.Count - 1];
					}
					return null;
				}
			}

			// Token: 0x17002A3C RID: 10812
			// (get) Token: 0x060087B9 RID: 34745 RVA: 0x0021D890 File Offset: 0x0021BA90
			internal string CurrentLabel
			{
				get
				{
					return this.m_currentLabel;
				}
			}

			// Token: 0x17002A3D RID: 10813
			// (get) Token: 0x060087BA RID: 34746 RVA: 0x0021D898 File Offset: 0x0021BA98
			// (set) Token: 0x060087BB RID: 34747 RVA: 0x0021D8A0 File Offset: 0x0021BAA0
			internal BookmarksHashtable BookmarksInfo
			{
				get
				{
					return this.m_bookmarksInfo;
				}
				set
				{
					this.m_bookmarksInfo = value;
				}
			}

			// Token: 0x17002A3E RID: 10814
			// (get) Token: 0x060087BC RID: 34748 RVA: 0x0021D8A9 File Offset: 0x0021BAA9
			// (set) Token: 0x060087BD RID: 34749 RVA: 0x0021D8D1 File Offset: 0x0021BAD1
			private ReportProcessing.NavigationInfo.DocumentMapNodeLists CurrentDocumentMapChildren
			{
				get
				{
					if (0 <= this.m_inMatrixColumn)
					{
						return (ReportProcessing.NavigationInfo.DocumentMapNodeLists)this.m_matrixColumnDocumentMaps[this.m_inMatrixColumn];
					}
					return this.m_reportDocumentMapChildren;
				}
				set
				{
					if (0 <= this.m_inMatrixColumn)
					{
						this.m_matrixColumnDocumentMaps[this.m_inMatrixColumn] = value;
						return;
					}
					this.m_reportDocumentMapChildren = value;
				}
			}

			// Token: 0x17002A3F RID: 10815
			// (get) Token: 0x060087BE RID: 34750 RVA: 0x0021D8F8 File Offset: 0x0021BAF8
			// (set) Token: 0x060087BF RID: 34751 RVA: 0x0021D950 File Offset: 0x0021BB50
			private ReportProcessing.NavigationInfo.DocumentMapNodeLists CurrentMatrixColumnDocumentMapChildren
			{
				get
				{
					if (this.m_matrixColumnDocumentMaps == null || this.m_matrixColumnDocumentMaps.Count == 0)
					{
						return null;
					}
					if (0 <= this.m_inMatrixColumn)
					{
						return (ReportProcessing.NavigationInfo.DocumentMapNodeLists)this.m_matrixColumnDocumentMaps[this.m_inMatrixColumn];
					}
					return (ReportProcessing.NavigationInfo.DocumentMapNodeLists)this.m_matrixColumnDocumentMaps[0];
				}
				set
				{
					if (this.m_matrixColumnDocumentMaps != null && 0 < this.m_matrixColumnDocumentMaps.Count)
					{
						if (0 <= this.m_inMatrixColumn)
						{
							this.m_matrixColumnDocumentMaps[this.m_inMatrixColumn] = value;
							return;
						}
						this.m_matrixColumnDocumentMaps[0] = value;
					}
				}
			}

			// Token: 0x060087C0 RID: 34752 RVA: 0x0021D99C File Offset: 0x0021BB9C
			internal void GetCurrentDocumentMapPosition(out int siblingIndex, out int nodeIndex)
			{
				siblingIndex = 0;
				nodeIndex = 0;
				ReportProcessing.NavigationInfo.DocumentMapNodeLists currentDocumentMapChildren = this.CurrentDocumentMapChildren;
				if (currentDocumentMapChildren != null && 0 < currentDocumentMapChildren.Count)
				{
					siblingIndex = currentDocumentMapChildren.Count - 1;
					ReportProcessing.NavigationInfo.DocumentMapNodeList documentMapNodeList = currentDocumentMapChildren[siblingIndex];
					if (documentMapNodeList != null)
					{
						nodeIndex = documentMapNodeList.Count;
					}
				}
			}

			// Token: 0x060087C1 RID: 34753 RVA: 0x0021D9E0 File Offset: 0x0021BBE0
			internal void EnterMatrixColumn()
			{
				this.m_inMatrixColumn++;
				if (this.m_matrixColumnDocumentMaps == null)
				{
					this.m_matrixColumnDocumentMaps = new ArrayList();
				}
				if (this.m_matrixColumnDocumentMaps.Count <= this.m_inMatrixColumn)
				{
					Global.Tracer.Assert(this.m_matrixColumnDocumentMaps.Count == this.m_inMatrixColumn, "(m_matrixColumnDocumentMaps.Count == m_inMatrixColumn)");
					this.m_matrixColumnDocumentMaps.Add(null);
				}
			}

			// Token: 0x060087C2 RID: 34754 RVA: 0x0021DA50 File Offset: 0x0021BC50
			internal void LeaveMatrixColumn()
			{
				this.m_inMatrixColumn--;
				Global.Tracer.Assert(-1 <= this.m_inMatrixColumn, "(-1 <= m_inMatrixColumn)");
			}

			// Token: 0x060087C3 RID: 34755 RVA: 0x0021DA7C File Offset: 0x0021BC7C
			internal void InsertMatrixColumnDocumentMap(int siblingIndex, int nodeIndex)
			{
				ReportProcessing.NavigationInfo.DocumentMapNodeLists currentMatrixColumnDocumentMapChildren = this.CurrentMatrixColumnDocumentMapChildren;
				if (currentMatrixColumnDocumentMapChildren != null && 0 < currentMatrixColumnDocumentMapChildren.Count)
				{
					ReportProcessing.NavigationInfo.DocumentMapNodeLists currentDocumentMapChildren = this.CurrentDocumentMapChildren;
					ReportProcessing.NavigationInfo.DocumentMapNodeList documentMapNodeList = null;
					if (currentDocumentMapChildren != null && 0 <= currentDocumentMapChildren.Count)
					{
						documentMapNodeList = currentDocumentMapChildren[siblingIndex];
					}
					if (documentMapNodeList == null)
					{
						if (currentDocumentMapChildren == null)
						{
							ReportProcessing.NavigationInfo.DocumentMapNodeLists documentMapNodeLists = (this.CurrentDocumentMapChildren = currentMatrixColumnDocumentMapChildren);
						}
						else
						{
							currentDocumentMapChildren[siblingIndex] = currentMatrixColumnDocumentMapChildren[0];
						}
					}
					else
					{
						Global.Tracer.Assert(currentDocumentMapChildren != null, "(null != currentDocMap)");
						Global.Tracer.Assert(0 <= nodeIndex && nodeIndex <= documentMapNodeList.Count, "(0 <= nodeIndex && nodeIndex <= siblings.Count)");
						documentMapNodeList.InsertRange(nodeIndex, currentMatrixColumnDocumentMapChildren[0]);
					}
					this.CurrentMatrixColumnDocumentMapChildren = null;
				}
			}

			// Token: 0x060087C4 RID: 34756 RVA: 0x0021DB30 File Offset: 0x0021BD30
			internal void AppendNavigationInfo(string label, ReportProcessing.NavigationInfo navigationInfo, int startPage)
			{
				ReportProcessing.NavigationInfo.DocumentMapNodeLists currentDocumentMapChildren = this.CurrentDocumentMapChildren;
				ReportProcessing.NavigationInfo.DocumentMapNodeLists currentDocumentMapChildren2 = navigationInfo.CurrentDocumentMapChildren;
				if (currentDocumentMapChildren2 != null && 0 < currentDocumentMapChildren2.Count)
				{
					navigationInfo.UpdateDocumentMapChildrenPage(startPage);
					if (label == null)
					{
						if (currentDocumentMapChildren == null)
						{
							ReportProcessing.NavigationInfo.DocumentMapNodeLists documentMapNodeLists = (this.CurrentDocumentMapChildren = currentDocumentMapChildren2);
						}
						else
						{
							currentDocumentMapChildren.AddRange(currentDocumentMapChildren2[0]);
						}
					}
					else
					{
						this.EnterDocumentMapChildren();
						currentDocumentMapChildren[currentDocumentMapChildren.Count - 1] = currentDocumentMapChildren2[0];
					}
				}
				if (navigationInfo.m_bookmarksInfo != null && 0 < navigationInfo.m_bookmarksInfo.Count)
				{
					if (this.m_bookmarksInfo == null)
					{
						this.m_bookmarksInfo = new BookmarksHashtable();
					}
					IDictionaryEnumerator enumerator = navigationInfo.m_bookmarksInfo.GetEnumerator();
					while (enumerator.MoveNext())
					{
						string text = (string)enumerator.Key;
						BookmarkInformation bookmarkInformation = (BookmarkInformation)enumerator.Value;
						this.m_bookmarksInfo.Add(text, bookmarkInformation.Page + startPage, bookmarkInformation.Id);
					}
				}
			}

			// Token: 0x060087C5 RID: 34757 RVA: 0x0021DC14 File Offset: 0x0021BE14
			private void UpdateDocumentMapChildrenPage(int startPage)
			{
				ReportProcessing.NavigationInfo.DocumentMapNodeLists currentDocumentMapChildren = this.CurrentDocumentMapChildren;
				if (currentDocumentMapChildren == null)
				{
					return;
				}
				for (int i = 0; i < currentDocumentMapChildren.Count; i++)
				{
					ReportProcessing.NavigationInfo.DocumentMapNodeList documentMapNodeList = currentDocumentMapChildren[i];
					if (documentMapNodeList != null)
					{
						for (int j = 0; j < documentMapNodeList.Count; j++)
						{
							this.UpdateDocumentMapNodePage(documentMapNodeList[j], startPage);
						}
					}
				}
			}

			// Token: 0x060087C6 RID: 34758 RVA: 0x0021DC68 File Offset: 0x0021BE68
			private void UpdateDocumentMapNodePage(Microsoft.ReportingServices.ReportProcessing.DocumentMapNode node, int startPage)
			{
				node.Page += startPage;
				if (node.Children != null)
				{
					for (int i = 0; i < node.Children.Length; i++)
					{
						this.UpdateDocumentMapNodePage(node.Children[i], startPage);
					}
				}
			}

			// Token: 0x060087C7 RID: 34759 RVA: 0x0021DCB0 File Offset: 0x0021BEB0
			internal void EnterDocumentMapChildren()
			{
				ReportProcessing.NavigationInfo.DocumentMapNodeLists documentMapNodeLists = this.CurrentDocumentMapChildren;
				if (documentMapNodeLists == null)
				{
					documentMapNodeLists = (this.CurrentDocumentMapChildren = new ReportProcessing.NavigationInfo.DocumentMapNodeLists());
					documentMapNodeLists.Add(null);
				}
				documentMapNodeLists.Add(null);
			}

			// Token: 0x060087C8 RID: 34760 RVA: 0x0021DCE8 File Offset: 0x0021BEE8
			internal void AddToDocumentMap(int uniqueName, bool isContainer, int startPage, string label)
			{
				if (label == null)
				{
					return;
				}
				ReportProcessing.NavigationInfo.DocumentMapNodeLists documentMapNodeLists = this.CurrentDocumentMapChildren;
				if (documentMapNodeLists == null)
				{
					documentMapNodeLists = (this.CurrentDocumentMapChildren = new ReportProcessing.NavigationInfo.DocumentMapNodeLists());
					documentMapNodeLists.Add(null);
				}
				ReportProcessing.NavigationInfo.DocumentMapNodeList documentMapNodeList = null;
				int num = documentMapNodeLists.Count - 1;
				if (isContainer)
				{
					Global.Tracer.Assert(1 < documentMapNodeLists.Count, "(1 < currentDocMap.Count)");
					documentMapNodeList = documentMapNodeLists[documentMapNodeLists.Count - 1];
					num--;
				}
				ReportProcessing.NavigationInfo.DocumentMapNodeList documentMapNodeList2 = documentMapNodeLists[num];
				if (documentMapNodeList2 == null)
				{
					documentMapNodeList2 = (documentMapNodeLists[num] = new ReportProcessing.NavigationInfo.DocumentMapNodeList());
				}
				documentMapNodeList2.Add(new Microsoft.ReportingServices.ReportProcessing.DocumentMapNode(uniqueName.ToString(CultureInfo.InvariantCulture), label, startPage, documentMapNodeList));
				if (isContainer)
				{
					documentMapNodeLists.RemoveAt(documentMapNodeLists.Count - 1);
				}
			}

			// Token: 0x060087C9 RID: 34761 RVA: 0x0021DD9C File Offset: 0x0021BF9C
			internal string RegisterLabel(VariantResult labelResult)
			{
				string text = null;
				if (labelResult.ErrorOccurred)
				{
					text = RPRes.rsExpressionErrorValue;
				}
				else if (labelResult.Value != null)
				{
					if (labelResult.Value is string)
					{
						text = (string)labelResult.Value;
					}
					else
					{
						try
						{
							text = labelResult.Value.ToString();
						}
						catch (Exception ex)
						{
							if (AsynchronousExceptionDetection.IsStoppingException(ex))
							{
								throw;
							}
							Global.Tracer.Trace(TraceLevel.Verbose, ex.Message);
						}
					}
				}
				this.m_currentLabel = text;
				return text;
			}

			// Token: 0x060087CA RID: 34762 RVA: 0x0021DE24 File Offset: 0x0021C024
			internal void ProcessBookmark(ReportProcessing.ProcessingContext processingContext, Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, ReportItemInstance riInstance, ReportItemInstanceInfo riInstanceInfo)
			{
				string text = processingContext.ReportRuntime.EvaluateReportItemBookmarkExpression(reportItem);
				this.ProcessBookmark(reportItem, riInstance, riInstanceInfo, text);
			}

			// Token: 0x060087CB RID: 34763 RVA: 0x0021DE4C File Offset: 0x0021C04C
			internal void ProcessBookmark(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, ReportItemInstance riInstance, ReportItemInstanceInfo riInstanceInfo, string bookmark)
			{
				if (bookmark != null)
				{
					riInstanceInfo.Bookmark = bookmark;
					if (this.m_bookmarksInfo == null)
					{
						this.m_bookmarksInfo = new BookmarksHashtable();
					}
					this.m_bookmarksInfo.Add(bookmark, reportItem.StartPage, riInstance.UniqueName.ToString(CultureInfo.InvariantCulture));
				}
			}

			// Token: 0x060087CC RID: 34764 RVA: 0x0021DE9E File Offset: 0x0021C09E
			internal void ProcessBookmark(string bookmark, int startPage, int uniqueName)
			{
				if (bookmark != null)
				{
					if (this.m_bookmarksInfo == null)
					{
						this.m_bookmarksInfo = new BookmarksHashtable();
					}
					this.m_bookmarksInfo.Add(bookmark, startPage, uniqueName.ToString(CultureInfo.InvariantCulture));
				}
			}

			// Token: 0x040048A1 RID: 18593
			private ReportProcessing.NavigationInfo.DocumentMapNodeLists m_reportDocumentMapChildren;

			// Token: 0x040048A2 RID: 18594
			private string m_currentLabel;

			// Token: 0x040048A3 RID: 18595
			private ArrayList m_matrixColumnDocumentMaps = new ArrayList();

			// Token: 0x040048A4 RID: 18596
			private int m_inMatrixColumn = -1;

			// Token: 0x040048A5 RID: 18597
			private BookmarksHashtable m_bookmarksInfo;

			// Token: 0x02000D40 RID: 3392
			internal sealed class DocumentMapNodeList : ArrayList
			{
				// Token: 0x06008FC5 RID: 36805 RVA: 0x00247DBD File Offset: 0x00245FBD
				internal DocumentMapNodeList()
				{
				}

				// Token: 0x17002C1A RID: 11290
				internal Microsoft.ReportingServices.ReportProcessing.DocumentMapNode this[int index]
				{
					get
					{
						return (Microsoft.ReportingServices.ReportProcessing.DocumentMapNode)base[index];
					}
					set
					{
						base[index] = value;
					}
				}
			}

			// Token: 0x02000D41 RID: 3393
			internal sealed class DocumentMapNodeLists : ArrayList
			{
				// Token: 0x06008FC8 RID: 36808 RVA: 0x00247DDD File Offset: 0x00245FDD
				internal DocumentMapNodeLists()
				{
				}

				// Token: 0x17002C1B RID: 11291
				internal ReportProcessing.NavigationInfo.DocumentMapNodeList this[int index]
				{
					get
					{
						return (ReportProcessing.NavigationInfo.DocumentMapNodeList)base[index];
					}
					set
					{
						base[index] = value;
					}
				}
			}
		}

		// Token: 0x02000C36 RID: 3126
		internal sealed class RuntimeGroupingObj
		{
			// Token: 0x060087CE RID: 34766 RVA: 0x0021DEEC File Offset: 0x0021C0EC
			internal RuntimeGroupingObj(ReportProcessing.RuntimeHierarchyObj owner, ReportProcessing.RuntimeGroupingObj.GroupingTypes type)
			{
				this.m_type = type;
				this.m_owner = owner;
				if (ReportProcessing.RuntimeGroupingObj.GroupingTypes.Sort == type)
				{
					this.m_tree = new ReportProcessing.BTreeNode(owner);
					return;
				}
				this.m_hashtable = new Hashtable(new ReportProcessing.ProcessingComparer(this.m_owner.ProcessingContext.CompareInfo, this.m_owner.ProcessingContext.ClrCompareOptions, false));
			}

			// Token: 0x17002A40 RID: 10816
			// (get) Token: 0x060087CF RID: 34767 RVA: 0x0021DF4F File Offset: 0x0021C14F
			// (set) Token: 0x060087D0 RID: 34768 RVA: 0x0021DF57 File Offset: 0x0021C157
			internal ReportProcessing.BTreeNode Tree
			{
				get
				{
					return this.m_tree;
				}
				set
				{
					this.m_tree = value;
				}
			}

			// Token: 0x17002A41 RID: 10817
			// (set) Token: 0x060087D1 RID: 34769 RVA: 0x0021DF60 File Offset: 0x0021C160
			internal ReportProcessing.RuntimeGroupingObj.GroupingTypes GroupingType
			{
				set
				{
					Global.Tracer.Assert(value == ReportProcessing.RuntimeGroupingObj.GroupingTypes.None, "(GroupingTypes.None == value)");
					this.m_type = value;
					this.m_tree = null;
					this.m_hashtable = null;
				}
			}

			// Token: 0x060087D2 RID: 34770 RVA: 0x0021DF8A File Offset: 0x0021C18A
			internal void NextRow(object keyValue)
			{
				this.NextRow(keyValue, false, null);
			}

			// Token: 0x060087D3 RID: 34771 RVA: 0x0021DF98 File Offset: 0x0021C198
			internal void NextRow(object keyValue, bool hasParent, object parentKey)
			{
				if (ReportProcessing.RuntimeGroupingObj.GroupingTypes.Sort == this.m_type)
				{
					this.m_tree.NextRow(keyValue);
					Global.Tracer.Assert(!hasParent, "(!hasParent)");
					return;
				}
				ReportProcessing.RuntimeHierarchyObj runtimeHierarchyObj = null;
				Global.Tracer.Assert(ReportProcessing.RuntimeGroupingObj.GroupingTypes.Hash == this.m_type, "(GroupingTypes.Hash == m_type)");
				try
				{
					runtimeHierarchyObj = (ReportProcessing.RuntimeHierarchyObj)this.m_hashtable[keyValue];
				}
				catch (ReportProcessingException_SpatialTypeComparisonError reportProcessingException_SpatialTypeComparisonError)
				{
					throw new ReportProcessingException(this.m_owner.RegisterSpatialTypeComparisonError(reportProcessingException_SpatialTypeComparisonError.Type));
				}
				catch (ReportProcessingException_ComparisonError reportProcessingException_ComparisonError)
				{
					throw new ReportProcessingException(this.m_owner.RegisterComparisonError("GroupExpression", reportProcessingException_ComparisonError));
				}
				if (runtimeHierarchyObj != null)
				{
					runtimeHierarchyObj.NextRow();
					return;
				}
				runtimeHierarchyObj = new ReportProcessing.RuntimeHierarchyObj(this.m_owner);
				this.m_hashtable.Add(keyValue, runtimeHierarchyObj);
				runtimeHierarchyObj.NextRow();
				if (hasParent)
				{
					ReportProcessing.RuntimeHierarchyObj runtimeHierarchyObj2 = null;
					ReportProcessing.RuntimeGroupLeafObj runtimeGroupLeafObj = null;
					try
					{
						runtimeHierarchyObj2 = (ReportProcessing.RuntimeHierarchyObj)this.m_hashtable[parentKey];
					}
					catch (ReportProcessingException_SpatialTypeComparisonError reportProcessingException_SpatialTypeComparisonError2)
					{
						throw new ReportProcessingException(this.m_owner.RegisterSpatialTypeComparisonError(reportProcessingException_SpatialTypeComparisonError2.Type));
					}
					catch (ReportProcessingException_ComparisonError reportProcessingException_ComparisonError2)
					{
						throw new ReportProcessingException(this.m_owner.RegisterComparisonError("Parent", reportProcessingException_ComparisonError2));
					}
					if (runtimeHierarchyObj2 != null)
					{
						Global.Tracer.Assert(runtimeHierarchyObj2.HierarchyObjs != null, "(null != parentHierarchyObj.HierarchyObjs)");
						runtimeGroupLeafObj = (ReportProcessing.RuntimeGroupLeafObj)runtimeHierarchyObj2.HierarchyObjs[0];
					}
					Global.Tracer.Assert(runtimeHierarchyObj.HierarchyObjs != null, "(null != hierarchyObj.HierarchyObjs)");
					ReportProcessing.RuntimeGroupLeafObj runtimeGroupLeafObj2 = (ReportProcessing.RuntimeGroupLeafObj)runtimeHierarchyObj.HierarchyObjs[0];
					bool flag = true;
					if (runtimeGroupLeafObj == runtimeGroupLeafObj2)
					{
						runtimeGroupLeafObj = null;
						flag = false;
					}
					this.ProcessChildren(keyValue, runtimeGroupLeafObj, runtimeGroupLeafObj2);
					this.ProcessParent(parentKey, runtimeGroupLeafObj, runtimeGroupLeafObj2, flag);
				}
			}

			// Token: 0x060087D4 RID: 34772 RVA: 0x0021E15C File Offset: 0x0021C35C
			internal void Traverse(ReportProcessing.ProcessingStages operation, bool ascending)
			{
				if (ReportProcessing.RuntimeGroupingObj.GroupingTypes.Sort == this.m_type)
				{
					this.m_tree.Traverse(operation, ascending);
					return;
				}
				if (((ReportProcessing.RuntimeGroupRootObj)this.m_owner).FirstChild != null)
				{
					((ReportProcessing.RuntimeGroupRootObj)this.m_owner).FirstChild.TraverseAllLeafNodes(operation);
				}
			}

			// Token: 0x060087D5 RID: 34773 RVA: 0x0021E1A8 File Offset: 0x0021C3A8
			private void ProcessParent(object parentKey, ReportProcessing.RuntimeGroupLeafObj parentObj, ReportProcessing.RuntimeGroupLeafObj childObj, bool addToWaitList)
			{
				if (parentObj != null)
				{
					parentObj.AddChild(childObj);
					return;
				}
				((ReportProcessing.RuntimeGroupRootObj)this.m_owner).AddChild(childObj);
				if (addToWaitList)
				{
					ReportProcessing.RuntimeGroupLeafObjList runtimeGroupLeafObjList = null;
					if (this.m_parentInfo == null)
					{
						this.m_parentInfo = new ReportProcessing.ParentInformation();
					}
					else
					{
						runtimeGroupLeafObjList = this.m_parentInfo[parentKey];
					}
					if (runtimeGroupLeafObjList == null)
					{
						runtimeGroupLeafObjList = new ReportProcessing.RuntimeGroupLeafObjList();
						this.m_parentInfo.Add(parentKey, runtimeGroupLeafObjList);
					}
					runtimeGroupLeafObjList.Add(childObj);
				}
			}

			// Token: 0x060087D6 RID: 34774 RVA: 0x0021E218 File Offset: 0x0021C418
			private void ProcessChildren(object thisKey, ReportProcessing.RuntimeGroupLeafObj parentObj, ReportProcessing.RuntimeGroupLeafObj thisObj)
			{
				ReportProcessing.RuntimeGroupLeafObjList runtimeGroupLeafObjList = null;
				if (this.m_parentInfo != null)
				{
					runtimeGroupLeafObjList = this.m_parentInfo[thisKey];
				}
				if (runtimeGroupLeafObjList != null)
				{
					for (int i = 0; i < runtimeGroupLeafObjList.Count; i++)
					{
						ReportProcessing.RuntimeGroupLeafObj runtimeGroupLeafObj = runtimeGroupLeafObjList[i];
						bool flag = false;
						ReportProcessing.RuntimeGroupLeafObj runtimeGroupLeafObj2 = parentObj;
						while (!flag && runtimeGroupLeafObj2 != null)
						{
							if (runtimeGroupLeafObj2 == runtimeGroupLeafObj)
							{
								flag = true;
							}
							runtimeGroupLeafObj2 = runtimeGroupLeafObj2.Parent as ReportProcessing.RuntimeGroupLeafObj;
						}
						if (!flag)
						{
							runtimeGroupLeafObj.RemoveFromParent((ReportProcessing.RuntimeGroupRootObj)this.m_owner);
							thisObj.AddChild(runtimeGroupLeafObj);
						}
					}
					this.m_parentInfo.Remove(thisKey);
				}
			}

			// Token: 0x040048A6 RID: 18598
			private ReportProcessing.RuntimeHierarchyObj m_owner;

			// Token: 0x040048A7 RID: 18599
			private ReportProcessing.RuntimeGroupingObj.GroupingTypes m_type;

			// Token: 0x040048A8 RID: 18600
			private Hashtable m_hashtable;

			// Token: 0x040048A9 RID: 18601
			private ReportProcessing.BTreeNode m_tree;

			// Token: 0x040048AA RID: 18602
			private ReportProcessing.ParentInformation m_parentInfo;

			// Token: 0x02000D42 RID: 3394
			internal enum GroupingTypes
			{
				// Token: 0x040050E8 RID: 20712
				None,
				// Token: 0x040050E9 RID: 20713
				Hash,
				// Token: 0x040050EA RID: 20714
				Sort
			}
		}

		// Token: 0x02000C37 RID: 3127
		internal sealed class BTreeNode
		{
			// Token: 0x060087D7 RID: 34775 RVA: 0x0021E2A4 File Offset: 0x0021C4A4
			internal BTreeNode(ReportProcessing.IHierarchyObj owner)
			{
				this.m_owner = owner;
				this.m_tuples = new ReportProcessing.BTreeNodeTupleList(this, 3);
				ReportProcessing.BTreeNodeTuple btreeNodeTuple = new ReportProcessing.BTreeNodeTuple(new ReportProcessing.BTreeNodeValue(null, owner), null);
				this.m_tuples.Add(btreeNodeTuple);
			}

			// Token: 0x17002A42 RID: 10818
			// (set) Token: 0x060087D8 RID: 34776 RVA: 0x0021E2E5 File Offset: 0x0021C4E5
			internal ReportProcessing.BTreeNode Parent
			{
				set
				{
					this.m_parent = value;
				}
			}

			// Token: 0x17002A43 RID: 10819
			// (set) Token: 0x060087D9 RID: 34777 RVA: 0x0021E2EE File Offset: 0x0021C4EE
			internal int IndexInParent
			{
				set
				{
					this.m_indexInParent = value;
				}
			}

			// Token: 0x060087DA RID: 34778 RVA: 0x0021E2F8 File Offset: 0x0021C4F8
			internal void NextRow(object keyValue)
			{
				try
				{
					this.SearchAndInsert(keyValue);
				}
				catch (ReportProcessingException_SpatialTypeComparisonError)
				{
					throw new ReportProcessingException(this.m_owner.RegisterComparisonError("SortExpression"));
				}
				catch (ReportProcessingException_ComparisonError)
				{
					throw new ReportProcessingException(this.m_owner.RegisterComparisonError("SortExpression"));
				}
			}

			// Token: 0x060087DB RID: 34779 RVA: 0x0021E358 File Offset: 0x0021C558
			internal void Traverse(ReportProcessing.ProcessingStages operation, bool ascending)
			{
				if (ascending)
				{
					for (int i = 0; i < this.m_tuples.Count; i++)
					{
						this.m_tuples[i].Traverse(operation, ascending);
					}
					return;
				}
				for (int j = this.m_tuples.Count - 1; j >= 0; j--)
				{
					this.m_tuples[j].Traverse(operation, ascending);
				}
			}

			// Token: 0x060087DC RID: 34780 RVA: 0x0021E3C0 File Offset: 0x0021C5C0
			private void SetFirstChild(ReportProcessing.BTreeNode child)
			{
				Global.Tracer.Assert(1 <= this.m_tuples.Count, "(1 <= m_tuples.Count)");
				this.m_tuples[0].Child = child;
				if (this.m_tuples[0].Child != null)
				{
					this.m_tuples[0].Child.Parent = this;
					this.m_tuples[0].Child.IndexInParent = 0;
				}
			}

			// Token: 0x060087DD RID: 34781 RVA: 0x0021E440 File Offset: 0x0021C640
			private void SearchAndInsert(object keyValue)
			{
				int num = -1;
				int i;
				for (i = 1; i < this.m_tuples.Count; i++)
				{
					num = this.m_tuples[i].Value.CompareTo(keyValue);
					if (num >= 0)
					{
						break;
					}
				}
				if (num == 0)
				{
					this.m_tuples[i].Value.AddRow();
					return;
				}
				if (this.m_tuples[i - 1].Child == null)
				{
					this.InsertBTreeNode(new ReportProcessing.BTreeNodeValue(keyValue, this.m_owner), null, i);
					return;
				}
				this.m_tuples[i - 1].Child.SearchAndInsert(keyValue);
			}

			// Token: 0x060087DE RID: 34782 RVA: 0x0021E4E0 File Offset: 0x0021C6E0
			private void InsertBTreeNode(ReportProcessing.BTreeNodeValue nodeValueToInsert, ReportProcessing.BTreeNode subTreeToInsert, int nodeIndexToInsert)
			{
				if (3 > this.m_tuples.Count)
				{
					this.m_tuples.Insert(nodeIndexToInsert, new ReportProcessing.BTreeNodeTuple(nodeValueToInsert, subTreeToInsert));
					return;
				}
				int num = 2;
				ReportProcessing.BTreeNode btreeNode = new ReportProcessing.BTreeNode(this.m_owner);
				ReportProcessing.BTreeNodeValue btreeNodeValue;
				if (num < nodeIndexToInsert)
				{
					btreeNodeValue = this.m_tuples[num].Value;
					btreeNode.SetFirstChild(this.m_tuples[num].Child);
					for (int i = num + 1; i < ((this.m_tuples.Count <= nodeIndexToInsert) ? this.m_tuples.Count : nodeIndexToInsert); i++)
					{
						btreeNode.m_tuples.Add(this.m_tuples[i]);
					}
					btreeNode.m_tuples.Add(new ReportProcessing.BTreeNodeTuple(nodeValueToInsert, subTreeToInsert));
					for (int j = nodeIndexToInsert; j < this.m_tuples.Count; j++)
					{
						btreeNode.m_tuples.Add(this.m_tuples[j]);
					}
					int count = this.m_tuples.Count;
					for (int k = num; k < count; k++)
					{
						this.m_tuples.RemoveAtEnd();
					}
				}
				else if (num > nodeIndexToInsert)
				{
					btreeNodeValue = this.m_tuples[num - 1].Value;
					btreeNode.SetFirstChild(this.m_tuples[num - 1].Child);
					for (int l = num; l < this.m_tuples.Count; l++)
					{
						btreeNode.m_tuples.Add(this.m_tuples[l]);
					}
					int count2 = this.m_tuples.Count;
					for (int m = num - 1; m < count2; m++)
					{
						this.m_tuples.RemoveAtEnd();
					}
					this.m_tuples.Insert(nodeIndexToInsert, new ReportProcessing.BTreeNodeTuple(nodeValueToInsert, subTreeToInsert));
				}
				else
				{
					btreeNodeValue = nodeValueToInsert;
					btreeNode.SetFirstChild(subTreeToInsert);
					for (int n = num; n < this.m_tuples.Count; n++)
					{
						btreeNode.m_tuples.Add(this.m_tuples[n]);
					}
					int count3 = this.m_tuples.Count;
					for (int num2 = num; num2 < count3; num2++)
					{
						this.m_tuples.RemoveAtEnd();
					}
				}
				if (this.m_parent != null)
				{
					this.m_parent.InsertBTreeNode(btreeNodeValue, btreeNode, this.m_indexInParent + 1);
					return;
				}
				ReportProcessing.BTreeNode btreeNode2 = new ReportProcessing.BTreeNode(this.m_owner);
				btreeNode2.SetFirstChild(this);
				btreeNode2.m_tuples.Add(new ReportProcessing.BTreeNodeTuple(btreeNodeValue, btreeNode));
				this.m_owner.SortTree = btreeNode2;
			}

			// Token: 0x040048AB RID: 18603
			private const int BTreeOrder = 3;

			// Token: 0x040048AC RID: 18604
			private ReportProcessing.BTreeNodeTupleList m_tuples;

			// Token: 0x040048AD RID: 18605
			private ReportProcessing.BTreeNode m_parent;

			// Token: 0x040048AE RID: 18606
			private int m_indexInParent;

			// Token: 0x040048AF RID: 18607
			private ReportProcessing.IHierarchyObj m_owner;
		}

		// Token: 0x02000C38 RID: 3128
		internal sealed class BTreeNodeTuple
		{
			// Token: 0x060087DF RID: 34783 RVA: 0x0021E75F File Offset: 0x0021C95F
			internal BTreeNodeTuple(ReportProcessing.BTreeNodeValue value, ReportProcessing.BTreeNode child)
			{
				this.m_value = value;
				this.m_child = child;
			}

			// Token: 0x17002A44 RID: 10820
			// (get) Token: 0x060087E0 RID: 34784 RVA: 0x0021E775 File Offset: 0x0021C975
			internal ReportProcessing.BTreeNodeValue Value
			{
				get
				{
					return this.m_value;
				}
			}

			// Token: 0x17002A45 RID: 10821
			// (get) Token: 0x060087E1 RID: 34785 RVA: 0x0021E77D File Offset: 0x0021C97D
			// (set) Token: 0x060087E2 RID: 34786 RVA: 0x0021E785 File Offset: 0x0021C985
			internal ReportProcessing.BTreeNode Child
			{
				get
				{
					return this.m_child;
				}
				set
				{
					this.m_child = value;
				}
			}

			// Token: 0x060087E3 RID: 34787 RVA: 0x0021E790 File Offset: 0x0021C990
			internal void Traverse(ReportProcessing.ProcessingStages operation, bool ascending)
			{
				if (ascending)
				{
					if (this.m_value != null)
					{
						this.m_value.Traverse(operation);
					}
					if (this.m_child != null)
					{
						this.m_child.Traverse(operation, ascending);
						return;
					}
				}
				else
				{
					if (this.m_child != null)
					{
						this.m_child.Traverse(operation, ascending);
					}
					if (this.m_value != null)
					{
						this.m_value.Traverse(operation);
					}
				}
			}

			// Token: 0x040048B0 RID: 18608
			private ReportProcessing.BTreeNodeValue m_value;

			// Token: 0x040048B1 RID: 18609
			private ReportProcessing.BTreeNode m_child;
		}

		// Token: 0x02000C39 RID: 3129
		internal sealed class BTreeNodeValue
		{
			// Token: 0x060087E4 RID: 34788 RVA: 0x0021E7F3 File Offset: 0x0021C9F3
			internal BTreeNodeValue(object key, ReportProcessing.IHierarchyObj owner)
			{
				this.m_key = key;
				if (key != null)
				{
					this.m_hierarchyNode = owner.CreateHierarchyObj();
					this.m_hierarchyNode.NextRow();
				}
			}

			// Token: 0x060087E5 RID: 34789 RVA: 0x0021E81C File Offset: 0x0021CA1C
			internal void AddRow()
			{
				this.m_hierarchyNode.NextRow();
			}

			// Token: 0x060087E6 RID: 34790 RVA: 0x0021E829 File Offset: 0x0021CA29
			internal void Traverse(ReportProcessing.ProcessingStages operation)
			{
				if (this.m_hierarchyNode != null)
				{
					this.m_hierarchyNode.Traverse(operation);
				}
			}

			// Token: 0x060087E7 RID: 34791 RVA: 0x0021E83F File Offset: 0x0021CA3F
			internal int CompareTo(object keyValue)
			{
				return ReportProcessing.CompareTo(this.m_key, keyValue, this.m_hierarchyNode.ProcessingContext.CompareInfo, this.m_hierarchyNode.ProcessingContext.ClrCompareOptions);
			}

			// Token: 0x040048B2 RID: 18610
			private object m_key;

			// Token: 0x040048B3 RID: 18611
			private ReportProcessing.IHierarchyObj m_hierarchyNode;
		}

		// Token: 0x02000C3A RID: 3130
		private sealed class BTreeNodeTupleList
		{
			// Token: 0x060087E8 RID: 34792 RVA: 0x0021E86D File Offset: 0x0021CA6D
			internal BTreeNodeTupleList(ReportProcessing.BTreeNode owner, int capacity)
			{
				this.m_owner = owner;
				this.m_list = new ArrayList(capacity);
				this.m_capacity = capacity;
			}

			// Token: 0x17002A46 RID: 10822
			internal ReportProcessing.BTreeNodeTuple this[int index]
			{
				get
				{
					return (ReportProcessing.BTreeNodeTuple)this.m_list[index];
				}
			}

			// Token: 0x17002A47 RID: 10823
			// (get) Token: 0x060087EA RID: 34794 RVA: 0x0021E8A2 File Offset: 0x0021CAA2
			internal int Count
			{
				get
				{
					return this.m_list.Count;
				}
			}

			// Token: 0x060087EB RID: 34795 RVA: 0x0021E8B0 File Offset: 0x0021CAB0
			internal void Add(ReportProcessing.BTreeNodeTuple tuple)
			{
				if (this.m_list.Count == this.m_capacity)
				{
					throw new ReportProcessingException(ErrorCode.rsInvalidOperation);
				}
				this.m_list.Add(tuple);
				if (tuple.Child != null)
				{
					tuple.Child.Parent = this.m_owner;
					tuple.Child.IndexInParent = this.m_list.Count - 1;
				}
			}

			// Token: 0x060087EC RID: 34796 RVA: 0x0021E91C File Offset: 0x0021CB1C
			internal void Insert(int index, ReportProcessing.BTreeNodeTuple tuple)
			{
				if (this.m_list.Count == this.m_capacity)
				{
					throw new ReportProcessingException(ErrorCode.rsInvalidOperation);
				}
				this.m_list.Insert(index, tuple);
				if (tuple.Child != null)
				{
					tuple.Child.Parent = this.m_owner;
				}
				for (int i = index; i < this.m_list.Count; i++)
				{
					ReportProcessing.BTreeNode child = ((ReportProcessing.BTreeNodeTuple)this.m_list[i]).Child;
					if (child != null)
					{
						child.IndexInParent = i;
					}
				}
			}

			// Token: 0x060087ED RID: 34797 RVA: 0x0021E9A4 File Offset: 0x0021CBA4
			internal void RemoveAtEnd()
			{
				this.m_list.RemoveAt(this.m_list.Count - 1);
			}

			// Token: 0x040048B4 RID: 18612
			private ArrayList m_list;

			// Token: 0x040048B5 RID: 18613
			private int m_capacity;

			// Token: 0x040048B6 RID: 18614
			private ReportProcessing.BTreeNode m_owner;
		}

		// Token: 0x02000C3B RID: 3131
		internal sealed class RuntimeHierarchyObjList : ArrayList
		{
			// Token: 0x17002A48 RID: 10824
			internal ReportProcessing.RuntimeHierarchyObj this[int index]
			{
				get
				{
					return (ReportProcessing.RuntimeHierarchyObj)base[index];
				}
			}
		}

		// Token: 0x02000C3C RID: 3132
		internal sealed class DataRowList : ArrayList
		{
			// Token: 0x17002A49 RID: 10825
			internal FieldImpl[] this[int index]
			{
				get
				{
					return (FieldImpl[])base[index];
				}
			}
		}

		// Token: 0x02000C3D RID: 3133
		internal sealed class PageTextboxes
		{
			// Token: 0x060087F2 RID: 34802 RVA: 0x0021E9EA File Offset: 0x0021CBEA
			internal PageTextboxes()
			{
				this.m_pages = new ArrayList();
			}

			// Token: 0x060087F3 RID: 34803 RVA: 0x0021E9FD File Offset: 0x0021CBFD
			internal int GetPageCount()
			{
				return this.m_pages.Count;
			}

			// Token: 0x060087F4 RID: 34804 RVA: 0x0021EA0C File Offset: 0x0021CC0C
			internal void IntegrateRepeatingTextboxValues(ReportProcessing.PageTextboxes source, int targetStartPage, int targetEndPage)
			{
				if (source == null || targetStartPage > targetEndPage)
				{
					return;
				}
				int num = source.GetPageCount() - 1;
				if (num < 0)
				{
					return;
				}
				Hashtable textboxesOnPage = source.GetTextboxesOnPage(num);
				if (textboxesOnPage != null)
				{
					for (int i = targetStartPage; i <= targetEndPage; i++)
					{
						IDictionaryEnumerator enumerator = textboxesOnPage.GetEnumerator();
						while (enumerator.MoveNext())
						{
							this.AddTextboxValue(i, enumerator.Key as string, enumerator.Value as ArrayList);
						}
					}
				}
			}

			// Token: 0x060087F5 RID: 34805 RVA: 0x0021EA74 File Offset: 0x0021CC74
			internal void IntegrateNonRepeatingTextboxValues(ReportProcessing.PageTextboxes source)
			{
				if (source == null)
				{
					return;
				}
				int pageCount = source.GetPageCount();
				for (int i = 0; i < pageCount; i++)
				{
					Hashtable textboxesOnPage = source.GetTextboxesOnPage(i);
					if (textboxesOnPage != null)
					{
						IDictionaryEnumerator enumerator = textboxesOnPage.GetEnumerator();
						while (enumerator.MoveNext())
						{
							this.AddTextboxValue(i, enumerator.Key as string, enumerator.Value as ArrayList);
						}
					}
				}
			}

			// Token: 0x060087F6 RID: 34806 RVA: 0x0021EAD4 File Offset: 0x0021CCD4
			internal void AddTextboxValue(int page, string name, object value)
			{
				this.AddTextboxValue(page, name, new ArrayList { value });
			}

			// Token: 0x060087F7 RID: 34807 RVA: 0x0021EAF8 File Offset: 0x0021CCF8
			internal void AddTextboxValue(int page, string name, ArrayList values)
			{
				Global.Tracer.Assert(0 <= page && name != null && values != null, "(0 <= page && null != name && null != values)");
				if (0 > page)
				{
					return;
				}
				int count = this.m_pages.Count;
				if (count <= page)
				{
					for (int i = count; i <= page; i++)
					{
						this.m_pages.Add(null);
					}
				}
				Hashtable hashtable = this.m_pages[page] as Hashtable;
				if (hashtable == null)
				{
					hashtable = new Hashtable();
					this.m_pages[page] = hashtable;
				}
				ArrayList arrayList = hashtable[name] as ArrayList;
				if (arrayList == null)
				{
					arrayList = new ArrayList();
					hashtable.Add(name, arrayList);
				}
				arrayList.AddRange(values);
			}

			// Token: 0x060087F8 RID: 34808 RVA: 0x0021EB9D File Offset: 0x0021CD9D
			internal Hashtable GetTextboxesOnPage(int page)
			{
				Global.Tracer.Assert(0 <= page, "(0 <= page)");
				if (page >= this.m_pages.Count)
				{
					return null;
				}
				return this.m_pages[page] as Hashtable;
			}

			// Token: 0x060087F9 RID: 34809 RVA: 0x0021EBD8 File Offset: 0x0021CDD8
			internal ArrayList GetTextboxValues(int page, string name)
			{
				Global.Tracer.Assert(0 <= page && name != null, "(0 <= page && null != name)");
				Hashtable textboxesOnPage = this.GetTextboxesOnPage(page);
				if (textboxesOnPage == null)
				{
					return null;
				}
				return textboxesOnPage[name] as ArrayList;
			}

			// Token: 0x040048B7 RID: 18615
			private ArrayList m_pages;
		}

		// Token: 0x02000C3E RID: 3134
		internal sealed class PageSectionContext
		{
			// Token: 0x060087FA RID: 34810 RVA: 0x0021EC18 File Offset: 0x0021CE18
			internal PageSectionContext(bool hasPageSections, bool isOnePass)
			{
				this.ConstructorHelper(hasPageSections, isOnePass, true, false, false, 0);
			}

			// Token: 0x060087FB RID: 34811 RVA: 0x0021EC2C File Offset: 0x0021CE2C
			internal PageSectionContext(ReportProcessing.PageSectionContext copy)
			{
				this.ConstructorHelper(copy.m_needPageSectionEvaluation, copy.m_isOnePass, copy.IsParentVisible(), copy.InMatrixSubtotal, copy.InMatrixCell, copy.m_subreportLevel);
			}

			// Token: 0x17002A4A RID: 10826
			// (get) Token: 0x060087FC RID: 34812 RVA: 0x0021EC5E File Offset: 0x0021CE5E
			// (set) Token: 0x060087FD RID: 34813 RVA: 0x0021EC66 File Offset: 0x0021CE66
			internal ReportProcessing.PageTextboxes PageTextboxes
			{
				get
				{
					return this.m_pageTextboxes;
				}
				set
				{
					this.m_pageTextboxes = value;
				}
			}

			// Token: 0x17002A4B RID: 10827
			// (get) Token: 0x060087FE RID: 34814 RVA: 0x0021EC6F File Offset: 0x0021CE6F
			// (set) Token: 0x060087FF RID: 34815 RVA: 0x0021EC77 File Offset: 0x0021CE77
			internal bool InMatrixSubtotal
			{
				get
				{
					return this.m_inMatrixSubtotal;
				}
				set
				{
					this.m_inMatrixSubtotal = value;
				}
			}

			// Token: 0x17002A4C RID: 10828
			// (get) Token: 0x06008800 RID: 34816 RVA: 0x0021EC80 File Offset: 0x0021CE80
			// (set) Token: 0x06008801 RID: 34817 RVA: 0x0021EC88 File Offset: 0x0021CE88
			internal bool InMatrixCell
			{
				get
				{
					return this.m_inMatrixCell;
				}
				set
				{
					this.m_inMatrixCell = value;
				}
			}

			// Token: 0x17002A4D RID: 10829
			// (get) Token: 0x06008802 RID: 34818 RVA: 0x0021EC91 File Offset: 0x0021CE91
			internal bool InSubreport
			{
				get
				{
					return this.m_subreportLevel != 0;
				}
			}

			// Token: 0x17002A4E RID: 10830
			// (get) Token: 0x06008803 RID: 34819 RVA: 0x0021EC9C File Offset: 0x0021CE9C
			internal bool InRepeatingItem
			{
				get
				{
					return this.m_repeatingItemList != null && this.m_repeatingItemList.Count > 1;
				}
			}

			// Token: 0x17002A4F RID: 10831
			// (get) Token: 0x06008804 RID: 34820 RVA: 0x0021ECB6 File Offset: 0x0021CEB6
			// (set) Token: 0x06008805 RID: 34821 RVA: 0x0021ECBE File Offset: 0x0021CEBE
			internal IntList TableColumnSpans
			{
				get
				{
					return this.m_tableColumnSpans;
				}
				set
				{
					this.m_tableColumnSpans = value;
				}
			}

			// Token: 0x17002A50 RID: 10832
			// (get) Token: 0x06008806 RID: 34822 RVA: 0x0021ECC7 File Offset: 0x0021CEC7
			internal bool HasPageSections
			{
				get
				{
					return this.m_needPageSectionEvaluation;
				}
			}

			// Token: 0x06008807 RID: 34823 RVA: 0x0021ECD0 File Offset: 0x0021CED0
			private void ConstructorHelper(bool needPageSectionEvaluation, bool isOnePass, bool parentVisible, bool inMatrixSubtotal, bool inMatrixCell, int subreportLevel)
			{
				this.m_needPageSectionEvaluation = needPageSectionEvaluation;
				this.m_isOnePass = isOnePass;
				if (needPageSectionEvaluation)
				{
					this.m_pageTextboxes = new ReportProcessing.PageTextboxes();
					this.m_inMatrixSubtotal = inMatrixSubtotal;
					this.m_inMatrixCell = inMatrixCell;
					this.m_subreportLevel = subreportLevel;
					this.m_repeatingItemList = new List<ReportProcessing.PageTextboxes>();
					this.m_repeatingItemList.Add(this.m_pageTextboxes);
				}
				if ((isOnePass || needPageSectionEvaluation) && !parentVisible)
				{
					this.m_pageItemVisibility = new List<bool>();
					this.m_pageItemVisibility.Add(false);
				}
			}

			// Token: 0x06008808 RID: 34824 RVA: 0x0021ED4C File Offset: 0x0021CF4C
			internal void EnterSubreport()
			{
				if (!this.m_needPageSectionEvaluation && !this.m_isOnePass)
				{
					return;
				}
				this.m_subreportLevel++;
			}

			// Token: 0x06008809 RID: 34825 RVA: 0x0021ED6D File Offset: 0x0021CF6D
			internal void ExitSubreport()
			{
				if (!this.m_needPageSectionEvaluation && !this.m_isOnePass)
				{
					return;
				}
				this.m_subreportLevel--;
			}

			// Token: 0x0600880A RID: 34826 RVA: 0x0021ED8E File Offset: 0x0021CF8E
			internal void EnterRepeatingItem()
			{
				if (!this.m_needPageSectionEvaluation)
				{
					return;
				}
				this.m_repeatingItemList.Insert(0, this.m_pageTextboxes);
				this.m_pageTextboxes = new ReportProcessing.PageTextboxes();
			}

			// Token: 0x0600880B RID: 34827 RVA: 0x0021EDB6 File Offset: 0x0021CFB6
			internal ReportProcessing.PageTextboxes ExitRepeatingItem()
			{
				if (!this.m_needPageSectionEvaluation)
				{
					return null;
				}
				ReportProcessing.PageTextboxes pageTextboxes = this.m_pageTextboxes;
				this.m_pageTextboxes = this.m_repeatingItemList[0];
				this.m_repeatingItemList.RemoveAt(0);
				return pageTextboxes;
			}

			// Token: 0x0600880C RID: 34828 RVA: 0x0021EDE8 File Offset: 0x0021CFE8
			internal void RegisterTableColumnVisibility(bool isOnePass, TableColumnList columns, bool[] columnsStartHidden)
			{
				if (!this.m_isOnePass && (!this.m_needPageSectionEvaluation || this.InSubreport))
				{
					return;
				}
				Global.Tracer.Assert(columns != null, "(null != columns)");
				bool[] array;
				if (isOnePass && columnsStartHidden == null)
				{
					array = null;
				}
				else
				{
					Global.Tracer.Assert(columns.Count == columnsStartHidden.Length, "(columns.Count == columnsStartHidden.Length)");
					array = new bool[columnsStartHidden.Length];
					for (int i = 0; i < columnsStartHidden.Length; i++)
					{
						array[i] = Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(columns[i].Visibility, columnsStartHidden[i]);
					}
				}
				if (this.m_tableColumnVisibility == null)
				{
					this.m_tableColumnVisibility = new ArrayList();
					this.m_tableColumnPosition = new IntList();
				}
				this.m_tableColumnVisibility.Insert(0, array);
				this.m_tableColumnPosition.Insert(0, -1);
			}

			// Token: 0x0600880D RID: 34829 RVA: 0x0021EEB0 File Offset: 0x0021D0B0
			internal void UnregisterTableColumnVisibility()
			{
				if (!this.m_isOnePass && (!this.m_needPageSectionEvaluation || this.InSubreport))
				{
					return;
				}
				Global.Tracer.Assert(this.m_tableColumnVisibility != null && this.m_tableColumnPosition != null && this.m_tableColumnPosition.Count > 0 && this.m_tableColumnPosition.Count == this.m_tableColumnPosition.Count);
				this.m_tableColumnVisibility.RemoveAt(0);
				this.m_tableColumnPosition.RemoveAt(0);
				if (this.m_tableColumnPosition.Count == 0)
				{
					this.m_tableColumnPosition = null;
					this.m_tableColumnVisibility = null;
				}
			}

			// Token: 0x0600880E RID: 34830 RVA: 0x0021EF4C File Offset: 0x0021D14C
			internal void SetTableCellIndex(bool isOnePass, int position)
			{
				if (!this.m_isOnePass && (!this.m_needPageSectionEvaluation || this.InSubreport))
				{
					return;
				}
				if (isOnePass && this.m_tableColumnPosition == null)
				{
					this.m_tableColumnPosition = new IntList();
					this.m_tableColumnPosition.Add(-1);
					this.m_tableColumnVisibility = new ArrayList();
					this.m_tableColumnVisibility.Add(null);
				}
				Global.Tracer.Assert(this.m_tableColumnPosition != null && position >= 0);
				this.m_tableColumnPosition[0] = position;
			}

			// Token: 0x0600880F RID: 34831 RVA: 0x0021EFDC File Offset: 0x0021D1DC
			internal ReportProcessing.TableColumnInfo GetOnePassTableCellProperties()
			{
				if (!this.m_isOnePass && (!this.m_needPageSectionEvaluation || this.InSubreport))
				{
					return default(ReportProcessing.TableColumnInfo);
				}
				Global.Tracer.Assert(this.m_tableColumnPosition != null, "(null != m_tableColumnPosition)");
				return this.GetTableCellProperties(this.m_tableColumnPosition[0]);
			}

			// Token: 0x06008810 RID: 34832 RVA: 0x0021F038 File Offset: 0x0021D238
			internal bool IsTableColumnVisible(ReportProcessing.TableColumnInfo columnInfo)
			{
				if (!this.m_isOnePass && (!this.m_needPageSectionEvaluation || this.InSubreport))
				{
					return false;
				}
				Global.Tracer.Assert(this.m_tableColumnVisibility != null && 0 < this.m_tableColumnVisibility.Count);
				return Microsoft.ReportingServices.ReportProcessing.Visibility.IsTableCellVisible(this.m_tableColumnVisibility[0] as bool[], columnInfo.StartIndex, columnInfo.Span);
			}

			// Token: 0x06008811 RID: 34833 RVA: 0x0021F0A4 File Offset: 0x0021D2A4
			internal void EnterVisibilityScope(Microsoft.ReportingServices.ReportProcessing.Visibility visibility, bool startHidden)
			{
				if (!this.m_isOnePass && !this.m_needPageSectionEvaluation)
				{
					return;
				}
				if (this.m_pageItemVisibility == null)
				{
					this.m_pageItemVisibility = new List<bool>();
				}
				bool flag = true;
				if (0 < this.m_pageItemVisibility.Count)
				{
					flag = this.m_pageItemVisibility[0];
				}
				if (flag)
				{
					this.m_pageItemVisibility.Insert(0, Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(visibility, startHidden));
					return;
				}
				this.m_pageItemVisibility.Insert(0, false);
			}

			// Token: 0x06008812 RID: 34834 RVA: 0x0021F118 File Offset: 0x0021D318
			internal void ExitVisibilityScope()
			{
				if (!this.m_isOnePass && !this.m_needPageSectionEvaluation)
				{
					return;
				}
				Global.Tracer.Assert(this.m_pageItemVisibility != null && this.m_pageItemVisibility.Count > 0, "(null != m_pageItemVisibility && m_pageItemVisibility.Count > 0)");
				this.m_pageItemVisibility.RemoveAt(0);
			}

			// Token: 0x06008813 RID: 34835 RVA: 0x0021F16C File Offset: 0x0021D36C
			private bool IsMatrixHeadingVisible()
			{
				if (!this.m_isOnePass && !this.m_needPageSectionEvaluation)
				{
					return false;
				}
				if (this.m_matrixInColumnHeader == null)
				{
					return true;
				}
				Global.Tracer.Assert(0 < this.m_matrixInColumnHeader.Count, "(0 < m_matrixInColumnHeader.Count)");
				if (this.m_matrixInColumnHeader[0])
				{
					return this.m_matrixColumnVisibility[0];
				}
				return this.m_matrixRowVisibility[0];
			}

			// Token: 0x06008814 RID: 34836 RVA: 0x0021F1DC File Offset: 0x0021D3DC
			private bool IsMatrixCellVisible()
			{
				if (!this.m_isOnePass && !this.m_needPageSectionEvaluation)
				{
					return false;
				}
				if (this.m_matrixInColumnHeader == null)
				{
					return true;
				}
				bool flag = true;
				if (this.m_matrixColumnVisibility != null)
				{
					flag &= this.m_matrixColumnVisibility[0];
				}
				if (this.m_matrixRowVisibility != null)
				{
					flag &= this.m_matrixRowVisibility[0];
				}
				return flag;
			}

			// Token: 0x06008815 RID: 34837 RVA: 0x0021F238 File Offset: 0x0021D438
			private bool IsParentMatrixHeadingVisible(bool newMatrixHeadingColumn)
			{
				if (!this.m_isOnePass && !this.m_needPageSectionEvaluation)
				{
					return false;
				}
				if (this.m_matrixInColumnHeader == null)
				{
					return true;
				}
				Global.Tracer.Assert(0 < this.m_matrixInColumnHeader.Count, "(0 < m_matrixInColumnHeader.Count)");
				return this.m_matrixInColumnHeader[0] != newMatrixHeadingColumn || this.IsMatrixHeadingVisible();
			}

			// Token: 0x06008816 RID: 34838 RVA: 0x0021F298 File Offset: 0x0021D498
			internal void EnterMatrixSubtotalScope(bool isColumn)
			{
				if (!this.m_needPageSectionEvaluation)
				{
					return;
				}
				if (this.m_matrixInColumnHeader == null)
				{
					this.m_matrixInColumnHeader = new List<bool>();
					this.m_matrixColumnVisibility = new List<bool>();
					this.m_matrixRowVisibility = new List<bool>();
				}
				this.m_matrixInColumnHeader.Insert(0, isColumn);
				if (isColumn)
				{
					this.m_matrixColumnVisibility.Insert(0, false);
					return;
				}
				this.m_matrixRowVisibility.Insert(0, false);
			}

			// Token: 0x06008817 RID: 34839 RVA: 0x0021F304 File Offset: 0x0021D504
			internal void EnterMatrixHeadingScope(bool currentHeadingIsVisible, bool isColumn)
			{
				if (!this.m_needPageSectionEvaluation || this.InSubreport)
				{
					return;
				}
				bool flag = this.IsParentMatrixHeadingVisible(isColumn);
				if (this.m_matrixInColumnHeader == null)
				{
					this.m_matrixInColumnHeader = new List<bool>();
					this.m_matrixColumnVisibility = new List<bool>();
					this.m_matrixRowVisibility = new List<bool>();
				}
				this.m_matrixInColumnHeader.Insert(0, isColumn);
				if (isColumn)
				{
					this.m_matrixColumnVisibility.Insert(0, flag && currentHeadingIsVisible);
					return;
				}
				this.m_matrixRowVisibility.Insert(0, flag && currentHeadingIsVisible);
			}

			// Token: 0x06008818 RID: 34840 RVA: 0x0021F384 File Offset: 0x0021D584
			internal void ExitMatrixHeadingScope(bool isColumn)
			{
				if (!this.m_needPageSectionEvaluation || this.InSubreport)
				{
					return;
				}
				Global.Tracer.Assert(this.m_matrixInColumnHeader != null && 0 < this.m_matrixInColumnHeader.Count, "(null != m_matrixInColumnHeader && 0 < m_matrixInColumnHeader.Count)");
				if (isColumn)
				{
					this.m_matrixColumnVisibility.RemoveAt(0);
				}
				else
				{
					this.m_matrixRowVisibility.RemoveAt(0);
				}
				this.m_matrixInColumnHeader.RemoveAt(0);
				if (this.m_matrixInColumnHeader.Count == 0)
				{
					this.m_matrixInColumnHeader = null;
					this.m_matrixColumnVisibility = null;
					this.m_matrixRowVisibility = null;
				}
			}

			// Token: 0x06008819 RID: 34841 RVA: 0x0021F418 File Offset: 0x0021D618
			internal bool IsParentVisible()
			{
				if (!this.m_isOnePass && !this.m_needPageSectionEvaluation)
				{
					return false;
				}
				if (this.m_subreportLevel != 0 || this.m_inMatrixSubtotal)
				{
					return false;
				}
				if (!this.IsMatrixHeadingVisible())
				{
					return false;
				}
				if (this.m_inMatrixCell && !this.IsMatrixCellVisible())
				{
					return false;
				}
				if (this.m_pageItemVisibility == null || 0 >= this.m_pageItemVisibility.Count)
				{
					return true;
				}
				if (this.m_tableColumnVisibility != null && 0 < this.m_tableColumnVisibility.Count && this.m_tableColumnVisibility[0] != null && this.m_tableColumnSpans != null)
				{
					ReportProcessing.TableColumnInfo tableCellProperties = this.GetTableCellProperties(this.m_tableColumnPosition[0]);
					return this.m_pageItemVisibility[0] && Microsoft.ReportingServices.ReportProcessing.Visibility.IsTableCellVisible(this.m_tableColumnVisibility[0] as bool[], tableCellProperties.StartIndex, tableCellProperties.Span);
				}
				return this.m_pageItemVisibility[0];
			}

			// Token: 0x0600881A RID: 34842 RVA: 0x0021F500 File Offset: 0x0021D700
			internal ReportProcessing.TableColumnInfo GetTableCellProperties(int cellIndex)
			{
				if (cellIndex < 0 || this.m_tableColumnSpans == null)
				{
					return default(ReportProcessing.TableColumnInfo);
				}
				Global.Tracer.Assert(cellIndex < this.m_tableColumnSpans.Count, "(cellIndex < m_tableColumnSpans.Count)");
				ReportProcessing.TableColumnInfo tableColumnInfo = default(ReportProcessing.TableColumnInfo);
				tableColumnInfo.StartIndex = 0;
				for (int i = 0; i < cellIndex; i++)
				{
					tableColumnInfo.StartIndex += this.m_tableColumnSpans[i];
				}
				tableColumnInfo.Span = this.m_tableColumnSpans[cellIndex];
				return tableColumnInfo;
			}

			// Token: 0x040048B8 RID: 18616
			private bool m_needPageSectionEvaluation;

			// Token: 0x040048B9 RID: 18617
			private bool m_isOnePass;

			// Token: 0x040048BA RID: 18618
			private ReportProcessing.PageTextboxes m_pageTextboxes;

			// Token: 0x040048BB RID: 18619
			private List<bool> m_pageItemVisibility;

			// Token: 0x040048BC RID: 18620
			private List<bool> m_matrixColumnVisibility;

			// Token: 0x040048BD RID: 18621
			private List<bool> m_matrixRowVisibility;

			// Token: 0x040048BE RID: 18622
			private List<bool> m_matrixInColumnHeader;

			// Token: 0x040048BF RID: 18623
			private ArrayList m_tableColumnVisibility;

			// Token: 0x040048C0 RID: 18624
			private IntList m_tableColumnPosition;

			// Token: 0x040048C1 RID: 18625
			private IntList m_tableColumnSpans;

			// Token: 0x040048C2 RID: 18626
			private List<ReportProcessing.PageTextboxes> m_repeatingItemList;

			// Token: 0x040048C3 RID: 18627
			private bool m_inMatrixSubtotal;

			// Token: 0x040048C4 RID: 18628
			private bool m_inMatrixCell;

			// Token: 0x040048C5 RID: 18629
			private int m_subreportLevel;
		}

		// Token: 0x02000C3F RID: 3135
		internal sealed class AggregateRow
		{
			// Token: 0x0600881B RID: 34843 RVA: 0x0021F588 File Offset: 0x0021D788
			internal AggregateRow(ReportProcessing.ProcessingContext processingContext)
			{
				FieldsImpl fieldsImpl = processingContext.ReportObjectModel.FieldsImpl;
				this.m_fields = fieldsImpl.GetAndSaveFields();
				this.m_isAggregateRow = fieldsImpl.IsAggregateRow;
				this.m_aggregationFieldCount = fieldsImpl.AggregationFieldCount;
				this.m_validAggregateRow = fieldsImpl.ValidAggregateRow;
			}

			// Token: 0x0600881C RID: 34844 RVA: 0x0021F5D7 File Offset: 0x0021D7D7
			internal void SetFields(ReportProcessing.ProcessingContext processingContext)
			{
				processingContext.ReportObjectModel.FieldsImpl.SetFields(this.m_fields, this.m_isAggregateRow, this.m_aggregationFieldCount, this.m_validAggregateRow);
			}

			// Token: 0x040048C6 RID: 18630
			private FieldImpl[] m_fields;

			// Token: 0x040048C7 RID: 18631
			private bool m_isAggregateRow;

			// Token: 0x040048C8 RID: 18632
			private int m_aggregationFieldCount;

			// Token: 0x040048C9 RID: 18633
			private bool m_validAggregateRow;
		}

		// Token: 0x02000C40 RID: 3136
		internal sealed class AggregateRowList : ArrayList
		{
			// Token: 0x17002A51 RID: 10833
			internal ReportProcessing.AggregateRow this[int index]
			{
				get
				{
					return (ReportProcessing.AggregateRow)base[index];
				}
			}
		}

		// Token: 0x02000C41 RID: 3137
		internal sealed class AggregateRowInfo
		{
			// Token: 0x0600881F RID: 34847 RVA: 0x0021F618 File Offset: 0x0021D818
			internal void SaveAggregateInfo(ReportProcessing.ProcessingContext processingContext)
			{
				FieldsImpl fieldsImpl = processingContext.ReportObjectModel.FieldsImpl;
				this.m_aggregationFieldCount = fieldsImpl.AggregationFieldCount;
				if (this.m_aggregationFieldChecked == null)
				{
					this.m_aggregationFieldChecked = new bool[fieldsImpl.Count];
				}
				for (int i = 0; i < fieldsImpl.Count; i++)
				{
					this.m_aggregationFieldChecked[i] = fieldsImpl[i].AggregationFieldChecked;
				}
				this.m_validAggregateRow = fieldsImpl.ValidAggregateRow;
			}

			// Token: 0x06008820 RID: 34848 RVA: 0x0021F688 File Offset: 0x0021D888
			internal void RestoreAggregateInfo(ReportProcessing.ProcessingContext processingContext)
			{
				FieldsImpl fieldsImpl = processingContext.ReportObjectModel.FieldsImpl;
				fieldsImpl.AggregationFieldCount = this.m_aggregationFieldCount;
				Global.Tracer.Assert(this.m_aggregationFieldChecked != null, "(null != m_aggregationFieldChecked)");
				for (int i = 0; i < fieldsImpl.Count; i++)
				{
					fieldsImpl[i].AggregationFieldChecked = this.m_aggregationFieldChecked[i];
				}
				fieldsImpl.ValidAggregateRow = this.m_validAggregateRow;
			}

			// Token: 0x06008821 RID: 34849 RVA: 0x0021F6F8 File Offset: 0x0021D8F8
			internal void CombineAggregateInfo(ReportProcessing.ProcessingContext processingContext, ReportProcessing.AggregateRowInfo updated)
			{
				FieldsImpl fieldsImpl = processingContext.ReportObjectModel.FieldsImpl;
				if (updated == null)
				{
					fieldsImpl.ValidAggregateRow = false;
					return;
				}
				if (!updated.m_validAggregateRow)
				{
					fieldsImpl.ValidAggregateRow = false;
				}
				for (int i = 0; i < fieldsImpl.Count; i++)
				{
					if (updated.m_aggregationFieldChecked[i] && !fieldsImpl[i].AggregationFieldChecked)
					{
						fieldsImpl[i].AggregationFieldChecked = true;
						FieldsImpl fieldsImpl2 = fieldsImpl;
						int aggregationFieldCount = fieldsImpl2.AggregationFieldCount;
						fieldsImpl2.AggregationFieldCount = aggregationFieldCount - 1;
					}
				}
			}

			// Token: 0x040048CA RID: 18634
			private bool[] m_aggregationFieldChecked;

			// Token: 0x040048CB RID: 18635
			private int m_aggregationFieldCount;

			// Token: 0x040048CC RID: 18636
			private bool m_validAggregateRow;
		}

		// Token: 0x02000C42 RID: 3138
		private sealed class RuntimeRICollectionList : ArrayList
		{
			// Token: 0x06008823 RID: 34851 RVA: 0x0021F779 File Offset: 0x0021D979
			internal RuntimeRICollectionList()
			{
			}

			// Token: 0x06008824 RID: 34852 RVA: 0x0021F781 File Offset: 0x0021D981
			internal RuntimeRICollectionList(int capacity)
				: base(capacity)
			{
			}

			// Token: 0x17002A52 RID: 10834
			internal ReportProcessing.RuntimeRICollection this[int index]
			{
				get
				{
					return (ReportProcessing.RuntimeRICollection)base[index];
				}
			}

			// Token: 0x06008826 RID: 34854 RVA: 0x0021F798 File Offset: 0x0021D998
			internal void FirstPassNextDataRow()
			{
				for (int i = 0; i < this.Count; i++)
				{
					this[i].FirstPassNextDataRow();
				}
			}

			// Token: 0x06008827 RID: 34855 RVA: 0x0021F7C4 File Offset: 0x0021D9C4
			internal void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				for (int i = 0; i < this.Count; i++)
				{
					this[i].CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
			}

			// Token: 0x06008828 RID: 34856 RVA: 0x0021F7F4 File Offset: 0x0021D9F4
			internal void CalculatePreviousAggregates(AggregatesImpl globalRVCol)
			{
				for (int i = 0; i < this.Count; i++)
				{
					this[i].CalculatePreviousAggregates(globalRVCol);
				}
			}

			// Token: 0x06008829 RID: 34857 RVA: 0x0021F820 File Offset: 0x0021DA20
			internal void ResetReportItemObjs()
			{
				for (int i = 0; i < this.Count; i++)
				{
					this[i].ResetReportItemObjs();
				}
			}
		}

		// Token: 0x02000C43 RID: 3139
		internal interface IFilterOwner
		{
			// Token: 0x0600882A RID: 34858
			void PostFilterNextRow();
		}

		// Token: 0x02000C44 RID: 3140
		internal interface IScope
		{
			// Token: 0x17002A53 RID: 10835
			// (get) Token: 0x0600882B RID: 34859
			bool TargetForNonDetailSort { get; }

			// Token: 0x17002A54 RID: 10836
			// (get) Token: 0x0600882C RID: 34860
			int[] SortFilterExpressionScopeInfoIndices { get; }

			// Token: 0x0600882D RID: 34861
			bool IsTargetForSort(int index, bool detailSort);

			// Token: 0x0600882E RID: 34862
			void ReadRow(ReportProcessing.DataActions dataAction);

			// Token: 0x0600882F RID: 34863
			bool InScope(string scope);

			// Token: 0x06008830 RID: 34864
			ReportProcessing.IScope GetOuterScope(bool includeSubReportContainingScope);

			// Token: 0x06008831 RID: 34865
			string GetScopeName();

			// Token: 0x06008832 RID: 34866
			int RecursiveLevel(string scope);

			// Token: 0x06008833 RID: 34867
			bool TargetScopeMatched(int index, bool detailSort);

			// Token: 0x06008834 RID: 34868
			void GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index);

			// Token: 0x06008835 RID: 34869
			void GetGroupNameValuePairs(Dictionary<string, object> pairs);
		}

		// Token: 0x02000C45 RID: 3141
		internal interface IHierarchyObj
		{
			// Token: 0x17002A55 RID: 10837
			// (get) Token: 0x06008836 RID: 34870
			ReportProcessing.IHierarchyObj HierarchyRoot { get; }

			// Token: 0x17002A56 RID: 10838
			// (get) Token: 0x06008837 RID: 34871
			ReportProcessing.ProcessingContext ProcessingContext { get; }

			// Token: 0x17002A57 RID: 10839
			// (get) Token: 0x06008838 RID: 34872
			// (set) Token: 0x06008839 RID: 34873
			ReportProcessing.BTreeNode SortTree { get; set; }

			// Token: 0x17002A58 RID: 10840
			// (get) Token: 0x0600883A RID: 34874
			int ExpressionIndex { get; }

			// Token: 0x17002A59 RID: 10841
			// (get) Token: 0x0600883B RID: 34875
			IntList SortFilterInfoIndices { get; }

			// Token: 0x17002A5A RID: 10842
			// (get) Token: 0x0600883C RID: 34876
			bool IsDetail { get; }

			// Token: 0x0600883D RID: 34877
			ReportProcessing.IHierarchyObj CreateHierarchyObj();

			// Token: 0x0600883E RID: 34878
			ProcessingMessageList RegisterComparisonError(string propertyName);

			// Token: 0x0600883F RID: 34879
			void NextRow();

			// Token: 0x06008840 RID: 34880
			void Traverse(ReportProcessing.ProcessingStages operation);

			// Token: 0x06008841 RID: 34881
			void ReadRow();

			// Token: 0x06008842 RID: 34882
			void ProcessUserSort();

			// Token: 0x06008843 RID: 34883
			void MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo);

			// Token: 0x06008844 RID: 34884
			void AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo);
		}

		// Token: 0x02000C46 RID: 3142
		internal interface ISortDataHolder
		{
			// Token: 0x06008845 RID: 34885
			void NextRow();

			// Token: 0x06008846 RID: 34886
			void Traverse(ReportProcessing.ProcessingStages operation);
		}

		// Token: 0x02000C47 RID: 3143
		private sealed class RuntimeDRCollection
		{
			// Token: 0x06008847 RID: 34887 RVA: 0x0021F84A File Offset: 0x0021DA4A
			internal RuntimeDRCollection(ReportProcessing.IScope outerScope, DataRegionList dataRegionDefs, ReportProcessing.ProcessingContext processingContext, bool onePass)
			{
				this.m_processingContext = processingContext;
				this.m_dataRegionObjs = new ReportProcessing.RuntimeDataRegionObjList();
				this.CreateDataRegions(outerScope, dataRegionDefs, onePass);
			}

			// Token: 0x06008848 RID: 34888 RVA: 0x0021F870 File Offset: 0x0021DA70
			private void CreateDataRegions(ReportProcessing.IScope outerScope, DataRegionList dataRegionDefs, bool onePass)
			{
				ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
				for (int i = 0; i < dataRegionDefs.Count; i++)
				{
					Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegion = dataRegionDefs[i];
					ReportProcessing.RuntimeDataRegionObj runtimeDataRegionObj = null;
					if (dataRegion is List)
					{
						List list = (List)dataRegion;
						if (onePass)
						{
							Global.Tracer.Assert(list.Grouping == null, "(null == list.Grouping)");
							runtimeDataRegionObj = new ReportProcessing.RuntimeOnePassListDetailObj(outerScope, list, this.m_processingContext);
						}
						else if (list.Grouping != null)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeListGroupRootObj(outerScope, list, ref dataActions, this.m_processingContext);
						}
						else
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeListDetailObj(outerScope, list, ref dataActions, this.m_processingContext);
						}
					}
					else if (dataRegion is Matrix)
					{
						runtimeDataRegionObj = new ReportProcessing.RuntimeMatrixObj(outerScope, (Matrix)dataRegion, ref dataActions, this.m_processingContext, onePass);
					}
					else if (dataRegion is Microsoft.ReportingServices.ReportProcessing.Chart)
					{
						runtimeDataRegionObj = new ReportProcessing.RuntimeChartObj(outerScope, (Microsoft.ReportingServices.ReportProcessing.Chart)dataRegion, ref dataActions, this.m_processingContext, onePass);
					}
					else if (dataRegion is Table)
					{
						runtimeDataRegionObj = new ReportProcessing.RuntimeTableObj(outerScope, (Table)dataRegion, ref dataActions, this.m_processingContext, onePass);
					}
					else if (dataRegion is Microsoft.ReportingServices.ReportProcessing.CustomReportItem)
					{
						Microsoft.ReportingServices.ReportProcessing.CustomReportItem customReportItem = dataRegion as Microsoft.ReportingServices.ReportProcessing.CustomReportItem;
						Global.Tracer.Assert(customReportItem != null, "(null != crItem)");
						if (customReportItem.DataSetName != null)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeCustomReportItemObj(outerScope, customReportItem, ref dataActions, this.m_processingContext, onePass);
						}
					}
					else if (dataRegion is OWCChart)
					{
						OWCChart owcchart = (OWCChart)dataRegion;
						owcchart.SetExprHost(this.m_processingContext.ReportRuntime.ReportExprHost, this.m_processingContext.ReportObjectModel);
						if (onePass)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeOnePassOWCChartDetailObj(outerScope, owcchart, this.m_processingContext);
						}
						else
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeOWCChartDetailObj(outerScope, owcchart, ref dataActions, this.m_processingContext);
						}
					}
					if (runtimeDataRegionObj != null)
					{
						this.m_dataRegionObjs.Add(runtimeDataRegionObj);
						dataRegion.RuntimeDataRegionObj = runtimeDataRegionObj;
					}
				}
			}

			// Token: 0x06008849 RID: 34889 RVA: 0x0021FA30 File Offset: 0x0021DC30
			internal void FirstPassNextDataRow()
			{
				ReportProcessing.AggregateRowInfo aggregateRowInfo = new ReportProcessing.AggregateRowInfo();
				aggregateRowInfo.SaveAggregateInfo(this.m_processingContext);
				for (int i = 0; i < this.m_dataRegionObjs.Count; i++)
				{
					this.m_dataRegionObjs[i].NextRow();
					aggregateRowInfo.RestoreAggregateInfo(this.m_processingContext);
				}
			}

			// Token: 0x0600884A RID: 34890 RVA: 0x0021FA84 File Offset: 0x0021DC84
			internal void SortAndFilter()
			{
				for (int i = 0; i < this.m_dataRegionObjs.Count; i++)
				{
					ReportProcessing.RuntimeDataRegionObj runtimeDataRegionObj = this.m_dataRegionObjs[i];
					if (!(runtimeDataRegionObj is ReportProcessing.RuntimeDetailObj))
					{
						runtimeDataRegionObj.SortAndFilter();
					}
				}
			}

			// Token: 0x0600884B RID: 34891 RVA: 0x0021FAC4 File Offset: 0x0021DCC4
			internal void CalculateRunningValues(AggregatesImpl globalRunningValueCollection, ReportProcessing.RuntimeGroupRootObjList groupCollection)
			{
				for (int i = 0; i < this.m_dataRegionObjs.Count; i++)
				{
					this.m_dataRegionObjs[i].CalculateRunningValues(globalRunningValueCollection, groupCollection, null);
				}
			}

			// Token: 0x040048CD RID: 18637
			private ReportProcessing.RuntimeDataRegionObjList m_dataRegionObjs;

			// Token: 0x040048CE RID: 18638
			private ReportProcessing.ProcessingContext m_processingContext;
		}

		// Token: 0x02000C48 RID: 3144
		internal sealed class RuntimeRICollection
		{
			// Token: 0x0600884C RID: 34892 RVA: 0x0021FAFB File Offset: 0x0021DCFB
			internal RuntimeRICollection(ReportProcessing.IScope owner, Microsoft.ReportingServices.ReportProcessing.ReportItemCollection RIColDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, bool createDataRegions)
			{
				this.m_owner = owner;
				this.m_reportItemsDef = RIColDef;
				this.m_processingContext = processingContext;
				if (createDataRegions && RIColDef != null)
				{
					this.CreateDataRegions(owner, RIColDef.ComputedReportItems, ref dataAction);
				}
			}

			// Token: 0x0600884D RID: 34893 RVA: 0x0021FB2E File Offset: 0x0021DD2E
			internal RuntimeRICollection(ReportProcessing.IScope owner, Microsoft.ReportingServices.ReportProcessing.ReportItemCollection RIColDef, ReportProcessing.ProcessingContext processingContext, bool createDataRegions)
			{
				this.m_owner = owner;
				this.m_reportItemsDef = RIColDef;
				this.m_processingContext = processingContext;
				if (createDataRegions)
				{
					this.CreateDataRegions(owner, RIColDef.ComputedReportItems);
				}
			}

			// Token: 0x17002A5B RID: 10843
			// (get) Token: 0x0600884E RID: 34894 RVA: 0x0021FB5C File Offset: 0x0021DD5C
			internal Microsoft.ReportingServices.ReportProcessing.ReportItemCollection ReportItemsDef
			{
				get
				{
					return this.m_reportItemsDef;
				}
			}

			// Token: 0x0600884F RID: 34895 RVA: 0x0021FB64 File Offset: 0x0021DD64
			private void CreateDataRegions(ReportProcessing.IScope owner, ReportItemList computedRIs, ref ReportProcessing.DataActions dataAction)
			{
				if (computedRIs == null)
				{
					return;
				}
				for (int i = 0; i < computedRIs.Count; i++)
				{
					Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = computedRIs[i];
					ReportProcessing.RuntimeDataRegionObj runtimeDataRegionObj = null;
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle)
					{
						Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems = ((Microsoft.ReportingServices.ReportProcessing.Rectangle)reportItem).ReportItems;
						if (reportItems != null && reportItems.ComputedReportItems != null)
						{
							this.CreateDataRegions(owner, reportItems.ComputedReportItems, ref dataAction);
						}
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.DataRegion && !(owner is ReportProcessing.RuntimeDetailObj))
					{
						if (reportItem is List)
						{
							List list = (List)reportItem;
							if (list.Grouping != null)
							{
								runtimeDataRegionObj = new ReportProcessing.RuntimeListGroupRootObj(owner, list, ref dataAction, this.m_processingContext);
							}
							else
							{
								runtimeDataRegionObj = new ReportProcessing.RuntimeListDetailObj(owner, list, ref dataAction, this.m_processingContext);
							}
						}
						else if (reportItem is Matrix)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeMatrixObj(owner, (Matrix)reportItem, ref dataAction, this.m_processingContext, false);
						}
						else if (reportItem is Table)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeTableObj(owner, (Table)reportItem, ref dataAction, this.m_processingContext, false);
						}
						else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Chart)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeChartObj(owner, (Microsoft.ReportingServices.ReportProcessing.Chart)reportItem, ref dataAction, this.m_processingContext, false);
						}
						else if (reportItem is OWCChart)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeOWCChartDetailObj(owner, (OWCChart)reportItem, ref dataAction, this.m_processingContext);
						}
						else if (reportItem is Microsoft.ReportingServices.ReportProcessing.CustomReportItem && ((Microsoft.ReportingServices.ReportProcessing.CustomReportItem)reportItem).DataSetName != null)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeCustomReportItemObj(owner, (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)reportItem, ref dataAction, this.m_processingContext, false);
						}
					}
					if (runtimeDataRegionObj != null)
					{
						if (this.m_dataRegionObjs == null)
						{
							this.m_dataRegionObjs = new ReportProcessing.RuntimeDataRegionObjList();
						}
						this.m_dataRegionObjs.Add(runtimeDataRegionObj);
					}
				}
			}

			// Token: 0x06008850 RID: 34896 RVA: 0x0021FCF4 File Offset: 0x0021DEF4
			private void CreateDataRegions(ReportProcessing.IScope owner, ReportItemList computedRIs)
			{
				if (computedRIs == null)
				{
					return;
				}
				ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
				for (int i = 0; i < computedRIs.Count; i++)
				{
					Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = computedRIs[i];
					ReportProcessing.RuntimeDataRegionObj runtimeDataRegionObj = null;
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle)
					{
						Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems = ((Microsoft.ReportingServices.ReportProcessing.Rectangle)reportItem).ReportItems;
						if (reportItems != null && reportItems.ComputedReportItems != null)
						{
							this.CreateDataRegions(owner, reportItems.ComputedReportItems);
						}
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.DataRegion)
					{
						if (reportItem is List)
						{
							List list = (List)reportItem;
							Global.Tracer.Assert(list.Grouping == null, "(null == list.Grouping)");
							runtimeDataRegionObj = new ReportProcessing.RuntimeOnePassListDetailObj(owner, list, this.m_processingContext);
						}
						else if (reportItem is Matrix)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeMatrixObj(owner, (Matrix)reportItem, ref dataActions, this.m_processingContext, true);
						}
						else if (reportItem is Table)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeTableObj(owner, (Table)reportItem, ref dataActions, this.m_processingContext, true);
						}
						else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Chart)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeChartObj(owner, (Microsoft.ReportingServices.ReportProcessing.Chart)reportItem, ref dataActions, this.m_processingContext, true);
						}
						else if (reportItem is OWCChart)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeOnePassOWCChartDetailObj(owner, (OWCChart)reportItem, this.m_processingContext);
						}
						else if (reportItem is Microsoft.ReportingServices.ReportProcessing.CustomReportItem)
						{
							runtimeDataRegionObj = new ReportProcessing.RuntimeCustomReportItemObj(owner, (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)reportItem, ref dataActions, this.m_processingContext, true);
						}
					}
					if (runtimeDataRegionObj != null)
					{
						if (this.m_dataRegionObjs == null)
						{
							this.m_dataRegionObjs = new ReportProcessing.RuntimeDataRegionObjList();
						}
						this.m_dataRegionObjs.Add(runtimeDataRegionObj);
					}
				}
			}

			// Token: 0x06008851 RID: 34897 RVA: 0x0021FE6C File Offset: 0x0021E06C
			internal void FirstPassNextDataRow()
			{
				if (this.m_dataRegionObjs == null)
				{
					return;
				}
				ReportProcessing.AggregateRowInfo aggregateRowInfo = new ReportProcessing.AggregateRowInfo();
				aggregateRowInfo.SaveAggregateInfo(this.m_processingContext);
				for (int i = 0; i < this.m_dataRegionObjs.Count; i++)
				{
					this.m_dataRegionObjs[i].NextRow();
					aggregateRowInfo.RestoreAggregateInfo(this.m_processingContext);
				}
			}

			// Token: 0x06008852 RID: 34898 RVA: 0x0021FEC8 File Offset: 0x0021E0C8
			internal void SortAndFilter()
			{
				if (this.m_dataRegionObjs == null)
				{
					return;
				}
				for (int i = 0; i < this.m_dataRegionObjs.Count; i++)
				{
					ReportProcessing.RuntimeDataRegionObj runtimeDataRegionObj = this.m_dataRegionObjs[i];
					if (!(runtimeDataRegionObj is ReportProcessing.RuntimeDetailObj))
					{
						runtimeDataRegionObj.SortAndFilter();
					}
				}
			}

			// Token: 0x06008853 RID: 34899 RVA: 0x0021FF10 File Offset: 0x0021E110
			internal void CalculatePreviousAggregates(AggregatesImpl globalRunningValueCollection)
			{
				ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRunningValueCollection, this.m_reportItemsDef.RunningValues, ref this.m_runningValueValues, true);
			}

			// Token: 0x06008854 RID: 34900 RVA: 0x0021FF2A File Offset: 0x0021E12A
			internal void CalculateRunningValues(AggregatesImpl globalRunningValueCollection, ReportProcessing.RuntimeGroupRootObjList groupCollection, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				this.CalculateInnerRunningValues(globalRunningValueCollection, groupCollection, lastGroup);
				ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRunningValueCollection, this.m_reportItemsDef.RunningValues, ref this.m_runningValueValues, false);
			}

			// Token: 0x06008855 RID: 34901 RVA: 0x0021FF50 File Offset: 0x0021E150
			internal void CalculateInnerRunningValues(AggregatesImpl globalRunningValueCollection, ReportProcessing.RuntimeGroupRootObjList groupCollection, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_dataRegionObjs != null)
				{
					for (int i = 0; i < this.m_dataRegionObjs.Count; i++)
					{
						this.m_dataRegionObjs[i].CalculateRunningValues(globalRunningValueCollection, groupCollection, lastGroup);
					}
				}
			}

			// Token: 0x06008856 RID: 34902 RVA: 0x0021FF90 File Offset: 0x0021E190
			internal static void DoneReadingRows(AggregatesImpl globalRVCol, RunningValueInfoList runningValues, ref DataAggregateObjResult[] runningValueValues, bool processPreviousAggregates)
			{
				if (runningValues != null && 0 < runningValues.Count)
				{
					if (runningValueValues == null)
					{
						runningValueValues = new DataAggregateObjResult[runningValues.Count];
					}
					for (int i = 0; i < runningValues.Count; i++)
					{
						if (processPreviousAggregates == (DataAggregateInfo.AggregateTypes.Previous == runningValues[i].AggregateType))
						{
							runningValueValues[i] = globalRVCol.GetAggregateObj(runningValues[i].Name).AggregateResult();
						}
					}
					return;
				}
				runningValueValues = null;
			}

			// Token: 0x06008857 RID: 34903 RVA: 0x00220004 File Offset: 0x0021E204
			private void SetupEnvironment()
			{
				RunningValueInfoList runningValues = this.m_reportItemsDef.RunningValues;
				if (runningValues != null && this.m_runningValueValues != null)
				{
					for (int i = 0; i < runningValues.Count; i++)
					{
						this.m_processingContext.ReportObjectModel.AggregatesImpl.Set(runningValues[i].Name, runningValues[i], runningValues[i].DuplicateNames, this.m_runningValueValues[i]);
					}
				}
				this.SetReportItemObjScope();
			}

			// Token: 0x06008858 RID: 34904 RVA: 0x00220080 File Offset: 0x0021E280
			private void SetupEnvironment(Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItemsDef)
			{
				this.SetupEnvironment();
				if (reportItemsDef.ComputedReportItems == null)
				{
					return;
				}
				int num = 0;
				for (int i = 0; i < reportItemsDef.ComputedReportItems.Count; i++)
				{
					Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = reportItemsDef.ComputedReportItems[i];
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.DataRegion)
					{
						if (reportItem is Table || reportItem is Matrix)
						{
							ReportProcessing.RuntimeDataRegionObj runtimeDataRegionObj;
							if (this.m_dataRegionObjs != null)
							{
								runtimeDataRegionObj = this.m_dataRegionObjs[num];
							}
							else
							{
								runtimeDataRegionObj = ((Microsoft.ReportingServices.ReportProcessing.DataRegion)reportItem).RuntimeDataRegionObj;
							}
							Global.Tracer.Assert(runtimeDataRegionObj != null, "(null != dataRegionObj)");
							runtimeDataRegionObj.SetupEnvironment();
						}
						if (this.m_dataRegionObjs != null)
						{
							num++;
						}
					}
				}
			}

			// Token: 0x06008859 RID: 34905 RVA: 0x00220124 File Offset: 0x0021E324
			internal void CreateInstances(ReportItemColInstance collectionInstance, bool ignorePageBreaks, bool ignoreInstances)
			{
				if (ignorePageBreaks)
				{
					this.m_processingContext.ChunkManager.EnterIgnorePageBreakItem();
				}
				if (ignoreInstances)
				{
					this.m_processingContext.ChunkManager.EnterIgnoreInstances();
				}
				this.CreateInstances(collectionInstance);
				if (ignoreInstances)
				{
					this.m_processingContext.ChunkManager.LeaveIgnoreInstances();
				}
				if (ignorePageBreaks)
				{
					this.m_processingContext.ChunkManager.LeaveIgnorePageBreakItem();
				}
			}

			// Token: 0x0600885A RID: 34906 RVA: 0x00220184 File Offset: 0x0021E384
			internal void CreateInstances(ReportItemColInstance collectionInstance)
			{
				this.SetupEnvironment(this.m_reportItemsDef);
				this.m_currDataRegion = 0;
				this.CreateInstances(collectionInstance, this.m_reportItemsDef);
			}

			// Token: 0x0600885B RID: 34907 RVA: 0x002201A8 File Offset: 0x0021E3A8
			private void CreateInstances(ReportItemColInstance collectionInstance, Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItemsDef)
			{
				if (reportItemsDef == null || reportItemsDef.Count < 1)
				{
					return;
				}
				reportItemsDef.ProcessDrillthroughAction(this.m_processingContext, collectionInstance.ChildrenNonComputedUniqueNames);
				this.m_processingContext.ChunkManager.EnterReportItemCollection();
				Microsoft.ReportingServices.ReportProcessing.ReportItem parent = reportItemsDef[0].Parent;
				int num = parent.StartPage;
				bool flag = false;
				bool flag2 = parent is Table;
				if (parent is Microsoft.ReportingServices.ReportProcessing.Report || parent is List || parent is Microsoft.ReportingServices.ReportProcessing.Rectangle || parent is Microsoft.ReportingServices.ReportProcessing.SubReport || parent is Microsoft.ReportingServices.ReportProcessing.CustomReportItem)
				{
					flag = true;
					collectionInstance.ChildrenStartAndEndPages = new RenderingPagesRangesList(reportItemsDef.Count);
				}
				List<Microsoft.ReportingServices.ReportProcessing.DataRegion> list = new List<Microsoft.ReportingServices.ReportProcessing.DataRegion>();
				for (int i = 0; i < reportItemsDef.Count; i++)
				{
					if (flag2)
					{
						this.m_processingContext.PageSectionContext.SetTableCellIndex(this.m_processingContext.IsOnePass, i);
					}
					bool flag3;
					int num2;
					Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem;
					reportItemsDef.GetReportItem(i, out flag3, out num2, out reportItem);
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.DataRegion && ((Microsoft.ReportingServices.ReportProcessing.DataRegion)reportItem).RepeatSiblings != null)
					{
						list.Add(reportItem as Microsoft.ReportingServices.ReportProcessing.DataRegion);
					}
					if (reportItem.RepeatedSibling)
					{
						this.m_processingContext.PageSectionContext.EnterRepeatingItem();
					}
					if (flag3)
					{
						reportItem = reportItemsDef.ComputedReportItems[num2];
						ReportItemInstance reportItemInstance = this.CreateInstance(reportItem, false, i);
						if (reportItemInstance != null)
						{
							collectionInstance.Add(reportItemInstance);
						}
					}
					else
					{
						collectionInstance.SetPaginationForNonComputedChild(this.m_processingContext.Pagination, reportItem, parent);
						reportItem.ProcessNavigationAction(this.m_processingContext.NavigationInfo, collectionInstance.ChildrenNonComputedUniqueNames[num2], reportItem.StartPage);
						ReportProcessing.RuntimeRICollection.AddNonComputedPageTextboxes(reportItem, reportItem.StartPage, this.m_processingContext);
					}
					if (reportItem.RepeatedSibling)
					{
						reportItem.RepeatedSiblingTextboxes = this.m_processingContext.PageSectionContext.ExitRepeatingItem();
					}
					num = Math.Max(num, reportItem.EndPage);
					if (flag)
					{
						RenderingPagesRanges renderingPagesRanges = default(RenderingPagesRanges);
						renderingPagesRanges.StartPage = reportItem.StartPage;
						renderingPagesRanges.EndPage = reportItem.EndPage;
						collectionInstance.ChildrenStartAndEndPages.Add(renderingPagesRanges);
					}
					if (reportItem.RepeatedSiblingTextboxes != null && this.m_processingContext.PageSectionContext.PageTextboxes != null)
					{
						this.m_processingContext.PageSectionContext.PageTextboxes.IntegrateRepeatingTextboxValues(reportItem.RepeatedSiblingTextboxes, reportItem.StartPage, reportItem.EndPage);
					}
				}
				if (this.m_processingContext.PageSectionContext.PageTextboxes != null)
				{
					for (int j = 0; j < list.Count; j++)
					{
						Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegion = list[j];
						Global.Tracer.Assert(dataRegion.RepeatSiblings != null, "(null != dataRegion.RepeatSiblings)");
						for (int k = 0; k < dataRegion.RepeatSiblings.Count; k++)
						{
							Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem2 = reportItemsDef[dataRegion.RepeatSiblings[k]];
							Global.Tracer.Assert(reportItem2 != null, "(null != sibling)");
							this.m_processingContext.PageSectionContext.PageTextboxes.IntegrateRepeatingTextboxValues(reportItem2.RepeatedSiblingTextboxes, dataRegion.StartPage, dataRegion.EndPage);
						}
					}
				}
				if (num > parent.EndPage)
				{
					parent.EndPage = num;
					this.m_processingContext.Pagination.SetCurrentPageHeight(parent, 1.0);
				}
				this.m_processingContext.ChunkManager.LeaveReportItemCollection();
			}

			// Token: 0x0600885C RID: 34908 RVA: 0x002204E0 File Offset: 0x0021E6E0
			internal static void AddNonComputedPageTextboxes(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, int startPage, ReportProcessing.ProcessingContext processingContext)
			{
				if (!processingContext.PageSectionContext.IsParentVisible() || !Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(reportItem))
				{
					return;
				}
				if (reportItem is Microsoft.ReportingServices.ReportProcessing.TextBox)
				{
					Microsoft.ReportingServices.ReportProcessing.TextBox textBox = reportItem as Microsoft.ReportingServices.ReportProcessing.TextBox;
					object obj = null;
					if (textBox.Value != null)
					{
						obj = textBox.Value.Value;
					}
					if (0 <= startPage)
					{
						textBox.StartPage = startPage;
					}
					ReportProcessing.RuntimeRICollection.AddPageTextbox(processingContext, textBox, null, null, obj);
					return;
				}
				if (reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle)
				{
					Microsoft.ReportingServices.ReportProcessing.Rectangle rectangle = reportItem as Microsoft.ReportingServices.ReportProcessing.Rectangle;
					if (rectangle.ReportItems != null)
					{
						for (int i = 0; i < rectangle.ReportItems.Count; i++)
						{
							ReportProcessing.RuntimeRICollection.AddNonComputedPageTextboxes(rectangle.ReportItems[i], startPage, processingContext);
						}
					}
				}
			}

			// Token: 0x0600885D RID: 34909 RVA: 0x00220580 File Offset: 0x0021E780
			internal ReportItemInstance CreateInstance(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, bool setupEnvironment, bool ignorePageBreaks, bool ignoreInstances)
			{
				if (ignorePageBreaks)
				{
					this.m_processingContext.ChunkManager.EnterIgnorePageBreakItem();
				}
				if (ignoreInstances)
				{
					this.m_processingContext.ChunkManager.EnterIgnoreInstances();
				}
				ReportItemInstance reportItemInstance = this.CreateInstance(reportItem, setupEnvironment, -1);
				if (ignoreInstances)
				{
					this.m_processingContext.ChunkManager.LeaveIgnoreInstances();
				}
				if (ignorePageBreaks)
				{
					this.m_processingContext.ChunkManager.LeaveIgnorePageBreakItem();
				}
				return reportItemInstance;
			}

			// Token: 0x0600885E RID: 34910 RVA: 0x002205E4 File Offset: 0x0021E7E4
			private ReportItemInstance CreateInstance(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, bool setupEnvironment, int index)
			{
				ReportItemInstance reportItemInstance = null;
				string text = null;
				if (setupEnvironment)
				{
					this.SetupEnvironment();
				}
				bool flag = reportItem is Microsoft.ReportingServices.ReportProcessing.SubReport || reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle || reportItem is Microsoft.ReportingServices.ReportProcessing.DataRegion;
				this.m_processingContext.Pagination.EnterIgnorePageBreak(reportItem.Visibility, false);
				if (!(reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle) && !(reportItem is Microsoft.ReportingServices.ReportProcessing.DataRegion) && reportItem.Parent != null)
				{
					if (reportItem.Parent is Microsoft.ReportingServices.ReportProcessing.Rectangle || reportItem.Parent is Microsoft.ReportingServices.ReportProcessing.Report || reportItem.Parent is List)
					{
						bool flag2 = this.m_processingContext.Pagination.CalculateSoftPageBreak(reportItem, 0.0, (double)reportItem.DistanceBeforeTop, false, false);
						this.m_processingContext.Pagination.SetReportItemStartPage(reportItem, flag2);
					}
					else
					{
						int num = reportItem.Parent.StartPage;
						if (reportItem.Parent is Table)
						{
							num = ((Table)reportItem.Parent).CurrentPage;
						}
						else if (reportItem.Parent is Matrix)
						{
							num = ((Matrix)reportItem.Parent).CurrentPage;
						}
						reportItem.StartPage = num;
						reportItem.EndPage = num;
					}
				}
				if (reportItem is Microsoft.ReportingServices.ReportProcessing.TextBox)
				{
					reportItemInstance = ReportProcessing.RuntimeRICollection.CreateTextBoxInstance((Microsoft.ReportingServices.ReportProcessing.TextBox)reportItem, this.m_processingContext, index, this.m_owner);
				}
				else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Line)
				{
					reportItemInstance = ReportProcessing.RuntimeRICollection.CreateLineInstance((Microsoft.ReportingServices.ReportProcessing.Line)reportItem, this.m_processingContext, index);
				}
				else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Image)
				{
					reportItemInstance = ReportProcessing.RuntimeRICollection.CreateImageInstance((Microsoft.ReportingServices.ReportProcessing.Image)reportItem, this.m_processingContext, index);
				}
				else if (reportItem is ActiveXControl)
				{
					reportItemInstance = ReportProcessing.RuntimeRICollection.CreateActiveXControlInstance((ActiveXControl)reportItem, this.m_processingContext, index);
				}
				else if (reportItem is Microsoft.ReportingServices.ReportProcessing.SubReport)
				{
					reportItemInstance = ReportProcessing.RuntimeRICollection.CreateSubReportInstance((Microsoft.ReportingServices.ReportProcessing.SubReport)reportItem, this.m_processingContext, index, this.m_owner, out text);
				}
				else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle)
				{
					Microsoft.ReportingServices.ReportProcessing.Rectangle rectangle = (Microsoft.ReportingServices.ReportProcessing.Rectangle)reportItem;
					this.m_processingContext.ChunkManager.CheckPageBreak(rectangle, true);
					bool flag3 = this.m_processingContext.Pagination.CalculateSoftPageBreak(rectangle, 0.0, (double)rectangle.DistanceBeforeTop, false);
					this.m_processingContext.Pagination.SetReportItemStartPage(rectangle, flag3);
					RectangleInstance rectangleInstance = new RectangleInstance(this.m_processingContext, rectangle, index);
					if (reportItem.Label != null)
					{
						text = this.m_processingContext.NavigationInfo.CurrentLabel;
						if (text != null)
						{
							this.m_processingContext.NavigationInfo.EnterDocumentMapChildren();
						}
					}
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						((IShowHideContainer)rectangleInstance).BeginProcessContainer(this.m_processingContext);
					}
					this.m_processingContext.PageSectionContext.EnterVisibilityScope(rectangle.Visibility, rectangle.StartHidden);
					this.CreateInstances(rectangleInstance.ReportItemColInstance, rectangle.ReportItems);
					this.m_processingContext.PageSectionContext.ExitVisibilityScope();
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						((IShowHideContainer)rectangleInstance).EndProcessContainer(this.m_processingContext);
					}
					this.m_processingContext.ChunkManager.CheckPageBreak(rectangle, false);
					this.m_processingContext.Pagination.ProcessEndPage(rectangleInstance, reportItem, rectangle.PageBreakAtEnd, false);
					reportItemInstance = rectangleInstance;
				}
				else if (reportItem is Microsoft.ReportingServices.ReportProcessing.DataRegion)
				{
					Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegion = (Microsoft.ReportingServices.ReportProcessing.DataRegion)reportItem;
					bool flag4 = true;
					ReportProcessing.RuntimeDataRegionObj runtimeDataRegionObj;
					if (this.m_dataRegionObjs != null)
					{
						runtimeDataRegionObj = this.m_dataRegionObjs[this.m_currDataRegion];
					}
					else
					{
						runtimeDataRegionObj = dataRegion.RuntimeDataRegionObj;
						dataRegion.RuntimeDataRegionObj = null;
					}
					bool flag5;
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.CustomReportItem && runtimeDataRegionObj == null)
					{
						Global.Tracer.Assert(((Microsoft.ReportingServices.ReportProcessing.CustomReportItem)reportItem).DataSetName == null, "(null == ((CustomReportItem)reportItem).DataSetName)");
						flag5 = false;
					}
					else
					{
						Global.Tracer.Assert(runtimeDataRegionObj != null, "(null != dataRegionObj)");
						runtimeDataRegionObj.SetupEnvironment();
						flag5 = true;
						this.m_processingContext.ChunkManager.CheckPageBreak(dataRegion, true);
						this.m_processingContext.ChunkManager.AddRepeatSiblings(dataRegion, index);
					}
					bool flag6 = this.m_processingContext.Pagination.CalculateSoftPageBreak(dataRegion, 0.0, (double)dataRegion.DistanceBeforeTop, false);
					this.m_processingContext.Pagination.SetReportItemStartPage(dataRegion, flag6);
					if (reportItem is List)
					{
						List list = (List)reportItem;
						list.ContentStartPage = list.StartPage;
						ReportProcessing.RuntimeOnePassListDetailObj runtimeOnePassListDetailObj = null;
						RenderingPagesRangesList renderingPagesRangesList = null;
						ListInstance listInstance;
						if (runtimeDataRegionObj is ReportProcessing.RuntimeOnePassListDetailObj)
						{
							runtimeOnePassListDetailObj = (ReportProcessing.RuntimeOnePassListDetailObj)runtimeDataRegionObj;
							renderingPagesRangesList = runtimeOnePassListDetailObj.ChildrenStartAndEndPages;
							listInstance = new ListInstance(this.m_processingContext, list, runtimeOnePassListDetailObj.ListContentInstances, renderingPagesRangesList);
							if (renderingPagesRangesList != null && (!this.m_processingContext.PageSectionContext.IsParentVisible() || !Microsoft.ReportingServices.ReportProcessing.Visibility.IsOnePassHierarchyVisible(list)))
							{
								runtimeOnePassListDetailObj.MoveAllToFirstPage();
								int num2 = ((runtimeOnePassListDetailObj.ListContentInstances != null) ? runtimeOnePassListDetailObj.ListContentInstances.Count : 0);
								renderingPagesRangesList.MoveAllToFirstPage(num2);
								runtimeOnePassListDetailObj.NumberOfContentsOnThisPage = 0;
							}
							if (runtimeOnePassListDetailObj.NumberOfContentsOnThisPage > 0)
							{
								if (renderingPagesRangesList != null && 0 < renderingPagesRangesList.Count)
								{
									this.m_processingContext.Pagination.SetCurrentPageHeight(list, runtimeOnePassListDetailObj.Pagination.CurrentPageHeight);
								}
								else
								{
									this.m_processingContext.Pagination.AddToCurrentPageHeight(list, runtimeOnePassListDetailObj.Pagination.CurrentPageHeight);
								}
							}
							listInstance.NumberOfContentsOnThisPage = runtimeOnePassListDetailObj.NumberOfContentsOnThisPage;
							if (reportItem.Label != null)
							{
								text = this.m_processingContext.NavigationInfo.CurrentLabel;
							}
							this.m_processingContext.NavigationInfo.AppendNavigationInfo(text, runtimeOnePassListDetailObj.NavigationInfo, list.StartPage);
						}
						else
						{
							listInstance = new ListInstance(this.m_processingContext, list);
							bool delayAddingInstanceInfo = this.m_processingContext.DelayAddingInstanceInfo;
							this.m_processingContext.DelayAddingInstanceInfo = false;
							if (list.Label != null)
							{
								text = this.m_processingContext.NavigationInfo.CurrentLabel;
								if (text != null)
								{
									this.m_processingContext.NavigationInfo.EnterDocumentMapChildren();
								}
							}
							runtimeDataRegionObj.CreateInstances(listInstance, listInstance.ListContents, listInstance.ChildrenStartAndEndPages);
							this.m_processingContext.DelayAddingInstanceInfo = delayAddingInstanceInfo;
						}
						this.m_processingContext.Pagination.ProcessListRenderingPages(listInstance, list);
						if (this.m_processingContext.PageSectionContext.IsParentVisible() && runtimeOnePassListDetailObj != null)
						{
							if (renderingPagesRangesList != null && 0 < renderingPagesRangesList.Count)
							{
								for (int i = 0; i < renderingPagesRangesList.Count; i++)
								{
									runtimeOnePassListDetailObj.ProcessOnePassDetailTextboxes(i, list.StartPage + i);
								}
							}
							else if (listInstance.ListContents != null)
							{
								runtimeOnePassListDetailObj.ProcessOnePassDetailTextboxes(0, list.StartPage);
							}
						}
						reportItemInstance = listInstance;
					}
					else if (reportItem is Matrix)
					{
						MatrixHeadingInstance headingInstance = this.m_processingContext.HeadingInstance;
						MatrixHeadingInstance headingInstanceOld = this.m_processingContext.HeadingInstanceOld;
						this.m_processingContext.HeadingInstance = null;
						this.m_processingContext.HeadingInstanceOld = null;
						ReportProcessing.RuntimeMatrixObj runtimeMatrixObj = (ReportProcessing.RuntimeMatrixObj)runtimeDataRegionObj;
						MatrixInstance matrixInstance = new MatrixInstance(this.m_processingContext, (Matrix)reportItem);
						if (reportItem.Label != null)
						{
							text = this.m_processingContext.NavigationInfo.CurrentLabel;
							if (text != null)
							{
								this.m_processingContext.NavigationInfo.EnterDocumentMapChildren();
							}
						}
						if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
						{
							((IShowHideContainer)matrixInstance).BeginProcessContainer(this.m_processingContext);
						}
						runtimeMatrixObj.CreateInstances(matrixInstance, matrixInstance.Cells, matrixInstance.ChildrenStartAndEndPages);
						if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
						{
							((IShowHideContainer)matrixInstance).EndProcessContainer(this.m_processingContext);
						}
						if (setupEnvironment)
						{
							runtimeMatrixObj.ResetReportItems();
						}
						this.m_processingContext.HeadingInstance = headingInstance;
						this.m_processingContext.HeadingInstanceOld = headingInstanceOld;
						reportItemInstance = matrixInstance;
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.CustomReportItem)
					{
						Microsoft.ReportingServices.ReportProcessing.CustomReportItem customReportItem = (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)reportItem;
						CustomReportItemInstance customReportItemInstance = new CustomReportItemInstance(this.m_processingContext, customReportItem);
						if (customReportItem.DataSetName != null)
						{
							bool delayAddingInstanceInfo2 = this.m_processingContext.DelayAddingInstanceInfo;
							this.m_processingContext.DelayAddingInstanceInfo = false;
							((ReportProcessing.RuntimeCustomReportItemObj)runtimeDataRegionObj).CreateInstances(customReportItemInstance, customReportItemInstance.Cells, null);
							this.m_processingContext.DelayAddingInstanceInfo = delayAddingInstanceInfo2;
							this.m_processingContext.Pagination.ProcessEndPage(customReportItemInstance, reportItem, customReportItem.PageBreakAtEnd, false);
						}
						else
						{
							flag4 = false;
						}
						Microsoft.ReportingServices.ReportRendering.ICustomReportItem controlInstance = this.m_processingContext.CriProcessingControls.GetControlInstance(customReportItem.Type, this.m_processingContext.ExtFactory);
						if (controlInstance == null)
						{
							if (customReportItem.AltReportItem != null)
							{
								customReportItemInstance.AltReportItemColInstance = new ReportItemColInstance(this.m_processingContext, customReportItem.AltReportItem);
								Global.Tracer.Assert(1 == customReportItem.AltReportItem.Count, "(1 == criDef.AltReportItem.Count)");
								this.m_processingContext.RuntimeInitializeReportItemObjs(customReportItem.AltReportItem, false, false);
								this.CreateInstances(customReportItemInstance.AltReportItemColInstance, customReportItem.AltReportItem);
							}
						}
						else
						{
							CustomReportItemInstanceInfo customReportItemInstanceInfo = (CustomReportItemInstanceInfo)customReportItemInstance.GetInstanceInfo(null);
							customReportItem.CustomProcessingInitialize(customReportItemInstance, customReportItemInstanceInfo, this.m_processingContext, index);
							Microsoft.ReportingServices.ReportRendering.CustomReportItem customReportItem2 = new Microsoft.ReportingServices.ReportRendering.CustomReportItem(customReportItem, customReportItemInstance, customReportItemInstanceInfo);
							try
							{
								controlInstance.CustomItem = customReportItem2;
								controlInstance.Process();
								Microsoft.ReportingServices.ReportRendering.ReportItem reportItem2 = controlInstance.RenderItem;
								if (reportItem2 != null)
								{
									reportItem2 = ((IDeepCloneable)reportItem2).DeepClone();
								}
								customReportItem.DeconstructRenderItem(reportItem2, customReportItemInstance);
								customReportItem.CustomProcessingReset();
							}
							catch (Exception ex)
							{
								throw new ReportProcessingException(ErrorCode.rsCRIProcessingError, ex, new object[] { customReportItem.Name, customReportItem.Type });
							}
						}
						reportItemInstance = customReportItemInstance;
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Chart)
					{
						ReportProcessing.RuntimeChartObj runtimeChartObj = (ReportProcessing.RuntimeChartObj)runtimeDataRegionObj;
						ChartInstance chartInstance = new ChartInstance(this.m_processingContext, (Microsoft.ReportingServices.ReportProcessing.Chart)reportItem);
						bool delayAddingInstanceInfo3 = this.m_processingContext.DelayAddingInstanceInfo;
						this.m_processingContext.DelayAddingInstanceInfo = false;
						runtimeDataRegionObj.CreateInstances(chartInstance, chartInstance.MultiCharts, null);
						this.m_processingContext.DelayAddingInstanceInfo = delayAddingInstanceInfo3;
						this.m_processingContext.Pagination.ProcessEndPage(chartInstance, reportItem, ((Microsoft.ReportingServices.ReportProcessing.Chart)reportItem).PageBreakAtEnd, false);
						reportItemInstance = chartInstance;
					}
					else if (reportItem is Table)
					{
						ReportProcessing.RuntimeTableObj runtimeTableObj = (ReportProcessing.RuntimeTableObj)runtimeDataRegionObj;
						Table table = (Table)reportItem;
						table.CurrentPage = reportItem.StartPage;
						TableInstance tableInstance;
						if (runtimeTableObj.TableDetailInstances == null)
						{
							tableInstance = new TableInstance(this.m_processingContext, table);
						}
						else
						{
							tableInstance = new TableInstance(this.m_processingContext, table, runtimeTableObj.TableDetailInstances, runtimeTableObj.ChildrenStartAndEndPages);
						}
						if (table.Label != null)
						{
							text = this.m_processingContext.NavigationInfo.CurrentLabel;
							if (text != null)
							{
								this.m_processingContext.NavigationInfo.EnterDocumentMapChildren();
							}
						}
						if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
						{
							((IShowHideContainer)tableInstance).BeginProcessContainer(this.m_processingContext);
						}
						runtimeTableObj.CreateInstances(tableInstance, tableInstance.TableGroupInstances, tableInstance.ChildrenStartAndEndPages);
						if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
						{
							((IShowHideContainer)tableInstance).EndProcessContainer(this.m_processingContext);
						}
						if (setupEnvironment)
						{
							runtimeTableObj.ResetReportItems();
						}
						this.m_processingContext.Pagination.ProcessTableRenderingPages(tableInstance, table);
						reportItemInstance = tableInstance;
					}
					else if (reportItem is OWCChart)
					{
						OWCChartInstance owcchartInstance;
						if (runtimeDataRegionObj is ReportProcessing.RuntimeOnePassOWCChartDetailObj)
						{
							owcchartInstance = new OWCChartInstance(this.m_processingContext, (OWCChart)reportItem, ((ReportProcessing.RuntimeOnePassOWCChartDetailObj)runtimeDataRegionObj).OWCChartData);
						}
						else
						{
							owcchartInstance = new OWCChartInstance(this.m_processingContext, (OWCChart)reportItem);
							bool delayAddingInstanceInfo4 = this.m_processingContext.DelayAddingInstanceInfo;
							this.m_processingContext.DelayAddingInstanceInfo = false;
							runtimeDataRegionObj.CreateInstances(owcchartInstance, owcchartInstance.InstanceInfo.ChartData, null);
							this.m_processingContext.DelayAddingInstanceInfo = delayAddingInstanceInfo4;
						}
						this.m_processingContext.ChunkManager.AddInstance(owcchartInstance.InstanceInfo, owcchartInstance, this.m_processingContext.InPageSection);
						this.m_processingContext.Pagination.ProcessEndPage(owcchartInstance, reportItem, ((OWCChart)reportItem).PageBreakAtEnd, false);
						reportItemInstance = owcchartInstance;
						if (this.m_processingContext.OWCChartName == reportItem.Name && this.m_processingContext.OWCChartInstance == null)
						{
							this.m_processingContext.OWCChartInstance = owcchartInstance.InstanceInfo;
						}
					}
					if (flag5)
					{
						this.m_processingContext.ChunkManager.CheckPageBreak(dataRegion, false);
					}
					if (flag4 && this.m_dataRegionObjs != null)
					{
						ReportProcessing.RuntimeDataRegionObjList dataRegionObjs = this.m_dataRegionObjs;
						int currDataRegion = this.m_currDataRegion;
						this.m_currDataRegion = currDataRegion + 1;
						dataRegionObjs[currDataRegion] = null;
					}
				}
				if (!flag && reportItem.Label != null)
				{
					text = this.m_processingContext.NavigationInfo.CurrentLabel;
				}
				if (text != null)
				{
					this.m_processingContext.NavigationInfo.AddToDocumentMap(reportItemInstance.GetDocumentMapUniqueName(), flag, reportItem.StartPage, text);
				}
				if (reportItem.Parent != null)
				{
					if (reportItem.EndPage > reportItem.Parent.EndPage)
					{
						reportItem.Parent.EndPage = reportItem.EndPage;
						reportItem.Parent.BottomInEndPage = reportItem.BottomInEndPage;
						if (reportItem.Parent is List)
						{
							((List)reportItem.Parent).ContentStartPage = reportItem.EndPage;
						}
					}
					else if (reportItem.EndPage == reportItem.Parent.EndPage)
					{
						reportItem.Parent.BottomInEndPage = Math.Max(reportItem.Parent.BottomInEndPage, reportItem.BottomInEndPage);
					}
				}
				this.m_processingContext.Pagination.LeaveIgnorePageBreak(reportItem.Visibility, false);
				return reportItemInstance;
			}

			// Token: 0x0600885F RID: 34911 RVA: 0x002212C4 File Offset: 0x0021F4C4
			internal void ResetReportItemObjs()
			{
				if (this.m_processingContext.ReportItemsReferenced || this.m_processingContext.ReportItemThisDotValueReferenced)
				{
					ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(this.m_reportItemsDef, this.m_processingContext, true, this.m_owner);
				}
			}

			// Token: 0x06008860 RID: 34912 RVA: 0x002212F8 File Offset: 0x0021F4F8
			internal static void ResetReportItemObjs(Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems, ReportProcessing.ProcessingContext processingContext)
			{
				if (processingContext.ReportItemsReferenced || processingContext.ReportItemThisDotValueReferenced)
				{
					ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(reportItems, processingContext, true, null);
				}
			}

			// Token: 0x06008861 RID: 34913 RVA: 0x00221313 File Offset: 0x0021F513
			internal void SetReportItemObjScope()
			{
				if (this.m_processingContext.ReportItemsReferenced || this.m_processingContext.ReportItemThisDotValueReferenced)
				{
					ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(this.m_reportItemsDef, this.m_processingContext, false, this.m_owner);
				}
			}

			// Token: 0x06008862 RID: 34914 RVA: 0x00221348 File Offset: 0x0021F548
			private static void TraverseReportItemObjs(Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems, ReportProcessing.ProcessingContext processingContext, bool reset, ReportProcessing.IScope scope)
			{
				if (reportItems == null || reportItems.ComputedReportItems == null)
				{
					return;
				}
				for (int i = 0; i < reportItems.ComputedReportItems.Count; i++)
				{
					Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = reportItems.ComputedReportItems[i];
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.TextBox)
					{
						Microsoft.ReportingServices.ReportProcessing.TextBox textBox = (Microsoft.ReportingServices.ReportProcessing.TextBox)reportItem;
						TextBoxImpl textBoxImpl = null;
						if (processingContext.ReportItemsReferenced)
						{
							textBoxImpl = (TextBoxImpl)processingContext.ReportObjectModel.ReportItemsImpl[textBox.Name];
						}
						else if (textBox.ValueReferenced)
						{
							textBoxImpl = (TextBoxImpl)textBox.TextBoxExprHost.ReportObjectModelTextBox;
						}
						if (textBoxImpl != null)
						{
							if (reset)
							{
								textBoxImpl.Reset();
							}
							else
							{
								textBoxImpl.Scope = scope;
							}
						}
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle)
					{
						ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(((Microsoft.ReportingServices.ReportProcessing.Rectangle)reportItem).ReportItems, processingContext, reset, scope);
					}
					else if (reportItem is Table)
					{
						Table table = (Table)reportItem;
						if (table.HeaderRows != null)
						{
							for (int j = 0; j < table.HeaderRows.Count; j++)
							{
								ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(table.HeaderRows[j].ReportItems, processingContext, reset, scope);
							}
						}
						if (table.FooterRows != null)
						{
							for (int k = 0; k < table.FooterRows.Count; k++)
							{
								ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(table.FooterRows[k].ReportItems, processingContext, reset, scope);
							}
						}
					}
					else if (reportItem is Matrix)
					{
						Matrix matrix = (Matrix)reportItem;
						ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(matrix.CornerReportItems, processingContext, reset, scope);
						ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(matrix.Rows.ReportItems, processingContext, reset, scope);
						if (matrix.Rows.Subtotal != null)
						{
							ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(matrix.Rows.Subtotal.ReportItems, processingContext, reset, scope);
						}
						ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(matrix.Columns.ReportItems, processingContext, reset, scope);
						if (matrix.Columns.Subtotal != null)
						{
							ReportProcessing.RuntimeRICollection.TraverseReportItemObjs(matrix.Columns.Subtotal.ReportItems, processingContext, reset, scope);
						}
					}
				}
			}

			// Token: 0x06008863 RID: 34915 RVA: 0x0022154C File Offset: 0x0021F74C
			internal static bool GetExternalImage(ReportProcessing.ProcessingContext processingContext, string currentPath, Microsoft.ReportingServices.ReportProcessing.ObjectType objectType, string objectName, out byte[] imageData, out string mimeType)
			{
				imageData = null;
				mimeType = null;
				try
				{
					if (!processingContext.ReportContext.IsSupportedProtocol(currentPath, true))
					{
						processingContext.ErrorContext.Register(ProcessingErrorCode.rsUnsupportedProtocol, Severity.Error, objectType, objectName, "Value", new string[] { currentPath, "http://, https://, ftp://, file:, mailto:, or news:" });
					}
					else
					{
						processingContext.GetResource(currentPath, out imageData, out mimeType);
						if (imageData != null && !Validator.ValidateMimeType(mimeType))
						{
							processingContext.ErrorContext.Register(ProcessingErrorCode.rsInvalidMIMEType, Severity.Warning, objectType, objectName, "MIMEType", new string[] { mimeType });
							mimeType = null;
							imageData = null;
						}
					}
				}
				catch (Exception ex)
				{
					processingContext.ErrorContext.Register(ProcessingErrorCode.rsInvalidImageReference, Severity.Warning, objectType, objectName, "Value", new string[] { ex.Message });
					return false;
				}
				return true;
			}

			// Token: 0x06008864 RID: 34916 RVA: 0x00221628 File Offset: 0x0021F828
			internal static ActionInstance CreateActionInstance(ReportProcessing.ProcessingContext processingContext, IActionOwner actionOwner, int ownerUniqueName, Microsoft.ReportingServices.ReportProcessing.ObjectType objectType, string objectName)
			{
				Microsoft.ReportingServices.ReportProcessing.Action action = actionOwner.Action;
				if (action == null)
				{
					return null;
				}
				processingContext.ReportRuntime.CurrentActionOwner = actionOwner;
				ActionInstance actionInstance = null;
				string text = objectName + ".ActionInfo";
				Microsoft.ReportingServices.ReportProcessing.Style styleClass = action.StyleClass;
				if (styleClass != null && styleClass.ExpressionList != null && 0 < styleClass.ExpressionList.Count)
				{
					actionInstance = new ActionInstance(processingContext);
					object[] array = new object[styleClass.ExpressionList.Count];
					ReportProcessing.RuntimeRICollection.EvaluateStyleAttributes(objectType, text, styleClass, actionInstance.UniqueName, array, processingContext);
					actionInstance.StyleAttributeValues = array;
				}
				if (action.ComputedActionItemsCount > 0)
				{
					if (actionInstance == null)
					{
						actionInstance = new ActionInstance(processingContext);
					}
					ActionItemInstanceList actionItemInstanceList = new ActionItemInstanceList();
					text += ".Action";
					for (int i = 0; i < action.ActionItems.Count; i++)
					{
						ActionItem actionItem = action.ActionItems[i];
						if (actionItem.ComputedIndex >= 0)
						{
							ActionItemInstance actionItemInstance = ReportProcessing.RuntimeRICollection.CreateActionItemInstance(processingContext, actionItem, ownerUniqueName, objectType, text, i);
							actionItemInstanceList.Add(actionItemInstance);
						}
						else
						{
							actionItem.ProcessDrillthroughAction(processingContext, ownerUniqueName, i);
						}
					}
					actionInstance.ActionItemsValues = actionItemInstanceList;
				}
				else
				{
					action.ProcessDrillthroughAction(processingContext, ownerUniqueName);
				}
				return actionInstance;
			}

			// Token: 0x06008865 RID: 34917 RVA: 0x00221754 File Offset: 0x0021F954
			internal static ActionItemInstance CreateActionItemInstance(ReportProcessing.ProcessingContext processingContext, ActionItem actionItemDef, int ownerUniqueName, Microsoft.ReportingServices.ReportProcessing.ObjectType objectType, string objectName, int index)
			{
				if (actionItemDef == null)
				{
					return null;
				}
				ActionItemInstance actionItemInstance = new ActionItemInstance(processingContext, actionItemDef);
				actionItemInstance.HyperLinkURL = processingContext.ReportRuntime.EvaluateReportItemHyperlinkURLExpression(actionItemDef, actionItemDef.HyperLinkURL, objectType, objectName);
				string text = processingContext.ReportRuntime.EvaluateReportItemDrillthroughReportName(actionItemDef, actionItemDef.DrillthroughReportName, objectType, objectName);
				actionItemInstance.DrillthroughReportName = text;
				actionItemInstance.BookmarkLink = processingContext.ReportRuntime.EvaluateReportItemBookmarkLinkExpression(actionItemDef, actionItemDef.BookmarkLink, objectType, objectName);
				ParameterValueList drillthroughParameters = actionItemDef.DrillthroughParameters;
				object[] drillthroughParametersValues = actionItemInstance.DrillthroughParametersValues;
				BoolList drillthroughParametersOmits = actionItemInstance.DrillthroughParametersOmits;
				DrillthroughParameters drillthroughParameters2 = null;
				IntList intList = null;
				if (drillthroughParameters != null && drillthroughParametersValues != null)
				{
					for (int i = 0; i < drillthroughParameters.Count; i++)
					{
						bool flag = false;
						if (drillthroughParameters[i].Omit != null)
						{
							flag = processingContext.ReportRuntime.EvaluateParamValueOmitExpression(drillthroughParameters[i], objectType, objectName);
						}
						drillthroughParametersOmits.Add(flag);
						if (flag)
						{
							drillthroughParametersValues[i] = null;
						}
						else
						{
							drillthroughParametersValues[i] = processingContext.ReportRuntime.EvaluateParamVariantValueExpression(drillthroughParameters[i], objectType, objectName, "DrillthroughParameterValue");
							if (intList == null)
							{
								intList = new IntList();
							}
							if (drillthroughParameters2 == null)
							{
								drillthroughParameters2 = new DrillthroughParameters();
							}
							if (drillthroughParameters[i].Value != null && drillthroughParameters[i].Value.Type == ExpressionInfo.Types.Token)
							{
								intList.Add(drillthroughParameters[i].Value.IntValue);
								drillthroughParameters2.Add(drillthroughParameters[i].Name, null);
							}
							else
							{
								intList.Add(-1);
								drillthroughParameters2.Add(drillthroughParameters[i].Name, drillthroughParametersValues[i]);
							}
						}
					}
				}
				actionItemInstance.Label = processingContext.ReportRuntime.EvaluateActionLabelExpression(actionItemDef, actionItemDef.Label, objectType, objectName);
				if (text != null)
				{
					DrillthroughInformation drillthroughInformation = new DrillthroughInformation(text, drillthroughParameters2, intList);
					string text2 = ownerUniqueName.ToString(CultureInfo.InvariantCulture) + ":" + index.ToString(CultureInfo.InvariantCulture);
					processingContext.DrillthroughInfo.AddDrillthrough(text2, drillthroughInformation);
				}
				return actionItemInstance;
			}

			// Token: 0x06008866 RID: 34918 RVA: 0x00221960 File Offset: 0x0021FB60
			internal static TextBoxInstance CreateTextBoxInstance(Microsoft.ReportingServices.ReportProcessing.TextBox textBox, ReportProcessing.ProcessingContext processingContext, int index, ReportProcessing.IScope containingScope)
			{
				TextBoxInstance textBoxInstance = new TextBoxInstance(processingContext, textBox, index);
				bool flag = textBox.IsSimpleTextBox();
				SimpleTextBoxInstanceInfo simpleTextBoxInstanceInfo = null;
				TextBoxInstanceInfo textBoxInstanceInfo = null;
				if (flag)
				{
					simpleTextBoxInstanceInfo = (SimpleTextBoxInstanceInfo)textBoxInstance.InstanceInfo;
				}
				else
				{
					textBoxInstanceInfo = (TextBoxInstanceInfo)textBoxInstance.InstanceInfo;
				}
				bool flag2 = false;
				if (textBox.Action != null)
				{
					flag2 = textBox.Action.ResetObjectModelForDrillthroughContext(processingContext.ReportObjectModel, textBox);
				}
				VariantResult variantResult;
				if (processingContext.ReportItemsReferenced)
				{
					variantResult = ((TextBoxImpl)processingContext.ReportObjectModel.ReportItemsImpl[textBox.Name]).GetResult();
				}
				else if (textBox.ValueReferenced)
				{
					Global.Tracer.Assert(textBox.TextBoxExprHost != null, "(textBox.TextBoxExprHost != null)");
					variantResult = ((TextBoxImpl)textBox.TextBoxExprHost.ReportObjectModelTextBox).GetResult();
				}
				else
				{
					variantResult = processingContext.ReportRuntime.EvaluateTextBoxValueExpression(textBox);
				}
				if (flag2)
				{
					textBox.Action.GetSelectedItemsForDrillthroughContext(processingContext.ReportObjectModel, textBox);
				}
				if (flag)
				{
					simpleTextBoxInstanceInfo.OriginalValue = variantResult.Value;
				}
				else
				{
					textBoxInstanceInfo.OriginalValue = variantResult.Value;
				}
				if (!flag)
				{
					textBoxInstanceInfo.Duplicate = ReportProcessing.RuntimeRICollection.CalculateDuplicates(variantResult, textBox, processingContext);
				}
				ReportProcessing.RuntimeRICollection.AddPageTextbox(processingContext, textBox, textBoxInstance, textBoxInstanceInfo, variantResult.Value);
				if (!(variantResult.Value is string))
				{
					string formattedTextBoxValue = ReportProcessing.RuntimeRICollection.GetFormattedTextBoxValue(textBoxInstanceInfo, variantResult, textBox, processingContext);
					if (flag)
					{
						simpleTextBoxInstanceInfo.FormattedValue = formattedTextBoxValue;
					}
					else
					{
						textBoxInstanceInfo.FormattedValue = formattedTextBoxValue;
					}
				}
				if (!flag)
				{
					textBoxInstanceInfo.Action = ReportProcessing.RuntimeRICollection.CreateActionInstance(processingContext, textBox, textBoxInstance.UniqueName, textBox.ObjectType, textBox.Name);
				}
				textBox.SetValueType(variantResult.Value);
				if (textBox.UserSort != null)
				{
					SortFilterEventInfo sortFilterEventInfo = new SortFilterEventInfo(textBox);
					sortFilterEventInfo.EventSourceScopeInfo = processingContext.GetScopeValues(textBox.ContainingScopes, containingScope);
					if (processingContext.NewSortFilterEventInfo == null)
					{
						processingContext.NewSortFilterEventInfo = new SortFilterEventInfoHashtable();
					}
					processingContext.NewSortFilterEventInfo.Add(textBoxInstance.UniqueName, sortFilterEventInfo);
					RuntimeSortFilterEventInfoList runtimeSortFilterEventInfoList = processingContext.RuntimeSortFilterInfo;
					if (runtimeSortFilterEventInfoList == null && -1 == processingContext.DataSetUniqueName)
					{
						runtimeSortFilterEventInfoList = processingContext.ReportRuntimeUserSortFilterInfo;
					}
					if (runtimeSortFilterEventInfoList != null)
					{
						for (int i = 0; i < runtimeSortFilterEventInfoList.Count; i++)
						{
							runtimeSortFilterEventInfoList[i].MatchEventSource(textBox, textBoxInstance, containingScope, processingContext);
						}
					}
				}
				return textBoxInstance;
			}

			// Token: 0x06008867 RID: 34919 RVA: 0x00221B7C File Offset: 0x0021FD7C
			private static void AddPageTextbox(ReportProcessing.ProcessingContext processingContext, Microsoft.ReportingServices.ReportProcessing.TextBox textbox, TextBoxInstance textboxInstance, TextBoxInstanceInfo textboxInstanceInfo, object value)
			{
				if (processingContext.SubReportLevel != 0U || processingContext.InPageSection || !processingContext.PageSectionContext.HasPageSections || processingContext.PageSectionContext.InMatrixSubtotal || !processingContext.PageSectionContext.IsParentVisible() || !Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(textbox, textboxInstance, textboxInstanceInfo))
				{
					return;
				}
				int num = 0;
				if (!processingContext.PageSectionContext.InRepeatingItem)
				{
					if (processingContext.ReportRuntime.CurrentScope is ReportProcessing.RuntimeListGroupLeafObj)
					{
						num = ((ReportProcessing.RuntimeListGroupLeafObj)processingContext.ReportRuntime.CurrentScope).StartPage;
					}
					else if (processingContext.IsOnePass)
					{
						ReportProcessing.RuntimeOnePassDetailObj runtimeOnePassDetailObj = processingContext.ReportRuntime.CurrentScope as ReportProcessing.RuntimeOnePassDetailObj;
						if (runtimeOnePassDetailObj != null)
						{
							num = runtimeOnePassDetailObj.GetDetailPage();
							runtimeOnePassDetailObj.OnePassTextboxes.AddTextboxValue(num, textbox.Name, value);
							if (num == 0)
							{
								ReportProcessing.RuntimeOnePassTableDetailObj runtimeOnePassTableDetailObj = runtimeOnePassDetailObj as ReportProcessing.RuntimeOnePassTableDetailObj;
								if (runtimeOnePassTableDetailObj != null && !runtimeOnePassTableDetailObj.TextboxColumnPositions.ContainsKey(textbox.Name))
								{
									((ReportProcessing.RuntimeOnePassTableDetailObj)runtimeOnePassDetailObj).TextboxColumnPositions.Add(textbox.Name, processingContext.PageSectionContext.GetOnePassTableCellProperties());
								}
							}
							return;
						}
						num = processingContext.Pagination.GetTextBoxStartPage(textbox);
					}
					else
					{
						num = processingContext.Pagination.GetTextBoxStartPage(textbox);
					}
				}
				processingContext.PageSectionContext.PageTextboxes.AddTextboxValue(num, textbox.Name, value);
			}

			// Token: 0x06008868 RID: 34920 RVA: 0x00221CC0 File Offset: 0x0021FEC0
			internal static LineInstance CreateLineInstance(Microsoft.ReportingServices.ReportProcessing.Line line, ReportProcessing.ProcessingContext processingContext, int index)
			{
				return new LineInstance(processingContext, line, index);
			}

			// Token: 0x06008869 RID: 34921 RVA: 0x00221CCC File Offset: 0x0021FECC
			internal static ReportItemInstance CreateImageInstance(Microsoft.ReportingServices.ReportProcessing.Image image, ReportProcessing.ProcessingContext processingContext, int index)
			{
				ImageInstance imageInstance = new ImageInstance(processingContext, image, index);
				ImageInstanceInfo instanceInfo = imageInstance.InstanceInfo;
				bool flag = false;
				bool flag2 = false;
				if (image.Action != null)
				{
					flag2 = image.Action.ResetObjectModelForDrillthroughContext(processingContext.ReportObjectModel, image);
				}
				switch (image.Source)
				{
				case Microsoft.ReportingServices.ReportProcessing.Image.SourceType.External:
				{
					string text = processingContext.ReportRuntime.EvaluateImageStringValueExpression(image, out flag);
					if (flag2)
					{
						image.Action.GetSelectedItemsForDrillthroughContext(processingContext.ReportObjectModel, image);
					}
					instanceInfo.ImageValue = text;
					if (text != null && !processingContext.ImageStreamNames.ContainsKey(text))
					{
						string text2 = null;
						byte[] array = null;
						if (ExpressionInfo.Types.Constant != image.Value.Type)
						{
							ReportProcessing.RuntimeRICollection.GetExternalImage(processingContext, text, image.ObjectType, image.Name, out array, out text2);
						}
						if (array == null)
						{
							instanceInfo.BrokenImage = true;
						}
						else if (processingContext.InPageSection && !processingContext.CreatePageSectionImageChunks)
						{
							instanceInfo.Data = new ImageData(array, text2);
						}
						else if (processingContext.CreateReportChunkCallback != null)
						{
							string text3 = Guid.NewGuid().ToString();
							using (Stream stream = processingContext.CreateReportChunkCallback(text3, ReportProcessing.ReportChunkTypes.Image, text2))
							{
								stream.Write(array, 0, array.Length);
							}
							processingContext.ImageStreamNames[text] = new ImageInfo(text3, text2);
						}
					}
					break;
				}
				case Microsoft.ReportingServices.ReportProcessing.Image.SourceType.Embedded:
				{
					string text4 = processingContext.ReportRuntime.EvaluateImageStringValueExpression(image, out flag);
					if (flag2)
					{
						image.Action.GetSelectedItemsForDrillthroughContext(processingContext.ReportObjectModel, image);
					}
					if (flag)
					{
						instanceInfo.BrokenImage = true;
					}
					else
					{
						instanceInfo.ImageValue = ProcessingValidator.ValidateEmbeddedImageName(text4, processingContext.EmbeddedImages, image.ObjectType, image.Name, "Value", processingContext.ErrorContext);
						instanceInfo.BrokenImage = text4 != null;
					}
					break;
				}
				case Microsoft.ReportingServices.ReportProcessing.Image.SourceType.Database:
				{
					Global.Tracer.Assert(instanceInfo != null, "(null != imageInstanceInfo)");
					byte[] array2 = processingContext.ReportRuntime.EvaluateImageBinaryValueExpression(image, out flag);
					if (flag2)
					{
						image.Action.GetSelectedItemsForDrillthroughContext(processingContext.ReportObjectModel, image);
					}
					if (flag)
					{
						instanceInfo.BrokenImage = true;
						processingContext.ErrorContext.Register(ProcessingErrorCode.rsInvalidDatabaseImage, Severity.Warning, image.ObjectType, image.Name, "Value", Array.Empty<string>());
					}
					Global.Tracer.Assert(image.MIMEType != null, "(null != image.MIMEType)");
					string text5;
					if (ExpressionInfo.Types.Constant != image.MIMEType.Type)
					{
						text5 = ProcessingValidator.ValidateMimeType(processingContext.ReportRuntime.EvaluateImageMIMETypeExpression(image), image.ObjectType, image.Name, "MIMEType", processingContext.ErrorContext);
					}
					else
					{
						text5 = image.MIMEType.Value;
					}
					if (array2 != null)
					{
						if (processingContext.InPageSection && !processingContext.CreatePageSectionImageChunks)
						{
							instanceInfo.Data = new ImageData(array2, text5);
						}
						else if (processingContext.CreateReportChunkCallback != null)
						{
							instanceInfo.ImageValue = Guid.NewGuid().ToString();
							using (Stream stream2 = processingContext.CreateReportChunkCallback(instanceInfo.ImageValue, ReportProcessing.ReportChunkTypes.Image, text5))
							{
								stream2.Write(array2, 0, array2.Length);
							}
						}
					}
					break;
				}
				}
				if (instanceInfo != null && instanceInfo.ImageValue == null && !instanceInfo.BrokenImage && processingContext.CreateReportChunkCallback != null)
				{
					if (processingContext.TransparentImageGuid == null)
					{
						string text6 = "image/gif";
						string text7 = Guid.NewGuid().ToString();
						processingContext.TransparentImageGuid = text7;
						using (Stream stream3 = processingContext.CreateReportChunkCallback(text7, ReportProcessing.ReportChunkTypes.Image, text6))
						{
							ReportProcessing.RuntimeRICollection.FetchTransparentImage(stream3);
						}
						processingContext.ImageStreamNames[text7] = new ImageInfo(text7, text6);
						if (processingContext.EmbeddedImages != null)
						{
							processingContext.EmbeddedImages.Add(text7, new ImageInfo(text7, text6));
						}
					}
					instanceInfo.ImageValue = processingContext.TransparentImageGuid;
				}
				instanceInfo.Action = ReportProcessing.RuntimeRICollection.CreateActionInstance(processingContext, image, imageInstance.UniqueName, image.ObjectType, image.Name);
				return imageInstance;
			}

			// Token: 0x0600886A RID: 34922 RVA: 0x002220F0 File Offset: 0x002202F0
			internal static void FetchTransparentImage(Stream outputStream)
			{
				byte[] transparentImageBytes = Microsoft.ReportingServices.ReportIntermediateFormat.Image.TransparentImageBytes;
				outputStream.Write(transparentImageBytes, 0, transparentImageBytes.Length);
			}

			// Token: 0x0600886B RID: 34923 RVA: 0x00222110 File Offset: 0x00220310
			internal static ActiveXControlInstance CreateActiveXControlInstance(ActiveXControl activeXControl, ReportProcessing.ProcessingContext processingContext, int index)
			{
				ActiveXControlInstance activeXControlInstance = new ActiveXControlInstance(processingContext, activeXControl, index);
				ActiveXControlInstanceInfo instanceInfo = activeXControlInstance.InstanceInfo;
				ParameterValueList parameters = activeXControl.Parameters;
				object[] parameterValues = instanceInfo.ParameterValues;
				if (parameters != null && parameterValues != null)
				{
					for (int i = 0; i < parameters.Count; i++)
					{
						parameterValues[i] = processingContext.ReportRuntime.EvaluateParamVariantValueExpression(parameters[i], activeXControl.ObjectType, activeXControl.Name, "ParameterValue");
					}
				}
				return activeXControlInstance;
			}

			// Token: 0x0600886C RID: 34924 RVA: 0x00222178 File Offset: 0x00220378
			internal static void RetrieveSubReport(Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ReportProcessing.ProcessingContext processingContext, ProcessingErrorContext subReportErrorContext, bool isProcessingPrefetch)
			{
				Global.Tracer.Assert(isProcessingPrefetch || subReportErrorContext != null, "(isProcessingPrefetch || (null != subReportErrorContext))");
				try
				{
					ICatalogItemContext catalogItemContext;
					string text;
					ReportProcessing.GetReportChunk getReportChunk;
					ParameterInfoCollection parameterInfoCollection;
					try
					{
						if (!isProcessingPrefetch && processingContext.IsOnePass)
						{
							Monitor.Enter(processingContext.SubReportCallback);
						}
						processingContext.SubReportCallback(processingContext.ReportContext, subReport.ReportPath, out catalogItemContext, out text, out getReportChunk, out parameterInfoCollection);
					}
					finally
					{
						if (!isProcessingPrefetch && processingContext.IsOnePass)
						{
							Monitor.Exit(processingContext.SubReportCallback);
						}
					}
					Global.Tracer.Assert(catalogItemContext != null, "(null != subreportContext)");
					subReport.ReportContext = catalogItemContext;
					subReport.Report = ReportProcessing.DeserializeReport(getReportChunk, subReport);
					subReport.Report = ReportProcessing.RuntimeRICollection.AssignIDsForSubReport(subReport, processingContext, isProcessingPrefetch ? ReportProcessing.RuntimeRICollection.SubReportInitialization.AssignIDsOnly : ReportProcessing.RuntimeRICollection.SubReportInitialization.All);
					subReport.RetrievalStatus = (isProcessingPrefetch ? Microsoft.ReportingServices.ReportProcessing.SubReport.Status.PreFetched : Microsoft.ReportingServices.ReportProcessing.SubReport.Status.Retrieved);
					subReport.Description = text;
					subReport.ReportName = catalogItemContext.ItemName;
					subReport.StringUri = new CatalogItemUrlBuilder(catalogItemContext).ToString();
					subReport.ParametersFromCatalog = parameterInfoCollection;
				}
				catch (VersionMismatchException)
				{
					throw;
				}
				catch (Exception ex)
				{
					if (ex is ReportProcessing.DataCacheUnavailableException)
					{
						throw;
					}
					ReportProcessing.RuntimeRICollection.HandleSubReportProcessingError(processingContext, subReport, subReportErrorContext, ex);
					subReport.ReportContext = null;
					subReport.Report = null;
					subReport.Description = null;
					subReport.ReportName = null;
					subReport.StringUri = null;
					subReport.ParametersFromCatalog = null;
					subReport.RetrievalStatus = Microsoft.ReportingServices.ReportProcessing.SubReport.Status.RetrieveFailed;
				}
			}

			// Token: 0x0600886D RID: 34925 RVA: 0x002222D8 File Offset: 0x002204D8
			private static Microsoft.ReportingServices.ReportProcessing.SubReportInstance CreateSubReportInstance(Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ReportProcessing.ProcessingContext processingContext, int index, ReportProcessing.IScope containingScope, out string label)
			{
				processingContext.ChunkManager.CheckPageBreak(subReport, true);
				processingContext.PageSectionContext.EnterSubreport();
				Microsoft.ReportingServices.ReportProcessing.SubReportInstance subReportInstance = new Microsoft.ReportingServices.ReportProcessing.SubReportInstance(processingContext, subReport, index);
				if (subReport.Label != null)
				{
					label = processingContext.NavigationInfo.CurrentLabel;
					if (label != null)
					{
						processingContext.NavigationInfo.EnterDocumentMapChildren();
					}
				}
				else
				{
					label = null;
				}
				bool delayAddingInstanceInfo = processingContext.DelayAddingInstanceInfo;
				processingContext.DelayAddingInstanceInfo = false;
				ProcessingErrorContext processingErrorContext = new ProcessingErrorContext();
				bool flag = false;
				if (processingContext.SubReportLevel <= 20U)
				{
					if (Microsoft.ReportingServices.ReportProcessing.SubReport.Status.PreFetched == subReport.RetrievalStatus)
					{
						flag = true;
						subReport.Report = ReportProcessing.RuntimeRICollection.AssignIDsForSubReport(subReport, processingContext, ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly);
						subReport.RetrievalStatus = Microsoft.ReportingServices.ReportProcessing.SubReport.Status.Retrieved;
					}
					else if (subReport.RetrievalStatus == Microsoft.ReportingServices.ReportProcessing.SubReport.Status.NotRetrieved && processingContext.SubReportCallback != null)
					{
						ReportProcessing.RuntimeRICollection.RetrieveSubReport(subReport, processingContext, processingErrorContext, false);
						flag = true;
					}
					else if (processingContext.SnapshotProcessing)
					{
						subReport.ReportContext = processingContext.ReportContext.GetSubreportContext(subReport.ReportPath);
					}
					if (containingScope == null)
					{
						containingScope = processingContext.UserSortFilterContext.CurrentContainingScope;
					}
					VariantList[] scopeValues = processingContext.GetScopeValues(subReport.ContainingScopes, containingScope);
					int num;
					if (processingContext.SnapshotProcessing && subReport.DataSetUniqueNameMap != null && !subReport.SaveDataSetUniqueName)
					{
						num = subReport.GetDataSetUniqueName(scopeValues);
					}
					else
					{
						subReport.AddDataSetUniqueName(scopeValues, subReportInstance.UniqueName);
						num = subReportInstance.UniqueName;
					}
					if (Microsoft.ReportingServices.ReportProcessing.SubReport.Status.Retrieved == subReport.RetrievalStatus)
					{
						CultureInfo cultureInfo = null;
						try
						{
							ParameterInfoCollection parameterInfoCollection = new ParameterInfoCollection();
							if (subReport.Parameters != null && subReport.ParametersFromCatalog != null)
							{
								for (int i = 0; i < subReport.Parameters.Count; i++)
								{
									string name = subReport.Parameters[i].Name;
									if (subReport.ParametersFromCatalog[name] == null)
									{
										throw new UnknownReportParameterException(name);
									}
									ParameterValueResult parameterValueResult = processingContext.ReportRuntime.EvaluateParameterValueExpression(subReport.Parameters[i], subReport.ObjectType, subReport.Name, "ParameterValue");
									if (parameterValueResult.ErrorOccurred)
									{
										throw new ReportProcessingException(ErrorCode.rsReportParameterProcessingError, new object[] { name });
									}
									object[] array = parameterValueResult.Value as object[];
									object[] array2;
									if (array != null)
									{
										array2 = array;
									}
									else
									{
										array2 = new object[] { parameterValueResult.Value };
									}
									parameterInfoCollection.Add(new ParameterInfo
									{
										Name = name,
										Values = array2,
										DataType = parameterValueResult.Type
									});
								}
							}
							ParameterInfoCollection parameterInfoCollection2 = ParameterInfoCollection.Combine(subReport.ParametersFromCatalog, parameterInfoCollection, true, false, false, false, Localization.ClientPrimaryCulture);
							ReportProcessing.ProcessingContext subReportParametersAndContext = ReportProcessing.RuntimeRICollection.GetSubReportParametersAndContext(processingContext, subReport, num, parameterInfoCollection2, processingErrorContext);
							subReportParametersAndContext.AbortInfo.AddSubreportInstance(num);
							cultureInfo = Thread.CurrentThread.CurrentCulture;
							subReportParametersAndContext.UserSortFilterContext.CurrentContainingScope = containingScope;
							ReportProcessing.Merge merge = new ReportProcessing.Merge(subReport.Report, subReportParametersAndContext, flag);
							if (!subReportParametersAndContext.SnapshotProcessing && !subReportParametersAndContext.ProcessWithCachedData && merge.PrefetchData(parameterInfoCollection2, subReport.MergeTransactions))
							{
								subReportParametersAndContext.SnapshotProcessing = true;
							}
							subReportInstance.ReportInstance = merge.Process(parameterInfoCollection2, subReport.MergeTransactions);
							Thread.CurrentThread.CurrentCulture = cultureInfo;
							cultureInfo = null;
							if (subReport.Report.HasImageStreams)
							{
								processingContext.HasImageStreams = true;
							}
							if (processingErrorContext.Messages != null && 0 < processingErrorContext.Messages.Count)
							{
								processingContext.ErrorContext.Register(ProcessingErrorCode.rsWarningExecutingSubreport, Severity.Warning, subReport.ObjectType, subReport.Name, null, processingErrorContext.Messages, Array.Empty<string>());
							}
						}
						catch (Exception ex)
						{
							if (ex.InnerException is ReportProcessing.DataCacheUnavailableException)
							{
								throw;
							}
							ReportProcessing.RuntimeRICollection.HandleSubReportProcessingError(processingContext, subReport, processingErrorContext, ex);
							subReportInstance.ReportInstance = null;
						}
						finally
						{
							if (cultureInfo != null)
							{
								Thread.CurrentThread.CurrentCulture = cultureInfo;
							}
						}
					}
				}
				processingContext.PageSectionContext.ExitSubreport();
				processingContext.ChunkManager.CheckPageBreak(subReport, false);
				processingContext.DelayAddingInstanceInfo = delayAddingInstanceInfo;
				processingContext.Pagination.ProcessEndPage(subReportInstance, subReport, false, false);
				return subReportInstance;
			}

			// Token: 0x0600886E RID: 34926 RVA: 0x002226C8 File Offset: 0x002208C8
			private static ReportProcessing.ProcessingContext GetSubReportParametersAndContext(ReportProcessing.ProcessingContext processingContext, Microsoft.ReportingServices.ReportProcessing.SubReport subReport, int subReportDataSetUniqueName, ParameterInfoCollection effectiveParameters, ProcessingErrorContext subReportErrorContext)
			{
				ReportProcessing.ProcessingContext processingContext2 = processingContext.ParametersContext(subReport.ReportContext, subReportErrorContext);
				if (processingContext.ResetForSubreportDataPrefetch)
				{
					processingContext2.SnapshotProcessing = false;
				}
				ReportProcessing.ProcessReportParameters(subReport.Report, processingContext2, effectiveParameters);
				if (!effectiveParameters.ValuesAreValid())
				{
					throw new ReportProcessingException(ErrorCode.rsParametersNotSpecified);
				}
				ReportProcessing.ProcessingContext processingContext3 = processingContext.SubReportContext(subReport, subReportDataSetUniqueName, subReportErrorContext);
				if (processingContext.ResetForSubreportDataPrefetch)
				{
					processingContext3.SnapshotProcessing = false;
				}
				return processingContext3;
			}

			// Token: 0x0600886F RID: 34927 RVA: 0x00222730 File Offset: 0x00220930
			private static void HandleSubReportProcessingError(ReportProcessing.ProcessingContext processingContext, Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ProcessingErrorContext subReportErrorContext, Exception e)
			{
				Global.Tracer.Assert(e != null, "(e != null)");
				if (!(e is ProcessingAbortedException) && Global.Tracer.TraceError)
				{
					Global.Tracer.Trace(TraceLevel.Error, "An error has occurred while processing a sub-report. Details: {0} Stack trace:\r\n{1}", new object[] { e.Message, e.StackTrace });
				}
				if (subReportErrorContext == null)
				{
					processingContext.ErrorContext.Register(ProcessingErrorCode.rsErrorExecutingSubreport, Severity.Warning, subReport.ObjectType, subReport.Name, null, new string[] { e.Message });
					return;
				}
				Global.Tracer.Assert(subReportErrorContext != null, "(null != subReportErrorContext)");
				if (e is RSException)
				{
					subReportErrorContext.Register((RSException)e, subReport.ObjectType);
				}
				processingContext.ErrorContext.Register(ProcessingErrorCode.rsErrorExecutingSubreport, Severity.Warning, subReport.ObjectType, subReport.Name, null, subReportErrorContext.Messages, new string[] { e.Message });
			}

			// Token: 0x06008870 RID: 34928 RVA: 0x00222820 File Offset: 0x00220A20
			private static Microsoft.ReportingServices.ReportProcessing.Report AssignIDsForSubReport(Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ReportProcessing.ProcessingContext context, ReportProcessing.RuntimeRICollection.SubReportInitialization initializationAction)
			{
				Microsoft.ReportingServices.ReportProcessing.Report report = subReport.Report;
				if (initializationAction != ReportProcessing.RuntimeRICollection.SubReportInitialization.AssignIDsOnly)
				{
					subReport.UpdateSubReportScopes(context.UserSortFilterContext);
				}
				if (report != null)
				{
					ArrayList arrayList = null;
					Hashtable hashtable = null;
					if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
					{
						ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(report, context);
						report.BodyID = context.CreateIDForSubreport();
						arrayList = new ArrayList();
						arrayList.Add(report);
						hashtable = new Hashtable();
						ReportProcessing.RuntimeRICollection.AssignIDsForDataSets(report.DataSources, context, hashtable);
					}
					ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(report.ReportItems, context, hashtable, subReport, arrayList, initializationAction);
					ReportProcessing.RuntimeRICollection.AssignIDsForPageSection(report.PageHeader, context, hashtable, subReport, arrayList, initializationAction);
					ReportProcessing.RuntimeRICollection.AssignIDsForPageSection(report.PageFooter, context, hashtable, subReport, arrayList, initializationAction);
					if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
					{
						for (int i = 0; i < arrayList.Count; i++)
						{
							object obj = arrayList[i];
							if (obj is Microsoft.ReportingServices.ReportProcessing.Report)
							{
								((Microsoft.ReportingServices.ReportProcessing.Report)obj).NonDetailSortFiltersInScope = ReportProcessing.RuntimeRICollection.UpdateSortFilterTable(((Microsoft.ReportingServices.ReportProcessing.Report)obj).NonDetailSortFiltersInScope, hashtable);
								((Microsoft.ReportingServices.ReportProcessing.Report)obj).DetailSortFiltersInScope = ReportProcessing.RuntimeRICollection.UpdateSortFilterTable(((Microsoft.ReportingServices.ReportProcessing.Report)obj).DetailSortFiltersInScope, hashtable);
							}
							else if (obj is Microsoft.ReportingServices.ReportProcessing.DataRegion)
							{
								((Microsoft.ReportingServices.ReportProcessing.DataRegion)obj).DetailSortFiltersInScope = ReportProcessing.RuntimeRICollection.UpdateSortFilterTable(((Microsoft.ReportingServices.ReportProcessing.DataRegion)obj).DetailSortFiltersInScope, hashtable);
							}
							else if (obj is Grouping)
							{
								((Grouping)obj).NonDetailSortFiltersInScope = ReportProcessing.RuntimeRICollection.UpdateSortFilterTable(((Grouping)obj).NonDetailSortFiltersInScope, hashtable);
								((Grouping)obj).DetailSortFiltersInScope = ReportProcessing.RuntimeRICollection.UpdateSortFilterTable(((Grouping)obj).DetailSortFiltersInScope, hashtable);
							}
						}
					}
				}
				return report;
			}

			// Token: 0x06008871 RID: 34929 RVA: 0x00222994 File Offset: 0x00220B94
			private static InScopeSortFilterHashtable UpdateSortFilterTable(InScopeSortFilterHashtable oldTable, Hashtable IDMap)
			{
				if (oldTable != null)
				{
					InScopeSortFilterHashtable inScopeSortFilterHashtable = new InScopeSortFilterHashtable(oldTable.Count);
					IDictionaryEnumerator enumerator = oldTable.GetEnumerator();
					while (enumerator.MoveNext())
					{
						int num = (int)enumerator.Key;
						IntList intList = (IntList)enumerator.Value;
						IntList intList2 = new IntList(intList.Count);
						for (int i = 0; i < intList.Count; i++)
						{
							intList2.Add((int)IDMap[intList[i]]);
						}
						inScopeSortFilterHashtable.Add(IDMap[num], intList2);
					}
					return inScopeSortFilterHashtable;
				}
				return null;
			}

			// Token: 0x06008872 RID: 34930 RVA: 0x00222A3C File Offset: 0x00220C3C
			private static void AssignIDsForDataSets(DataSourceList dataSources, ReportProcessing.ProcessingContext context, Hashtable IDMap)
			{
				if (dataSources != null)
				{
					for (int i = 0; i < dataSources.Count; i++)
					{
						Microsoft.ReportingServices.ReportProcessing.DataSource dataSource = dataSources[i];
						if (dataSource.DataSets != null)
						{
							for (int j = 0; j < dataSource.DataSets.Count; j++)
							{
								Microsoft.ReportingServices.ReportProcessing.DataSet dataSet = dataSource.DataSets[j];
								int id = dataSet.ID;
								ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(dataSet, context);
								ReportProcessing.RuntimeRICollection.AddToIDMap(dataSet, id, IDMap);
							}
						}
					}
				}
			}

			// Token: 0x06008873 RID: 34931 RVA: 0x00222AA4 File Offset: 0x00220CA4
			private static void AssignIDsForPageSection(Microsoft.ReportingServices.ReportProcessing.PageSection pageSection, ReportProcessing.ProcessingContext context, Hashtable IDMap, Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ArrayList sortFilterOwners, ReportProcessing.RuntimeRICollection.SubReportInitialization initializationAction)
			{
				if (pageSection != null)
				{
					if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
					{
						ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(pageSection, context);
					}
					ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(pageSection.ReportItems, context, IDMap, subReport, sortFilterOwners, initializationAction);
				}
			}

			// Token: 0x06008874 RID: 34932 RVA: 0x00222AC8 File Offset: 0x00220CC8
			private static void AssignIDsForReportItemCollection(Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems, ReportProcessing.ProcessingContext context, Hashtable IDMap, Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ArrayList sortFilterOwners, ReportProcessing.RuntimeRICollection.SubReportInitialization initializationAction)
			{
				if (reportItems != null)
				{
					if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
					{
						ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(reportItems, context);
					}
					for (int i = 0; i < reportItems.Count; i++)
					{
						Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = reportItems[i];
						int id = reportItem.ID;
						if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
						{
							ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(reportItem, context);
						}
						if (reportItem is Microsoft.ReportingServices.ReportProcessing.TextBox)
						{
							if (IDMap != null)
							{
								IDMap.Add(id, reportItem.ID);
							}
							Microsoft.ReportingServices.ReportProcessing.TextBox textBox = (Microsoft.ReportingServices.ReportProcessing.TextBox)reportItem;
							EndUserSort userSort = textBox.UserSort;
							if (userSort != null)
							{
								if (-1 != context.UserSortFilterContext.DataSetID)
								{
									userSort.DataSetID = context.UserSortFilterContext.DataSetID;
								}
								else if (IDMap != null)
								{
									userSort.DataSetID = (int)IDMap[userSort.DataSetID];
								}
								userSort.DetailScopeSubReports = subReport.DetailScopeSubReports;
							}
							if (initializationAction != ReportProcessing.RuntimeRICollection.SubReportInitialization.AssignIDsOnly && subReport.ContainingScopes != null && 0 < subReport.ContainingScopes.Count)
							{
								if (textBox.ContainingScopes != null && 0 < textBox.ContainingScopes.Count)
								{
									textBox.ContainingScopes.InsertRange(0, subReport.ContainingScopes);
								}
								else
								{
									textBox.IsSubReportTopLevelScope = true;
									textBox.ContainingScopes = subReport.ContainingScopes;
								}
							}
						}
						else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle)
						{
							ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(((Microsoft.ReportingServices.ReportProcessing.Rectangle)reportItem).ReportItems, context, IDMap, subReport, sortFilterOwners, initializationAction);
						}
						else if (reportItem is List)
						{
							List list = (List)reportItem;
							int id2 = list.HierarchyDef.ID;
							if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
							{
								ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(list.HierarchyDef, context);
								ReportProcessing.RuntimeRICollection.AddToIDMap(list.HierarchyDef.Grouping, id2, IDMap);
								ReportProcessing.RuntimeRICollection.AddToSortFilterOwners(list.HierarchyDef, sortFilterOwners);
							}
							ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(list.ReportItems, context, IDMap, subReport, sortFilterOwners, initializationAction);
						}
						else if (reportItem is Matrix)
						{
							Matrix matrix = (Matrix)reportItem;
							ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(matrix.CornerReportItems, context, IDMap, subReport, sortFilterOwners, initializationAction);
							ReportProcessing.RuntimeRICollection.AssignIDsForMatrixHeading(matrix.Columns, context, IDMap, subReport, sortFilterOwners, initializationAction);
							ReportProcessing.RuntimeRICollection.AssignIDsForMatrixHeading(matrix.Rows, context, IDMap, subReport, sortFilterOwners, initializationAction);
							ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(matrix.CellReportItems, context, IDMap, subReport, sortFilterOwners, initializationAction);
							if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
							{
								ReportProcessing.RuntimeRICollection.AssignArrayOfIDs(matrix.CellIDs, context);
							}
						}
						else if (reportItem is Table)
						{
							Table table = (Table)reportItem;
							ReportProcessing.RuntimeRICollection.AssignIDsForTableRows(table.HeaderRows, context, IDMap, subReport, sortFilterOwners, initializationAction);
							ReportProcessing.RuntimeRICollection.AssignIDsForTableGroup(table.TableGroups, context, IDMap, subReport, sortFilterOwners, initializationAction);
							ReportProcessing.RuntimeRICollection.AssignIDsForTableDetail(table.TableDetail, context, IDMap, subReport, sortFilterOwners, initializationAction);
							ReportProcessing.RuntimeRICollection.AssignIDsForTableRows(table.FooterRows, context, IDMap, subReport, sortFilterOwners, initializationAction);
						}
						else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Chart)
						{
							if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
							{
								Microsoft.ReportingServices.ReportProcessing.Chart chart = (Microsoft.ReportingServices.ReportProcessing.Chart)reportItem;
								ReportProcessing.RuntimeRICollection.AssignIDsForChartHeading(chart.Columns, context, IDMap);
								ReportProcessing.RuntimeRICollection.AssignIDsForChartHeading(chart.Rows, context, IDMap);
								if (chart.MultiChart != null)
								{
									ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(chart.MultiChart, context);
								}
							}
						}
						else if (reportItem is Microsoft.ReportingServices.ReportProcessing.CustomReportItem)
						{
							Microsoft.ReportingServices.ReportProcessing.CustomReportItem customReportItem = (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)reportItem;
							if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
							{
								ReportProcessing.RuntimeRICollection.AssignIDsForCRIHeading(customReportItem.Columns, context, IDMap);
								ReportProcessing.RuntimeRICollection.AssignIDsForCRIHeading(customReportItem.Rows, context, IDMap);
							}
							if (customReportItem.AltReportItem != null)
							{
								ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(customReportItem.AltReportItem, context, IDMap, subReport, sortFilterOwners, initializationAction);
							}
							if (customReportItem.RenderReportItem != null)
							{
								ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(customReportItem.RenderReportItem, context, IDMap, subReport, sortFilterOwners, initializationAction);
							}
						}
						if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction && reportItem is Microsoft.ReportingServices.ReportProcessing.DataRegion)
						{
							ReportProcessing.RuntimeRICollection.AddToIDMap((Microsoft.ReportingServices.ReportProcessing.DataRegion)reportItem, id, IDMap);
							sortFilterOwners.Add(reportItem);
						}
					}
				}
			}

			// Token: 0x06008875 RID: 34933 RVA: 0x00222E3F File Offset: 0x0022103F
			private static void AddToIDMap(ISortFilterScope scope, int oldID, Hashtable IDMap)
			{
				if (scope != null)
				{
					IDMap.Add(oldID, scope.ID);
				}
			}

			// Token: 0x06008876 RID: 34934 RVA: 0x00222E5B File Offset: 0x0022105B
			private static void AddToSortFilterOwners(ReportHierarchyNode scope, ArrayList sortFilterOwners)
			{
				if (scope.Grouping != null)
				{
					sortFilterOwners.Add(scope.Grouping);
				}
			}

			// Token: 0x06008877 RID: 34935 RVA: 0x00222E74 File Offset: 0x00221074
			private static void AssignIDsForPivotHeading(PivotHeading heading, ReportProcessing.ProcessingContext context, Hashtable IDMap)
			{
				if (heading != null)
				{
					int id = heading.ID;
					ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(heading, context);
					ReportProcessing.RuntimeRICollection.AddToIDMap(heading.Grouping, id, IDMap);
					ReportProcessing.RuntimeRICollection.AssignArrayOfIDs(heading.IDs, context);
				}
			}

			// Token: 0x06008878 RID: 34936 RVA: 0x00222EAC File Offset: 0x002210AC
			private static void AssignIDsForTablixHeading(TablixHeading heading, ReportProcessing.ProcessingContext context, Hashtable IDMap)
			{
				if (heading != null)
				{
					int id = heading.ID;
					ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(heading, context);
					ReportProcessing.RuntimeRICollection.AddToIDMap(heading.Grouping, id, IDMap);
				}
			}

			// Token: 0x06008879 RID: 34937 RVA: 0x00222ED8 File Offset: 0x002210D8
			private static void AssignIDsForCRIHeading(CustomReportItemHeadingList headings, ReportProcessing.ProcessingContext context, Hashtable IDMap)
			{
				if (headings != null)
				{
					for (int i = 0; i < headings.Count; i++)
					{
						ReportProcessing.RuntimeRICollection.AssignIDsForTablixHeading(headings[i], context, IDMap);
						ReportProcessing.RuntimeRICollection.AssignIDsForCRIHeading(headings[i].InnerHeadings, context, IDMap);
					}
				}
			}

			// Token: 0x0600887A RID: 34938 RVA: 0x00222F1A File Offset: 0x0022111A
			private static void AssignIDsForChartHeading(ChartHeading heading, ReportProcessing.ProcessingContext context, Hashtable IDMap)
			{
				if (heading != null)
				{
					ReportProcessing.RuntimeRICollection.AssignIDsForPivotHeading(heading, context, IDMap);
					ReportProcessing.RuntimeRICollection.AssignIDsForChartHeading(heading.SubHeading, context, IDMap);
				}
			}

			// Token: 0x0600887B RID: 34939 RVA: 0x00222F34 File Offset: 0x00221134
			private static void AssignIDsForMatrixHeading(MatrixHeading heading, ReportProcessing.ProcessingContext context, Hashtable IDMap, Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ArrayList sortFilterOwners, ReportProcessing.RuntimeRICollection.SubReportInitialization initializationAction)
			{
				if (heading != null)
				{
					if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
					{
						ReportProcessing.RuntimeRICollection.AssignIDsForPivotHeading(heading, context, IDMap);
						ReportProcessing.RuntimeRICollection.AddToSortFilterOwners(heading, sortFilterOwners);
					}
					ReportProcessing.RuntimeRICollection.AssignIDsForMatrixHeading(heading.SubHeading, context, IDMap, subReport, sortFilterOwners, initializationAction);
					ReportProcessing.RuntimeRICollection.AssignIDsForSubtotal(heading.Subtotal, context, IDMap, subReport, sortFilterOwners, initializationAction);
					ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(heading.ReportItems, context, IDMap, subReport, sortFilterOwners, initializationAction);
				}
			}

			// Token: 0x0600887C RID: 34940 RVA: 0x00222F8F File Offset: 0x0022118F
			private static void AssignIDsForSubtotal(Subtotal subtotal, ReportProcessing.ProcessingContext context, Hashtable IDMap, Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ArrayList sortFilterOwners, ReportProcessing.RuntimeRICollection.SubReportInitialization initializationAction)
			{
				if (subtotal != null)
				{
					if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
					{
						ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(subtotal, context);
					}
					ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(subtotal.ReportItems, context, IDMap, subReport, sortFilterOwners, initializationAction);
				}
			}

			// Token: 0x0600887D RID: 34941 RVA: 0x00222FB4 File Offset: 0x002211B4
			private static void AssignIDsForTableRows(TableRowList rows, ReportProcessing.ProcessingContext context, Hashtable IDMap, Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ArrayList sortFilterOwners, ReportProcessing.RuntimeRICollection.SubReportInitialization initializationAction)
			{
				if (rows != null)
				{
					for (int i = 0; i < rows.Count; i++)
					{
						if (rows[i] != null)
						{
							if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
							{
								ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(rows[i], context);
							}
							ReportProcessing.RuntimeRICollection.AssignIDsForReportItemCollection(rows[i].ReportItems, context, IDMap, subReport, sortFilterOwners, initializationAction);
							if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
							{
								ReportProcessing.RuntimeRICollection.AssignArrayOfIDs(rows[i].IDs, context);
							}
						}
					}
				}
			}

			// Token: 0x0600887E RID: 34942 RVA: 0x00223020 File Offset: 0x00221220
			private static void AssignIDsForTableGroup(TableGroup group, ReportProcessing.ProcessingContext context, Hashtable IDMap, Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ArrayList sortFilterOwners, ReportProcessing.RuntimeRICollection.SubReportInitialization initializationAction)
			{
				if (group != null)
				{
					int id = group.ID;
					if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
					{
						ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(group, context);
						ReportProcessing.RuntimeRICollection.AddToIDMap(group.Grouping, id, IDMap);
						ReportProcessing.RuntimeRICollection.AddToSortFilterOwners(group, sortFilterOwners);
					}
					ReportProcessing.RuntimeRICollection.AssignIDsForTableGroup(group.SubGroup, context, IDMap, subReport, sortFilterOwners, initializationAction);
					ReportProcessing.RuntimeRICollection.AssignIDsForTableRows(group.HeaderRows, context, IDMap, subReport, sortFilterOwners, initializationAction);
					ReportProcessing.RuntimeRICollection.AssignIDsForTableRows(group.FooterRows, context, IDMap, subReport, sortFilterOwners, initializationAction);
				}
			}

			// Token: 0x0600887F RID: 34943 RVA: 0x0022308E File Offset: 0x0022128E
			private static void AssignIDsForTableDetail(TableDetail detail, ReportProcessing.ProcessingContext context, Hashtable IDMap, Microsoft.ReportingServices.ReportProcessing.SubReport subReport, ArrayList sortFilterOwners, ReportProcessing.RuntimeRICollection.SubReportInitialization initializationAction)
			{
				if (detail != null)
				{
					if (ReportProcessing.RuntimeRICollection.SubReportInitialization.RuntimeOnly != initializationAction)
					{
						ReportProcessing.RuntimeRICollection.AssignIDsForIDOwnerBase(detail, context);
					}
					ReportProcessing.RuntimeRICollection.AssignIDsForTableRows(detail.DetailRows, context, IDMap, subReport, sortFilterOwners, initializationAction);
				}
			}

			// Token: 0x06008880 RID: 34944 RVA: 0x002230B1 File Offset: 0x002212B1
			private static void AssignIDsForIDOwnerBase(IDOwner idOwner, ReportProcessing.ProcessingContext context)
			{
				if (idOwner != null)
				{
					idOwner.ID = context.CreateIDForSubreport();
				}
			}

			// Token: 0x06008881 RID: 34945 RVA: 0x002230C4 File Offset: 0x002212C4
			private static void AssignArrayOfIDs(IntList ids, ReportProcessing.ProcessingContext context)
			{
				if (ids != null)
				{
					for (int i = 0; i < ids.Count; i++)
					{
						ids[i] = context.CreateIDForSubreport();
					}
				}
			}

			// Token: 0x06008882 RID: 34946 RVA: 0x002230F4 File Offset: 0x002212F4
			private static bool CalculateDuplicates(VariantResult textBoxResult, Microsoft.ReportingServices.ReportProcessing.TextBox textBox, ReportProcessing.ProcessingContext processingContext)
			{
				bool flag = false;
				if (textBox.HideDuplicates != null)
				{
					if (textBox.HasOldResult)
					{
						if (textBoxResult.ErrorOccurred && textBox.OldResult.ErrorOccurred)
						{
							flag = true;
						}
						else if (textBoxResult.ErrorOccurred)
						{
							flag = false;
						}
						else if (textBox.OldResult.ErrorOccurred)
						{
							flag = false;
						}
						else if (textBoxResult.Value == null && textBox.OldResult.Value == null)
						{
							flag = true;
						}
						else if (textBoxResult.Value == null)
						{
							flag = false;
						}
						else if (textBoxResult.Value.Equals(textBox.OldResult.Value))
						{
							flag = true;
						}
					}
					if (!flag)
					{
						textBox.OldResult = textBoxResult;
					}
				}
				return flag;
			}

			// Token: 0x06008883 RID: 34947 RVA: 0x00223198 File Offset: 0x00221398
			private static string GetFormattedTextBoxValue(TextBoxInstanceInfo textBoxInstanceInfo, VariantResult textBoxResult, Microsoft.ReportingServices.ReportProcessing.TextBox textBox, ReportProcessing.ProcessingContext processingContext)
			{
				if (textBoxResult.ErrorOccurred)
				{
					return RPRes.rsExpressionErrorValue;
				}
				if (textBoxResult.Value == null)
				{
					return null;
				}
				if (textBoxInstanceInfo != null && textBoxInstanceInfo.Duplicate && textBox.SharedFormatSettings)
				{
					return textBox.FormattedValue;
				}
				TypeCode typeCode = Type.GetTypeCode(textBoxResult.Value.GetType());
				string text = ReportProcessing.RuntimeRICollection.FormatTextboxValue(textBoxInstanceInfo, textBoxResult.Value, textBox, typeCode, processingContext);
				if (textBox.HideDuplicates != null)
				{
					textBox.FormattedValue = text;
				}
				return text;
			}

			// Token: 0x06008884 RID: 34948 RVA: 0x00223208 File Offset: 0x00221408
			private static int GetTextBoxStyleAttribute(Microsoft.ReportingServices.ReportProcessing.Style style, string styleAttributeName, TextBoxInstanceInfo textBoxInstanceInfo, ref bool sharedFormatSettings, out string styleStringValue)
			{
				styleStringValue = null;
				int num = 0;
				object obj = null;
				AttributeInfo attributeInfo = style.StyleAttributes[styleAttributeName];
				if (attributeInfo != null)
				{
					if (attributeInfo.IsExpression)
					{
						num = 1;
						sharedFormatSettings = false;
						obj = textBoxInstanceInfo.GetStyleAttributeValue(attributeInfo.IntValue);
					}
					else
					{
						num = 2;
						obj = attributeInfo.Value;
					}
				}
				if (obj != null)
				{
					styleStringValue = (string)obj;
				}
				return num;
			}

			// Token: 0x06008885 RID: 34949 RVA: 0x00223260 File Offset: 0x00221460
			private static void GetTextBoxStyleAttribute(Microsoft.ReportingServices.ReportProcessing.Style style, string styleAttributeName, TextBoxInstanceInfo textBoxInstanceInfo, ref bool sharedFormatSettings, out int styleIntValue)
			{
				styleIntValue = 0;
				AttributeInfo attributeInfo = style.StyleAttributes[styleAttributeName];
				if (attributeInfo != null)
				{
					if (attributeInfo.IsExpression)
					{
						sharedFormatSettings = false;
						object styleAttributeValue = textBoxInstanceInfo.GetStyleAttributeValue(attributeInfo.IntValue);
						if (styleAttributeValue != null)
						{
							styleIntValue = (int)styleAttributeValue;
							return;
						}
					}
					else
					{
						styleIntValue = attributeInfo.IntValue;
					}
				}
			}

			// Token: 0x06008886 RID: 34950 RVA: 0x002232B0 File Offset: 0x002214B0
			private static void GetAndValidateCalendar(Microsoft.ReportingServices.ReportProcessing.Style style, Microsoft.ReportingServices.ReportProcessing.TextBox textBox, TextBoxInstanceInfo textBoxInstanceInfo, int languageState, ref bool sharedFormatSettings, CultureInfo formattingCulture, ReportProcessing.ProcessingContext context, out Calendar formattingCalendar)
			{
				AttributeInfo attributeInfo = style.StyleAttributes["Calendar"];
				string text = null;
				Calendar calendar = null;
				bool flag = false;
				formattingCalendar = null;
				if (attributeInfo != null)
				{
					if (attributeInfo.IsExpression)
					{
						flag = true;
						text = (string)textBoxInstanceInfo.GetStyleAttributeValue(attributeInfo.IntValue);
						sharedFormatSettings = false;
					}
					else
					{
						text = attributeInfo.Value;
						if (languageState != 0)
						{
							if (languageState == 1)
							{
								flag = true;
							}
							else if (!textBox.CalendarValidated)
							{
								textBox.CalendarValidated = true;
								calendar = ProcessingValidator.CreateCalendar(text);
								formattingCalendar = calendar;
								textBox.Calendar = calendar;
								return;
							}
						}
					}
				}
				if (flag || !textBox.CalendarValidated)
				{
					if (text != null && ProcessingValidator.ValidateCalendar(formattingCulture, text, textBox.ObjectType, textBox.Name, "Calendar", context.ErrorContext))
					{
						calendar = ProcessingValidator.CreateCalendar(text);
						formattingCalendar = calendar;
					}
					if (!flag)
					{
						textBox.Calendar = calendar;
						textBox.CalendarValidated = true;
					}
				}
			}

			// Token: 0x06008887 RID: 34951 RVA: 0x00223380 File Offset: 0x00221580
			private static string FormatTextboxValue(TextBoxInstanceInfo textBoxInstanceInfo, object textBoxValue, Microsoft.ReportingServices.ReportProcessing.TextBox textBox, TypeCode typeCode, ReportProcessing.ProcessingContext processingContext)
			{
				string text = null;
				Microsoft.ReportingServices.ReportProcessing.Style styleClass = textBox.StyleClass;
				CultureInfo cultureInfo = null;
				string text2 = null;
				bool flag = true;
				bool flag2 = false;
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				string text3 = null;
				Calendar calendar = null;
				Calendar calendar2 = null;
				try
				{
					if (styleClass != null)
					{
						ReportProcessing.RuntimeRICollection.GetTextBoxStyleAttribute(styleClass, "Format", textBoxInstanceInfo, ref flag, out text);
						int num = ReportProcessing.RuntimeRICollection.GetTextBoxStyleAttribute(styleClass, "Language", textBoxInstanceInfo, ref flag, out text2);
						if (text2 != null)
						{
							cultureInfo = new CultureInfo(text2, false);
							if (cultureInfo.IsNeutralCulture)
							{
								cultureInfo = CultureInfo.CreateSpecificCulture(text2);
								cultureInfo = new CultureInfo(cultureInfo.Name, false);
							}
						}
						else
						{
							num = 0;
							flag3 = true;
							cultureInfo = Thread.CurrentThread.CurrentCulture;
							if (processingContext.LanguageInstanceId != textBox.LanguageInstanceId)
							{
								textBox.CalendarValidated = false;
								textBox.Calendar = null;
								textBox.LanguageInstanceId = processingContext.LanguageInstanceId;
							}
						}
						if (typeCode == TypeCode.DateTime)
						{
							if (textBox.CalendarValidated)
							{
								if (textBox.Calendar != null)
								{
									calendar2 = textBox.Calendar;
								}
							}
							else
							{
								ReportProcessing.RuntimeRICollection.GetAndValidateCalendar(styleClass, textBox, textBoxInstanceInfo, num, ref flag, cultureInfo, processingContext, out calendar2);
							}
						}
					}
					if (cultureInfo != null && calendar2 != null)
					{
						if (flag3)
						{
							if (cultureInfo.DateTimeFormat.IsReadOnly)
							{
								cultureInfo = (CultureInfo)cultureInfo.Clone();
								flag4 = true;
							}
							else
							{
								calendar = cultureInfo.DateTimeFormat.Calendar;
							}
						}
						cultureInfo.DateTimeFormat.Calendar = calendar2;
					}
					bool flag6 = false;
					if (text != null && textBoxValue is IFormattable)
					{
						try
						{
							if (cultureInfo == null)
							{
								cultureInfo = Thread.CurrentThread.CurrentCulture;
								flag3 = true;
							}
							if (ReportProcessing.CompareWithInvariantCulture(text, "x", true) == 0)
							{
								flag5 = true;
							}
							text3 = ((IFormattable)textBoxValue).ToString(text, cultureInfo);
							flag6 = true;
						}
						catch
						{
						}
					}
					if (!flag6)
					{
						CultureInfo cultureInfo2 = null;
						if ((!flag3 && cultureInfo != null) || flag4)
						{
							cultureInfo2 = Thread.CurrentThread.CurrentCulture;
							Thread.CurrentThread.CurrentCulture = cultureInfo;
							try
							{
								text3 = textBoxValue.ToString();
								goto IL_0207;
							}
							finally
							{
								if (cultureInfo2 != null)
								{
									Thread.CurrentThread.CurrentCulture = cultureInfo2;
								}
							}
						}
						text3 = textBoxValue.ToString();
					}
				}
				finally
				{
					if (flag3 && calendar != null)
					{
						Global.Tracer.Assert(!Thread.CurrentThread.CurrentCulture.DateTimeFormat.IsReadOnly, "(!System.Threading.Thread.CurrentThread.CurrentCulture.DateTimeFormat.IsReadOnly)");
						Thread.CurrentThread.CurrentCulture.DateTimeFormat.Calendar = calendar;
					}
				}
				IL_0207:
				if (!flag5 && styleClass != null)
				{
					if (typeCode - TypeCode.SByte <= 10)
					{
						flag2 = true;
					}
					if (flag2)
					{
						int num2 = 1;
						ReportProcessing.RuntimeRICollection.GetTextBoxStyleAttribute(styleClass, "NumeralVariant", textBoxInstanceInfo, ref flag, out num2);
						if (num2 > 2)
						{
							CultureInfo cultureInfo3 = cultureInfo;
							if (cultureInfo3 == null)
							{
								cultureInfo3 = Thread.CurrentThread.CurrentCulture;
							}
							string numberDecimalSeparator = cultureInfo3.NumberFormat.NumberDecimalSeparator;
							ReportProcessing.RuntimeRICollection.GetTextBoxStyleAttribute(styleClass, "NumeralLanguage", textBoxInstanceInfo, ref flag, out text2);
							if (text2 != null)
							{
								cultureInfo = new CultureInfo(text2, false);
							}
							else if (cultureInfo == null)
							{
								cultureInfo = cultureInfo3;
							}
							bool flag7 = true;
							text3 = FormatDigitReplacement.FormatNumeralVariant(text3, num2, cultureInfo, numberDecimalSeparator, out flag7);
							if (!flag7)
							{
								processingContext.ErrorContext.Register(ProcessingErrorCode.rsInvalidNumeralVariantForLanguage, Severity.Warning, textBox.ObjectType, textBox.Name, "NumeralVariant", new string[]
								{
									num2.ToString(CultureInfo.InvariantCulture),
									cultureInfo.Name
								});
							}
						}
					}
				}
				textBox.SharedFormatSettings = flag;
				return text3;
			}

			// Token: 0x06008888 RID: 34952 RVA: 0x002236C4 File Offset: 0x002218C4
			internal static void EvalReportItemAttr(Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem, ReportItemInstance riInstance, ReportItemInstanceInfo riInstanceInfo, ReportProcessing.ProcessingContext processingContext)
			{
				if (processingContext.ShowHideType != Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.None)
				{
					if (!(reportItem is List))
					{
						((IShowHideReceiver)riInstanceInfo).ProcessReceiver(processingContext, riInstance.UniqueName);
					}
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.TextBox)
					{
						((IShowHideSender)riInstanceInfo).ProcessSender(processingContext, riInstance.UniqueName);
					}
				}
				ReportProcessing.RuntimeRICollection.EvaluateStyleAttributes(reportItem.ObjectType, reportItem.Name, reportItem.StyleClass, riInstance.UniqueName, riInstanceInfo.StyleAttributeValues, processingContext);
				ReportProcessing.RuntimeRICollection.ResetSubtotalReferences(processingContext);
				if (reportItem.Label != null)
				{
					string text = processingContext.NavigationInfo.RegisterLabel(processingContext.ReportRuntime.EvaluateReportItemLabelExpression(reportItem));
					if (text != null)
					{
						riInstanceInfo.Label = text;
					}
				}
				if (reportItem.Bookmark != null)
				{
					processingContext.NavigationInfo.ProcessBookmark(processingContext, reportItem, riInstance, riInstanceInfo);
				}
				if (reportItem.ToolTip != null && ExpressionInfo.Types.Constant != reportItem.ToolTip.Type)
				{
					riInstanceInfo.ToolTip = processingContext.ReportRuntime.EvaluateReportItemToolTipExpression(reportItem);
				}
			}

			// Token: 0x06008889 RID: 34953 RVA: 0x0022379C File Offset: 0x0022199C
			internal static void ResetSubtotalReferences(ReportProcessing.ProcessingContext processingContext)
			{
				if (processingContext.HeadingInstance != null)
				{
					MatrixHeading matrixHeadingDef = processingContext.HeadingInstance.MatrixHeadingDef;
					bool flag = ((Matrix)matrixHeadingDef.DataRegionDef).ProcessingInnerGrouping == Pivot.ProcessingInnerGroupings.Column;
					if (flag && matrixHeadingDef.IsColumn)
					{
						processingContext.HeadingInstance = null;
					}
					if (!flag && !matrixHeadingDef.IsColumn)
					{
						processingContext.HeadingInstance = processingContext.HeadingInstanceOld;
						processingContext.HeadingInstanceOld = null;
					}
				}
			}

			// Token: 0x0600888A RID: 34954 RVA: 0x00223800 File Offset: 0x00221A00
			internal static void EvaluateStyleAttributes(Microsoft.ReportingServices.ReportProcessing.ObjectType objectType, string objectName, Microsoft.ReportingServices.ReportProcessing.Style style, int itemUniqueName, object[] values, ReportProcessing.ProcessingContext processingContext)
			{
				if (style != null && style.ExpressionList != null)
				{
					AttributeInfo attributeInfo = style.StyleAttributes["BorderColor"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderColor(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderColorLeft"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderColorLeft(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderColorRight"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderColorRight(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderColorTop"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderColorTop(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderColorBottom"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderColorBottom(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderStyle"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderStyle(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderStyleLeft"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderStyleLeft(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderStyleRight"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderStyleRight(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderStyleTop"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderStyleTop(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderStyleBottom"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderStyleBottom(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderWidth"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderWidth(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderWidthLeft"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderWidthLeft(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderWidthRight"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderWidthRight(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderWidthTop"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderWidthTop(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BorderWidthBottom"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBorderWidthBottom(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BackgroundColor"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBackgroundColor(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BackgroundGradientType"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBackgroundGradientType(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["BackgroundGradientEndColor"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBackgroundGradientEndColor(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					ReportProcessing.RuntimeRICollection.EvaluateBackgroundImage(objectType, objectName, itemUniqueName, style, values, processingContext);
					attributeInfo = style.StyleAttributes["BackgroundRepeat"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleBackgroundRepeat(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["FontStyle"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleFontStyle(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["FontFamily"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleFontFamily(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["FontSize"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleFontSize(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["FontWeight"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleFontWeight(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["Format"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleFormat(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["TextDecoration"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleTextDecoration(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["TextAlign"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleTextAlign(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["VerticalAlign"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleVerticalAlign(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["Color"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleColor(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["PaddingLeft"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStylePaddingLeft(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["PaddingRight"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStylePaddingRight(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["PaddingTop"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStylePaddingTop(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["PaddingBottom"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStylePaddingBottom(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["LineHeight"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleLineHeight(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["Direction"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleDirection(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["WritingMode"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleWritingMode(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["UnicodeBiDi"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleUnicodeBiDi(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["Language"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleLanguage(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["Calendar"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleCalendar(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["NumeralLanguage"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleNumeralLanguage(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
					attributeInfo = style.StyleAttributes["NumeralVariant"];
					if (attributeInfo != null && attributeInfo.IsExpression)
					{
						values[attributeInfo.IntValue] = processingContext.ReportRuntime.EvaluateStyleNumeralVariant(style, style.ExpressionList[attributeInfo.IntValue], objectType, objectName);
					}
				}
			}

			// Token: 0x0600888B RID: 34955 RVA: 0x002242F4 File Offset: 0x002224F4
			private static void EvaluateBackgroundImage(Microsoft.ReportingServices.ReportProcessing.ObjectType objectType, string objectName, int itemUniqueName, Microsoft.ReportingServices.ReportProcessing.Style style, object[] values, ReportProcessing.ProcessingContext processingContext)
			{
				AttributeInfo attributeInfo = style.StyleAttributes["BackgroundImageSource"];
				if (attributeInfo == null)
				{
					return;
				}
				Global.Tracer.Assert(!attributeInfo.IsExpression, "(!sourceAttribute.IsExpression)");
				Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType intValue = (Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType)attributeInfo.IntValue;
				AttributeInfo attributeInfo2 = style.StyleAttributes["BackgroundImageValue"];
				Global.Tracer.Assert(attributeInfo2 != null, "(null != valueAttribute)");
				object obj = null;
				AttributeInfo attributeInfo3 = null;
				string text = null;
				switch (intValue)
				{
				case Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType.External:
				{
					string text2;
					if (attributeInfo2.IsExpression)
					{
						text2 = processingContext.ReportRuntime.EvaluateStyleBackgroundUrlImageValue(style, style.ExpressionList[attributeInfo2.IntValue], objectType, objectName);
					}
					else
					{
						text2 = attributeInfo2.Value;
					}
					obj = text2;
					if (text2 != null && !processingContext.ImageStreamNames.ContainsKey(text2))
					{
						byte[] array = null;
						ReportProcessing.RuntimeRICollection.GetExternalImage(processingContext, text2, objectType, objectName, out array, out text);
						if (array != null)
						{
							if (processingContext.InPageSection && !processingContext.CreatePageSectionImageChunks)
							{
								obj = new ImageData(array, text);
							}
							else
							{
								string text3 = "BG" + Guid.NewGuid().ToString();
								using (Stream stream = processingContext.CreateReportChunkCallback(text3, ReportProcessing.ReportChunkTypes.Image, text))
								{
									stream.Write(array, 0, array.Length);
								}
								processingContext.ImageStreamNames[text2] = new ImageInfo(text3, text);
							}
							attributeInfo3 = style.StyleAttributes["BackgroundImageMIMEType"];
						}
					}
					break;
				}
				case Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType.Embedded:
				{
					string text4;
					if (attributeInfo2.IsExpression)
					{
						text4 = processingContext.ReportRuntime.EvaluateStyleBackgroundEmbeddedImageValue(style, style.ExpressionList[attributeInfo2.IntValue], processingContext.EmbeddedImages, objectType, objectName);
					}
					else
					{
						text4 = attributeInfo2.Value;
					}
					obj = text4;
					attributeInfo3 = null;
					text = null;
					break;
				}
				case Microsoft.ReportingServices.OnDemandReportRendering.Image.SourceType.Database:
				{
					byte[] array2;
					if (attributeInfo2.IsExpression)
					{
						array2 = processingContext.ReportRuntime.EvaluateStyleBackgroundDatabaseImageValue(style, style.ExpressionList[attributeInfo2.IntValue], objectType, objectName);
					}
					else
					{
						array2 = null;
					}
					attributeInfo3 = style.StyleAttributes["BackgroundImageMIMEType"];
					Global.Tracer.Assert(attributeInfo3 != null, "(null != mimeTypeAttribute)");
					if (attributeInfo3.IsExpression)
					{
						text = processingContext.ReportRuntime.EvaluateStyleBackgroundImageMIMEType(style, style.ExpressionList[attributeInfo2.IntValue], objectType, objectName);
					}
					else
					{
						text = attributeInfo3.Value;
					}
					if (array2 != null)
					{
						if (processingContext.InPageSection && !processingContext.CreatePageSectionImageChunks)
						{
							obj = new ImageData(array2, text);
						}
						else if (processingContext.CreateReportChunkCallback != null)
						{
							string text5 = "BG" + Guid.NewGuid().ToString();
							using (Stream stream2 = processingContext.CreateReportChunkCallback(text5, ReportProcessing.ReportChunkTypes.Image, text))
							{
								stream2.Write(array2, 0, array2.Length);
							}
							obj = text5;
						}
					}
					break;
				}
				default:
					obj = null;
					attributeInfo3 = null;
					text = null;
					break;
				}
				if (attributeInfo2.IsExpression)
				{
					values[attributeInfo2.IntValue] = obj;
				}
				if (attributeInfo3 != null && attributeInfo3.IsExpression)
				{
					values[attributeInfo3.IntValue] = text;
				}
			}

			// Token: 0x040048CF RID: 18639
			private ReportProcessing.IScope m_owner;

			// Token: 0x040048D0 RID: 18640
			private Microsoft.ReportingServices.ReportProcessing.ReportItemCollection m_reportItemsDef;

			// Token: 0x040048D1 RID: 18641
			private ReportProcessing.ProcessingContext m_processingContext;

			// Token: 0x040048D2 RID: 18642
			private ReportProcessing.RuntimeDataRegionObjList m_dataRegionObjs;

			// Token: 0x040048D3 RID: 18643
			private DataAggregateObjResult[] m_runningValueValues;

			// Token: 0x040048D4 RID: 18644
			private int m_currDataRegion;

			// Token: 0x02000D43 RID: 3395
			internal enum SubReportInitialization
			{
				// Token: 0x040050EC RID: 20716
				AssignIDsOnly,
				// Token: 0x040050ED RID: 20717
				RuntimeOnly,
				// Token: 0x040050EE RID: 20718
				All
			}
		}

		// Token: 0x02000C49 RID: 3145
		internal abstract class RuntimeDataRegionObj : ReportProcessing.IScope
		{
			// Token: 0x0600888C RID: 34956 RVA: 0x00224624 File Offset: 0x00222824
			protected RuntimeDataRegionObj(ReportProcessing.ProcessingContext processingContext)
			{
				this.m_processingContext = processingContext;
			}

			// Token: 0x0600888D RID: 34957 RVA: 0x00224633 File Offset: 0x00222833
			protected RuntimeDataRegionObj(ReportProcessing.RuntimeDataRegionObj outerDataRegion)
			{
				this.m_processingContext = outerDataRegion.ProcessingContext;
			}

			// Token: 0x17002A5C RID: 10844
			// (get) Token: 0x0600888E RID: 34958 RVA: 0x00224647 File Offset: 0x00222847
			internal ReportProcessing.ProcessingContext ProcessingContext
			{
				get
				{
					return this.m_processingContext;
				}
			}

			// Token: 0x17002A5D RID: 10845
			// (get) Token: 0x0600888F RID: 34959
			protected abstract ReportProcessing.IScope OuterScope { get; }

			// Token: 0x17002A5E RID: 10846
			// (get) Token: 0x06008890 RID: 34960 RVA: 0x0022464F File Offset: 0x0022284F
			protected virtual string ScopeName
			{
				get
				{
					return null;
				}
			}

			// Token: 0x17002A5F RID: 10847
			// (get) Token: 0x06008891 RID: 34961 RVA: 0x00224652 File Offset: 0x00222852
			internal virtual bool TargetForNonDetailSort
			{
				get
				{
					return this.OuterScope != null && this.OuterScope.TargetForNonDetailSort;
				}
			}

			// Token: 0x17002A60 RID: 10848
			// (get) Token: 0x06008892 RID: 34962 RVA: 0x00224669 File Offset: 0x00222869
			protected virtual int[] SortFilterExpressionScopeInfoIndices
			{
				get
				{
					Global.Tracer.Assert(false);
					return null;
				}
			}

			// Token: 0x06008893 RID: 34963 RVA: 0x00224677 File Offset: 0x00222877
			internal virtual bool IsTargetForSort(int index, bool detailSort)
			{
				return this.OuterScope != null && this.OuterScope.IsTargetForSort(index, detailSort);
			}

			// Token: 0x06008894 RID: 34964
			internal abstract void NextRow();

			// Token: 0x06008895 RID: 34965
			internal abstract bool SortAndFilter();

			// Token: 0x06008896 RID: 34966
			internal abstract void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup);

			// Token: 0x06008897 RID: 34967
			internal abstract void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList);

			// Token: 0x06008898 RID: 34968
			internal abstract void SetupEnvironment();

			// Token: 0x17002A61 RID: 10849
			// (get) Token: 0x06008899 RID: 34969 RVA: 0x00224690 File Offset: 0x00222890
			bool ReportProcessing.IScope.TargetForNonDetailSort
			{
				get
				{
					return this.TargetForNonDetailSort;
				}
			}

			// Token: 0x17002A62 RID: 10850
			// (get) Token: 0x0600889A RID: 34970 RVA: 0x00224698 File Offset: 0x00222898
			int[] ReportProcessing.IScope.SortFilterExpressionScopeInfoIndices
			{
				get
				{
					return this.SortFilterExpressionScopeInfoIndices;
				}
			}

			// Token: 0x0600889B RID: 34971 RVA: 0x002246A0 File Offset: 0x002228A0
			bool ReportProcessing.IScope.IsTargetForSort(int index, bool detailSort)
			{
				return this.IsTargetForSort(index, detailSort);
			}

			// Token: 0x0600889C RID: 34972 RVA: 0x002246AA File Offset: 0x002228AA
			void ReportProcessing.IScope.ReadRow(ReportProcessing.DataActions dataAction)
			{
				this.ReadRow(dataAction);
			}

			// Token: 0x0600889D RID: 34973 RVA: 0x002246B3 File Offset: 0x002228B3
			bool ReportProcessing.IScope.InScope(string scope)
			{
				return this.InScope(scope);
			}

			// Token: 0x0600889E RID: 34974 RVA: 0x002246BC File Offset: 0x002228BC
			ReportProcessing.IScope ReportProcessing.IScope.GetOuterScope(bool includeSubReportContainingScope)
			{
				return this.OuterScope;
			}

			// Token: 0x0600889F RID: 34975 RVA: 0x002246C4 File Offset: 0x002228C4
			string ReportProcessing.IScope.GetScopeName()
			{
				return this.ScopeName;
			}

			// Token: 0x060088A0 RID: 34976 RVA: 0x002246CC File Offset: 0x002228CC
			int ReportProcessing.IScope.RecursiveLevel(string scope)
			{
				return this.GetRecursiveLevel(scope);
			}

			// Token: 0x060088A1 RID: 34977 RVA: 0x002246D5 File Offset: 0x002228D5
			bool ReportProcessing.IScope.TargetScopeMatched(int index, bool detailSort)
			{
				return this.TargetScopeMatched(index, detailSort);
			}

			// Token: 0x060088A2 RID: 34978 RVA: 0x002246DF File Offset: 0x002228DF
			void ReportProcessing.IScope.GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				this.GetScopeValues(targetScopeObj, scopeValues, ref index);
			}

			// Token: 0x060088A3 RID: 34979 RVA: 0x002246EA File Offset: 0x002228EA
			void ReportProcessing.IScope.GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
				this.GetGroupNameValuePairs(pairs);
			}

			// Token: 0x060088A4 RID: 34980 RVA: 0x002246F3 File Offset: 0x002228F3
			internal static void AddAggregate(ref DataAggregateObjList aggregates, DataAggregateObj aggregate)
			{
				if (aggregates == null)
				{
					aggregates = new DataAggregateObjList();
				}
				aggregates.Add(aggregate);
			}

			// Token: 0x060088A5 RID: 34981 RVA: 0x0022470C File Offset: 0x0022290C
			internal static void CreateAggregates(ReportProcessing.ProcessingContext processingContext, DataAggregateInfoList aggDefs, ref DataAggregateObjList nonCustomAggregates, ref DataAggregateObjList customAggregates)
			{
				if (aggDefs != null && 0 < aggDefs.Count)
				{
					for (int i = 0; i < aggDefs.Count; i++)
					{
						DataAggregateObj dataAggregateObj = new DataAggregateObj(aggDefs[i], processingContext);
						if (DataAggregateInfo.AggregateTypes.Aggregate == aggDefs[i].AggregateType)
						{
							ReportProcessing.RuntimeDataRegionObj.AddAggregate(ref customAggregates, dataAggregateObj);
						}
						else
						{
							ReportProcessing.RuntimeDataRegionObj.AddAggregate(ref nonCustomAggregates, dataAggregateObj);
						}
					}
				}
			}

			// Token: 0x060088A6 RID: 34982 RVA: 0x00224764 File Offset: 0x00222964
			internal static void CreateAggregates(ReportProcessing.ProcessingContext processingContext, DataAggregateInfoList aggDefs, ref DataAggregateObjList aggregates)
			{
				if (aggDefs != null && 0 < aggDefs.Count)
				{
					for (int i = 0; i < aggDefs.Count; i++)
					{
						DataAggregateObj dataAggregateObj = new DataAggregateObj(aggDefs[i], processingContext);
						ReportProcessing.RuntimeDataRegionObj.AddAggregate(ref aggregates, dataAggregateObj);
					}
				}
			}

			// Token: 0x060088A7 RID: 34983 RVA: 0x002247A4 File Offset: 0x002229A4
			internal static void CreateAggregates(ReportProcessing.ProcessingContext processingContext, RunningValueInfoList aggDefs, ref DataAggregateObjList aggregates)
			{
				if (aggDefs != null && 0 < aggDefs.Count)
				{
					for (int i = 0; i < aggDefs.Count; i++)
					{
						DataAggregateObj dataAggregateObj = new DataAggregateObj(aggDefs[i], processingContext);
						ReportProcessing.RuntimeDataRegionObj.AddAggregate(ref aggregates, dataAggregateObj);
					}
				}
			}

			// Token: 0x060088A8 RID: 34984 RVA: 0x002247E4 File Offset: 0x002229E4
			internal static void UpdateAggregates(ReportProcessing.ProcessingContext processingContext, DataAggregateObjList aggregates, bool updateAndSetup)
			{
				if (aggregates != null)
				{
					for (int i = 0; i < aggregates.Count; i++)
					{
						DataAggregateObj dataAggregateObj = aggregates[i];
						dataAggregateObj.Update();
						if (updateAndSetup)
						{
							processingContext.ReportObjectModel.AggregatesImpl.Set(dataAggregateObj.Name, dataAggregateObj.AggregateDef, dataAggregateObj.DuplicateNames, dataAggregateObj.AggregateResult());
						}
					}
				}
			}

			// Token: 0x060088A9 RID: 34985 RVA: 0x00224840 File Offset: 0x00222A40
			protected void SetupAggregates(DataAggregateObjList aggregates)
			{
				if (aggregates != null)
				{
					for (int i = 0; i < aggregates.Count; i++)
					{
						DataAggregateObj dataAggregateObj = aggregates[i];
						this.m_processingContext.ReportObjectModel.AggregatesImpl.Set(dataAggregateObj.Name, dataAggregateObj.AggregateDef, dataAggregateObj.DuplicateNames, dataAggregateObj.AggregateResult());
					}
				}
			}

			// Token: 0x060088AA RID: 34986 RVA: 0x00224896 File Offset: 0x00222A96
			protected void SetupEnvironment(DataAggregateObjList nonCustomAggregates, DataAggregateObjList customAggregates, FieldImpl[] dataRow)
			{
				this.SetupAggregates(nonCustomAggregates);
				this.SetupAggregates(customAggregates);
				this.SetupFields(dataRow);
				this.m_processingContext.ReportRuntime.CurrentScope = this;
			}

			// Token: 0x060088AB RID: 34987 RVA: 0x002248BE File Offset: 0x00222ABE
			protected void SetupFields(FieldImpl[] dataRow)
			{
				this.m_processingContext.ReportObjectModel.FieldsImpl.SetFields(dataRow);
			}

			// Token: 0x060088AC RID: 34988 RVA: 0x002248D8 File Offset: 0x00222AD8
			internal static void SetupRunningValues(ReportProcessing.ProcessingContext processingContext, RunningValueInfoList rvDefs, DataAggregateObjResult[] rvValues)
			{
				int num = 0;
				ReportProcessing.RuntimeDataRegionObj.SetupRunningValues(processingContext, ref num, rvDefs, rvValues);
			}

			// Token: 0x060088AD RID: 34989 RVA: 0x002248F4 File Offset: 0x00222AF4
			protected void SetupRunningValues(RunningValueInfoList rvDefs, DataAggregateObjResult[] rvValues)
			{
				int num = 0;
				ReportProcessing.RuntimeDataRegionObj.SetupRunningValues(this.m_processingContext, ref num, rvDefs, rvValues);
			}

			// Token: 0x060088AE RID: 34990 RVA: 0x00224912 File Offset: 0x00222B12
			protected void SetupRunningValues(ref int startIndex, RunningValueInfoList rvDefs, DataAggregateObjResult[] rvValues)
			{
				ReportProcessing.RuntimeDataRegionObj.SetupRunningValues(this.m_processingContext, ref startIndex, rvDefs, rvValues);
			}

			// Token: 0x060088AF RID: 34991 RVA: 0x00224924 File Offset: 0x00222B24
			private static void SetupRunningValues(ReportProcessing.ProcessingContext processingContext, ref int startIndex, RunningValueInfoList rvDefs, DataAggregateObjResult[] rvValues)
			{
				if (rvDefs != null && rvValues != null)
				{
					for (int i = 0; i < rvDefs.Count; i++)
					{
						processingContext.ReportObjectModel.AggregatesImpl.Set(rvDefs[i].Name, rvDefs[i], rvDefs[i].DuplicateNames, rvValues[startIndex + i]);
					}
					startIndex += rvDefs.Count;
				}
			}

			// Token: 0x060088B0 RID: 34992
			internal abstract void ReadRow(ReportProcessing.DataActions dataAction);

			// Token: 0x060088B1 RID: 34993
			internal abstract bool InScope(string scope);

			// Token: 0x060088B2 RID: 34994 RVA: 0x0022498C File Offset: 0x00222B8C
			protected Hashtable GetScopeNames(ReportProcessing.RuntimeDataRegionObj currentScope, string targetScope, ref bool inPivotCell, out bool inScope)
			{
				inScope = false;
				Hashtable hashtable = null;
				if (!inPivotCell)
				{
					hashtable = new Hashtable();
				}
				for (ReportProcessing.IScope scope = currentScope; scope != null; scope = scope.GetOuterScope(false))
				{
					string scopeName = scope.GetScopeName();
					if (scopeName != null)
					{
						if (!inScope && scopeName.Equals(targetScope))
						{
							inScope = true;
							if (hashtable == null)
							{
								return null;
							}
						}
						if (hashtable != null)
						{
							Grouping grouping = null;
							if (scope is ReportProcessing.RuntimeGroupLeafObj)
							{
								grouping = ((ReportProcessing.RuntimeGroupLeafObj)scope).GroupingDef;
							}
							hashtable.Add(scopeName, grouping);
						}
					}
					else if (scope is ReportProcessing.RuntimePivotCell || scope is ReportProcessing.RuntimeTablixCell)
					{
						inPivotCell = true;
						if (!inScope)
						{
							inScope = scope.InScope(targetScope);
						}
						return null;
					}
				}
				return hashtable;
			}

			// Token: 0x060088B3 RID: 34995 RVA: 0x00224A24 File Offset: 0x00222C24
			protected Hashtable GetScopeNames(ReportProcessing.RuntimeDataRegionObj currentScope, string targetScope, ref bool inPivotCell, out int level)
			{
				level = -1;
				Hashtable hashtable = null;
				if (!inPivotCell)
				{
					hashtable = new Hashtable();
				}
				for (ReportProcessing.IScope scope = currentScope; scope != null; scope = scope.GetOuterScope(false))
				{
					string scopeName = scope.GetScopeName();
					if (scopeName != null)
					{
						Grouping grouping = null;
						if (scope is ReportProcessing.RuntimeGroupLeafObj)
						{
							grouping = ((ReportProcessing.RuntimeGroupLeafObj)scope).GroupingDef;
							if (-1 == level && scopeName.Equals(targetScope))
							{
								level = grouping.RecursiveLevel;
								if (hashtable == null)
								{
									return null;
								}
							}
						}
						if (hashtable != null)
						{
							hashtable.Add(scopeName, grouping);
						}
					}
					else if (scope is ReportProcessing.RuntimePivotCell || scope is ReportProcessing.RuntimeTablixCell)
					{
						inPivotCell = true;
						if (-1 == level)
						{
							level = scope.RecursiveLevel(targetScope);
						}
						return null;
					}
				}
				return hashtable;
			}

			// Token: 0x060088B4 RID: 34996 RVA: 0x00224AC0 File Offset: 0x00222CC0
			protected Hashtable GetScopeNames(ReportProcessing.RuntimeDataRegionObj currentScope, ref bool inPivotCell, Dictionary<string, object> nameValuePairs)
			{
				Hashtable hashtable = null;
				if (!inPivotCell)
				{
					hashtable = new Hashtable();
				}
				for (ReportProcessing.IScope scope = currentScope; scope != null; scope = scope.GetOuterScope(false))
				{
					string scopeName = scope.GetScopeName();
					if (scopeName != null)
					{
						Grouping grouping = null;
						if (scope is ReportProcessing.RuntimeGroupLeafObj)
						{
							grouping = ((ReportProcessing.RuntimeGroupLeafObj)scope).GroupingDef;
							ReportProcessing.RuntimeDataRegionObj.AddGroupNameValuePair(this.m_processingContext, grouping, nameValuePairs);
						}
						if (hashtable != null)
						{
							hashtable.Add(scopeName, grouping);
						}
					}
					else if (scope is ReportProcessing.RuntimePivotCell || scope is ReportProcessing.RuntimeTablixCell)
					{
						inPivotCell = true;
						scope.GetGroupNameValuePairs(nameValuePairs);
						hashtable = null;
					}
				}
				return hashtable;
			}

			// Token: 0x060088B5 RID: 34997 RVA: 0x00224B40 File Offset: 0x00222D40
			internal static void AddGroupNameValuePair(ReportProcessing.ProcessingContext processingContext, Grouping grouping, Dictionary<string, object> nameValuePairs)
			{
				if (grouping != null)
				{
					Global.Tracer.Assert(grouping.GroupExpressions != null && 0 < grouping.GroupExpressions.Count);
					ExpressionInfo expressionInfo = grouping.GroupExpressions[0];
					if (expressionInfo.Type == ExpressionInfo.Types.Field)
					{
						try
						{
							FieldImpl fieldImpl = processingContext.ReportObjectModel.FieldsImpl[expressionInfo.IntValue];
							if (fieldImpl.FieldDef != null)
							{
								object value = fieldImpl.Value;
								if (!nameValuePairs.ContainsKey(fieldImpl.FieldDef.DataField))
								{
									nameValuePairs.Add(fieldImpl.FieldDef.DataField, (value is DBNull) ? null : value);
								}
							}
						}
						catch (Exception ex)
						{
							if (AsynchronousExceptionDetection.IsStoppingException(ex))
							{
								throw;
							}
							Global.Tracer.Trace(TraceLevel.Verbose, ex.Message);
						}
					}
				}
			}

			// Token: 0x060088B6 RID: 34998 RVA: 0x00224C14 File Offset: 0x00222E14
			protected bool DataRegionInScope(Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegionDef, string scope)
			{
				if (dataRegionDef.ScopeNames == null)
				{
					bool inPivotCell = dataRegionDef.InPivotCell;
					bool flag;
					dataRegionDef.ScopeNames = this.GetScopeNames(this, scope, ref inPivotCell, out flag);
					dataRegionDef.InPivotCell = inPivotCell;
					return flag;
				}
				return dataRegionDef.ScopeNames.Contains(scope);
			}

			// Token: 0x060088B7 RID: 34999 RVA: 0x00224C57 File Offset: 0x00222E57
			protected virtual int GetRecursiveLevel(string scope)
			{
				return -1;
			}

			// Token: 0x060088B8 RID: 35000 RVA: 0x00224C5C File Offset: 0x00222E5C
			protected int DataRegionRecursiveLevel(Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegionDef, string scope)
			{
				if (scope == null)
				{
					return -1;
				}
				if (dataRegionDef.ScopeNames == null)
				{
					bool inPivotCell = dataRegionDef.InPivotCell;
					int num;
					dataRegionDef.ScopeNames = this.GetScopeNames(this, scope, ref inPivotCell, out num);
					dataRegionDef.InPivotCell = inPivotCell;
					return num;
				}
				Grouping grouping = dataRegionDef.ScopeNames[scope] as Grouping;
				if (grouping != null)
				{
					return grouping.RecursiveLevel;
				}
				return -1;
			}

			// Token: 0x060088B9 RID: 35001 RVA: 0x00224CB8 File Offset: 0x00222EB8
			protected void DataRegionGetGroupNameValuePairs(Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegionDef, Dictionary<string, object> nameValuePairs)
			{
				if (dataRegionDef.ScopeNames == null)
				{
					bool inPivotCell = dataRegionDef.InPivotCell;
					dataRegionDef.ScopeNames = this.GetScopeNames(this, ref inPivotCell, nameValuePairs);
					dataRegionDef.InPivotCell = inPivotCell;
					return;
				}
				foreach (object obj in dataRegionDef.ScopeNames.Values)
				{
					ReportProcessing.RuntimeDataRegionObj.AddGroupNameValuePair(this.m_processingContext, obj as Grouping, nameValuePairs);
				}
			}

			// Token: 0x060088BA RID: 35002 RVA: 0x00224D1E File Offset: 0x00222F1E
			protected void ScopeNextNonAggregateRow(DataAggregateObjList aggregates, ReportProcessing.DataRowList dataRows)
			{
				ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, aggregates, true);
				this.CommonNextRow(dataRows);
			}

			// Token: 0x060088BB RID: 35003 RVA: 0x00224D34 File Offset: 0x00222F34
			internal static void CommonFirstRow(FieldsImpl fields, ref bool firstRowIsAggregate, ref FieldImpl[] firstRow)
			{
				if (firstRowIsAggregate || firstRow == null)
				{
					firstRow = fields.GetAndSaveFields();
					firstRowIsAggregate = fields.IsAggregateRow;
				}
			}

			// Token: 0x060088BC RID: 35004 RVA: 0x00224D4E File Offset: 0x00222F4E
			protected void CommonNextRow(ReportProcessing.DataRowList dataRows)
			{
				if (dataRows != null)
				{
					ReportProcessing.RuntimeDetailObj.SaveData(dataRows, this.m_processingContext);
				}
				this.SendToInner();
			}

			// Token: 0x060088BD RID: 35005 RVA: 0x00224D65 File Offset: 0x00222F65
			protected virtual void SendToInner()
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060088BE RID: 35006 RVA: 0x00224D74 File Offset: 0x00222F74
			protected void ScopeNextAggregateRow(RuntimeUserSortTargetInfo sortTargetInfo)
			{
				if (sortTargetInfo != null)
				{
					if (sortTargetInfo.AggregateRows == null)
					{
						sortTargetInfo.AggregateRows = new ReportProcessing.AggregateRowList();
					}
					ReportProcessing.AggregateRow aggregateRow = new ReportProcessing.AggregateRow(this.m_processingContext);
					sortTargetInfo.AggregateRows.Add(aggregateRow);
					if (!sortTargetInfo.TargetForNonDetailSort)
					{
						return;
					}
				}
				this.SendToInner();
			}

			// Token: 0x060088BF RID: 35007 RVA: 0x00224DC0 File Offset: 0x00222FC0
			protected void ScopeFinishSorting(ref FieldImpl[] firstRow, RuntimeUserSortTargetInfo sortTargetInfo)
			{
				Global.Tracer.Assert(sortTargetInfo != null, "(null != sortTargetInfo)");
				firstRow = null;
				sortTargetInfo.SortTree.Traverse(ReportProcessing.ProcessingStages.UserSortFilter, true);
				sortTargetInfo.SortTree = null;
				if (sortTargetInfo.AggregateRows != null)
				{
					for (int i = 0; i < sortTargetInfo.AggregateRows.Count; i++)
					{
						sortTargetInfo.AggregateRows[i].SetFields(this.m_processingContext);
						this.SendToInner();
					}
					sortTargetInfo.AggregateRows = null;
				}
			}

			// Token: 0x060088C0 RID: 35008 RVA: 0x00224E39 File Offset: 0x00223039
			internal virtual bool TargetScopeMatched(int index, bool detailSort)
			{
				Global.Tracer.Assert(false);
				return false;
			}

			// Token: 0x060088C1 RID: 35009 RVA: 0x00224E47 File Offset: 0x00223047
			internal virtual void GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060088C2 RID: 35010 RVA: 0x00224E54 File Offset: 0x00223054
			protected void ReleaseDataRows(ReportProcessing.DataActions finishedDataAction, ref ReportProcessing.DataActions dataAction, ref ReportProcessing.DataRowList dataRows)
			{
				dataAction &= ~finishedDataAction;
				if (dataAction == ReportProcessing.DataActions.None)
				{
					dataRows = null;
				}
			}

			// Token: 0x060088C3 RID: 35011 RVA: 0x00224E64 File Offset: 0x00223064
			protected void DetailHandleSortFilterEvent(Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegionDef, ReportProcessing.IScope outerScope, int rowIndex)
			{
				RuntimeSortFilterEventInfoList runtimeSortFilterInfo = this.m_processingContext.RuntimeSortFilterInfo;
				if (runtimeSortFilterInfo == null || dataRegionDef.SortFilterSourceDetailScopeInfo == null || outerScope.TargetForNonDetailSort)
				{
					return;
				}
				for (int i = 0; i < runtimeSortFilterInfo.Count; i++)
				{
					RuntimeSortFilterEventInfo runtimeSortFilterEventInfo = runtimeSortFilterInfo[i];
					if (runtimeSortFilterEventInfo.EventSource.ContainingScopes != null && 0 < runtimeSortFilterEventInfo.EventSource.ContainingScopes.Count && -1 != dataRegionDef.SortFilterSourceDetailScopeInfo[i] && outerScope.TargetScopeMatched(i, false) && this.m_processingContext.ReportObjectModel.FieldsImpl.GetRowIndex() == dataRegionDef.SortFilterSourceDetailScopeInfo[i])
					{
						if (runtimeSortFilterEventInfo.EventSource.ContainingScopes.LastEntry == null)
						{
							Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = runtimeSortFilterEventInfo.EventSource.Parent;
							if (runtimeSortFilterEventInfo.EventSource.IsSubReportTopLevelScope)
							{
								while (reportItem != null && !(reportItem is Microsoft.ReportingServices.ReportProcessing.SubReport))
								{
									reportItem = reportItem.Parent;
								}
								Global.Tracer.Assert(reportItem is Microsoft.ReportingServices.ReportProcessing.SubReport, "(parent is SubReport)");
								reportItem = reportItem.Parent;
							}
							if (reportItem == dataRegionDef)
							{
								Global.Tracer.Assert(runtimeSortFilterEventInfo.EventSourceScope == null, "(null == sortFilterInfo.EventSourceScope)");
								runtimeSortFilterEventInfo.EventSourceScope = this;
								runtimeSortFilterEventInfo.EventSourceDetailIndex = rowIndex;
							}
						}
						if (runtimeSortFilterEventInfo.DetailScopes == null)
						{
							runtimeSortFilterEventInfo.DetailScopes = new ReportProcessing.RuntimeDataRegionObjList();
							runtimeSortFilterEventInfo.DetailScopeIndices = new IntList();
						}
						runtimeSortFilterEventInfo.DetailScopes.Add(this);
						runtimeSortFilterEventInfo.DetailScopeIndices.Add(rowIndex);
					}
				}
			}

			// Token: 0x060088C4 RID: 35012 RVA: 0x00224FD8 File Offset: 0x002231D8
			protected void DetailGetScopeValues(ReportProcessing.IScope outerScope, ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				Global.Tracer.Assert(targetScopeObj == null, "(null == targetScopeObj)");
				outerScope.GetScopeValues(targetScopeObj, scopeValues, ref index);
				Global.Tracer.Assert(index < scopeValues.Length, "(index < scopeValues.Length)");
				VariantList variantList = new VariantList(1);
				variantList.Add(this.m_processingContext.ReportObjectModel.FieldsImpl.GetRowIndex());
				int num = index;
				index = num + 1;
				scopeValues[num] = variantList;
			}

			// Token: 0x060088C5 RID: 35013 RVA: 0x00225050 File Offset: 0x00223250
			protected bool DetailTargetScopeMatched(Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegionDef, ReportProcessing.IScope outerScope, int index)
			{
				if (this.m_processingContext.RuntimeSortFilterInfo != null)
				{
					RuntimeSortFilterEventInfo runtimeSortFilterEventInfo = this.m_processingContext.RuntimeSortFilterInfo[index];
					if (runtimeSortFilterEventInfo != null && runtimeSortFilterEventInfo.DetailScopes != null)
					{
						for (int i = 0; i < runtimeSortFilterEventInfo.DetailScopes.Count; i++)
						{
							if (this == runtimeSortFilterEventInfo.DetailScopes[i] && dataRegionDef.CurrentDetailRowIndex == runtimeSortFilterEventInfo.DetailScopeIndices[i])
							{
								return true;
							}
						}
					}
				}
				return false;
			}

			// Token: 0x060088C6 RID: 35014 RVA: 0x002250C3 File Offset: 0x002232C3
			protected virtual void GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
			}

			// Token: 0x040048D5 RID: 18645
			protected ReportProcessing.ProcessingContext m_processingContext;

			// Token: 0x040048D6 RID: 18646
			protected bool m_processedPreviousAggregates;
		}

		// Token: 0x02000C4A RID: 3146
		internal class RuntimeSortHierarchyObj : ReportProcessing.IHierarchyObj
		{
			// Token: 0x060088C7 RID: 35015 RVA: 0x002250C8 File Offset: 0x002232C8
			internal RuntimeSortHierarchyObj(ReportProcessing.IHierarchyObj outerHierarchy)
			{
				this.m_hierarchyRoot = outerHierarchy.HierarchyRoot;
				ReportProcessing.ProcessingContext processingContext = this.m_hierarchyRoot.ProcessingContext;
				IntList sortFilterInfoIndices = this.m_hierarchyRoot.SortFilterInfoIndices;
				int num = outerHierarchy.ExpressionIndex + 1;
				if (sortFilterInfoIndices != null && num < sortFilterInfoIndices.Count)
				{
					this.m_sortHierarchyStruct = new ReportProcessing.RuntimeSortHierarchyObj.SortHierarchyStructure(this, num, processingContext.RuntimeSortFilterInfo, sortFilterInfoIndices);
					return;
				}
				if (this.m_hierarchyRoot is ReportProcessing.RuntimeListDetailObj)
				{
					this.m_dataHolder = new ReportProcessing.RuntimeListDetailObj((ReportProcessing.RuntimeListDetailObj)this.m_hierarchyRoot);
					return;
				}
				if (this.m_hierarchyRoot is ReportProcessing.RuntimeTableDetailObj)
				{
					this.m_dataHolder = new ReportProcessing.RuntimeTableDetailObj((ReportProcessing.RuntimeTableDetailObj)this.m_hierarchyRoot);
					return;
				}
				this.m_dataHolder = new ReportProcessing.RuntimeSortDataHolder(this.m_hierarchyRoot);
			}

			// Token: 0x17002A63 RID: 10851
			// (get) Token: 0x060088C8 RID: 35016 RVA: 0x00225182 File Offset: 0x00223382
			ReportProcessing.IHierarchyObj ReportProcessing.IHierarchyObj.HierarchyRoot
			{
				get
				{
					return this.m_hierarchyRoot;
				}
			}

			// Token: 0x17002A64 RID: 10852
			// (get) Token: 0x060088C9 RID: 35017 RVA: 0x0022518A File Offset: 0x0022338A
			ReportProcessing.ProcessingContext ReportProcessing.IHierarchyObj.ProcessingContext
			{
				get
				{
					return this.m_hierarchyRoot.ProcessingContext;
				}
			}

			// Token: 0x17002A65 RID: 10853
			// (get) Token: 0x060088CA RID: 35018 RVA: 0x00225197 File Offset: 0x00223397
			// (set) Token: 0x060088CB RID: 35019 RVA: 0x002251AE File Offset: 0x002233AE
			ReportProcessing.BTreeNode ReportProcessing.IHierarchyObj.SortTree
			{
				get
				{
					if (this.m_sortHierarchyStruct != null)
					{
						return this.m_sortHierarchyStruct.SortTree;
					}
					return null;
				}
				set
				{
					if (this.m_sortHierarchyStruct != null)
					{
						this.m_sortHierarchyStruct.SortTree = value;
						return;
					}
					Global.Tracer.Assert(false);
				}
			}

			// Token: 0x17002A66 RID: 10854
			// (get) Token: 0x060088CC RID: 35020 RVA: 0x002251D0 File Offset: 0x002233D0
			int ReportProcessing.IHierarchyObj.ExpressionIndex
			{
				get
				{
					if (this.m_sortHierarchyStruct != null)
					{
						return this.m_sortHierarchyStruct.SortIndex;
					}
					return -1;
				}
			}

			// Token: 0x17002A67 RID: 10855
			// (get) Token: 0x060088CD RID: 35021 RVA: 0x002251E7 File Offset: 0x002233E7
			IntList ReportProcessing.IHierarchyObj.SortFilterInfoIndices
			{
				get
				{
					return this.m_hierarchyRoot.SortFilterInfoIndices;
				}
			}

			// Token: 0x17002A68 RID: 10856
			// (get) Token: 0x060088CE RID: 35022 RVA: 0x002251F4 File Offset: 0x002233F4
			bool ReportProcessing.IHierarchyObj.IsDetail
			{
				get
				{
					return false;
				}
			}

			// Token: 0x060088CF RID: 35023 RVA: 0x002251F7 File Offset: 0x002233F7
			ReportProcessing.IHierarchyObj ReportProcessing.IHierarchyObj.CreateHierarchyObj()
			{
				return new ReportProcessing.RuntimeSortHierarchyObj(this);
			}

			// Token: 0x060088D0 RID: 35024 RVA: 0x002251FF File Offset: 0x002233FF
			ProcessingMessageList ReportProcessing.IHierarchyObj.RegisterComparisonError(string propertyName)
			{
				return this.m_hierarchyRoot.ProcessingContext.RegisterComparisonErrorForSortFilterEvent(propertyName);
			}

			// Token: 0x060088D1 RID: 35025 RVA: 0x00225214 File Offset: 0x00223414
			void ReportProcessing.IHierarchyObj.NextRow()
			{
				if (this.m_dataHolder != null)
				{
					this.m_dataHolder.NextRow();
					return;
				}
				if (this.m_sortHierarchyStruct != null)
				{
					object sortOrder = this.m_sortHierarchyStruct.SortInfo.GetSortOrder(this.m_hierarchyRoot.ProcessingContext.ReportRuntime);
					this.m_sortHierarchyStruct.SortTree.NextRow(sortOrder);
				}
			}

			// Token: 0x060088D2 RID: 35026 RVA: 0x00225270 File Offset: 0x00223470
			void ReportProcessing.IHierarchyObj.Traverse(ReportProcessing.ProcessingStages operation)
			{
				if (this.m_sortHierarchyStruct != null)
				{
					bool flag = true;
					if (this.m_sortHierarchyStruct.SortInfo.EventSource.UserSort.SortExpressionScope == null)
					{
						flag = this.m_sortHierarchyStruct.SortInfo.SortDirection;
					}
					this.m_sortHierarchyStruct.SortTree.Traverse(operation, flag);
				}
				if (this.m_dataHolder != null)
				{
					this.m_dataHolder.Traverse(operation);
				}
			}

			// Token: 0x060088D3 RID: 35027 RVA: 0x002252DA File Offset: 0x002234DA
			void ReportProcessing.IHierarchyObj.ReadRow()
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060088D4 RID: 35028 RVA: 0x002252E7 File Offset: 0x002234E7
			void ReportProcessing.IHierarchyObj.ProcessUserSort()
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060088D5 RID: 35029 RVA: 0x002252F4 File Offset: 0x002234F4
			void ReportProcessing.IHierarchyObj.MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060088D6 RID: 35030 RVA: 0x00225301 File Offset: 0x00223501
			void ReportProcessing.IHierarchyObj.AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x040048D7 RID: 18647
			private ReportProcessing.IHierarchyObj m_hierarchyRoot;

			// Token: 0x040048D8 RID: 18648
			private ReportProcessing.RuntimeSortHierarchyObj.SortHierarchyStructure m_sortHierarchyStruct;

			// Token: 0x040048D9 RID: 18649
			private ReportProcessing.ISortDataHolder m_dataHolder;

			// Token: 0x02000D44 RID: 3396
			private class SortHierarchyStructure
			{
				// Token: 0x06008FCB RID: 36811 RVA: 0x00247DFD File Offset: 0x00245FFD
				internal SortHierarchyStructure(ReportProcessing.IHierarchyObj owner, int sortIndex, RuntimeSortFilterEventInfoList sortInfoList, IntList sortInfoIndices)
				{
					this.SortIndex = sortIndex;
					this.SortInfo = sortInfoList[sortInfoIndices[sortIndex]];
					this.SortTree = new ReportProcessing.BTreeNode(owner);
				}

				// Token: 0x040050EF RID: 20719
				internal RuntimeSortFilterEventInfo SortInfo;

				// Token: 0x040050F0 RID: 20720
				internal int SortIndex;

				// Token: 0x040050F1 RID: 20721
				internal ReportProcessing.BTreeNode SortTree;
			}
		}

		// Token: 0x02000C4B RID: 3147
		internal class RuntimeHierarchyObj : ReportProcessing.RuntimeDataRegionObj, ReportProcessing.IHierarchyObj
		{
			// Token: 0x060088D7 RID: 35031 RVA: 0x0022530E File Offset: 0x0022350E
			protected RuntimeHierarchyObj(ReportProcessing.ProcessingContext processingContext)
				: base(processingContext)
			{
			}

			// Token: 0x060088D8 RID: 35032 RVA: 0x00225317 File Offset: 0x00223517
			internal RuntimeHierarchyObj(ReportProcessing.RuntimeHierarchyObj outerHierarchy)
				: base(outerHierarchy)
			{
				this.ConstructorHelper(outerHierarchy.m_expression.ExpressionIndex + 1, outerHierarchy.m_hierarchyRoot);
			}

			// Token: 0x17002A69 RID: 10857
			// (get) Token: 0x060088D9 RID: 35033 RVA: 0x00225339 File Offset: 0x00223539
			internal ReportProcessing.RuntimeHierarchyObjList HierarchyObjs
			{
				get
				{
					return this.m_hierarchyObjs;
				}
			}

			// Token: 0x17002A6A RID: 10858
			// (get) Token: 0x060088DA RID: 35034 RVA: 0x00225341 File Offset: 0x00223541
			protected override ReportProcessing.IScope OuterScope
			{
				get
				{
					Global.Tracer.Assert(false);
					return null;
				}
			}

			// Token: 0x17002A6B RID: 10859
			// (get) Token: 0x060088DB RID: 35035 RVA: 0x0022534F File Offset: 0x0022354F
			protected virtual ReportProcessing.IHierarchyObj HierarchyRoot
			{
				get
				{
					return this.m_hierarchyRoot;
				}
			}

			// Token: 0x17002A6C RID: 10860
			// (get) Token: 0x060088DC RID: 35036 RVA: 0x00225357 File Offset: 0x00223557
			// (set) Token: 0x060088DD RID: 35037 RVA: 0x00225364 File Offset: 0x00223564
			protected virtual ReportProcessing.BTreeNode SortTree
			{
				get
				{
					return this.m_grouping.Tree;
				}
				set
				{
					this.m_grouping.Tree = value;
				}
			}

			// Token: 0x17002A6D RID: 10861
			// (get) Token: 0x060088DE RID: 35038 RVA: 0x00225372 File Offset: 0x00223572
			protected virtual int ExpressionIndex
			{
				get
				{
					if (this.m_expression != null)
					{
						return this.m_expression.ExpressionIndex;
					}
					Global.Tracer.Assert(false);
					return -1;
				}
			}

			// Token: 0x17002A6E RID: 10862
			// (get) Token: 0x060088DF RID: 35039 RVA: 0x00225394 File Offset: 0x00223594
			protected virtual ReportProcessing.DataRowList SortDataRows
			{
				get
				{
					Global.Tracer.Assert(false);
					return null;
				}
			}

			// Token: 0x17002A6F RID: 10863
			// (get) Token: 0x060088E0 RID: 35040 RVA: 0x002253A2 File Offset: 0x002235A2
			protected virtual IntList SortFilterInfoIndices
			{
				get
				{
					Global.Tracer.Assert(false);
					return null;
				}
			}

			// Token: 0x17002A70 RID: 10864
			// (get) Token: 0x060088E1 RID: 35041 RVA: 0x002253B0 File Offset: 0x002235B0
			protected virtual bool IsDetail
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17002A71 RID: 10865
			// (get) Token: 0x060088E2 RID: 35042 RVA: 0x002253B3 File Offset: 0x002235B3
			ReportProcessing.IHierarchyObj ReportProcessing.IHierarchyObj.HierarchyRoot
			{
				get
				{
					return this.HierarchyRoot;
				}
			}

			// Token: 0x17002A72 RID: 10866
			// (get) Token: 0x060088E3 RID: 35043 RVA: 0x002253BB File Offset: 0x002235BB
			ReportProcessing.ProcessingContext ReportProcessing.IHierarchyObj.ProcessingContext
			{
				get
				{
					return this.m_processingContext;
				}
			}

			// Token: 0x17002A73 RID: 10867
			// (get) Token: 0x060088E4 RID: 35044 RVA: 0x002253C3 File Offset: 0x002235C3
			// (set) Token: 0x060088E5 RID: 35045 RVA: 0x002253CB File Offset: 0x002235CB
			ReportProcessing.BTreeNode ReportProcessing.IHierarchyObj.SortTree
			{
				get
				{
					return this.SortTree;
				}
				set
				{
					this.SortTree = value;
				}
			}

			// Token: 0x17002A74 RID: 10868
			// (get) Token: 0x060088E6 RID: 35046 RVA: 0x002253D4 File Offset: 0x002235D4
			int ReportProcessing.IHierarchyObj.ExpressionIndex
			{
				get
				{
					return this.ExpressionIndex;
				}
			}

			// Token: 0x17002A75 RID: 10869
			// (get) Token: 0x060088E7 RID: 35047 RVA: 0x002253DC File Offset: 0x002235DC
			IntList ReportProcessing.IHierarchyObj.SortFilterInfoIndices
			{
				get
				{
					return this.SortFilterInfoIndices;
				}
			}

			// Token: 0x17002A76 RID: 10870
			// (get) Token: 0x060088E8 RID: 35048 RVA: 0x002253E4 File Offset: 0x002235E4
			bool ReportProcessing.IHierarchyObj.IsDetail
			{
				get
				{
					return this.IsDetail;
				}
			}

			// Token: 0x060088E9 RID: 35049 RVA: 0x002253EC File Offset: 0x002235EC
			ReportProcessing.IHierarchyObj ReportProcessing.IHierarchyObj.CreateHierarchyObj()
			{
				return this.CreateHierarchyObj();
			}

			// Token: 0x060088EA RID: 35050 RVA: 0x002253F4 File Offset: 0x002235F4
			ProcessingMessageList ReportProcessing.IHierarchyObj.RegisterComparisonError(string propertyName)
			{
				return this.RegisterComparisonError(propertyName);
			}

			// Token: 0x060088EB RID: 35051 RVA: 0x002253FD File Offset: 0x002235FD
			void ReportProcessing.IHierarchyObj.NextRow()
			{
				this.NextRow();
			}

			// Token: 0x060088EC RID: 35052 RVA: 0x00225405 File Offset: 0x00223605
			void ReportProcessing.IHierarchyObj.Traverse(ReportProcessing.ProcessingStages operation)
			{
				switch (operation)
				{
				case ReportProcessing.ProcessingStages.SortAndFilter:
					this.SortAndFilter();
					return;
				case ReportProcessing.ProcessingStages.RunningValues:
					this.CalculateRunningValues();
					return;
				case ReportProcessing.ProcessingStages.CreatingInstances:
					this.CreateInstances();
					return;
				default:
					Global.Tracer.Assert(false, "Invalid processing stage for RuntimeHierarchyObj");
					return;
				}
			}

			// Token: 0x060088ED RID: 35053 RVA: 0x00225443 File Offset: 0x00223643
			void ReportProcessing.IHierarchyObj.ReadRow()
			{
				this.ReadRow(ReportProcessing.DataActions.UserSort);
			}

			// Token: 0x060088EE RID: 35054 RVA: 0x0022544C File Offset: 0x0022364C
			void ReportProcessing.IHierarchyObj.ProcessUserSort()
			{
				this.ProcessUserSort();
			}

			// Token: 0x060088EF RID: 35055 RVA: 0x00225454 File Offset: 0x00223654
			void ReportProcessing.IHierarchyObj.MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo)
			{
				this.MarkSortInfoProcessed(runtimeSortFilterInfo);
			}

			// Token: 0x060088F0 RID: 35056 RVA: 0x0022545D File Offset: 0x0022365D
			void ReportProcessing.IHierarchyObj.AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo)
			{
				this.AddSortInfoIndex(sortInfoIndex, sortInfo);
			}

			// Token: 0x060088F1 RID: 35057 RVA: 0x00225468 File Offset: 0x00223668
			private void ConstructorHelper(int exprIndex, ReportProcessing.RuntimeHierarchyObj hierarchyRoot)
			{
				this.m_hierarchyRoot = hierarchyRoot;
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = null;
				ReportProcessing.RuntimeDetailObj runtimeDetailObj = null;
				ExpressionInfoList expressionInfoList;
				IndexedExprHost indexedExprHost;
				BoolList boolList;
				if (this.m_hierarchyRoot is ReportProcessing.RuntimeGroupRootObj)
				{
					runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
					if (ReportProcessing.ProcessingStages.Grouping == runtimeGroupRootObj.ProcessingStage)
					{
						expressionInfoList = runtimeGroupRootObj.GroupExpressions;
						indexedExprHost = runtimeGroupRootObj.GroupExpressionHost;
						boolList = runtimeGroupRootObj.GroupDirections;
					}
					else
					{
						Global.Tracer.Assert(ReportProcessing.ProcessingStages.SortAndFilter == runtimeGroupRootObj.ProcessingStage, "(ProcessingStages.SortAndFilter == groupRoot.ProcessingStage)");
						expressionInfoList = runtimeGroupRootObj.SortExpressions;
						indexedExprHost = runtimeGroupRootObj.SortExpressionHost;
						boolList = runtimeGroupRootObj.SortDirections;
					}
				}
				else
				{
					Global.Tracer.Assert(this.m_hierarchyRoot is ReportProcessing.RuntimeDetailObj, "(m_hierarchyRoot is RuntimeDetailObj)");
					runtimeDetailObj = (ReportProcessing.RuntimeDetailObj)this.m_hierarchyRoot;
					expressionInfoList = runtimeDetailObj.SortExpressions;
					indexedExprHost = runtimeDetailObj.SortExpressionHost;
					boolList = runtimeDetailObj.SortDirections;
				}
				if (exprIndex >= expressionInfoList.Count)
				{
					this.m_hierarchyObjs = new ReportProcessing.RuntimeHierarchyObjList();
					ReportProcessing.RuntimeHierarchyObj runtimeHierarchyObj = null;
					if (runtimeGroupRootObj != null)
					{
						if (ReportProcessing.ProcessingStages.Grouping == runtimeGroupRootObj.ProcessingStage)
						{
							if (this.m_hierarchyRoot is ReportProcessing.RuntimeListGroupRootObj)
							{
								runtimeHierarchyObj = new ReportProcessing.RuntimeListGroupLeafObj((ReportProcessing.RuntimeListGroupRootObj)this.m_hierarchyRoot);
							}
							else if (this.m_hierarchyRoot is ReportProcessing.RuntimeTableGroupRootObj)
							{
								runtimeHierarchyObj = new ReportProcessing.RuntimeTableGroupLeafObj((ReportProcessing.RuntimeTableGroupRootObj)this.m_hierarchyRoot);
							}
							else if (this.m_hierarchyRoot is ReportProcessing.RuntimeMatrixGroupRootObj)
							{
								runtimeHierarchyObj = new ReportProcessing.RuntimeMatrixGroupLeafObj((ReportProcessing.RuntimeMatrixGroupRootObj)this.m_hierarchyRoot);
							}
							else if (this.m_hierarchyRoot is ReportProcessing.RuntimeChartGroupRootObj)
							{
								runtimeHierarchyObj = new ReportProcessing.RuntimeChartGroupLeafObj((ReportProcessing.RuntimeChartGroupRootObj)this.m_hierarchyRoot);
							}
							else if (this.m_hierarchyRoot is ReportProcessing.RuntimeCustomReportItemGroupRootObj)
							{
								runtimeHierarchyObj = new ReportProcessing.RuntimeCustomReportItemGroupLeafObj((ReportProcessing.RuntimeCustomReportItemGroupRootObj)this.m_hierarchyRoot);
							}
							if (!runtimeGroupRootObj.HasParent)
							{
								runtimeGroupRootObj.AddChildWithNoParent((ReportProcessing.RuntimeGroupLeafObj)runtimeHierarchyObj);
							}
						}
					}
					else if (runtimeDetailObj is ReportProcessing.RuntimeListDetailObj)
					{
						runtimeHierarchyObj = new ReportProcessing.RuntimeListDetailObj((ReportProcessing.RuntimeListDetailObj)runtimeDetailObj);
					}
					else if (runtimeDetailObj is ReportProcessing.RuntimeTableDetailObj)
					{
						runtimeHierarchyObj = new ReportProcessing.RuntimeTableDetailObj((ReportProcessing.RuntimeTableDetailObj)runtimeDetailObj);
					}
					else if (runtimeDetailObj is ReportProcessing.RuntimeOWCChartDetailObj)
					{
						runtimeHierarchyObj = new ReportProcessing.RuntimeOWCChartDetailObj((ReportProcessing.RuntimeOWCChartDetailObj)runtimeDetailObj);
					}
					if (runtimeHierarchyObj != null)
					{
						this.m_hierarchyObjs.Add(runtimeHierarchyObj);
						return;
					}
				}
				else
				{
					this.m_expression = new ReportProcessing.RuntimeExpressionInfo(expressionInfoList, indexedExprHost, boolList, exprIndex);
					if (runtimeGroupRootObj != null)
					{
						this.m_grouping = new ReportProcessing.RuntimeGroupingObj(this, runtimeGroupRootObj.GroupingType);
						return;
					}
					Global.Tracer.Assert(runtimeDetailObj != null, "(null != detailRoot)");
					this.m_grouping = new ReportProcessing.RuntimeGroupingObj(this, ReportProcessing.RuntimeGroupingObj.GroupingTypes.Sort);
				}
			}

			// Token: 0x060088F2 RID: 35058 RVA: 0x002256B6 File Offset: 0x002238B6
			internal ProcessingMessageList RegisterComparisonError(string propertyName)
			{
				return this.RegisterComparisonError(propertyName, null);
			}

			// Token: 0x060088F3 RID: 35059 RVA: 0x002256C0 File Offset: 0x002238C0
			internal ProcessingMessageList RegisterComparisonError(string propertyName, ReportProcessingException_ComparisonError e)
			{
				Microsoft.ReportingServices.ReportProcessing.ObjectType objectType;
				string text;
				if (this.m_hierarchyRoot is ReportProcessing.RuntimeGroupRootObj)
				{
					ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
					objectType = runtimeGroupRootObj.HierarchyDef.DataRegionDef.ObjectType;
					text = runtimeGroupRootObj.HierarchyDef.DataRegionDef.Name;
				}
				else
				{
					Global.Tracer.Assert(this.m_hierarchyRoot is ReportProcessing.RuntimeDetailObj, "(m_hierarchyRoot is RuntimeDetailObj)");
					ReportProcessing.RuntimeDetailObj runtimeDetailObj = (ReportProcessing.RuntimeDetailObj)this.m_hierarchyRoot;
					objectType = runtimeDetailObj.DataRegionDef.ObjectType;
					text = runtimeDetailObj.DataRegionDef.Name;
				}
				if (e == null)
				{
					this.m_processingContext.ErrorContext.Register(ProcessingErrorCode.rsComparisonError, Severity.Error, objectType, text, propertyName, Array.Empty<string>());
				}
				else
				{
					this.m_processingContext.ErrorContext.Register(ProcessingErrorCode.rsComparisonTypeError, Severity.Error, objectType, text, propertyName, new string[] { e.TypeX, e.TypeY });
				}
				return this.m_processingContext.ErrorContext.Messages;
			}

			// Token: 0x060088F4 RID: 35060 RVA: 0x002257B0 File Offset: 0x002239B0
			internal ProcessingMessageList RegisterSpatialTypeComparisonError(string type)
			{
				Microsoft.ReportingServices.ReportProcessing.ObjectType objectType;
				string text;
				if (this.m_hierarchyRoot is ReportProcessing.RuntimeGroupRootObj)
				{
					ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
					objectType = runtimeGroupRootObj.HierarchyDef.DataRegionDef.ObjectType;
					text = runtimeGroupRootObj.HierarchyDef.DataRegionDef.Name;
				}
				else
				{
					Global.Tracer.Assert(this.m_hierarchyRoot is ReportProcessing.RuntimeDetailObj, "(m_hierarchyRoot is RuntimeDetailObj)");
					ReportProcessing.RuntimeDetailObj runtimeDetailObj = (ReportProcessing.RuntimeDetailObj)this.m_hierarchyRoot;
					objectType = runtimeDetailObj.DataRegionDef.ObjectType;
					text = runtimeDetailObj.DataRegionDef.Name;
				}
				this.m_processingContext.ErrorContext.Register(ProcessingErrorCode.rsCannotCompareSpatialType, Severity.Error, objectType, text, type, Array.Empty<string>());
				return this.m_processingContext.ErrorContext.Messages;
			}

			// Token: 0x060088F5 RID: 35061 RVA: 0x00225868 File Offset: 0x00223A68
			internal override void NextRow()
			{
				bool flag = true;
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = null;
				if (this.m_hierarchyRoot is ReportProcessing.RuntimeGroupRootObj)
				{
					runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
					if (ReportProcessing.ProcessingStages.SortAndFilter == runtimeGroupRootObj.ProcessingStage)
					{
						flag = false;
					}
				}
				if (this.m_hierarchyObjs != null)
				{
					if (flag)
					{
						Global.Tracer.Assert(this.m_hierarchyObjs[0] != null, "(null != m_hierarchyObjs[0])");
						this.m_hierarchyObjs[0].NextRow();
						return;
					}
					if (runtimeGroupRootObj != null)
					{
						Global.Tracer.Assert(runtimeGroupRootObj.LastChild != null, "(null != groupRoot.LastChild)");
						this.m_hierarchyObjs.Add(runtimeGroupRootObj.LastChild);
						return;
					}
				}
				else if (this.m_grouping != null)
				{
					Microsoft.ReportingServices.ReportProcessing.ObjectType objectType;
					string text;
					string text2;
					if (runtimeGroupRootObj != null)
					{
						objectType = runtimeGroupRootObj.HierarchyDef.DataRegionDef.ObjectType;
						text = runtimeGroupRootObj.HierarchyDef.DataRegionDef.Name;
						text2 = "GroupExpression";
					}
					else
					{
						Global.Tracer.Assert(this.m_hierarchyRoot is ReportProcessing.RuntimeDetailObj, "(m_hierarchyRoot is RuntimeDetailObj)");
						ReportProcessing.RuntimeDetailObj runtimeDetailObj = (ReportProcessing.RuntimeDetailObj)this.m_hierarchyRoot;
						objectType = runtimeDetailObj.DataRegionDef.ObjectType;
						text = runtimeDetailObj.DataRegionDef.Name;
						text2 = "SortExpression";
					}
					object obj = this.m_processingContext.ReportRuntime.EvaluateRuntimeExpression(this.m_expression, objectType, text, text2);
					if (runtimeGroupRootObj != null && flag)
					{
						Grouping grouping = runtimeGroupRootObj.HierarchyDef.Grouping;
						if (runtimeGroupRootObj.SaveGroupExprValues)
						{
							grouping.CurrentGroupExpressionValues.Add(obj);
						}
						this.MatchSortFilterScope(runtimeGroupRootObj, grouping, obj, this.m_expression.ExpressionIndex);
					}
					this.m_grouping.NextRow(obj);
				}
			}

			// Token: 0x060088F6 RID: 35062 RVA: 0x002259F4 File Offset: 0x00223BF4
			internal override bool SortAndFilter()
			{
				if (this.m_grouping != null)
				{
					this.m_grouping.Traverse(ReportProcessing.ProcessingStages.SortAndFilter, true);
				}
				if (this.m_hierarchyObjs != null)
				{
					for (int i = 0; i < this.m_hierarchyObjs.Count; i++)
					{
						this.m_hierarchyObjs[i].SortAndFilter();
					}
				}
				return true;
			}

			// Token: 0x060088F7 RID: 35063 RVA: 0x00225A48 File Offset: 0x00223C48
			internal virtual void CalculateRunningValues()
			{
				if (this.m_grouping != null)
				{
					this.m_grouping.Traverse(ReportProcessing.ProcessingStages.RunningValues, this.m_expression.Direction);
				}
				if (this.m_hierarchyObjs != null)
				{
					bool flag = true;
					for (int i = 0; i < this.m_hierarchyObjs.Count; i++)
					{
						ReportProcessing.RuntimeHierarchyObj runtimeHierarchyObj = this.m_hierarchyObjs[i];
						if (!flag || runtimeHierarchyObj is ReportProcessing.RuntimeGroupLeafObj)
						{
							((ReportProcessing.RuntimeGroupLeafObj)runtimeHierarchyObj).TraverseAllLeafNodes(ReportProcessing.ProcessingStages.RunningValues);
							flag = false;
						}
						else
						{
							((ReportProcessing.RuntimeDetailObj)runtimeHierarchyObj).ReadRows(ReportProcessing.DataActions.PostSortAggregates);
						}
					}
				}
			}

			// Token: 0x060088F8 RID: 35064 RVA: 0x00225AC8 File Offset: 0x00223CC8
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060088F9 RID: 35065 RVA: 0x00225AD5 File Offset: 0x00223CD5
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060088FA RID: 35066 RVA: 0x00225AE4 File Offset: 0x00223CE4
			internal void CreateInstances()
			{
				if (this.m_grouping != null)
				{
					this.m_grouping.Traverse(ReportProcessing.ProcessingStages.CreatingInstances, this.m_expression.Direction);
				}
				if (this.m_hierarchyObjs != null)
				{
					bool flag = true;
					for (int i = 0; i < this.m_hierarchyObjs.Count; i++)
					{
						ReportProcessing.RuntimeHierarchyObj runtimeHierarchyObj = this.m_hierarchyObjs[i];
						if (!flag || runtimeHierarchyObj is ReportProcessing.RuntimeGroupLeafObj)
						{
							((ReportProcessing.RuntimeGroupLeafObj)runtimeHierarchyObj).TraverseAllLeafNodes(ReportProcessing.ProcessingStages.CreatingInstances);
							flag = false;
						}
						else
						{
							((ReportProcessing.RuntimeDetailObj)runtimeHierarchyObj).CreateInstance();
						}
					}
				}
			}

			// Token: 0x060088FB RID: 35067 RVA: 0x00225B63 File Offset: 0x00223D63
			internal virtual void CreateInstance()
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060088FC RID: 35068 RVA: 0x00225B70 File Offset: 0x00223D70
			internal override void SetupEnvironment()
			{
			}

			// Token: 0x060088FD RID: 35069 RVA: 0x00225B72 File Offset: 0x00223D72
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060088FE RID: 35070 RVA: 0x00225B7F File Offset: 0x00223D7F
			internal override bool InScope(string scope)
			{
				Global.Tracer.Assert(false);
				return false;
			}

			// Token: 0x060088FF RID: 35071 RVA: 0x00225B90 File Offset: 0x00223D90
			protected void MatchSortFilterScope(ReportProcessing.IScope outerScope, Grouping groupDef, object groupExprValue, int groupExprIndex)
			{
				if (this.m_processingContext.RuntimeSortFilterInfo == null || groupDef.SortFilterScopeInfo == null)
				{
					return;
				}
				RuntimeSortFilterEventInfoList runtimeSortFilterInfo = this.m_processingContext.RuntimeSortFilterInfo;
				if (groupDef.SortFilterScopeMatched == null)
				{
					groupDef.SortFilterScopeMatched = new bool[runtimeSortFilterInfo.Count];
				}
				for (int i = 0; i < runtimeSortFilterInfo.Count; i++)
				{
					RuntimeSortFilterEventInfo runtimeSortFilterEventInfo = runtimeSortFilterInfo[i];
					VariantList variantList = groupDef.SortFilterScopeInfo[i];
					if (variantList != null && outerScope.TargetScopeMatched(i, false))
					{
						if (ReportProcessing.CompareTo(variantList[groupExprIndex], groupExprValue, this.m_processingContext.CompareInfo, this.m_processingContext.ClrCompareOptions) == 0)
						{
							groupDef.SortFilterScopeMatched[i] = true;
						}
						else
						{
							groupDef.SortFilterScopeMatched[i] = false;
						}
					}
					else
					{
						groupDef.SortFilterScopeMatched[i] = false;
					}
				}
			}

			// Token: 0x06008900 RID: 35072 RVA: 0x00225C4C File Offset: 0x00223E4C
			protected virtual ReportProcessing.IHierarchyObj CreateHierarchyObj()
			{
				return new ReportProcessing.RuntimeHierarchyObj(this);
			}

			// Token: 0x06008901 RID: 35073 RVA: 0x00225C54 File Offset: 0x00223E54
			protected virtual void ProcessUserSort()
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x06008902 RID: 35074 RVA: 0x00225C61 File Offset: 0x00223E61
			protected virtual void MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x06008903 RID: 35075 RVA: 0x00225C6E File Offset: 0x00223E6E
			protected virtual void AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x040048DA RID: 18650
			protected ReportProcessing.RuntimeGroupingObj m_grouping;

			// Token: 0x040048DB RID: 18651
			protected ReportProcessing.RuntimeExpressionInfo m_expression;

			// Token: 0x040048DC RID: 18652
			protected ReportProcessing.RuntimeHierarchyObj m_hierarchyRoot;

			// Token: 0x040048DD RID: 18653
			protected ReportProcessing.RuntimeHierarchyObjList m_hierarchyObjs;
		}

		// Token: 0x02000C4C RID: 3148
		internal abstract class RuntimeGroupObj : ReportProcessing.RuntimeHierarchyObj
		{
			// Token: 0x06008904 RID: 35076 RVA: 0x00225C7B File Offset: 0x00223E7B
			protected RuntimeGroupObj(ReportProcessing.ProcessingContext processingContext)
				: base(processingContext)
			{
			}

			// Token: 0x17002A77 RID: 10871
			// (get) Token: 0x06008905 RID: 35077 RVA: 0x00225C84 File Offset: 0x00223E84
			// (set) Token: 0x06008906 RID: 35078 RVA: 0x00225C8C File Offset: 0x00223E8C
			internal ReportProcessing.RuntimeGroupLeafObj LastChild
			{
				get
				{
					return this.m_lastChild;
				}
				set
				{
					this.m_lastChild = value;
				}
			}

			// Token: 0x17002A78 RID: 10872
			// (get) Token: 0x06008907 RID: 35079 RVA: 0x00225C95 File Offset: 0x00223E95
			// (set) Token: 0x06008908 RID: 35080 RVA: 0x00225C9D File Offset: 0x00223E9D
			internal ReportProcessing.RuntimeGroupLeafObj FirstChild
			{
				get
				{
					return this.m_firstChild;
				}
				set
				{
					this.m_firstChild = value;
				}
			}

			// Token: 0x17002A79 RID: 10873
			// (get) Token: 0x06008909 RID: 35081 RVA: 0x00225CA6 File Offset: 0x00223EA6
			internal virtual int RecursiveLevel
			{
				get
				{
					return -1;
				}
			}

			// Token: 0x0600890A RID: 35082 RVA: 0x00225CA9 File Offset: 0x00223EA9
			internal void AddChild(ReportProcessing.RuntimeGroupLeafObj child)
			{
				if (this.m_lastChild != null)
				{
					this.m_lastChild.NextLeaf = child;
				}
				else
				{
					this.m_firstChild = child;
				}
				child.PrevLeaf = this.m_lastChild;
				child.NextLeaf = null;
				child.Parent = this;
				this.m_lastChild = child;
			}

			// Token: 0x0600890B RID: 35083 RVA: 0x00225CEC File Offset: 0x00223EEC
			internal void InsertToSortTree(ReportProcessing.RuntimeGroupLeafObj groupLeaf)
			{
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
				Grouping grouping = runtimeGroupRootObj.HierarchyDef.Grouping;
				if (!runtimeGroupRootObj.BuiltinSortOverridden && (ReportProcessing.ProcessingContext.SecondPassOperations.Sorting & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && runtimeGroupRootObj.HierarchyDef.Sorting != null)
				{
					Global.Tracer.Assert(this.m_grouping != null, "(m_grouping != null)");
					runtimeGroupRootObj.LastChild = groupLeaf;
					object obj = this.m_processingContext.ReportRuntime.EvaluateRuntimeExpression(this.m_expression, Microsoft.ReportingServices.ReportProcessing.ObjectType.Grouping, grouping.Name, "Sort");
					this.m_grouping.NextRow(obj);
					return;
				}
				Global.Tracer.Assert(grouping.Filters != null || grouping.HasInnerFilters, "(null != groupingDef.Filters || groupingDef.HasInnerFilters)");
				this.AddChild(groupLeaf);
			}

			// Token: 0x040048DE RID: 18654
			protected ReportProcessing.RuntimeGroupLeafObj m_lastChild;

			// Token: 0x040048DF RID: 18655
			protected ReportProcessing.RuntimeGroupLeafObj m_firstChild;
		}

		// Token: 0x02000C4D RID: 3149
		internal abstract class RuntimeGroupRootObj : ReportProcessing.RuntimeGroupObj, ReportProcessing.IFilterOwner
		{
			// Token: 0x0600890C RID: 35084 RVA: 0x00225DAC File Offset: 0x00223FAC
			protected RuntimeGroupRootObj(ReportProcessing.IScope outerScope, ReportHierarchyNode hierarchyDef, ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext)
				: base(processingContext)
			{
				this.m_hierarchyRoot = this;
				this.m_outerScope = outerScope;
				this.m_hierarchyDef = hierarchyDef;
				Grouping grouping = hierarchyDef.Grouping;
				Global.Tracer.Assert(grouping != null, "(null != groupDef)");
				this.m_expression = new ReportProcessing.RuntimeExpressionInfo(grouping.GroupExpressions, grouping.ExprHost, grouping.SortDirections, 0);
				if (this.m_processingContext.RuntimeSortFilterInfo != null && grouping.IsSortFilterExpressionScope != null)
				{
					int count = this.m_processingContext.RuntimeSortFilterInfo.Count;
					for (int i = 0; i < count; i++)
					{
						RuntimeSortFilterEventInfo runtimeSortFilterEventInfo = this.m_processingContext.RuntimeSortFilterInfo[i];
						if ((runtimeSortFilterEventInfo.EventSource.ContainingScopes == null || runtimeSortFilterEventInfo.EventSource.ContainingScopes.Count == 0 || runtimeSortFilterEventInfo.EventSourceScope != null) && grouping.IsSortFilterExpressionScope[i] && this.m_processingContext.UserSortFilterContext.InProcessUserSortPhase(i) && this.TargetScopeMatched(i, false))
						{
							if (this.m_builtinSortOverridden == null)
							{
								this.m_builtinSortOverridden = new bool[count];
							}
							this.m_builtinSortOverridden[i] = true;
						}
					}
				}
				if (grouping.GroupAndSort && !this.BuiltinSortOverridden)
				{
					this.m_groupingType = ReportProcessing.RuntimeGroupingObj.GroupingTypes.Sort;
				}
				else
				{
					this.m_groupingType = ReportProcessing.RuntimeGroupingObj.GroupingTypes.Hash;
				}
				this.m_grouping = new ReportProcessing.RuntimeGroupingObj(this, this.m_groupingType);
				if (grouping.Filters == null)
				{
					this.m_dataAction = dataAction;
					this.m_outerDataAction = dataAction;
				}
				if (grouping.RecursiveAggregates != null)
				{
					this.m_dataAction |= ReportProcessing.DataActions.RecursiveAggregates;
				}
				if (grouping.PostSortAggregates != null)
				{
					this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
				}
				if (grouping.Parent != null)
				{
					this.m_parentExpression = new ReportProcessing.RuntimeExpressionInfo(grouping.Parent, grouping.ParentExprHost, null, 0);
				}
				this.m_saveGroupExprValues = grouping.SaveGroupExprValues;
				if (this.m_hierarchyDef.Grouping.NeedScopeInfoForSortFilterExpression != null && this.m_processingContext.RuntimeSortFilterInfo != null)
				{
					for (int j = 0; j < this.m_processingContext.RuntimeSortFilterInfo.Count; j++)
					{
						if (this.m_hierarchyDef.Grouping.NeedScopeInfoForSortFilterExpression[j] && this.m_outerScope.TargetScopeMatched(j, false))
						{
							this.m_saveGroupExprValues = true;
							return;
						}
					}
				}
			}

			// Token: 0x17002A7A RID: 10874
			// (get) Token: 0x0600890D RID: 35085 RVA: 0x00225FDC File Offset: 0x002241DC
			internal ReportHierarchyNode HierarchyDef
			{
				get
				{
					return this.m_hierarchyDef;
				}
			}

			// Token: 0x17002A7B RID: 10875
			// (get) Token: 0x0600890E RID: 35086 RVA: 0x00225FE4 File Offset: 0x002241E4
			internal ExpressionInfoList GroupExpressions
			{
				get
				{
					return this.m_hierarchyDef.Grouping.GroupExpressions;
				}
			}

			// Token: 0x17002A7C RID: 10876
			// (get) Token: 0x0600890F RID: 35087 RVA: 0x00225FF6 File Offset: 0x002241F6
			internal GroupingExprHost GroupExpressionHost
			{
				get
				{
					return this.m_hierarchyDef.Grouping.ExprHost;
				}
			}

			// Token: 0x17002A7D RID: 10877
			// (get) Token: 0x06008910 RID: 35088 RVA: 0x00226008 File Offset: 0x00224208
			internal ExpressionInfoList SortExpressions
			{
				get
				{
					return this.m_hierarchyDef.Sorting.SortExpressions;
				}
			}

			// Token: 0x17002A7E RID: 10878
			// (get) Token: 0x06008911 RID: 35089 RVA: 0x0022601A File Offset: 0x0022421A
			internal SortingExprHost SortExpressionHost
			{
				get
				{
					return this.m_hierarchyDef.Sorting.ExprHost;
				}
			}

			// Token: 0x17002A7F RID: 10879
			// (get) Token: 0x06008912 RID: 35090 RVA: 0x0022602C File Offset: 0x0022422C
			internal BoolList GroupDirections
			{
				get
				{
					return this.m_hierarchyDef.Grouping.SortDirections;
				}
			}

			// Token: 0x17002A80 RID: 10880
			// (get) Token: 0x06008913 RID: 35091 RVA: 0x0022603E File Offset: 0x0022423E
			internal BoolList SortDirections
			{
				get
				{
					return this.m_hierarchyDef.Sorting.SortDirections;
				}
			}

			// Token: 0x17002A81 RID: 10881
			// (get) Token: 0x06008914 RID: 35092 RVA: 0x00226050 File Offset: 0x00224250
			internal ReportProcessing.RuntimeExpressionInfo Expression
			{
				get
				{
					return this.m_expression;
				}
			}

			// Token: 0x17002A82 RID: 10882
			// (get) Token: 0x06008915 RID: 35093 RVA: 0x00226058 File Offset: 0x00224258
			internal AggregatesImpl ScopedRunningValues
			{
				get
				{
					return this.m_scopedRunningValues;
				}
			}

			// Token: 0x17002A83 RID: 10883
			// (get) Token: 0x06008916 RID: 35094 RVA: 0x00226060 File Offset: 0x00224260
			internal AggregatesImpl GlobalRunningValueCollection
			{
				get
				{
					return this.m_globalRunningValueCollection;
				}
			}

			// Token: 0x17002A84 RID: 10884
			// (get) Token: 0x06008917 RID: 35095 RVA: 0x00226068 File Offset: 0x00224268
			internal ReportProcessing.RuntimeGroupRootObjList GroupCollection
			{
				get
				{
					return this.m_groupCollection;
				}
			}

			// Token: 0x17002A85 RID: 10885
			// (get) Token: 0x06008918 RID: 35096 RVA: 0x00226070 File Offset: 0x00224270
			internal ReportProcessing.DataActions DataAction
			{
				get
				{
					return this.m_dataAction;
				}
			}

			// Token: 0x17002A86 RID: 10886
			// (get) Token: 0x06008919 RID: 35097 RVA: 0x00226078 File Offset: 0x00224278
			// (set) Token: 0x0600891A RID: 35098 RVA: 0x00226080 File Offset: 0x00224280
			internal ReportProcessing.ProcessingStages ProcessingStage
			{
				get
				{
					return this.m_processingStage;
				}
				set
				{
					this.m_processingStage = value;
				}
			}

			// Token: 0x17002A87 RID: 10887
			// (get) Token: 0x0600891B RID: 35099 RVA: 0x00226089 File Offset: 0x00224289
			internal ReportItemInstance ReportItemInstance
			{
				get
				{
					return this.m_reportItemInstance;
				}
			}

			// Token: 0x17002A88 RID: 10888
			// (get) Token: 0x0600891C RID: 35100 RVA: 0x00226091 File Offset: 0x00224291
			internal IList InstanceList
			{
				get
				{
					return this.m_instanceList;
				}
			}

			// Token: 0x17002A89 RID: 10889
			// (get) Token: 0x0600891D RID: 35101 RVA: 0x00226099 File Offset: 0x00224299
			internal RenderingPagesRangesList PagesList
			{
				get
				{
					return this.m_pagesList;
				}
			}

			// Token: 0x17002A8A RID: 10890
			// (get) Token: 0x0600891E RID: 35102 RVA: 0x002260A1 File Offset: 0x002242A1
			internal ReportProcessing.RuntimeGroupingObj.GroupingTypes GroupingType
			{
				get
				{
					return this.m_groupingType;
				}
			}

			// Token: 0x17002A8B RID: 10891
			// (get) Token: 0x0600891F RID: 35103 RVA: 0x002260A9 File Offset: 0x002242A9
			internal Filters GroupFilters
			{
				get
				{
					return this.m_groupFilters;
				}
			}

			// Token: 0x17002A8C RID: 10892
			// (get) Token: 0x06008920 RID: 35104 RVA: 0x002260B1 File Offset: 0x002242B1
			internal bool HasParent
			{
				get
				{
					return this.m_parentExpression != null;
				}
			}

			// Token: 0x17002A8D RID: 10893
			// (get) Token: 0x06008921 RID: 35105 RVA: 0x002260BC File Offset: 0x002242BC
			protected override ReportProcessing.IScope OuterScope
			{
				get
				{
					return this.m_outerScope;
				}
			}

			// Token: 0x17002A8E RID: 10894
			// (get) Token: 0x06008922 RID: 35106 RVA: 0x002260C4 File Offset: 0x002242C4
			internal bool SaveGroupExprValues
			{
				get
				{
					return this.m_saveGroupExprValues;
				}
			}

			// Token: 0x17002A8F RID: 10895
			// (get) Token: 0x06008923 RID: 35107 RVA: 0x002260CC File Offset: 0x002242CC
			protected override int[] SortFilterExpressionScopeInfoIndices
			{
				get
				{
					if (this.m_sortFilterExpressionScopeInfoIndices == null)
					{
						this.m_sortFilterExpressionScopeInfoIndices = new int[this.m_processingContext.RuntimeSortFilterInfo.Count];
						for (int i = 0; i < this.m_processingContext.RuntimeSortFilterInfo.Count; i++)
						{
							this.m_sortFilterExpressionScopeInfoIndices[i] = -1;
						}
					}
					return this.m_sortFilterExpressionScopeInfoIndices;
				}
			}

			// Token: 0x17002A90 RID: 10896
			// (get) Token: 0x06008924 RID: 35108 RVA: 0x00226128 File Offset: 0x00224328
			internal bool BuiltinSortOverridden
			{
				get
				{
					if (this.m_processingContext.RuntimeSortFilterInfo != null && this.m_builtinSortOverridden != null)
					{
						for (int i = 0; i < this.m_processingContext.RuntimeSortFilterInfo.Count; i++)
						{
							if (this.m_processingContext.UserSortFilterContext.InProcessUserSortPhase(i) && this.m_builtinSortOverridden[i])
							{
								return true;
							}
						}
					}
					return false;
				}
			}

			// Token: 0x06008925 RID: 35109 RVA: 0x00226185 File Offset: 0x00224385
			internal override void GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				if (this != targetScopeObj)
				{
					this.m_outerScope.GetScopeValues(targetScopeObj, scopeValues, ref index);
				}
			}

			// Token: 0x06008926 RID: 35110 RVA: 0x00226199 File Offset: 0x00224399
			internal override bool TargetScopeMatched(int index, bool detailSort)
			{
				return this.m_outerScope.TargetScopeMatched(index, detailSort);
			}

			// Token: 0x06008927 RID: 35111 RVA: 0x002261A8 File Offset: 0x002243A8
			internal override void NextRow()
			{
				if (this.ProcessThisRow())
				{
					Global.Tracer.Assert(this.m_grouping != null, "(null != m_grouping)");
					object obj = this.EvaluateGroupExpression(this.m_expression, "Group");
					Grouping grouping = this.m_hierarchyDef.Grouping;
					if (this.m_saveGroupExprValues)
					{
						grouping.CurrentGroupExpressionValues = new VariantList();
						grouping.CurrentGroupExpressionValues.Add(obj);
					}
					base.MatchSortFilterScope(this.m_outerScope, grouping, obj, 0);
					object obj2 = null;
					bool flag = this.m_parentExpression != null;
					if (flag)
					{
						obj2 = this.EvaluateGroupExpression(this.m_parentExpression, "Parent");
					}
					this.m_grouping.NextRow(obj, flag, obj2);
				}
			}

			// Token: 0x06008928 RID: 35112 RVA: 0x00226254 File Offset: 0x00224454
			protected object EvaluateGroupExpression(ReportProcessing.RuntimeExpressionInfo expression, string propertyName)
			{
				Global.Tracer.Assert(this.m_hierarchyDef.Grouping != null, "(null != m_hierarchyDef.Grouping)");
				return this.m_processingContext.ReportRuntime.EvaluateRuntimeExpression(expression, Microsoft.ReportingServices.ReportProcessing.ObjectType.Grouping, this.m_hierarchyDef.Grouping.Name, propertyName);
			}

			// Token: 0x06008929 RID: 35113 RVA: 0x002262A4 File Offset: 0x002244A4
			protected bool ProcessThisRow()
			{
				FieldsImpl fieldsImpl = this.m_processingContext.ReportObjectModel.FieldsImpl;
				if (fieldsImpl.IsAggregateRow && 0 > fieldsImpl.AggregationFieldCount)
				{
					return false;
				}
				int[] groupExpressionFieldIndices = this.m_hierarchyDef.Grouping.GetGroupExpressionFieldIndices();
				if (groupExpressionFieldIndices == null)
				{
					fieldsImpl.ValidAggregateRow = false;
				}
				else
				{
					foreach (int num in groupExpressionFieldIndices)
					{
						if (-1 > num || (0 <= num && !fieldsImpl[num].IsAggregationField))
						{
							fieldsImpl.ValidAggregateRow = false;
						}
					}
				}
				return !fieldsImpl.IsAggregateRow || fieldsImpl.ValidAggregateRow;
			}

			// Token: 0x0600892A RID: 35114 RVA: 0x00226334 File Offset: 0x00224534
			internal void AddChildWithNoParent(ReportProcessing.RuntimeGroupLeafObj child)
			{
				if (ReportProcessing.RuntimeGroupingObj.GroupingTypes.Sort == this.m_groupingType)
				{
					child.Parent = this;
					return;
				}
				base.AddChild(child);
			}

			// Token: 0x0600892B RID: 35115 RVA: 0x00226350 File Offset: 0x00224550
			internal override bool SortAndFilter()
			{
				ReportProcessing.RuntimeGroupingObj grouping = this.m_grouping;
				bool direction = this.m_expression.Direction;
				bool flag = true;
				bool flag2 = !this.BuiltinSortOverridden && (ReportProcessing.ProcessingContext.SecondPassOperations.Sorting & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && this.m_hierarchyDef.Sorting != null;
				bool flag3 = (ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && (this.m_hierarchyDef.Grouping.Filters != null || this.m_hierarchyDef.Grouping.HasInnerFilters);
				if (flag2)
				{
					this.m_expression = new ReportProcessing.RuntimeExpressionInfo(this.m_hierarchyDef.Sorting.SortExpressions, this.m_hierarchyDef.Sorting.ExprHost, this.m_hierarchyDef.Sorting.SortDirections, 0);
					this.m_groupingType = ReportProcessing.RuntimeGroupingObj.GroupingTypes.Sort;
					this.m_grouping = new ReportProcessing.RuntimeGroupingObj(this, this.m_groupingType);
				}
				else if (flag3)
				{
					this.m_groupingType = ReportProcessing.RuntimeGroupingObj.GroupingTypes.None;
					this.m_grouping = new ReportProcessing.RuntimeGroupingObj(this, this.m_groupingType);
				}
				if (flag3)
				{
					this.m_groupFilters = new Filters(Filters.FilterTypes.GroupFilter, this, this.m_hierarchyDef.Grouping.Filters, Microsoft.ReportingServices.ReportProcessing.ObjectType.Grouping, this.m_hierarchyDef.Grouping.Name, this.m_processingContext);
				}
				this.m_processingStage = ReportProcessing.ProcessingStages.SortAndFilter;
				this.m_lastChild = null;
				grouping.Traverse(ReportProcessing.ProcessingStages.SortAndFilter, direction);
				if (flag3)
				{
					this.m_groupFilters.FinishReadingRows();
					if (!flag2 && this.m_lastChild == null)
					{
						this.m_firstChild = null;
						flag = false;
					}
				}
				return flag;
			}

			// Token: 0x0600892C RID: 35116 RVA: 0x002264B8 File Offset: 0x002246B8
			void ReportProcessing.IFilterOwner.PostFilterNextRow()
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x0600892D RID: 35117 RVA: 0x002264C5 File Offset: 0x002246C5
			internal virtual void AddScopedRunningValue(DataAggregateObj runningValueObj, bool escalate)
			{
				if (this.m_scopedRunningValues == null)
				{
					this.m_scopedRunningValues = new AggregatesImpl(this.m_processingContext.ReportRuntime);
				}
				if (this.m_scopedRunningValues.GetAggregateObj(runningValueObj.Name) == null)
				{
					this.m_scopedRunningValues.Add(runningValueObj);
				}
			}

			// Token: 0x0600892E RID: 35118 RVA: 0x00226504 File Offset: 0x00224704
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				this.SetupRunningValues(globalRVCol, groupCol);
			}

			// Token: 0x0600892F RID: 35119 RVA: 0x0022650E File Offset: 0x0022470E
			protected void SetupRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol)
			{
				this.m_globalRunningValueCollection = globalRVCol;
				this.m_groupCollection = groupCol;
				if (this.m_hierarchyDef.Grouping.Name != null)
				{
					groupCol[this.m_hierarchyDef.Grouping.Name] = this;
				}
			}

			// Token: 0x06008930 RID: 35120 RVA: 0x00226547 File Offset: 0x00224747
			protected void AddRunningValues(RunningValueInfoList runningValues)
			{
				this.AddRunningValues(runningValues, ref this.m_runningValuesInGroup, this.m_globalRunningValueCollection, this.m_groupCollection);
			}

			// Token: 0x06008931 RID: 35121 RVA: 0x00226564 File Offset: 0x00224764
			protected void AddRunningValues(RunningValueInfoList runningValues, ref DataAggregateObjList runningValuesInGroup, AggregatesImpl globalRunningValueCollection, ReportProcessing.RuntimeGroupRootObjList groupCollection)
			{
				if (runningValues == null || 0 >= runningValues.Count)
				{
					return;
				}
				if (runningValuesInGroup == null)
				{
					runningValuesInGroup = new DataAggregateObjList();
				}
				for (int i = 0; i < runningValues.Count; i++)
				{
					RunningValueInfo runningValueInfo = runningValues[i];
					DataAggregateObj dataAggregateObj = globalRunningValueCollection.GetAggregateObj(runningValueInfo.Name);
					if (dataAggregateObj == null)
					{
						dataAggregateObj = new DataAggregateObj(runningValueInfo, this.m_processingContext);
						globalRunningValueCollection.Add(dataAggregateObj);
					}
					if (runningValueInfo.Scope != null)
					{
						ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = groupCollection[runningValueInfo.Scope];
						if (runtimeGroupRootObj != null)
						{
							runtimeGroupRootObj.AddScopedRunningValue(dataAggregateObj, false);
						}
						else if (this.m_processingContext.PivotEscalateScope())
						{
							this.AddScopedRunningValue(dataAggregateObj, true);
						}
					}
					runningValuesInGroup.Add(dataAggregateObj);
				}
			}

			// Token: 0x06008932 RID: 35122 RVA: 0x00226608 File Offset: 0x00224808
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction && this.m_runningValuesInGroup != null)
				{
					for (int i = 0; i < this.m_runningValuesInGroup.Count; i++)
					{
						this.m_runningValuesInGroup[i].Update();
					}
				}
				if (this.m_outerScope != null && (dataAction & this.m_outerDataAction) != ReportProcessing.DataActions.None)
				{
					this.m_outerScope.ReadRow(dataAction);
				}
			}

			// Token: 0x06008933 RID: 35123 RVA: 0x00226668 File Offset: 0x00224868
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
				this.m_reportItemInstance = riInstance;
				this.m_instanceList = instanceList;
				this.m_pagesList = pagesList;
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType && this.m_parentExpression != null)
				{
					this.m_processingContext.EnterChildGroupings();
				}
				this.m_grouping.Traverse(ReportProcessing.ProcessingStages.CreatingInstances, this.m_expression.Direction);
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType && this.m_parentExpression != null)
				{
					this.m_processingContext.ExitChildGroupings();
				}
			}

			// Token: 0x040048E0 RID: 18656
			protected ReportHierarchyNode m_hierarchyDef;

			// Token: 0x040048E1 RID: 18657
			protected ReportProcessing.IScope m_outerScope;

			// Token: 0x040048E2 RID: 18658
			protected ReportProcessing.ProcessingStages m_processingStage = ReportProcessing.ProcessingStages.Grouping;

			// Token: 0x040048E3 RID: 18659
			protected AggregatesImpl m_scopedRunningValues;

			// Token: 0x040048E4 RID: 18660
			protected DataAggregateObjList m_runningValuesInGroup;

			// Token: 0x040048E5 RID: 18661
			protected AggregatesImpl m_globalRunningValueCollection;

			// Token: 0x040048E6 RID: 18662
			protected ReportProcessing.RuntimeGroupRootObjList m_groupCollection;

			// Token: 0x040048E7 RID: 18663
			protected ReportProcessing.DataActions m_dataAction;

			// Token: 0x040048E8 RID: 18664
			protected ReportProcessing.DataActions m_outerDataAction;

			// Token: 0x040048E9 RID: 18665
			protected ReportItemInstance m_reportItemInstance;

			// Token: 0x040048EA RID: 18666
			protected IList m_instanceList;

			// Token: 0x040048EB RID: 18667
			protected ReportProcessing.RuntimeGroupingObj.GroupingTypes m_groupingType;

			// Token: 0x040048EC RID: 18668
			protected Filters m_groupFilters;

			// Token: 0x040048ED RID: 18669
			protected ReportProcessing.RuntimeExpressionInfo m_parentExpression;

			// Token: 0x040048EE RID: 18670
			protected RenderingPagesRangesList m_pagesList;

			// Token: 0x040048EF RID: 18671
			protected bool m_saveGroupExprValues;

			// Token: 0x040048F0 RID: 18672
			protected int[] m_sortFilterExpressionScopeInfoIndices;

			// Token: 0x040048F1 RID: 18673
			private bool[] m_builtinSortOverridden;
		}

		// Token: 0x02000C4E RID: 3150
		internal abstract class RuntimeGroupLeafObj : ReportProcessing.RuntimeGroupObj
		{
			// Token: 0x06008934 RID: 35124 RVA: 0x002266E4 File Offset: 0x002248E4
			protected RuntimeGroupLeafObj(ReportProcessing.RuntimeGroupRootObj groupRoot)
				: base(groupRoot.ProcessingContext)
			{
				ReportHierarchyNode hierarchyDef = groupRoot.HierarchyDef;
				this.m_hierarchyRoot = groupRoot;
				Grouping grouping = hierarchyDef.Grouping;
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, grouping.Aggregates, ref this.m_nonCustomAggregates, ref this.m_customAggregates);
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, grouping.RecursiveAggregates, ref this.m_recursiveAggregates);
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, grouping.PostSortAggregates, ref this.m_postSortAggregates);
				if (groupRoot.SaveGroupExprValues)
				{
					this.m_groupExprValues = grouping.CurrentGroupExpressionValues;
				}
			}

			// Token: 0x17002A91 RID: 10897
			// (set) Token: 0x06008935 RID: 35125 RVA: 0x0022676F File Offset: 0x0022496F
			internal ReportProcessing.RuntimeGroupLeafObj NextLeaf
			{
				set
				{
					this.m_nextLeaf = value;
				}
			}

			// Token: 0x17002A92 RID: 10898
			// (set) Token: 0x06008936 RID: 35126 RVA: 0x00226778 File Offset: 0x00224978
			internal ReportProcessing.RuntimeGroupLeafObj PrevLeaf
			{
				set
				{
					this.m_prevLeaf = value;
				}
			}

			// Token: 0x17002A93 RID: 10899
			// (get) Token: 0x06008937 RID: 35127 RVA: 0x00226781 File Offset: 0x00224981
			// (set) Token: 0x06008938 RID: 35128 RVA: 0x00226789 File Offset: 0x00224989
			internal ReportProcessing.RuntimeGroupObj Parent
			{
				get
				{
					return this.m_parent;
				}
				set
				{
					this.m_parent = value;
				}
			}

			// Token: 0x17002A94 RID: 10900
			// (get) Token: 0x06008939 RID: 35129 RVA: 0x00226792 File Offset: 0x00224992
			protected override ReportProcessing.IScope OuterScope
			{
				get
				{
					return this.m_hierarchyRoot;
				}
			}

			// Token: 0x17002A95 RID: 10901
			// (get) Token: 0x0600893A RID: 35130 RVA: 0x0022679A File Offset: 0x0022499A
			protected override string ScopeName
			{
				get
				{
					return ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HierarchyDef.Grouping.Name;
				}
			}

			// Token: 0x17002A96 RID: 10902
			// (get) Token: 0x0600893B RID: 35131 RVA: 0x002267B6 File Offset: 0x002249B6
			internal override int RecursiveLevel
			{
				get
				{
					return this.m_recursiveLevel;
				}
			}

			// Token: 0x17002A97 RID: 10903
			// (get) Token: 0x0600893C RID: 35132 RVA: 0x002267BE File Offset: 0x002249BE
			internal Grouping GroupingDef
			{
				get
				{
					return ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HierarchyDef.Grouping;
				}
			}

			// Token: 0x17002A98 RID: 10904
			// (get) Token: 0x0600893D RID: 35133 RVA: 0x002267D5 File Offset: 0x002249D5
			protected override ReportProcessing.IHierarchyObj HierarchyRoot
			{
				get
				{
					if (ReportProcessing.ProcessingStages.UserSortFilter == ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).ProcessingStage)
					{
						return this;
					}
					return this.m_hierarchyRoot;
				}
			}

			// Token: 0x17002A99 RID: 10905
			// (get) Token: 0x0600893E RID: 35134 RVA: 0x002267F2 File Offset: 0x002249F2
			// (set) Token: 0x0600893F RID: 35135 RVA: 0x00226828 File Offset: 0x00224A28
			protected override ReportProcessing.BTreeNode SortTree
			{
				get
				{
					if (ReportProcessing.ProcessingStages.UserSortFilter != ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).ProcessingStage)
					{
						return this.m_grouping.Tree;
					}
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortTree;
					}
					return null;
				}
				set
				{
					if (ReportProcessing.ProcessingStages.UserSortFilter != ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).ProcessingStage)
					{
						this.m_grouping.Tree = value;
						return;
					}
					if (this.m_userSortTargetInfo != null)
					{
						this.m_userSortTargetInfo.SortTree = value;
						return;
					}
					Global.Tracer.Assert(false);
				}
			}

			// Token: 0x17002A9A RID: 10906
			// (get) Token: 0x06008940 RID: 35136 RVA: 0x00226875 File Offset: 0x00224A75
			protected override int ExpressionIndex
			{
				get
				{
					if (ReportProcessing.ProcessingStages.UserSortFilter == ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).ProcessingStage)
					{
						return 0;
					}
					Global.Tracer.Assert(false);
					return -1;
				}
			}

			// Token: 0x17002A9B RID: 10907
			// (get) Token: 0x06008941 RID: 35137 RVA: 0x00226898 File Offset: 0x00224A98
			protected override IntList SortFilterInfoIndices
			{
				get
				{
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortFilterInfoIndices;
					}
					return null;
				}
			}

			// Token: 0x17002A9C RID: 10908
			// (get) Token: 0x06008942 RID: 35138 RVA: 0x002268AF File Offset: 0x00224AAF
			internal override bool TargetForNonDetailSort
			{
				get
				{
					return (this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.TargetForNonDetailSort) || this.m_hierarchyRoot.TargetForNonDetailSort;
				}
			}

			// Token: 0x17002A9D RID: 10909
			// (get) Token: 0x06008943 RID: 35139 RVA: 0x002268D4 File Offset: 0x00224AD4
			protected override int[] SortFilterExpressionScopeInfoIndices
			{
				get
				{
					if (this.m_sortFilterExpressionScopeInfoIndices == null)
					{
						this.m_sortFilterExpressionScopeInfoIndices = new int[this.m_processingContext.RuntimeSortFilterInfo.Count];
						for (int i = 0; i < this.m_processingContext.RuntimeSortFilterInfo.Count; i++)
						{
							this.m_sortFilterExpressionScopeInfoIndices[i] = -1;
						}
					}
					return this.m_sortFilterExpressionScopeInfoIndices;
				}
			}

			// Token: 0x06008944 RID: 35140 RVA: 0x0022692E File Offset: 0x00224B2E
			internal override bool IsTargetForSort(int index, bool detailSort)
			{
				return (this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.IsTargetForSort(index, detailSort)) || this.m_hierarchyRoot.IsTargetForSort(index, detailSort);
			}

			// Token: 0x06008945 RID: 35141 RVA: 0x00226956 File Offset: 0x00224B56
			protected virtual void ConstructRuntimeStructure(ref bool handleMyDataAction, out ReportProcessing.DataActions innerDataAction)
			{
				if (this.m_postSortAggregates != null || (this.m_recursiveAggregates != null && this.m_processingContext.SpecialRecursiveAggregates))
				{
					handleMyDataAction = true;
				}
				if (handleMyDataAction)
				{
					innerDataAction = ReportProcessing.DataActions.None;
					return;
				}
				innerDataAction = ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).DataAction;
			}

			// Token: 0x06008946 RID: 35142 RVA: 0x00226994 File Offset: 0x00224B94
			protected bool HandleSortFilterEvent()
			{
				if (this.m_processingContext.RuntimeSortFilterInfo == null)
				{
					return false;
				}
				Grouping groupingDef = this.GroupingDef;
				int count = this.m_processingContext.RuntimeSortFilterInfo.Count;
				if (groupingDef.SortFilterScopeMatched != null || groupingDef.NeedScopeInfoForSortFilterExpression != null)
				{
					this.m_targetScopeMatched = new bool[count];
					for (int i = 0; i < count; i++)
					{
						if (groupingDef.SortFilterScopeMatched != null && -1 != groupingDef.SortFilterScopeIndex[i])
						{
							if (groupingDef.SortFilterScopeMatched[i])
							{
								this.m_targetScopeMatched[i] = true;
								RuntimeSortFilterEventInfo runtimeSortFilterEventInfo = this.m_processingContext.RuntimeSortFilterInfo[i];
								if (groupingDef.IsSortFilterTarget != null && groupingDef.IsSortFilterTarget[i] && !this.m_hierarchyRoot.TargetForNonDetailSort)
								{
									runtimeSortFilterEventInfo.EventTarget = this;
									if (this.m_userSortTargetInfo == null)
									{
										this.m_userSortTargetInfo = new RuntimeUserSortTargetInfo(this, i, runtimeSortFilterEventInfo);
									}
									else
									{
										this.m_userSortTargetInfo.AddSortInfo(this, i, runtimeSortFilterEventInfo);
									}
								}
								Global.Tracer.Assert(runtimeSortFilterEventInfo.EventSource.ContainingScopes != null, "(null != sortFilterInfo.EventSource.ContainingScopes)");
								if (groupingDef == runtimeSortFilterEventInfo.EventSource.ContainingScopes.LastEntry && !runtimeSortFilterEventInfo.EventSource.IsMatrixCellScope && !this.m_hierarchyRoot.TargetForNonDetailSort)
								{
									Global.Tracer.Assert(runtimeSortFilterEventInfo.EventSourceScope == null, "(null == sortFilterInfo.EventSourceScope)");
									runtimeSortFilterEventInfo.EventSourceScope = this;
								}
							}
							else
							{
								this.m_targetScopeMatched[i] = false;
							}
						}
						else
						{
							this.m_targetScopeMatched[i] = ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).TargetScopeMatched(i, false);
						}
					}
				}
				this.m_processingContext.RegisterSortFilterExpressionScope(this.m_hierarchyRoot, this, groupingDef.IsSortFilterExpressionScope);
				return this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.TargetForNonDetailSort;
			}

			// Token: 0x06008947 RID: 35143 RVA: 0x00226B48 File Offset: 0x00224D48
			internal override void GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				if (this != targetScopeObj)
				{
					this.m_hierarchyRoot.GetScopeValues(targetScopeObj, scopeValues, ref index);
					Global.Tracer.Assert(this.m_groupExprValues != null, "(null != m_groupExprValues)");
					Global.Tracer.Assert(index < scopeValues.Length, "(index < scopeValues.Length)");
					int num = index;
					index = num + 1;
					scopeValues[num] = this.m_groupExprValues;
				}
			}

			// Token: 0x06008948 RID: 35144 RVA: 0x00226BA6 File Offset: 0x00224DA6
			internal override bool TargetScopeMatched(int index, bool detailSort)
			{
				return (detailSort && this.GroupingDef.SortFilterScopeInfo == null) || (this.m_targetScopeMatched != null && this.m_targetScopeMatched[index]);
			}

			// Token: 0x06008949 RID: 35145 RVA: 0x00226BCC File Offset: 0x00224DCC
			internal override void NextRow()
			{
				this.UpdateAggregateInfo();
				this.InternalNextRow();
			}

			// Token: 0x0600894A RID: 35146 RVA: 0x00226BDC File Offset: 0x00224DDC
			protected void UpdateAggregateInfo()
			{
				FieldsImpl fieldsImpl = this.m_processingContext.ReportObjectModel.FieldsImpl;
				if (fieldsImpl.ValidAggregateRow)
				{
					int[] groupExpressionFieldIndices = this.GroupingDef.GetGroupExpressionFieldIndices();
					if (groupExpressionFieldIndices != null)
					{
						foreach (int num in groupExpressionFieldIndices)
						{
							if (num >= 0)
							{
								FieldImpl fieldImpl = fieldsImpl[num];
								if (!fieldImpl.AggregationFieldChecked && fieldImpl.IsAggregationField)
								{
									fieldImpl.AggregationFieldChecked = true;
									FieldsImpl fieldsImpl2 = fieldsImpl;
									int aggregationFieldCount = fieldsImpl2.AggregationFieldCount;
									fieldsImpl2.AggregationFieldCount = aggregationFieldCount - 1;
								}
							}
						}
					}
					if (fieldsImpl.AggregationFieldCount == 0 && this.m_customAggregates != null)
					{
						ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_customAggregates, false);
					}
				}
			}

			// Token: 0x0600894B RID: 35147 RVA: 0x00226C80 File Offset: 0x00224E80
			protected void InternalNextRow()
			{
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
				ReportProcessing.ProcessingStages processingStage = runtimeGroupRootObj.ProcessingStage;
				runtimeGroupRootObj.ProcessingStage = ReportProcessing.ProcessingStages.UserSortFilter;
				ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					base.ScopeNextAggregateRow(this.m_userSortTargetInfo);
				}
				else
				{
					base.ScopeNextNonAggregateRow(this.m_nonCustomAggregates, this.m_dataRows);
				}
				runtimeGroupRootObj.ProcessingStage = processingStage;
			}

			// Token: 0x0600894C RID: 35148 RVA: 0x00226D04 File Offset: 0x00224F04
			protected override void SendToInner()
			{
				((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).ProcessingStage = ReportProcessing.ProcessingStages.Grouping;
			}

			// Token: 0x0600894D RID: 35149 RVA: 0x00226D18 File Offset: 0x00224F18
			internal void RemoveFromParent(ReportProcessing.RuntimeGroupObj parent)
			{
				if (this.m_prevLeaf == null)
				{
					parent.FirstChild = this.m_nextLeaf;
				}
				else
				{
					this.m_prevLeaf.m_nextLeaf = this.m_nextLeaf;
				}
				if (this.m_nextLeaf == null)
				{
					parent.LastChild = this.m_prevLeaf;
					return;
				}
				this.m_nextLeaf.m_prevLeaf = this.m_prevLeaf;
			}

			// Token: 0x0600894E RID: 35150 RVA: 0x00226D74 File Offset: 0x00224F74
			private ReportProcessing.RuntimeGroupLeafObj Traverse(ReportProcessing.ProcessingStages operation)
			{
				ReportProcessing.RuntimeGroupLeafObj nextLeaf = this.m_nextLeaf;
				if (((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HasParent)
				{
					this.m_recursiveLevel = this.m_parent.RecursiveLevel + 1;
				}
				bool flag = this.IsSpecialFilteringPass(operation);
				if (flag)
				{
					this.m_lastChild = null;
					this.ProcessChildren(operation);
				}
				switch (operation)
				{
				case ReportProcessing.ProcessingStages.SortAndFilter:
					this.SortAndFilter();
					break;
				case ReportProcessing.ProcessingStages.RunningValues:
					this.CalculateRunningValues();
					break;
				case ReportProcessing.ProcessingStages.CreatingInstances:
					this.CreateInstance();
					break;
				}
				if (!flag)
				{
					this.ProcessChildren(operation);
				}
				return nextLeaf;
			}

			// Token: 0x0600894F RID: 35151 RVA: 0x00226E00 File Offset: 0x00225000
			internal void TraverseAllLeafNodes(ReportProcessing.ProcessingStages operation)
			{
				for (ReportProcessing.RuntimeGroupLeafObj runtimeGroupLeafObj = this; runtimeGroupLeafObj != null; runtimeGroupLeafObj = runtimeGroupLeafObj.Traverse(operation))
				{
				}
			}

			// Token: 0x06008950 RID: 35152 RVA: 0x00226E1C File Offset: 0x0022501C
			private void ProcessChildren(ReportProcessing.ProcessingStages operation)
			{
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
				if (this.m_firstChild != null || this.m_grouping != null)
				{
					if (ReportProcessing.ProcessingStages.CreatingInstances == operation && Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						this.m_processingContext.EnterChildGroupings();
					}
					if (this.m_firstChild != null)
					{
						this.m_firstChild.TraverseAllLeafNodes(operation);
						if (operation == ReportProcessing.ProcessingStages.SortAndFilter)
						{
							if ((ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && runtimeGroupRootObj.HierarchyDef.Grouping.Filters != null)
							{
								if (this.m_lastChild == null)
								{
									this.m_firstChild = null;
								}
							}
							else if (this.m_grouping != null)
							{
								this.m_firstChild = null;
							}
						}
					}
					else if (this.m_grouping != null)
					{
						this.m_grouping.Traverse(operation, runtimeGroupRootObj.Expression.Direction);
					}
					if (ReportProcessing.ProcessingStages.CreatingInstances == operation && Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						this.m_processingContext.ExitChildGroupings();
					}
				}
				if (ReportProcessing.ProcessingStages.CreatingInstances == operation)
				{
					this.AddToDocumentMap();
				}
			}

			// Token: 0x06008951 RID: 35153 RVA: 0x00226F06 File Offset: 0x00225106
			private bool IsSpecialFilteringPass(ReportProcessing.ProcessingStages operation)
			{
				return ReportProcessing.ProcessingStages.SortAndFilter == operation && this.m_processingContext.SpecialRecursiveAggregates && (ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0;
			}

			// Token: 0x06008952 RID: 35154 RVA: 0x00226F2C File Offset: 0x0022512C
			internal override bool SortAndFilter()
			{
				bool flag = true;
				bool flag2 = false;
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
				Global.Tracer.Assert(runtimeGroupRootObj != null, "(null != groupRoot)");
				if (!runtimeGroupRootObj.BuiltinSortOverridden && (ReportProcessing.ProcessingContext.SecondPassOperations.Sorting & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && runtimeGroupRootObj.HierarchyDef.Sorting != null && this.m_firstChild != null)
				{
					this.m_expression = runtimeGroupRootObj.Expression;
					this.m_grouping = new ReportProcessing.RuntimeGroupingObj(this, ReportProcessing.RuntimeGroupingObj.GroupingTypes.Sort);
				}
				this.m_lastChild = null;
				if ((!runtimeGroupRootObj.BuiltinSortOverridden && runtimeGroupRootObj.HierarchyDef.Sorting != null) || runtimeGroupRootObj.GroupFilters != null || this.m_recursiveAggregates != null)
				{
					if ((ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0)
					{
						if (this.m_processingContext.SpecialRecursiveAggregates && this.m_recursiveAggregates != null)
						{
							Global.Tracer.Assert(this.m_dataRows != null, "(null != m_dataRows)");
							this.ReadRows(false);
						}
						if (runtimeGroupRootObj.GroupFilters != null)
						{
							this.SetupEnvironment();
							flag = runtimeGroupRootObj.GroupFilters.PassFilters(this, out flag2);
						}
					}
					if (flag)
					{
						this.PostFilterNextRow();
					}
					else if (!flag2)
					{
						this.FailFilter();
					}
				}
				return flag;
			}

			// Token: 0x06008953 RID: 35155 RVA: 0x00227048 File Offset: 0x00225248
			internal void FailFilter()
			{
				bool flag = false;
				if (this.IsSpecialFilteringPass(ReportProcessing.ProcessingStages.SortAndFilter))
				{
					flag = true;
				}
				ReportProcessing.RuntimeGroupLeafObj nextLeaf;
				for (ReportProcessing.RuntimeGroupLeafObj runtimeGroupLeafObj = this.m_firstChild; runtimeGroupLeafObj != null; runtimeGroupLeafObj = nextLeaf)
				{
					nextLeaf = runtimeGroupLeafObj.m_nextLeaf;
					runtimeGroupLeafObj.m_parent = this.m_parent;
					if (flag)
					{
						this.m_parent.AddChild(runtimeGroupLeafObj);
					}
				}
			}

			// Token: 0x06008954 RID: 35156 RVA: 0x00227094 File Offset: 0x00225294
			internal void PostFilterNextRow()
			{
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
				if ((ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && this.m_dataRows != null && (this.m_dataAction & ReportProcessing.DataActions.RecursiveAggregates) != ReportProcessing.DataActions.None)
				{
					if (this.m_processingContext.SpecialRecursiveAggregates)
					{
						this.ReadRows(true);
					}
					else
					{
						this.ReadRows(ReportProcessing.DataActions.RecursiveAggregates);
					}
					base.ReleaseDataRows(ReportProcessing.DataActions.RecursiveAggregates, ref this.m_dataAction, ref this.m_dataRows);
				}
				if ((ReportProcessing.ProcessingContext.SecondPassOperations.Sorting & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && !runtimeGroupRootObj.BuiltinSortOverridden && runtimeGroupRootObj.HierarchyDef.Sorting != null)
				{
					this.SetupEnvironment();
				}
				if ((!runtimeGroupRootObj.BuiltinSortOverridden && runtimeGroupRootObj.HierarchyDef.Sorting != null) || runtimeGroupRootObj.GroupFilters != null)
				{
					this.m_nextLeaf = null;
					this.m_parent.InsertToSortTree(this);
				}
			}

			// Token: 0x06008955 RID: 35157 RVA: 0x00227158 File Offset: 0x00225358
			internal override void CalculateRunningValues()
			{
				this.ResetScopedRunningValues();
			}

			// Token: 0x06008956 RID: 35158 RVA: 0x00227160 File Offset: 0x00225360
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				Global.Tracer.Assert(ReportProcessing.DataActions.UserSort != dataAction, "(DataActions.UserSort != dataAction)");
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction)
				{
					if (this.m_postSortAggregates != null)
					{
						ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_postSortAggregates, false);
					}
					Global.Tracer.Assert(this.m_hierarchyRoot != null, "(null != m_hierarchyRoot)");
					((ReportProcessing.IScope)this.m_hierarchyRoot).ReadRow(ReportProcessing.DataActions.PostSortAggregates);
					return;
				}
				Global.Tracer.Assert(ReportProcessing.DataActions.RecursiveAggregates == dataAction, "(DataActions.RecursiveAggregates == dataAction)");
				if (this.m_recursiveAggregates != null)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_recursiveAggregates, false);
				}
				((ReportProcessing.IScope)this.m_parent).ReadRow(ReportProcessing.DataActions.RecursiveAggregates);
			}

			// Token: 0x06008957 RID: 35159 RVA: 0x002271FF File Offset: 0x002253FF
			private void ReadRow(bool sendToParent)
			{
				if (!sendToParent)
				{
					Global.Tracer.Assert(this.m_recursiveAggregates != null, "(null != m_recursiveAggregates)");
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_recursiveAggregates, false);
					return;
				}
				((ReportProcessing.IScope)this.m_parent).ReadRow(ReportProcessing.DataActions.RecursiveAggregates);
			}

			// Token: 0x06008958 RID: 35160 RVA: 0x0022723B File Offset: 0x0022543B
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x06008959 RID: 35161 RVA: 0x00227248 File Offset: 0x00225448
			protected virtual void AddToDocumentMap()
			{
			}

			// Token: 0x0600895A RID: 35162 RVA: 0x0022724C File Offset: 0x0022544C
			internal override void SetupEnvironment()
			{
				base.SetupEnvironment(this.m_nonCustomAggregates, this.m_customAggregates, this.m_firstRow);
				base.SetupAggregates(this.m_recursiveAggregates);
				base.SetupAggregates(this.m_postSortAggregates);
				if (((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HasParent)
				{
					this.GroupingDef.RecursiveLevel = this.m_recursiveLevel;
				}
				if (((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).SaveGroupExprValues)
				{
					this.GroupingDef.CurrentGroupExpressionValues = this.m_groupExprValues;
				}
			}

			// Token: 0x0600895B RID: 35163 RVA: 0x002272D0 File Offset: 0x002254D0
			protected void ReadRows(ReportProcessing.DataActions action)
			{
				for (int i = 0; i < this.m_dataRows.Count; i++)
				{
					FieldImpl[] array = this.m_dataRows[i];
					this.m_processingContext.ReportObjectModel.FieldsImpl.SetFields(array);
					this.ReadRow(action);
				}
			}

			// Token: 0x0600895C RID: 35164 RVA: 0x00227320 File Offset: 0x00225520
			private void ReadRows(bool sendToParent)
			{
				for (int i = 0; i < this.m_dataRows.Count; i++)
				{
					FieldImpl[] array = this.m_dataRows[i];
					this.m_processingContext.ReportObjectModel.FieldsImpl.SetFields(array);
					this.ReadRow(sendToParent);
				}
			}

			// Token: 0x0600895D RID: 35165 RVA: 0x00227370 File Offset: 0x00225570
			protected virtual void ResetScopedRunningValues()
			{
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
				if (runtimeGroupRootObj.ScopedRunningValues != null)
				{
					foreach (object obj in runtimeGroupRootObj.ScopedRunningValues.Objects)
					{
						((DataAggregateObj)obj).Init();
					}
				}
			}

			// Token: 0x0600895E RID: 35166 RVA: 0x002273E0 File Offset: 0x002255E0
			protected void ResetReportItemsWithHideDuplicates()
			{
				ReportItemList reportItemsWithHideDuplicates = ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HierarchyDef.Grouping.ReportItemsWithHideDuplicates;
				if (reportItemsWithHideDuplicates != null)
				{
					for (int i = 0; i < reportItemsWithHideDuplicates.Count; i++)
					{
						Microsoft.ReportingServices.ReportProcessing.TextBox textBox = reportItemsWithHideDuplicates[i] as Microsoft.ReportingServices.ReportProcessing.TextBox;
						Global.Tracer.Assert(textBox != null && textBox.HideDuplicates != null);
						textBox.HasOldResult = false;
					}
				}
			}

			// Token: 0x0600895F RID: 35167 RVA: 0x0022744C File Offset: 0x0022564C
			internal override bool InScope(string scope)
			{
				Grouping grouping = ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HierarchyDef.Grouping;
				if (grouping.ScopeNames == null)
				{
					bool inPivotCell = grouping.InPivotCell;
					bool flag;
					grouping.ScopeNames = base.GetScopeNames(this, scope, ref inPivotCell, out flag);
					grouping.InPivotCell = inPivotCell;
					return flag;
				}
				return grouping.ScopeNames.Contains(scope);
			}

			// Token: 0x06008960 RID: 35168 RVA: 0x002274A8 File Offset: 0x002256A8
			protected override int GetRecursiveLevel(string scope)
			{
				if (scope == null)
				{
					return this.m_recursiveLevel;
				}
				Grouping grouping = ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HierarchyDef.Grouping;
				if (grouping.ScopeNames == null)
				{
					bool inPivotCell = grouping.InPivotCell;
					int num;
					grouping.ScopeNames = base.GetScopeNames(this, scope, ref inPivotCell, out num);
					grouping.InPivotCell = inPivotCell;
					return num;
				}
				Grouping grouping2 = grouping.ScopeNames[scope] as Grouping;
				if (grouping2 != null)
				{
					return grouping2.RecursiveLevel;
				}
				return -1;
			}

			// Token: 0x06008961 RID: 35169 RVA: 0x0022751C File Offset: 0x0022571C
			protected override void ProcessUserSort()
			{
				((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).ProcessingStage = ReportProcessing.ProcessingStages.UserSortFilter;
				this.m_processingContext.ProcessUserSortForTarget(this, ref this.m_dataRows, this.m_userSortTargetInfo.TargetForNonDetailSort);
				if (this.m_userSortTargetInfo.TargetForNonDetailSort)
				{
					this.m_dataAction &= ~ReportProcessing.DataActions.UserSort;
					this.m_userSortTargetInfo.ResetTargetForNonDetailSort();
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
					bool flag = false;
					ReportProcessing.DataActions dataActions;
					this.ConstructRuntimeStructure(ref flag, out dataActions);
					if (!flag)
					{
						Global.Tracer.Assert(dataActions == this.m_dataAction, "(innerDataAction == m_dataAction)");
					}
					if (this.m_dataAction != ReportProcessing.DataActions.None)
					{
						this.m_dataRows = new ReportProcessing.DataRowList();
					}
					base.ScopeFinishSorting(ref this.m_firstRow, this.m_userSortTargetInfo);
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
			}

			// Token: 0x06008962 RID: 35170 RVA: 0x002275EF File Offset: 0x002257EF
			protected override ReportProcessing.IHierarchyObj CreateHierarchyObj()
			{
				if (ReportProcessing.ProcessingStages.UserSortFilter == ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).ProcessingStage)
				{
					return new ReportProcessing.RuntimeSortHierarchyObj(this);
				}
				return base.CreateHierarchyObj();
			}

			// Token: 0x06008963 RID: 35171 RVA: 0x00227611 File Offset: 0x00225811
			protected override void MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.MarkSortInfoProcessed(runtimeSortFilterInfo, this);
				}
			}

			// Token: 0x06008964 RID: 35172 RVA: 0x00227628 File Offset: 0x00225828
			protected override void AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.AddSortInfoIndex(sortInfoIndex, sortInfo);
				}
			}

			// Token: 0x06008965 RID: 35173 RVA: 0x00227640 File Offset: 0x00225840
			protected override void GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
				Grouping grouping = ((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HierarchyDef.Grouping;
				if (grouping.ScopeNames == null)
				{
					bool inPivotCell = grouping.InPivotCell;
					grouping.ScopeNames = base.GetScopeNames(this, ref inPivotCell, pairs);
					grouping.InPivotCell = inPivotCell;
					return;
				}
				foreach (object obj in grouping.ScopeNames.Values)
				{
					ReportProcessing.RuntimeDataRegionObj.AddGroupNameValuePair(this.m_processingContext, obj as Grouping, pairs);
				}
			}

			// Token: 0x040048F2 RID: 18674
			protected DataAggregateObjList m_nonCustomAggregates;

			// Token: 0x040048F3 RID: 18675
			protected DataAggregateObjList m_customAggregates;

			// Token: 0x040048F4 RID: 18676
			protected FieldImpl[] m_firstRow;

			// Token: 0x040048F5 RID: 18677
			protected bool m_firstRowIsAggregate;

			// Token: 0x040048F6 RID: 18678
			protected ReportProcessing.RuntimeGroupLeafObj m_nextLeaf;

			// Token: 0x040048F7 RID: 18679
			protected ReportProcessing.RuntimeGroupLeafObj m_prevLeaf;

			// Token: 0x040048F8 RID: 18680
			protected ReportProcessing.DataRowList m_dataRows;

			// Token: 0x040048F9 RID: 18681
			protected ReportProcessing.RuntimeGroupObj m_parent;

			// Token: 0x040048FA RID: 18682
			protected DataAggregateObjList m_recursiveAggregates;

			// Token: 0x040048FB RID: 18683
			protected DataAggregateObjList m_postSortAggregates;

			// Token: 0x040048FC RID: 18684
			protected int m_recursiveLevel;

			// Token: 0x040048FD RID: 18685
			protected VariantList m_groupExprValues;

			// Token: 0x040048FE RID: 18686
			protected bool[] m_targetScopeMatched;

			// Token: 0x040048FF RID: 18687
			protected ReportProcessing.DataActions m_dataAction;

			// Token: 0x04004900 RID: 18688
			protected RuntimeUserSortTargetInfo m_userSortTargetInfo;

			// Token: 0x04004901 RID: 18689
			protected int[] m_sortFilterExpressionScopeInfoIndices;
		}

		// Token: 0x02000C4F RID: 3151
		internal abstract class RuntimeDetailObj : ReportProcessing.RuntimeHierarchyObj
		{
			// Token: 0x06008966 RID: 35174 RVA: 0x002276BC File Offset: 0x002258BC
			protected RuntimeDetailObj(ReportProcessing.IScope outerScope, Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegionDef, ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext)
				: base(processingContext)
			{
				this.m_hierarchyRoot = this;
				this.m_outerScope = outerScope;
				this.m_dataRegionDef = dataRegionDef;
				this.m_outerDataAction = dataAction;
			}

			// Token: 0x06008967 RID: 35175 RVA: 0x002276E2 File Offset: 0x002258E2
			internal RuntimeDetailObj(ReportProcessing.RuntimeDetailObj detailRoot)
				: base(detailRoot.ProcessingContext)
			{
				this.m_hierarchyRoot = detailRoot;
				this.m_outerScope = detailRoot.m_outerScope;
				this.m_dataRegionDef = detailRoot.m_dataRegionDef;
			}

			// Token: 0x17002A9E RID: 10910
			// (get) Token: 0x06008968 RID: 35176 RVA: 0x0022770F File Offset: 0x0022590F
			internal Microsoft.ReportingServices.ReportProcessing.DataRegion DataRegionDef
			{
				get
				{
					return this.m_dataRegionDef;
				}
			}

			// Token: 0x17002A9F RID: 10911
			// (get) Token: 0x06008969 RID: 35177 RVA: 0x00227717 File Offset: 0x00225917
			internal virtual ExpressionInfoList SortExpressions
			{
				get
				{
					return null;
				}
			}

			// Token: 0x17002AA0 RID: 10912
			// (get) Token: 0x0600896A RID: 35178 RVA: 0x0022771A File Offset: 0x0022591A
			internal virtual SortingExprHost SortExpressionHost
			{
				get
				{
					return null;
				}
			}

			// Token: 0x17002AA1 RID: 10913
			// (get) Token: 0x0600896B RID: 35179 RVA: 0x0022771D File Offset: 0x0022591D
			internal virtual BoolList SortDirections
			{
				get
				{
					return null;
				}
			}

			// Token: 0x17002AA2 RID: 10914
			// (get) Token: 0x0600896C RID: 35180 RVA: 0x00227720 File Offset: 0x00225920
			protected override ReportProcessing.IScope OuterScope
			{
				get
				{
					return this.m_outerScope;
				}
			}

			// Token: 0x17002AA3 RID: 10915
			// (get) Token: 0x0600896D RID: 35181 RVA: 0x00227728 File Offset: 0x00225928
			protected override bool IsDetail
			{
				get
				{
					return true;
				}
			}

			// Token: 0x0600896E RID: 35182 RVA: 0x0022772C File Offset: 0x0022592C
			protected void HandleSortFilterEvent(ref RuntimeUserSortTargetInfo userSortTargetInfo)
			{
				RuntimeSortFilterEventInfoList runtimeSortFilterInfo = this.m_processingContext.RuntimeSortFilterInfo;
				if (runtimeSortFilterInfo == null || this.m_outerScope.TargetForNonDetailSort)
				{
					return;
				}
				for (int i = 0; i < runtimeSortFilterInfo.Count; i++)
				{
					RuntimeSortFilterEventInfo runtimeSortFilterEventInfo = runtimeSortFilterInfo[i];
					if ((runtimeSortFilterEventInfo.EventSource.ContainingScopes == null || runtimeSortFilterEventInfo.EventSource.ContainingScopes.Count == 0 || runtimeSortFilterEventInfo.EventSourceScope != null || runtimeSortFilterEventInfo.EventSource.IsSubReportTopLevelScope) && this.IsTargetForSort(i, true) && runtimeSortFilterEventInfo.EventTarget != this && this.m_outerScope.TargetScopeMatched(i, true))
					{
						if (userSortTargetInfo == null)
						{
							userSortTargetInfo = new RuntimeUserSortTargetInfo(this, i, runtimeSortFilterEventInfo);
						}
						else
						{
							userSortTargetInfo.AddSortInfo(this, i, runtimeSortFilterInfo[i]);
						}
					}
				}
			}

			// Token: 0x0600896F RID: 35183 RVA: 0x002277EB File Offset: 0x002259EB
			private void HandleSortFilterEvent(int rowIndex)
			{
				base.DetailHandleSortFilterEvent(this.m_dataRegionDef, this.m_outerScope, rowIndex);
			}

			// Token: 0x06008970 RID: 35184 RVA: 0x00227800 File Offset: 0x00225A00
			protected void ProcessDetailSort(RuntimeUserSortTargetInfo userSortTargetInfo)
			{
				if (userSortTargetInfo != null && !userSortTargetInfo.TargetForNonDetailSort)
				{
					object sortOrder = this.m_processingContext.RuntimeSortFilterInfo[userSortTargetInfo.SortFilterInfoIndices[0]].GetSortOrder(this.m_processingContext.ReportRuntime);
					userSortTargetInfo.SortTree.NextRow(sortOrder);
				}
			}

			// Token: 0x06008971 RID: 35185 RVA: 0x00227854 File Offset: 0x00225A54
			internal override void NextRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					return;
				}
				if (this.m_grouping != null)
				{
					object obj = this.m_processingContext.ReportRuntime.EvaluateRuntimeExpression(this.m_expression, this.m_dataRegionDef.ObjectType, this.m_dataRegionDef.Name, "Sort");
					this.m_grouping.NextRow(obj);
					return;
				}
				if (this.m_dataRows == null)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
				this.HandleSortFilterEvent(this.m_dataRows.Count);
				ReportProcessing.RuntimeDetailObj.SaveData(this.m_dataRows, this.m_processingContext);
			}

			// Token: 0x06008972 RID: 35186 RVA: 0x002278F5 File Offset: 0x00225AF5
			internal override bool SortAndFilter()
			{
				if ((ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && this.m_dataRows != null && (this.m_outerDataAction & ReportProcessing.DataActions.RecursiveAggregates) != ReportProcessing.DataActions.None)
				{
					this.ReadRows(ReportProcessing.DataActions.RecursiveAggregates);
				}
				return true;
			}

			// Token: 0x06008973 RID: 35187 RVA: 0x00227920 File Offset: 0x00225B20
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_grouping != null)
				{
					this.m_grouping.Traverse(ReportProcessing.ProcessingStages.RunningValues, this.m_expression.Direction);
					this.m_grouping = null;
					return;
				}
				this.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
			}

			// Token: 0x06008974 RID: 35188 RVA: 0x00227950 File Offset: 0x00225B50
			internal void ReadRows(ReportProcessing.DataActions dataAction)
			{
				if (this.m_dataRows != null)
				{
					ReportProcessing.RuntimeDetailObj runtimeDetailObj = (ReportProcessing.RuntimeDetailObj)this.m_hierarchyRoot;
					bool flag = false;
					if (this != this.m_hierarchyRoot)
					{
						flag = true;
						if (runtimeDetailObj.m_dataRows == null)
						{
							runtimeDetailObj.m_dataRows = new ReportProcessing.DataRowList();
						}
						this.UpdateSortFilterInfo(runtimeDetailObj, runtimeDetailObj.m_dataRows.Count);
					}
					for (int i = 0; i < this.m_dataRows.Count; i++)
					{
						FieldImpl[] array = this.m_dataRows[i];
						this.m_processingContext.ReportObjectModel.FieldsImpl.SetFields(array);
						if (flag)
						{
							runtimeDetailObj.m_dataRows.Add(array);
						}
						runtimeDetailObj.ReadRow(dataAction);
					}
				}
			}

			// Token: 0x06008975 RID: 35189 RVA: 0x002279F8 File Offset: 0x00225BF8
			private void UpdateSortFilterInfo(ReportProcessing.RuntimeDetailObj detailRoot, int rootRowCount)
			{
				RuntimeSortFilterEventInfoList runtimeSortFilterInfo = this.m_processingContext.RuntimeSortFilterInfo;
				if (runtimeSortFilterInfo == null || this.m_dataRegionDef.SortFilterSourceDetailScopeInfo == null)
				{
					return;
				}
				for (int i = 0; i < runtimeSortFilterInfo.Count; i++)
				{
					RuntimeSortFilterEventInfo runtimeSortFilterEventInfo = runtimeSortFilterInfo[i];
					if (this == runtimeSortFilterEventInfo.EventSourceScope)
					{
						runtimeSortFilterEventInfo.EventSourceScope = detailRoot;
						runtimeSortFilterEventInfo.EventSourceDetailIndex += rootRowCount;
					}
					if (runtimeSortFilterEventInfo.DetailScopes != null)
					{
						for (int j = 0; j < runtimeSortFilterEventInfo.DetailScopes.Count; j++)
						{
							if (this == runtimeSortFilterEventInfo.DetailScopes[j])
							{
								runtimeSortFilterEventInfo.DetailScopes[j] = detailRoot;
								IntList detailScopeIndices = runtimeSortFilterEventInfo.DetailScopeIndices;
								int num = j;
								detailScopeIndices[num] += rootRowCount;
							}
						}
					}
				}
			}

			// Token: 0x06008976 RID: 35190 RVA: 0x00227AB8 File Offset: 0x00225CB8
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction && this.m_runningValuesInGroup != null && 0 < this.m_runningValuesInGroup.Count)
				{
					DataAggregateObjResult[] array = new DataAggregateObjResult[this.m_runningValuesInGroup.Count];
					for (int i = 0; i < this.m_runningValuesInGroup.Count; i++)
					{
						this.m_runningValuesInGroup[i].Update();
						array[i] = this.m_runningValuesInGroup[i].AggregateResult();
					}
					this.m_rvValueList.Add(array);
				}
				if (this.m_outerScope != null && (this.m_outerDataAction & dataAction) != ReportProcessing.DataActions.None)
				{
					this.m_outerScope.ReadRow(dataAction);
				}
			}

			// Token: 0x06008977 RID: 35191 RVA: 0x00227B5A File Offset: 0x00225D5A
			internal void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList, out int numberOfChildrenOnThisPage)
			{
				this.m_numberOfChildrenOnThisPage = 0;
				this.CreateInstances(riInstance, instanceList, pagesList);
				numberOfChildrenOnThisPage = this.m_numberOfChildrenOnThisPage;
			}

			// Token: 0x06008978 RID: 35192 RVA: 0x00227B75 File Offset: 0x00225D75
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
				this.m_reportItemInstance = riInstance;
				this.m_instanceList = instanceList;
				this.m_pagesList = pagesList;
				if (this.m_grouping != null)
				{
					this.m_grouping.Traverse(ReportProcessing.ProcessingStages.CreatingInstances, this.m_expression.Direction);
					return;
				}
				this.CreateInstance();
			}

			// Token: 0x06008979 RID: 35193 RVA: 0x00227BB2 File Offset: 0x00225DB2
			internal override void CreateInstance()
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x0600897A RID: 35194 RVA: 0x00227BC0 File Offset: 0x00225DC0
			internal static void SaveData(ReportProcessing.DataRowList dataRows, ReportProcessing.ProcessingContext processingContext)
			{
				Global.Tracer.Assert(dataRows != null, "(null != dataRows)");
				FieldImpl[] andSaveFields = processingContext.ReportObjectModel.FieldsImpl.GetAndSaveFields();
				dataRows.Add(andSaveFields);
			}

			// Token: 0x0600897B RID: 35195 RVA: 0x00227BF9 File Offset: 0x00225DF9
			protected void AddRunningValues(RunningValueInfoList runningValues, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				ReportProcessing.RuntimeDetailObj.AddRunningValues(this.m_processingContext, runningValues, ref this.m_runningValuesInGroup, this.m_globalRunningValueCollection, this.m_groupCollection, lastGroup);
			}

			// Token: 0x0600897C RID: 35196 RVA: 0x00227C1C File Offset: 0x00225E1C
			internal static void AddRunningValues(ReportProcessing.ProcessingContext processingContext, RunningValueInfoList runningValues, ref DataAggregateObjList runningValuesInGroup, AggregatesImpl globalRunningValueCollection, ReportProcessing.RuntimeGroupRootObjList groupCollection, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (runningValues == null || 0 >= runningValues.Count)
				{
					return;
				}
				if (runningValuesInGroup == null)
				{
					runningValuesInGroup = new DataAggregateObjList();
				}
				for (int i = 0; i < runningValues.Count; i++)
				{
					RunningValueInfo runningValueInfo = runningValues[i];
					DataAggregateObj dataAggregateObj = globalRunningValueCollection.GetAggregateObj(runningValueInfo.Name);
					if (dataAggregateObj == null)
					{
						dataAggregateObj = new DataAggregateObj(runningValueInfo, processingContext);
						globalRunningValueCollection.Add(dataAggregateObj);
					}
					if (runningValueInfo.Scope != null)
					{
						ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = groupCollection[runningValueInfo.Scope];
						if (runtimeGroupRootObj != null)
						{
							runtimeGroupRootObj.AddScopedRunningValue(dataAggregateObj, false);
						}
						else if (processingContext.PivotEscalateScope() && lastGroup != null)
						{
							lastGroup.AddScopedRunningValue(dataAggregateObj, true);
						}
					}
					runningValuesInGroup.Add(dataAggregateObj);
				}
			}

			// Token: 0x0600897D RID: 35197 RVA: 0x00227CBC File Offset: 0x00225EBC
			protected void SetupEnvironment(int dataRowIndex, RunningValueInfoList runningValueDefs)
			{
				base.SetupFields(this.m_dataRows[dataRowIndex]);
				if (runningValueDefs != null && 0 < runningValueDefs.Count)
				{
					base.SetupRunningValues(runningValueDefs, this.m_rvValueList[dataRowIndex]);
				}
				this.m_processingContext.ReportRuntime.CurrentScope = this;
			}

			// Token: 0x0600897E RID: 35198 RVA: 0x00227D0C File Offset: 0x00225F0C
			protected void SetupEnvironment(int dataRowIndex, ref int startIndex, RunningValueInfoList runningValueDefs, bool rvOnly)
			{
				if (!rvOnly)
				{
					base.SetupFields(this.m_dataRows[dataRowIndex]);
					this.m_processingContext.ReportRuntime.CurrentScope = this;
				}
				if (runningValueDefs != null && 0 < runningValueDefs.Count)
				{
					base.SetupRunningValues(ref startIndex, runningValueDefs, this.m_rvValueList[dataRowIndex]);
				}
			}

			// Token: 0x0600897F RID: 35199 RVA: 0x00227D60 File Offset: 0x00225F60
			internal override bool InScope(string scope)
			{
				Global.Tracer.Assert(this.m_outerScope != null, "(null != m_outerScope)");
				return this.m_outerScope.InScope(scope);
			}

			// Token: 0x06008980 RID: 35200 RVA: 0x00227D86 File Offset: 0x00225F86
			protected override int GetRecursiveLevel(string scope)
			{
				Global.Tracer.Assert(this.m_outerScope != null, "(null != m_outerScope)");
				return this.m_outerScope.RecursiveLevel(scope);
			}

			// Token: 0x06008981 RID: 35201 RVA: 0x00227DAC File Offset: 0x00225FAC
			internal override void GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				base.DetailGetScopeValues(this.m_outerScope, targetScopeObj, scopeValues, ref index);
			}

			// Token: 0x06008982 RID: 35202 RVA: 0x00227DBD File Offset: 0x00225FBD
			internal override bool TargetScopeMatched(int index, bool detailSort)
			{
				return base.DetailTargetScopeMatched(this.m_dataRegionDef, this.m_outerScope, index);
			}

			// Token: 0x06008983 RID: 35203 RVA: 0x00227DD2 File Offset: 0x00225FD2
			protected override void GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
				Global.Tracer.Assert(this.m_outerScope != null, "(null != m_outerScope)");
				this.m_outerScope.GetGroupNameValuePairs(pairs);
			}

			// Token: 0x04004902 RID: 18690
			protected ReportProcessing.IScope m_outerScope;

			// Token: 0x04004903 RID: 18691
			protected Microsoft.ReportingServices.ReportProcessing.DataRegion m_dataRegionDef;

			// Token: 0x04004904 RID: 18692
			protected ReportProcessing.DataRowList m_dataRows;

			// Token: 0x04004905 RID: 18693
			protected DataAggregateObjResultsList m_rvValueList;

			// Token: 0x04004906 RID: 18694
			protected DataAggregateObjList m_runningValuesInGroup;

			// Token: 0x04004907 RID: 18695
			protected AggregatesImpl m_globalRunningValueCollection;

			// Token: 0x04004908 RID: 18696
			protected ReportProcessing.RuntimeGroupRootObjList m_groupCollection;

			// Token: 0x04004909 RID: 18697
			protected ReportProcessing.DataActions m_outerDataAction;

			// Token: 0x0400490A RID: 18698
			protected ReportItemInstance m_reportItemInstance;

			// Token: 0x0400490B RID: 18699
			protected IList m_instanceList;

			// Token: 0x0400490C RID: 18700
			protected RenderingPagesRangesList m_pagesList;

			// Token: 0x0400490D RID: 18701
			protected int m_numberOfChildrenOnThisPage;
		}

		// Token: 0x02000C50 RID: 3152
		internal abstract class RuntimeOnePassDetailObj : ReportProcessing.RuntimeDataRegionObj
		{
			// Token: 0x06008984 RID: 35204 RVA: 0x00227DF8 File Offset: 0x00225FF8
			protected RuntimeOnePassDetailObj(ReportProcessing.IScope outerScope, Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegionDef, ReportProcessing.ProcessingContext processingContext)
				: base(processingContext)
			{
				this.m_outerScope = outerScope;
				this.m_dataRegionDef = dataRegionDef;
				this.m_pagination = new ReportProcessing.Pagination(this.m_processingContext.Pagination.PageHeight);
				this.m_renderingPages = new RenderingPagesRangesList();
				this.m_navigationInfo = new ReportProcessing.NavigationInfo();
				this.m_onePassTextboxes = new ReportProcessing.PageTextboxes();
			}

			// Token: 0x17002AA4 RID: 10916
			// (get) Token: 0x06008985 RID: 35205 RVA: 0x00227E56 File Offset: 0x00226056
			protected override ReportProcessing.IScope OuterScope
			{
				get
				{
					return this.m_outerScope;
				}
			}

			// Token: 0x17002AA5 RID: 10917
			// (get) Token: 0x06008986 RID: 35206 RVA: 0x00227E5E File Offset: 0x0022605E
			internal ReportProcessing.Pagination Pagination
			{
				get
				{
					return this.m_pagination;
				}
			}

			// Token: 0x17002AA6 RID: 10918
			// (get) Token: 0x06008987 RID: 35207 RVA: 0x00227E66 File Offset: 0x00226066
			// (set) Token: 0x06008988 RID: 35208 RVA: 0x00227E6E File Offset: 0x0022606E
			internal int NumberOfContentsOnThisPage
			{
				get
				{
					return this.m_numberOfContentsOnThisPage;
				}
				set
				{
					this.m_numberOfContentsOnThisPage = value;
				}
			}

			// Token: 0x17002AA7 RID: 10919
			// (get) Token: 0x06008989 RID: 35209 RVA: 0x00227E77 File Offset: 0x00226077
			internal RenderingPagesRangesList ChildrenStartAndEndPages
			{
				get
				{
					return this.m_renderingPages;
				}
			}

			// Token: 0x17002AA8 RID: 10920
			// (get) Token: 0x0600898A RID: 35210 RVA: 0x00227E7F File Offset: 0x0022607F
			internal ReportProcessing.NavigationInfo NavigationInfo
			{
				get
				{
					return this.m_navigationInfo;
				}
			}

			// Token: 0x17002AA9 RID: 10921
			// (get) Token: 0x0600898B RID: 35211 RVA: 0x00227E87 File Offset: 0x00226087
			internal ReportProcessing.PageTextboxes OnePassTextboxes
			{
				get
				{
					return this.m_onePassTextboxes;
				}
			}

			// Token: 0x17002AAA RID: 10922
			// (get) Token: 0x0600898C RID: 35212 RVA: 0x00227E8F File Offset: 0x0022608F
			internal Microsoft.ReportingServices.ReportProcessing.DataRegion DataRegionDef
			{
				get
				{
					return this.m_dataRegionDef;
				}
			}

			// Token: 0x0600898D RID: 35213
			internal abstract int GetDetailPage();

			// Token: 0x0600898E RID: 35214 RVA: 0x00227E98 File Offset: 0x00226098
			internal override void NextRow()
			{
				FieldsImpl fieldsImpl = this.m_processingContext.ReportObjectModel.FieldsImpl;
				if (fieldsImpl.IsAggregateRow)
				{
					return;
				}
				if (this.m_runningValues != null)
				{
					for (int i = 0; i < this.m_runningValues.Count; i++)
					{
						this.m_runningValues[i].Update();
					}
				}
				this.m_processingContext.ReportRuntime.CurrentScope = this;
				if (fieldsImpl.AddRowIndex)
				{
					base.DetailHandleSortFilterEvent(this.m_dataRegionDef, this.m_outerScope, fieldsImpl.GetRowIndex());
				}
				this.CreateInstance();
			}

			// Token: 0x0600898F RID: 35215 RVA: 0x00227F25 File Offset: 0x00226125
			internal override bool SortAndFilter()
			{
				return true;
			}

			// Token: 0x06008990 RID: 35216 RVA: 0x00227F28 File Offset: 0x00226128
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
			}

			// Token: 0x06008991 RID: 35217
			protected abstract void CreateInstance();

			// Token: 0x06008992 RID: 35218 RVA: 0x00227F2A File Offset: 0x0022612A
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
			}

			// Token: 0x06008993 RID: 35219 RVA: 0x00227F2C File Offset: 0x0022612C
			protected void AddRunningValues(RunningValueInfoList runningValues)
			{
				if (runningValues != null && 0 < runningValues.Count)
				{
					if (this.m_runningValues == null)
					{
						this.m_runningValues = new DataAggregateObjList();
					}
					for (int i = 0; i < runningValues.Count; i++)
					{
						DataAggregateObj dataAggregateObj = new DataAggregateObj(runningValues[i], this.m_processingContext);
						this.m_runningValues.Add(dataAggregateObj);
						this.m_processingContext.ReportObjectModel.AggregatesImpl.Add(dataAggregateObj);
					}
				}
			}

			// Token: 0x06008994 RID: 35220 RVA: 0x00227F9F File Offset: 0x0022619F
			internal override void SetupEnvironment()
			{
			}

			// Token: 0x06008995 RID: 35221 RVA: 0x00227FA1 File Offset: 0x002261A1
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
			}

			// Token: 0x06008996 RID: 35222 RVA: 0x00227FA3 File Offset: 0x002261A3
			internal override bool InScope(string scope)
			{
				Global.Tracer.Assert(this.m_outerScope != null, "(null != m_outerScope)");
				return this.m_outerScope.InScope(scope);
			}

			// Token: 0x06008997 RID: 35223 RVA: 0x00227FC9 File Offset: 0x002261C9
			internal virtual bool IsVisible(string textboxName)
			{
				return true;
			}

			// Token: 0x06008998 RID: 35224 RVA: 0x00227FCC File Offset: 0x002261CC
			internal void MoveAllToFirstPage()
			{
				int pageCount = this.m_onePassTextboxes.GetPageCount();
				for (int i = 1; i < pageCount; i++)
				{
					Hashtable textboxesOnPage = this.m_onePassTextboxes.GetTextboxesOnPage(i);
					if (textboxesOnPage != null)
					{
						IDictionaryEnumerator enumerator = textboxesOnPage.GetEnumerator();
						while (enumerator.MoveNext())
						{
							string text = enumerator.Key as string;
							ArrayList arrayList = enumerator.Value as ArrayList;
							Global.Tracer.Assert(text != null && arrayList != null, "(null != textboxName && null != values)");
							this.m_onePassTextboxes.AddTextboxValue(0, text, arrayList);
						}
					}
				}
			}

			// Token: 0x06008999 RID: 35225 RVA: 0x00228058 File Offset: 0x00226258
			internal virtual void ProcessOnePassDetailTextboxes(int sourcePage, int targetPage)
			{
				Hashtable textboxesOnPage = this.m_onePassTextboxes.GetTextboxesOnPage(sourcePage);
				if (textboxesOnPage != null)
				{
					IDictionaryEnumerator enumerator = textboxesOnPage.GetEnumerator();
					while (enumerator.MoveNext())
					{
						string text = enumerator.Key as string;
						ArrayList arrayList = enumerator.Value as ArrayList;
						Global.Tracer.Assert(text != null && arrayList != null, "(null != textboxName && null != values)");
						if (this.IsVisible(text))
						{
							this.m_processingContext.PageSectionContext.PageTextboxes.AddTextboxValue(targetPage, text, arrayList);
						}
					}
				}
			}

			// Token: 0x0600899A RID: 35226 RVA: 0x002280D8 File Offset: 0x002262D8
			internal override void GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				base.DetailGetScopeValues(this.m_outerScope, targetScopeObj, scopeValues, ref index);
			}

			// Token: 0x0600899B RID: 35227 RVA: 0x002280E9 File Offset: 0x002262E9
			internal override bool TargetScopeMatched(int index, bool detailSort)
			{
				return base.DetailTargetScopeMatched(this.m_dataRegionDef, this.m_outerScope, index);
			}

			// Token: 0x0400490E RID: 18702
			protected ReportProcessing.IScope m_outerScope;

			// Token: 0x0400490F RID: 18703
			protected Microsoft.ReportingServices.ReportProcessing.DataRegion m_dataRegionDef;

			// Token: 0x04004910 RID: 18704
			protected DataAggregateObjList m_runningValues;

			// Token: 0x04004911 RID: 18705
			protected ReportProcessing.Pagination m_pagination;

			// Token: 0x04004912 RID: 18706
			protected int m_numberOfContentsOnThisPage;

			// Token: 0x04004913 RID: 18707
			protected RenderingPagesRangesList m_renderingPages;

			// Token: 0x04004914 RID: 18708
			protected ReportProcessing.NavigationInfo m_navigationInfo;

			// Token: 0x04004915 RID: 18709
			protected ReportProcessing.PageTextboxes m_onePassTextboxes;
		}

		// Token: 0x02000C51 RID: 3153
		private sealed class RuntimeListGroupRootObj : ReportProcessing.RuntimeGroupRootObj, ReportProcessing.IFilterOwner
		{
			// Token: 0x0600899C RID: 35228 RVA: 0x00228100 File Offset: 0x00226300
			internal RuntimeListGroupRootObj(ReportProcessing.IScope outerScope, List listDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext)
				: base(outerScope, listDef.HierarchyDef, (listDef.PostSortAggregates == null && listDef.Filters == null) ? dataAction : ReportProcessing.DataActions.None, processingContext)
			{
				this.m_listDef = listDef;
				Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems = listDef.ReportItems;
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, listDef.Aggregates, ref this.m_nonCustomAggregates, ref this.m_customAggregates);
				if (listDef.Filters != null)
				{
					this.m_filters = new Filters(Filters.FilterTypes.DataRegionFilter, this, listDef.Filters, listDef.ObjectType, listDef.Name, this.m_processingContext);
				}
				bool flag = false;
				if (listDef.PostSortAggregates != null)
				{
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, listDef.PostSortAggregates, ref this.m_postSortAggregates);
					flag = true;
				}
				if (reportItems != null && reportItems.RunningValues != null && 0 < reportItems.RunningValues.Count)
				{
					this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
				}
				if (listDef.Filters == null && (this.m_hierarchyDef.Grouping.Filters == null || listDef.PostSortAggregates != null))
				{
					dataAction = ReportProcessing.DataActions.None;
				}
				if (this.m_processingContext.IsSortFilterTarget(listDef.IsSortFilterTarget, this.m_outerScope, this, ref this.m_userSortTargetInfo) && this.m_userSortTargetInfo.TargetForNonDetailSort)
				{
					flag = true;
				}
				this.m_processingContext.RegisterSortFilterExpressionScope(this.m_outerScope, this, listDef.IsSortFilterExpressionScope);
				if (flag)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x17002AAB RID: 10923
			// (get) Token: 0x0600899D RID: 35229 RVA: 0x0022824D File Offset: 0x0022644D
			internal Microsoft.ReportingServices.ReportProcessing.ReportItemCollection ReportItemsDef
			{
				get
				{
					return this.m_listDef.ReportItems;
				}
			}

			// Token: 0x17002AAC RID: 10924
			// (get) Token: 0x0600899E RID: 35230 RVA: 0x0022825A File Offset: 0x0022645A
			protected override string ScopeName
			{
				get
				{
					return this.m_listDef.Name;
				}
			}

			// Token: 0x17002AAD RID: 10925
			// (get) Token: 0x0600899F RID: 35231 RVA: 0x00228267 File Offset: 0x00226467
			// (set) Token: 0x060089A0 RID: 35232 RVA: 0x00228293 File Offset: 0x00226493
			protected override ReportProcessing.BTreeNode SortTree
			{
				get
				{
					if (ReportProcessing.ProcessingStages.UserSortFilter != this.m_processingStage)
					{
						return this.m_grouping.Tree;
					}
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortTree;
					}
					return null;
				}
				set
				{
					if (ReportProcessing.ProcessingStages.UserSortFilter != this.m_processingStage)
					{
						this.m_grouping.Tree = value;
						return;
					}
					if (this.m_userSortTargetInfo != null)
					{
						this.m_userSortTargetInfo.SortTree = value;
						return;
					}
					Global.Tracer.Assert(false);
				}
			}

			// Token: 0x17002AAE RID: 10926
			// (get) Token: 0x060089A1 RID: 35233 RVA: 0x002282CB File Offset: 0x002264CB
			protected override int ExpressionIndex
			{
				get
				{
					return 0;
				}
			}

			// Token: 0x17002AAF RID: 10927
			// (get) Token: 0x060089A2 RID: 35234 RVA: 0x002282CE File Offset: 0x002264CE
			protected override IntList SortFilterInfoIndices
			{
				get
				{
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortFilterInfoIndices;
					}
					return null;
				}
			}

			// Token: 0x17002AB0 RID: 10928
			// (get) Token: 0x060089A3 RID: 35235 RVA: 0x002282E5 File Offset: 0x002264E5
			internal override bool TargetForNonDetailSort
			{
				get
				{
					return (this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.TargetForNonDetailSort) || this.m_outerScope.TargetForNonDetailSort;
				}
			}

			// Token: 0x060089A4 RID: 35236 RVA: 0x00228309 File Offset: 0x00226509
			internal override bool IsTargetForSort(int index, bool detailSort)
			{
				return (this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.IsTargetForSort(index, detailSort)) || this.m_outerScope.IsTargetForSort(index, detailSort);
			}

			// Token: 0x060089A5 RID: 35237 RVA: 0x00228334 File Offset: 0x00226534
			internal override void NextRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.AggregationFieldCount == 0)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_customAggregates, false);
				}
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					base.ScopeNextAggregateRow(this.m_userSortTargetInfo);
					return;
				}
				this.NextNonAggregateRow();
			}

			// Token: 0x060089A6 RID: 35238 RVA: 0x00228394 File Offset: 0x00226594
			private void NextNonAggregateRow()
			{
				bool flag = true;
				if (this.m_filters != null)
				{
					flag = this.m_filters.PassFilters(this.m_processingContext.ReportObjectModel.FieldsImpl.GetFields());
				}
				if (flag)
				{
					((ReportProcessing.IFilterOwner)this).PostFilterNextRow();
				}
			}

			// Token: 0x060089A7 RID: 35239 RVA: 0x002283D8 File Offset: 0x002265D8
			void ReportProcessing.IFilterOwner.PostFilterNextRow()
			{
				ReportProcessing.ProcessingStages processingStage = this.m_processingStage;
				this.m_processingStage = ReportProcessing.ProcessingStages.UserSortFilter;
				ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
				base.ScopeNextNonAggregateRow(this.m_nonCustomAggregates, this.m_dataRows);
				this.m_processingStage = processingStage;
			}

			// Token: 0x060089A8 RID: 35240 RVA: 0x0022842D File Offset: 0x0022662D
			protected override void SendToInner()
			{
				this.m_processingStage = ReportProcessing.ProcessingStages.Grouping;
				base.NextRow();
			}

			// Token: 0x060089A9 RID: 35241 RVA: 0x0022843C File Offset: 0x0022663C
			internal override bool SortAndFilter()
			{
				this.SetupEnvironment();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
				}
				if ((ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && this.m_dataRows != null && (this.m_outerDataAction & ReportProcessing.DataActions.RecursiveAggregates) != ReportProcessing.DataActions.None)
				{
					this.ReadRows(ReportProcessing.DataActions.RecursiveAggregates);
				}
				bool flag = base.SortAndFilter();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
				return flag;
			}

			// Token: 0x060089AA RID: 35242 RVA: 0x002284B0 File Offset: 0x002266B0
			private void ReadRows(ReportProcessing.DataActions dataAction)
			{
				for (int i = 0; i < this.m_dataRows.Count; i++)
				{
					FieldImpl[] array = this.m_dataRows[i];
					this.m_processingContext.ReportObjectModel.FieldsImpl.SetFields(array);
					if (ReportProcessing.DataActions.PostSortAggregates == dataAction)
					{
						ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_postSortAggregates, false);
					}
					if (this.m_outerScope != null && (dataAction & this.m_outerDataAction) != ReportProcessing.DataActions.None)
					{
						this.m_outerScope.ReadRow(dataAction);
					}
				}
			}

			// Token: 0x060089AB RID: 35243 RVA: 0x0022852C File Offset: 0x0022672C
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.UserSort == dataAction)
				{
					ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
					base.CommonNextRow(this.m_dataRows);
					return;
				}
				if (this.m_postSortAggregates == null)
				{
					base.ReadRow(dataAction);
					return;
				}
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction && this.m_runningValuesInGroup != null)
				{
					for (int i = 0; i < this.m_runningValuesInGroup.Count; i++)
					{
						this.m_runningValuesInGroup[i].Update();
					}
				}
			}

			// Token: 0x060089AC RID: 35244 RVA: 0x002285AE File Offset: 0x002267AE
			internal override void SetupEnvironment()
			{
				base.SetupEnvironment(this.m_nonCustomAggregates, this.m_customAggregates, this.m_firstRow);
				base.SetupAggregates(this.m_postSortAggregates);
			}

			// Token: 0x060089AD RID: 35245 RVA: 0x002285D4 File Offset: 0x002267D4
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				if (this.m_listDef.ReportItems != null)
				{
					base.AddRunningValues(this.m_listDef.ReportItems.RunningValues);
				}
				if (this.m_dataRows != null)
				{
					this.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
					this.m_dataRows = null;
				}
				this.m_grouping.Traverse(ReportProcessing.ProcessingStages.RunningValues, this.m_expression.Direction);
			}

			// Token: 0x060089AE RID: 35246 RVA: 0x0022863A File Offset: 0x0022683A
			internal override bool InScope(string scope)
			{
				return base.DataRegionInScope(this.m_listDef, scope);
			}

			// Token: 0x060089AF RID: 35247 RVA: 0x00228649 File Offset: 0x00226849
			protected override int GetRecursiveLevel(string scope)
			{
				return base.DataRegionRecursiveLevel(this.m_listDef, scope);
			}

			// Token: 0x060089B0 RID: 35248 RVA: 0x00228658 File Offset: 0x00226858
			internal override bool TargetScopeMatched(int index, bool detailSort)
			{
				return this.m_outerScope.TargetScopeMatched(index, detailSort);
			}

			// Token: 0x060089B1 RID: 35249 RVA: 0x00228667 File Offset: 0x00226867
			protected override ReportProcessing.IHierarchyObj CreateHierarchyObj()
			{
				if (ReportProcessing.ProcessingStages.UserSortFilter == this.m_processingStage)
				{
					return new ReportProcessing.RuntimeSortHierarchyObj(this);
				}
				return base.CreateHierarchyObj();
			}

			// Token: 0x060089B2 RID: 35250 RVA: 0x00228680 File Offset: 0x00226880
			protected override void ProcessUserSort()
			{
				this.m_processingStage = ReportProcessing.ProcessingStages.UserSortFilter;
				this.m_processingContext.ProcessUserSortForTarget(this, ref this.m_dataRows, this.m_userSortTargetInfo.TargetForNonDetailSort);
				if (this.m_userSortTargetInfo.TargetForNonDetailSort)
				{
					this.m_userSortTargetInfo.ResetTargetForNonDetailSort();
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
					this.m_grouping = new ReportProcessing.RuntimeGroupingObj(this, this.m_groupingType);
					this.m_firstChild = (this.m_lastChild = null);
					if (this.m_listDef.PostSortAggregates != null)
					{
						this.m_dataRows = new ReportProcessing.DataRowList();
					}
					base.ScopeFinishSorting(ref this.m_firstRow, this.m_userSortTargetInfo);
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
			}

			// Token: 0x060089B3 RID: 35251 RVA: 0x00228737 File Offset: 0x00226937
			protected override void MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.MarkSortInfoProcessed(runtimeSortFilterInfo, this);
				}
			}

			// Token: 0x060089B4 RID: 35252 RVA: 0x0022874E File Offset: 0x0022694E
			protected override void AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.AddSortInfoIndex(sortInfoIndex, sortInfo);
				}
			}

			// Token: 0x060089B5 RID: 35253 RVA: 0x00228765 File Offset: 0x00226965
			protected override void GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
				base.DataRegionGetGroupNameValuePairs(this.m_listDef, pairs);
			}

			// Token: 0x04004916 RID: 18710
			private List m_listDef;

			// Token: 0x04004917 RID: 18711
			private Filters m_filters;

			// Token: 0x04004918 RID: 18712
			private DataAggregateObjList m_nonCustomAggregates;

			// Token: 0x04004919 RID: 18713
			private DataAggregateObjList m_customAggregates;

			// Token: 0x0400491A RID: 18714
			private FieldImpl[] m_firstRow;

			// Token: 0x0400491B RID: 18715
			private bool m_firstRowIsAggregate;

			// Token: 0x0400491C RID: 18716
			private DataAggregateObjList m_postSortAggregates;

			// Token: 0x0400491D RID: 18717
			private ReportProcessing.DataRowList m_dataRows;

			// Token: 0x0400491E RID: 18718
			private RuntimeUserSortTargetInfo m_userSortTargetInfo;
		}

		// Token: 0x02000C52 RID: 3154
		private sealed class RuntimeListGroupLeafObj : ReportProcessing.RuntimeGroupLeafObj
		{
			// Token: 0x060089B6 RID: 35254 RVA: 0x00228774 File Offset: 0x00226974
			internal RuntimeListGroupLeafObj(ReportProcessing.RuntimeListGroupRootObj groupRoot)
				: base(groupRoot)
			{
				this.m_dataAction = groupRoot.DataAction;
				bool flag = false;
				bool flag2 = base.HandleSortFilterEvent();
				ReportProcessing.DataActions dataActions;
				this.ConstructRuntimeStructure(ref flag, out dataActions);
				if (!flag)
				{
					this.m_dataAction = dataActions;
				}
				if (flag2)
				{
					this.m_dataAction |= ReportProcessing.DataActions.UserSort;
				}
				if (this.m_dataAction != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x17002AB1 RID: 10929
			// (get) Token: 0x060089B7 RID: 35255 RVA: 0x002287DA File Offset: 0x002269DA
			internal int StartPage
			{
				get
				{
					return this.m_startPage;
				}
			}

			// Token: 0x060089B8 RID: 35256 RVA: 0x002287E2 File Offset: 0x002269E2
			protected override void ConstructRuntimeStructure(ref bool handleMyDataAction, out ReportProcessing.DataActions innerDataAction)
			{
				base.ConstructRuntimeStructure(ref handleMyDataAction, out innerDataAction);
				this.m_reportItemCol = new ReportProcessing.RuntimeRICollection(this, ((ReportProcessing.RuntimeListGroupRootObj)this.m_hierarchyRoot).ReportItemsDef, ref innerDataAction, this.m_processingContext, true);
			}

			// Token: 0x060089B9 RID: 35257 RVA: 0x00228810 File Offset: 0x00226A10
			protected override void SendToInner()
			{
				base.SendToInner();
				this.m_reportItemCol.FirstPassNextDataRow();
			}

			// Token: 0x060089BA RID: 35258 RVA: 0x00228824 File Offset: 0x00226A24
			internal override bool SortAndFilter()
			{
				this.SetupEnvironment();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
				}
				this.m_reportItemCol.SortAndFilter();
				bool flag = base.SortAndFilter();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
				return flag;
			}

			// Token: 0x060089BB RID: 35259 RVA: 0x0022887C File Offset: 0x00226A7C
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.UserSort == dataAction)
				{
					ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
					base.CommonNextRow(this.m_dataRows);
					return;
				}
				base.ReadRow(dataAction);
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction)
				{
					this.CalculatePreviousAggregates();
				}
			}

			// Token: 0x060089BC RID: 35260 RVA: 0x002288CC File Offset: 0x00226ACC
			private void CalculatePreviousAggregates()
			{
				if (!this.m_processedPreviousAggregates && this.m_processingContext.GlobalRVCollection != null)
				{
					if (this.m_reportItemCol != null)
					{
						this.m_reportItemCol.CalculatePreviousAggregates(this.m_processingContext.GlobalRVCollection);
					}
					this.m_processedPreviousAggregates = true;
				}
			}

			// Token: 0x060089BD RID: 35261 RVA: 0x00228908 File Offset: 0x00226B08
			internal override void CalculateRunningValues()
			{
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
				AggregatesImpl globalRunningValueCollection = runtimeGroupRootObj.GlobalRunningValueCollection;
				ReportProcessing.RuntimeGroupRootObjList groupCollection = runtimeGroupRootObj.GroupCollection;
				if (this.m_dataRows != null)
				{
					base.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
					this.m_dataRows = null;
				}
				if (this.m_reportItemCol != null)
				{
					this.m_reportItemCol.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimeGroupRootObj);
				}
				base.CalculateRunningValues();
			}

			// Token: 0x060089BE RID: 35262 RVA: 0x00228964 File Offset: 0x00226B64
			internal override void CreateInstance()
			{
				this.SetupEnvironment();
				ReportProcessing.RuntimeListGroupRootObj runtimeListGroupRootObj = (ReportProcessing.RuntimeListGroupRootObj)this.m_hierarchyRoot;
				ReportItemInstance reportItemInstance = runtimeListGroupRootObj.ReportItemInstance;
				IList instanceList = runtimeListGroupRootObj.InstanceList;
				ReportHierarchyNode hierarchyDef = runtimeListGroupRootObj.HierarchyDef;
				List list = (List)hierarchyDef.DataRegionDef;
				Global.Tracer.Assert(this.m_reportItemCol != null, "(null != m_reportItemCol)");
				this.m_processingContext.ChunkManager.CheckPageBreak(hierarchyDef, true);
				this.m_processingContext.Pagination.EnterIgnorePageBreak(list.Visibility, false);
				if (instanceList.Count != 0)
				{
					bool flag = this.m_processingContext.Pagination.CalculateSoftPageBreak(null, 0.0, 0.0, false, list.Grouping.PageBreakAtStart);
					if (!this.m_processingContext.Pagination.IgnorePageBreak && (this.m_processingContext.Pagination.CanMoveToNextPage(list.Grouping.PageBreakAtStart) || flag))
					{
						List list2 = list;
						int contentStartPage = list2.ContentStartPage;
						list2.ContentStartPage = contentStartPage + 1;
						this.m_processingContext.Pagination.SetCurrentPageHeight(list, 0.0);
					}
				}
				this.m_listContentInstance = new ListContentInstance(this.m_processingContext, list);
				RenderingPagesRanges renderingPagesRanges = default(RenderingPagesRanges);
				renderingPagesRanges.StartPage = list.ContentStartPage;
				this.m_startPage = renderingPagesRanges.StartPage;
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.EnterGrouping();
					((IShowHideContainer)this.m_listContentInstance).BeginProcessContainer(this.m_processingContext);
				}
				if (list.Grouping.GroupLabel != null)
				{
					this.m_label = this.m_processingContext.NavigationInfo.CurrentLabel;
					if (this.m_label != null)
					{
						this.m_processingContext.NavigationInfo.EnterDocumentMapChildren();
					}
				}
				int startPage = list.StartPage;
				list.StartPage = list.ContentStartPage;
				this.m_processingContext.PageSectionContext.EnterVisibilityScope(list.Visibility, list.StartHidden);
				this.m_reportItemCol.CreateInstances(this.m_listContentInstance.ReportItemColInstance);
				this.m_processingContext.PageSectionContext.ExitVisibilityScope();
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					((IShowHideContainer)this.m_listContentInstance).EndProcessContainer(this.m_processingContext);
				}
				this.m_processingContext.ChunkManager.CheckPageBreak(hierarchyDef, false);
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.ExitGrouping();
				}
				this.m_processingContext.Pagination.ProcessEndGroupPage(list.IsListMostInner ? list.HeightValue : 0.0, list.Grouping.PageBreakAtEnd, list, true, list.StartHidden);
				list.ContentStartPage = list.EndPage;
				list.StartPage = startPage;
				if (this.m_processingContext.Pagination.ShouldItemMoveToChildStartPage(list))
				{
					this.m_startPage = (renderingPagesRanges.StartPage = this.m_listContentInstance.ReportItemColInstance.ChildrenStartAndEndPages[0].StartPage);
				}
				renderingPagesRanges.EndPage = list.EndPage;
				((ListInstance)reportItemInstance).ChildrenStartAndEndPages.Add(renderingPagesRanges);
				this.m_processingContext.Pagination.LeaveIgnorePageBreak(list.Visibility, false);
				instanceList.Add(this.m_listContentInstance);
				if (this.m_reportItemCol != null)
				{
					this.m_reportItemCol.ResetReportItemObjs();
				}
				base.ResetReportItemsWithHideDuplicates();
			}

			// Token: 0x060089BF RID: 35263 RVA: 0x00228CAF File Offset: 0x00226EAF
			protected override void AddToDocumentMap()
			{
				if (base.GroupingDef.GroupLabel != null && this.m_label != null)
				{
					this.m_processingContext.NavigationInfo.AddToDocumentMap(this.m_listContentInstance.UniqueName, true, this.m_startPage, this.m_label);
				}
			}

			// Token: 0x0400491F RID: 18719
			private ReportProcessing.RuntimeRICollection m_reportItemCol;

			// Token: 0x04004920 RID: 18720
			private ListContentInstance m_listContentInstance;

			// Token: 0x04004921 RID: 18721
			private string m_label;

			// Token: 0x04004922 RID: 18722
			private int m_startPage = -1;
		}

		// Token: 0x02000C53 RID: 3155
		private sealed class RuntimeListDetailObj : ReportProcessing.RuntimeDetailObj, ReportProcessing.IFilterOwner, ReportProcessing.ISortDataHolder
		{
			// Token: 0x060089C0 RID: 35264 RVA: 0x00228CF0 File Offset: 0x00226EF0
			internal RuntimeListDetailObj(ReportProcessing.IScope outerScope, List listDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext)
				: base(outerScope, listDef, (listDef.Filters == null) ? dataAction : ReportProcessing.DataActions.None, processingContext)
			{
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, listDef.Aggregates, ref this.m_nonCustomAggregates, ref this.m_customAggregates);
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, listDef.PostSortAggregates, ref this.m_postSortAggregates);
				if (listDef.Filters != null)
				{
					this.m_filters = new Filters(Filters.FilterTypes.DataRegionFilter, this, listDef.Filters, listDef.ObjectType, listDef.Name, this.m_processingContext);
				}
				else
				{
					dataAction = ReportProcessing.DataActions.None;
				}
				RunningValueInfoList runningValueInfoList = null;
				if (listDef.ReportItems != null)
				{
					runningValueInfoList = listDef.ReportItems.RunningValues;
				}
				if (runningValueInfoList != null && 0 < runningValueInfoList.Count)
				{
					this.m_rvValueList = new DataAggregateObjResultsList();
				}
				if (this.m_processingContext.IsSortFilterTarget(listDef.IsSortFilterTarget, this.m_outerScope, this, ref this.m_userSortTargetInfo) && this.m_userSortTargetInfo.TargetForNonDetailSort)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
				base.HandleSortFilterEvent(ref this.m_userSortTargetInfo);
				if (this.m_userSortTargetInfo == null && listDef.Sorting != null && 0 < listDef.Sorting.SortExpressions.Count)
				{
					this.m_expression = new ReportProcessing.RuntimeExpressionInfo(listDef.Sorting.SortExpressions, listDef.Sorting.ExprHost, listDef.Sorting.SortDirections, 0);
					this.m_grouping = new ReportProcessing.RuntimeGroupingObj(this, ReportProcessing.RuntimeGroupingObj.GroupingTypes.Sort);
				}
				this.m_processingContext.RegisterSortFilterExpressionScope(this.m_outerScope, this, listDef.IsSortFilterExpressionScope);
			}

			// Token: 0x060089C1 RID: 35265 RVA: 0x00228E60 File Offset: 0x00227060
			internal RuntimeListDetailObj(ReportProcessing.RuntimeListDetailObj detailRoot)
				: base(detailRoot)
			{
			}

			// Token: 0x17002AB2 RID: 10930
			// (get) Token: 0x060089C2 RID: 35266 RVA: 0x00228E6C File Offset: 0x0022706C
			internal override ExpressionInfoList SortExpressions
			{
				get
				{
					Sorting sorting = ((List)this.m_dataRegionDef).Sorting;
					if (sorting != null && 0 < sorting.SortExpressions.Count)
					{
						return sorting.SortExpressions;
					}
					return null;
				}
			}

			// Token: 0x17002AB3 RID: 10931
			// (get) Token: 0x060089C3 RID: 35267 RVA: 0x00228EA4 File Offset: 0x002270A4
			internal override SortingExprHost SortExpressionHost
			{
				get
				{
					Sorting sorting = ((List)this.m_dataRegionDef).Sorting;
					if (sorting != null)
					{
						return sorting.ExprHost;
					}
					return null;
				}
			}

			// Token: 0x17002AB4 RID: 10932
			// (get) Token: 0x060089C4 RID: 35268 RVA: 0x00228ED0 File Offset: 0x002270D0
			internal override BoolList SortDirections
			{
				get
				{
					Sorting sorting = ((List)this.m_dataRegionDef).Sorting;
					if (sorting != null && 0 < sorting.SortDirections.Count)
					{
						return sorting.SortDirections;
					}
					return null;
				}
			}

			// Token: 0x17002AB5 RID: 10933
			// (get) Token: 0x060089C5 RID: 35269 RVA: 0x00228F07 File Offset: 0x00227107
			protected override string ScopeName
			{
				get
				{
					return this.m_dataRegionDef.Name;
				}
			}

			// Token: 0x17002AB6 RID: 10934
			// (get) Token: 0x060089C6 RID: 35270 RVA: 0x00228F14 File Offset: 0x00227114
			// (set) Token: 0x060089C7 RID: 35271 RVA: 0x00228F3F File Offset: 0x0022713F
			protected override ReportProcessing.BTreeNode SortTree
			{
				get
				{
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortTree;
					}
					if (this.m_grouping != null)
					{
						return this.m_grouping.Tree;
					}
					return null;
				}
				set
				{
					if (this.m_userSortTargetInfo != null)
					{
						this.m_userSortTargetInfo.SortTree = value;
						return;
					}
					if (this.m_grouping != null)
					{
						this.m_grouping.Tree = value;
						return;
					}
					Global.Tracer.Assert(false);
				}
			}

			// Token: 0x17002AB7 RID: 10935
			// (get) Token: 0x060089C8 RID: 35272 RVA: 0x00228F76 File Offset: 0x00227176
			protected override int ExpressionIndex
			{
				get
				{
					return 0;
				}
			}

			// Token: 0x17002AB8 RID: 10936
			// (get) Token: 0x060089C9 RID: 35273 RVA: 0x00228F79 File Offset: 0x00227179
			protected override IntList SortFilterInfoIndices
			{
				get
				{
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortFilterInfoIndices;
					}
					return null;
				}
			}

			// Token: 0x17002AB9 RID: 10937
			// (get) Token: 0x060089CA RID: 35274 RVA: 0x00228F90 File Offset: 0x00227190
			internal override bool TargetForNonDetailSort
			{
				get
				{
					return (this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.TargetForNonDetailSort) || this.m_outerScope.TargetForNonDetailSort;
				}
			}

			// Token: 0x060089CB RID: 35275 RVA: 0x00228FB4 File Offset: 0x002271B4
			internal override bool IsTargetForSort(int index, bool detailSort)
			{
				return (this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.IsTargetForSort(index, detailSort)) || this.m_outerScope.IsTargetForSort(index, detailSort);
			}

			// Token: 0x060089CC RID: 35276 RVA: 0x00228FDC File Offset: 0x002271DC
			void ReportProcessing.ISortDataHolder.NextRow()
			{
				this.NextRow();
			}

			// Token: 0x060089CD RID: 35277 RVA: 0x00228FE4 File Offset: 0x002271E4
			void ReportProcessing.ISortDataHolder.Traverse(ReportProcessing.ProcessingStages operation)
			{
				switch (operation)
				{
				case ReportProcessing.ProcessingStages.SortAndFilter:
					this.SortAndFilter();
					return;
				case ReportProcessing.ProcessingStages.RunningValues:
					base.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
					return;
				case ReportProcessing.ProcessingStages.CreatingInstances:
					this.CreateInstance();
					return;
				default:
					Global.Tracer.Assert(false);
					return;
				}
			}

			// Token: 0x060089CE RID: 35278 RVA: 0x0022901E File Offset: 0x0022721E
			internal override void NextRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					this.NextAggregateRow();
					return;
				}
				this.NextNonAggregateRow();
			}

			// Token: 0x060089CF RID: 35279 RVA: 0x00229044 File Offset: 0x00227244
			private void NextNonAggregateRow()
			{
				bool flag = true;
				if (this.m_filters != null)
				{
					flag = this.m_filters.PassFilters(this.m_processingContext.ReportObjectModel.FieldsImpl.GetFields());
				}
				if (flag)
				{
					((ReportProcessing.IFilterOwner)this).PostFilterNextRow();
				}
			}

			// Token: 0x060089D0 RID: 35280 RVA: 0x00229085 File Offset: 0x00227285
			private void NextAggregateRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.AggregationFieldCount == 0)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_customAggregates, false);
				}
			}

			// Token: 0x060089D1 RID: 35281 RVA: 0x002290B0 File Offset: 0x002272B0
			void ReportProcessing.IFilterOwner.PostFilterNextRow()
			{
				ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_nonCustomAggregates, false);
				if (this.m_userSortTargetInfo != null)
				{
					base.ProcessDetailSort(this.m_userSortTargetInfo);
					return;
				}
				base.NextRow();
			}

			// Token: 0x060089D2 RID: 35282 RVA: 0x002290DF File Offset: 0x002272DF
			protected override void SendToInner()
			{
			}

			// Token: 0x060089D3 RID: 35283 RVA: 0x002290E4 File Offset: 0x002272E4
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_rvValueList == null && this.m_postSortAggregates == null && (this.m_outerDataAction & ReportProcessing.DataActions.PostSortAggregates) == ReportProcessing.DataActions.None)
				{
					return;
				}
				this.m_globalRunningValueCollection = globalRVCol;
				this.m_groupCollection = groupCol;
				RunningValueInfoList runningValueInfoList = null;
				Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems = ((List)this.m_dataRegionDef).ReportItems;
				if (reportItems != null)
				{
					runningValueInfoList = reportItems.RunningValues;
				}
				if (runningValueInfoList != null && 0 < runningValueInfoList.Count)
				{
					base.AddRunningValues(runningValueInfoList, lastGroup);
				}
				if (this.m_userSortTargetInfo != null)
				{
					bool sortDirection = this.m_processingContext.RuntimeSortFilterInfo[this.m_userSortTargetInfo.SortFilterInfoIndices[0]].SortDirection;
					this.m_userSortTargetInfo.SortTree.Traverse(ReportProcessing.ProcessingStages.RunningValues, sortDirection);
					this.m_userSortTargetInfo = null;
					return;
				}
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
			}

			// Token: 0x060089D4 RID: 35284 RVA: 0x0022919F File Offset: 0x0022739F
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction && this.m_postSortAggregates != null)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_postSortAggregates, false);
				}
				base.ReadRow(dataAction);
			}

			// Token: 0x060089D5 RID: 35285 RVA: 0x002291C8 File Offset: 0x002273C8
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_reportItemInstance = riInstance;
					this.m_instanceList = instanceList;
					this.m_pagesList = pagesList;
					bool sortDirection = this.m_processingContext.RuntimeSortFilterInfo[this.m_userSortTargetInfo.SortFilterInfoIndices[0]].SortDirection;
					this.m_userSortTargetInfo.SortTree.Traverse(ReportProcessing.ProcessingStages.CreatingInstances, sortDirection);
					this.m_userSortTargetInfo = null;
					return;
				}
				base.CreateInstances(riInstance, instanceList, pagesList);
			}

			// Token: 0x060089D6 RID: 35286 RVA: 0x0022923C File Offset: 0x0022743C
			internal override void CreateInstance()
			{
				ReportProcessing.RuntimeListDetailObj runtimeListDetailObj = (ReportProcessing.RuntimeListDetailObj)this.m_hierarchyRoot;
				ListInstance listInstance = (ListInstance)runtimeListDetailObj.m_reportItemInstance;
				IList instanceList = runtimeListDetailObj.m_instanceList;
				Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems = ((List)this.m_dataRegionDef).ReportItems;
				List list = (List)this.m_dataRegionDef;
				ReportProcessing.Pagination pagination = this.m_processingContext.Pagination;
				if (reportItems != null && this.m_dataRows != null)
				{
					ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
					ReportProcessing.RuntimeRICollection runtimeRICollection = new ReportProcessing.RuntimeRICollection(this, reportItems, ref dataActions, this.m_processingContext, false);
					double heightValue = list.HeightValue;
					pagination.EnterIgnorePageBreak(list.Visibility, false);
					for (int i = 0; i < this.m_dataRows.Count; i++)
					{
						base.SetupEnvironment(i, reportItems.RunningValues);
						ListContentInstance listContentInstance = new ListContentInstance(this.m_processingContext, (List)this.m_dataRegionDef);
						if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
						{
							this.m_processingContext.EnterGrouping();
							((IShowHideContainer)listContentInstance).BeginProcessContainer(this.m_processingContext);
						}
						if (!pagination.IgnoreHeight)
						{
							pagination.AddToCurrentPageHeight(list, heightValue);
						}
						if (!pagination.IgnorePageBreak && pagination.CurrentPageHeight >= pagination.PageHeight && listInstance.NumberOfContentsOnThisPage > 0)
						{
							RenderingPagesRanges renderingPagesRanges = default(RenderingPagesRanges);
							renderingPagesRanges.StartRow = instanceList.Count - listInstance.NumberOfContentsOnThisPage;
							renderingPagesRanges.NumberOfDetails = listInstance.NumberOfContentsOnThisPage;
							pagination.SetCurrentPageHeight(list, 0.0);
							List list2 = list;
							int num = list2.ContentStartPage;
							list2.ContentStartPage = num + 1;
							list.BottomInEndPage = 0.0;
							listInstance.ChildrenStartAndEndPages.Add(renderingPagesRanges);
							listInstance.NumberOfContentsOnThisPage = 1;
						}
						else
						{
							ListInstance listInstance2 = listInstance;
							int num = listInstance2.NumberOfContentsOnThisPage;
							listInstance2.NumberOfContentsOnThisPage = num + 1;
						}
						int startPage = list.StartPage;
						list.StartPage = list.ContentStartPage;
						pagination.EnterIgnorePageBreak(null, true);
						pagination.EnterIgnoreHeight(true);
						this.m_dataRegionDef.CurrentDetailRowIndex = i;
						this.m_processingContext.PageSectionContext.EnterVisibilityScope(list.Visibility, list.StartHidden);
						runtimeRICollection.CreateInstances(listContentInstance.ReportItemColInstance);
						this.m_processingContext.PageSectionContext.ExitVisibilityScope();
						pagination.LeaveIgnoreHeight(true);
						pagination.LeaveIgnorePageBreak(null, true);
						pagination.ProcessEndGroupPage(0.0, false, list, listInstance.NumberOfContentsOnThisPage > 0, list.StartHidden);
						if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
						{
							((IShowHideContainer)listContentInstance).EndProcessContainer(this.m_processingContext);
							this.m_processingContext.ExitGrouping();
						}
						list.StartPage = startPage;
						instanceList.Add(listContentInstance);
						runtimeRICollection.ResetReportItemObjs();
					}
					list.EndPage = Math.Max(list.ContentStartPage, list.EndPage);
					pagination.LeaveIgnorePageBreak(list.Visibility, false);
				}
			}

			// Token: 0x060089D7 RID: 35287 RVA: 0x002294FD File Offset: 0x002276FD
			internal override void SetupEnvironment()
			{
				base.SetupEnvironment(this.m_nonCustomAggregates, this.m_customAggregates, (this.m_dataRows == null) ? null : this.m_dataRows[0]);
				base.SetupAggregates(this.m_postSortAggregates);
			}

			// Token: 0x060089D8 RID: 35288 RVA: 0x00229534 File Offset: 0x00227734
			internal override bool InScope(string scope)
			{
				return base.DataRegionInScope(this.m_dataRegionDef, scope);
			}

			// Token: 0x060089D9 RID: 35289 RVA: 0x00229543 File Offset: 0x00227743
			protected override int GetRecursiveLevel(string scope)
			{
				return base.DataRegionRecursiveLevel(this.m_dataRegionDef, scope);
			}

			// Token: 0x060089DA RID: 35290 RVA: 0x00229552 File Offset: 0x00227752
			protected override ReportProcessing.IHierarchyObj CreateHierarchyObj()
			{
				if (this.m_userSortTargetInfo != null)
				{
					return new ReportProcessing.RuntimeSortHierarchyObj(this);
				}
				return base.CreateHierarchyObj();
			}

			// Token: 0x060089DB RID: 35291 RVA: 0x00229569 File Offset: 0x00227769
			protected override void ProcessUserSort()
			{
				this.m_processingContext.ProcessUserSortForTarget(this, ref this.m_dataRows, this.m_userSortTargetInfo.TargetForNonDetailSort);
			}

			// Token: 0x060089DC RID: 35292 RVA: 0x00229588 File Offset: 0x00227788
			protected override void MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.MarkSortInfoProcessed(runtimeSortFilterInfo, this);
				}
			}

			// Token: 0x060089DD RID: 35293 RVA: 0x0022959F File Offset: 0x0022779F
			protected override void AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.AddSortInfoIndex(sortInfoIndex, sortInfo);
				}
			}

			// Token: 0x060089DE RID: 35294 RVA: 0x002295B6 File Offset: 0x002277B6
			internal override bool TargetScopeMatched(int index, bool detailSort)
			{
				return this.m_outerScope.TargetScopeMatched(index, detailSort);
			}

			// Token: 0x060089DF RID: 35295 RVA: 0x002295C5 File Offset: 0x002277C5
			internal override void GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				if (targetScopeObj == null)
				{
					base.GetScopeValues(targetScopeObj, scopeValues, ref index);
					return;
				}
				if (this != targetScopeObj)
				{
					this.m_outerScope.GetScopeValues(targetScopeObj, scopeValues, ref index);
				}
			}

			// Token: 0x060089E0 RID: 35296 RVA: 0x002295E6 File Offset: 0x002277E6
			protected override void GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
				base.DataRegionGetGroupNameValuePairs(this.m_dataRegionDef, pairs);
			}

			// Token: 0x04004923 RID: 18723
			private Filters m_filters;

			// Token: 0x04004924 RID: 18724
			private DataAggregateObjList m_nonCustomAggregates;

			// Token: 0x04004925 RID: 18725
			private DataAggregateObjList m_customAggregates;

			// Token: 0x04004926 RID: 18726
			private DataAggregateObjList m_postSortAggregates;

			// Token: 0x04004927 RID: 18727
			private RuntimeUserSortTargetInfo m_userSortTargetInfo;
		}

		// Token: 0x02000C54 RID: 3156
		private sealed class RuntimeOnePassListDetailObj : ReportProcessing.RuntimeOnePassDetailObj, ReportProcessing.IFilterOwner
		{
			// Token: 0x060089E1 RID: 35297 RVA: 0x002295F8 File Offset: 0x002277F8
			internal RuntimeOnePassListDetailObj(ReportProcessing.IScope outerScope, List listDef, ReportProcessing.ProcessingContext processingContext)
				: base(outerScope, listDef, processingContext)
			{
				Global.Tracer.Assert(listDef.Sorting == null, "(null == listDef.Sorting)");
				Global.Tracer.Assert(listDef.Aggregates == null, "(null == listDef.Aggregates)");
				if (listDef.Filters != null)
				{
					this.m_filters = new Filters(Filters.FilterTypes.DataRegionFilter, this, listDef.Filters, listDef.ObjectType, listDef.Name, this.m_processingContext);
				}
				if (listDef.ReportItems != null)
				{
					this.m_reportItemCol = new ReportProcessing.RuntimeRICollection(this, listDef.ReportItems, this.m_processingContext, false);
					base.AddRunningValues(listDef.ReportItems.RunningValues);
				}
				this.m_listContentInstances = new ListContentInstanceList();
				listDef.ContentStartPage = 0;
			}

			// Token: 0x17002ABA RID: 10938
			// (get) Token: 0x060089E2 RID: 35298 RVA: 0x002296AF File Offset: 0x002278AF
			internal ListContentInstanceList ListContentInstances
			{
				get
				{
					return this.m_listContentInstances;
				}
			}

			// Token: 0x17002ABB RID: 10939
			// (get) Token: 0x060089E3 RID: 35299 RVA: 0x002296B7 File Offset: 0x002278B7
			protected override string ScopeName
			{
				get
				{
					return this.m_dataRegionDef.Name;
				}
			}

			// Token: 0x060089E4 RID: 35300 RVA: 0x002296C4 File Offset: 0x002278C4
			internal override int GetDetailPage()
			{
				return ((List)this.m_dataRegionDef).ContentStartPage;
			}

			// Token: 0x060089E5 RID: 35301 RVA: 0x002296D8 File Offset: 0x002278D8
			internal override void NextRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					return;
				}
				bool flag = true;
				if (this.m_filters != null)
				{
					flag = this.m_filters.PassFilters(this.m_processingContext.ReportObjectModel.FieldsImpl.GetFields());
				}
				if (flag)
				{
					((ReportProcessing.IFilterOwner)this).PostFilterNextRow();
				}
			}

			// Token: 0x060089E6 RID: 35302 RVA: 0x00229731 File Offset: 0x00227931
			void ReportProcessing.IFilterOwner.PostFilterNextRow()
			{
				base.NextRow();
			}

			// Token: 0x060089E7 RID: 35303 RVA: 0x0022973C File Offset: 0x0022793C
			protected override void CreateInstance()
			{
				List list = (List)this.m_dataRegionDef;
				double heightValue = list.HeightValue;
				ReportProcessing.Pagination pagination = this.m_processingContext.Pagination;
				this.m_pagination.CopyPaginationInfo(pagination);
				this.m_processingContext.Pagination = this.m_pagination;
				ReportProcessing.NavigationInfo navigationInfo = this.m_processingContext.NavigationInfo;
				this.m_processingContext.NavigationInfo = this.m_navigationInfo;
				this.m_pagination.EnterIgnorePageBreak(list.Visibility, false);
				ListContentInstance listContentInstance = new ListContentInstance(this.m_processingContext, list);
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.EnterGrouping();
					((IShowHideContainer)listContentInstance).BeginProcessContainer(this.m_processingContext);
				}
				if (!this.m_pagination.IgnoreHeight)
				{
					this.m_pagination.AddToCurrentPageHeight(list, heightValue);
				}
				if (!this.m_pagination.IgnorePageBreak && this.m_pagination.CurrentPageHeight >= this.m_pagination.PageHeight && this.m_numberOfContentsOnThisPage > 0)
				{
					RenderingPagesRanges renderingPagesRanges = default(RenderingPagesRanges);
					renderingPagesRanges.StartRow = this.m_listContentInstances.Count - this.m_numberOfContentsOnThisPage;
					renderingPagesRanges.NumberOfDetails = this.m_numberOfContentsOnThisPage;
					this.m_pagination.SetCurrentPageHeight(list, 0.0);
					List list2 = list;
					int contentStartPage = list2.ContentStartPage;
					list2.ContentStartPage = contentStartPage + 1;
					list.BottomInEndPage = 0.0;
					this.m_renderingPages.Add(renderingPagesRanges);
					this.m_numberOfContentsOnThisPage = 1;
				}
				else
				{
					this.m_numberOfContentsOnThisPage++;
				}
				int startPage = list.StartPage;
				list.StartPage = list.ContentStartPage;
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.AddRowIndex)
				{
					this.m_dataRegionDef.CurrentDetailRowIndex = this.m_processingContext.ReportObjectModel.FieldsImpl.GetRowIndex();
				}
				this.m_pagination.EnterIgnorePageBreak(null, true);
				this.m_pagination.EnterIgnoreHeight(true);
				this.m_processingContext.PageSectionContext.EnterVisibilityScope(list.Visibility, list.StartHidden);
				this.m_reportItemCol.CreateInstances(listContentInstance.ReportItemColInstance);
				this.m_processingContext.PageSectionContext.ExitVisibilityScope();
				this.m_pagination.LeaveIgnoreHeight(true);
				this.m_pagination.LeaveIgnorePageBreak(null, true);
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					((IShowHideContainer)listContentInstance).EndProcessContainer(this.m_processingContext);
				}
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.ExitGrouping();
				}
				this.m_pagination.ProcessEndGroupPage(0.0, false, list, this.m_numberOfContentsOnThisPage > 0, list.StartHidden);
				list.StartPage = startPage;
				list.EndPage = Math.Max(list.ContentStartPage, list.EndPage);
				this.m_pagination.LeaveIgnorePageBreak(list.Visibility, false);
				this.m_processingContext.Pagination = pagination;
				this.m_processingContext.NavigationInfo = navigationInfo;
				this.m_listContentInstances.Add(listContentInstance);
			}

			// Token: 0x060089E8 RID: 35304 RVA: 0x00229A32 File Offset: 0x00227C32
			internal override bool InScope(string scope)
			{
				return base.DataRegionInScope(this.m_dataRegionDef, scope);
			}

			// Token: 0x04004928 RID: 18728
			private ReportProcessing.RuntimeRICollection m_reportItemCol;

			// Token: 0x04004929 RID: 18729
			private Filters m_filters;

			// Token: 0x0400492A RID: 18730
			private ListContentInstanceList m_listContentInstances;
		}

		// Token: 0x02000C55 RID: 3157
		internal abstract class RuntimeRDLDataRegionObj : ReportProcessing.RuntimeDataRegionObj, ReportProcessing.IFilterOwner, ReportProcessing.IHierarchyObj
		{
			// Token: 0x060089E9 RID: 35305 RVA: 0x00229A44 File Offset: 0x00227C44
			internal RuntimeRDLDataRegionObj(ReportProcessing.IScope outerScope, Microsoft.ReportingServices.ReportProcessing.DataRegion dataRegionDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, bool onePassProcess, RunningValueInfoList runningValues)
				: base(processingContext)
			{
				this.m_outerScope = outerScope;
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, dataRegionDef.Aggregates, ref this.m_nonCustomAggregates, ref this.m_customAggregates);
				if (dataRegionDef.Filters != null)
				{
					this.m_filters = new Filters(Filters.FilterTypes.DataRegionFilter, this, dataRegionDef.Filters, dataRegionDef.ObjectType, dataRegionDef.Name, this.m_processingContext);
				}
				else
				{
					this.m_outerDataAction = dataAction;
					this.m_dataAction = dataAction;
					dataAction = ReportProcessing.DataActions.None;
				}
				if (onePassProcess)
				{
					if (runningValues != null && 0 < runningValues.Count)
					{
						ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, runningValues, ref this.m_nonCustomAggregates);
						return;
					}
				}
				else if (runningValues != null && 0 < runningValues.Count)
				{
					this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
				}
			}

			// Token: 0x17002ABC RID: 10940
			// (get) Token: 0x060089EA RID: 35306 RVA: 0x00229B01 File Offset: 0x00227D01
			protected override ReportProcessing.IScope OuterScope
			{
				get
				{
					return this.m_outerScope;
				}
			}

			// Token: 0x17002ABD RID: 10941
			// (get) Token: 0x060089EB RID: 35307
			protected abstract Microsoft.ReportingServices.ReportProcessing.DataRegion DataRegionDef { get; }

			// Token: 0x17002ABE RID: 10942
			// (get) Token: 0x060089EC RID: 35308 RVA: 0x00229B09 File Offset: 0x00227D09
			internal override bool TargetForNonDetailSort
			{
				get
				{
					return (this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.TargetForNonDetailSort) || this.m_outerScope.TargetForNonDetailSort;
				}
			}

			// Token: 0x17002ABF RID: 10943
			// (get) Token: 0x060089ED RID: 35309 RVA: 0x00229B30 File Offset: 0x00227D30
			protected override int[] SortFilterExpressionScopeInfoIndices
			{
				get
				{
					if (this.m_sortFilterExpressionScopeInfoIndices == null)
					{
						this.m_sortFilterExpressionScopeInfoIndices = new int[this.m_processingContext.RuntimeSortFilterInfo.Count];
						for (int i = 0; i < this.m_processingContext.RuntimeSortFilterInfo.Count; i++)
						{
							this.m_sortFilterExpressionScopeInfoIndices[i] = -1;
						}
					}
					return this.m_sortFilterExpressionScopeInfoIndices;
				}
			}

			// Token: 0x060089EE RID: 35310 RVA: 0x00229B8A File Offset: 0x00227D8A
			internal override bool IsTargetForSort(int index, bool detailSort)
			{
				return (this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.IsTargetForSort(index, detailSort)) || this.m_outerScope.IsTargetForSort(index, detailSort);
			}

			// Token: 0x17002AC0 RID: 10944
			// (get) Token: 0x060089EF RID: 35311 RVA: 0x00229BB2 File Offset: 0x00227DB2
			ReportProcessing.IHierarchyObj ReportProcessing.IHierarchyObj.HierarchyRoot
			{
				get
				{
					return this;
				}
			}

			// Token: 0x17002AC1 RID: 10945
			// (get) Token: 0x060089F0 RID: 35312 RVA: 0x00229BB5 File Offset: 0x00227DB5
			ReportProcessing.ProcessingContext ReportProcessing.IHierarchyObj.ProcessingContext
			{
				get
				{
					return this.m_processingContext;
				}
			}

			// Token: 0x17002AC2 RID: 10946
			// (get) Token: 0x060089F1 RID: 35313 RVA: 0x00229BBD File Offset: 0x00227DBD
			// (set) Token: 0x060089F2 RID: 35314 RVA: 0x00229BD4 File Offset: 0x00227DD4
			ReportProcessing.BTreeNode ReportProcessing.IHierarchyObj.SortTree
			{
				get
				{
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortTree;
					}
					return null;
				}
				set
				{
					if (this.m_userSortTargetInfo != null)
					{
						this.m_userSortTargetInfo.SortTree = value;
						return;
					}
					Global.Tracer.Assert(false);
				}
			}

			// Token: 0x17002AC3 RID: 10947
			// (get) Token: 0x060089F3 RID: 35315 RVA: 0x00229BF6 File Offset: 0x00227DF6
			int ReportProcessing.IHierarchyObj.ExpressionIndex
			{
				get
				{
					return 0;
				}
			}

			// Token: 0x17002AC4 RID: 10948
			// (get) Token: 0x060089F4 RID: 35316 RVA: 0x00229BF9 File Offset: 0x00227DF9
			IntList ReportProcessing.IHierarchyObj.SortFilterInfoIndices
			{
				get
				{
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortFilterInfoIndices;
					}
					return null;
				}
			}

			// Token: 0x17002AC5 RID: 10949
			// (get) Token: 0x060089F5 RID: 35317 RVA: 0x00229C10 File Offset: 0x00227E10
			bool ReportProcessing.IHierarchyObj.IsDetail
			{
				get
				{
					return false;
				}
			}

			// Token: 0x060089F6 RID: 35318 RVA: 0x00229C13 File Offset: 0x00227E13
			ReportProcessing.IHierarchyObj ReportProcessing.IHierarchyObj.CreateHierarchyObj()
			{
				return new ReportProcessing.RuntimeSortHierarchyObj(this);
			}

			// Token: 0x060089F7 RID: 35319 RVA: 0x00229C1B File Offset: 0x00227E1B
			ProcessingMessageList ReportProcessing.IHierarchyObj.RegisterComparisonError(string propertyName)
			{
				return this.m_processingContext.RegisterComparisonErrorForSortFilterEvent(propertyName);
			}

			// Token: 0x060089F8 RID: 35320 RVA: 0x00229C29 File Offset: 0x00227E29
			void ReportProcessing.IHierarchyObj.NextRow()
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060089F9 RID: 35321 RVA: 0x00229C36 File Offset: 0x00227E36
			void ReportProcessing.IHierarchyObj.Traverse(ReportProcessing.ProcessingStages operation)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x060089FA RID: 35322 RVA: 0x00229C43 File Offset: 0x00227E43
			void ReportProcessing.IHierarchyObj.ReadRow()
			{
				this.ReadRow(ReportProcessing.DataActions.UserSort);
			}

			// Token: 0x060089FB RID: 35323 RVA: 0x00229C4C File Offset: 0x00227E4C
			void ReportProcessing.IHierarchyObj.ProcessUserSort()
			{
				this.m_processingContext.ProcessUserSortForTarget(this, ref this.m_dataRows, this.m_userSortTargetInfo.TargetForNonDetailSort);
				this.m_dataAction &= ~ReportProcessing.DataActions.UserSort;
				if (this.m_userSortTargetInfo.TargetForNonDetailSort)
				{
					this.m_userSortTargetInfo.ResetTargetForNonDetailSort();
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
					ReportProcessing.DataActions innerDataAction = this.m_innerDataAction;
					this.ConstructRuntimeStructure(ref innerDataAction);
					if (this.m_dataAction != ReportProcessing.DataActions.None)
					{
						this.m_dataRows = new ReportProcessing.DataRowList();
					}
					base.ScopeFinishSorting(ref this.m_firstRow, this.m_userSortTargetInfo);
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
			}

			// Token: 0x060089FC RID: 35324 RVA: 0x00229CF3 File Offset: 0x00227EF3
			void ReportProcessing.IHierarchyObj.MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.MarkSortInfoProcessed(runtimeSortFilterInfo, this);
				}
			}

			// Token: 0x060089FD RID: 35325 RVA: 0x00229D0A File Offset: 0x00227F0A
			void ReportProcessing.IHierarchyObj.AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.AddSortInfoIndex(sortInfoIndex, sortInfo);
				}
			}

			// Token: 0x060089FE RID: 35326
			protected abstract void ConstructRuntimeStructure(ref ReportProcessing.DataActions innerDataAction);

			// Token: 0x060089FF RID: 35327 RVA: 0x00229D24 File Offset: 0x00227F24
			protected ReportProcessing.DataActions HandleSortFilterEvent()
			{
				ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
				if (this.m_processingContext.IsSortFilterTarget(this.DataRegionDef.IsSortFilterTarget, this.m_outerScope, this, ref this.m_userSortTargetInfo) && this.m_userSortTargetInfo.TargetForNonDetailSort)
				{
					dataActions = ReportProcessing.DataActions.UserSort;
				}
				this.m_processingContext.RegisterSortFilterExpressionScope(this.m_outerScope, this, this.DataRegionDef.IsSortFilterExpressionScope);
				return dataActions;
			}

			// Token: 0x06008A00 RID: 35328 RVA: 0x00229D85 File Offset: 0x00227F85
			internal override bool TargetScopeMatched(int index, bool detailSort)
			{
				return this.m_outerScope.TargetScopeMatched(index, detailSort);
			}

			// Token: 0x06008A01 RID: 35329 RVA: 0x00229D94 File Offset: 0x00227F94
			internal override void GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				if (this != targetScopeObj)
				{
					this.m_outerScope.GetScopeValues(targetScopeObj, scopeValues, ref index);
				}
			}

			// Token: 0x06008A02 RID: 35330 RVA: 0x00229DA8 File Offset: 0x00227FA8
			internal override void NextRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.AggregationFieldCount == 0)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_customAggregates, false);
				}
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					base.ScopeNextAggregateRow(this.m_userSortTargetInfo);
					return;
				}
				this.NextNonAggregateRow();
			}

			// Token: 0x06008A03 RID: 35331 RVA: 0x00229E08 File Offset: 0x00228008
			private void NextNonAggregateRow()
			{
				bool flag = true;
				if (this.m_filters != null)
				{
					flag = this.m_filters.PassFilters(this.m_processingContext.ReportObjectModel.FieldsImpl.GetFields());
				}
				if (flag)
				{
					((ReportProcessing.IFilterOwner)this).PostFilterNextRow();
				}
			}

			// Token: 0x06008A04 RID: 35332 RVA: 0x00229E49 File Offset: 0x00228049
			void ReportProcessing.IFilterOwner.PostFilterNextRow()
			{
				ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
				base.ScopeNextNonAggregateRow(this.m_nonCustomAggregates, this.m_dataRows);
			}

			// Token: 0x06008A05 RID: 35333 RVA: 0x00229E7E File Offset: 0x0022807E
			internal override bool SortAndFilter()
			{
				if ((ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && this.m_dataRows != null && (this.m_outerDataAction & ReportProcessing.DataActions.RecursiveAggregates) != ReportProcessing.DataActions.None)
				{
					this.ReadRows(ReportProcessing.DataActions.RecursiveAggregates);
					base.ReleaseDataRows(ReportProcessing.DataActions.RecursiveAggregates, ref this.m_dataAction, ref this.m_dataRows);
				}
				return true;
			}

			// Token: 0x06008A06 RID: 35334 RVA: 0x00229EBC File Offset: 0x002280BC
			protected void ReadRows(ReportProcessing.DataActions action)
			{
				for (int i = 0; i < this.m_dataRows.Count; i++)
				{
					FieldImpl[] array = this.m_dataRows[i];
					this.m_processingContext.ReportObjectModel.FieldsImpl.SetFields(array);
					this.ReadRow(action);
				}
			}

			// Token: 0x06008A07 RID: 35335 RVA: 0x00229F09 File Offset: 0x00228109
			protected void SetupEnvironment(RunningValueInfoList runningValues)
			{
				base.SetupEnvironment(this.m_nonCustomAggregates, this.m_customAggregates, this.m_firstRow);
				base.SetupAggregates(this.m_postSortAggregates);
				base.SetupRunningValues(runningValues, this.m_runningValueValues);
			}

			// Token: 0x06008A08 RID: 35336 RVA: 0x00229F3C File Offset: 0x0022813C
			internal override bool InScope(string scope)
			{
				return base.DataRegionInScope(this.DataRegionDef, scope);
			}

			// Token: 0x06008A09 RID: 35337 RVA: 0x00229F4B File Offset: 0x0022814B
			protected override int GetRecursiveLevel(string scope)
			{
				return base.DataRegionRecursiveLevel(this.DataRegionDef, scope);
			}

			// Token: 0x06008A0A RID: 35338 RVA: 0x00229F5A File Offset: 0x0022815A
			protected override void GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
				base.DataRegionGetGroupNameValuePairs(this.DataRegionDef, pairs);
			}

			// Token: 0x0400492B RID: 18731
			protected ReportProcessing.IScope m_outerScope;

			// Token: 0x0400492C RID: 18732
			protected FieldImpl[] m_firstRow;

			// Token: 0x0400492D RID: 18733
			protected bool m_firstRowIsAggregate;

			// Token: 0x0400492E RID: 18734
			protected Filters m_filters;

			// Token: 0x0400492F RID: 18735
			protected DataAggregateObjList m_nonCustomAggregates;

			// Token: 0x04004930 RID: 18736
			protected DataAggregateObjList m_customAggregates;

			// Token: 0x04004931 RID: 18737
			protected ReportProcessing.DataActions m_dataAction;

			// Token: 0x04004932 RID: 18738
			protected ReportProcessing.DataActions m_outerDataAction;

			// Token: 0x04004933 RID: 18739
			protected DataAggregateObjList m_runningValues;

			// Token: 0x04004934 RID: 18740
			protected DataAggregateObjResult[] m_runningValueValues;

			// Token: 0x04004935 RID: 18741
			protected DataAggregateObjList m_postSortAggregates;

			// Token: 0x04004936 RID: 18742
			protected ReportProcessing.DataRowList m_dataRows;

			// Token: 0x04004937 RID: 18743
			protected ReportProcessing.DataActions m_innerDataAction;

			// Token: 0x04004938 RID: 18744
			protected RuntimeUserSortTargetInfo m_userSortTargetInfo;

			// Token: 0x04004939 RID: 18745
			protected int[] m_sortFilterExpressionScopeInfoIndices;
		}

		// Token: 0x02000C56 RID: 3158
		private sealed class RuntimeTableObj : ReportProcessing.RuntimeRDLDataRegionObj
		{
			// Token: 0x06008A0B RID: 35339 RVA: 0x00229F6C File Offset: 0x0022816C
			internal RuntimeTableObj(ReportProcessing.IScope outerScope, Table tableDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, bool onePassProcess)
				: base(outerScope, tableDef, ref dataAction, processingContext, onePassProcess, tableDef.RunningValues)
			{
				this.m_tableDef = tableDef;
				ReportProcessing.DataActions dataActions = base.HandleSortFilterEvent();
				if (onePassProcess)
				{
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, tableDef.PostSortAggregates, ref this.m_nonCustomAggregates);
					if (tableDef.TableDetail != null)
					{
						this.m_detailObj = new ReportProcessing.RuntimeOnePassTableDetailObj(this, tableDef, processingContext);
					}
					TableRowList tableRowList = tableDef.HeaderRows;
					if (tableRowList != null)
					{
						this.m_headerReportItemCols = new ReportProcessing.RuntimeRICollectionList(tableRowList.Count);
						for (int i = 0; i < tableRowList.Count; i++)
						{
							this.m_headerReportItemCols.Add(new ReportProcessing.RuntimeRICollection(this, tableRowList[i].ReportItems, this.m_processingContext, true));
						}
					}
					tableRowList = tableDef.FooterRows;
					if (tableRowList != null)
					{
						this.m_footerReportItemCols = new ReportProcessing.RuntimeRICollectionList(tableRowList.Count);
						for (int j = 0; j < tableRowList.Count; j++)
						{
							this.m_footerReportItemCols.Add(new ReportProcessing.RuntimeRICollection(this, tableRowList[j].ReportItems, this.m_processingContext, true));
						}
					}
				}
				else
				{
					bool flag = false;
					if (tableDef.PostSortAggregates != null)
					{
						ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, tableDef.PostSortAggregates, ref this.m_postSortAggregates);
						this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
						if (tableDef.TableDetail == null || tableDef.TableGroups != null)
						{
							flag = true;
						}
					}
					ReportProcessing.DataActions dataActions2;
					if (flag)
					{
						dataActions2 = ReportProcessing.DataActions.None;
					}
					else
					{
						dataActions2 = this.m_dataAction;
					}
					this.m_innerDataAction = dataActions2;
					this.ConstructRuntimeStructure(ref dataActions2);
					if (!flag)
					{
						this.m_dataAction = dataActions2;
					}
				}
				this.m_dataAction |= dataActions;
				if (this.m_dataAction != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x17002AC6 RID: 10950
			// (get) Token: 0x06008A0C RID: 35340 RVA: 0x0022A107 File Offset: 0x00228307
			internal TableDetailInstanceList TableDetailInstances
			{
				get
				{
					if (this.m_detailObj is ReportProcessing.RuntimeOnePassTableDetailObj)
					{
						return ((ReportProcessing.RuntimeOnePassTableDetailObj)this.m_detailObj).TableDetailInstances;
					}
					return null;
				}
			}

			// Token: 0x17002AC7 RID: 10951
			// (get) Token: 0x06008A0D RID: 35341 RVA: 0x0022A128 File Offset: 0x00228328
			internal RenderingPagesRangesList ChildrenStartAndEndPages
			{
				get
				{
					if (this.m_detailObj is ReportProcessing.RuntimeOnePassTableDetailObj)
					{
						return ((ReportProcessing.RuntimeOnePassTableDetailObj)this.m_detailObj).ChildrenStartAndEndPages;
					}
					return null;
				}
			}

			// Token: 0x17002AC8 RID: 10952
			// (get) Token: 0x06008A0E RID: 35342 RVA: 0x0022A149 File Offset: 0x00228349
			protected override string ScopeName
			{
				get
				{
					return this.m_tableDef.Name;
				}
			}

			// Token: 0x17002AC9 RID: 10953
			// (get) Token: 0x06008A0F RID: 35343 RVA: 0x0022A156 File Offset: 0x00228356
			protected override Microsoft.ReportingServices.ReportProcessing.DataRegion DataRegionDef
			{
				get
				{
					return this.m_tableDef;
				}
			}

			// Token: 0x06008A10 RID: 35344 RVA: 0x0022A160 File Offset: 0x00228360
			protected override void ConstructRuntimeStructure(ref ReportProcessing.DataActions innerDataAction)
			{
				if (this.m_tableDef.TableGroups != null)
				{
					this.m_tableGroups = new ReportProcessing.RuntimeTableGroupRootObj(this, this.m_tableDef.TableGroups, ref innerDataAction, this.m_processingContext);
				}
				else if (this.m_tableDef.TableDetail != null)
				{
					innerDataAction = this.m_dataAction;
					this.m_detailObj = new ReportProcessing.RuntimeTableDetailObj(this, this.m_tableDef, ref innerDataAction, this.m_processingContext);
				}
				TableRowList tableRowList = this.m_tableDef.HeaderRows;
				if (tableRowList != null)
				{
					this.m_headerReportItemCols = new ReportProcessing.RuntimeRICollectionList(tableRowList.Count);
					for (int i = 0; i < tableRowList.Count; i++)
					{
						ReportProcessing.RuntimeRICollection runtimeRICollection = new ReportProcessing.RuntimeRICollection(this, tableRowList[i].ReportItems, ref innerDataAction, this.m_processingContext, true);
						this.m_headerReportItemCols.Add(runtimeRICollection);
					}
				}
				tableRowList = this.m_tableDef.FooterRows;
				if (tableRowList != null)
				{
					this.m_footerReportItemCols = new ReportProcessing.RuntimeRICollectionList(tableRowList.Count);
					for (int j = 0; j < tableRowList.Count; j++)
					{
						ReportProcessing.RuntimeRICollection runtimeRICollection = new ReportProcessing.RuntimeRICollection(this, tableRowList[j].ReportItems, ref innerDataAction, this.m_processingContext, true);
						this.m_footerReportItemCols.Add(runtimeRICollection);
					}
				}
			}

			// Token: 0x06008A11 RID: 35345 RVA: 0x0022A27C File Offset: 0x0022847C
			protected override void SendToInner()
			{
				if (this.m_headerReportItemCols != null)
				{
					this.m_headerReportItemCols.FirstPassNextDataRow();
				}
				if (this.m_footerReportItemCols != null)
				{
					this.m_footerReportItemCols.FirstPassNextDataRow();
				}
				if (this.m_tableGroups != null)
				{
					this.m_tableGroups.NextRow();
				}
				if (this.m_detailObj != null)
				{
					this.m_detailObj.NextRow();
				}
			}

			// Token: 0x06008A12 RID: 35346 RVA: 0x0022A2D8 File Offset: 0x002284D8
			internal override bool SortAndFilter()
			{
				this.SetupEnvironment();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
				}
				if (this.m_tableGroups != null)
				{
					this.m_tableGroups.SortAndFilter();
				}
				if (this.m_detailObj != null)
				{
					this.m_detailObj.SortAndFilter();
				}
				bool flag = base.SortAndFilter();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
				return flag;
			}

			// Token: 0x06008A13 RID: 35347 RVA: 0x0022A34C File Offset: 0x0022854C
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.UserSort == dataAction)
				{
					ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
					base.CommonNextRow(this.m_dataRows);
					return;
				}
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction)
				{
					if (this.m_postSortAggregates != null)
					{
						ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_postSortAggregates, false);
					}
					if (this.m_runningValues != null)
					{
						for (int i = 0; i < this.m_runningValues.Count; i++)
						{
							this.m_runningValues[i].Update();
						}
					}
					this.CalculatePreviousAggregates();
				}
				if (this.m_outerScope != null && (dataAction & this.m_outerDataAction) != ReportProcessing.DataActions.None)
				{
					this.m_outerScope.ReadRow(dataAction);
				}
			}

			// Token: 0x06008A14 RID: 35348 RVA: 0x0022A3FC File Offset: 0x002285FC
			private void CalculatePreviousAggregates()
			{
				if (!this.m_processedPreviousAggregates && this.m_processingContext.GlobalRVCollection != null)
				{
					Global.Tracer.Assert(this.m_runningValueValues == null, "(null == m_runningValueValues)");
					RunningValueInfoList runningValues = this.m_tableDef.RunningValues;
					if (runningValues != null && 0 < runningValues.Count)
					{
						ReportProcessing.RuntimeRICollection.DoneReadingRows(this.m_processingContext.GlobalRVCollection, runningValues, ref this.m_runningValueValues, true);
					}
					if (this.m_headerReportItemCols != null)
					{
						this.m_headerReportItemCols.CalculatePreviousAggregates(this.m_processingContext.GlobalRVCollection);
					}
					if (this.m_footerReportItemCols != null)
					{
						this.m_footerReportItemCols.CalculatePreviousAggregates(this.m_processingContext.GlobalRVCollection);
					}
					this.m_processedPreviousAggregates = true;
				}
			}

			// Token: 0x06008A15 RID: 35349 RVA: 0x0022A4B0 File Offset: 0x002286B0
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_tableDef.RunningValues != null)
				{
					ReportProcessing.RuntimeDetailObj.AddRunningValues(this.m_processingContext, this.m_tableDef.RunningValues, ref this.m_runningValues, globalRVCol, groupCol, lastGroup);
				}
				if (this.m_headerReportItemCols != null)
				{
					this.m_headerReportItemCols.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
				if (this.m_footerReportItemCols != null)
				{
					this.m_footerReportItemCols.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
				if (this.m_tableGroups != null)
				{
					this.m_tableGroups.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
				if (this.m_detailObj != null)
				{
					this.m_detailObj.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
				if (this.m_dataRows != null)
				{
					base.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
					this.m_dataRows = null;
				}
				ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, this.m_tableDef.RunningValues, ref this.m_runningValueValues, false);
			}

			// Token: 0x06008A16 RID: 35350 RVA: 0x0022A570 File Offset: 0x00228770
			internal static void CreateRowInstances(ReportProcessing.ProcessingContext processingContext, ReportProcessing.RuntimeRICollectionList rowRICols, TableRowInstance[] rowInstances, bool repeatOnNewPages, bool enterGrouping)
			{
				if (rowRICols != null)
				{
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == processingContext.ShowHideType && enterGrouping)
					{
						processingContext.EnterGrouping();
					}
					for (int i = 0; i < rowRICols.Count; i++)
					{
						if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == processingContext.ShowHideType)
						{
							((IShowHideContainer)rowInstances[i]).BeginProcessContainer(processingContext);
						}
						processingContext.Pagination.EnterIgnorePageBreak(null, true);
						processingContext.Pagination.EnterIgnoreHeight(true);
						processingContext.PageSectionContext.EnterVisibilityScope(rowInstances[i].TableRowDef.Visibility, rowInstances[i].TableRowDef.StartHidden);
						IntList tableColumnSpans = processingContext.PageSectionContext.TableColumnSpans;
						processingContext.PageSectionContext.TableColumnSpans = rowInstances[i].TableRowDef.ColSpans;
						rowRICols[i].CreateInstances(rowInstances[i].TableRowReportItemColInstance, true, repeatOnNewPages);
						processingContext.PageSectionContext.TableColumnSpans = tableColumnSpans;
						processingContext.PageSectionContext.ExitVisibilityScope();
						processingContext.Pagination.LeaveIgnoreHeight(true);
						processingContext.Pagination.LeaveIgnorePageBreak(null, true);
						if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == processingContext.ShowHideType)
						{
							((IShowHideContainer)rowInstances[i]).EndProcessContainer(processingContext);
						}
					}
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == processingContext.ShowHideType && enterGrouping)
					{
						processingContext.ExitGrouping();
					}
				}
			}

			// Token: 0x06008A17 RID: 35351 RVA: 0x0022A690 File Offset: 0x00228890
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
				this.SetupEnvironment();
				TableInstance tableInstance = (TableInstance)riInstance;
				Table table = (Table)tableInstance.ReportItemDef;
				this.m_processingContext.Pagination.InitProcessTableRenderingPages(tableInstance, table);
				this.m_processingContext.PageSectionContext.RegisterTableColumnVisibility(this.m_processingContext.IsOnePass, table.TableColumns, table.ColumnsStartHidden);
				this.m_processingContext.PageSectionContext.EnterRepeatingItem();
				ReportProcessing.RuntimeTableObj.CreateRowInstances(this.m_processingContext, this.m_headerReportItemCols, tableInstance.HeaderRowInstances, table.HeaderRepeatOnNewPage, false);
				ReportProcessing.PageTextboxes pageTextboxes = this.m_processingContext.PageSectionContext.ExitRepeatingItem();
				this.m_processingContext.PageSectionContext.EnterRepeatingItem();
				ReportProcessing.RuntimeTableObj.CreateRowInstances(this.m_processingContext, this.m_footerReportItemCols, tableInstance.FooterRowInstances, table.FooterRepeatOnNewPage, false);
				ReportProcessing.PageTextboxes pageTextboxes2 = this.m_processingContext.PageSectionContext.ExitRepeatingItem();
				bool delayAddingInstanceInfo = this.m_processingContext.DelayAddingInstanceInfo;
				this.m_processingContext.DelayAddingInstanceInfo = false;
				if (this.m_tableGroups != null)
				{
					this.m_tableGroups.CreateInstances(tableInstance, tableInstance.TableGroupInstances, tableInstance.ChildrenStartAndEndPages);
					this.m_tableGroups = null;
				}
				else if (this.m_detailObj != null)
				{
					int num = 0;
					if (this.m_detailObj is ReportProcessing.RuntimeDetailObj)
					{
						((ReportProcessing.RuntimeDetailObj)this.m_detailObj).CreateInstances(tableInstance, tableInstance.TableDetailInstances, tableInstance.ChildrenStartAndEndPages, out num);
						tableInstance.NumberOfChildrenOnThisPage = num;
					}
					else
					{
						RenderingPagesRangesList childrenStartAndEndPages = tableInstance.ChildrenStartAndEndPages;
						this.m_detailObj.CreateInstances(tableInstance, tableInstance.TableDetailInstances, childrenStartAndEndPages);
						Global.Tracer.Assert(this.m_detailObj is ReportProcessing.RuntimeOnePassTableDetailObj, "(m_detailObj is RuntimeOnePassTableDetailObj)");
						ReportProcessing.RuntimeOnePassTableDetailObj runtimeOnePassTableDetailObj = (ReportProcessing.RuntimeOnePassTableDetailObj)this.m_detailObj;
						if (childrenStartAndEndPages != null && (!this.m_processingContext.PageSectionContext.IsParentVisible() || !Microsoft.ReportingServices.ReportProcessing.Visibility.IsOnePassHierarchyVisible(tableInstance.ReportItemDef)))
						{
							runtimeOnePassTableDetailObj.MoveAllToFirstPage();
							int num2 = ((tableInstance.TableDetailInstances != null) ? tableInstance.TableDetailInstances.Count : 0);
							childrenStartAndEndPages.MoveAllToFirstPage(num2);
							runtimeOnePassTableDetailObj.NumberOfContentsOnThisPage = 0;
						}
						num = (tableInstance.NumberOfChildrenOnThisPage = runtimeOnePassTableDetailObj.NumberOfContentsOnThisPage);
						if (num > 0)
						{
							if (childrenStartAndEndPages != null && 0 < childrenStartAndEndPages.Count)
							{
								this.m_processingContext.Pagination.SetCurrentPageHeight(table, runtimeOnePassTableDetailObj.Pagination.CurrentPageHeight);
							}
							else
							{
								this.m_processingContext.Pagination.AddToCurrentPageHeight(table, runtimeOnePassTableDetailObj.Pagination.CurrentPageHeight);
							}
						}
						this.m_processingContext.NavigationInfo.AppendNavigationInfo(this.m_processingContext.NavigationInfo.CurrentLabel, runtimeOnePassTableDetailObj.NavigationInfo, table.StartPage);
					}
					if (num > 0)
					{
						RenderingPagesRanges renderingPagesRanges = default(RenderingPagesRanges);
						renderingPagesRanges.StartRow = tableInstance.TableDetailInstances.Count - num;
						renderingPagesRanges.NumberOfDetails = num;
						tableInstance.ChildrenStartAndEndPages.Add(renderingPagesRanges);
					}
					if (this.m_detailObj is ReportProcessing.RuntimeOnePassTableDetailObj)
					{
						RenderingPagesRangesList childrenStartAndEndPages2 = tableInstance.ChildrenStartAndEndPages;
						ReportProcessing.RuntimeOnePassDetailObj runtimeOnePassDetailObj = this.m_detailObj as ReportProcessing.RuntimeOnePassDetailObj;
						if (childrenStartAndEndPages2 != null && 0 < childrenStartAndEndPages2.Count)
						{
							tableInstance.CurrentPage = (table.CurrentPage = table.StartPage + childrenStartAndEndPages2.Count - 1);
							if (this.m_processingContext.PageSectionContext.IsParentVisible())
							{
								for (int i = 0; i < childrenStartAndEndPages2.Count; i++)
								{
									runtimeOnePassDetailObj.ProcessOnePassDetailTextboxes(i, table.StartPage + i);
								}
							}
						}
						else
						{
							tableInstance.CurrentPage = (table.CurrentPage = table.StartPage);
							if (this.m_processingContext.PageSectionContext.IsParentVisible() && tableInstance.TableDetailInstances != null)
							{
								runtimeOnePassDetailObj.ProcessOnePassDetailTextboxes(0, tableInstance.CurrentPage);
							}
						}
					}
					this.m_detailObj = null;
				}
				this.m_processingContext.PageSectionContext.UnregisterTableColumnVisibility();
				Global.Tracer.Assert(table.StartPage <= table.CurrentPage, "(tableDef.StartPage <= tableDef.CurrentPage)");
				if (this.m_processingContext.PageSectionContext.PageTextboxes != null)
				{
					this.m_processingContext.PageSectionContext.PageTextboxes.IntegrateRepeatingTextboxValues(pageTextboxes, table.StartPage, table.HeaderRepeatOnNewPage ? table.CurrentPage : table.StartPage);
					this.m_processingContext.PageSectionContext.PageTextboxes.IntegrateRepeatingTextboxValues(pageTextboxes2, table.FooterRepeatOnNewPage ? table.StartPage : table.CurrentPage, table.CurrentPage);
				}
				this.m_processingContext.DelayAddingInstanceInfo = delayAddingInstanceInfo;
			}

			// Token: 0x06008A18 RID: 35352 RVA: 0x0022AAE5 File Offset: 0x00228CE5
			internal override void SetupEnvironment()
			{
				base.SetupEnvironment(this.m_tableDef.RunningValues);
			}

			// Token: 0x06008A19 RID: 35353 RVA: 0x0022AAF8 File Offset: 0x00228CF8
			internal void ResetReportItems()
			{
				if (this.m_headerReportItemCols != null)
				{
					this.m_headerReportItemCols.ResetReportItemObjs();
				}
				if (this.m_footerReportItemCols != null)
				{
					this.m_footerReportItemCols.ResetReportItemObjs();
				}
				this.m_headerReportItemCols = null;
				this.m_footerReportItemCols = null;
			}

			// Token: 0x0400493A RID: 18746
			private Table m_tableDef;

			// Token: 0x0400493B RID: 18747
			private ReportProcessing.RuntimeGroupRootObj m_tableGroups;

			// Token: 0x0400493C RID: 18748
			private ReportProcessing.RuntimeDataRegionObj m_detailObj;

			// Token: 0x0400493D RID: 18749
			private ReportProcessing.RuntimeRICollectionList m_headerReportItemCols;

			// Token: 0x0400493E RID: 18750
			private ReportProcessing.RuntimeRICollectionList m_footerReportItemCols;
		}

		// Token: 0x02000C57 RID: 3159
		private sealed class RuntimeTableGroupRootObj : ReportProcessing.RuntimeGroupRootObj
		{
			// Token: 0x06008A1A RID: 35354 RVA: 0x0022AB30 File Offset: 0x00228D30
			internal RuntimeTableGroupRootObj(ReportProcessing.IScope outerScope, TableGroup tableGroupDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext)
				: base(outerScope, tableGroupDef, dataAction, processingContext)
			{
				if (tableGroupDef.RunningValues != null && 0 < tableGroupDef.RunningValues.Count)
				{
					this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
				}
				if ((this.m_dataAction & ReportProcessing.DataActions.PostSortAggregates) == ReportProcessing.DataActions.None && tableGroupDef.HeaderRows != null)
				{
					for (int i = 0; i < tableGroupDef.HeaderRows.Count; i++)
					{
						if (tableGroupDef.HeaderRows[i].ReportItems.RunningValues != null && 0 < tableGroupDef.HeaderRows[i].ReportItems.RunningValues.Count)
						{
							this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
							break;
						}
					}
				}
				if ((this.m_dataAction & ReportProcessing.DataActions.PostSortAggregates) == ReportProcessing.DataActions.None && tableGroupDef.FooterRows != null)
				{
					for (int j = 0; j < tableGroupDef.FooterRows.Count; j++)
					{
						if (tableGroupDef.FooterRows[j].ReportItems.RunningValues != null && 0 < tableGroupDef.FooterRows[j].ReportItems.RunningValues.Count)
						{
							this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
							break;
						}
					}
				}
				if (tableGroupDef.Grouping.Filters == null)
				{
					dataAction = ReportProcessing.DataActions.None;
				}
			}

			// Token: 0x06008A1B RID: 35355 RVA: 0x0022AC5C File Offset: 0x00228E5C
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				TableGroup tableGroup = (TableGroup)this.m_hierarchyDef;
				if (tableGroup.HeaderRows != null)
				{
					for (int i = 0; i < tableGroup.HeaderRows.Count; i++)
					{
						base.AddRunningValues(tableGroup.HeaderRows[i].ReportItems.RunningValues);
					}
				}
				if (tableGroup.FooterRows != null)
				{
					for (int j = 0; j < tableGroup.FooterRows.Count; j++)
					{
						base.AddRunningValues(tableGroup.FooterRows[j].ReportItems.RunningValues);
					}
				}
				base.AddRunningValues(tableGroup.RunningValues);
				this.m_grouping.Traverse(ReportProcessing.ProcessingStages.RunningValues, this.m_expression.Direction);
			}
		}

		// Token: 0x02000C58 RID: 3160
		private sealed class RuntimeTableGroupLeafObj : ReportProcessing.RuntimeGroupLeafObj
		{
			// Token: 0x06008A1C RID: 35356 RVA: 0x0022AD18 File Offset: 0x00228F18
			internal RuntimeTableGroupLeafObj(ReportProcessing.RuntimeTableGroupRootObj groupRoot)
				: base(groupRoot)
			{
				this.m_dataAction = groupRoot.DataAction;
				bool flag = false;
				bool flag2 = base.HandleSortFilterEvent();
				ReportProcessing.DataActions dataActions;
				this.ConstructRuntimeStructure(ref flag, out dataActions);
				if (!flag)
				{
					this.m_dataAction = dataActions;
				}
				if (flag2)
				{
					this.m_dataAction |= ReportProcessing.DataActions.UserSort;
				}
				if (this.m_dataAction != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x06008A1D RID: 35357 RVA: 0x0022AD80 File Offset: 0x00228F80
			protected override void ConstructRuntimeStructure(ref bool handleMyDataAction, out ReportProcessing.DataActions innerDataAction)
			{
				TableGroup tableGroup = (TableGroup)((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HierarchyDef;
				base.ConstructRuntimeStructure(ref handleMyDataAction, out innerDataAction);
				if (tableGroup.InnerHierarchy != null)
				{
					this.m_innerHierarchy = new ReportProcessing.RuntimeTableGroupRootObj(this, (TableGroup)tableGroup.InnerHierarchy, ref innerDataAction, this.m_processingContext);
				}
				else if (((Table)tableGroup.DataRegionDef).TableDetail != null)
				{
					this.m_innerHierarchy = new ReportProcessing.RuntimeTableDetailObj(this, (Table)tableGroup.DataRegionDef, ref innerDataAction, this.m_processingContext);
				}
				TableRowList tableRowList = tableGroup.HeaderRows;
				if (tableRowList != null)
				{
					this.m_headerReportItemCols = new ReportProcessing.RuntimeRICollectionList(tableRowList.Count);
					for (int i = 0; i < tableRowList.Count; i++)
					{
						ReportProcessing.RuntimeRICollection runtimeRICollection = new ReportProcessing.RuntimeRICollection(this, tableRowList[i].ReportItems, ref innerDataAction, this.m_processingContext, true);
						this.m_headerReportItemCols.Add(runtimeRICollection);
					}
				}
				tableRowList = tableGroup.FooterRows;
				if (tableRowList != null)
				{
					this.m_footerReportItemCols = new ReportProcessing.RuntimeRICollectionList(tableRowList.Count);
					for (int j = 0; j < tableRowList.Count; j++)
					{
						ReportProcessing.RuntimeRICollection runtimeRICollection = new ReportProcessing.RuntimeRICollection(this, tableRowList[j].ReportItems, ref innerDataAction, this.m_processingContext, true);
						this.m_footerReportItemCols.Add(runtimeRICollection);
					}
				}
			}

			// Token: 0x06008A1E RID: 35358 RVA: 0x0022AEB0 File Offset: 0x002290B0
			protected override void SendToInner()
			{
				base.SendToInner();
				if (this.m_headerReportItemCols != null)
				{
					this.m_headerReportItemCols.FirstPassNextDataRow();
				}
				if (this.m_footerReportItemCols != null)
				{
					this.m_footerReportItemCols.FirstPassNextDataRow();
				}
				if (this.m_innerHierarchy != null)
				{
					this.m_innerHierarchy.NextRow();
				}
			}

			// Token: 0x06008A1F RID: 35359 RVA: 0x0022AEFC File Offset: 0x002290FC
			internal override bool SortAndFilter()
			{
				this.SetupEnvironment();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
				}
				if (this.m_headerReportItemCols != null)
				{
					for (int i = 0; i < this.m_headerReportItemCols.Count; i++)
					{
						this.m_headerReportItemCols[i].SortAndFilter();
					}
				}
				if (this.m_footerReportItemCols != null)
				{
					for (int j = 0; j < this.m_footerReportItemCols.Count; j++)
					{
						this.m_footerReportItemCols[j].SortAndFilter();
					}
				}
				if (this.m_innerHierarchy != null)
				{
					this.m_innerHierarchy.SortAndFilter();
				}
				bool flag = base.SortAndFilter();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
				return flag;
			}

			// Token: 0x06008A20 RID: 35360 RVA: 0x0022AFBC File Offset: 0x002291BC
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.UserSort == dataAction)
				{
					ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
					base.CommonNextRow(this.m_dataRows);
					return;
				}
				base.ReadRow(dataAction);
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction)
				{
					this.CalculatePreviousAggregates();
				}
			}

			// Token: 0x06008A21 RID: 35361 RVA: 0x0022B00C File Offset: 0x0022920C
			private void CalculatePreviousAggregates()
			{
				if (!this.m_processedPreviousAggregates && this.m_processingContext.GlobalRVCollection != null)
				{
					Global.Tracer.Assert(this.m_runningValueValues == null, "(null == m_runningValueValues)");
					RunningValueInfoList runningValues = ((TableGroup)((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HierarchyDef).RunningValues;
					if (runningValues != null && 0 < runningValues.Count)
					{
						ReportProcessing.RuntimeRICollection.DoneReadingRows(this.m_processingContext.GlobalRVCollection, runningValues, ref this.m_runningValueValues, true);
					}
					if (this.m_headerReportItemCols != null)
					{
						this.m_headerReportItemCols.CalculatePreviousAggregates(this.m_processingContext.GlobalRVCollection);
					}
					if (this.m_footerReportItemCols != null)
					{
						this.m_footerReportItemCols.CalculatePreviousAggregates(this.m_processingContext.GlobalRVCollection);
					}
					this.m_processedPreviousAggregates = true;
				}
			}

			// Token: 0x06008A22 RID: 35362 RVA: 0x0022B0D0 File Offset: 0x002292D0
			internal override void CalculateRunningValues()
			{
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
				AggregatesImpl globalRunningValueCollection = runtimeGroupRootObj.GlobalRunningValueCollection;
				ReportProcessing.RuntimeGroupRootObjList groupCollection = runtimeGroupRootObj.GroupCollection;
				if (this.m_innerHierarchy != null)
				{
					this.m_innerHierarchy.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimeGroupRootObj);
				}
				if (this.m_dataRows != null)
				{
					base.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
					this.m_dataRows = null;
				}
				if (this.m_headerReportItemCols != null)
				{
					this.m_headerReportItemCols.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimeGroupRootObj);
				}
				if (this.m_footerReportItemCols != null)
				{
					this.m_footerReportItemCols.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimeGroupRootObj);
				}
				RunningValueInfoList runningValues = ((TableGroup)runtimeGroupRootObj.HierarchyDef).RunningValues;
				if (runningValues != null && 0 < runningValues.Count)
				{
					ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRunningValueCollection, runningValues, ref this.m_runningValueValues, false);
				}
				base.CalculateRunningValues();
			}

			// Token: 0x06008A23 RID: 35363 RVA: 0x0022B180 File Offset: 0x00229380
			internal override void CreateInstance()
			{
				this.SetupEnvironment();
				ReportProcessing.RuntimeGroupRootObj runtimeGroupRootObj = (ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot;
				TableInstance tableInstance = (TableInstance)runtimeGroupRootObj.ReportItemInstance;
				Table table = (Table)tableInstance.ReportItemDef;
				IList instanceList = runtimeGroupRootObj.InstanceList;
				TableGroup tableGroup = (TableGroup)runtimeGroupRootObj.HierarchyDef;
				this.m_processingContext.ChunkManager.CheckPageBreak(tableGroup, true);
				base.SetupRunningValues(tableGroup.RunningValues, this.m_runningValueValues);
				this.m_tableGroupInstance = new TableGroupInstance(this.m_processingContext, tableGroup);
				RenderingPagesRanges renderingPagesRanges = default(RenderingPagesRanges);
				this.m_processingContext.Pagination.InitProcessingTableGroup(tableInstance, table, this.m_tableGroupInstance, tableGroup, ref renderingPagesRanges, instanceList.Count == 0);
				this.m_startPage = renderingPagesRanges.StartPage;
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.EnterGrouping();
					((IShowHideContainer)this.m_tableGroupInstance).BeginProcessContainer(this.m_processingContext);
				}
				if (tableGroup.Grouping.GroupLabel != null)
				{
					this.m_label = this.m_processingContext.NavigationInfo.CurrentLabel;
					if (this.m_label != null)
					{
						this.m_processingContext.NavigationInfo.EnterDocumentMapChildren();
					}
				}
				this.m_processingContext.PageSectionContext.EnterVisibilityScope(tableGroup.Visibility, tableGroup.StartHidden);
				this.m_processingContext.PageSectionContext.EnterRepeatingItem();
				ReportProcessing.RuntimeTableObj.CreateRowInstances(this.m_processingContext, this.m_headerReportItemCols, this.m_tableGroupInstance.HeaderRowInstances, tableGroup.HeaderRepeatOnNewPage, false);
				ReportProcessing.PageTextboxes pageTextboxes = this.m_processingContext.PageSectionContext.ExitRepeatingItem();
				this.m_processingContext.PageSectionContext.EnterRepeatingItem();
				ReportProcessing.RuntimeTableObj.CreateRowInstances(this.m_processingContext, this.m_footerReportItemCols, this.m_tableGroupInstance.FooterRowInstances, tableGroup.FooterRepeatOnNewPage, false);
				ReportProcessing.PageTextboxes pageTextboxes2 = this.m_processingContext.PageSectionContext.ExitRepeatingItem();
				if (this.m_innerHierarchy != null)
				{
					if (this.m_tableGroupInstance.SubGroupInstances != null)
					{
						this.m_innerHierarchy.CreateInstances(tableInstance, this.m_tableGroupInstance.SubGroupInstances, this.m_tableGroupInstance.ChildrenStartAndEndPages);
					}
					else
					{
						Global.Tracer.Assert(this.m_innerHierarchy is ReportProcessing.RuntimeDetailObj, "(m_innerHierarchy is RuntimeDetailObj)");
						int num = 0;
						((ReportProcessing.RuntimeDetailObj)this.m_innerHierarchy).CreateInstances(tableInstance, this.m_tableGroupInstance.TableDetailInstances, this.m_tableGroupInstance.ChildrenStartAndEndPages, out num);
						this.m_tableGroupInstance.NumberOfChildrenOnThisPage = num;
						if (num > 0)
						{
							RenderingPagesRanges renderingPagesRanges2 = default(RenderingPagesRanges);
							renderingPagesRanges2.StartRow = this.m_tableGroupInstance.TableDetailInstances.Count - num;
							renderingPagesRanges2.NumberOfDetails = num;
							this.m_tableGroupInstance.ChildrenStartAndEndPages.Add(renderingPagesRanges2);
						}
					}
				}
				this.m_processingContext.PageSectionContext.ExitVisibilityScope();
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					((IShowHideContainer)this.m_tableGroupInstance).EndProcessContainer(this.m_processingContext);
					this.m_processingContext.ExitGrouping();
				}
				this.m_processingContext.ChunkManager.CheckPageBreak(tableGroup, false);
				double footerHeightValue = tableGroup.FooterHeightValue;
				tableGroup.EndPage = tableInstance.CurrentPage;
				this.m_processingContext.Pagination.ProcessEndGroupPage(footerHeightValue, tableGroup.PropagatedPageBreakAtEnd || tableGroup.Grouping.PageBreakAtEnd, table, this.m_tableGroupInstance.NumberOfChildrenOnThisPage > 0, tableGroup.StartHidden);
				renderingPagesRanges.EndPage = tableGroup.EndPage;
				runtimeGroupRootObj.PagesList.Add(renderingPagesRanges);
				if (this.m_processingContext.PageSectionContext.PageTextboxes != null)
				{
					this.m_processingContext.PageSectionContext.PageTextboxes.IntegrateRepeatingTextboxValues(pageTextboxes, renderingPagesRanges.StartPage, tableGroup.HeaderRepeatOnNewPage ? renderingPagesRanges.EndPage : renderingPagesRanges.StartPage);
					this.m_processingContext.PageSectionContext.PageTextboxes.IntegrateRepeatingTextboxValues(pageTextboxes2, tableGroup.FooterRepeatOnNewPage ? renderingPagesRanges.StartPage : renderingPagesRanges.EndPage, renderingPagesRanges.EndPage);
				}
				this.m_processingContext.Pagination.LeaveIgnorePageBreak(tableGroup.Visibility, false);
				instanceList.Add(this.m_tableGroupInstance);
				if (this.m_headerReportItemCols != null)
				{
					this.m_headerReportItemCols.ResetReportItemObjs();
				}
				if (this.m_footerReportItemCols != null)
				{
					this.m_footerReportItemCols.ResetReportItemObjs();
				}
				base.ResetReportItemsWithHideDuplicates();
			}

			// Token: 0x06008A24 RID: 35364 RVA: 0x0022B5AA File Offset: 0x002297AA
			protected override void AddToDocumentMap()
			{
				if (base.GroupingDef.GroupLabel != null && this.m_label != null)
				{
					this.m_processingContext.NavigationInfo.AddToDocumentMap(this.m_tableGroupInstance.UniqueName, true, this.m_startPage, this.m_label);
				}
			}

			// Token: 0x0400493F RID: 18751
			private ReportProcessing.RuntimeRICollectionList m_headerReportItemCols;

			// Token: 0x04004940 RID: 18752
			private ReportProcessing.RuntimeRICollectionList m_footerReportItemCols;

			// Token: 0x04004941 RID: 18753
			private ReportProcessing.RuntimeHierarchyObj m_innerHierarchy;

			// Token: 0x04004942 RID: 18754
			private DataAggregateObjResult[] m_runningValueValues;

			// Token: 0x04004943 RID: 18755
			private TableGroupInstance m_tableGroupInstance;

			// Token: 0x04004944 RID: 18756
			private string m_label;

			// Token: 0x04004945 RID: 18757
			private int m_startPage = -1;
		}

		// Token: 0x02000C59 RID: 3161
		private sealed class RuntimeTableDetailObj : ReportProcessing.RuntimeDetailObj, ReportProcessing.ISortDataHolder
		{
			// Token: 0x06008A25 RID: 35365 RVA: 0x0022B5EC File Offset: 0x002297EC
			internal RuntimeTableDetailObj(ReportProcessing.IScope outerScope, Table tableDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext)
				: base(outerScope, tableDef, dataAction, processingContext)
			{
				bool flag = false;
				this.m_detailDef = tableDef.TableDetail;
				if (this.m_detailDef.RunningValues != null && 0 < this.m_detailDef.RunningValues.Count)
				{
					flag = true;
				}
				if (!flag && this.m_detailDef.DetailRows != null)
				{
					for (int i = 0; i < this.m_detailDef.DetailRows.Count; i++)
					{
						if (this.m_detailDef.DetailRows[i].ReportItems.RunningValues != null && 0 < this.m_detailDef.DetailRows[i].ReportItems.RunningValues.Count)
						{
							flag = true;
							break;
						}
					}
				}
				if (flag)
				{
					this.m_rvValueList = new DataAggregateObjResultsList();
				}
				base.HandleSortFilterEvent(ref this.m_userSortTargetInfo);
				if (this.m_userSortTargetInfo == null && this.m_detailDef.Sorting != null && 0 < this.m_detailDef.Sorting.SortExpressions.Count)
				{
					this.m_expression = new ReportProcessing.RuntimeExpressionInfo(this.m_detailDef.Sorting.SortExpressions, this.m_detailDef.Sorting.ExprHost, this.m_detailDef.Sorting.SortDirections, 0);
					this.m_grouping = new ReportProcessing.RuntimeGroupingObj(this, ReportProcessing.RuntimeGroupingObj.GroupingTypes.Sort);
				}
				dataAction = ReportProcessing.DataActions.None;
			}

			// Token: 0x06008A26 RID: 35366 RVA: 0x0022B737 File Offset: 0x00229937
			internal RuntimeTableDetailObj(ReportProcessing.RuntimeTableDetailObj detailRoot)
				: base(detailRoot)
			{
				this.m_detailDef = detailRoot.m_detailDef;
			}

			// Token: 0x17002ACA RID: 10954
			// (get) Token: 0x06008A27 RID: 35367 RVA: 0x0022B74C File Offset: 0x0022994C
			internal override ExpressionInfoList SortExpressions
			{
				get
				{
					Sorting sorting = ((Table)this.m_dataRegionDef).TableDetail.Sorting;
					if (sorting != null && 0 < sorting.SortExpressions.Count)
					{
						return sorting.SortExpressions;
					}
					return null;
				}
			}

			// Token: 0x17002ACB RID: 10955
			// (get) Token: 0x06008A28 RID: 35368 RVA: 0x0022B788 File Offset: 0x00229988
			internal override SortingExprHost SortExpressionHost
			{
				get
				{
					Sorting sorting = ((Table)this.m_dataRegionDef).TableDetail.Sorting;
					if (sorting != null)
					{
						return sorting.ExprHost;
					}
					return null;
				}
			}

			// Token: 0x17002ACC RID: 10956
			// (get) Token: 0x06008A29 RID: 35369 RVA: 0x0022B7B8 File Offset: 0x002299B8
			internal override BoolList SortDirections
			{
				get
				{
					Sorting sorting = ((Table)this.m_dataRegionDef).TableDetail.Sorting;
					if (sorting != null && 0 < sorting.SortDirections.Count)
					{
						return sorting.SortDirections;
					}
					return null;
				}
			}

			// Token: 0x17002ACD RID: 10957
			// (get) Token: 0x06008A2A RID: 35370 RVA: 0x0022B7F4 File Offset: 0x002299F4
			// (set) Token: 0x06008A2B RID: 35371 RVA: 0x0022B81F File Offset: 0x00229A1F
			protected override ReportProcessing.BTreeNode SortTree
			{
				get
				{
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortTree;
					}
					if (this.m_grouping != null)
					{
						return this.m_grouping.Tree;
					}
					return null;
				}
				set
				{
					if (this.m_userSortTargetInfo != null)
					{
						this.m_userSortTargetInfo.SortTree = value;
						return;
					}
					if (this.m_grouping != null)
					{
						this.m_grouping.Tree = value;
						return;
					}
					Global.Tracer.Assert(false);
				}
			}

			// Token: 0x17002ACE RID: 10958
			// (get) Token: 0x06008A2C RID: 35372 RVA: 0x0022B856 File Offset: 0x00229A56
			protected override int ExpressionIndex
			{
				get
				{
					return 0;
				}
			}

			// Token: 0x17002ACF RID: 10959
			// (get) Token: 0x06008A2D RID: 35373 RVA: 0x0022B859 File Offset: 0x00229A59
			protected override IntList SortFilterInfoIndices
			{
				get
				{
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortFilterInfoIndices;
					}
					return null;
				}
			}

			// Token: 0x06008A2E RID: 35374 RVA: 0x0022B870 File Offset: 0x00229A70
			void ReportProcessing.ISortDataHolder.NextRow()
			{
				this.NextRow();
			}

			// Token: 0x06008A2F RID: 35375 RVA: 0x0022B878 File Offset: 0x00229A78
			void ReportProcessing.ISortDataHolder.Traverse(ReportProcessing.ProcessingStages operation)
			{
				switch (operation)
				{
				case ReportProcessing.ProcessingStages.SortAndFilter:
					this.SortAndFilter();
					return;
				case ReportProcessing.ProcessingStages.RunningValues:
					base.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
					return;
				case ReportProcessing.ProcessingStages.CreatingInstances:
					this.CreateInstance();
					return;
				default:
					Global.Tracer.Assert(false);
					return;
				}
			}

			// Token: 0x06008A30 RID: 35376 RVA: 0x0022B8B2 File Offset: 0x00229AB2
			internal override void NextRow()
			{
				if (this.m_userSortTargetInfo != null)
				{
					base.ProcessDetailSort(this.m_userSortTargetInfo);
					return;
				}
				base.NextRow();
			}

			// Token: 0x06008A31 RID: 35377 RVA: 0x0022B8D0 File Offset: 0x00229AD0
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_rvValueList == null && (this.m_outerDataAction & ReportProcessing.DataActions.PostSortAggregates) == ReportProcessing.DataActions.None)
				{
					return;
				}
				this.m_globalRunningValueCollection = globalRVCol;
				this.m_groupCollection = groupCol;
				if (this.m_detailDef != null)
				{
					base.AddRunningValues(this.m_detailDef.RunningValues, lastGroup);
					TableRowList detailRows = this.m_detailDef.DetailRows;
					if (detailRows != null)
					{
						for (int i = 0; i < detailRows.Count; i++)
						{
							RunningValueInfoList runningValueInfoList = null;
							if (detailRows[i].ReportItems != null)
							{
								runningValueInfoList = detailRows[i].ReportItems.RunningValues;
							}
							base.AddRunningValues(runningValueInfoList, lastGroup);
						}
					}
				}
				if (this.m_userSortTargetInfo != null)
				{
					bool sortDirection = this.m_processingContext.RuntimeSortFilterInfo[this.m_userSortTargetInfo.SortFilterInfoIndices[0]].SortDirection;
					this.m_userSortTargetInfo.SortTree.Traverse(ReportProcessing.ProcessingStages.RunningValues, sortDirection);
					this.m_userSortTargetInfo = null;
					return;
				}
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
			}

			// Token: 0x06008A32 RID: 35378 RVA: 0x0022B9B4 File Offset: 0x00229BB4
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_reportItemInstance = riInstance;
					this.m_instanceList = instanceList;
					this.m_pagesList = pagesList;
					bool sortDirection = this.m_processingContext.RuntimeSortFilterInfo[this.m_userSortTargetInfo.SortFilterInfoIndices[0]].SortDirection;
					this.m_userSortTargetInfo.SortTree.Traverse(ReportProcessing.ProcessingStages.CreatingInstances, sortDirection);
					this.m_userSortTargetInfo = null;
					return;
				}
				base.CreateInstances(riInstance, instanceList, pagesList);
			}

			// Token: 0x06008A33 RID: 35379 RVA: 0x0022BA28 File Offset: 0x00229C28
			internal override void CreateInstance()
			{
				if (this.m_detailDef == null)
				{
					return;
				}
				TableRowList detailRows = this.m_detailDef.DetailRows;
				ReportProcessing.RuntimeTableDetailObj runtimeTableDetailObj = (ReportProcessing.RuntimeTableDetailObj)this.m_hierarchyRoot;
				TableInstance tableInstance = (TableInstance)runtimeTableDetailObj.m_reportItemInstance;
				Table table = (Table)tableInstance.ReportItemDef;
				IList instanceList = runtimeTableDetailObj.m_instanceList;
				if (this.m_dataRows != null)
				{
					ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
					ReportProcessing.RuntimeRICollectionList runtimeRICollectionList = new ReportProcessing.RuntimeRICollectionList(detailRows.Count);
					for (int i = 0; i < detailRows.Count; i++)
					{
						runtimeRICollectionList.Add(new ReportProcessing.RuntimeRICollection(this, detailRows[i].ReportItems, ref dataActions, this.m_processingContext, false));
					}
					this.m_processingContext.ChunkManager.EnterIgnorePageBreakItem();
					double num = -1.0;
					this.m_processingContext.Pagination.EnterIgnorePageBreak(detailRows[0].Visibility, false);
					for (int j = 0; j < this.m_dataRows.Count; j++)
					{
						int num2 = 0;
						base.SetupEnvironment(j, ref num2, this.m_detailDef.RunningValues, false);
						TableDetailInstance tableDetailInstance = new TableDetailInstance(this.m_processingContext, this.m_detailDef, (Table)this.m_dataRegionDef);
						this.m_processingContext.Pagination.ProcessTableDetails(table, tableDetailInstance, instanceList, ref num, detailRows, runtimeTableDetailObj.m_pagesList, ref runtimeTableDetailObj.m_numberOfChildrenOnThisPage);
						tableInstance.CurrentPage = table.CurrentPage;
						tableInstance.NumberOfChildrenOnThisPage = runtimeTableDetailObj.m_numberOfChildrenOnThisPage;
						this.m_processingContext.Pagination.EnterIgnorePageBreak(null, true);
						this.m_processingContext.Pagination.EnterIgnoreHeight(true);
						if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
						{
							this.m_processingContext.EnterGrouping();
						}
						this.m_dataRegionDef.CurrentDetailRowIndex = j;
						for (int k = 0; k < detailRows.Count; k++)
						{
							Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems = detailRows[k].ReportItems;
							base.SetupEnvironment(j, ref num2, reportItems.RunningValues, true);
							TableRowInstance tableRowInstance = tableDetailInstance.DetailRowInstances[k];
							if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
							{
								((IShowHideContainer)tableRowInstance).BeginProcessContainer(this.m_processingContext);
							}
							this.m_processingContext.PageSectionContext.EnterVisibilityScope(detailRows[k].Visibility, detailRows[k].StartHidden);
							IntList tableColumnSpans = this.m_processingContext.PageSectionContext.TableColumnSpans;
							this.m_processingContext.PageSectionContext.TableColumnSpans = detailRows[k].ColSpans;
							runtimeRICollectionList[k].CreateInstances(tableRowInstance.TableRowReportItemColInstance);
							this.m_processingContext.PageSectionContext.TableColumnSpans = tableColumnSpans;
							this.m_processingContext.PageSectionContext.ExitVisibilityScope();
							if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
							{
								((IShowHideContainer)tableRowInstance).EndProcessContainer(this.m_processingContext);
							}
						}
						if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
						{
							this.m_processingContext.ExitGrouping();
						}
						this.m_processingContext.Pagination.LeaveIgnorePageBreak(null, true);
						this.m_processingContext.Pagination.LeaveIgnoreHeight(true);
						this.m_processingContext.Pagination.LeaveIgnoreHeight(this.m_detailDef.StartHidden);
						instanceList.Add(tableDetailInstance);
						runtimeRICollectionList.ResetReportItemObjs();
					}
					this.m_processingContext.Pagination.LeaveIgnorePageBreak(detailRows[0].Visibility, false);
					this.m_processingContext.ChunkManager.LeaveIgnorePageBreakItem();
				}
			}

			// Token: 0x06008A34 RID: 35380 RVA: 0x0022BD81 File Offset: 0x00229F81
			protected override ReportProcessing.IHierarchyObj CreateHierarchyObj()
			{
				if (this.m_userSortTargetInfo != null)
				{
					return new ReportProcessing.RuntimeSortHierarchyObj(this);
				}
				return base.CreateHierarchyObj();
			}

			// Token: 0x06008A35 RID: 35381 RVA: 0x0022BD98 File Offset: 0x00229F98
			protected override void ProcessUserSort()
			{
				this.m_processingContext.ProcessUserSortForTarget(this, ref this.m_dataRows, this.m_userSortTargetInfo.TargetForNonDetailSort);
			}

			// Token: 0x06008A36 RID: 35382 RVA: 0x0022BDB7 File Offset: 0x00229FB7
			protected override void MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.MarkSortInfoProcessed(runtimeSortFilterInfo, this);
				}
			}

			// Token: 0x06008A37 RID: 35383 RVA: 0x0022BDCE File Offset: 0x00229FCE
			protected override void AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.AddSortInfoIndex(sortInfoIndex, sortInfo);
				}
			}

			// Token: 0x04004946 RID: 18758
			private TableDetail m_detailDef;

			// Token: 0x04004947 RID: 18759
			private RuntimeUserSortTargetInfo m_userSortTargetInfo;
		}

		// Token: 0x02000C5A RID: 3162
		private sealed class RuntimeOnePassTableDetailObj : ReportProcessing.RuntimeOnePassDetailObj
		{
			// Token: 0x06008A38 RID: 35384 RVA: 0x0022BDE8 File Offset: 0x00229FE8
			internal RuntimeOnePassTableDetailObj(ReportProcessing.IScope outerScope, Table tableDef, ReportProcessing.ProcessingContext processingContext)
				: base(outerScope, tableDef, processingContext)
			{
				TableDetail tableDetail = tableDef.TableDetail;
				if (tableDetail.RunningValues != null && 0 < tableDetail.RunningValues.Count)
				{
					base.AddRunningValues(tableDetail.RunningValues);
				}
				TableRowList detailRows = tableDetail.DetailRows;
				if (detailRows != null)
				{
					this.m_reportItemCols = new ReportProcessing.RuntimeRICollectionList(detailRows.Count);
					for (int i = 0; i < detailRows.Count; i++)
					{
						if (detailRows[i].ReportItems != null)
						{
							this.m_reportItemCols.Add(new ReportProcessing.RuntimeRICollection(this, detailRows[i].ReportItems, this.m_processingContext, false));
							base.AddRunningValues(detailRows[i].ReportItems.RunningValues);
						}
					}
				}
				this.m_tableDetailInstances = new TableDetailInstanceList();
				this.m_textboxColumnPositions = new Hashtable();
				tableDef.CurrentPage = 0;
			}

			// Token: 0x17002AD0 RID: 10960
			// (get) Token: 0x06008A39 RID: 35385 RVA: 0x0022BEBA File Offset: 0x0022A0BA
			internal TableDetailInstanceList TableDetailInstances
			{
				get
				{
					return this.m_tableDetailInstances;
				}
			}

			// Token: 0x17002AD1 RID: 10961
			// (get) Token: 0x06008A3A RID: 35386 RVA: 0x0022BEC2 File Offset: 0x0022A0C2
			internal Hashtable TextboxColumnPositions
			{
				get
				{
					return this.m_textboxColumnPositions;
				}
			}

			// Token: 0x06008A3B RID: 35387 RVA: 0x0022BECA File Offset: 0x0022A0CA
			internal override int GetDetailPage()
			{
				return ((Table)this.m_dataRegionDef).CurrentPage;
			}

			// Token: 0x06008A3C RID: 35388 RVA: 0x0022BEDC File Offset: 0x0022A0DC
			protected override void CreateInstance()
			{
				Table table = (Table)this.m_dataRegionDef;
				TableRowList detailRows = table.TableDetail.DetailRows;
				double num = -1.0;
				ReportProcessing.Pagination pagination = this.m_processingContext.Pagination;
				this.m_pagination.CopyPaginationInfo(pagination);
				this.m_processingContext.Pagination = this.m_pagination;
				ReportProcessing.NavigationInfo navigationInfo = this.m_processingContext.NavigationInfo;
				this.m_processingContext.NavigationInfo = this.m_navigationInfo;
				TableDetailInstance tableDetailInstance = new TableDetailInstance(this.m_processingContext, table.TableDetail, table);
				if (table.Visibility != null && table.Visibility.Toggle != null)
				{
					this.m_processingContext.Pagination.EnterIgnoreHeight(true);
				}
				this.m_processingContext.Pagination.ProcessTableDetails(table, tableDetailInstance, this.m_tableDetailInstances, ref num, detailRows, this.m_renderingPages, ref this.m_numberOfContentsOnThisPage);
				if (table.Visibility != null && table.Visibility.Toggle != null)
				{
					this.m_processingContext.Pagination.LeaveIgnoreHeight(true);
				}
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.AddRowIndex)
				{
					this.m_dataRegionDef.CurrentDetailRowIndex = this.m_processingContext.ReportObjectModel.FieldsImpl.GetRowIndex();
				}
				ReportProcessing.RuntimeTableObj.CreateRowInstances(this.m_processingContext, this.m_reportItemCols, tableDetailInstance.DetailRowInstances, false, true);
				this.m_processingContext.Pagination = pagination;
				this.m_processingContext.NavigationInfo = navigationInfo;
				this.m_tableDetailInstances.Add(tableDetailInstance);
			}

			// Token: 0x06008A3D RID: 35389 RVA: 0x0022C054 File Offset: 0x0022A254
			internal override bool IsVisible(string textboxName)
			{
				Global.Tracer.Assert(this.m_textboxColumnPositions != null, "(null != m_textboxColumnPositions)");
				object obj = this.m_textboxColumnPositions[textboxName];
				return obj != null && this.m_processingContext.PageSectionContext.IsTableColumnVisible((ReportProcessing.TableColumnInfo)obj);
			}

			// Token: 0x04004948 RID: 18760
			private ReportProcessing.RuntimeRICollectionList m_reportItemCols;

			// Token: 0x04004949 RID: 18761
			private TableDetailInstanceList m_tableDetailInstances;

			// Token: 0x0400494A RID: 18762
			private Hashtable m_textboxColumnPositions;
		}

		// Token: 0x02000C5B RID: 3163
		private sealed class RuntimeOWCChartDetailObj : ReportProcessing.RuntimeDetailObj, ReportProcessing.IFilterOwner
		{
			// Token: 0x06008A3E RID: 35390 RVA: 0x0022C0A4 File Offset: 0x0022A2A4
			internal RuntimeOWCChartDetailObj(ReportProcessing.IScope outerScope, OWCChart chartDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext)
				: base(outerScope, chartDef, (chartDef.Filters == null) ? dataAction : ReportProcessing.DataActions.None, processingContext)
			{
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, chartDef.Aggregates, ref this.m_nonCustomAggregates, ref this.m_customAggregates);
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, chartDef.PostSortAggregates, ref this.m_postSortAggregates);
				if (chartDef.Filters != null)
				{
					this.m_filters = new Filters(Filters.FilterTypes.DataRegionFilter, this, chartDef.Filters, chartDef.ObjectType, chartDef.Name, this.m_processingContext);
				}
				else
				{
					dataAction = ReportProcessing.DataActions.None;
				}
				RunningValueInfoList detailRunningValues = chartDef.DetailRunningValues;
				if (detailRunningValues != null && 0 < detailRunningValues.Count)
				{
					this.m_rvValueList = new DataAggregateObjResultsList();
				}
			}

			// Token: 0x06008A3F RID: 35391 RVA: 0x0022C14C File Offset: 0x0022A34C
			internal RuntimeOWCChartDetailObj(ReportProcessing.RuntimeOWCChartDetailObj detailRoot)
				: base(detailRoot)
			{
			}

			// Token: 0x17002AD2 RID: 10962
			// (get) Token: 0x06008A40 RID: 35392 RVA: 0x0022C155 File Offset: 0x0022A355
			protected override string ScopeName
			{
				get
				{
					return this.m_dataRegionDef.Name;
				}
			}

			// Token: 0x06008A41 RID: 35393 RVA: 0x0022C162 File Offset: 0x0022A362
			internal override void NextRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					this.NextAggregateRow();
					return;
				}
				this.NextNonAggregateRow();
			}

			// Token: 0x06008A42 RID: 35394 RVA: 0x0022C188 File Offset: 0x0022A388
			private void NextNonAggregateRow()
			{
				bool flag = true;
				if (this.m_filters != null)
				{
					flag = this.m_filters.PassFilters(this.m_processingContext.ReportObjectModel.FieldsImpl.GetFields());
				}
				if (flag)
				{
					((ReportProcessing.IFilterOwner)this).PostFilterNextRow();
				}
			}

			// Token: 0x06008A43 RID: 35395 RVA: 0x0022C1C9 File Offset: 0x0022A3C9
			private void NextAggregateRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.AggregationFieldCount == 0)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_customAggregates, false);
				}
			}

			// Token: 0x06008A44 RID: 35396 RVA: 0x0022C1F4 File Offset: 0x0022A3F4
			void ReportProcessing.IFilterOwner.PostFilterNextRow()
			{
				ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_nonCustomAggregates, false);
				base.NextRow();
			}

			// Token: 0x06008A45 RID: 35397 RVA: 0x0022C210 File Offset: 0x0022A410
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				OWCChart owcchart = (OWCChart)this.m_dataRegionDef;
				RunningValueInfoList runningValueInfoList = owcchart.RunningValues;
				if (this.m_rvValueList == null && this.m_postSortAggregates == null && (this.m_outerDataAction & ReportProcessing.DataActions.PostSortAggregates) == ReportProcessing.DataActions.None && (runningValueInfoList == null || runningValueInfoList.Count == 0))
				{
					return;
				}
				this.m_globalRunningValueCollection = globalRVCol;
				this.m_groupCollection = groupCol;
				if (runningValueInfoList != null)
				{
					ReportProcessing.RuntimeDetailObj.AddRunningValues(this.m_processingContext, runningValueInfoList, ref this.m_runningValues, globalRVCol, groupCol, lastGroup);
				}
				runningValueInfoList = owcchart.DetailRunningValues;
				if (runningValueInfoList != null && 0 < runningValueInfoList.Count)
				{
					base.AddRunningValues(runningValueInfoList, lastGroup);
				}
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, owcchart.RunningValues, ref this.m_runningValueValues, false);
			}

			// Token: 0x06008A46 RID: 35398 RVA: 0x0022C2B4 File Offset: 0x0022A4B4
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction)
				{
					if (this.m_postSortAggregates != null)
					{
						ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_postSortAggregates, false);
					}
					if (this.m_runningValues != null)
					{
						for (int i = 0; i < this.m_runningValues.Count; i++)
						{
							this.m_runningValues[i].Update();
						}
					}
				}
				base.ReadRow(dataAction);
			}

			// Token: 0x06008A47 RID: 35399 RVA: 0x0022C318 File Offset: 0x0022A518
			internal override void CreateInstance()
			{
				if (this.m_dataRows == null)
				{
					return;
				}
				OWCChart owcchart = (OWCChart)this.m_dataRegionDef;
				OWCChartInstance owcchartInstance = (OWCChartInstance)((ReportProcessing.RuntimeOWCChartDetailObj)this.m_hierarchyRoot).m_reportItemInstance;
				for (int i = 0; i < this.m_dataRows.Count; i++)
				{
					base.SetupEnvironment(i, owcchart.RunningValues);
					for (int j = owcchart.ChartData.Count - 1; j >= 0; j--)
					{
						owcchartInstance.InstanceInfo.ChartData[j].Add(this.m_processingContext.ReportRuntime.EvaluateOWCChartData(owcchart, owcchart.ChartData[j].Value));
					}
				}
			}

			// Token: 0x06008A48 RID: 35400 RVA: 0x0022C3C0 File Offset: 0x0022A5C0
			internal override void SetupEnvironment()
			{
				base.SetupEnvironment(this.m_nonCustomAggregates, this.m_customAggregates, (this.m_dataRows == null) ? null : this.m_dataRows[0]);
				base.SetupAggregates(this.m_postSortAggregates);
				base.SetupRunningValues(((OWCChart)this.m_dataRegionDef).RunningValues, this.m_runningValueValues);
			}

			// Token: 0x06008A49 RID: 35401 RVA: 0x0022C41E File Offset: 0x0022A61E
			internal override bool InScope(string scope)
			{
				return base.DataRegionInScope(this.m_dataRegionDef, scope);
			}

			// Token: 0x06008A4A RID: 35402 RVA: 0x0022C42D File Offset: 0x0022A62D
			protected override void GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
				base.DataRegionGetGroupNameValuePairs(this.m_dataRegionDef, pairs);
			}

			// Token: 0x0400494B RID: 18763
			private Filters m_filters;

			// Token: 0x0400494C RID: 18764
			private DataAggregateObjList m_nonCustomAggregates;

			// Token: 0x0400494D RID: 18765
			private DataAggregateObjList m_customAggregates;

			// Token: 0x0400494E RID: 18766
			private DataAggregateObjList m_postSortAggregates;

			// Token: 0x0400494F RID: 18767
			private DataAggregateObjList m_runningValues;

			// Token: 0x04004950 RID: 18768
			private DataAggregateObjResult[] m_runningValueValues;
		}

		// Token: 0x02000C5C RID: 3164
		internal abstract class RuntimePivotObj : ReportProcessing.RuntimeRDLDataRegionObj
		{
			// Token: 0x06008A4B RID: 35403 RVA: 0x0022C43C File Offset: 0x0022A63C
			internal RuntimePivotObj(ReportProcessing.IScope outerScope, Pivot pivotDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, bool onePassProcess)
				: base(outerScope, pivotDef, ref dataAction, processingContext, onePassProcess, pivotDef.RunningValues)
			{
				this.m_pivotDef = pivotDef;
			}

			// Token: 0x17002AD3 RID: 10963
			// (get) Token: 0x06008A4C RID: 35404 RVA: 0x0022C458 File Offset: 0x0022A658
			protected override string ScopeName
			{
				get
				{
					return this.m_pivotDef.Name;
				}
			}

			// Token: 0x17002AD4 RID: 10964
			// (get) Token: 0x06008A4D RID: 35405 RVA: 0x0022C465 File Offset: 0x0022A665
			protected override Microsoft.ReportingServices.ReportProcessing.DataRegion DataRegionDef
			{
				get
				{
					return this.m_pivotDef;
				}
			}

			// Token: 0x17002AD5 RID: 10965
			// (get) Token: 0x06008A4E RID: 35406 RVA: 0x0022C46D File Offset: 0x0022A66D
			internal int[] OuterGroupingCounters
			{
				get
				{
					return this.m_outerGroupingCounters;
				}
			}

			// Token: 0x06008A4F RID: 35407 RVA: 0x0022C478 File Offset: 0x0022A678
			protected void ConstructorHelper(ref ReportProcessing.DataActions dataAction, bool onePassProcess, out bool handleMyDataAction, out ReportProcessing.DataActions innerDataAction, out PivotHeading outermostColumn, out bool outermostColumnSubtotal, out PivotHeading staticColumn, out PivotHeading outermostRow, out bool outermostRowSubtotal, out PivotHeading staticRow)
			{
				this.m_pivotDef.GetHeadingDefState(out outermostColumn, out outermostColumnSubtotal, out staticColumn, out outermostRow, out outermostRowSubtotal, out staticRow);
				innerDataAction = this.m_dataAction;
				handleMyDataAction = false;
				bool flag = false;
				if (onePassProcess)
				{
					flag = true;
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_pivotDef.PostSortAggregates, ref this.m_nonCustomAggregates);
					Global.Tracer.Assert(outermostRow == null && outermostColumn == null, "((null == outermostRow) && (null == outermostColumn))");
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_pivotDef.CellPostSortAggregates, ref this.m_nonCustomAggregates);
				}
				else
				{
					if (this.m_pivotDef.PostSortAggregates != null)
					{
						ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_pivotDef.PostSortAggregates, ref this.m_postSortAggregates);
						handleMyDataAction = true;
					}
					if ((outermostRowSubtotal & outermostColumnSubtotal) || (outermostRow == null && outermostColumn == null))
					{
						flag = true;
						if (this.m_pivotDef.CellPostSortAggregates != null)
						{
							ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_pivotDef.CellPostSortAggregates, ref this.m_postSortAggregates);
							handleMyDataAction = true;
						}
					}
					if (handleMyDataAction)
					{
						this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
						innerDataAction = ReportProcessing.DataActions.None;
					}
					else
					{
						innerDataAction = this.m_dataAction;
					}
				}
				if (flag)
				{
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_pivotDef.CellAggregates, ref this.m_nonCustomAggregates, ref this.m_customAggregates);
					RunningValueInfoList pivotCellRunningValues = this.m_pivotDef.PivotCellRunningValues;
					if (pivotCellRunningValues != null && 0 < pivotCellRunningValues.Count)
					{
						if (this.m_nonCustomAggregates == null)
						{
							this.m_nonCustomAggregates = new DataAggregateObjList();
						}
						for (int i = 0; i < pivotCellRunningValues.Count; i++)
						{
							this.m_nonCustomAggregates.Add(new DataAggregateObj(pivotCellRunningValues[i], this.m_processingContext));
						}
					}
				}
				int num = this.m_pivotDef.CreateOuterGroupingIndexList();
				this.m_outerGroupingCounters = new int[num];
				for (int j = 0; j < this.m_outerGroupingCounters.Length; j++)
				{
					this.m_outerGroupingCounters[j] = -1;
				}
			}

			// Token: 0x06008A50 RID: 35408 RVA: 0x0022C64F File Offset: 0x0022A84F
			protected void HandleDataAction(bool handleMyDataAction, ReportProcessing.DataActions innerDataAction, ReportProcessing.DataActions userSortDataAction)
			{
				if (!handleMyDataAction)
				{
					this.m_dataAction = innerDataAction;
				}
				this.m_dataAction |= userSortDataAction;
				if (this.m_dataAction != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x06008A51 RID: 35409 RVA: 0x0022C67C File Offset: 0x0022A87C
			protected override void SendToInner()
			{
				this.m_pivotDef.RuntimeDataRegionObj = this;
				this.m_pivotDef.ResetOutergGroupingAggregateRowInfo();
				this.m_pivotDef.SavePivotAggregateRowInfo(this.m_processingContext);
				if (this.m_outerGroupings != null)
				{
					this.m_outerGroupings.NextRow();
				}
				this.m_pivotDef.RestorePivotAggregateRowInfo(this.m_processingContext);
				if (this.m_innerGroupings != null)
				{
					this.m_innerGroupings.NextRow();
				}
			}

			// Token: 0x06008A52 RID: 35410 RVA: 0x0022C6E8 File Offset: 0x0022A8E8
			internal override bool SortAndFilter()
			{
				if (this.m_pivotRows != null)
				{
					this.m_pivotRows.SortAndFilter();
				}
				if (this.m_pivotColumns != null)
				{
					this.m_pivotColumns.SortAndFilter();
				}
				return base.SortAndFilter();
			}

			// Token: 0x06008A53 RID: 35411 RVA: 0x0022C718 File Offset: 0x0022A918
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_pivotDef.RunningValues != null && this.m_runningValues == null)
				{
					ReportProcessing.RuntimeDetailObj.AddRunningValues(this.m_processingContext, this.m_pivotDef.RunningValues, ref this.m_runningValues, globalRVCol, groupCol, lastGroup);
				}
				if (this.m_dataRows != null)
				{
					base.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
					this.m_dataRows = null;
				}
				if (this.m_outerGroupings != null)
				{
					this.m_outerGroupings.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
				if ((this.m_outerGroupings == null || this.m_outerGroupings.Headings == null) && this.m_innerGroupings != null)
				{
					this.m_innerGroupings.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
			}

			// Token: 0x06008A54 RID: 35412 RVA: 0x0022C7B0 File Offset: 0x0022A9B0
			protected virtual void CalculatePreviousAggregates()
			{
				if (!this.m_processedPreviousAggregates && this.m_processingContext.GlobalRVCollection != null)
				{
					Global.Tracer.Assert(this.m_runningValueValues == null, "(null == m_runningValueValues)");
					AggregatesImpl globalRVCollection = this.m_processingContext.GlobalRVCollection;
					RunningValueInfoList runningValues = this.m_pivotDef.RunningValues;
					ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCollection, runningValues, ref this.m_runningValueValues, true);
					if (this.m_pivotRows != null)
					{
						this.m_pivotRows.CalculatePreviousAggregates(globalRVCollection);
					}
					if (this.m_pivotColumns != null)
					{
						this.m_pivotColumns.CalculatePreviousAggregates(globalRVCollection);
					}
					this.m_processedPreviousAggregates = true;
				}
			}

			// Token: 0x06008A55 RID: 35413 RVA: 0x0022C840 File Offset: 0x0022AA40
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.UserSort == dataAction)
				{
					ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
					base.CommonNextRow(this.m_dataRows);
					return;
				}
				if (!this.m_pivotDef.ProcessCellRunningValues)
				{
					if (ReportProcessing.DataActions.PostSortAggregates == dataAction)
					{
						if (this.m_postSortAggregates != null)
						{
							ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_postSortAggregates, false);
						}
						if (this.m_runningValues != null)
						{
							for (int i = 0; i < this.m_runningValues.Count; i++)
							{
								this.m_runningValues[i].Update();
							}
						}
						this.CalculatePreviousAggregates();
					}
					if (this.m_outerScope != null && (dataAction & this.m_outerDataAction) != ReportProcessing.DataActions.None)
					{
						this.m_outerScope.ReadRow(dataAction);
					}
				}
			}

			// Token: 0x06008A56 RID: 35414 RVA: 0x0022C8FD File Offset: 0x0022AAFD
			internal override void SetupEnvironment()
			{
				base.SetupEnvironment(this.m_pivotDef.RunningValues);
			}

			// Token: 0x04004951 RID: 18769
			protected Pivot m_pivotDef;

			// Token: 0x04004952 RID: 18770
			protected ReportProcessing.RuntimePivotHeadingsObj m_pivotRows;

			// Token: 0x04004953 RID: 18771
			protected ReportProcessing.RuntimePivotHeadingsObj m_pivotColumns;

			// Token: 0x04004954 RID: 18772
			protected ReportProcessing.RuntimePivotHeadingsObj m_outerGroupings;

			// Token: 0x04004955 RID: 18773
			protected ReportProcessing.RuntimePivotHeadingsObj m_innerGroupings;

			// Token: 0x04004956 RID: 18774
			protected int[] m_outerGroupingCounters;
		}

		// Token: 0x02000C5D RID: 3165
		internal abstract class RuntimePivotHeadingsObj
		{
			// Token: 0x06008A57 RID: 35415 RVA: 0x0022C910 File Offset: 0x0022AB10
			internal RuntimePivotHeadingsObj(ReportProcessing.IScope owner, PivotHeading headingDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, PivotHeading staticHeadingDef, ReportProcessing.RuntimePivotHeadingsObj innerGroupings, bool outermostHeadingSubtotal, int headingLevel)
			{
				this.m_owner = owner;
				if (staticHeadingDef != null)
				{
					this.m_staticHeadingDef = staticHeadingDef;
				}
			}

			// Token: 0x17002AD6 RID: 10966
			// (get) Token: 0x06008A58 RID: 35416 RVA: 0x0022C92B File Offset: 0x0022AB2B
			internal ReportProcessing.RuntimePivotGroupRootObj Headings
			{
				get
				{
					return this.m_pivotHeadings;
				}
			}

			// Token: 0x06008A59 RID: 35417 RVA: 0x0022C933 File Offset: 0x0022AB33
			internal virtual void NextRow()
			{
				if (this.m_pivotHeadings != null)
				{
					this.m_pivotHeadings.NextRow();
				}
			}

			// Token: 0x06008A5A RID: 35418 RVA: 0x0022C948 File Offset: 0x0022AB48
			internal virtual bool SortAndFilter()
			{
				return this.m_pivotHeadings == null || this.m_pivotHeadings.SortAndFilter();
			}

			// Token: 0x06008A5B RID: 35419 RVA: 0x0022C95F File Offset: 0x0022AB5F
			internal virtual void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_pivotHeadings != null)
				{
					this.m_pivotHeadings.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
			}

			// Token: 0x06008A5C RID: 35420
			internal abstract void CalculatePreviousAggregates(AggregatesImpl globalRVCol);

			// Token: 0x04004957 RID: 18775
			protected ReportProcessing.IScope m_owner;

			// Token: 0x04004958 RID: 18776
			protected ReportProcessing.RuntimePivotGroupRootObj m_pivotHeadings;

			// Token: 0x04004959 RID: 18777
			protected PivotHeading m_staticHeadingDef;
		}

		// Token: 0x02000C5E RID: 3166
		private sealed class RuntimeChartObj : ReportProcessing.RuntimePivotObj
		{
			// Token: 0x06008A5D RID: 35421 RVA: 0x0022C978 File Offset: 0x0022AB78
			internal RuntimeChartObj(ReportProcessing.IScope outerScope, Microsoft.ReportingServices.ReportProcessing.Chart chartDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, bool onePassProcess)
				: base(outerScope, chartDef, ref dataAction, processingContext, onePassProcess)
			{
				bool flag;
				ReportProcessing.DataActions dataActions;
				PivotHeading pivotHeading;
				bool flag2;
				PivotHeading pivotHeading2;
				PivotHeading pivotHeading3;
				bool flag3;
				PivotHeading pivotHeading4;
				base.ConstructorHelper(ref dataAction, onePassProcess, out flag, out dataActions, out pivotHeading, out flag2, out pivotHeading2, out pivotHeading3, out flag3, out pivotHeading4);
				this.m_innerDataAction = dataActions;
				ReportProcessing.DataActions dataActions2 = base.HandleSortFilterEvent();
				this.ChartConstructRuntimeStructure(ref dataActions, onePassProcess, pivotHeading, flag2, pivotHeading2, pivotHeading3, flag3, pivotHeading4);
				if (onePassProcess || (flag3 && flag2) || (pivotHeading3 == null && pivotHeading == null))
				{
					this.m_subtotalCorner = true;
				}
				base.HandleDataAction(flag, dataActions, dataActions2);
			}

			// Token: 0x06008A5E RID: 35422 RVA: 0x0022C9F4 File Offset: 0x0022ABF4
			protected override void ConstructRuntimeStructure(ref ReportProcessing.DataActions innerDataAction)
			{
				PivotHeading pivotHeading;
				bool flag;
				PivotHeading pivotHeading2;
				PivotHeading pivotHeading3;
				bool flag2;
				PivotHeading pivotHeading4;
				this.m_pivotDef.GetHeadingDefState(out pivotHeading, out flag, out pivotHeading2, out pivotHeading3, out flag2, out pivotHeading4);
				this.ChartConstructRuntimeStructure(ref innerDataAction, false, pivotHeading, flag, pivotHeading2, pivotHeading3, flag2, pivotHeading4);
			}

			// Token: 0x06008A5F RID: 35423 RVA: 0x0022CA28 File Offset: 0x0022AC28
			private void ChartConstructRuntimeStructure(ref ReportProcessing.DataActions innerDataAction, bool onePassProcess, PivotHeading outermostColumn, bool outermostColumnSubtotal, PivotHeading staticColumn, PivotHeading outermostRow, bool outermostRowSubtotal, PivotHeading staticRow)
			{
				ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
				if (this.m_pivotDef.ProcessingInnerGrouping == Pivot.ProcessingInnerGroupings.Column)
				{
					this.m_innerGroupings = (this.m_pivotColumns = new ReportProcessing.RuntimeChartHeadingsObj(this, (ChartHeading)outermostColumn, ref dataActions, this.m_processingContext, (ChartHeading)staticColumn, null, outermostRowSubtotal, 0));
					this.m_outerGroupings = (this.m_pivotRows = new ReportProcessing.RuntimeChartHeadingsObj(this, (ChartHeading)outermostRow, ref innerDataAction, this.m_processingContext, (ChartHeading)staticRow, (ReportProcessing.RuntimeChartHeadingsObj)this.m_innerGroupings, outermostColumnSubtotal, 0));
					return;
				}
				this.m_innerGroupings = (this.m_pivotRows = new ReportProcessing.RuntimeChartHeadingsObj(this, (ChartHeading)outermostRow, ref dataActions, this.m_processingContext, (ChartHeading)staticRow, null, outermostColumnSubtotal, 0));
				this.m_outerGroupings = (this.m_pivotColumns = new ReportProcessing.RuntimeChartHeadingsObj(this, (ChartHeading)outermostColumn, ref innerDataAction, this.m_processingContext, (ChartHeading)staticColumn, (ReportProcessing.RuntimeChartHeadingsObj)this.m_innerGroupings, outermostRowSubtotal, 0));
			}

			// Token: 0x06008A60 RID: 35424 RVA: 0x0022CB14 File Offset: 0x0022AD14
			internal override bool SortAndFilter()
			{
				this.SetupEnvironment();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
				}
				base.SortAndFilter();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
				return true;
			}

			// Token: 0x06008A61 RID: 35425 RVA: 0x0022CB61 File Offset: 0x0022AD61
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, this.m_pivotDef.RunningValues, ref this.m_runningValueValues, false);
			}

			// Token: 0x06008A62 RID: 35426 RVA: 0x0022CB84 File Offset: 0x0022AD84
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
				if (this.m_firstRow == null)
				{
					return;
				}
				Microsoft.ReportingServices.ReportProcessing.Chart chart = (Microsoft.ReportingServices.ReportProcessing.Chart)this.m_pivotDef;
				ChartInstance chartInstance = (ChartInstance)riInstance;
				if (this.m_outerGroupings == this.m_pivotRows)
				{
					chartInstance.InnerHeadingInstanceList = chartInstance.ColumnInstances;
					((ReportProcessing.RuntimeChartHeadingsObj)this.m_outerGroupings).CreateInstances(this, this.m_processingContext, chartInstance, true, null, chartInstance.RowInstances);
					return;
				}
				chartInstance.InnerHeadingInstanceList = chartInstance.RowInstances;
				((ReportProcessing.RuntimeChartHeadingsObj)this.m_outerGroupings).CreateInstances(this, this.m_processingContext, chartInstance, true, null, chartInstance.ColumnInstances);
			}

			// Token: 0x06008A63 RID: 35427 RVA: 0x0022CC14 File Offset: 0x0022AE14
			internal void CreateOutermostSubtotalCells(ChartInstance chartInstance, bool outerGroupings)
			{
				if (outerGroupings)
				{
					this.SetupEnvironment();
					((ReportProcessing.RuntimeChartHeadingsObj)this.m_innerGroupings).CreateInstances(this, this.m_processingContext, chartInstance, false, null, chartInstance.InnerHeadingInstanceList);
					return;
				}
				if (this.m_subtotalCorner)
				{
					this.SetupEnvironment();
					chartInstance.AddCell(this.m_processingContext, -1);
				}
			}

			// Token: 0x0400495A RID: 18778
			private bool m_subtotalCorner;
		}

		// Token: 0x02000C5F RID: 3167
		private sealed class RuntimeChartHeadingsObj : ReportProcessing.RuntimePivotHeadingsObj
		{
			// Token: 0x06008A64 RID: 35428 RVA: 0x0022CC68 File Offset: 0x0022AE68
			internal RuntimeChartHeadingsObj(ReportProcessing.IScope owner, ChartHeading headingDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, ChartHeading staticHeadingDef, ReportProcessing.RuntimeChartHeadingsObj innerGroupings, bool outermostHeadingSubtotal, int headingLevel)
				: base(owner, headingDef, ref dataAction, processingContext, staticHeadingDef, innerGroupings, outermostHeadingSubtotal, headingLevel)
			{
				if (headingDef != null)
				{
					this.m_pivotHeadings = new ReportProcessing.RuntimeChartGroupRootObj(owner, headingDef, ref dataAction, processingContext, innerGroupings, outermostHeadingSubtotal, headingLevel);
				}
			}

			// Token: 0x06008A65 RID: 35429 RVA: 0x0022CCA1 File Offset: 0x0022AEA1
			internal override void CalculatePreviousAggregates(AggregatesImpl globalRVCol)
			{
				if (this.m_staticHeadingDef != null)
				{
					ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, ((ChartHeading)this.m_staticHeadingDef).RunningValues, ref this.m_runningValueValues, true);
				}
			}

			// Token: 0x06008A66 RID: 35430 RVA: 0x0022CCC8 File Offset: 0x0022AEC8
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				if (this.m_staticHeadingDef != null && this.m_owner is ReportProcessing.RuntimeChartGroupLeafObj)
				{
					ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, ((ChartHeading)this.m_staticHeadingDef).RunningValues, ref this.m_runningValueValues, false);
				}
			}

			// Token: 0x06008A67 RID: 35431 RVA: 0x0022CD05 File Offset: 0x0022AF05
			private void SetupEnvironment(ReportProcessing.ProcessingContext processingContext)
			{
				if (this.m_staticHeadingDef != null && this.m_runningValueValues != null)
				{
					ReportProcessing.RuntimeDataRegionObj.SetupRunningValues(processingContext, ((ChartHeading)this.m_staticHeadingDef).RunningValues, this.m_runningValueValues);
				}
			}

			// Token: 0x06008A68 RID: 35432 RVA: 0x0022CD34 File Offset: 0x0022AF34
			internal void CreateInstances(ReportProcessing.RuntimeDataRegionObj outerGroup, ReportProcessing.ProcessingContext processingContext, ChartInstance chartInstance, bool outerGroupings, ReportProcessing.RuntimePivotGroupRootObj currOuterHeadingGroupRoot, ChartHeadingInstanceList headingInstances)
			{
				bool flag = outerGroupings || chartInstance.CurrentCellOuterIndex == 0;
				int num = 1;
				this.SetupEnvironment(processingContext);
				if (this.m_staticHeadingDef != null && ((ChartHeading)this.m_staticHeadingDef).Labels != null)
				{
					num = ((ChartHeading)this.m_staticHeadingDef).Labels.Count;
				}
				ChartHeadingInstanceList chartHeadingInstanceList = headingInstances;
				for (int i = 0; i < num; i++)
				{
					if (this.m_staticHeadingDef != null)
					{
						if (flag)
						{
							chartHeadingInstanceList = this.CreateHeadingInstance(processingContext, chartInstance, (ChartHeading)this.m_staticHeadingDef, headingInstances, outerGroupings, i);
						}
						if (outerGroupings)
						{
							chartInstance.CurrentOuterStaticIndex = i;
						}
						else
						{
							chartInstance.CurrentInnerStaticIndex = i;
						}
					}
					if (this.m_pivotHeadings != null)
					{
						((Microsoft.ReportingServices.ReportProcessing.Chart)this.m_pivotHeadings.HierarchyDef.DataRegionDef).CurrentOuterHeadingGroupRoot = currOuterHeadingGroupRoot;
						this.m_pivotHeadings.CreateInstances(chartInstance, chartHeadingInstanceList, null);
						if (flag)
						{
							this.SetHeadingSpan(chartInstance, chartHeadingInstanceList, outerGroupings, processingContext);
						}
					}
					else if (outerGroup is ReportProcessing.RuntimeChartGroupLeafObj)
					{
						ReportProcessing.RuntimeChartGroupLeafObj runtimeChartGroupLeafObj = (ReportProcessing.RuntimeChartGroupLeafObj)outerGroup;
						if (!outerGroupings && runtimeChartGroupLeafObj.IsOuterGrouping())
						{
							runtimeChartGroupLeafObj.CreateSubtotalOrStaticCells(chartInstance, currOuterHeadingGroupRoot, outerGroupings);
						}
						else
						{
							runtimeChartGroupLeafObj.CreateInnerGroupingsOrCells(chartInstance, currOuterHeadingGroupRoot);
						}
					}
					else
					{
						((ReportProcessing.RuntimeChartObj)outerGroup).CreateOutermostSubtotalCells(chartInstance, outerGroupings);
					}
				}
				if (this.m_staticHeadingDef != null && flag)
				{
					this.SetHeadingSpan(chartInstance, headingInstances, outerGroupings, processingContext);
				}
			}

			// Token: 0x06008A69 RID: 35433 RVA: 0x0022CE78 File Offset: 0x0022B078
			private void SetHeadingSpan(ChartInstance chartInstance, ChartHeadingInstanceList headingInstances, bool outerGroupings, ReportProcessing.ProcessingContext processingContext)
			{
				int num;
				if (outerGroupings)
				{
					num = chartInstance.CurrentCellOuterIndex + 1;
				}
				else
				{
					num = chartInstance.CurrentCellInnerIndex;
				}
				headingInstances.SetLastHeadingSpan(num, processingContext);
			}

			// Token: 0x06008A6A RID: 35434 RVA: 0x0022CEA4 File Offset: 0x0022B0A4
			private ChartHeadingInstanceList CreateHeadingInstance(ReportProcessing.ProcessingContext processingContext, ChartInstance chartInstance, ChartHeading headingDef, ChartHeadingInstanceList headingInstances, bool outerGroupings, int labelIndex)
			{
				int num;
				if (outerGroupings)
				{
					chartInstance.NewOuterCells();
					num = chartInstance.CurrentCellOuterIndex;
				}
				else
				{
					num = chartInstance.CurrentCellInnerIndex;
				}
				ChartHeadingInstance chartHeadingInstance = new ChartHeadingInstance(processingContext, num, headingDef, labelIndex, null);
				headingInstances.Add(chartHeadingInstance, processingContext);
				return chartHeadingInstance.SubHeadingInstances;
			}

			// Token: 0x0400495B RID: 18779
			private DataAggregateObjResult[] m_runningValueValues;
		}

		// Token: 0x02000C60 RID: 3168
		private sealed class RuntimeChartGroupRootObj : ReportProcessing.RuntimePivotGroupRootObj
		{
			// Token: 0x06008A6B RID: 35435 RVA: 0x0022CEE8 File Offset: 0x0022B0E8
			internal RuntimeChartGroupRootObj(ReportProcessing.IScope outerScope, ChartHeading chartHeadingDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, ReportProcessing.RuntimeChartHeadingsObj innerGroupings, bool outermostSubtotal, int headingLevel)
				: base(outerScope, chartHeadingDef, ref dataAction, processingContext, innerGroupings, outermostSubtotal, headingLevel)
			{
				if (this.m_processOutermostSTCells)
				{
					Microsoft.ReportingServices.ReportProcessing.Chart chart = (Microsoft.ReportingServices.ReportProcessing.Chart)chartHeadingDef.DataRegionDef;
					if (chart.CellRunningValues != null && 0 < chart.CellRunningValues.Count)
					{
						this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
					}
				}
				if (chartHeadingDef.ChartGroupExpression)
				{
					this.m_saveGroupExprValues = true;
				}
			}

			// Token: 0x06008A6C RID: 35436 RVA: 0x0022CF50 File Offset: 0x0022B150
			protected override void NeedProcessDataActions(PivotHeading heading)
			{
				ChartHeading chartHeading = (ChartHeading)heading;
				if (chartHeading != null)
				{
					base.NeedProcessDataActions(chartHeading.RunningValues);
				}
			}

			// Token: 0x06008A6D RID: 35437 RVA: 0x0022CF74 File Offset: 0x0022B174
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				base.AddRunningValues(((ChartHeading)this.m_hierarchyDef).RunningValues);
				if (this.m_staticHeadingDef != null)
				{
					base.AddRunningValues(((ChartHeading)this.m_staticHeadingDef).RunningValues);
				}
				this.m_grouping.Traverse(ReportProcessing.ProcessingStages.RunningValues, this.m_expression.Direction);
				if (this.m_hierarchyDef.Grouping.Name != null)
				{
					groupCol.Remove(this.m_hierarchyDef.Grouping.Name);
				}
			}

			// Token: 0x06008A6E RID: 35438 RVA: 0x0022D000 File Offset: 0x0022B200
			protected override void AddCellRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ref DataAggregateObjList runningValues)
			{
				Microsoft.ReportingServices.ReportProcessing.Chart chart = (Microsoft.ReportingServices.ReportProcessing.Chart)this.m_hierarchyDef.DataRegionDef;
				if (chart.CellRunningValues != null && 0 < chart.CellRunningValues.Count)
				{
					this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
					if (runningValues == null)
					{
						base.AddRunningValues(chart.CellRunningValues, ref runningValues, globalRVCol, groupCol);
					}
				}
			}
		}

		// Token: 0x02000C61 RID: 3169
		private sealed class RuntimeChartCell : ReportProcessing.RuntimePivotCell
		{
			// Token: 0x06008A6F RID: 35439 RVA: 0x0022D058 File Offset: 0x0022B258
			internal RuntimeChartCell(ReportProcessing.RuntimeChartGroupLeafObj owner, int cellLevel, DataAggregateInfoList aggDefs, ChartDataPointList cellDef, bool innermost)
				: base(owner, cellLevel, aggDefs, innermost)
			{
				Microsoft.ReportingServices.ReportProcessing.Chart chart = (Microsoft.ReportingServices.ReportProcessing.Chart)owner.PivotDef;
				ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
				bool flag = chart.CellRunningValues != null && 0 < chart.CellRunningValues.Count;
				if (this.m_innermost && (flag || this.m_owner.CellPostSortAggregates != null))
				{
					dataActions = ReportProcessing.DataActions.PostSortAggregates;
				}
				if (dataActions != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x06008A70 RID: 35440 RVA: 0x0022D0C0 File Offset: 0x0022B2C0
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, ((Microsoft.ReportingServices.ReportProcessing.Chart)this.m_owner.PivotDef).CellRunningValues, ref this.m_runningValueValues, false);
			}

			// Token: 0x06008A71 RID: 35441 RVA: 0x0022D0F0 File Offset: 0x0022B2F0
			internal void CreateInstance(ChartInstance chartInstance)
			{
				int currentCellDPIndex = chartInstance.GetCurrentCellDPIndex();
				base.SetupEnvironment();
				ReportProcessing.RuntimeDataRegionObj.SetupRunningValues(this.m_owner.ProcessingContext, ((Microsoft.ReportingServices.ReportProcessing.Chart)this.m_owner.PivotDef).CellRunningValues, this.m_runningValueValues);
				chartInstance.AddCell(this.m_owner.ProcessingContext, currentCellDPIndex);
			}

			// Token: 0x0400495C RID: 18780
			private DataAggregateObjResult[] m_runningValueValues;
		}

		// Token: 0x02000C62 RID: 3170
		private sealed class RuntimeChartGroupLeafObj : ReportProcessing.RuntimePivotGroupLeafObj
		{
			// Token: 0x06008A72 RID: 35442 RVA: 0x0022D148 File Offset: 0x0022B348
			internal RuntimeChartGroupLeafObj(ReportProcessing.RuntimeChartGroupRootObj groupRoot)
				: base(groupRoot)
			{
				Microsoft.ReportingServices.ReportProcessing.Chart chart = (Microsoft.ReportingServices.ReportProcessing.Chart)((ChartHeading)groupRoot.HierarchyDef).DataRegionDef;
				ChartHeading chartHeading = (ChartHeading)groupRoot.InnerHeading;
				bool flag = false;
				bool flag2 = base.HandleSortFilterEvent();
				ReportProcessing.DataActions dataActions;
				base.ConstructorHelper(groupRoot, chart, out flag, out dataActions);
				this.m_pivotHeadings = new ReportProcessing.RuntimeChartHeadingsObj(this, chartHeading, ref dataActions, groupRoot.ProcessingContext, (ChartHeading)groupRoot.StaticHeadingDef, (ReportProcessing.RuntimeChartHeadingsObj)groupRoot.InnerGroupings, groupRoot.OutermostSubtotal, groupRoot.HeadingLevel + 1);
				this.m_innerHierarchy = this.m_pivotHeadings.Headings;
				if (!flag)
				{
					this.m_dataAction = dataActions;
				}
				if (flag2)
				{
					this.m_dataAction |= ReportProcessing.DataActions.UserSort;
				}
				if (this.m_dataAction != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x06008A73 RID: 35443 RVA: 0x0022D209 File Offset: 0x0022B409
			internal override ReportProcessing.RuntimePivotCell CreateCell(int index, Pivot pivotDef)
			{
				return new ReportProcessing.RuntimeChartCell(this, index, pivotDef.CellAggregates, ((Microsoft.ReportingServices.ReportProcessing.Chart)pivotDef).ChartDataPoints, this.m_innerHierarchy == null);
			}

			// Token: 0x06008A74 RID: 35444 RVA: 0x0022D22C File Offset: 0x0022B42C
			internal override bool SortAndFilter()
			{
				this.SetupEnvironment();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
				}
				bool flag = base.SortAndFilter();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
				return flag;
			}

			// Token: 0x06008A75 RID: 35445 RVA: 0x0022D26C File Offset: 0x0022B46C
			internal override void CalculateRunningValues()
			{
				base.CalculateRunningValues();
				if (this.m_processHeading)
				{
					ReportProcessing.RuntimePivotGroupRootObj runtimePivotGroupRootObj = (ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot;
					AggregatesImpl globalRunningValueCollection = runtimePivotGroupRootObj.GlobalRunningValueCollection;
					ReportProcessing.RuntimeGroupRootObjList groupCollection = runtimePivotGroupRootObj.GroupCollection;
					ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRunningValueCollection, ((ChartHeading)runtimePivotGroupRootObj.HierarchyDef).RunningValues, ref this.m_runningValueValues, false);
					if (runtimePivotGroupRootObj.ProcessOutermostSTCells)
					{
						ReportProcessing.RuntimeRICollection.DoneReadingRows(runtimePivotGroupRootObj.OutermostSTCellRVCol, ((Microsoft.ReportingServices.ReportProcessing.Chart)base.PivotDef).CellRunningValues, ref this.m_cellRunningValueValues, false);
					}
					this.m_processHeading = false;
				}
				this.ResetScopedRunningValues();
			}

			// Token: 0x06008A76 RID: 35446 RVA: 0x0022D2F4 File Offset: 0x0022B4F4
			internal override void CreateInstance()
			{
				this.SetupEnvironment();
				ReportProcessing.RuntimeChartGroupRootObj runtimeChartGroupRootObj = (ReportProcessing.RuntimeChartGroupRootObj)this.m_hierarchyRoot;
				Microsoft.ReportingServices.ReportProcessing.Chart chart = (Microsoft.ReportingServices.ReportProcessing.Chart)base.PivotDef;
				ChartInstance chartInstance = (ChartInstance)runtimeChartGroupRootObj.ReportItemInstance;
				ChartHeadingInstanceList chartHeadingInstanceList = (ChartHeadingInstanceList)runtimeChartGroupRootObj.InstanceList;
				ChartHeading chartHeading = (ChartHeading)runtimeChartGroupRootObj.HierarchyDef;
				bool flag = base.IsOuterGrouping();
				base.SetupRunningValues(chartHeading.RunningValues, this.m_runningValueValues);
				if (this.m_cellRunningValueValues != null)
				{
					base.SetupRunningValues(chart.CellRunningValues, this.m_cellRunningValueValues);
				}
				ReportProcessing.RuntimePivotGroupRootObj runtimePivotGroupRootObj;
				int num;
				if (flag)
				{
					runtimePivotGroupRootObj = runtimeChartGroupRootObj;
					chart.CurrentOuterHeadingGroupRoot = runtimePivotGroupRootObj;
					chart.OuterGroupingIndexes[runtimeChartGroupRootObj.HeadingLevel] = this.m_groupLeafIndex;
					chartInstance.NewOuterCells();
					num = chartInstance.CurrentCellOuterIndex;
				}
				else
				{
					runtimePivotGroupRootObj = chart.CurrentOuterHeadingGroupRoot;
					num = chartInstance.CurrentCellInnerIndex;
				}
				if (flag || chartInstance.CurrentCellOuterIndex == 0)
				{
					ChartHeadingInstance chartHeadingInstance = new ChartHeadingInstance(this.m_processingContext, num, chartHeading, 0, this.m_groupExprValues);
					chartHeadingInstanceList.Add(chartHeadingInstance, this.m_processingContext);
					chartHeadingInstanceList = chartHeadingInstance.SubHeadingInstances;
				}
				((ReportProcessing.RuntimeChartHeadingsObj)this.m_pivotHeadings).CreateInstances(this, this.m_processingContext, chartInstance, flag, runtimePivotGroupRootObj, chartHeadingInstanceList);
			}

			// Token: 0x06008A77 RID: 35447 RVA: 0x0022D414 File Offset: 0x0022B614
			internal void CreateInnerGroupingsOrCells(ChartInstance chartInstance, ReportProcessing.RuntimePivotGroupRootObj currOuterHeadingGroupRoot)
			{
				this.SetupEnvironment();
				if (base.IsOuterGrouping())
				{
					((ReportProcessing.RuntimeChartHeadingsObj)((ReportProcessing.RuntimeChartGroupRootObj)this.m_hierarchyRoot).InnerGroupings).CreateInstances(this, this.m_processingContext, chartInstance, false, currOuterHeadingGroupRoot, chartInstance.InnerHeadingInstanceList);
					return;
				}
				if (currOuterHeadingGroupRoot == null)
				{
					this.CreateOutermostSubtotalCell(chartInstance);
					return;
				}
				this.CreateCellInstance(chartInstance, currOuterHeadingGroupRoot);
			}

			// Token: 0x06008A78 RID: 35448 RVA: 0x0022D470 File Offset: 0x0022B670
			private void CreateCellInstance(ChartInstance chartInstance, ReportProcessing.RuntimePivotGroupRootObj currOuterHeadingGroupRoot)
			{
				Global.Tracer.Assert(this.m_cellsList != null && this.m_cellsList[currOuterHeadingGroupRoot.HeadingLevel] != null);
				ReportProcessing.RuntimeChartCell runtimeChartCell = (ReportProcessing.RuntimeChartCell)this.m_cellsList[currOuterHeadingGroupRoot.HeadingLevel].GetCell(base.PivotDef, this, currOuterHeadingGroupRoot.HeadingLevel);
				Global.Tracer.Assert(runtimeChartCell != null, "(null != cell)");
				runtimeChartCell.CreateInstance(chartInstance);
			}

			// Token: 0x06008A79 RID: 35449 RVA: 0x0022D4E1 File Offset: 0x0022B6E1
			private void CreateOutermostSubtotalCell(ChartInstance chartInstance)
			{
				this.SetupEnvironment();
				chartInstance.AddCell(this.m_processingContext, -1);
			}

			// Token: 0x06008A7A RID: 35450 RVA: 0x0022D4F7 File Offset: 0x0022B6F7
			internal void CreateSubtotalOrStaticCells(ChartInstance chartInstance, ReportProcessing.RuntimePivotGroupRootObj currOuterHeadingGroupRoot, bool outerGroupingSubtotal)
			{
				ReportProcessing.RuntimeChartHeadingsObj runtimeChartHeadingsObj = (ReportProcessing.RuntimeChartHeadingsObj)((ReportProcessing.RuntimeChartGroupRootObj)this.m_hierarchyRoot).InnerGroupings;
				if (base.IsOuterGrouping() && !outerGroupingSubtotal)
				{
					this.CreateOutermostSubtotalCell(chartInstance);
					return;
				}
				this.CreateInnerGroupingsOrCells(chartInstance, currOuterHeadingGroupRoot);
			}

			// Token: 0x0400495D RID: 18781
			private DataAggregateObjResult[] m_runningValueValues;

			// Token: 0x0400495E RID: 18782
			private DataAggregateObjResult[] m_cellRunningValueValues;
		}

		// Token: 0x02000C63 RID: 3171
		internal abstract class RuntimePivotGroupRootObj : ReportProcessing.RuntimeGroupRootObj
		{
			// Token: 0x06008A7B RID: 35451 RVA: 0x0022D52C File Offset: 0x0022B72C
			internal RuntimePivotGroupRootObj(ReportProcessing.IScope outerScope, PivotHeading pivotHeadingDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, ReportProcessing.RuntimePivotHeadingsObj innerGroupings, bool outermostSubtotal, int headingLevel)
				: base(outerScope, pivotHeadingDef, dataAction, processingContext)
			{
				Pivot pivot = (Pivot)pivotHeadingDef.DataRegionDef;
				this.m_innerHeading = (PivotHeading)pivotHeadingDef.InnerHierarchy;
				pivot.SkipStaticHeading(ref this.m_innerHeading, ref this.m_staticHeadingDef);
				if (this.m_innerHeading != null)
				{
					this.m_innerSubtotal = this.m_innerHeading.Subtotal;
					if (this.m_innerSubtotal != null)
					{
						this.m_innerSubtotalStaticHeading = this.m_innerHeading.GetInnerStaticHeading();
					}
				}
				if (outermostSubtotal && (this.m_innerHeading == null || this.m_innerSubtotal != null))
				{
					this.m_processOutermostSTCells = true;
					if (pivot.CellPostSortAggregates != null)
					{
						this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
					}
				}
				this.NeedProcessDataActions(pivotHeadingDef);
				this.NeedProcessDataActions(this.m_staticHeadingDef);
				if ((this.m_dataAction & ReportProcessing.DataActions.PostSortAggregates) == ReportProcessing.DataActions.None && this.m_innerSubtotal != null && this.m_innerSubtotal.ReportItems.RunningValues != null && 0 < this.m_innerSubtotal.ReportItems.RunningValues.Count)
				{
					this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
				}
				this.NeedProcessDataActions(this.m_innerSubtotalStaticHeading);
				this.m_outermostSubtotal = outermostSubtotal;
				this.m_innerGroupings = innerGroupings;
				this.m_headingLevel = headingLevel;
				if (pivotHeadingDef.Grouping.Filters == null)
				{
					dataAction = ReportProcessing.DataActions.None;
				}
			}

			// Token: 0x17002AD7 RID: 10967
			// (get) Token: 0x06008A7C RID: 35452 RVA: 0x0022D668 File Offset: 0x0022B868
			internal ReportProcessing.RuntimePivotHeadingsObj InnerGroupings
			{
				get
				{
					return this.m_innerGroupings;
				}
			}

			// Token: 0x17002AD8 RID: 10968
			// (get) Token: 0x06008A7D RID: 35453 RVA: 0x0022D670 File Offset: 0x0022B870
			internal PivotHeading StaticHeadingDef
			{
				get
				{
					return this.m_staticHeadingDef;
				}
			}

			// Token: 0x17002AD9 RID: 10969
			// (get) Token: 0x06008A7E RID: 35454 RVA: 0x0022D678 File Offset: 0x0022B878
			internal bool OutermostSubtotal
			{
				get
				{
					return this.m_outermostSubtotal;
				}
			}

			// Token: 0x17002ADA RID: 10970
			// (get) Token: 0x06008A7F RID: 35455 RVA: 0x0022D680 File Offset: 0x0022B880
			internal PivotHeading InnerHeading
			{
				get
				{
					return this.m_innerHeading;
				}
			}

			// Token: 0x17002ADB RID: 10971
			// (get) Token: 0x06008A80 RID: 35456 RVA: 0x0022D688 File Offset: 0x0022B888
			internal bool ProcessOutermostSTCells
			{
				get
				{
					return this.m_processOutermostSTCells;
				}
			}

			// Token: 0x17002ADC RID: 10972
			// (get) Token: 0x06008A81 RID: 35457 RVA: 0x0022D690 File Offset: 0x0022B890
			internal AggregatesImpl OutermostSTCellRVCol
			{
				get
				{
					return ((PivotHeading)this.m_hierarchyDef).OutermostSTCellRVCol;
				}
			}

			// Token: 0x17002ADD RID: 10973
			// (get) Token: 0x06008A82 RID: 35458 RVA: 0x0022D6A2 File Offset: 0x0022B8A2
			internal AggregatesImpl[] OutermostSTScopedCellRVCollections
			{
				get
				{
					return ((PivotHeading)this.m_hierarchyDef).OutermostSTCellScopedRVCollections;
				}
			}

			// Token: 0x17002ADE RID: 10974
			// (get) Token: 0x06008A83 RID: 35459 RVA: 0x0022D6B4 File Offset: 0x0022B8B4
			internal AggregatesImpl CellRVCol
			{
				get
				{
					return ((PivotHeading)this.m_hierarchyDef).CellRVCol;
				}
			}

			// Token: 0x17002ADF RID: 10975
			// (get) Token: 0x06008A84 RID: 35460 RVA: 0x0022D6C6 File Offset: 0x0022B8C6
			internal AggregatesImpl[] CellScopedRVCollections
			{
				get
				{
					return ((PivotHeading)this.m_hierarchyDef).CellScopedRVCollections;
				}
			}

			// Token: 0x17002AE0 RID: 10976
			// (get) Token: 0x06008A85 RID: 35461 RVA: 0x0022D6D8 File Offset: 0x0022B8D8
			internal int HeadingLevel
			{
				get
				{
					return this.m_headingLevel;
				}
			}

			// Token: 0x06008A86 RID: 35462
			protected abstract void NeedProcessDataActions(PivotHeading heading);

			// Token: 0x06008A87 RID: 35463 RVA: 0x0022D6E0 File Offset: 0x0022B8E0
			protected void NeedProcessDataActions(RunningValueInfoList runningValues)
			{
				if ((this.m_dataAction & ReportProcessing.DataActions.PostSortAggregates) != ReportProcessing.DataActions.None)
				{
					return;
				}
				if (runningValues != null && 0 < runningValues.Count)
				{
					this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
				}
			}

			// Token: 0x06008A88 RID: 35464 RVA: 0x0022D708 File Offset: 0x0022B908
			internal override bool SortAndFilter()
			{
				Pivot pivot = (Pivot)this.m_hierarchyDef.DataRegionDef;
				PivotHeading pivotHeading = (PivotHeading)this.m_hierarchyDef;
				if ((ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && this.m_hierarchyDef.Grouping.Filters == null && ((pivotHeading.IsColumn && this.m_headingLevel < pivot.InnermostColumnFilterLevel) || (!pivotHeading.IsColumn && this.m_headingLevel < pivot.InnermostRowFilterLevel)))
				{
					pivotHeading.Grouping.HasInnerFilters = true;
				}
				bool flag = base.SortAndFilter();
				pivotHeading.Grouping.HasInnerFilters = false;
				return flag;
			}

			// Token: 0x06008A89 RID: 35465 RVA: 0x0022D7A0 File Offset: 0x0022B9A0
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				Pivot pivot = (Pivot)this.m_hierarchyDef.DataRegionDef;
				PivotHeading pivotHeading = (PivotHeading)this.m_hierarchyDef;
				AggregatesImpl outermostSTCellRVCol = pivotHeading.OutermostSTCellRVCol;
				AggregatesImpl[] outermostSTCellScopedRVCollections = pivotHeading.OutermostSTCellScopedRVCollections;
				if (this.SetupCellRunningValues(ref outermostSTCellRVCol, ref outermostSTCellScopedRVCollections))
				{
					pivotHeading.OutermostSTCellRVCol = outermostSTCellRVCol;
					pivotHeading.OutermostSTCellScopedRVCollections = outermostSTCellScopedRVCollections;
				}
				if (this.m_processOutermostSTCells)
				{
					if (this.m_innerGroupings != null)
					{
						pivot.CurrentOuterHeadingGroupRoot = this;
					}
					this.m_processingContext.EnterPivotCell(this.m_innerGroupings != null);
					pivot.ProcessOutermostSTCellRunningValues = true;
					this.AddCellRunningValues(outermostSTCellRVCol, groupCol, ref this.m_outermostSTCellRVs);
					pivot.ProcessOutermostSTCellRunningValues = false;
					this.m_processingContext.ExitPivotCell();
				}
				if (this.m_innerGroupings != null)
				{
					AggregatesImpl cellRVCol = pivotHeading.CellRVCol;
					AggregatesImpl[] cellScopedRVCollections = pivotHeading.CellScopedRVCollections;
					if (this.SetupCellRunningValues(ref cellRVCol, ref cellScopedRVCollections))
					{
						pivotHeading.CellRVCol = cellRVCol;
						pivotHeading.CellScopedRVCollections = cellScopedRVCollections;
						return;
					}
				}
				else
				{
					ReportProcessing.RuntimePivotGroupRootObj currentOuterHeadingGroupRoot = pivot.CurrentOuterHeadingGroupRoot;
					if (this.m_innerHeading == null && currentOuterHeadingGroupRoot != null)
					{
						this.m_processingContext.EnterPivotCell(true);
						pivot.ProcessCellRunningValues = true;
						this.m_cellRVs = null;
						this.AddCellRunningValues(currentOuterHeadingGroupRoot.CellRVCol, groupCol, ref this.m_cellRVs);
						pivot.ProcessCellRunningValues = false;
						this.m_processingContext.ExitPivotCell();
					}
				}
			}

			// Token: 0x06008A8A RID: 35466 RVA: 0x0022D8D6 File Offset: 0x0022BAD6
			private bool SetupCellRunningValues(ref AggregatesImpl globalCellRVCol, ref AggregatesImpl[] cellScopedRVLists)
			{
				if (globalCellRVCol == null || cellScopedRVLists == null)
				{
					globalCellRVCol = new AggregatesImpl(this.m_processingContext.ReportRuntime);
					cellScopedRVLists = this.CreateScopedCellRVCollections();
					return true;
				}
				return false;
			}

			// Token: 0x06008A8B RID: 35467
			protected abstract void AddCellRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ref DataAggregateObjList runningValues);

			// Token: 0x06008A8C RID: 35468 RVA: 0x0022D900 File Offset: 0x0022BB00
			internal override void AddScopedRunningValue(DataAggregateObj runningValueObj, bool escalate)
			{
				Pivot pivot = (Pivot)this.m_hierarchyDef.DataRegionDef;
				if (pivot.ProcessOutermostSTCellRunningValues || pivot.ProcessCellRunningValues)
				{
					ReportProcessing.RuntimePivotGroupRootObj currentOuterHeadingGroupRoot = pivot.CurrentOuterHeadingGroupRoot;
					int headingLevel = currentOuterHeadingGroupRoot.HeadingLevel;
					PivotHeading pivotHeading;
					if (escalate)
					{
						pivotHeading = (PivotHeading)currentOuterHeadingGroupRoot.HierarchyDef;
					}
					else
					{
						pivotHeading = (PivotHeading)this.m_hierarchyDef;
					}
					if (pivot.ProcessOutermostSTCellRunningValues)
					{
						this.AddCellScopedRunningValue(runningValueObj, pivotHeading.OutermostSTCellScopedRVCollections, headingLevel);
						return;
					}
					if (pivot.ProcessCellRunningValues)
					{
						this.AddCellScopedRunningValue(runningValueObj, pivotHeading.CellScopedRVCollections, headingLevel);
						return;
					}
				}
				else
				{
					base.AddScopedRunningValue(runningValueObj, escalate);
				}
			}

			// Token: 0x06008A8D RID: 35469 RVA: 0x0022D990 File Offset: 0x0022BB90
			private void AddCellScopedRunningValue(DataAggregateObj runningValueObj, AggregatesImpl[] cellScopedRVLists, int currentOuterHeadingLevel)
			{
				if (cellScopedRVLists != null)
				{
					AggregatesImpl aggregatesImpl = cellScopedRVLists[currentOuterHeadingLevel];
					if (aggregatesImpl == null)
					{
						aggregatesImpl = (cellScopedRVLists[currentOuterHeadingLevel] = new AggregatesImpl(this.m_processingContext.ReportRuntime));
					}
					if (aggregatesImpl.GetAggregateObj(runningValueObj.Name) == null)
					{
						aggregatesImpl.Add(runningValueObj);
					}
				}
			}

			// Token: 0x06008A8E RID: 35470 RVA: 0x0022D9D4 File Offset: 0x0022BBD4
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				Pivot pivot = (Pivot)this.m_hierarchyDef.DataRegionDef;
				if (pivot.ProcessCellRunningValues)
				{
					Global.Tracer.Assert(ReportProcessing.DataActions.PostSortAggregates == dataAction, "(DataActions.PostSortAggregates == dataAction)");
					if (this.m_cellRVs != null)
					{
						for (int i = 0; i < this.m_cellRVs.Count; i++)
						{
							this.m_cellRVs[i].Update();
						}
					}
					if (this.m_outerScope != null && pivot.CellPostSortAggregates != null)
					{
						this.m_outerScope.ReadRow(dataAction);
						return;
					}
				}
				else
				{
					if (ReportProcessing.DataActions.PostSortAggregates == dataAction && this.m_outermostSTCellRVs != null)
					{
						for (int j = 0; j < this.m_outermostSTCellRVs.Count; j++)
						{
							this.m_outermostSTCellRVs[j].Update();
						}
					}
					base.ReadRow(dataAction);
				}
			}

			// Token: 0x06008A8F RID: 35471 RVA: 0x0022DA94 File Offset: 0x0022BC94
			private AggregatesImpl[] CreateScopedCellRVCollections()
			{
				int dynamicHeadingCount = ((Pivot)this.m_hierarchyDef.DataRegionDef).GetDynamicHeadingCount(true);
				if (0 < dynamicHeadingCount)
				{
					return new AggregatesImpl[dynamicHeadingCount];
				}
				return null;
			}

			// Token: 0x06008A90 RID: 35472 RVA: 0x0022DAC4 File Offset: 0x0022BCC4
			internal bool GetCellTargetForNonDetailSort()
			{
				if (this.m_outerScope is ReportProcessing.RuntimePivotObj)
				{
					return this.m_outerScope.TargetForNonDetailSort;
				}
				return ((ReportProcessing.RuntimePivotGroupLeafObj)this.m_outerScope).GetCellTargetForNonDetailSort();
			}

			// Token: 0x06008A91 RID: 35473 RVA: 0x0022DAEF File Offset: 0x0022BCEF
			internal bool GetCellTargetForSort(int index, bool detailSort)
			{
				if (this.m_outerScope is ReportProcessing.RuntimePivotObj)
				{
					return this.m_outerScope.IsTargetForSort(index, detailSort);
				}
				return ((ReportProcessing.RuntimePivotGroupLeafObj)this.m_outerScope).GetCellTargetForSort(index, detailSort);
			}

			// Token: 0x0400495F RID: 18783
			protected ReportProcessing.RuntimePivotHeadingsObj m_innerGroupings;

			// Token: 0x04004960 RID: 18784
			protected PivotHeading m_staticHeadingDef;

			// Token: 0x04004961 RID: 18785
			protected bool m_outermostSubtotal;

			// Token: 0x04004962 RID: 18786
			protected PivotHeading m_innerHeading;

			// Token: 0x04004963 RID: 18787
			protected Subtotal m_innerSubtotal;

			// Token: 0x04004964 RID: 18788
			protected PivotHeading m_innerSubtotalStaticHeading;

			// Token: 0x04004965 RID: 18789
			protected bool m_processOutermostSTCells;

			// Token: 0x04004966 RID: 18790
			protected DataAggregateObjList m_outermostSTCellRVs;

			// Token: 0x04004967 RID: 18791
			protected DataAggregateObjList m_cellRVs;

			// Token: 0x04004968 RID: 18792
			protected int m_headingLevel;
		}

		// Token: 0x02000C64 RID: 3172
		internal abstract class RuntimePivotGroupLeafObj : ReportProcessing.RuntimeGroupLeafObj
		{
			// Token: 0x06008A92 RID: 35474 RVA: 0x0022DB1E File Offset: 0x0022BD1E
			internal RuntimePivotGroupLeafObj(ReportProcessing.RuntimePivotGroupRootObj groupRoot)
				: base(groupRoot)
			{
			}

			// Token: 0x17002AE1 RID: 10977
			// (get) Token: 0x06008A93 RID: 35475 RVA: 0x0022DB35 File Offset: 0x0022BD35
			internal PivotHeading PivotHeadingDef
			{
				get
				{
					return (PivotHeading)((ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot).HierarchyDef;
				}
			}

			// Token: 0x17002AE2 RID: 10978
			// (get) Token: 0x06008A94 RID: 35476 RVA: 0x0022DB4C File Offset: 0x0022BD4C
			internal DataAggregateObjList CellPostSortAggregates
			{
				get
				{
					return this.m_cellPostSortAggregates;
				}
			}

			// Token: 0x17002AE3 RID: 10979
			// (get) Token: 0x06008A95 RID: 35477 RVA: 0x0022DB54 File Offset: 0x0022BD54
			internal Pivot PivotDef
			{
				get
				{
					return (Pivot)this.PivotHeadingDef.DataRegionDef;
				}
			}

			// Token: 0x17002AE4 RID: 10980
			// (get) Token: 0x06008A96 RID: 35478 RVA: 0x0022DB66 File Offset: 0x0022BD66
			internal int HeadingLevel
			{
				get
				{
					return ((ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot).HeadingLevel;
				}
			}

			// Token: 0x06008A97 RID: 35479 RVA: 0x0022DB78 File Offset: 0x0022BD78
			protected void ConstructorHelper(ReportProcessing.RuntimePivotGroupRootObj groupRoot, Pivot pivotDef, out bool handleMyDataAction, out ReportProcessing.DataActions innerDataAction)
			{
				PivotHeading innerHeading = groupRoot.InnerHeading;
				this.m_dataAction = groupRoot.DataAction;
				handleMyDataAction = false;
				if (groupRoot.ProcessOutermostSTCells)
				{
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, pivotDef.CellAggregates, ref this.m_firstPassCellNonCustomAggs, ref this.m_firstPassCellCustomAggs);
					if (pivotDef.CellPostSortAggregates != null)
					{
						handleMyDataAction = true;
						ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, pivotDef.CellPostSortAggregates, ref this.m_postSortAggregates);
					}
				}
				this.ConstructRuntimeStructure(ref handleMyDataAction, out innerDataAction);
				if (this.IsOuterGrouping())
				{
					int[] outerGroupingCounters = ((ReportProcessing.RuntimePivotObj)pivotDef.RuntimeDataRegionObj).OuterGroupingCounters;
					int headingLevel = groupRoot.HeadingLevel;
					int num = outerGroupingCounters[headingLevel] + 1;
					outerGroupingCounters[headingLevel] = num;
					this.m_groupLeafIndex = num;
				}
				PivotHeading pivotHeading = (PivotHeading)groupRoot.HierarchyDef;
				Global.Tracer.Assert(pivotHeading.Grouping != null, "(null != pivotHeading.Grouping)");
				if (pivotHeading.Grouping.Filters != null)
				{
					if (pivotHeading.IsColumn)
					{
						if (groupRoot.HeadingLevel > pivotDef.InnermostColumnFilterLevel)
						{
							pivotDef.InnermostColumnFilterLevel = groupRoot.HeadingLevel;
							return;
						}
					}
					else if (groupRoot.HeadingLevel > pivotDef.InnermostRowFilterLevel)
					{
						pivotDef.InnermostRowFilterLevel = groupRoot.HeadingLevel;
					}
				}
			}

			// Token: 0x06008A98 RID: 35480 RVA: 0x0022DC8C File Offset: 0x0022BE8C
			protected override void ConstructRuntimeStructure(ref bool handleMyDataAction, out ReportProcessing.DataActions innerDataAction)
			{
				ReportProcessing.RuntimePivotGroupRootObj runtimePivotGroupRootObj = (ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot;
				Pivot pivot = (Pivot)runtimePivotGroupRootObj.HierarchyDef.DataRegionDef;
				base.ConstructRuntimeStructure(ref handleMyDataAction, out innerDataAction);
				if (!this.IsOuterGrouping() && (runtimePivotGroupRootObj.InnerHeading == null || runtimePivotGroupRootObj.InnerHeading.Subtotal != null))
				{
					PivotHeading pivotHeading = null;
					PivotHeading pivotHeading2 = pivot.GetPivotHeading(true);
					int dynamicHeadingCount = pivot.GetDynamicHeadingCount(true);
					int num = 0;
					pivot.SkipStaticHeading(ref pivotHeading2, ref pivotHeading);
					while (pivotHeading2 != null)
					{
						pivotHeading2 = (PivotHeading)pivotHeading2.InnerHierarchy;
						bool flag = pivot.SubtotalInInnerHeading(ref pivotHeading2, ref pivotHeading);
						if (this.m_cellsList == null)
						{
							this.m_cellsList = new ReportProcessing.RuntimePivotCells[dynamicHeadingCount];
							if (this.m_cellPostSortAggregates == null)
							{
								ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, pivot.CellPostSortAggregates, ref this.m_cellPostSortAggregates);
							}
						}
						ReportProcessing.RuntimePivotCells runtimePivotCells = null;
						if (pivotHeading2 == null || flag)
						{
							runtimePivotCells = new ReportProcessing.RuntimePivotCells();
						}
						this.m_cellsList[num++] = runtimePivotCells;
					}
				}
			}

			// Token: 0x06008A99 RID: 35481
			internal abstract ReportProcessing.RuntimePivotCell CreateCell(int index, Pivot pivotDef);

			// Token: 0x06008A9A RID: 35482 RVA: 0x0022DD78 File Offset: 0x0022BF78
			internal override void NextRow()
			{
				Pivot pivotDef = this.PivotDef;
				int headingLevel = this.HeadingLevel;
				bool flag = this.IsOuterGrouping();
				if (flag)
				{
					pivotDef.OuterGroupingIndexes[headingLevel] = this.m_groupLeafIndex;
				}
				base.UpdateAggregateInfo();
				if (flag)
				{
					pivotDef.SaveOuterGroupingAggregateRowInfo(headingLevel, this.m_processingContext);
				}
				FieldsImpl fieldsImpl = this.m_processingContext.ReportObjectModel.FieldsImpl;
				if (fieldsImpl.AggregationFieldCount == 0 && fieldsImpl.ValidAggregateRow)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_firstPassCellCustomAggs, false);
				}
				if (!this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_firstPassCellNonCustomAggs, false);
				}
				base.InternalNextRow();
			}

			// Token: 0x06008A9B RID: 35483 RVA: 0x0022DE24 File Offset: 0x0022C024
			protected override void SendToInner()
			{
				base.SendToInner();
				if (this.m_cellsList != null)
				{
					Global.Tracer.Assert(!this.IsOuterGrouping(), "(!IsOuterGrouping())");
					Pivot pivotDef = this.PivotDef;
					int[] outerGroupingIndexes = pivotDef.OuterGroupingIndexes;
					for (int i = 0; i < pivotDef.GetDynamicHeadingCount(true); i++)
					{
						int num = outerGroupingIndexes[i];
						ReportProcessing.AggregateRowInfo aggregateRowInfo = new ReportProcessing.AggregateRowInfo();
						aggregateRowInfo.SaveAggregateInfo(this.m_processingContext);
						pivotDef.SetCellAggregateRowInfo(i, this.m_processingContext);
						ReportProcessing.RuntimePivotCells runtimePivotCells = this.m_cellsList[i];
						if (runtimePivotCells != null)
						{
							ReportProcessing.RuntimePivotCell runtimePivotCell = runtimePivotCells[num];
							if (runtimePivotCell == null)
							{
								runtimePivotCell = this.CreateCell(i, pivotDef);
								runtimePivotCells.Add(num, runtimePivotCell);
							}
							runtimePivotCell.NextRow();
						}
						aggregateRowInfo.RestoreAggregateInfo(this.m_processingContext);
					}
				}
				if (this.m_pivotHeadings != null)
				{
					this.m_pivotHeadings.NextRow();
				}
			}

			// Token: 0x06008A9C RID: 35484 RVA: 0x0022DEF4 File Offset: 0x0022C0F4
			internal override bool SortAndFilter()
			{
				ReportProcessing.RuntimePivotGroupRootObj runtimePivotGroupRootObj = (ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot;
				bool flag = false;
				if (this.m_innerHierarchy != null && !this.m_pivotHeadings.SortAndFilter())
				{
					Global.Tracer.Assert((ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) > (ReportProcessing.ProcessingContext.SecondPassOperations)0);
					Global.Tracer.Assert(runtimePivotGroupRootObj.GroupFilters != null, "(null != groupRoot.GroupFilters)");
					runtimePivotGroupRootObj.GroupFilters.FailFilters = true;
					flag = true;
				}
				bool flag2 = base.SortAndFilter();
				if (flag)
				{
					runtimePivotGroupRootObj.GroupFilters.FailFilters = false;
				}
				if (flag2 && this.m_cellsList != null)
				{
					for (int i = 0; i < this.m_cellsList.Length; i++)
					{
						if (this.m_cellsList[i] != null)
						{
							this.m_cellsList[i].SortAndFilter();
						}
					}
				}
				return flag2;
			}

			// Token: 0x06008A9D RID: 35485 RVA: 0x0022DFB0 File Offset: 0x0022C1B0
			internal override void CalculateRunningValues()
			{
				Pivot pivotDef = this.PivotDef;
				ReportProcessing.RuntimePivotGroupRootObj runtimePivotGroupRootObj = (ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot;
				AggregatesImpl globalRunningValueCollection = runtimePivotGroupRootObj.GlobalRunningValueCollection;
				ReportProcessing.RuntimeGroupRootObjList groupCollection = runtimePivotGroupRootObj.GroupCollection;
				bool flag = this.IsOuterGrouping();
				pivotDef.GetDynamicHeadingCount(true);
				if (this.m_processHeading)
				{
					if (this.m_dataRows != null && (ReportProcessing.DataActions.PostSortAggregates & this.m_dataAction) != ReportProcessing.DataActions.None)
					{
						base.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
						this.m_dataRows = null;
					}
					this.m_pivotHeadings.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimePivotGroupRootObj);
				}
				else if (this.m_innerHierarchy != null)
				{
					this.m_innerHierarchy.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimePivotGroupRootObj);
				}
				if (flag)
				{
					if (this.m_innerHierarchy == null || ((PivotHeading)this.m_innerHierarchy.HierarchyDef).Subtotal != null)
					{
						pivotDef.CurrentOuterHeadingGroupRoot = runtimePivotGroupRootObj;
						pivotDef.OuterGroupingIndexes[runtimePivotGroupRootObj.HeadingLevel] = this.m_groupLeafIndex;
						runtimePivotGroupRootObj.InnerGroupings.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimePivotGroupRootObj);
						return;
					}
				}
				else if (this.m_cellsList != null)
				{
					ReportProcessing.RuntimePivotGroupRootObj currentOuterHeadingGroupRoot = pivotDef.CurrentOuterHeadingGroupRoot;
					ReportProcessing.RuntimePivotCells runtimePivotCells = this.m_cellsList[currentOuterHeadingGroupRoot.HeadingLevel];
					Global.Tracer.Assert(runtimePivotCells != null, "(null != cells)");
					pivotDef.ProcessCellRunningValues = true;
					runtimePivotCells.CalculateRunningValues(pivotDef, currentOuterHeadingGroupRoot.CellRVCol, groupCollection, runtimePivotGroupRootObj, this, currentOuterHeadingGroupRoot.HeadingLevel);
					pivotDef.ProcessCellRunningValues = false;
				}
			}

			// Token: 0x06008A9E RID: 35486 RVA: 0x0022E0E2 File Offset: 0x0022C2E2
			protected override void ResetScopedRunningValues()
			{
				base.ResetScopedRunningValues();
				this.ResetScopedCellRunningValues();
			}

			// Token: 0x06008A9F RID: 35487 RVA: 0x0022E0F0 File Offset: 0x0022C2F0
			internal bool IsOuterGrouping()
			{
				ReportProcessing.RuntimePivotGroupRootObj runtimePivotGroupRootObj = (ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot;
				return runtimePivotGroupRootObj.InnerGroupings != null;
			}

			// Token: 0x06008AA0 RID: 35488 RVA: 0x0022E114 File Offset: 0x0022C314
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.UserSort == dataAction)
				{
					ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
					base.CommonNextRow(this.m_dataRows);
					return;
				}
				if (this.PivotDef.ProcessCellRunningValues)
				{
					if (ReportProcessing.DataActions.PostSortAggregates == dataAction && this.m_cellPostSortAggregates != null)
					{
						ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_cellPostSortAggregates, false);
					}
					((ReportProcessing.IScope)this.m_hierarchyRoot).ReadRow(dataAction);
					return;
				}
				base.ReadRow(dataAction);
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction)
				{
					this.CalculatePreviousAggregates();
				}
			}

			// Token: 0x06008AA1 RID: 35489 RVA: 0x0022E19D File Offset: 0x0022C39D
			protected virtual bool CalculatePreviousAggregates()
			{
				if (!this.m_processedPreviousAggregates && this.m_processingContext.GlobalRVCollection != null)
				{
					if (this.m_innerHierarchy != null)
					{
						this.m_pivotHeadings.CalculatePreviousAggregates(this.m_processingContext.GlobalRVCollection);
					}
					this.m_processedPreviousAggregates = true;
					return true;
				}
				return false;
			}

			// Token: 0x06008AA2 RID: 35490 RVA: 0x0022E1DC File Offset: 0x0022C3DC
			protected void ResetScopedCellRunningValues()
			{
				ReportProcessing.RuntimePivotGroupRootObj runtimePivotGroupRootObj = (ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot;
				if (runtimePivotGroupRootObj.OutermostSTScopedCellRVCollections != null)
				{
					for (int i = 0; i < runtimePivotGroupRootObj.OutermostSTScopedCellRVCollections.Length; i++)
					{
						AggregatesImpl aggregatesImpl = runtimePivotGroupRootObj.OutermostSTScopedCellRVCollections[i];
						if (aggregatesImpl != null)
						{
							foreach (object obj in aggregatesImpl.Objects)
							{
								((DataAggregateObj)obj).Init();
							}
						}
					}
				}
				if (runtimePivotGroupRootObj.CellScopedRVCollections != null)
				{
					for (int j = 0; j < runtimePivotGroupRootObj.CellScopedRVCollections.Length; j++)
					{
						AggregatesImpl aggregatesImpl2 = runtimePivotGroupRootObj.CellScopedRVCollections[j];
						if (aggregatesImpl2 != null)
						{
							foreach (object obj2 in aggregatesImpl2.Objects)
							{
								((DataAggregateObj)obj2).Init();
							}
						}
					}
				}
			}

			// Token: 0x06008AA3 RID: 35491 RVA: 0x0022E2E0 File Offset: 0x0022C4E0
			internal override void SetupEnvironment()
			{
				base.SetupEnvironment();
				this.SetupAggregateValues(this.m_firstPassCellNonCustomAggs, this.m_firstPassCellCustomAggs);
			}

			// Token: 0x06008AA4 RID: 35492 RVA: 0x0022E2FA File Offset: 0x0022C4FA
			private void SetupAggregateValues(DataAggregateObjList nonCustomAggCollection, DataAggregateObjList customAggCollection)
			{
				base.SetupAggregates(nonCustomAggCollection);
				base.SetupAggregates(customAggCollection);
			}

			// Token: 0x06008AA5 RID: 35493 RVA: 0x0022E30A File Offset: 0x0022C50A
			internal bool GetCellTargetForNonDetailSort()
			{
				return ((ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot).GetCellTargetForNonDetailSort();
			}

			// Token: 0x06008AA6 RID: 35494 RVA: 0x0022E31C File Offset: 0x0022C51C
			internal bool GetCellTargetForSort(int index, bool detailSort)
			{
				return ((ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot).GetCellTargetForSort(index, detailSort);
			}

			// Token: 0x06008AA7 RID: 35495 RVA: 0x0022E330 File Offset: 0x0022C530
			internal bool NeedHandleCellSortFilterEvent()
			{
				return base.GroupingDef.SortFilterScopeMatched != null || base.GroupingDef.NeedScopeInfoForSortFilterExpression != null;
			}

			// Token: 0x06008AA8 RID: 35496 RVA: 0x0022E350 File Offset: 0x0022C550
			internal ReportProcessing.RuntimePivotObj GetOwnerPivot()
			{
				ReportProcessing.IScope scope = this.OuterScope;
				while (!(scope is ReportProcessing.RuntimePivotObj))
				{
					scope = scope.GetOuterScope(false);
				}
				Global.Tracer.Assert(scope is ReportProcessing.RuntimePivotObj, "(outerScope is RuntimePivotObj)");
				return (ReportProcessing.RuntimePivotObj)scope;
			}

			// Token: 0x04004969 RID: 18793
			protected ReportProcessing.RuntimePivotHeadingsObj m_pivotHeadings;

			// Token: 0x0400496A RID: 18794
			protected ReportProcessing.RuntimePivotGroupRootObj m_innerHierarchy;

			// Token: 0x0400496B RID: 18795
			protected DataAggregateObjList m_firstPassCellNonCustomAggs;

			// Token: 0x0400496C RID: 18796
			protected DataAggregateObjList m_firstPassCellCustomAggs;

			// Token: 0x0400496D RID: 18797
			protected ReportProcessing.RuntimePivotCells[] m_cellsList;

			// Token: 0x0400496E RID: 18798
			protected DataAggregateObjList m_cellPostSortAggregates;

			// Token: 0x0400496F RID: 18799
			protected int m_groupLeafIndex = -1;

			// Token: 0x04004970 RID: 18800
			protected bool m_processHeading = true;
		}

		// Token: 0x02000C65 RID: 3173
		private sealed class RuntimeOnePassOWCChartDetailObj : ReportProcessing.RuntimeOnePassDetailObj, ReportProcessing.IFilterOwner
		{
			// Token: 0x06008AA9 RID: 35497 RVA: 0x0022E394 File Offset: 0x0022C594
			internal RuntimeOnePassOWCChartDetailObj(ReportProcessing.IScope outerScope, OWCChart chartDef, ReportProcessing.ProcessingContext processingContext)
				: base(outerScope, chartDef, processingContext)
			{
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, chartDef.Aggregates, ref this.m_nonCustomAggregates, ref this.m_customAggregates);
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, chartDef.PostSortAggregates, ref this.m_nonCustomAggregates);
				if (chartDef.RunningValues != null && 0 < chartDef.RunningValues.Count)
				{
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, chartDef.RunningValues, ref this.m_nonCustomAggregates);
				}
				if (chartDef.Filters != null)
				{
					this.m_filters = new Filters(Filters.FilterTypes.DataRegionFilter, this, chartDef.Filters, chartDef.ObjectType, chartDef.Name, this.m_processingContext);
				}
				base.AddRunningValues(chartDef.DetailRunningValues);
				this.m_chartData = new VariantList[chartDef.ChartData.Count];
				for (int i = 0; i < chartDef.ChartData.Count; i++)
				{
					this.m_chartData[i] = new VariantList();
				}
			}

			// Token: 0x17002AE5 RID: 10981
			// (get) Token: 0x06008AAA RID: 35498 RVA: 0x0022E47D File Offset: 0x0022C67D
			internal VariantList[] OWCChartData
			{
				get
				{
					return this.m_chartData;
				}
			}

			// Token: 0x17002AE6 RID: 10982
			// (get) Token: 0x06008AAB RID: 35499 RVA: 0x0022E485 File Offset: 0x0022C685
			protected override string ScopeName
			{
				get
				{
					return this.m_dataRegionDef.Name;
				}
			}

			// Token: 0x06008AAC RID: 35500 RVA: 0x0022E492 File Offset: 0x0022C692
			internal override int GetDetailPage()
			{
				return 0;
			}

			// Token: 0x06008AAD RID: 35501 RVA: 0x0022E495 File Offset: 0x0022C695
			internal override void NextRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					this.NextAggregateRow();
					return;
				}
				this.NextNonAggregateRow();
			}

			// Token: 0x06008AAE RID: 35502 RVA: 0x0022E4BC File Offset: 0x0022C6BC
			private void NextNonAggregateRow()
			{
				bool flag = true;
				if (this.m_filters != null)
				{
					flag = this.m_filters.PassFilters(this.m_processingContext.ReportObjectModel.FieldsImpl.GetFields());
				}
				if (flag)
				{
					((ReportProcessing.IFilterOwner)this).PostFilterNextRow();
				}
			}

			// Token: 0x06008AAF RID: 35503 RVA: 0x0022E4FD File Offset: 0x0022C6FD
			private void NextAggregateRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.AggregationFieldCount == 0)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_customAggregates, false);
				}
			}

			// Token: 0x06008AB0 RID: 35504 RVA: 0x0022E528 File Offset: 0x0022C728
			void ReportProcessing.IFilterOwner.PostFilterNextRow()
			{
				if (this.m_firstRow == null)
				{
					this.m_firstRow = this.m_processingContext.ReportObjectModel.FieldsImpl.GetAndSaveFields();
				}
				base.NextRow();
			}

			// Token: 0x06008AB1 RID: 35505 RVA: 0x0022E554 File Offset: 0x0022C754
			protected override void CreateInstance()
			{
				OWCChart owcchart = (OWCChart)this.m_dataRegionDef;
				for (int i = 0; i < owcchart.ChartData.Count; i++)
				{
					this.m_chartData[i].Add(this.m_processingContext.ReportRuntime.EvaluateOWCChartData(owcchart, owcchart.ChartData[i].Value));
				}
			}

			// Token: 0x06008AB2 RID: 35506 RVA: 0x0022E5B3 File Offset: 0x0022C7B3
			internal override void SetupEnvironment()
			{
				base.SetupEnvironment(this.m_nonCustomAggregates, this.m_customAggregates, this.m_firstRow);
			}

			// Token: 0x06008AB3 RID: 35507 RVA: 0x0022E5CD File Offset: 0x0022C7CD
			internal override bool InScope(string scope)
			{
				return base.DataRegionInScope(this.m_dataRegionDef, scope);
			}

			// Token: 0x04004971 RID: 18801
			private Filters m_filters;

			// Token: 0x04004972 RID: 18802
			private VariantList[] m_chartData;

			// Token: 0x04004973 RID: 18803
			private DataAggregateObjList m_nonCustomAggregates;

			// Token: 0x04004974 RID: 18804
			private DataAggregateObjList m_customAggregates;

			// Token: 0x04004975 RID: 18805
			private FieldImpl[] m_firstRow;
		}

		// Token: 0x02000C66 RID: 3174
		private sealed class RuntimeMatrixHeadingsObj : ReportProcessing.RuntimePivotHeadingsObj
		{
			// Token: 0x06008AB4 RID: 35508 RVA: 0x0022E5DC File Offset: 0x0022C7DC
			internal RuntimeMatrixHeadingsObj(ReportProcessing.IScope owner, MatrixHeading headingDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, MatrixHeading staticHeadingDef, ReportProcessing.RuntimeMatrixHeadingsObj innerGroupings, bool outermostHeadingSubtotal, int headingLevel)
				: base(owner, headingDef, ref dataAction, processingContext, staticHeadingDef, innerGroupings, outermostHeadingSubtotal, headingLevel)
			{
				if (headingDef != null)
				{
					this.m_pivotHeadings = new ReportProcessing.RuntimeMatrixGroupRootObj(owner, headingDef, ref dataAction, processingContext, innerGroupings, outermostHeadingSubtotal, headingLevel);
					if (headingDef.Subtotal != null)
					{
						this.m_subtotalHeadingDef = headingDef;
						this.m_subtotal = new ReportProcessing.RuntimeRICollection(owner, this.m_subtotalHeadingDef.Subtotal.ReportItems, ref dataAction, processingContext, true);
						MatrixHeading matrixHeading = (MatrixHeading)headingDef.GetInnerStaticHeading();
						if (matrixHeading != null)
						{
							this.m_subtotalStaticHeadingDef = matrixHeading;
							this.m_subtotalStaticHeading = new ReportProcessing.RuntimeRICollection(owner, this.m_subtotalStaticHeadingDef.ReportItems, ref dataAction, processingContext, true);
						}
					}
				}
				if (this.m_staticHeadingDef != null)
				{
					this.m_staticHeading = new ReportProcessing.RuntimeRICollection(owner, ((MatrixHeading)this.m_staticHeadingDef).ReportItems, ref dataAction, processingContext, true);
				}
			}

			// Token: 0x06008AB5 RID: 35509 RVA: 0x0022E6A0 File Offset: 0x0022C8A0
			internal override void NextRow()
			{
				base.NextRow();
				if (this.m_subtotal != null)
				{
					this.m_subtotal.FirstPassNextDataRow();
					if (this.m_subtotalStaticHeading != null)
					{
						this.m_subtotalStaticHeading.FirstPassNextDataRow();
					}
				}
				if (this.m_staticHeading != null)
				{
					this.m_staticHeading.FirstPassNextDataRow();
				}
			}

			// Token: 0x06008AB6 RID: 35510 RVA: 0x0022E6EC File Offset: 0x0022C8EC
			internal override bool SortAndFilter()
			{
				bool flag = base.SortAndFilter();
				if (flag)
				{
					if (this.m_subtotal != null)
					{
						this.m_subtotal.SortAndFilter();
						if (this.m_subtotalStaticHeading != null)
						{
							this.m_subtotalStaticHeading.SortAndFilter();
						}
					}
					if (this.m_staticHeading != null)
					{
						this.m_staticHeading.SortAndFilter();
					}
				}
				return flag;
			}

			// Token: 0x06008AB7 RID: 35511 RVA: 0x0022E73C File Offset: 0x0022C93C
			internal override void CalculatePreviousAggregates(AggregatesImpl globalRVCol)
			{
				if (this.m_pivotHeadings != null && this.m_subtotal != null)
				{
					this.m_subtotal.CalculatePreviousAggregates(globalRVCol);
					if (this.m_subtotalStaticHeading != null)
					{
						this.m_subtotalStaticHeading.CalculatePreviousAggregates(globalRVCol);
					}
				}
				if (this.m_staticHeading != null)
				{
					this.m_staticHeading.CalculatePreviousAggregates(globalRVCol);
				}
			}

			// Token: 0x06008AB8 RID: 35512 RVA: 0x0022E790 File Offset: 0x0022C990
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				if (this.m_owner is ReportProcessing.RuntimeMatrixObj)
				{
					if (this.m_subtotal != null)
					{
						this.m_subtotal.CalculateInnerRunningValues(globalRVCol, groupCol, lastGroup);
						if (this.m_subtotalStaticHeading != null)
						{
							this.m_subtotalStaticHeading.CalculateInnerRunningValues(globalRVCol, groupCol, lastGroup);
						}
					}
					if (this.m_staticHeading != null)
					{
						this.m_staticHeading.CalculateInnerRunningValues(globalRVCol, groupCol, lastGroup);
						return;
					}
				}
				else
				{
					if (this.m_subtotal != null)
					{
						this.m_subtotal.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
						if (this.m_subtotalStaticHeading != null)
						{
							this.m_subtotalStaticHeading.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
						}
					}
					if (this.m_staticHeading != null)
					{
						this.m_staticHeading.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
					}
				}
			}

			// Token: 0x06008AB9 RID: 35513 RVA: 0x0022E838 File Offset: 0x0022CA38
			internal void CreateInstances(ReportProcessing.RuntimeDataRegionObj outerGroup, ReportProcessing.ProcessingContext processingContext, MatrixInstance matrixInstance, bool outerGroupings, ReportProcessing.RuntimePivotGroupRootObj currOuterHeadingGroupRoot, MatrixHeadingInstanceList headingInstances, RenderingPagesRangesList pagesList)
			{
				bool flag = outerGroupings || matrixInstance.CurrentCellOuterIndex == 0;
				int num = 1;
				if (this.m_staticHeading != null)
				{
					num = this.m_staticHeading.ReportItemsDef.Count;
				}
				MatrixHeadingInstanceList matrixHeadingInstanceList = headingInstances;
				RenderingPagesRangesList renderingPagesRangesList = pagesList;
				for (int i = 0; i < num; i++)
				{
					bool flag2 = false;
					RenderingPagesRanges renderingPagesRanges = default(RenderingPagesRanges);
					ReportProcessing.PageTextboxes pageTextboxes = null;
					if (this.m_staticHeading != null)
					{
						if (flag)
						{
							matrixHeadingInstanceList = this.CreateHeadingInstance(processingContext, matrixInstance, (MatrixHeading)this.m_staticHeadingDef, headingInstances, outerGroupings, this.m_staticHeading, i, false, true, 0, num, out renderingPagesRangesList, out pageTextboxes);
							if (!((MatrixHeading)this.m_staticHeadingDef).IsColumn)
							{
								processingContext.Pagination.EnterIgnorePageBreak(this.m_staticHeadingDef.Visibility, false);
								renderingPagesRanges.StartPage = ((Matrix)matrixInstance.ReportItemDef).CurrentPage;
								flag2 = true;
							}
						}
						if (outerGroupings)
						{
							matrixInstance.CurrentOuterStaticIndex = i;
						}
						else
						{
							matrixInstance.CurrentInnerStaticIndex = i;
						}
					}
					if (this.m_pivotHeadings != null)
					{
						((Matrix)this.m_pivotHeadings.HierarchyDef.DataRegionDef).CurrentOuterHeadingGroupRoot = currOuterHeadingGroupRoot;
						if (this.m_subtotal == null || this.m_subtotalHeadingDef.Subtotal.Position == Subtotal.PositionType.After)
						{
							this.m_pivotHeadings.CreateInstances(matrixInstance, matrixHeadingInstanceList, renderingPagesRangesList);
						}
						if (this.m_subtotal != null)
						{
							MatrixHeadingInstanceList matrixHeadingInstanceList2 = null;
							RenderingPagesRangesList renderingPagesRangesList2 = null;
							ReportProcessing.PageTextboxes pageTextboxes2 = null;
							bool flag3 = false;
							RenderingPagesRanges renderingPagesRanges2 = default(RenderingPagesRanges);
							if (flag)
							{
								matrixHeadingInstanceList2 = this.CreateHeadingInstance(processingContext, matrixInstance, this.m_subtotalHeadingDef, matrixHeadingInstanceList, outerGroupings, this.m_subtotal, 0, true, false, i, num, out renderingPagesRangesList2, out pageTextboxes2);
								if (!this.m_subtotalHeadingDef.IsColumn)
								{
									processingContext.Pagination.EnterIgnorePageBreak(this.m_subtotalHeadingDef.Visibility, true);
									renderingPagesRanges2.StartPage = ((Matrix)matrixInstance.ReportItemDef).CurrentPage;
									flag3 = true;
								}
							}
							Global.Tracer.Assert(this.m_subtotalHeadingInstances[i] != null, "(null != m_subtotalHeadingInstances[i])");
							if (((Matrix)matrixInstance.ReportItemDef).ProcessingInnerGrouping == Pivot.ProcessingInnerGroupings.Column)
							{
								if (!this.m_subtotalHeadingInstances[i].MatrixHeadingDef.IsColumn)
								{
									processingContext.HeadingInstance = this.m_subtotalHeadingInstances[i];
								}
								else if (processingContext.HeadingInstance == null)
								{
									processingContext.HeadingInstance = this.m_subtotalHeadingInstances[i];
								}
							}
							else
							{
								processingContext.HeadingInstanceOld = processingContext.HeadingInstance;
								processingContext.HeadingInstance = this.m_subtotalHeadingInstances[i];
							}
							int num2 = 1;
							if (this.m_subtotalStaticHeading != null)
							{
								num2 = this.m_subtotalStaticHeading.ReportItemsDef.Count;
							}
							for (int j = 0; j < num2; j++)
							{
								bool flag4 = false;
								RenderingPagesRanges renderingPagesRanges3 = default(RenderingPagesRanges);
								if (this.m_owner is ReportProcessing.RuntimeMatrixObj)
								{
									((ReportProcessing.RuntimeMatrixObj)this.m_owner).SetupEnvironment();
								}
								else
								{
									((ReportProcessing.RuntimeMatrixGroupLeafObj)outerGroup).SetupEnvironment();
								}
								MatrixHeadingInstance headingInstance = processingContext.HeadingInstance;
								MatrixHeadingInstance headingInstanceOld = processingContext.HeadingInstanceOld;
								if (this.m_subtotalStaticHeading != null)
								{
									if (flag)
									{
										Global.Tracer.Assert(matrixHeadingInstanceList2 != null, "(null != subtotalInnerHeadings)");
										ReportProcessing.PageTextboxes pageTextboxes3 = null;
										RenderingPagesRangesList renderingPagesRangesList3;
										this.CreateHeadingInstance(processingContext, matrixInstance, this.m_subtotalStaticHeadingDef, matrixHeadingInstanceList2, outerGroupings, this.m_subtotalStaticHeading, j, true, true, 0, num, out renderingPagesRangesList3, out pageTextboxes3);
										processingContext.HeadingInstance = headingInstance;
										processingContext.HeadingInstanceOld = headingInstanceOld;
										if (!this.m_subtotalStaticHeadingDef.IsColumn)
										{
											processingContext.Pagination.EnterIgnorePageBreak(this.m_subtotalStaticHeadingDef.Visibility, true);
											renderingPagesRanges3.StartPage = matrixInstance.MatrixDef.CurrentPage;
											matrixInstance.MatrixDef.RowHeaderPageTextboxes.IntegrateRepeatingTextboxValues(pageTextboxes3, renderingPagesRanges3.StartPage, renderingPagesRanges3.StartPage);
											flag4 = true;
										}
									}
									if (outerGroupings)
									{
										matrixInstance.CurrentOuterStaticIndex = j;
									}
									else
									{
										matrixInstance.CurrentInnerStaticIndex = j;
									}
								}
								if (outerGroup is ReportProcessing.RuntimeMatrixGroupLeafObj)
								{
									((ReportProcessing.RuntimeMatrixGroupLeafObj)outerGroup).CreateSubtotalOrStaticCells(matrixInstance, currOuterHeadingGroupRoot, outerGroupings);
								}
								else
								{
									((ReportProcessing.RuntimeMatrixObj)outerGroup).CreateOutermostSubtotalCells(matrixInstance, outerGroupings);
								}
								if (num2 - 1 != j)
								{
									processingContext.HeadingInstance = headingInstance;
									processingContext.HeadingInstanceOld = headingInstanceOld;
								}
								if (flag4)
								{
									processingContext.Pagination.LeaveIgnorePageBreak(this.m_subtotalStaticHeadingDef.Visibility, true);
									renderingPagesRanges3.EndPage = renderingPagesRanges3.StartPage;
									renderingPagesRangesList2.Add(renderingPagesRanges3);
								}
								if (this.m_subtotalStaticHeading != null)
								{
									this.m_subtotalStaticHeading.ResetReportItemObjs();
								}
							}
							if (this.m_subtotalStaticHeading != null && flag)
							{
								this.SetHeadingSpan(matrixInstance, matrixHeadingInstanceList2, outerGroupings, processingContext);
							}
							if (flag3)
							{
								processingContext.Pagination.LeaveIgnorePageBreak(this.m_subtotalHeadingDef.Visibility, true);
								renderingPagesRanges2.EndPage = matrixInstance.MatrixDef.CurrentPage;
								if (renderingPagesRangesList2 == null || renderingPagesRangesList2.Count < 1)
								{
									renderingPagesRanges2.EndPage = renderingPagesRanges2.StartPage;
								}
								matrixInstance.MatrixDef.RowHeaderPageTextboxes.IntegrateRepeatingTextboxValues(pageTextboxes2, renderingPagesRanges2.StartPage, renderingPagesRanges2.EndPage);
								renderingPagesRangesList.Add(renderingPagesRanges2);
							}
						}
						if (outerGroupings)
						{
							processingContext.HeadingInstance = null;
						}
						if (this.m_subtotal != null && Subtotal.PositionType.Before == this.m_subtotalHeadingDef.Subtotal.Position)
						{
							this.m_pivotHeadings.CreateInstances(matrixInstance, matrixHeadingInstanceList, renderingPagesRangesList);
						}
						if (flag)
						{
							this.SetHeadingSpan(matrixInstance, matrixHeadingInstanceList, outerGroupings, processingContext);
						}
					}
					else if (outerGroup is ReportProcessing.RuntimeMatrixGroupLeafObj)
					{
						ReportProcessing.RuntimeMatrixGroupLeafObj runtimeMatrixGroupLeafObj = (ReportProcessing.RuntimeMatrixGroupLeafObj)outerGroup;
						runtimeMatrixGroupLeafObj.SetContentsPage();
						if (!outerGroupings && runtimeMatrixGroupLeafObj.IsOuterGrouping())
						{
							runtimeMatrixGroupLeafObj.CreateSubtotalOrStaticCells(matrixInstance, currOuterHeadingGroupRoot, outerGroupings);
						}
						else
						{
							runtimeMatrixGroupLeafObj.CreateInnerGroupingsOrCells(matrixInstance, currOuterHeadingGroupRoot);
							if (outerGroupings)
							{
								processingContext.HeadingInstance = null;
							}
						}
					}
					else
					{
						((ReportProcessing.RuntimeMatrixObj)outerGroup).CreateOutermostSubtotalCells(matrixInstance, outerGroupings);
					}
					if (flag2)
					{
						processingContext.Pagination.LeaveIgnorePageBreak(this.m_staticHeadingDef.Visibility, false);
						renderingPagesRanges.EndPage = matrixInstance.MatrixDef.CurrentPage;
						if (matrixHeadingInstanceList == null || matrixHeadingInstanceList.Count < 1)
						{
							renderingPagesRanges.EndPage = renderingPagesRanges.StartPage;
						}
						pagesList.Add(renderingPagesRanges);
						matrixInstance.MatrixDef.RowHeaderPageTextboxes.IntegrateRepeatingTextboxValues(pageTextboxes, renderingPagesRanges.StartPage, renderingPagesRanges.EndPage);
					}
					this.ResetReportItemObjs(processingContext);
				}
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == processingContext.ShowHideType && flag && this.m_staticHeading != null)
				{
					for (int k = num - 1; k >= 0; k--)
					{
						((IShowHideContainer)headingInstances[k]).EndProcessContainer(processingContext);
						processingContext.ExitGrouping();
					}
				}
				if (this.m_staticHeading != null && flag)
				{
					this.SetHeadingSpan(matrixInstance, headingInstances, outerGroupings, processingContext);
				}
			}

			// Token: 0x06008ABA RID: 35514 RVA: 0x0022EE50 File Offset: 0x0022D050
			private void SetHeadingSpan(MatrixInstance matrixInstance, MatrixHeadingInstanceList headingInstances, bool outerGroupings, ReportProcessing.ProcessingContext processingContext)
			{
				int num;
				if (outerGroupings)
				{
					num = matrixInstance.CurrentCellOuterIndex + 1;
				}
				else
				{
					num = matrixInstance.CurrentCellInnerIndex;
				}
				headingInstances.SetLastHeadingSpan(num, processingContext);
			}

			// Token: 0x06008ABB RID: 35515 RVA: 0x0022EE7C File Offset: 0x0022D07C
			private MatrixHeadingInstanceList CreateHeadingInstance(ReportProcessing.ProcessingContext processingContext, MatrixInstance matrixInstance, MatrixHeading headingDef, MatrixHeadingInstanceList headingInstances, bool outerGroupings, ReportProcessing.RuntimeRICollection headingReportItems, int reportItemCount, bool isSubtotal, bool isStatic, int subtotalHeadingIndex, int staticHeadingCount, out RenderingPagesRangesList innerPagesList, out ReportProcessing.PageTextboxes rowTextboxes)
			{
				rowTextboxes = null;
				bool flag = false;
				int num;
				if (outerGroupings)
				{
					matrixInstance.NewOuterCells();
					num = matrixInstance.CurrentCellOuterIndex;
					if (!headingDef.IsColumn)
					{
						processingContext.ChunkManager.CheckPageBreak(headingDef, true);
					}
				}
				else
				{
					num = matrixInstance.CurrentCellInnerIndex;
					if (processingContext.ReportItemsReferenced)
					{
						processingContext.DelayAddingInstanceInfo = true;
						flag = true;
					}
				}
				NonComputedUniqueNames nonComputedUniqueNames;
				MatrixHeadingInstance matrixHeadingInstance = new MatrixHeadingInstance(processingContext, num, headingDef, isSubtotal && !isStatic, reportItemCount, null, out nonComputedUniqueNames);
				headingInstances.Add(matrixHeadingInstance, processingContext);
				if (isSubtotal && !isStatic)
				{
					if (this.m_subtotalHeadingInstances == null)
					{
						this.m_subtotalHeadingInstances = new MatrixHeadingInstance[staticHeadingCount];
					}
					this.m_subtotalHeadingInstances[subtotalHeadingIndex] = matrixHeadingInstance;
				}
				if (!isSubtotal && isStatic && Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == processingContext.ShowHideType)
				{
					processingContext.EnterGrouping();
					((IShowHideContainer)matrixHeadingInstance).BeginProcessContainer(processingContext);
				}
				if (headingReportItems != null)
				{
					Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItemsDef = headingReportItems.ReportItemsDef;
					int num2 = 0;
					bool flag2 = false;
					Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = null;
					reportItemsDef.GetReportItem(reportItemCount, out flag2, out num2, out reportItem);
					processingContext.PageSectionContext.EnterRepeatingItem();
					processingContext.PageSectionContext.EnterMatrixHeadingScope(Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(headingDef.Visibility, headingDef.StartHidden), headingDef.IsColumn);
					if (reportItem != null)
					{
						if (flag2)
						{
							processingContext.Pagination.EnterIgnorePageBreak(null, true);
							processingContext.Pagination.EnterIgnoreHeight(true);
							matrixHeadingInstance.Content = headingReportItems.CreateInstance(reportItem, true, true, headingDef.IsColumn);
							processingContext.Pagination.LeaveIgnoreHeight(true);
							processingContext.Pagination.LeaveIgnorePageBreak(null, true);
						}
						else
						{
							reportItem.ProcessDrillthroughAction(processingContext, nonComputedUniqueNames);
							reportItem.ProcessNavigationAction(processingContext.NavigationInfo, nonComputedUniqueNames, ((Matrix)headingDef.DataRegionDef).CurrentPage);
							ReportProcessing.RuntimeRICollection.AddNonComputedPageTextboxes(reportItem, ((Matrix)headingDef.DataRegionDef).CurrentPage, processingContext);
						}
					}
					processingContext.PageSectionContext.ExitMatrixHeadingScope(headingDef.IsColumn);
					ReportProcessing.PageTextboxes pageTextboxes = processingContext.PageSectionContext.ExitRepeatingItem();
					if (isStatic && isSubtotal)
					{
						pageTextboxes = null;
					}
					if (headingDef.IsColumn)
					{
						matrixInstance.MatrixDef.ColumnHeaderPageTextboxes.IntegrateNonRepeatingTextboxValues(pageTextboxes);
					}
					else
					{
						rowTextboxes = pageTextboxes;
					}
				}
				if (flag)
				{
					processingContext.DelayAddingInstanceInfo = false;
				}
				if (outerGroupings && !headingDef.IsColumn)
				{
					processingContext.ChunkManager.CheckPageBreak(headingDef, false);
				}
				innerPagesList = matrixHeadingInstance.ChildrenStartAndEndPages;
				return matrixHeadingInstance.SubHeadingInstances;
			}

			// Token: 0x06008ABC RID: 35516 RVA: 0x0022F09C File Offset: 0x0022D29C
			internal void ResetReportItemObjs(ReportProcessing.ProcessingContext processingContext)
			{
				if (this.m_subtotal != null)
				{
					this.m_subtotal.ResetReportItemObjs();
					for (MatrixHeading matrixHeading = this.m_subtotalHeadingDef.SubHeading; matrixHeading != null; matrixHeading = matrixHeading.SubHeading)
					{
						if (matrixHeading.Grouping != null)
						{
							ReportProcessing.RuntimeRICollection.ResetReportItemObjs(matrixHeading.ReportItems, processingContext);
						}
					}
				}
				if (this.m_staticHeading != null)
				{
					this.m_staticHeading.ResetReportItemObjs();
				}
				if (this.m_subtotalStaticHeading != null)
				{
					this.m_subtotalStaticHeading.ResetReportItemObjs();
				}
			}

			// Token: 0x04004976 RID: 18806
			private ReportProcessing.RuntimeRICollection m_subtotal;

			// Token: 0x04004977 RID: 18807
			private MatrixHeading m_subtotalHeadingDef;

			// Token: 0x04004978 RID: 18808
			private ReportProcessing.RuntimeRICollection m_subtotalStaticHeading;

			// Token: 0x04004979 RID: 18809
			private MatrixHeading m_subtotalStaticHeadingDef;

			// Token: 0x0400497A RID: 18810
			private ReportProcessing.RuntimeRICollection m_staticHeading;

			// Token: 0x0400497B RID: 18811
			private MatrixHeadingInstance[] m_subtotalHeadingInstances;
		}

		// Token: 0x02000C67 RID: 3175
		private sealed class RuntimeMatrixObj : ReportProcessing.RuntimePivotObj
		{
			// Token: 0x06008ABD RID: 35517 RVA: 0x0022F110 File Offset: 0x0022D310
			internal RuntimeMatrixObj(ReportProcessing.IScope outerScope, Matrix matrixDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, bool onePassProcess)
				: base(outerScope, matrixDef, ref dataAction, processingContext, onePassProcess)
			{
				bool flag;
				ReportProcessing.DataActions dataActions;
				PivotHeading pivotHeading;
				bool flag2;
				PivotHeading pivotHeading2;
				PivotHeading pivotHeading3;
				bool flag3;
				PivotHeading pivotHeading4;
				base.ConstructorHelper(ref dataAction, onePassProcess, out flag, out dataActions, out pivotHeading, out flag2, out pivotHeading2, out pivotHeading3, out flag3, out pivotHeading4);
				this.m_innerDataAction = dataActions;
				ReportProcessing.DataActions dataActions2 = base.HandleSortFilterEvent();
				this.MatrixConstructRuntimeStructure(ref dataActions, onePassProcess, pivotHeading, flag2, pivotHeading2, pivotHeading3, flag3, pivotHeading4);
				base.HandleDataAction(flag, dataActions, dataActions2);
			}

			// Token: 0x06008ABE RID: 35518 RVA: 0x0022F170 File Offset: 0x0022D370
			protected override void ConstructRuntimeStructure(ref ReportProcessing.DataActions innerDataAction)
			{
				PivotHeading pivotHeading;
				bool flag;
				PivotHeading pivotHeading2;
				PivotHeading pivotHeading3;
				bool flag2;
				PivotHeading pivotHeading4;
				this.m_pivotDef.GetHeadingDefState(out pivotHeading, out flag, out pivotHeading2, out pivotHeading3, out flag2, out pivotHeading4);
				this.MatrixConstructRuntimeStructure(ref innerDataAction, false, pivotHeading, flag, pivotHeading2, pivotHeading3, flag2, pivotHeading4);
			}

			// Token: 0x06008ABF RID: 35519 RVA: 0x0022F1A4 File Offset: 0x0022D3A4
			private void MatrixConstructRuntimeStructure(ref ReportProcessing.DataActions innerDataAction, bool onePassProcess, PivotHeading outermostColumn, bool outermostColumnSubtotal, PivotHeading staticColumn, PivotHeading outermostRow, bool outermostRowSubtotal, PivotHeading staticRow)
			{
				Matrix matrix = (Matrix)this.m_pivotDef;
				ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
				if (this.m_pivotDef.ProcessingInnerGrouping == Pivot.ProcessingInnerGroupings.Column)
				{
					this.m_innerGroupings = (this.m_pivotColumns = new ReportProcessing.RuntimeMatrixHeadingsObj(this, (MatrixHeading)outermostColumn, ref dataActions, this.m_processingContext, (MatrixHeading)staticColumn, null, outermostRowSubtotal, 0));
					this.m_outerGroupings = (this.m_pivotRows = new ReportProcessing.RuntimeMatrixHeadingsObj(this, (MatrixHeading)outermostRow, ref innerDataAction, this.m_processingContext, (MatrixHeading)staticRow, (ReportProcessing.RuntimeMatrixHeadingsObj)this.m_innerGroupings, outermostColumnSubtotal, 0));
				}
				else
				{
					this.m_innerGroupings = (this.m_pivotRows = new ReportProcessing.RuntimeMatrixHeadingsObj(this, (MatrixHeading)outermostRow, ref dataActions, this.m_processingContext, (MatrixHeading)staticRow, null, outermostColumnSubtotal, 0));
					this.m_outerGroupings = (this.m_pivotColumns = new ReportProcessing.RuntimeMatrixHeadingsObj(this, (MatrixHeading)outermostColumn, ref innerDataAction, this.m_processingContext, (MatrixHeading)staticColumn, (ReportProcessing.RuntimeMatrixHeadingsObj)this.m_innerGroupings, outermostRowSubtotal, 0));
				}
				if (matrix.CornerReportItems != null)
				{
					if (onePassProcess)
					{
						this.m_matrixCorner = new ReportProcessing.RuntimeRICollection(this, matrix.CornerReportItems, this.m_processingContext, true);
					}
					else
					{
						this.m_matrixCorner = new ReportProcessing.RuntimeRICollection(this, matrix.CornerReportItems, ref innerDataAction, this.m_processingContext, true);
					}
				}
				matrix.InOutermostSubtotalCell = true;
				if (onePassProcess)
				{
					this.m_subtotalCorner = new ReportProcessing.RuntimeRICollection(this, matrix.CellReportItems, this.m_processingContext, true);
				}
				else if ((outermostRowSubtotal && outermostColumnSubtotal) || (outermostRow == null && outermostColumn == null))
				{
					this.m_subtotalCorner = new ReportProcessing.RuntimeRICollection(this, matrix.CellReportItems, ref innerDataAction, this.m_processingContext, true);
				}
				matrix.InOutermostSubtotalCell = false;
			}

			// Token: 0x06008AC0 RID: 35520 RVA: 0x0022F330 File Offset: 0x0022D530
			private bool OutermostSTCellTargetScopeMatched(int index, RuntimeSortFilterEventInfo sortFilterInfo)
			{
				VariantList[] sortSourceScopeInfo = sortFilterInfo.SortSourceScopeInfo;
				PivotHeading pivotHeading = this.m_pivotDef.GetPivotHeading(false);
				PivotHeading pivotHeading2 = null;
				this.m_pivotDef.SkipStaticHeading(ref pivotHeading, ref pivotHeading2);
				if (pivotHeading != null)
				{
					Grouping grouping = pivotHeading.Grouping;
					if (grouping.IsOnPathToSortFilterSource(index))
					{
						int dynamicHeadingCount = this.m_pivotDef.GetDynamicHeadingCount(false);
						int num = grouping.SortFilterScopeIndex[index];
						int num2 = 0;
						while (num2 < dynamicHeadingCount && num < sortSourceScopeInfo.Length)
						{
							if (sortSourceScopeInfo[num] != null)
							{
								return false;
							}
							num2++;
							num++;
						}
					}
				}
				PivotHeading pivotHeading3 = this.m_pivotDef.GetPivotHeading(true);
				this.m_pivotDef.SkipStaticHeading(ref pivotHeading3, ref pivotHeading2);
				if (pivotHeading3 != null)
				{
					Grouping grouping2 = pivotHeading3.Grouping;
					if (grouping2.IsOnPathToSortFilterSource(index))
					{
						int dynamicHeadingCount2 = this.m_pivotDef.GetDynamicHeadingCount(true);
						int num = grouping2.SortFilterScopeIndex[index];
						int num3 = 0;
						while (num3 < dynamicHeadingCount2 && num < sortSourceScopeInfo.Length)
						{
							if (sortSourceScopeInfo[num] != null)
							{
								return false;
							}
							num3++;
							num++;
						}
					}
				}
				return true;
			}

			// Token: 0x06008AC1 RID: 35521 RVA: 0x0022F420 File Offset: 0x0022D620
			internal override bool TargetScopeMatched(int index, bool detailSort)
			{
				return (!((Matrix)this.m_pivotDef).InOutermostSubtotalCell || this.OutermostSTCellTargetScopeMatched(index, this.m_processingContext.RuntimeSortFilterInfo[index])) && base.TargetScopeMatched(index, detailSort);
			}

			// Token: 0x06008AC2 RID: 35522 RVA: 0x0022F458 File Offset: 0x0022D658
			private void GetScopeValuesForOutermostSTCell(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				int num = this.m_pivotDef.GetDynamicHeadingCount(false);
				for (int i = 0; i < num; i++)
				{
					Global.Tracer.Assert(index < scopeValues.Length, "Inner headings scope values");
					int num2 = index;
					index = num2 + 1;
					scopeValues[num2] = null;
				}
				num = this.m_pivotDef.GetDynamicHeadingCount(true);
				for (int j = 0; j < num; j++)
				{
					Global.Tracer.Assert(index < scopeValues.Length, "Outer headings scope values");
					int num2 = index;
					index = num2 + 1;
					scopeValues[num2] = null;
				}
			}

			// Token: 0x06008AC3 RID: 35523 RVA: 0x0022F4DB File Offset: 0x0022D6DB
			internal override void GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				base.GetScopeValues(targetScopeObj, scopeValues, ref index);
				if (((Matrix)this.m_pivotDef).InOutermostSubtotalCell)
				{
					this.GetScopeValuesForOutermostSTCell(targetScopeObj, scopeValues, ref index);
				}
			}

			// Token: 0x06008AC4 RID: 35524 RVA: 0x0022F504 File Offset: 0x0022D704
			protected override void SendToInner()
			{
				base.SendToInner();
				if (this.m_matrixCorner != null)
				{
					this.m_matrixCorner.FirstPassNextDataRow();
				}
				if (this.m_subtotalCorner != null)
				{
					((Matrix)this.m_pivotDef).InOutermostSubtotalCell = true;
					this.m_subtotalCorner.FirstPassNextDataRow();
					((Matrix)this.m_pivotDef).InOutermostSubtotalCell = false;
				}
			}

			// Token: 0x06008AC5 RID: 35525 RVA: 0x0022F560 File Offset: 0x0022D760
			internal override bool SortAndFilter()
			{
				this.SetupEnvironment();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
				}
				base.SortAndFilter();
				if (this.m_matrixCorner != null)
				{
					this.m_matrixCorner.SortAndFilter();
				}
				if (this.m_subtotalCorner != null)
				{
					this.m_subtotalCorner.SortAndFilter();
				}
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
				return true;
			}

			// Token: 0x06008AC6 RID: 35526 RVA: 0x0022F5D4 File Offset: 0x0022D7D4
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				if (this.m_matrixCorner != null)
				{
					this.m_matrixCorner.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
				if (this.m_subtotalCorner != null)
				{
					this.m_subtotalCorner.CalculateInnerRunningValues(globalRVCol, groupCol, lastGroup);
				}
				ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, this.m_pivotDef.RunningValues, ref this.m_runningValueValues, false);
			}

			// Token: 0x06008AC7 RID: 35527 RVA: 0x0022F62E File Offset: 0x0022D82E
			protected override void CalculatePreviousAggregates()
			{
				if (!this.m_processedPreviousAggregates && this.m_processingContext.GlobalRVCollection != null)
				{
					base.CalculatePreviousAggregates();
					if (this.m_matrixCorner != null)
					{
						this.m_matrixCorner.CalculatePreviousAggregates(this.m_processingContext.GlobalRVCollection);
					}
				}
			}

			// Token: 0x06008AC8 RID: 35528 RVA: 0x0022F66C File Offset: 0x0022D86C
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
				if (this.m_firstRow == null)
				{
					return;
				}
				MatrixInstance matrixInstance = (MatrixInstance)riInstance;
				Matrix matrix = (Matrix)this.m_pivotDef;
				matrix.InitializePageSectionProcessing();
				ReportProcessing.PageSectionContext pageSectionContext = this.m_processingContext.PageSectionContext;
				this.m_processingContext.PageSectionContext = new ReportProcessing.PageSectionContext(pageSectionContext);
				this.m_processingContext.PageSectionContext.EnterVisibilityScope(matrix.Visibility, matrix.StartHidden);
				ReportProcessing.PageTextboxes pageTextboxes = null;
				if (this.m_matrixCorner != null)
				{
					Microsoft.ReportingServices.ReportProcessing.ReportItemCollection cornerReportItems = matrix.CornerReportItems;
					int num = 0;
					bool flag = false;
					Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = null;
					cornerReportItems.GetReportItem(0, out flag, out num, out reportItem);
					this.m_processingContext.PageSectionContext.EnterRepeatingItem();
					if (reportItem != null)
					{
						if (flag)
						{
							this.m_processingContext.Pagination.EnterIgnorePageBreak(null, true);
							this.m_processingContext.Pagination.EnterIgnoreHeight(true);
							matrixInstance.CornerContent = this.m_matrixCorner.CreateInstance(reportItem, true, true, true);
							this.m_processingContext.Pagination.LeaveIgnoreHeight(true);
							this.m_processingContext.Pagination.LeaveIgnorePageBreak(null, true);
						}
						else
						{
							NonComputedUniqueNames cornerNonComputedUniqueNames = matrix.CornerNonComputedUniqueNames;
							reportItem.ProcessDrillthroughAction(this.m_processingContext, cornerNonComputedUniqueNames);
							reportItem.ProcessNavigationAction(this.m_processingContext.NavigationInfo, cornerNonComputedUniqueNames, matrix.CurrentPage);
							ReportProcessing.RuntimeRICollection.AddNonComputedPageTextboxes(reportItem, matrix.CurrentPage, this.m_processingContext);
						}
					}
					pageTextboxes = this.m_processingContext.PageSectionContext.ExitRepeatingItem();
				}
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.RegisterIgnoreRange();
				}
				bool delayAddingInstanceInfo = this.m_processingContext.DelayAddingInstanceInfo;
				this.m_processingContext.DelayAddingInstanceInfo = false;
				int num2;
				int num3;
				this.m_processingContext.NavigationInfo.GetCurrentDocumentMapPosition(out num2, out num3);
				if (this.m_outerGroupings == this.m_pivotRows)
				{
					matrixInstance.InnerHeadingInstanceList = matrixInstance.ColumnInstances;
					((ReportProcessing.RuntimeMatrixHeadingsObj)this.m_outerGroupings).CreateInstances(this, this.m_processingContext, matrixInstance, true, null, matrixInstance.RowInstances, pagesList);
				}
				else
				{
					matrixInstance.InnerHeadingInstanceList = matrixInstance.RowInstances;
					((ReportProcessing.RuntimeMatrixHeadingsObj)this.m_outerGroupings).CreateInstances(this, this.m_processingContext, matrixInstance, true, null, matrixInstance.ColumnInstances, pagesList);
				}
				this.m_processingContext.DelayAddingInstanceInfo = delayAddingInstanceInfo;
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.UnRegisterIgnoreRange();
				}
				this.m_processingContext.NavigationInfo.InsertMatrixColumnDocumentMap(num2, num3);
				if (this.m_processingContext.ReportItemsReferenced)
				{
					this.AddInnerHeadingsToChunk(matrixInstance.InnerHeadingInstanceList, matrixInstance.InFirstPage > false);
				}
				int count = matrixInstance.ChildrenStartAndEndPages.Count;
				if (count > 0)
				{
					matrix.EndPage = matrixInstance.ChildrenStartAndEndPages[count - 1].EndPage;
				}
				else
				{
					matrix.EndPage = ((IPageItem)matrixInstance).StartPage;
				}
				this.m_processingContext.Pagination.ProcessEndPage(matrixInstance, matrix, matrix.PageBreakAtEnd || matrix.PropagatedPageBreakAtEnd, matrixInstance.NumberOfChildrenOnThisPage > 0);
				this.m_processingContext.PageSectionContext.ExitVisibilityScope();
				if (this.m_processingContext.PageSectionContext.PageTextboxes != null)
				{
					Global.Tracer.Assert(this.m_processingContext.PageSectionContext.PageTextboxes.GetPageCount() == 0, "Invalid state");
					pageSectionContext.PageTextboxes.IntegrateNonRepeatingTextboxValues(this.m_processingContext.PageSectionContext.PageTextboxes);
				}
				this.m_processingContext.PageSectionContext = pageSectionContext;
				if (this.m_processingContext.PageSectionContext.PageTextboxes != null)
				{
					this.m_processingContext.PageSectionContext.PageTextboxes.IntegrateRepeatingTextboxValues(pageTextboxes, matrix.StartPage, matrix.EndPage);
					this.m_processingContext.PageSectionContext.PageTextboxes.IntegrateRepeatingTextboxValues(matrixInstance.MatrixDef.ColumnHeaderPageTextboxes, matrix.StartPage, matrix.EndPage);
					this.m_processingContext.PageSectionContext.PageTextboxes.IntegrateNonRepeatingTextboxValues(matrixInstance.MatrixDef.RowHeaderPageTextboxes);
					this.m_processingContext.PageSectionContext.PageTextboxes.IntegrateNonRepeatingTextboxValues(matrixInstance.MatrixDef.CellPageTextboxes);
				}
			}

			// Token: 0x06008AC9 RID: 35529 RVA: 0x0022FA54 File Offset: 0x0022DC54
			internal void ResetReportItems()
			{
				if (this.m_matrixCorner != null)
				{
					this.m_matrixCorner.ResetReportItemObjs();
				}
				if (this.m_pivotRows != null)
				{
					((ReportProcessing.RuntimeMatrixHeadingsObj)this.m_pivotRows).ResetReportItemObjs(this.m_processingContext);
				}
				if (this.m_pivotColumns != null)
				{
					((ReportProcessing.RuntimeMatrixHeadingsObj)this.m_pivotColumns).ResetReportItemObjs(this.m_processingContext);
				}
			}

			// Token: 0x06008ACA RID: 35530 RVA: 0x0022FAB0 File Offset: 0x0022DCB0
			internal void CreateOutermostSubtotalCells(MatrixInstance matrixInstance, bool outerGroupings)
			{
				if (outerGroupings)
				{
					this.SetupEnvironment();
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						this.m_processingContext.EndIgnoreRange();
					}
					((ReportProcessing.RuntimeMatrixHeadingsObj)this.m_innerGroupings).CreateInstances(this, this.m_processingContext, matrixInstance, false, null, matrixInstance.InnerHeadingInstanceList, matrixInstance.ChildrenStartAndEndPages);
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						this.m_processingContext.UseAllContainers = true;
						return;
					}
				}
				else if (this.m_subtotalCorner != null)
				{
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						this.m_processingContext.IgnoreAllFromStart = true;
					}
					bool inMatrixSubtotal = this.m_processingContext.PageSectionContext.InMatrixSubtotal;
					this.m_processingContext.PageSectionContext.InMatrixSubtotal = true;
					bool flag;
					Microsoft.ReportingServices.ReportProcessing.ReportItem cellReportItemDef = matrixInstance.GetCellReportItemDef(-1, out flag);
					NonComputedUniqueNames nonComputedUniqueNames;
					MatrixCellInstance matrixCellInstance = matrixInstance.AddCell(this.m_processingContext, out nonComputedUniqueNames);
					if (cellReportItemDef != null)
					{
						if (flag)
						{
							this.SetupEnvironment();
							this.m_processingContext.Pagination.EnterIgnorePageBreak(null, true);
							this.m_processingContext.Pagination.EnterIgnoreHeight(true);
							((Matrix)this.m_pivotDef).InOutermostSubtotalCell = true;
							matrixCellInstance.Content = this.m_subtotalCorner.CreateInstance(cellReportItemDef, true, true, false);
							((Matrix)this.m_pivotDef).InOutermostSubtotalCell = false;
							this.m_processingContext.Pagination.LeaveIgnoreHeight(true);
							this.m_processingContext.Pagination.LeaveIgnorePageBreak(null, true);
							this.m_subtotalCorner.ResetReportItemObjs();
						}
						else
						{
							cellReportItemDef.ProcessDrillthroughAction(this.m_processingContext, nonComputedUniqueNames);
							cellReportItemDef.ProcessNavigationAction(this.m_processingContext.NavigationInfo, nonComputedUniqueNames, ((Matrix)matrixInstance.ReportItemDef).CurrentPage);
						}
					}
					this.m_processingContext.PageSectionContext.InMatrixSubtotal = inMatrixSubtotal;
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						this.m_processingContext.IgnoreAllFromStart = false;
					}
				}
			}

			// Token: 0x06008ACB RID: 35531 RVA: 0x0022FC7C File Offset: 0x0022DE7C
			private void AddInnerHeadingsToChunk(MatrixHeadingInstanceList headings, bool addToFirstPage)
			{
				if (headings != null)
				{
					for (int i = 0; i < headings.Count; i++)
					{
						MatrixHeadingInstance matrixHeadingInstance = headings[i];
						this.m_processingContext.ChunkManager.AddInstance(matrixHeadingInstance.InstanceInfo, matrixHeadingInstance, addToFirstPage, this.m_processingContext.InPageSection);
						if (matrixHeadingInstance.Content != null)
						{
							this.AddInnerHeadingsToChunk(matrixHeadingInstance.Content, addToFirstPage);
						}
						this.AddInnerHeadingsToChunk(matrixHeadingInstance.SubHeadingInstances, addToFirstPage);
					}
				}
			}

			// Token: 0x06008ACC RID: 35532 RVA: 0x0022FCEC File Offset: 0x0022DEEC
			private void AddInnerHeadingsToChunk(ReportItemColInstance reportItemColInstance, bool addToFirstPage)
			{
				ReportItemColInstanceInfo instanceInfo = reportItemColInstance.GetInstanceInfo(null, this.m_processingContext.InPageSection);
				this.m_processingContext.ChunkManager.AddInstance(instanceInfo, reportItemColInstance, addToFirstPage, this.m_processingContext.InPageSection);
				if (reportItemColInstance.ReportItemInstances != null)
				{
					for (int i = 0; i < reportItemColInstance.ReportItemInstances.Count; i++)
					{
						this.AddInnerHeadingsToChunk(reportItemColInstance[i], addToFirstPage);
					}
				}
			}

			// Token: 0x06008ACD RID: 35533 RVA: 0x0022FD58 File Offset: 0x0022DF58
			private void AddInnerHeadingsToChunk(ReportItemInstance reportItemInstance, bool addToFirstPage)
			{
				if (reportItemInstance is TextBoxInstance)
				{
					this.m_processingContext.ChunkManager.AddInstance(((TextBoxInstance)reportItemInstance).InstanceInfo, reportItemInstance, addToFirstPage, this.m_processingContext.InPageSection);
					return;
				}
				ReportItemInstanceInfo instanceInfo = reportItemInstance.GetInstanceInfo(null);
				this.m_processingContext.ChunkManager.AddInstance(instanceInfo, reportItemInstance, addToFirstPage, this.m_processingContext.InPageSection);
				if (reportItemInstance is RectangleInstance)
				{
					this.AddInnerHeadingsToChunk(((RectangleInstance)reportItemInstance).ReportItemColInstance, addToFirstPage);
					return;
				}
				if (reportItemInstance is MatrixInstance)
				{
					this.AddInnerHeadingsToChunk(((MatrixInstance)reportItemInstance).CornerContent, addToFirstPage);
					return;
				}
				if (reportItemInstance is TableInstance)
				{
					TableInstance tableInstance = (TableInstance)reportItemInstance;
					if (tableInstance.HeaderRowInstances != null)
					{
						for (int i = 0; i < tableInstance.HeaderRowInstances.Length; i++)
						{
							TableRowInstance tableRowInstance = tableInstance.HeaderRowInstances[i];
							this.m_processingContext.ChunkManager.AddInstance(tableRowInstance.GetInstanceInfo(null), tableRowInstance, addToFirstPage, this.m_processingContext.InPageSection);
							this.AddInnerHeadingsToChunk(tableRowInstance.TableRowReportItemColInstance, addToFirstPage);
						}
					}
					if (tableInstance.FooterRowInstances != null)
					{
						for (int j = 0; j < tableInstance.FooterRowInstances.Length; j++)
						{
							TableRowInstance tableRowInstance2 = tableInstance.FooterRowInstances[j];
							this.m_processingContext.ChunkManager.AddInstance(tableRowInstance2.GetInstanceInfo(null), tableRowInstance2, addToFirstPage, this.m_processingContext.InPageSection);
							this.AddInnerHeadingsToChunk(tableRowInstance2.TableRowReportItemColInstance, addToFirstPage);
						}
					}
				}
			}

			// Token: 0x0400497C RID: 18812
			private ReportProcessing.RuntimeRICollection m_matrixCorner;

			// Token: 0x0400497D RID: 18813
			private ReportProcessing.RuntimeRICollection m_subtotalCorner;
		}

		// Token: 0x02000C68 RID: 3176
		private sealed class RuntimeMatrixGroupRootObj : ReportProcessing.RuntimePivotGroupRootObj
		{
			// Token: 0x06008ACE RID: 35534 RVA: 0x0022FEB8 File Offset: 0x0022E0B8
			internal RuntimeMatrixGroupRootObj(ReportProcessing.IScope outerScope, MatrixHeading matrixHeadingDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, ReportProcessing.RuntimeMatrixHeadingsObj innerGroupings, bool outermostSubtotal, int headingLevel)
				: base(outerScope, matrixHeadingDef, ref dataAction, processingContext, innerGroupings, outermostSubtotal, headingLevel)
			{
				if (this.m_processOutermostSTCells)
				{
					Matrix matrix = (Matrix)matrixHeadingDef.DataRegionDef;
					this.m_cellRIs = matrix.CellReportItems;
					if (this.m_cellRIs.RunningValues != null && 0 < this.m_cellRIs.RunningValues.Count)
					{
						this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
					}
				}
				if (matrixHeadingDef.OwcGroupExpression)
				{
					this.m_saveGroupExprValues = true;
				}
			}

			// Token: 0x17002AE7 RID: 10983
			// (get) Token: 0x06008ACF RID: 35535 RVA: 0x0022FF33 File Offset: 0x0022E133
			internal Microsoft.ReportingServices.ReportProcessing.ReportItemCollection CellRIs
			{
				get
				{
					return this.m_cellRIs;
				}
			}

			// Token: 0x06008AD0 RID: 35536 RVA: 0x0022FF3C File Offset: 0x0022E13C
			protected override void NeedProcessDataActions(PivotHeading heading)
			{
				MatrixHeading matrixHeading = (MatrixHeading)heading;
				if (matrixHeading != null)
				{
					base.NeedProcessDataActions(matrixHeading.ReportItems.RunningValues);
				}
			}

			// Token: 0x06008AD1 RID: 35537 RVA: 0x0022FF64 File Offset: 0x0022E164
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItems = ((MatrixHeading)this.m_hierarchyDef).ReportItems;
				if (reportItems != null)
				{
					base.AddRunningValues(reportItems.RunningValues);
				}
				if (this.m_staticHeadingDef != null)
				{
					base.AddRunningValues(((MatrixHeading)this.m_staticHeadingDef).ReportItems.RunningValues);
				}
				if (this.m_innerSubtotal != null)
				{
					base.AddRunningValues(this.m_innerSubtotal.ReportItems.RunningValues);
				}
				if (this.m_innerSubtotalStaticHeading != null)
				{
					base.AddRunningValues(((MatrixHeading)this.m_innerSubtotalStaticHeading).ReportItems.RunningValues);
				}
				this.m_grouping.Traverse(ReportProcessing.ProcessingStages.RunningValues, this.m_expression.Direction);
				if (this.m_hierarchyDef.Grouping.Name != null)
				{
					groupCol.Remove(this.m_hierarchyDef.Grouping.Name);
				}
			}

			// Token: 0x06008AD2 RID: 35538 RVA: 0x00230040 File Offset: 0x0022E240
			protected override void AddCellRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ref DataAggregateObjList runningValues)
			{
				Microsoft.ReportingServices.ReportProcessing.ReportItemCollection cellReportItems = ((Matrix)this.m_hierarchyDef.DataRegionDef).CellReportItems;
				if (cellReportItems.RunningValues != null && 0 < cellReportItems.RunningValues.Count)
				{
					this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
					if (runningValues == null)
					{
						base.AddRunningValues(cellReportItems.RunningValues, ref runningValues, globalRVCol, groupCol);
					}
				}
			}

			// Token: 0x0400497E RID: 18814
			private Microsoft.ReportingServices.ReportProcessing.ReportItemCollection m_cellRIs;
		}

		// Token: 0x02000C69 RID: 3177
		internal abstract class RuntimePivotCell : ReportProcessing.IScope
		{
			// Token: 0x06008AD3 RID: 35539 RVA: 0x0023009C File Offset: 0x0022E29C
			internal RuntimePivotCell(ReportProcessing.RuntimePivotGroupLeafObj owner, int cellLevel, DataAggregateInfoList aggDefs, bool innermost)
			{
				this.m_owner = owner;
				this.m_cellLevel = cellLevel;
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(owner.ProcessingContext, aggDefs, ref this.m_cellNonCustomAggObjs, ref this.m_cellCustomAggObjs);
				DataAggregateObjList cellPostSortAggregates = this.m_owner.CellPostSortAggregates;
				if (cellPostSortAggregates != null && 0 < cellPostSortAggregates.Count)
				{
					this.m_cellAggValueList = new DataAggregateObjResult[cellPostSortAggregates.Count];
				}
				this.m_innermost = innermost;
			}

			// Token: 0x17002AE8 RID: 10984
			// (get) Token: 0x06008AD4 RID: 35540 RVA: 0x00230106 File Offset: 0x0022E306
			// (set) Token: 0x06008AD5 RID: 35541 RVA: 0x0023010E File Offset: 0x0022E30E
			internal ReportProcessing.RuntimePivotCell NextCell
			{
				get
				{
					return this.m_nextCell;
				}
				set
				{
					this.m_nextCell = value;
				}
			}

			// Token: 0x06008AD6 RID: 35542 RVA: 0x00230118 File Offset: 0x0022E318
			internal virtual void NextRow()
			{
				ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
				this.NextAggregateRow();
				if (!this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					this.NextNonAggregateRow();
				}
			}

			// Token: 0x06008AD7 RID: 35543 RVA: 0x00230173 File Offset: 0x0022E373
			private void NextNonAggregateRow()
			{
				ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_owner.ProcessingContext, this.m_cellNonCustomAggObjs, false);
				if (this.m_dataRows != null)
				{
					ReportProcessing.RuntimeDetailObj.SaveData(this.m_dataRows, this.m_owner.ProcessingContext);
				}
			}

			// Token: 0x06008AD8 RID: 35544 RVA: 0x002301AC File Offset: 0x0022E3AC
			private void NextAggregateRow()
			{
				FieldsImpl fieldsImpl = this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl;
				if (fieldsImpl.ValidAggregateRow && fieldsImpl.AggregationFieldCount == 0 && this.m_cellCustomAggObjs != null)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_owner.ProcessingContext, this.m_cellCustomAggObjs, false);
				}
			}

			// Token: 0x06008AD9 RID: 35545 RVA: 0x002301FE File Offset: 0x0022E3FE
			internal virtual void SortAndFilter()
			{
			}

			// Token: 0x06008ADA RID: 35546 RVA: 0x00230200 File Offset: 0x0022E400
			internal virtual void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_dataRows != null)
				{
					Global.Tracer.Assert(this.m_innermost, "(m_innermost)");
					this.ReadRows();
					this.m_dataRows = null;
				}
				DataAggregateObjList cellPostSortAggregates = this.m_owner.CellPostSortAggregates;
				if (cellPostSortAggregates != null && 0 < cellPostSortAggregates.Count)
				{
					for (int i = 0; i < cellPostSortAggregates.Count; i++)
					{
						this.m_cellAggValueList[i] = cellPostSortAggregates[i].AggregateResult();
						cellPostSortAggregates[i].Init();
					}
				}
			}

			// Token: 0x06008ADB RID: 35547 RVA: 0x00230284 File Offset: 0x0022E484
			private void ReadRows()
			{
				for (int i = 0; i < this.m_dataRows.Count; i++)
				{
					FieldImpl[] array = this.m_dataRows[i];
					this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl.SetFields(array);
					((ReportProcessing.IScope)this).ReadRow(ReportProcessing.DataActions.PostSortAggregates);
				}
			}

			// Token: 0x06008ADC RID: 35548 RVA: 0x002302D8 File Offset: 0x0022E4D8
			protected void SetupAggregates(DataAggregateObjList aggregates, DataAggregateObjResult[] aggValues)
			{
				if (aggregates != null)
				{
					for (int i = 0; i < aggregates.Count; i++)
					{
						DataAggregateObj dataAggregateObj = aggregates[i];
						this.m_owner.ProcessingContext.ReportObjectModel.AggregatesImpl.Set(dataAggregateObj.Name, dataAggregateObj.AggregateDef, dataAggregateObj.DuplicateNames, (aggValues == null) ? dataAggregateObj.AggregateResult() : aggValues[i]);
					}
				}
			}

			// Token: 0x06008ADD RID: 35549 RVA: 0x00230340 File Offset: 0x0022E540
			protected void SetupEnvironment()
			{
				this.SetupAggregates(this.m_cellNonCustomAggObjs, null);
				this.SetupAggregates(this.m_cellCustomAggObjs, null);
				this.SetupAggregates(this.m_owner.CellPostSortAggregates, this.m_cellAggValueList);
				this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl.SetFields(this.m_firstRow);
				this.m_owner.ProcessingContext.ReportRuntime.CurrentScope = this;
			}

			// Token: 0x06008ADE RID: 35550 RVA: 0x002303B4 File Offset: 0x0022E5B4
			private Hashtable GetOuterScopeNames()
			{
				PivotHeading pivotHeadingDef = this.m_owner.PivotHeadingDef;
				Pivot pivot = (Pivot)pivotHeadingDef.DataRegionDef;
				Hashtable hashtable = null;
				if (pivotHeadingDef.CellScopeNames == null)
				{
					pivotHeadingDef.CellScopeNames = new Hashtable[pivot.GetDynamicHeadingCount(true)];
				}
				else
				{
					hashtable = pivotHeadingDef.CellScopeNames[this.m_cellLevel];
				}
				if (hashtable == null)
				{
					hashtable = pivot.GetOuterScopeNames(this.m_cellLevel);
					pivotHeadingDef.CellScopeNames[this.m_cellLevel] = hashtable;
				}
				return hashtable;
			}

			// Token: 0x17002AE9 RID: 10985
			// (get) Token: 0x06008ADF RID: 35551 RVA: 0x00230424 File Offset: 0x0022E624
			bool ReportProcessing.IScope.TargetForNonDetailSort
			{
				get
				{
					return this.m_owner.GetCellTargetForNonDetailSort();
				}
			}

			// Token: 0x17002AEA RID: 10986
			// (get) Token: 0x06008AE0 RID: 35552 RVA: 0x00230434 File Offset: 0x0022E634
			int[] ReportProcessing.IScope.SortFilterExpressionScopeInfoIndices
			{
				get
				{
					if (this.m_sortFilterExpressionScopeInfoIndices == null)
					{
						this.m_sortFilterExpressionScopeInfoIndices = new int[this.m_owner.ProcessingContext.RuntimeSortFilterInfo.Count];
						for (int i = 0; i < this.m_owner.ProcessingContext.RuntimeSortFilterInfo.Count; i++)
						{
							this.m_sortFilterExpressionScopeInfoIndices[i] = -1;
						}
					}
					return this.m_sortFilterExpressionScopeInfoIndices;
				}
			}

			// Token: 0x06008AE1 RID: 35553 RVA: 0x00230498 File Offset: 0x0022E698
			bool ReportProcessing.IScope.IsTargetForSort(int index, bool detailSort)
			{
				return this.m_owner.GetCellTargetForSort(index, detailSort);
			}

			// Token: 0x06008AE2 RID: 35554 RVA: 0x002304A7 File Offset: 0x0022E6A7
			string ReportProcessing.IScope.GetScopeName()
			{
				return null;
			}

			// Token: 0x06008AE3 RID: 35555 RVA: 0x002304AA File Offset: 0x0022E6AA
			ReportProcessing.IScope ReportProcessing.IScope.GetOuterScope(bool includeSubReportContainingScope)
			{
				return this.m_owner;
			}

			// Token: 0x06008AE4 RID: 35556 RVA: 0x002304B2 File Offset: 0x0022E6B2
			void ReportProcessing.IScope.ReadRow(ReportProcessing.DataActions dataAction)
			{
				this.m_owner.ReadRow(dataAction);
			}

			// Token: 0x06008AE5 RID: 35557 RVA: 0x002304C0 File Offset: 0x0022E6C0
			bool ReportProcessing.IScope.InScope(string scope)
			{
				return this.m_owner.InScope(scope) || this.GetOuterScopeNames().Contains(scope);
			}

			// Token: 0x06008AE6 RID: 35558 RVA: 0x002304E0 File Offset: 0x0022E6E0
			int ReportProcessing.IScope.RecursiveLevel(string scope)
			{
				if (scope == null)
				{
					return 0;
				}
				int num = ((ReportProcessing.IScope)this.m_owner).RecursiveLevel(scope);
				if (-1 != num)
				{
					return num;
				}
				Grouping grouping = this.GetOuterScopeNames()[scope] as Grouping;
				if (grouping != null)
				{
					return grouping.RecursiveLevel;
				}
				return -1;
			}

			// Token: 0x06008AE7 RID: 35559 RVA: 0x00230524 File Offset: 0x0022E724
			bool ReportProcessing.IScope.TargetScopeMatched(int index, bool detailSort)
			{
				if (!this.m_owner.TargetScopeMatched(index, detailSort))
				{
					return false;
				}
				IDictionaryEnumerator enumerator = this.GetOuterScopeNames().GetEnumerator();
				while (enumerator.MoveNext())
				{
					Grouping grouping = (Grouping)enumerator.Value;
					if ((!detailSort || grouping.SortFilterScopeInfo != null) && grouping.SortFilterScopeMatched != null && !grouping.SortFilterScopeMatched[index])
					{
						return false;
					}
				}
				if (detailSort)
				{
					return true;
				}
				Pivot pivotDef = this.m_owner.PivotDef;
				VariantList[] sortSourceScopeInfo = this.m_owner.ProcessingContext.RuntimeSortFilterInfo[index].SortSourceScopeInfo;
				if (this.m_owner.GroupingDef.SortFilterScopeIndex != null && -1 != this.m_owner.GroupingDef.SortFilterScopeIndex[index])
				{
					int num = this.m_owner.GroupingDef.SortFilterScopeIndex[index] + 1;
					if (!this.m_innermost)
					{
						int dynamicHeadingCount = pivotDef.GetDynamicHeadingCount(false);
						int num2 = this.m_owner.HeadingLevel + 1;
						while (num2 < dynamicHeadingCount && num < sortSourceScopeInfo.Length)
						{
							if (sortSourceScopeInfo[num] != null)
							{
								return false;
							}
							num2++;
							num++;
						}
					}
				}
				PivotHeading outerHeading = pivotDef.GetOuterHeading(this.m_cellLevel + 1);
				if (outerHeading != null && outerHeading.Grouping.SortFilterScopeIndex != null && -1 != outerHeading.Grouping.SortFilterScopeIndex[index])
				{
					int dynamicHeadingCount2 = pivotDef.GetDynamicHeadingCount(true);
					int num = outerHeading.Grouping.SortFilterScopeIndex[index];
					int num3 = this.m_cellLevel + 1;
					while (num3 < dynamicHeadingCount2 && num < sortSourceScopeInfo.Length)
					{
						if (sortSourceScopeInfo[num] != null)
						{
							return false;
						}
						num3++;
						num++;
					}
				}
				return true;
			}

			// Token: 0x06008AE8 RID: 35560 RVA: 0x002306A4 File Offset: 0x0022E8A4
			void ReportProcessing.IScope.GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				Pivot pivotDef = this.m_owner.PivotDef;
				this.m_owner.GetScopeValues(targetScopeObj, scopeValues, ref index);
				int num;
				if (!this.m_innermost)
				{
					num = pivotDef.GetDynamicHeadingCount(false);
					for (int i = this.m_owner.HeadingLevel + 1; i < num; i++)
					{
						Global.Tracer.Assert(index < scopeValues.Length, "Subtotal inner headings");
						int num2 = index;
						index = num2 + 1;
						scopeValues[num2] = null;
					}
				}
				Hashtable outerScopeNames = this.GetOuterScopeNames();
				IDictionaryEnumerator enumerator = outerScopeNames.GetEnumerator();
				while (enumerator.MoveNext())
				{
					Grouping grouping = (Grouping)enumerator.Value;
					Global.Tracer.Assert(index < scopeValues.Length, "Inner headings");
					int num2 = index;
					index = num2 + 1;
					scopeValues[num2] = grouping.CurrentGroupExpressionValues;
				}
				num = pivotDef.GetDynamicHeadingCount(true);
				for (int j = outerScopeNames.Count; j < num; j++)
				{
					Global.Tracer.Assert(index < scopeValues.Length, "Outer headings");
					int num2 = index;
					index = num2 + 1;
					scopeValues[num2] = null;
				}
			}

			// Token: 0x06008AE9 RID: 35561 RVA: 0x002307B0 File Offset: 0x0022E9B0
			void ReportProcessing.IScope.GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
				((ReportProcessing.IScope)this.m_owner).GetGroupNameValuePairs(pairs);
				Hashtable outerScopeNames = this.GetOuterScopeNames();
				if (outerScopeNames != null)
				{
					foreach (object obj in outerScopeNames.Values)
					{
						ReportProcessing.RuntimeDataRegionObj.AddGroupNameValuePair(this.m_owner.ProcessingContext, obj as Grouping, pairs);
					}
				}
			}

			// Token: 0x0400497F RID: 18815
			protected ReportProcessing.RuntimePivotGroupLeafObj m_owner;

			// Token: 0x04004980 RID: 18816
			protected int m_cellLevel;

			// Token: 0x04004981 RID: 18817
			protected DataAggregateObjList m_cellNonCustomAggObjs;

			// Token: 0x04004982 RID: 18818
			protected DataAggregateObjList m_cellCustomAggObjs;

			// Token: 0x04004983 RID: 18819
			protected DataAggregateObjResult[] m_cellAggValueList;

			// Token: 0x04004984 RID: 18820
			protected ReportProcessing.DataRowList m_dataRows;

			// Token: 0x04004985 RID: 18821
			protected bool m_innermost;

			// Token: 0x04004986 RID: 18822
			protected FieldImpl[] m_firstRow;

			// Token: 0x04004987 RID: 18823
			protected bool m_firstRowIsAggregate;

			// Token: 0x04004988 RID: 18824
			protected ReportProcessing.RuntimePivotCell m_nextCell;

			// Token: 0x04004989 RID: 18825
			protected int[] m_sortFilterExpressionScopeInfoIndices;
		}

		// Token: 0x02000C6A RID: 3178
		private sealed class RuntimeMatrixCell : ReportProcessing.RuntimePivotCell
		{
			// Token: 0x06008AEA RID: 35562 RVA: 0x00230808 File Offset: 0x0022EA08
			internal RuntimeMatrixCell(ReportProcessing.RuntimeMatrixGroupLeafObj owner, int cellLevel, DataAggregateInfoList aggDefs, Microsoft.ReportingServices.ReportProcessing.ReportItemCollection cellDef, bool innermost)
				: base(owner, cellLevel, aggDefs, innermost)
			{
				this.m_cellDef = cellDef;
				ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
				bool flag = this.m_cellDef.RunningValues != null && 0 < this.m_cellDef.RunningValues.Count;
				if (this.m_innermost && (flag || this.m_owner.CellPostSortAggregates != null))
				{
					dataActions = ReportProcessing.DataActions.PostSortAggregates;
				}
				this.HandleSortFilterEvent();
				this.m_cellReportItems = new ReportProcessing.RuntimeRICollection(this, this.m_cellDef, ref dataActions, this.m_owner.ProcessingContext, true);
				if (dataActions != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x06008AEB RID: 35563 RVA: 0x0023089C File Offset: 0x0022EA9C
			private void HandleSortFilterEvent()
			{
				if (this.m_owner.NeedHandleCellSortFilterEvent())
				{
					int count = this.m_owner.ProcessingContext.RuntimeSortFilterInfo.Count;
					for (int i = 0; i < count; i++)
					{
						RuntimeSortFilterEventInfo runtimeSortFilterEventInfo = this.m_owner.ProcessingContext.RuntimeSortFilterInfo[i];
						if (runtimeSortFilterEventInfo.EventSource.IsMatrixCellScope)
						{
							Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = runtimeSortFilterEventInfo.EventSource.Parent;
							while (reportItem != null && !(reportItem is Matrix))
							{
								reportItem = reportItem.Parent;
							}
							if (reportItem == this.m_owner.PivotDef && ((ReportProcessing.IScope)this).TargetScopeMatched(i, false) && !this.m_owner.GetOwnerPivot().TargetForNonDetailSort && runtimeSortFilterEventInfo.EventSourceScope == null)
							{
								runtimeSortFilterEventInfo.EventSourceScope = this;
							}
						}
					}
				}
			}

			// Token: 0x06008AEC RID: 35564 RVA: 0x0023095E File Offset: 0x0022EB5E
			internal override void NextRow()
			{
				base.NextRow();
				this.m_cellReportItems.FirstPassNextDataRow();
			}

			// Token: 0x06008AED RID: 35565 RVA: 0x00230971 File Offset: 0x0022EB71
			internal override void SortAndFilter()
			{
				this.m_cellReportItems.SortAndFilter();
			}

			// Token: 0x06008AEE RID: 35566 RVA: 0x0023097E File Offset: 0x0022EB7E
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				this.m_cellReportItems.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
			}

			// Token: 0x06008AEF RID: 35567 RVA: 0x00230998 File Offset: 0x0022EB98
			internal void CreateInstance(MatrixInstance matrixInstance, Microsoft.ReportingServices.ReportProcessing.ReportItem reportItemDef, MatrixCellInstance cellInstance)
			{
				base.SetupEnvironment();
				this.m_owner.ProcessingContext.Pagination.EnterIgnorePageBreak(null, true);
				this.m_owner.ProcessingContext.Pagination.EnterIgnoreHeight(true);
				cellInstance.Content = this.m_cellReportItems.CreateInstance(reportItemDef, true, true, false);
				this.m_owner.ProcessingContext.Pagination.LeaveIgnoreHeight(true);
				this.m_owner.ProcessingContext.Pagination.LeaveIgnorePageBreak(null, true);
				this.m_cellReportItems.ResetReportItemObjs();
			}

			// Token: 0x0400498A RID: 18826
			private Microsoft.ReportingServices.ReportProcessing.ReportItemCollection m_cellDef;

			// Token: 0x0400498B RID: 18827
			private ReportProcessing.RuntimeRICollection m_cellReportItems;
		}

		// Token: 0x02000C6B RID: 3179
		private sealed class RuntimeMatrixGroupLeafObj : ReportProcessing.RuntimePivotGroupLeafObj
		{
			// Token: 0x06008AF0 RID: 35568 RVA: 0x00230A28 File Offset: 0x0022EC28
			internal RuntimeMatrixGroupLeafObj(ReportProcessing.RuntimeMatrixGroupRootObj groupRoot)
				: base(groupRoot)
			{
				MatrixHeading matrixHeading = (MatrixHeading)groupRoot.HierarchyDef;
				Matrix matrix = (Matrix)matrixHeading.DataRegionDef;
				MatrixHeading matrixHeading2 = (MatrixHeading)groupRoot.InnerHeading;
				bool flag = false;
				bool flag2 = base.HandleSortFilterEvent();
				ReportProcessing.DataActions dataActions;
				base.ConstructorHelper(groupRoot, matrix, out flag, out dataActions);
				this.m_pivotHeadings = new ReportProcessing.RuntimeMatrixHeadingsObj(this, matrixHeading2, ref dataActions, groupRoot.ProcessingContext, (MatrixHeading)groupRoot.StaticHeadingDef, (ReportProcessing.RuntimeMatrixHeadingsObj)groupRoot.InnerGroupings, groupRoot.OutermostSubtotal, groupRoot.HeadingLevel + 1);
				this.m_innerHierarchy = this.m_pivotHeadings.Headings;
				if (matrixHeading.ReportItems != null)
				{
					this.m_headingReportItemCol = new ReportProcessing.RuntimeRICollection(this, matrixHeading.ReportItems, ref dataActions, this.m_processingContext, true);
				}
				if (groupRoot.CellRIs != null)
				{
					ReportProcessing.DataActions dataActions2 = ReportProcessing.DataActions.None;
					matrixHeading.InOutermostSubtotalCell = true;
					this.m_firstPassCell = new ReportProcessing.RuntimeRICollection(this, groupRoot.CellRIs, ref dataActions2, this.m_processingContext, true);
					matrixHeading.InOutermostSubtotalCell = false;
				}
				if (!flag)
				{
					this.m_dataAction = dataActions;
				}
				if (flag2)
				{
					this.m_dataAction |= ReportProcessing.DataActions.UserSort;
				}
				if (this.m_firstPassCell != null)
				{
					this.HandleOutermostSTCellSortFilterEvent();
				}
				if (this.m_dataAction != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x06008AF1 RID: 35569 RVA: 0x00230B5C File Offset: 0x0022ED5C
			private void HandleOutermostSTCellSortFilterEvent()
			{
				if (base.NeedHandleCellSortFilterEvent())
				{
					int count = this.m_processingContext.RuntimeSortFilterInfo.Count;
					for (int i = 0; i < count; i++)
					{
						if (base.GroupingDef.IsOnPathToSortFilterSource(i))
						{
							RuntimeSortFilterEventInfo runtimeSortFilterEventInfo = this.m_processingContext.RuntimeSortFilterInfo[i];
							if (this.m_targetScopeMatched[i] && runtimeSortFilterEventInfo.EventSource.IsMatrixCellScope)
							{
								Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = runtimeSortFilterEventInfo.EventSource.Parent;
								while (reportItem != null && !(reportItem is Matrix))
								{
									reportItem = reportItem.Parent;
								}
								if (reportItem == base.PivotDef && this.OutermostSTCellTargetScopeMatched(i, runtimeSortFilterEventInfo) && !base.GetOwnerPivot().TargetForNonDetailSort && runtimeSortFilterEventInfo.EventSourceScope == null)
								{
									runtimeSortFilterEventInfo.EventSourceScope = this;
								}
							}
						}
					}
				}
			}

			// Token: 0x06008AF2 RID: 35570 RVA: 0x00230C20 File Offset: 0x0022EE20
			private bool OutermostSTCellTargetScopeMatched(int index, RuntimeSortFilterEventInfo sortFilterInfo)
			{
				Pivot pivotDef = base.PivotDef;
				int dynamicHeadingCount = pivotDef.GetDynamicHeadingCount(false);
				int dynamicHeadingCount2 = pivotDef.GetDynamicHeadingCount(true);
				VariantList[] sortSourceScopeInfo = sortFilterInfo.SortSourceScopeInfo;
				if (base.IsOuterGrouping())
				{
					PivotHeading pivotHeading = pivotDef.GetPivotHeading(false);
					PivotHeading pivotHeading2 = null;
					pivotDef.SkipStaticHeading(ref pivotHeading, ref pivotHeading2);
					if (pivotHeading != null)
					{
						Grouping grouping = pivotHeading.Grouping;
						if (grouping.IsOnPathToSortFilterSource(index))
						{
							int num = grouping.SortFilterScopeIndex[index];
							int num2 = 0;
							while (num2 < dynamicHeadingCount && num < sortSourceScopeInfo.Length)
							{
								if (sortSourceScopeInfo[num] != null)
								{
									return false;
								}
								num2++;
								num++;
							}
						}
					}
					if (base.GroupingDef.IsOnPathToSortFilterSource(index))
					{
						int num = base.GroupingDef.SortFilterScopeIndex[index] + 1;
						int i = base.HeadingLevel + 1;
						while (i < dynamicHeadingCount2)
						{
							if (num >= sortSourceScopeInfo.Length)
							{
								break;
							}
							if (sortSourceScopeInfo[num] != null)
							{
								return false;
							}
							i++;
							num++;
						}
					}
				}
				else
				{
					if (base.GroupingDef.IsOnPathToSortFilterSource(index))
					{
						int num = base.GroupingDef.SortFilterScopeIndex[index] + 1;
						int num3 = base.HeadingLevel + 1;
						while (num3 < dynamicHeadingCount && num < sortSourceScopeInfo.Length)
						{
							if (sortSourceScopeInfo[num] != null)
							{
								return false;
							}
							num3++;
							num++;
						}
					}
					PivotHeading pivotHeading3 = pivotDef.GetPivotHeading(true);
					PivotHeading pivotHeading4 = null;
					pivotDef.SkipStaticHeading(ref pivotHeading3, ref pivotHeading4);
					if (pivotHeading3 != null)
					{
						Grouping grouping2 = pivotHeading3.Grouping;
						if (grouping2.IsOnPathToSortFilterSource(index))
						{
							int num = grouping2.SortFilterScopeIndex[index];
							int num4 = 0;
							while (num4 < dynamicHeadingCount2 && num < sortSourceScopeInfo.Length)
							{
								if (sortSourceScopeInfo[num] != null)
								{
									return false;
								}
								num4++;
								num++;
							}
						}
					}
				}
				return true;
			}

			// Token: 0x06008AF3 RID: 35571 RVA: 0x00230DB4 File Offset: 0x0022EFB4
			internal override bool TargetScopeMatched(int index, bool detailSort)
			{
				return (detailSort && base.GroupingDef.SortFilterScopeInfo == null) || (this.m_targetScopeMatched != null && this.m_targetScopeMatched[index] && (!((MatrixHeading)base.PivotHeadingDef).InOutermostSubtotalCell || this.OutermostSTCellTargetScopeMatched(index, this.m_processingContext.RuntimeSortFilterInfo[index])));
			}

			// Token: 0x06008AF4 RID: 35572 RVA: 0x00230E13 File Offset: 0x0022F013
			internal override ReportProcessing.RuntimePivotCell CreateCell(int index, Pivot pivotDef)
			{
				return new ReportProcessing.RuntimeMatrixCell(this, index, pivotDef.CellAggregates, ((Matrix)pivotDef).CellReportItems, this.m_innerHierarchy == null);
			}

			// Token: 0x06008AF5 RID: 35573 RVA: 0x00230E38 File Offset: 0x0022F038
			protected override void SendToInner()
			{
				base.SendToInner();
				if (this.m_headingReportItemCol != null)
				{
					this.m_headingReportItemCol.FirstPassNextDataRow();
				}
				if (this.m_firstPassCell != null)
				{
					((MatrixHeading)base.PivotHeadingDef).InOutermostSubtotalCell = true;
					this.m_firstPassCell.FirstPassNextDataRow();
					((MatrixHeading)base.PivotHeadingDef).InOutermostSubtotalCell = false;
				}
			}

			// Token: 0x06008AF6 RID: 35574 RVA: 0x00230E94 File Offset: 0x0022F094
			internal override bool SortAndFilter()
			{
				this.SetupEnvironment();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
				}
				if (this.m_headingReportItemCol != null)
				{
					this.m_headingReportItemCol.SortAndFilter();
				}
				if (this.m_firstPassCell != null)
				{
					this.m_firstPassCell.SortAndFilter();
				}
				bool flag = base.SortAndFilter();
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
				return flag;
			}

			// Token: 0x06008AF7 RID: 35575 RVA: 0x00230F08 File Offset: 0x0022F108
			internal override void CalculateRunningValues()
			{
				base.CalculateRunningValues();
				if (this.m_processHeading)
				{
					ReportProcessing.RuntimePivotGroupRootObj runtimePivotGroupRootObj = (ReportProcessing.RuntimePivotGroupRootObj)this.m_hierarchyRoot;
					AggregatesImpl globalRunningValueCollection = runtimePivotGroupRootObj.GlobalRunningValueCollection;
					ReportProcessing.RuntimeGroupRootObjList groupCollection = runtimePivotGroupRootObj.GroupCollection;
					if (this.m_headingReportItemCol != null)
					{
						this.m_headingReportItemCol.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimePivotGroupRootObj);
					}
					if (this.m_firstPassCell != null)
					{
						Matrix matrix = (Matrix)base.PivotDef;
						this.m_processingContext.EnterPivotCell(true);
						this.m_firstPassCell.CalculateRunningValues(runtimePivotGroupRootObj.OutermostSTCellRVCol, groupCollection, runtimePivotGroupRootObj);
						this.m_processingContext.ExitPivotCell();
					}
					this.m_processHeading = false;
				}
				this.ResetScopedRunningValues();
			}

			// Token: 0x06008AF8 RID: 35576 RVA: 0x00230F9E File Offset: 0x0022F19E
			protected override bool CalculatePreviousAggregates()
			{
				if (base.CalculatePreviousAggregates() && this.m_headingReportItemCol != null)
				{
					this.m_headingReportItemCol.CalculatePreviousAggregates(this.m_processingContext.GlobalRVCollection);
					return true;
				}
				return false;
			}

			// Token: 0x06008AF9 RID: 35577 RVA: 0x00230FCC File Offset: 0x0022F1CC
			internal void SetContentsPage()
			{
				ReportProcessing.RuntimeMatrixGroupRootObj runtimeMatrixGroupRootObj = (ReportProcessing.RuntimeMatrixGroupRootObj)this.m_hierarchyRoot;
				if (!((MatrixHeading)runtimeMatrixGroupRootObj.HierarchyDef).IsColumn)
				{
					((MatrixInstance)runtimeMatrixGroupRootObj.ReportItemInstance).MatrixDef.CellPage = this.m_startPage;
				}
			}

			// Token: 0x06008AFA RID: 35578 RVA: 0x00231014 File Offset: 0x0022F214
			internal override void CreateInstance()
			{
				this.SetupEnvironment();
				ReportProcessing.RuntimeMatrixGroupRootObj runtimeMatrixGroupRootObj = (ReportProcessing.RuntimeMatrixGroupRootObj)this.m_hierarchyRoot;
				Matrix matrix = (Matrix)base.PivotDef;
				MatrixInstance matrixInstance = (MatrixInstance)runtimeMatrixGroupRootObj.ReportItemInstance;
				MatrixHeadingInstanceList matrixHeadingInstanceList = (MatrixHeadingInstanceList)runtimeMatrixGroupRootObj.InstanceList;
				MatrixHeading matrixHeading = (MatrixHeading)runtimeMatrixGroupRootObj.HierarchyDef;
				bool flag = false;
				bool flag2 = base.IsOuterGrouping();
				RenderingPagesRangesList renderingPagesRangesList = runtimeMatrixGroupRootObj.PagesList;
				ReportProcessing.PageTextboxes pageTextboxes = null;
				if (this.m_targetScopeMatched != null)
				{
					matrixHeading.Grouping.SortFilterScopeMatched = this.m_targetScopeMatched;
				}
				ReportProcessing.RuntimePivotGroupRootObj runtimePivotGroupRootObj;
				int num;
				if (flag2)
				{
					runtimePivotGroupRootObj = runtimeMatrixGroupRootObj;
					matrix.CurrentOuterHeadingGroupRoot = runtimePivotGroupRootObj;
					matrix.OuterGroupingIndexes[runtimeMatrixGroupRootObj.HeadingLevel] = this.m_groupLeafIndex;
					matrixInstance.NewOuterCells();
					num = matrixInstance.CurrentCellOuterIndex;
					if (!matrixHeading.IsColumn)
					{
						this.m_processingContext.ChunkManager.CheckPageBreak(matrixHeading, true);
					}
				}
				else
				{
					runtimePivotGroupRootObj = matrix.CurrentOuterHeadingGroupRoot;
					num = matrixInstance.CurrentCellInnerIndex;
				}
				RenderingPagesRanges renderingPagesRanges = default(RenderingPagesRanges);
				if (flag2 || matrixInstance.CurrentCellOuterIndex == 0)
				{
					if (matrixHeading.IsColumn)
					{
						this.m_processingContext.NavigationInfo.EnterMatrixColumn();
					}
					else
					{
						this.m_processingContext.Pagination.EnterIgnorePageBreak(matrixHeading.Visibility, false);
						if (!this.m_processingContext.Pagination.IgnorePageBreak && matrixHeadingInstanceList.Count != 0 && matrixHeading.Grouping.PageBreakAtStart && matrixInstance.NumberOfChildrenOnThisPage > 0)
						{
							this.m_processingContext.Pagination.SetCurrentPageHeight(matrix, 0.0);
							MatrixInstance matrixInstance2 = matrixInstance;
							int num2 = matrixInstance2.ExtraPagesFilled;
							matrixInstance2.ExtraPagesFilled = num2 + 1;
							Matrix matrix2 = matrix;
							num2 = matrix2.CurrentPage;
							matrix2.CurrentPage = num2 + 1;
							matrixInstance.NumberOfChildrenOnThisPage = 0;
						}
						renderingPagesRanges.StartPage = matrix.CurrentPage;
						this.m_startPage = renderingPagesRanges.StartPage;
					}
					flag = true;
					if (!flag2 && this.m_processingContext.ReportItemsReferenced)
					{
						this.m_processingContext.DelayAddingInstanceInfo = true;
					}
					NonComputedUniqueNames nonComputedUniqueNames;
					this.m_headingInstance = new MatrixHeadingInstance(this.m_processingContext, num, matrixHeading, false, 0, this.m_groupExprValues, out nonComputedUniqueNames);
					this.m_startHidden = matrixHeading.StartHidden;
					matrixHeadingInstanceList.Add(this.m_headingInstance, this.m_processingContext);
					matrixHeadingInstanceList = this.m_headingInstance.SubHeadingInstances;
					renderingPagesRangesList = this.m_headingInstance.ChildrenStartAndEndPages;
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						this.m_processingContext.EnterGrouping();
						((IShowHideContainer)this.m_headingInstance).BeginProcessContainer(this.m_processingContext);
					}
					if (matrixHeading.Grouping.GroupLabel != null)
					{
						this.m_label = this.m_processingContext.NavigationInfo.CurrentLabel;
						if (this.m_label != null)
						{
							this.m_processingContext.NavigationInfo.EnterDocumentMapChildren();
						}
					}
					if (this.m_headingReportItemCol != null)
					{
						bool flag3;
						Microsoft.ReportingServices.ReportProcessing.ReportItem content = matrixHeading.GetContent(out flag3);
						if (content != null)
						{
							this.m_processingContext.PageSectionContext.EnterRepeatingItem();
							this.m_processingContext.PageSectionContext.EnterMatrixHeadingScope(Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(matrixHeading.Visibility, this.m_startHidden), matrixHeading.IsColumn);
							if (flag3)
							{
								this.m_processingContext.Pagination.EnterIgnorePageBreak(null, true);
								this.m_processingContext.Pagination.EnterIgnoreHeight(true);
								this.m_headingInstance.Content = this.m_headingReportItemCol.CreateInstance(content, true, true, matrixHeading.IsColumn);
								this.m_processingContext.Pagination.LeaveIgnoreHeight(true);
								this.m_processingContext.Pagination.LeaveIgnorePageBreak(null, true);
							}
							else
							{
								content.ProcessDrillthroughAction(this.m_processingContext, nonComputedUniqueNames);
								content.ProcessNavigationAction(this.m_processingContext.NavigationInfo, nonComputedUniqueNames, matrix.CurrentPage);
							}
							this.m_processingContext.PageSectionContext.ExitMatrixHeadingScope(matrixHeading.IsColumn);
							if (matrixHeading.IsColumn)
							{
								matrixInstance.MatrixDef.ColumnHeaderPageTextboxes.IntegrateNonRepeatingTextboxValues(this.m_processingContext.PageSectionContext.ExitRepeatingItem());
							}
							else
							{
								pageTextboxes = this.m_processingContext.PageSectionContext.ExitRepeatingItem();
							}
						}
					}
					if (!flag2 && this.m_processingContext.ReportItemsReferenced)
					{
						this.m_processingContext.DelayAddingInstanceInfo = false;
					}
					if (matrixHeading.IsColumn)
					{
						this.m_processingContext.NavigationInfo.LeaveMatrixColumn();
					}
				}
				else
				{
					if (this.m_processingContext.ReportItemsReferenced)
					{
						this.SetReportItemObjs(this.m_headingInstance.Content);
					}
					this.SetContentsPage();
				}
				this.m_processingContext.PageSectionContext.EnterMatrixHeadingScope(Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(matrixHeading.Visibility, this.m_startHidden), matrixHeading.IsColumn);
				((ReportProcessing.RuntimeMatrixHeadingsObj)this.m_pivotHeadings).CreateInstances(this, this.m_processingContext, matrixInstance, flag2, runtimePivotGroupRootObj, matrixHeadingInstanceList, renderingPagesRangesList);
				this.m_processingContext.PageSectionContext.ExitMatrixHeadingScope(matrixHeading.IsColumn);
				if (flag && Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					((IShowHideContainer)this.m_headingInstance).EndProcessContainer(this.m_processingContext);
					this.m_processingContext.ExitGrouping();
				}
				if ((flag2 || matrixInstance.CurrentCellOuterIndex == 0) && !matrixHeading.IsColumn)
				{
					bool pageBreakAtEnd = matrixHeading.Grouping.PageBreakAtEnd;
					renderingPagesRanges.EndPage = ((Matrix)matrixInstance.ReportItemDef).CurrentPage;
					if (this.m_headingInstance.SubHeadingInstances == null || this.m_headingInstance.SubHeadingInstances.Count < 1)
					{
						renderingPagesRanges.EndPage = renderingPagesRanges.StartPage;
					}
					else
					{
						renderingPagesRanges.EndPage = this.m_headingInstance.ChildrenStartAndEndPages[this.m_headingInstance.ChildrenStartAndEndPages.Count - 1].EndPage;
					}
					if (!this.m_processingContext.Pagination.IgnorePageBreak && matrixInstance.NumberOfChildrenOnThisPage > 0 && this.m_processingContext.Pagination.CanMoveToNextPage(pageBreakAtEnd))
					{
						this.m_processingContext.Pagination.SetCurrentPageHeight(matrix, 0.0);
						MatrixInstance matrixInstance3 = matrixInstance;
						int num2 = matrixInstance3.ExtraPagesFilled;
						matrixInstance3.ExtraPagesFilled = num2 + 1;
						Matrix matrix3 = matrix;
						num2 = matrix3.CurrentPage;
						matrix3.CurrentPage = num2 + 1;
						matrixInstance.NumberOfChildrenOnThisPage = 0;
					}
					runtimeMatrixGroupRootObj.PagesList.Add(renderingPagesRanges);
					this.m_startPage = renderingPagesRanges.StartPage;
					if (pageTextboxes != null)
					{
						matrixInstance.MatrixDef.RowHeaderPageTextboxes.IntegrateRepeatingTextboxValues(pageTextboxes, renderingPagesRanges.StartPage, renderingPagesRanges.EndPage);
					}
					this.m_processingContext.Pagination.LeaveIgnoreHeight(matrixHeading.StartHidden);
					this.m_processingContext.Pagination.LeaveIgnorePageBreak(matrixHeading.Visibility, false);
				}
				if (flag2 && !matrixHeading.IsColumn)
				{
					this.m_processingContext.ChunkManager.CheckPageBreak(matrixHeading, false);
				}
				if (this.m_headingReportItemCol != null)
				{
					this.m_headingReportItemCol.ResetReportItemObjs();
				}
				((ReportProcessing.RuntimeMatrixHeadingsObj)this.m_pivotHeadings).ResetReportItemObjs(this.m_processingContext);
				base.ResetReportItemsWithHideDuplicates();
			}

			// Token: 0x06008AFB RID: 35579 RVA: 0x002316B0 File Offset: 0x0022F8B0
			protected override void AddToDocumentMap()
			{
				if (base.GroupingDef.GroupLabel != null && this.m_label != null)
				{
					bool isColumn = ((MatrixHeading)((ReportProcessing.RuntimeGroupRootObj)this.m_hierarchyRoot).HierarchyDef).IsColumn;
					ReportProcessing.NavigationInfo navigationInfo = this.m_processingContext.NavigationInfo;
					if (isColumn)
					{
						navigationInfo.EnterMatrixColumn();
					}
					navigationInfo.AddToDocumentMap(this.m_headingInstance.UniqueName, true, this.m_startPage, this.m_label);
					if (isColumn)
					{
						navigationInfo.LeaveMatrixColumn();
					}
					this.m_label = null;
				}
			}

			// Token: 0x06008AFC RID: 35580 RVA: 0x00231730 File Offset: 0x0022F930
			internal void CreateInnerGroupingsOrCells(MatrixInstance matrixInstance, ReportProcessing.RuntimePivotGroupRootObj currOuterHeadingGroupRoot)
			{
				this.SetupEnvironment();
				if (base.IsOuterGrouping())
				{
					ReportProcessing.RuntimeMatrixHeadingsObj runtimeMatrixHeadingsObj = (ReportProcessing.RuntimeMatrixHeadingsObj)((ReportProcessing.RuntimeMatrixGroupRootObj)this.m_hierarchyRoot).InnerGroupings;
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						this.m_processingContext.EndIgnoreRange();
					}
					runtimeMatrixHeadingsObj.CreateInstances(this, this.m_processingContext, matrixInstance, false, currOuterHeadingGroupRoot, matrixInstance.InnerHeadingInstanceList, matrixInstance.ChildrenStartAndEndPages);
					if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
					{
						this.m_processingContext.UseAllContainers = true;
						return;
					}
				}
				else
				{
					if (currOuterHeadingGroupRoot == null)
					{
						this.CreateOutermostSubtotalCell(matrixInstance);
						return;
					}
					this.CreateCellInstance(matrixInstance, currOuterHeadingGroupRoot);
				}
			}

			// Token: 0x06008AFD RID: 35581 RVA: 0x002317C4 File Offset: 0x0022F9C4
			private void CreateCellInstance(MatrixInstance matrixInstance, ReportProcessing.RuntimePivotGroupRootObj currOuterHeadingGroupRoot)
			{
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.IgnoreAllFromStart = true;
					this.m_processingContext.EnterGrouping();
				}
				int currentCellRIIndex = matrixInstance.GetCurrentCellRIIndex();
				bool flag;
				Microsoft.ReportingServices.ReportProcessing.ReportItem cellReportItemDef = matrixInstance.GetCellReportItemDef(currentCellRIIndex, out flag);
				NonComputedUniqueNames nonComputedUniqueNames;
				MatrixCellInstance matrixCellInstance = matrixInstance.AddCell(this.m_processingContext, out nonComputedUniqueNames);
				if (cellReportItemDef != null)
				{
					this.m_processingContext.PageSectionContext.InMatrixCell = true;
					this.m_processingContext.PageSectionContext.InMatrixSubtotal = this.m_processingContext.HeadingInstance != null;
					this.m_processingContext.PageSectionContext.EnterRepeatingItem();
					if (flag)
					{
						Global.Tracer.Assert(this.m_cellsList != null && this.m_cellsList[currOuterHeadingGroupRoot.HeadingLevel] != null);
						ReportProcessing.RuntimeMatrixCell runtimeMatrixCell = (ReportProcessing.RuntimeMatrixCell)this.m_cellsList[currOuterHeadingGroupRoot.HeadingLevel].GetCell(base.PivotDef, this, currOuterHeadingGroupRoot.HeadingLevel);
						Global.Tracer.Assert(runtimeMatrixCell != null, "(null != cell)");
						runtimeMatrixCell.CreateInstance(matrixInstance, cellReportItemDef, matrixCellInstance);
					}
					else
					{
						cellReportItemDef.ProcessDrillthroughAction(this.m_processingContext, nonComputedUniqueNames);
						cellReportItemDef.ProcessNavigationAction(this.m_processingContext.NavigationInfo, nonComputedUniqueNames, matrixInstance.MatrixDef.CurrentPage);
						ReportProcessing.RuntimeRICollection.AddNonComputedPageTextboxes(cellReportItemDef, matrixInstance.MatrixDef.CurrentPage, this.m_processingContext);
					}
					matrixInstance.MatrixDef.CellPageTextboxes.IntegrateRepeatingTextboxValues(this.m_processingContext.PageSectionContext.ExitRepeatingItem(), matrixInstance.MatrixDef.CellPage, matrixInstance.MatrixDef.CellPage);
					this.m_processingContext.PageSectionContext.InMatrixSubtotal = false;
					this.m_processingContext.PageSectionContext.InMatrixCell = false;
				}
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.IgnoreAllFromStart = false;
					this.m_processingContext.ExitGrouping();
				}
			}

			// Token: 0x06008AFE RID: 35582 RVA: 0x00231989 File Offset: 0x0022FB89
			private void SetupAggregateValues()
			{
				base.SetupEnvironment(this.m_nonCustomAggregates, this.m_customAggregates, this.m_firstRow);
			}

			// Token: 0x06008AFF RID: 35583 RVA: 0x002319A4 File Offset: 0x0022FBA4
			private void SetupEnvironmentForOuterGroupings()
			{
				if (base.IsOuterGrouping())
				{
					ReportProcessing.IScope scope = this.OuterScope;
					while (scope != null && !(scope is ReportProcessing.RuntimeMatrixObj))
					{
						if (scope is ReportProcessing.RuntimeMatrixGroupLeafObj)
						{
							((ReportProcessing.RuntimeMatrixGroupLeafObj)scope).SetupAggregateValues();
						}
						scope = scope.GetOuterScope(false);
					}
				}
			}

			// Token: 0x06008B00 RID: 35584 RVA: 0x002319E8 File Offset: 0x0022FBE8
			private void CreateOutermostSubtotalCell(MatrixInstance matrixInstance)
			{
				if (this.m_firstPassCell == null)
				{
					return;
				}
				bool inMatrixSubtotal = this.m_processingContext.PageSectionContext.InMatrixSubtotal;
				this.m_processingContext.PageSectionContext.InMatrixSubtotal = true;
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.IgnoreAllFromStart = true;
					this.m_processingContext.EnterGrouping();
				}
				bool flag;
				Microsoft.ReportingServices.ReportProcessing.ReportItem cellReportItemDef = matrixInstance.GetCellReportItemDef(-1, out flag);
				NonComputedUniqueNames nonComputedUniqueNames;
				MatrixCellInstance matrixCellInstance = matrixInstance.AddCell(this.m_processingContext, out nonComputedUniqueNames);
				if (cellReportItemDef != null)
				{
					if (flag)
					{
						this.SetupEnvironmentForOuterGroupings();
						this.SetupEnvironment();
						this.m_processingContext.Pagination.EnterIgnorePageBreak(null, true);
						this.m_processingContext.Pagination.EnterIgnoreHeight(true);
						MatrixHeading matrixHeading = (MatrixHeading)base.PivotHeadingDef;
						matrixHeading.InOutermostSubtotalCell = true;
						matrixCellInstance.Content = this.m_firstPassCell.CreateInstance(cellReportItemDef, true, true, false);
						matrixHeading.InOutermostSubtotalCell = false;
						this.m_processingContext.Pagination.LeaveIgnoreHeight(true);
						this.m_processingContext.Pagination.LeaveIgnorePageBreak(null, true);
						this.m_firstPassCell.ResetReportItemObjs();
					}
					else
					{
						cellReportItemDef.ProcessDrillthroughAction(this.m_processingContext, nonComputedUniqueNames);
						cellReportItemDef.ProcessNavigationAction(this.m_processingContext.NavigationInfo, nonComputedUniqueNames, ((Matrix)matrixInstance.ReportItemDef).CurrentPage);
					}
				}
				if (Microsoft.ReportingServices.ReportProcessing.Report.ShowHideTypes.Interactive == this.m_processingContext.ShowHideType)
				{
					this.m_processingContext.IgnoreAllFromStart = false;
					this.m_processingContext.ExitGrouping();
				}
				this.m_processingContext.PageSectionContext.InMatrixSubtotal = inMatrixSubtotal;
			}

			// Token: 0x06008B01 RID: 35585 RVA: 0x00231B5D File Offset: 0x0022FD5D
			internal void CreateSubtotalOrStaticCells(MatrixInstance matrixInstance, ReportProcessing.RuntimePivotGroupRootObj currOuterHeadingGroupRoot, bool outerGroupingSubtotal)
			{
				ReportProcessing.RuntimeMatrixHeadingsObj runtimeMatrixHeadingsObj = (ReportProcessing.RuntimeMatrixHeadingsObj)((ReportProcessing.RuntimeMatrixGroupRootObj)this.m_hierarchyRoot).InnerGroupings;
				if (base.IsOuterGrouping() && !outerGroupingSubtotal)
				{
					this.CreateOutermostSubtotalCell(matrixInstance);
					return;
				}
				this.CreateInnerGroupingsOrCells(matrixInstance, currOuterHeadingGroupRoot);
			}

			// Token: 0x06008B02 RID: 35586 RVA: 0x00231B90 File Offset: 0x0022FD90
			internal void SetReportItemObjs(ReportItemColInstance reportItemColInstance)
			{
				if (reportItemColInstance.ReportItemInstances != null)
				{
					for (int i = 0; i < reportItemColInstance.ReportItemInstances.Count; i++)
					{
						this.SetReportItemObjs(reportItemColInstance[i]);
					}
				}
			}

			// Token: 0x06008B03 RID: 35587 RVA: 0x00231BC8 File Offset: 0x0022FDC8
			private void SetReportItemObjs(ReportItemInstance reportItemInstance)
			{
				if (reportItemInstance is TextBoxInstance)
				{
					Microsoft.ReportingServices.ReportProcessing.TextBox textBox = (Microsoft.ReportingServices.ReportProcessing.TextBox)reportItemInstance.ReportItemDef;
					TextBoxInstance textBoxInstance = (TextBoxInstance)reportItemInstance;
					object obj;
					if (textBox.IsSimpleTextBox())
					{
						obj = ((SimpleTextBoxInstanceInfo)textBoxInstance.InstanceInfo).OriginalValue;
					}
					else
					{
						obj = ((TextBoxInstanceInfo)textBoxInstance.InstanceInfo).OriginalValue;
					}
					((TextBoxImpl)this.m_processingContext.ReportObjectModel.ReportItemsImpl[textBox.Name]).SetResult(new VariantResult(false, obj));
					return;
				}
				if (reportItemInstance is RectangleInstance)
				{
					this.SetReportItemObjs(((RectangleInstance)reportItemInstance).ReportItemColInstance);
					return;
				}
				if (reportItemInstance is MatrixInstance)
				{
					this.SetReportItemObjs(((MatrixInstance)reportItemInstance).CornerContent);
					return;
				}
				if (reportItemInstance is TableInstance)
				{
					TableInstance tableInstance = (TableInstance)reportItemInstance;
					if (tableInstance.HeaderRowInstances != null)
					{
						for (int i = 0; i < tableInstance.HeaderRowInstances.Length; i++)
						{
							this.SetReportItemObjs(tableInstance.HeaderRowInstances[i].TableRowReportItemColInstance);
						}
					}
					if (tableInstance.FooterRowInstances != null)
					{
						for (int j = 0; j < tableInstance.FooterRowInstances.Length; j++)
						{
							this.SetReportItemObjs(tableInstance.FooterRowInstances[j].TableRowReportItemColInstance);
						}
					}
				}
			}

			// Token: 0x06008B04 RID: 35588 RVA: 0x00231CF4 File Offset: 0x0022FEF4
			private void GetScopeValuesForOutermostSTCell(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				Pivot pivotDef = base.PivotDef;
				if (base.IsOuterGrouping())
				{
					ReportProcessing.RuntimePivotObj ownerPivot = base.GetOwnerPivot();
					ownerPivot.GetScopeValues(targetScopeObj, scopeValues, ref index);
					int num = pivotDef.GetDynamicHeadingCount(false);
					for (int i = 0; i < num; i++)
					{
						Global.Tracer.Assert(index < scopeValues.Length, "Inner headings");
						int num2 = index;
						index = num2 + 1;
						scopeValues[num2] = null;
					}
					base.GetScopeValues(ownerPivot, scopeValues, ref index);
					if (this.m_innerHierarchy != null)
					{
						num = pivotDef.GetDynamicHeadingCount(true);
						for (int j = base.HeadingLevel + 1; j < num; j++)
						{
							Global.Tracer.Assert(index < scopeValues.Length, "Outer headings");
							int num2 = index;
							index = num2 + 1;
							scopeValues[num2] = null;
						}
						return;
					}
				}
				else
				{
					base.GetScopeValues(targetScopeObj, scopeValues, ref index);
					int num3;
					if (this.m_innerHierarchy != null)
					{
						num3 = pivotDef.GetDynamicHeadingCount(false);
						for (int k = base.HeadingLevel + 1; k < num3; k++)
						{
							Global.Tracer.Assert(index < scopeValues.Length, "Subtotal inner headings");
							int num2 = index;
							index = num2 + 1;
							scopeValues[num2] = null;
						}
					}
					num3 = pivotDef.GetDynamicHeadingCount(true);
					for (int l = 0; l < num3; l++)
					{
						Global.Tracer.Assert(index < scopeValues.Length, "Subtotal outer headings");
						int num2 = index;
						index = num2 + 1;
						scopeValues[num2] = null;
					}
				}
			}

			// Token: 0x06008B05 RID: 35589 RVA: 0x00231E4B File Offset: 0x0023004B
			internal override void GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				if (((MatrixHeading)base.PivotHeadingDef).InOutermostSubtotalCell)
				{
					this.GetScopeValuesForOutermostSTCell(targetScopeObj, scopeValues, ref index);
					return;
				}
				base.GetScopeValues(targetScopeObj, scopeValues, ref index);
			}

			// Token: 0x0400498C RID: 18828
			private ReportProcessing.RuntimeRICollection m_headingReportItemCol;

			// Token: 0x0400498D RID: 18829
			private ReportProcessing.RuntimeRICollection m_firstPassCell;

			// Token: 0x0400498E RID: 18830
			private MatrixHeadingInstance m_headingInstance;

			// Token: 0x0400498F RID: 18831
			private string m_label;

			// Token: 0x04004990 RID: 18832
			private int m_startPage = -1;

			// Token: 0x04004991 RID: 18833
			private bool m_startHidden;
		}

		// Token: 0x02000C6C RID: 3180
		internal sealed class RuntimeExpressionInfo
		{
			// Token: 0x06008B06 RID: 35590 RVA: 0x00231E74 File Offset: 0x00230074
			internal RuntimeExpressionInfo(ExpressionInfoList expressions, IndexedExprHost expressionsHost, BoolList directions, int expressionIndex)
			{
				this.m_expressionsHost = expressionsHost;
				this.m_expressionIndex = expressionIndex;
				this.m_expression = expressions[this.m_expressionIndex];
				if (directions != null)
				{
					this.m_direction = directions[this.m_expressionIndex];
				}
			}

			// Token: 0x17002AEB RID: 10987
			// (get) Token: 0x06008B07 RID: 35591 RVA: 0x00231EC4 File Offset: 0x002300C4
			internal ExpressionInfo Expression
			{
				get
				{
					return this.m_expression;
				}
			}

			// Token: 0x17002AEC RID: 10988
			// (get) Token: 0x06008B08 RID: 35592 RVA: 0x00231ECC File Offset: 0x002300CC
			internal bool Direction
			{
				get
				{
					return this.m_direction;
				}
			}

			// Token: 0x17002AED RID: 10989
			// (get) Token: 0x06008B09 RID: 35593 RVA: 0x00231ED4 File Offset: 0x002300D4
			internal IndexedExprHost ExpressionsHost
			{
				get
				{
					return this.m_expressionsHost;
				}
			}

			// Token: 0x17002AEE RID: 10990
			// (get) Token: 0x06008B0A RID: 35594 RVA: 0x00231EDC File Offset: 0x002300DC
			internal int ExpressionIndex
			{
				get
				{
					return this.m_expressionIndex;
				}
			}

			// Token: 0x04004992 RID: 18834
			private ExpressionInfo m_expression;

			// Token: 0x04004993 RID: 18835
			private bool m_direction = true;

			// Token: 0x04004994 RID: 18836
			private IndexedExprHost m_expressionsHost;

			// Token: 0x04004995 RID: 18837
			private int m_expressionIndex;
		}

		// Token: 0x02000C6D RID: 3181
		internal sealed class RuntimeExpressionInfoList : ArrayList
		{
			// Token: 0x06008B0B RID: 35595 RVA: 0x00231EE4 File Offset: 0x002300E4
			internal RuntimeExpressionInfoList()
			{
			}

			// Token: 0x17002AEF RID: 10991
			internal ReportProcessing.RuntimeExpressionInfo this[int index]
			{
				get
				{
					return (ReportProcessing.RuntimeExpressionInfo)base[index];
				}
			}
		}

		// Token: 0x02000C6E RID: 3182
		internal sealed class RuntimeDataRegionObjList : ArrayList
		{
			// Token: 0x17002AF0 RID: 10992
			internal ReportProcessing.RuntimeDataRegionObj this[int index]
			{
				get
				{
					return (ReportProcessing.RuntimeDataRegionObj)base[index];
				}
				set
				{
					base[index] = value;
				}
			}
		}

		// Token: 0x02000C6F RID: 3183
		internal sealed class RuntimeGroupRootObjList : Hashtable
		{
			// Token: 0x17002AF1 RID: 10993
			internal ReportProcessing.RuntimeGroupRootObj this[string index]
			{
				get
				{
					return (ReportProcessing.RuntimeGroupRootObj)base[index];
				}
				set
				{
					base[index] = value;
				}
			}
		}

		// Token: 0x02000C70 RID: 3184
		private sealed class RuntimeGroupLeafObjList : ArrayList
		{
			// Token: 0x17002AF2 RID: 10994
			internal ReportProcessing.RuntimeGroupLeafObj this[int index]
			{
				get
				{
					return (ReportProcessing.RuntimeGroupLeafObj)base[index];
				}
			}
		}

		// Token: 0x02000C71 RID: 3185
		private sealed class ParentInformation : Hashtable
		{
			// Token: 0x06008B15 RID: 35605 RVA: 0x00231F50 File Offset: 0x00230150
			internal ParentInformation()
			{
			}

			// Token: 0x17002AF3 RID: 10995
			internal ReportProcessing.RuntimeGroupLeafObjList this[object parentKey]
			{
				get
				{
					return (ReportProcessing.RuntimeGroupLeafObjList)base[parentKey];
				}
			}
		}

		// Token: 0x02000C72 RID: 3186
		internal sealed class RuntimePivotCells : Hashtable
		{
			// Token: 0x17002AF4 RID: 10996
			internal ReportProcessing.RuntimePivotCell this[int index]
			{
				get
				{
					return (ReportProcessing.RuntimePivotCell)base[index];
				}
				set
				{
					if (base.Count == 0)
					{
						this.m_firstCell = value;
					}
					base[index] = value;
				}
			}

			// Token: 0x06008B19 RID: 35609 RVA: 0x00231F97 File Offset: 0x00230197
			internal void Add(int key, ReportProcessing.RuntimePivotCell cell)
			{
				if (this.m_lastCell != null)
				{
					this.m_lastCell.NextCell = cell;
				}
				else
				{
					this.m_firstCell = cell;
				}
				this.m_lastCell = cell;
				base.Add(key, cell);
			}

			// Token: 0x06008B1A RID: 35610 RVA: 0x00231FCC File Offset: 0x002301CC
			internal ReportProcessing.RuntimePivotCell GetCell(Pivot pivotDef, ReportProcessing.RuntimePivotGroupLeafObj owner, int cellLevel)
			{
				ReportProcessing.RuntimePivotGroupRootObj currentOuterHeadingGroupRoot = pivotDef.CurrentOuterHeadingGroupRoot;
				int num = pivotDef.OuterGroupingIndexes[currentOuterHeadingGroupRoot.HeadingLevel];
				ReportProcessing.RuntimePivotCell runtimePivotCell = this[num];
				if (runtimePivotCell == null)
				{
					runtimePivotCell = owner.CreateCell(cellLevel, pivotDef);
					this[num] = runtimePivotCell;
				}
				return runtimePivotCell;
			}

			// Token: 0x06008B1B RID: 35611 RVA: 0x0023200C File Offset: 0x0023020C
			internal void SortAndFilter()
			{
				for (ReportProcessing.RuntimePivotCell runtimePivotCell = this.m_firstCell; runtimePivotCell != null; runtimePivotCell = runtimePivotCell.NextCell)
				{
					runtimePivotCell.SortAndFilter();
				}
			}

			// Token: 0x06008B1C RID: 35612 RVA: 0x00232034 File Offset: 0x00230234
			internal void CalculateRunningValues(Pivot pivotDef, AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup, ReportProcessing.RuntimePivotGroupLeafObj owner, int cellLevel)
			{
				ReportProcessing.RuntimePivotCell cell = this.GetCell(pivotDef, owner, cellLevel);
				Global.Tracer.Assert(cell != null, "(null != cell)");
				cell.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
			}

			// Token: 0x04004996 RID: 18838
			private ReportProcessing.RuntimePivotCell m_firstCell;

			// Token: 0x04004997 RID: 18839
			private ReportProcessing.RuntimePivotCell m_lastCell;
		}

		// Token: 0x02000C73 RID: 3187
		private sealed class Merge
		{
			// Token: 0x06008B1E RID: 35614 RVA: 0x00232072 File Offset: 0x00230272
			internal Merge(Microsoft.ReportingServices.ReportProcessing.Report report, ReportProcessing.ProcessingContext context)
			{
				this.m_report = report;
				this.m_processingContext = context;
				this.m_fetchImageStreams = true;
			}

			// Token: 0x06008B1F RID: 35615 RVA: 0x0023209A File Offset: 0x0023029A
			internal Merge(Microsoft.ReportingServices.ReportProcessing.Report report, ReportProcessing.ProcessingContext context, bool firstSubreportInstance)
			{
				this.m_report = report;
				this.m_processingContext = context;
				this.m_fetchImageStreams = firstSubreportInstance;
			}

			// Token: 0x06008B20 RID: 35616 RVA: 0x002320C4 File Offset: 0x002302C4
			internal bool PrefetchData(ParameterInfoCollection parameters, bool mergeTran)
			{
				EventHandler eventHandler = null;
				try
				{
					this.Init(parameters, true);
					this.EvaluateAndSetReportLanguage();
					if (this.m_report.DataSourceCount != 0)
					{
						int count = this.m_report.DataSources.Count;
						bool flag = true;
						for (int i = 0; i < count; i++)
						{
							this.m_runtimeDataSourceNodes.Add(new ReportProcessing.ReportRuntimeDataSourceNode(this.m_report, this.m_report.DataSources[i], this.m_processingContext));
						}
						eventHandler = new EventHandler(this.AbortHandler);
						this.m_processingContext.AbortInfo.ProcessingAbortEvent += eventHandler;
						if (Global.Tracer.TraceVerbose)
						{
							Global.Tracer.Trace(TraceLevel.Verbose, "Abort handler registered.");
						}
						ReportProcessing.ThreadSet threadSet = null;
						ReportProcessing.RuntimeDataSourceNode runtimeDataSourceNode;
						if (count > 1)
						{
							threadSet = new ReportProcessing.ThreadSet(count - 1);
							for (int j = 1; j < count; j++)
							{
								runtimeDataSourceNode = this.m_runtimeDataSourceNodes[j];
								runtimeDataSourceNode.InitProcessingParams(mergeTran, true);
								this.m_processingContext.JobContext.TryQueueWorkItem(new WaitCallback(runtimeDataSourceNode.ProcessConcurrent), threadSet);
							}
						}
						runtimeDataSourceNode = this.m_runtimeDataSourceNodes[0];
						runtimeDataSourceNode.InitProcessingParams(mergeTran, true);
						runtimeDataSourceNode.ProcessConcurrent(null);
						this.m_processingContext.CheckAndThrowIfAborted();
						if (count > 1)
						{
							threadSet.WaitForCompletion();
						}
						this.m_processingContext.CheckAndThrowIfAborted();
						for (int k = 0; k < count; k++)
						{
							runtimeDataSourceNode = this.m_runtimeDataSourceNodes[k];
							if (flag)
							{
								flag = runtimeDataSourceNode.NoRows;
							}
						}
					}
					if (this.m_report.ParametersNotUsedInQuery && this.m_processingContext.ErrorSavingSnapshotData)
					{
						for (int l = 0; l < parameters.Count; l++)
						{
							parameters[l].UsedInQuery = true;
						}
						return false;
					}
				}
				finally
				{
					if (eventHandler != null)
					{
						this.m_processingContext.AbortInfo.ProcessingAbortEvent -= eventHandler;
					}
					if (this.m_report.DataSources != null && 0 < this.m_report.DataSources.Count)
					{
						for (int m = this.m_runtimeDataSourceNodes.Count - 1; m >= 0; m--)
						{
							ReportProcessing.RuntimeDataSourceNode runtimeDataSourceNode2 = this.m_runtimeDataSourceNodes[m];
							if (runtimeDataSourceNode2.DataProcessingDurationMs > this.m_processingContext.DataProcessingDurationMs)
							{
								this.m_processingContext.DataProcessingDurationMs = runtimeDataSourceNode2.DataProcessingDurationMs;
							}
						}
					}
					this.m_runtimeDataSourceNodes.Clear();
				}
				return true;
			}

			// Token: 0x06008B21 RID: 35617 RVA: 0x00232334 File Offset: 0x00230534
			internal Microsoft.ReportingServices.ReportProcessing.ReportInstance Process(ParameterInfoCollection parameters, bool mergeTran)
			{
				EventHandler eventHandler = null;
				Microsoft.ReportingServices.ReportProcessing.ReportInstance reportInstance;
				try
				{
					bool flag = false;
					if (Global.Tracer.TraceVerbose)
					{
						Global.Tracer.Trace(TraceLevel.Verbose, "One Pass Processing? {0}", new object[] { this.m_report.MergeOnePass ? "Yes" : "No" });
					}
					ImageStreamNames imageStreamNames = this.m_report.ImageStreamNames;
					if (this.m_fetchImageStreams && imageStreamNames != null && 0 < imageStreamNames.Count)
					{
						ImageStreamNames imageStreamNames2 = new ImageStreamNames();
						IDictionaryEnumerator enumerator = imageStreamNames.GetEnumerator();
						while (enumerator.MoveNext())
						{
							string text = (string)enumerator.Key;
							Global.Tracer.Assert(text != null, "The URL to this image should not be null.");
							string text2 = null;
							byte[] array = null;
							ImageInfo imageInfo = (ImageInfo)enumerator.Value;
							ReportProcessing.RuntimeRICollection.GetExternalImage(this.m_processingContext, text, Microsoft.ReportingServices.ReportProcessing.ObjectType.Image, imageInfo.StreamName, out array, out text2);
							if (array != null && this.m_processingContext.CreateReportChunkCallback != null)
							{
								string text3 = Guid.NewGuid().ToString();
								using (Stream stream = this.m_processingContext.CreateReportChunkCallback(text3, ReportProcessing.ReportChunkTypes.Image, text2))
								{
									stream.Write(array, 0, array.Length);
								}
								imageStreamNames2[text] = new ImageInfo(text3, text2);
							}
						}
						this.m_report.ImageStreamNames = imageStreamNames2;
						this.m_processingContext.ImageStreamNames = imageStreamNames2;
					}
					this.Init(parameters, false);
					this.EvaluateAndSetReportLanguage();
					if (this.m_processingContext.ReportObjectModel.DataSourcesImpl == null)
					{
						this.m_processingContext.ReportObjectModel.DataSourcesImpl = new DataSourcesImpl(this.m_report.DataSourceCount);
					}
					if (this.m_report.DataSourceCount != 0)
					{
						int count = this.m_report.DataSources.Count;
						flag = true;
						for (int i = 0; i < count; i++)
						{
							this.m_runtimeDataSourceNodes.Add(new ReportProcessing.ReportRuntimeDataSourceNode(this.m_report, this.m_report.DataSources[i], this.m_processingContext));
						}
						eventHandler = new EventHandler(this.AbortHandler);
						this.m_processingContext.AbortInfo.ProcessingAbortEvent += eventHandler;
						if (Global.Tracer.TraceVerbose)
						{
							Global.Tracer.Trace(TraceLevel.Verbose, "Abort handler registered.");
						}
						ReportProcessing.ThreadSet threadSet = null;
						ReportProcessing.RuntimeDataSourceNode runtimeDataSourceNode;
						if (count > 1)
						{
							threadSet = new ReportProcessing.ThreadSet(count - 1);
							for (int j = 1; j < count; j++)
							{
								runtimeDataSourceNode = this.m_runtimeDataSourceNodes[j];
								runtimeDataSourceNode.InitProcessingParams(mergeTran, false);
								this.m_processingContext.JobContext.TryQueueWorkItem(new WaitCallback(runtimeDataSourceNode.ProcessConcurrent), threadSet);
							}
						}
						runtimeDataSourceNode = this.m_runtimeDataSourceNodes[0];
						runtimeDataSourceNode.InitProcessingParams(mergeTran, false);
						runtimeDataSourceNode.ProcessConcurrent(null);
						this.m_processingContext.CheckAndThrowIfAborted();
						if (count > 1)
						{
							threadSet.WaitForCompletion();
						}
						if (Global.Tracer.TraceVerbose)
						{
							Global.Tracer.Trace(TraceLevel.Verbose, "The processing of all data sources has been completed.");
						}
						this.m_processingContext.CheckAndThrowIfAborted();
						for (int k = 0; k < count; k++)
						{
							runtimeDataSourceNode = this.m_runtimeDataSourceNodes[k];
							if (flag)
							{
								flag = runtimeDataSourceNode.NoRows;
							}
							if (this.m_processingContext.SaveSnapshotData && this.m_processingContext.ErrorSavingSnapshotData && this.m_processingContext.StopSaveSnapshotDataOnError)
							{
								runtimeDataSourceNode.EraseDataChunk();
							}
						}
					}
					if (this.m_report.ParametersNotUsedInQuery && this.m_processingContext.ErrorSavingSnapshotData)
					{
						for (int l = 0; l < parameters.Count; l++)
						{
							parameters[l].UsedInQuery = true;
						}
					}
					this.CreateInstances(parameters, flag);
					this.m_report.IntermediateFormatVersion.SetCurrent();
					this.m_report.LastID = this.m_processingContext.GetLastIDForReport();
					reportInstance = this.m_reportInstance;
				}
				finally
				{
					if (eventHandler != null)
					{
						this.m_processingContext.AbortInfo.ProcessingAbortEvent -= eventHandler;
					}
					if (this.m_report.DataSources != null && 0 < this.m_report.DataSources.Count)
					{
						for (int m = this.m_runtimeDataSourceNodes.Count - 1; m >= 0; m--)
						{
							ReportProcessing.RuntimeDataSourceNode runtimeDataSourceNode2 = this.m_runtimeDataSourceNodes[m];
							if (runtimeDataSourceNode2.DataProcessingDurationMs > this.m_processingContext.DataProcessingDurationMs)
							{
								this.m_processingContext.DataProcessingDurationMs = runtimeDataSourceNode2.DataProcessingDurationMs;
							}
						}
					}
					if (this.m_processingContext.ReportRuntime != null)
					{
						this.m_processingContext.ReportRuntime.Close();
					}
					for (int n = 0; n < this.m_runtimeDataSourceNodes.Count; n++)
					{
						this.m_runtimeDataSourceNodes[n].Cleanup();
					}
				}
				return reportInstance;
			}

			// Token: 0x06008B22 RID: 35618 RVA: 0x0023280C File Offset: 0x00230A0C
			internal void CleanupDataChunk(UserProfileState userProfileState)
			{
				if (!this.m_processingContext.IsHistorySnapshot && (this.m_processingContext.SaveSnapshotData && (!this.m_processingContext.ErrorSavingSnapshotData || (this.m_processingContext.ErrorSavingSnapshotData && !this.m_processingContext.StopSaveSnapshotDataOnError))) && !this.m_report.ParametersNotUsedInQuery && !this.m_processingContext.HasUserSortFilter && (userProfileState & UserProfileState.InReport) == UserProfileState.None)
				{
					for (int i = 0; i < this.m_report.DataSources.Count; i++)
					{
						this.m_runtimeDataSourceNodes[i].EraseDataChunk();
					}
				}
			}

			// Token: 0x06008B23 RID: 35619 RVA: 0x002328B4 File Offset: 0x00230AB4
			private void AbortHandler(object sender, EventArgs e)
			{
				if (((ReportProcessing.ProcessingAbortEventArgs)e).ReportUniqueName == this.m_processingContext.DataSetUniqueName)
				{
					if (Global.Tracer.TraceInfo)
					{
						Global.Tracer.Trace(TraceLevel.Info, "Merge abort handler called for ID={0}. Aborting data sources ...", new object[] { this.m_processingContext.DataSetUniqueName });
					}
					int count = this.m_runtimeDataSourceNodes.Count;
					for (int i = 0; i < count; i++)
					{
						this.m_runtimeDataSourceNodes[i].Abort();
					}
				}
			}

			// Token: 0x06008B24 RID: 35620 RVA: 0x00232938 File Offset: 0x00230B38
			internal void Init(ParameterInfoCollection parameters, bool prefetchDataOnly)
			{
				if (this.m_processingContext.ReportObjectModel == null && this.m_processingContext.ReportRuntime == null)
				{
					this.m_processingContext.ReportObjectModel = new ObjectModelImpl(this.m_processingContext);
					this.m_processingContext.ReportRuntime = new ReportRuntime(this.m_processingContext.ReportObjectModel, this.m_processingContext.ErrorContext);
					this.m_processingContext.ReportObjectModel.ParametersImpl = new ParametersImpl(parameters.Count);
					if (parameters != null && parameters.Count > 0)
					{
						for (int i = 0; i < parameters.Count; i++)
						{
							ParameterInfo parameterInfo = parameters[i];
							this.m_processingContext.ReportObjectModel.ParametersImpl.Add(parameterInfo.Name, new ParameterImpl(parameterInfo.Values, parameterInfo.Labels, parameterInfo.MultiValue));
						}
					}
					this.m_processingContext.ReportObjectModel.GlobalsImpl = new GlobalsImpl(this.m_processingContext.ReportContext.ItemName, this.m_processingContext.ExecutionTime, this.m_processingContext.ReportContext.HostRootUri, this.m_processingContext.ReportContext.ParentPath);
					this.m_processingContext.ReportObjectModel.UserImpl = new UserImpl(this.m_processingContext.RequestUserName, this.m_processingContext.UserLanguage.Name, this.m_processingContext.AllowUserProfileState);
				}
				if (!prefetchDataOnly)
				{
					this.m_processingContext.ReportObjectModel.FieldsImpl = new FieldsImpl();
					int num = 0;
					for (int j = 0; j < this.m_report.DataSourceCount; j++)
					{
						Microsoft.ReportingServices.ReportProcessing.DataSource dataSource = this.m_report.DataSources[j];
						if (dataSource.DataSets != null)
						{
							for (int k = 0; k < dataSource.DataSets.Count; k++)
							{
								if (!dataSource.DataSets[k].UsedOnlyInParameters)
								{
									num++;
								}
							}
						}
					}
					this.m_processingContext.ReportObjectModel.AggregatesImpl = new AggregatesImpl(num > 1, this.m_processingContext.ReportRuntime);
					this.m_processingContext.ReportObjectModel.ReportItemsImpl = new ReportItemsImpl(num > 1);
					this.m_processingContext.ReportObjectModel.DataSetsImpl = new DataSetsImpl(num > 1, num);
				}
				if (!this.m_initialized)
				{
					this.m_initialized = true;
					if (this.m_processingContext.ReportRuntime.ReportExprHost == null)
					{
						this.m_processingContext.ReportRuntime.LoadCompiledCode(this.m_report, false, this.m_processingContext.ReportObjectModel, this.m_processingContext.ReportRuntimeSetup);
					}
					if (this.m_processingContext.ReportRuntime.ReportExprHost != null)
					{
						this.m_report.SetExprHost(this.m_processingContext.ReportRuntime.ReportExprHost, this.m_processingContext.ReportObjectModel);
					}
					if (this.m_report.HasUserSortFilter)
					{
						this.m_processingContext.HasUserSortFilter = true;
					}
				}
			}

			// Token: 0x06008B25 RID: 35621 RVA: 0x00232C1C File Offset: 0x00230E1C
			private void CreateInstances(ParameterInfoCollection parameters, bool noRows)
			{
				int num = 0;
				ReportProcessing.RuntimeReportDataSetNode runtimeReportDataSetNode = null;
				ReportProcessing.RuntimeReportDataSetNode runtimeReportDataSetNode2 = null;
				if (this.m_runtimeDataSourceNodes != null)
				{
					for (int i = 0; i < this.m_runtimeDataSourceNodes.Count; i++)
					{
						ReportProcessing.RuntimeDataSourceNode runtimeDataSourceNode = this.m_runtimeDataSourceNodes[i];
						if (runtimeDataSourceNode != null && runtimeDataSourceNode.RuntimeDataSetNodes != null)
						{
							for (int j = 0; j < runtimeDataSourceNode.RuntimeDataSetNodes.Count; j++)
							{
								num++;
								runtimeReportDataSetNode = (ReportProcessing.RuntimeReportDataSetNode)runtimeDataSourceNode.RuntimeDataSetNodes[j];
								if (runtimeReportDataSetNode.HasSortFilterInfo)
								{
									RuntimeSortFilterEventInfoList runtimeSortFilterInfo = runtimeReportDataSetNode.ProcessingContext.RuntimeSortFilterInfo;
									if (runtimeSortFilterInfo != null)
									{
										if (this.m_processingContext.ReportRuntimeUserSortFilterInfo == null)
										{
											this.m_processingContext.ReportRuntimeUserSortFilterInfo = new RuntimeSortFilterEventInfoList();
										}
										for (int k = 0; k < runtimeSortFilterInfo.Count; k++)
										{
											this.m_processingContext.ReportRuntimeUserSortFilterInfo.Add(runtimeSortFilterInfo[k]);
										}
									}
								}
							}
						}
					}
				}
				if (1 == num && runtimeReportDataSetNode != null)
				{
					this.m_processingContext.ReportObjectModel.FieldsImpl.Clone(runtimeReportDataSetNode.Fields);
					runtimeReportDataSetNode2 = runtimeReportDataSetNode;
				}
				this.m_reportInstance = new Microsoft.ReportingServices.ReportProcessing.ReportInstance(this.m_processingContext, this.m_report, parameters, this.m_reportLanguage, noRows);
				if (this.m_report.HasReportItemReferences || this.m_processingContext.ReportRuntime.ReportExprHost != null)
				{
					this.m_processingContext.RuntimeInitializeReportItemObjs(this.m_report.ReportItems, false, false);
				}
				this.m_processingContext.ReportRuntime.CurrentScope = runtimeReportDataSetNode2;
				ReportProcessing.RuntimeRICollection runtimeRICollection = new ReportProcessing.RuntimeRICollection(runtimeReportDataSetNode2, this.m_report.ReportItems, this.m_processingContext, false);
				if (runtimeReportDataSetNode2 != null)
				{
					this.m_processingContext.UserSortFilterContext.UpdateContextFromDataSet(runtimeReportDataSetNode2.ProcessingContext.UserSortFilterContext);
				}
				this.m_processingContext.Pagination.SetReportItemStartPage(this.m_report, false);
				runtimeRICollection.CreateInstances(this.m_reportInstance.ReportItemColInstance);
				this.m_processingContext.Pagination.ProcessEndPage(this.m_reportInstance, this.m_report, false, false);
				this.m_reportInstance.NumberOfPages = this.m_report.EndPage + 1;
			}

			// Token: 0x06008B26 RID: 35622 RVA: 0x00232E34 File Offset: 0x00231034
			private void EvaluateAndSetReportLanguage()
			{
				CultureInfo cultureInfo = null;
				if (this.m_report.Language != null)
				{
					if (this.m_report.Language.Type != ExpressionInfo.Types.Constant)
					{
						this.m_processingContext.LanguageInstanceId = this.m_processingContext.LanguageInstanceId + 1U;
						this.m_reportLanguage = this.m_processingContext.ReportRuntime.EvaluateReportLanguageExpression(this.m_report, out cultureInfo);
					}
					else
					{
						Exception ex = null;
						try
						{
							cultureInfo = new CultureInfo(this.m_report.Language.Value, false);
						}
						catch (Exception ex2)
						{
							cultureInfo = null;
							ex = ex2;
						}
						if (cultureInfo != null && cultureInfo.IsNeutralCulture)
						{
							try
							{
								cultureInfo = CultureInfo.CreateSpecificCulture(this.m_report.Language.Value);
								cultureInfo = new CultureInfo(cultureInfo.Name, false);
							}
							catch (Exception ex3)
							{
								cultureInfo = null;
								ex = ex3;
							}
						}
						if (ex != null)
						{
							this.m_processingContext.ErrorContext.Register(ProcessingErrorCode.rsInvalidLanguage, Severity.Warning, Microsoft.ReportingServices.ReportProcessing.ObjectType.Report, this.m_report.Name, "Language", new string[] { ex.Message });
						}
					}
				}
				if (cultureInfo == null && this.m_processingContext.SubReportLevel == 0U)
				{
					cultureInfo = Localization.DefaultReportServerSpecificCulture;
				}
				if (cultureInfo != null)
				{
					Thread.CurrentThread.CurrentCulture = cultureInfo;
					this.m_processingContext.ThreadCulture = cultureInfo;
				}
			}

			// Token: 0x04004998 RID: 18840
			private Microsoft.ReportingServices.ReportProcessing.Report m_report;

			// Token: 0x04004999 RID: 18841
			private Microsoft.ReportingServices.ReportProcessing.ReportInstance m_reportInstance;

			// Token: 0x0400499A RID: 18842
			private string m_reportLanguage;

			// Token: 0x0400499B RID: 18843
			private ReportProcessing.ProcessingContext m_processingContext;

			// Token: 0x0400499C RID: 18844
			private ReportProcessing.RuntimeDataSourceNodeList m_runtimeDataSourceNodes = new ReportProcessing.RuntimeDataSourceNodeList();

			// Token: 0x0400499D RID: 18845
			private bool m_fetchImageStreams;

			// Token: 0x0400499E RID: 18846
			private bool m_initialized;
		}

		// Token: 0x02000C74 RID: 3188
		private sealed class RuntimeDataSourceNodeList : ArrayList
		{
			// Token: 0x17002AF5 RID: 10997
			internal ReportProcessing.RuntimeDataSourceNode this[int index]
			{
				get
				{
					return (ReportProcessing.RuntimeDataSourceNode)base[index];
				}
			}
		}

		// Token: 0x02000C75 RID: 3189
		internal abstract class RuntimeDataSourceNode
		{
			// Token: 0x06008B29 RID: 35625 RVA: 0x00232F92 File Offset: 0x00231192
			internal RuntimeDataSourceNode(Microsoft.ReportingServices.ReportProcessing.Report report, Microsoft.ReportingServices.ReportProcessing.DataSource dataSource, ReportProcessing.ProcessingContext processingContext)
			{
				this.m_report = report;
				this.m_dataSource = dataSource;
				this.m_processingContext = processingContext;
			}

			// Token: 0x06008B2A RID: 35626 RVA: 0x00232FC8 File Offset: 0x002311C8
			internal RuntimeDataSourceNode(Microsoft.ReportingServices.ReportProcessing.Report report, Microsoft.ReportingServices.ReportProcessing.DataSource dataSource, int dataSetIndex, ReportProcessing.ProcessingContext processingContext)
			{
				this.m_report = report;
				this.m_dataSource = dataSource;
				this.m_processingContext = processingContext;
				this.m_dataSetIndex = dataSetIndex;
			}

			// Token: 0x17002AF6 RID: 10998
			// (get) Token: 0x06008B2B RID: 35627 RVA: 0x00233006 File Offset: 0x00231206
			internal long DataProcessingDurationMs
			{
				get
				{
					return this.m_dataProcessingDurationMs;
				}
			}

			// Token: 0x17002AF7 RID: 10999
			// (get) Token: 0x06008B2C RID: 35628 RVA: 0x0023300E File Offset: 0x0023120E
			internal bool NoRows
			{
				get
				{
					return this.m_noRows;
				}
			}

			// Token: 0x17002AF8 RID: 11000
			// (get) Token: 0x06008B2D RID: 35629 RVA: 0x00233016 File Offset: 0x00231216
			internal ReportProcessing.RuntimeDataSetNodeList RuntimeDataSetNodes
			{
				get
				{
					return this.m_runtimeDataSetNodes;
				}
			}

			// Token: 0x06008B2E RID: 35630 RVA: 0x00233020 File Offset: 0x00231220
			internal void Abort()
			{
				if (Global.Tracer.TraceVerbose)
				{
					Global.Tracer.Trace(TraceLevel.Verbose, "Data source '{0}': Abort handler called. CanAbort = {1}.", new object[]
					{
						this.m_dataSource.Name,
						this.m_canAbort
					});
				}
				if (!this.m_canAbort)
				{
					return;
				}
				int count = this.m_runtimeDataSetNodes.Count;
				for (int i = 0; i < count; i++)
				{
					this.m_runtimeDataSetNodes[i].Abort();
				}
			}

			// Token: 0x06008B2F RID: 35631 RVA: 0x002330A0 File Offset: 0x002312A0
			internal void Cleanup()
			{
				for (int i = 0; i < this.m_runtimeDataSetNodes.Count; i++)
				{
					this.m_runtimeDataSetNodes[i].Cleanup();
				}
			}

			// Token: 0x06008B30 RID: 35632 RVA: 0x002330D4 File Offset: 0x002312D4
			internal virtual void InitProcessingParams(bool mergeTran, bool prefetchDataOnly)
			{
			}

			// Token: 0x06008B31 RID: 35633 RVA: 0x002330D8 File Offset: 0x002312D8
			internal void ProcessConcurrent(object threadSet)
			{
				CultureInfo cultureInfo = null;
				Global.Tracer.Assert(this.m_dataSource.Name != null, "The name of a data source cannot be null.");
				try
				{
					if (Global.Tracer.TraceVerbose)
					{
						Global.Tracer.Trace(TraceLevel.Verbose, "Thread has started processing data source '{0}'", new object[] { this.m_dataSource.Name });
					}
					if (this.m_processingContext.ThreadCulture != null)
					{
						cultureInfo = Thread.CurrentThread.CurrentCulture;
						Thread.CurrentThread.CurrentCulture = this.m_processingContext.ThreadCulture;
					}
					this.Process();
				}
				catch (ProcessingAbortedException)
				{
					if (Global.Tracer.TraceWarning)
					{
						Global.Tracer.Trace(TraceLevel.Warning, "Data source '{0}': Report processing has been aborted.", new object[] { this.m_dataSource.Name });
					}
				}
				catch (Exception ex)
				{
					if (Global.Tracer.TraceError)
					{
						Global.Tracer.Trace(TraceLevel.Error, "An exception has occurred in data source '{0}'. Details: {1}", new object[]
						{
							this.m_dataSource.Name,
							ex.ToString()
						});
					}
					if (this.m_processingContext.AbortInfo != null)
					{
						this.m_processingContext.AbortInfo.SetError(this.m_processingContext.DataSetUniqueName, ex);
					}
				}
				finally
				{
					if (Global.Tracer.TraceVerbose)
					{
						Global.Tracer.Trace(TraceLevel.Verbose, "Processing of data source '{0}' completed.", new object[] { this.m_dataSource.Name });
					}
					if (cultureInfo != null)
					{
						Thread.CurrentThread.CurrentCulture = cultureInfo;
					}
					ReportProcessing.ThreadSet threadSet2 = threadSet as ReportProcessing.ThreadSet;
					if (threadSet2 != null)
					{
						threadSet2.ThreadCompleted();
					}
				}
			}

			// Token: 0x06008B32 RID: 35634
			protected abstract void Process();

			// Token: 0x06008B33 RID: 35635 RVA: 0x002332A4 File Offset: 0x002314A4
			internal void EraseDataChunk()
			{
				for (int i = 0; i < this.m_runtimeDataSetNodes.Count; i++)
				{
					this.m_runtimeDataSetNodes[i].EraseDataChunk();
				}
			}

			// Token: 0x0400499F RID: 18847
			protected bool m_noRows = true;

			// Token: 0x040049A0 RID: 18848
			protected ReportProcessing.ProcessingContext m_processingContext;

			// Token: 0x040049A1 RID: 18849
			protected Microsoft.ReportingServices.ReportProcessing.Report m_report;

			// Token: 0x040049A2 RID: 18850
			protected Microsoft.ReportingServices.ReportProcessing.DataSource m_dataSource;

			// Token: 0x040049A3 RID: 18851
			protected ReportProcessing.RuntimeDataSetNodeList m_runtimeDataSetNodes = new ReportProcessing.RuntimeDataSetNodeList();

			// Token: 0x040049A4 RID: 18852
			protected bool m_canAbort;

			// Token: 0x040049A5 RID: 18853
			protected long m_dataProcessingDurationMs;

			// Token: 0x040049A6 RID: 18854
			protected int m_dataSetIndex = -1;
		}

		// Token: 0x02000C76 RID: 3190
		internal sealed class ReportRuntimeDataSourceNode : ReportProcessing.RuntimeDataSourceNode
		{
			// Token: 0x06008B34 RID: 35636 RVA: 0x002332D8 File Offset: 0x002314D8
			internal ReportRuntimeDataSourceNode(Microsoft.ReportingServices.ReportProcessing.Report report, Microsoft.ReportingServices.ReportProcessing.DataSource dataSource, ReportProcessing.ProcessingContext processingContext)
				: base(report, dataSource, processingContext)
			{
			}

			// Token: 0x06008B35 RID: 35637 RVA: 0x002332E3 File Offset: 0x002314E3
			internal ReportRuntimeDataSourceNode(Microsoft.ReportingServices.ReportProcessing.Report report, Microsoft.ReportingServices.ReportProcessing.DataSource dataSource, int dataSetIndex, ReportProcessing.ProcessingContext processingContext, LegacyReportParameterDataSetCache aCache)
				: base(report, dataSource, dataSetIndex, processingContext)
			{
				this.m_cache = aCache;
			}

			// Token: 0x06008B36 RID: 35638 RVA: 0x002332F8 File Offset: 0x002314F8
			internal override void InitProcessingParams(bool mergeTran, bool prefetchDataOnly)
			{
				this.m_mergeTran = mergeTran;
				this.m_prefetchDataOnly = prefetchDataOnly;
			}

			// Token: 0x06008B37 RID: 35639 RVA: 0x00233308 File Offset: 0x00231508
			protected override void Process()
			{
				if (this.m_dataSource.DataSets == null || 0 >= this.m_dataSource.DataSets.Count)
				{
					return;
				}
				IDbConnection dbConnection = null;
				ReportProcessing.TransactionInfo transactionInfo = null;
				bool flag = false;
				int num = 1;
				bool flag2 = false;
				bool flag3 = false;
				if (this.m_processingContext.ProcessReportParameters)
				{
					this.m_runtimeDataSetNodes.Add(new ReportProcessing.RuntimeReportParametersDataSetNode(this.m_report, this.m_dataSource.DataSets[this.m_dataSetIndex], this.m_processingContext, this.m_cache));
				}
				else
				{
					num = this.m_dataSource.DataSets.Count;
					for (int i = 0; i < num; i++)
					{
						Microsoft.ReportingServices.ReportProcessing.DataSet dataSet = this.m_dataSource.DataSets[i];
						if (!dataSet.UsedOnlyInParameters)
						{
							ReportProcessing.RuntimeDataSetNode runtimeDataSetNode;
							if (this.m_prefetchDataOnly)
							{
								runtimeDataSetNode = new ReportProcessing.RuntimePrefetchDataSetNode(this.m_report, dataSet, this.m_processingContext);
							}
							else
							{
								runtimeDataSetNode = new ReportProcessing.RuntimeReportDataSetNode(this.m_report, dataSet, this.m_processingContext);
							}
							this.m_runtimeDataSetNodes.Add(runtimeDataSetNode);
						}
					}
				}
				num = this.m_runtimeDataSetNodes.Count;
				if (0 >= num)
				{
					this.m_noRows = false;
					return;
				}
				this.m_canAbort = true;
				this.m_processingContext.CheckAndThrowIfAborted();
				try
				{
					bool flag4 = num > 1 && (!this.m_processingContext.UserSortFilterProcessing || this.m_processingContext.SubReportLevel == 0U || !this.m_report.HasUserSortFilter);
					if (!this.m_processingContext.SnapshotProcessing && !this.m_processingContext.ProcessWithCachedData)
					{
						if (this.m_dataSource.Transaction && this.m_mergeTran)
						{
							ReportProcessing.DataSourceInfo dataSourceInfo = this.m_processingContext.GlobalDataSourceInfo[this.m_dataSource.Name];
							if (dataSourceInfo != null)
							{
								dbConnection = dataSourceInfo.Connection;
								transactionInfo = dataSourceInfo.TransactionInfo;
							}
						}
						if (Global.Tracer.TraceVerbose)
						{
							Global.Tracer.Trace(TraceLevel.Verbose, "Data source '{0}': Transaction = {1}, MergeTran = {2}, NumDataSets = {3}", new object[]
							{
								this.m_dataSource.Name,
								this.m_dataSource.Transaction,
								this.m_mergeTran,
								num
							});
						}
						if (dbConnection == null)
						{
							ReportProcessing.ReportProcessingContext reportProcessingContext = (ReportProcessing.ReportProcessingContext)this.m_processingContext;
							Microsoft.ReportingServices.DataExtensions.DataSourceInfo dataSourceInfo2;
							string text = this.m_dataSource.ResolveConnectionString(reportProcessingContext, out dataSourceInfo2);
							dbConnection = reportProcessingContext.DataExtensionConnection.OpenDataSourceExtensionConnection(this.m_dataSource, text, dataSourceInfo2, null);
							if (Global.Tracer.TraceVerbose)
							{
								Global.Tracer.Trace(TraceLevel.Verbose, "Data source '{0}': Created a connection.", new object[] { this.m_dataSource.Name });
							}
							flag = true;
						}
						if (this.m_dataSource.Transaction)
						{
							if (transactionInfo == null)
							{
								IDbTransaction dbTransaction = dbConnection.BeginTransaction();
								if (Global.Tracer.TraceVerbose)
								{
									Global.Tracer.Trace(TraceLevel.Verbose, "Data source '{0}': Begun a transaction.", new object[] { this.m_dataSource.Name });
								}
								transactionInfo = new ReportProcessing.TransactionInfo(dbTransaction);
								flag2 = true;
							}
							IDbTransactionExtension dbTransactionExtension = transactionInfo.Transaction as IDbTransactionExtension;
							flag3 = dbTransactionExtension != null && dbTransactionExtension.AllowMultiConnection;
							flag4 = flag4 && flag3;
							if (Global.Tracer.TraceVerbose)
							{
								Global.Tracer.Trace(TraceLevel.Verbose, "Data source '{0}': TransactionCanSpanConnections = {1}, ConcurrentDataSets = {2}", new object[]
								{
									this.m_dataSource.Name,
									flag3,
									flag4
								});
							}
						}
					}
					if (!this.m_prefetchDataOnly)
					{
						this.m_processingContext.ReportObjectModel.DataSourcesImpl.Add(this.m_dataSource);
					}
					int num2;
					if (!this.m_processingContext.SnapshotProcessing && !this.m_processingContext.ProcessWithCachedData && dbConnection is IDbCollationProperties && this.NeedAutoDetectCollation(out num2))
					{
						try
						{
							string text2;
							bool flag5;
							bool flag6;
							bool flag7;
							bool flag8;
							if (((IDbCollationProperties)dbConnection).GetCollationProperties(out text2, out flag5, out flag6, out flag7, out flag8))
							{
								for (int j = 0; j < this.m_dataSource.DataSets.Count; j++)
								{
									this.m_dataSource.DataSets[j].MergeCollationSettings(this.m_processingContext.ErrorContext, this.m_dataSource.Type, text2, flag5, flag6, flag7, flag8);
								}
							}
						}
						catch (Exception ex)
						{
							this.m_processingContext.ErrorContext.Register(ProcessingErrorCode.rsCollationDetectionFailed, Severity.Warning, Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSource, this.m_dataSource.Name, "Collation", new string[] { ex.ToString() });
						}
					}
					if (flag4)
					{
						ReportProcessing.ThreadSet threadSet = new ReportProcessing.ThreadSet(num - 1);
						ReportProcessing.RuntimeDataSetNode runtimeDataSetNode2;
						for (int k = 1; k < num; k++)
						{
							runtimeDataSetNode2 = this.m_runtimeDataSetNodes[k];
							runtimeDataSetNode2.InitProcessingParams(this.m_dataSource, null, transactionInfo);
							this.m_processingContext.JobContext.TryQueueWorkItem(new WaitCallback(runtimeDataSetNode2.ProcessConcurrent), threadSet);
						}
						runtimeDataSetNode2 = this.m_runtimeDataSetNodes[0];
						runtimeDataSetNode2.InitProcessingParams(this.m_dataSource, dbConnection, transactionInfo);
						runtimeDataSetNode2.ProcessConcurrent(null);
						this.m_processingContext.CheckAndThrowIfAborted();
						threadSet.WaitForCompletion();
						if (this.m_processingContext.JobContext != null)
						{
							for (int l = 0; l < num; l++)
							{
								runtimeDataSetNode2 = this.m_runtimeDataSetNodes[l];
								if (runtimeDataSetNode2.DataProcessingDurationMs > this.m_dataProcessingDurationMs)
								{
									this.m_dataProcessingDurationMs = runtimeDataSetNode2.DataProcessingDurationMs;
								}
							}
						}
					}
					else
					{
						for (int m = 0; m < num; m++)
						{
							this.m_processingContext.CheckAndThrowIfAborted();
							ReportProcessing.RuntimeDataSetNode runtimeDataSetNode2 = this.m_runtimeDataSetNodes[m];
							runtimeDataSetNode2.InitProcessingParams(this.m_dataSource, dbConnection, transactionInfo);
							runtimeDataSetNode2.ProcessConcurrent(null);
							this.m_dataProcessingDurationMs += runtimeDataSetNode2.DataProcessingDurationMs;
						}
					}
					if (Global.Tracer.TraceVerbose)
					{
						Global.Tracer.Trace(TraceLevel.Verbose, "Data source '{0}': Processing of all data sets completed.", new object[] { this.m_dataSource.Name });
					}
					this.m_processingContext.CheckAndThrowIfAborted();
					long num3 = 0L;
					this.m_noRows = true;
					for (int n = 0; n < num; n++)
					{
						if (!this.m_runtimeDataSetNodes[n].NoRows)
						{
							this.m_noRows = false;
						}
						num3 += (long)this.m_runtimeDataSetNodes[n].NumRowsRead;
					}
					IJobContext jobContext = this.m_processingContext.JobContext;
					if (jobContext != null)
					{
						object syncRoot = jobContext.SyncRoot;
						lock (syncRoot)
						{
							jobContext.RowCount += num3;
						}
					}
					if (flag2)
					{
						if (!this.m_report.SubReportMergeTransactions || this.m_processingContext.ProcessReportParameters)
						{
							if (Global.Tracer.TraceVerbose)
							{
								Global.Tracer.Trace(TraceLevel.Verbose, "Data source '{0}': Committing transaction.", new object[] { this.m_dataSource.Name });
							}
							try
							{
								transactionInfo.Transaction.Commit();
								goto IL_0735;
							}
							catch (Exception ex2)
							{
								throw new ReportProcessingException(ErrorCode.rsErrorCommitTransaction, ex2, new object[] { this.m_dataSource.Name });
							}
						}
						IDbConnection dbConnection2;
						if (flag3)
						{
							dbConnection2 = null;
						}
						else
						{
							dbConnection2 = dbConnection;
							flag = false;
						}
						if (Global.Tracer.TraceVerbose)
						{
							Global.Tracer.Trace(TraceLevel.Verbose, "Data source '{0}': Storing trans+conn into GlobalDataSourceInfo. CloseConnection = {1}.", new object[]
							{
								this.m_dataSource.Name,
								flag
							});
						}
						this.m_processingContext.GlobalDataSourceInfo.Add(this.m_dataSource, dbConnection2, transactionInfo, null);
						IL_0735:
						flag2 = false;
						transactionInfo = null;
					}
				}
				catch (Exception ex3)
				{
					if (!(ex3 is ProcessingAbortedException) && Global.Tracer.TraceError)
					{
						Global.Tracer.Trace(TraceLevel.Error, "Data source '{0}': An error has occurred. Details: {1}", new object[]
						{
							this.m_dataSource.Name,
							ex3.ToString()
						});
					}
					if (transactionInfo != null)
					{
						transactionInfo.RollbackRequired = true;
					}
					throw ex3;
				}
				finally
				{
					if (flag2 && transactionInfo.RollbackRequired)
					{
						if (Global.Tracer.TraceError)
						{
							Global.Tracer.Trace(TraceLevel.Error, "Data source '{0}': Rolling the transaction back.", new object[] { this.m_dataSource.Name });
						}
						try
						{
							transactionInfo.Transaction.Rollback();
						}
						catch (Exception ex4)
						{
							throw new ReportProcessingException(ErrorCode.rsErrorRollbackTransaction, ex4, new object[] { this.m_dataSource.Name });
						}
					}
					if (flag)
					{
						try
						{
							ReportProcessing.ReportProcessingContext reportProcessingContext2 = this.m_processingContext as ReportProcessing.ReportProcessingContext;
							Global.Tracer.Assert(reportProcessingContext2 != null, "rptContext == null in closeConnection");
							reportProcessingContext2.DataExtensionConnection.CloseConnectionWithoutPool(dbConnection);
						}
						catch (Exception ex5)
						{
							throw new ReportProcessingException(ErrorCode.rsErrorClosingConnection, ex5, new object[] { this.m_dataSource.Name });
						}
					}
				}
			}

			// Token: 0x06008B38 RID: 35640 RVA: 0x00233C18 File Offset: 0x00231E18
			private bool NeedAutoDetectCollation(out int index)
			{
				Global.Tracer.Assert(this.m_dataSource.DataSets != null, "(null != m_dataSource.DataSets)");
				bool flag = false;
				int count = this.m_dataSource.DataSets.Count;
				index = 0;
				if (this.m_processingContext.ProcessReportParameters && this.m_dataSource.DataSets[this.m_dataSetIndex].NeedAutoDetectCollation())
				{
					flag = true;
					index = this.m_dataSetIndex;
				}
				else
				{
					while (index < count && !flag)
					{
						Microsoft.ReportingServices.ReportProcessing.DataSet dataSet = this.m_dataSource.DataSets[index];
						if (!dataSet.UsedOnlyInParameters && dataSet.NeedAutoDetectCollation())
						{
							flag = true;
						}
						else
						{
							index++;
						}
					}
				}
				return flag;
			}

			// Token: 0x040049A7 RID: 18855
			private bool m_mergeTran;

			// Token: 0x040049A8 RID: 18856
			private bool m_prefetchDataOnly;

			// Token: 0x040049A9 RID: 18857
			private LegacyReportParameterDataSetCache m_cache;

			// Token: 0x02000D45 RID: 3397
			private enum ConnectionSecurity
			{
				// Token: 0x040050F3 RID: 20723
				UseIntegratedSecurity,
				// Token: 0x040050F4 RID: 20724
				ImpersonateWindowsUser,
				// Token: 0x040050F5 RID: 20725
				UseDataSourceCredentials,
				// Token: 0x040050F6 RID: 20726
				None
			}
		}

		// Token: 0x02000C77 RID: 3191
		internal sealed class RuntimeDataSetNodeList : ArrayList
		{
			// Token: 0x17002AF9 RID: 11001
			internal ReportProcessing.RuntimeDataSetNode this[int index]
			{
				get
				{
					return (ReportProcessing.RuntimeDataSetNode)base[index];
				}
			}
		}

		// Token: 0x02000C78 RID: 3192
		internal abstract class RuntimeDataSetNode : ReportProcessing.IFilterOwner
		{
			// Token: 0x06008B3B RID: 35643 RVA: 0x00233CDA File Offset: 0x00231EDA
			internal RuntimeDataSetNode(Microsoft.ReportingServices.ReportProcessing.Report report, Microsoft.ReportingServices.ReportProcessing.DataSet dataSet, ReportProcessing.ProcessingContext processingContext)
			{
				this.m_report = report;
				this.m_dataSet = dataSet;
				this.m_processingContext = processingContext.CloneContext(processingContext);
			}

			// Token: 0x17002AFA RID: 11002
			// (get) Token: 0x06008B3C RID: 35644 RVA: 0x00233CFD File Offset: 0x00231EFD
			internal Microsoft.ReportingServices.ReportProcessing.DataSet DataSet
			{
				get
				{
					return this.m_dataSet;
				}
			}

			// Token: 0x17002AFB RID: 11003
			// (get) Token: 0x06008B3D RID: 35645 RVA: 0x00233D05 File Offset: 0x00231F05
			internal bool NoRows
			{
				get
				{
					return this.m_dataRowsRead <= 0;
				}
			}

			// Token: 0x17002AFC RID: 11004
			// (get) Token: 0x06008B3E RID: 35646 RVA: 0x00233D13 File Offset: 0x00231F13
			internal int NumRowsRead
			{
				get
				{
					return this.m_dataRowsRead;
				}
			}

			// Token: 0x17002AFD RID: 11005
			// (get) Token: 0x06008B3F RID: 35647 RVA: 0x00233D1B File Offset: 0x00231F1B
			internal long DataProcessingDurationMs
			{
				get
				{
					return this.m_dataProcessingDurationMs;
				}
			}

			// Token: 0x17002AFE RID: 11006
			// (get) Token: 0x06008B40 RID: 35648 RVA: 0x00233D23 File Offset: 0x00231F23
			internal FieldsImpl Fields
			{
				get
				{
					if (this.m_processingContext != null && this.m_processingContext.ReportObjectModel != null)
					{
						return this.m_processingContext.ReportObjectModel.FieldsImpl;
					}
					return null;
				}
			}

			// Token: 0x17002AFF RID: 11007
			// (get) Token: 0x06008B41 RID: 35649 RVA: 0x00233D4C File Offset: 0x00231F4C
			internal ReportProcessing.ProcessingContext ProcessingContext
			{
				get
				{
					return this.m_processingContext;
				}
			}

			// Token: 0x06008B42 RID: 35650 RVA: 0x00233D54 File Offset: 0x00231F54
			internal void Abort()
			{
				IDbCommand command = this.m_command;
				if (command != null)
				{
					if (Global.Tracer.TraceVerbose)
					{
						Global.Tracer.Trace(TraceLevel.Verbose, "Data set '{0}': Cancelling command.", new object[] { this.m_dataSet.Name });
					}
					command.Cancel();
				}
			}

			// Token: 0x06008B43 RID: 35651 RVA: 0x00233DA1 File Offset: 0x00231FA1
			internal void Cleanup()
			{
				if (this.m_processingContext.ReportRuntime != null)
				{
					this.m_processingContext.ReportRuntime.Close();
				}
			}

			// Token: 0x06008B44 RID: 35652 RVA: 0x00233DC0 File Offset: 0x00231FC0
			internal void InitProcessingParams(Microsoft.ReportingServices.ReportProcessing.DataSource dataSource, IDbConnection conn, ReportProcessing.TransactionInfo transInfo)
			{
				this.m_dataSource = dataSource;
				this.m_dataSourceConnection = conn;
				this.m_transInfo = transInfo;
			}

			// Token: 0x06008B45 RID: 35653 RVA: 0x00233DD8 File Offset: 0x00231FD8
			internal void ProcessConcurrent(object threadSet)
			{
				CultureInfo cultureInfo = null;
				Global.Tracer.Assert(this.m_dataSet.Name != null, "The name of a data set cannot be null.");
				try
				{
					if (Global.Tracer.TraceVerbose)
					{
						Global.Tracer.Trace(TraceLevel.Verbose, "Thread has started processing data set '{0}'", new object[] { this.m_dataSet.Name });
					}
					if (this.m_processingContext.ThreadCulture != null)
					{
						cultureInfo = Thread.CurrentThread.CurrentCulture;
						Thread.CurrentThread.CurrentCulture = this.m_processingContext.ThreadCulture;
					}
					if (DataSetValidator.LOCALE_SYSTEM_DEFAULT == this.m_dataSet.LCID)
					{
						this.m_dataSet.LCID = DataSetValidator.LCIDfromRDLCollation(this.m_dataSet.Collation);
					}
					this.m_processingContext.CompareInfo = new CultureInfo((int)this.m_dataSet.LCID, false).CompareInfo;
					this.m_processingContext.ClrCompareOptions = this.m_dataSet.GetCLRCompareOptions();
					this.Process();
				}
				catch (ProcessingAbortedException)
				{
					if (Global.Tracer.TraceWarning)
					{
						Global.Tracer.Trace(TraceLevel.Warning, "Data set '{0}': Report processing has been aborted.", new object[] { this.m_dataSet.Name });
					}
				}
				catch (Exception ex)
				{
					if (Global.Tracer.TraceError)
					{
						Global.Tracer.Trace(TraceLevel.Error, "An exception has occurred in data source '{0}'. Details: {1}", new object[]
						{
							this.m_dataSet.Name,
							ex.ToString()
						});
					}
					if (this.m_processingContext.AbortInfo != null)
					{
						this.m_processingContext.AbortInfo.SetError(this.m_processingContext.DataSetUniqueName, ex);
					}
				}
				finally
				{
					if (Global.Tracer.TraceVerbose)
					{
						Global.Tracer.Trace(TraceLevel.Verbose, "Processing of data set '{0}' completed.", new object[] { this.m_dataSet.Name });
					}
					if (cultureInfo != null)
					{
						Thread.CurrentThread.CurrentCulture = cultureInfo;
					}
					ReportProcessing.ThreadSet threadSet2 = threadSet as ReportProcessing.ThreadSet;
					if (threadSet2 != null)
					{
						threadSet2.ThreadCompleted();
					}
				}
			}

			// Token: 0x06008B46 RID: 35654 RVA: 0x00234008 File Offset: 0x00232208
			protected void InitRuntime(bool processReport)
			{
				Global.Tracer.Assert(this.m_processingContext.ReportObjectModel != null && this.m_processingContext.ReportRuntime != null);
				if (this.m_processingContext.ReportRuntime.ReportExprHost != null)
				{
					this.m_dataSet.SetExprHost(this.m_processingContext.ReportRuntime.ReportExprHost, this.m_processingContext.ReportObjectModel);
				}
				DataFieldList fields = this.m_dataSet.Fields;
				int num = ((fields == null) ? 0 : fields.Count);
				this.m_processingContext.ReportObjectModel.FieldsImpl = new FieldsImpl(num, processReport && this.m_dataSet.HasDetailUserSortFilter);
				for (int i = 0; i < num; i++)
				{
					Microsoft.ReportingServices.ReportProcessing.Field field = fields[i];
					if (this.m_dataSet.ExprHost != null)
					{
						field.SetExprHost(this.m_dataSet.ExprHost, this.m_processingContext.ReportObjectModel);
					}
					this.m_processingContext.ReportObjectModel.FieldsImpl.Add(field.Name, null);
				}
				if (processReport && this.m_dataSet.HasDetailUserSortFilter)
				{
					this.m_processingContext.ReportObjectModel.FieldsImpl.AddRowIndexField();
				}
				if (this.m_dataSet.Filters != null && this.m_dataSet.ExprHost != null)
				{
					int count = this.m_dataSet.Filters.Count;
					for (int j = 0; j < count; j++)
					{
						this.m_dataSet.Filters[j].SetExprHost(this.m_dataSet.ExprHost.FilterHostsRemotable, this.m_processingContext.ReportObjectModel);
					}
				}
				if (this.m_processingContext.ReportRuntime.ReportExprHost != null)
				{
					this.RuntimeInitializeReportItemObjs();
				}
				this.RegisterAggregates();
			}

			// Token: 0x06008B47 RID: 35655
			protected abstract void Process();

			// Token: 0x06008B48 RID: 35656
			protected abstract void FirstPassProcessDetailRow(Filters filters);

			// Token: 0x06008B49 RID: 35657
			protected abstract bool FirstPassGetNextDetailRow();

			// Token: 0x06008B4A RID: 35658
			protected abstract void FirstPassInit();

			// Token: 0x06008B4B RID: 35659
			protected abstract void NextNonAggregateRow();

			// Token: 0x06008B4C RID: 35660 RVA: 0x002341C0 File Offset: 0x002323C0
			internal virtual void RuntimeInitializeReportItemObjs()
			{
			}

			// Token: 0x06008B4D RID: 35661 RVA: 0x002341C2 File Offset: 0x002323C2
			internal virtual void EraseDataChunk()
			{
			}

			// Token: 0x06008B4E RID: 35662 RVA: 0x002341C4 File Offset: 0x002323C4
			protected virtual void RegisterAggregates()
			{
			}

			// Token: 0x06008B4F RID: 35663 RVA: 0x002341C6 File Offset: 0x002323C6
			protected virtual void FirstPassCleanup(bool flushData)
			{
			}

			// Token: 0x06008B50 RID: 35664 RVA: 0x002341C8 File Offset: 0x002323C8
			void ReportProcessing.IFilterOwner.PostFilterNextRow()
			{
				this.NextNonAggregateRow();
			}

			// Token: 0x06008B51 RID: 35665 RVA: 0x002341D0 File Offset: 0x002323D0
			protected void FirstPassProcess(ref bool closeConnWhenFinish)
			{
				if (this.m_dataSourceConnection == null && !this.m_processingContext.SnapshotProcessing && !this.m_processingContext.ProcessWithCachedData)
				{
					closeConnWhenFinish = true;
				}
				this.FirstPassInit();
				this.m_processingContext.CheckAndThrowIfAborted();
				this.FirstPass();
				this.m_processingContext.CheckAndThrowIfAborted();
				if (closeConnWhenFinish)
				{
					Global.Tracer.Assert(this.m_dataSourceConnection != null, "(null != m_dataSourceConnection)");
					try
					{
						this.m_processingContext.DataExtensionConnection.CloseConnectionWithoutPool(this.m_dataSourceConnection);
					}
					catch (Exception ex)
					{
						throw new ReportProcessingException(ErrorCode.rsErrorClosingConnection, ex, new object[] { this.m_dataSource.Name });
					}
					this.m_dataSourceConnection = null;
				}
			}

			// Token: 0x06008B52 RID: 35666 RVA: 0x00234290 File Offset: 0x00232490
			private void FirstPass()
			{
				Filters filters = null;
				if (this.m_dataSet.Filters != null)
				{
					filters = new Filters(Filters.FilterTypes.DataSetFilter, this, this.m_dataSet.Filters, this.m_dataSet.ObjectType, this.m_dataSet.Name, this.m_processingContext);
				}
				bool flag = false;
				try
				{
					this.m_dataRowsRead = 0;
					while (this.FirstPassGetNextDetailRow())
					{
						this.FirstPassProcessDetailRow(filters);
					}
					this.m_dataSet.RecordSetSize = this.m_dataRowsRead;
					flag = true;
				}
				finally
				{
					if (this.m_dataReader != null)
					{
						((IDisposable)this.m_dataReader).Dispose();
						this.m_dataReader = null;
					}
					this.CloseCommand();
					this.FirstPassCleanup(flag);
				}
				if (filters != null)
				{
					filters.FinishReadingRows();
				}
			}

			// Token: 0x06008B53 RID: 35667 RVA: 0x0023434C File Offset: 0x0023254C
			private void CloseCommand()
			{
				if (this.m_command != null)
				{
					IDisposable command = this.m_command;
					this.m_command = null;
					command.Dispose();
				}
			}

			// Token: 0x06008B54 RID: 35668 RVA: 0x00234368 File Offset: 0x00232568
			protected bool GetNextDetailRow()
			{
				bool flag = false;
				bool flag2 = this.m_dataRowsRead == 0;
				Microsoft.ReportingServices.Diagnostics.Timer timer = null;
				if (this.m_processingContext.JobContext != null)
				{
					timer = new Microsoft.ReportingServices.Diagnostics.Timer();
					timer.StartTimer();
				}
				FieldsImpl fieldsImpl = null;
				if (this.m_dataReader != null && this.m_dataReader.GetNextRow())
				{
					fieldsImpl = this.m_processingContext.ReportObjectModel.FieldsImpl;
					if (flag2)
					{
						this.m_fieldAliasPropertyNames = new Hashtable[fieldsImpl.Count];
						this.m_referencedAliasPropertyNames = new Hashtable[fieldsImpl.Count];
					}
					fieldsImpl.NewRow();
					if (fieldsImpl.ReaderExtensionsSupported && !this.m_dataSet.InterpretSubtotalsAsDetails)
					{
						fieldsImpl.IsAggregateRow = this.m_dataReader.IsAggregateRow;
						fieldsImpl.AggregationFieldCount = this.m_dataReader.AggregationFieldCount;
						if (!fieldsImpl.IsAggregateRow)
						{
							fieldsImpl.AggregationFieldCountForDetailRow = fieldsImpl.AggregationFieldCount;
						}
					}
					bool flag3 = false;
					for (int i = 0; i < fieldsImpl.Count; i++)
					{
						Microsoft.ReportingServices.ReportProcessing.Field field = this.m_dataSet.Fields[i];
						if (field.IsCalculatedField)
						{
							CalculatedFieldWrapperImpl calculatedFieldWrapperImpl = new CalculatedFieldWrapperImpl(field, this.m_processingContext.ReportRuntime);
							if (this.m_dataSet.InterpretSubtotalsAsDetails)
							{
								fieldsImpl[i] = new FieldImpl(calculatedFieldWrapperImpl, true, field);
							}
							else
							{
								fieldsImpl[i] = new FieldImpl(calculatedFieldWrapperImpl, !fieldsImpl.ReaderExtensionsSupported, field);
							}
							flag3 = true;
						}
						else
						{
							Global.Tracer.Assert(!flag3, "(!inCalculatedFields)");
							try
							{
								if (flag2 || !fieldsImpl.IsFieldMissing(i))
								{
									if (this.m_dataSet.InterpretSubtotalsAsDetails)
									{
										fieldsImpl[i] = new FieldImpl(this.m_dataReader.GetColumn(i), true, field);
									}
									else
									{
										fieldsImpl[i] = new FieldImpl(this.m_dataReader.GetColumn(i), !fieldsImpl.ReaderExtensionsSupported || this.m_dataReader.IsAggregationField(i), field);
									}
									if (fieldsImpl.ReaderFieldProperties)
									{
										int num;
										if (this.m_fieldAliasPropertyNames[i] != null)
										{
											num = this.m_fieldAliasPropertyNames[i].Count;
										}
										else
										{
											num = this.m_dataReader.GetPropertyCount(i);
											this.m_fieldAliasPropertyNames[i] = new Hashtable(num);
											this.m_referencedAliasPropertyNames[i] = new Hashtable(num);
											this.m_foundExtendedProperties = true;
										}
										for (int j = 0; j < num; j++)
										{
											string text;
											if (flag2)
											{
												text = this.m_dataReader.GetPropertyName(i, j);
												this.m_fieldAliasPropertyNames[i].Add(j, text);
											}
											else
											{
												Global.Tracer.Assert(this.m_fieldAliasPropertyNames[i].ContainsKey(j), "(m_fieldAliasPropertyNames[i].ContainsKey(j))");
												text = this.m_fieldAliasPropertyNames[i][j] as string;
											}
											if (this.m_processingContext.CacheDataCallback != null || this.m_dataSet.DynamicFieldReferences || field.DynamicPropertyReferences || (field.ReferencedProperties != null && field.ReferencedProperties.ContainsKey(text)))
											{
												if (flag2)
												{
													this.m_referencedAliasPropertyNames[i].Add(j, text);
												}
												object propertyValue = this.m_dataReader.GetPropertyValue(i, j);
												fieldsImpl[i].SetProperty(text, propertyValue);
											}
										}
									}
								}
								else
								{
									fieldsImpl[i] = new FieldImpl(DataFieldStatus.IsMissing, null, field);
								}
							}
							catch (ReportProcessingException_FieldError reportProcessingException_FieldError)
							{
								bool flag4 = false;
								if (this.m_dataRowsRead == 0 && DataFieldStatus.UnSupportedDataType != reportProcessingException_FieldError.Status && DataFieldStatus.Overflow != reportProcessingException_FieldError.Status)
								{
									fieldsImpl.SetFieldIsMissing(i);
									fieldsImpl[i] = new FieldImpl(DataFieldStatus.IsMissing, reportProcessingException_FieldError.Message, field);
									flag4 = true;
									this.m_processingContext.ErrorContext.Register(ProcessingErrorCode.rsMissingFieldInDataSet, Severity.Warning, Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSet, this.m_dataSet.Name, "Field", new string[] { field.Name });
								}
								if (!flag4)
								{
									fieldsImpl[i] = new FieldImpl(reportProcessingException_FieldError.Status, reportProcessingException_FieldError.Message, field);
								}
								if (!fieldsImpl.IsFieldErrorRegistered(i))
								{
									fieldsImpl.SetFieldErrorRegistered(i);
									if (DataFieldStatus.UnSupportedDataType == reportProcessingException_FieldError.Status)
									{
										this.m_processingContext.ErrorContext.Register(ProcessingErrorCode.rsDataSetFieldTypeNotSupported, Severity.Warning, Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSet, this.m_dataSet.Name, "Field", new string[] { field.Name });
									}
									else
									{
										this.m_processingContext.ErrorContext.Register(ProcessingErrorCode.rsErrorReadingDataSetField, Severity.Warning, Microsoft.ReportingServices.ReportProcessing.ObjectType.DataSet, this.m_dataSet.Name, "Field", new string[] { field.Name, reportProcessingException_FieldError.Message });
									}
								}
							}
						}
					}
					this.m_dataRowsRead++;
					if (fieldsImpl.AddRowIndex)
					{
						fieldsImpl.SetRowIndex(this.m_dataRowsRead);
					}
					flag = true;
				}
				if (this.m_processingContext.JobContext != null)
				{
					this.m_dataProcessingDurationMs += timer.ElapsedTimeMs();
				}
				return flag;
			}

			// Token: 0x06008B55 RID: 35669 RVA: 0x0023486C File Offset: 0x00232A6C
			protected virtual bool RunDataSetQuery()
			{
				bool flag = false;
				if (this.m_dataSet.Query == null)
				{
					return flag;
				}
				ParameterValueList parameters = this.m_dataSet.Query.Parameters;
				object[] array = new object[(parameters == null) ? 0 : parameters.Count];
				for (int i = 0; i < array.Length; i++)
				{
					ParameterValue parameterValue = parameters[i];
					this.m_processingContext.CheckAndThrowIfAborted();
					array[i] = this.m_processingContext.ReportRuntime.EvaluateQueryParamValue(parameterValue.Value, (this.m_dataSet.ExprHost != null) ? this.m_dataSet.ExprHost.QueryParametersHost : null, Microsoft.ReportingServices.ReportProcessing.ObjectType.QueryParameter, parameterValue.Name);
				}
				this.m_processingContext.CheckAndThrowIfAborted();
				Microsoft.ReportingServices.Diagnostics.Timer timer = null;
				if (this.m_processingContext.JobContext != null)
				{
					timer = new Microsoft.ReportingServices.Diagnostics.Timer();
					timer.StartTimer();
				}
				IDataReader dataReader = null;
				IDbCommand dbCommand = null;
				try
				{
					if (this.m_dataSourceConnection == null)
					{
						ReportProcessing.ReportProcessingContext reportProcessingContext = (ReportProcessing.ReportProcessingContext)this.m_processingContext;
						Microsoft.ReportingServices.DataExtensions.DataSourceInfo dataSourceInfo;
						string text = this.m_dataSource.ResolveConnectionString(reportProcessingContext, out dataSourceInfo);
						this.m_dataSourceConnection = reportProcessingContext.DataExtensionConnection.OpenDataSourceExtensionConnection(this.m_dataSource, text, dataSourceInfo, null);
					}
					try
					{
						dbCommand = this.m_dataSourceConnection.CreateCommand();
					}
					catch (Exception ex)
					{
						throw new ReportProcessingException(ErrorCode.rsErrorCreatingCommand, ex, new object[] { this.m_dataSource.Name });
					}
					for (int j = 0; j < array.Length; j++)
					{
						IDataParameter dataParameter;
						try
						{
							dataParameter = dbCommand.CreateParameter();
						}
						catch (Exception ex2)
						{
							throw new ReportProcessingException(ErrorCode.rsErrorCreatingQueryParameter, ex2, new object[] { this.m_dataSet.Name });
						}
						dataParameter.ParameterName = parameters[j].Name;
						bool flag2 = dataParameter is IDataMultiValueParameter && array[j] is ICollection;
						object obj = array[j];
						if (obj == null)
						{
							obj = DBNull.Value;
						}
						if (!(dataParameter is IDataMultiValueParameter) && array[j] is ICollection)
						{
							throw new ReportProcessingException(ErrorCode.rsErrorAddingMultiValueQueryParameter, null, new object[]
							{
								this.m_dataSet.Name,
								dataParameter.ParameterName
							});
						}
						if (flag2)
						{
							int count = ((ICollection)obj).Count;
							if (1 == count)
							{
								try
								{
									Global.Tracer.Assert(obj is object[], "(paramValue is object[])");
									dataParameter.Value = (obj as object[])[0];
									goto IL_02B9;
								}
								catch (Exception ex3)
								{
									throw new ReportProcessingException(ErrorCode.rsErrorAddingQueryParameter, ex3, new object[] { this.m_dataSource.Name });
								}
							}
							object[] array2 = new object[count];
							((ICollection)obj).CopyTo(array2, 0);
							((IDataMultiValueParameter)dataParameter).Values = array2;
						}
						else
						{
							try
							{
								dataParameter.Value = obj;
							}
							catch (Exception ex4)
							{
								throw new ReportProcessingException(ErrorCode.rsErrorAddingQueryParameter, ex4, new object[] { this.m_dataSource.Name });
							}
						}
						IL_02B9:
						try
						{
							dbCommand.Parameters.Add(dataParameter);
						}
						catch (Exception ex5)
						{
							throw new ReportProcessingException(ErrorCode.rsErrorAddingQueryParameter, ex5, new object[] { this.m_dataSource.Name });
						}
					}
					this.m_processingContext.CheckAndThrowIfAborted();
					try
					{
						if (this.m_dataSet.Query.CommandText != null)
						{
							StringResult stringResult = this.m_processingContext.ReportRuntime.EvaluateCommandText(this.m_dataSet);
							if (stringResult.ErrorOccurred)
							{
								throw new ReportProcessingException(ErrorCode.rsQueryCommandTextProcessingError, new object[] { this.m_dataSet.Name });
							}
							dbCommand.CommandText = stringResult.Value;
							this.m_dataSet.Query.CommandTextValue = stringResult.Value;
						}
					}
					catch (Exception ex6)
					{
						throw new ReportProcessingException(ErrorCode.rsErrorSettingCommandText, ex6, new object[] { this.m_dataSet.Name });
					}
					try
					{
						dbCommand.CommandType = (CommandType)this.m_dataSet.Query.CommandType;
					}
					catch (Exception ex7)
					{
						throw new ReportProcessingException(ErrorCode.rsErrorSettingCommandType, ex7, new object[] { this.m_dataSet.Name });
					}
					if (this.m_transInfo != null)
					{
						try
						{
							dbCommand.Transaction = this.m_transInfo.Transaction;
						}
						catch (Exception ex8)
						{
							throw new ReportProcessingException(ErrorCode.rsErrorSettingTransaction, ex8, new object[] { this.m_dataSet.Name });
						}
					}
					this.m_processingContext.CheckAndThrowIfAborted();
					try
					{
						if (this.m_dataSet.Query.TimeOut == 0 && dbCommand is CommandWrapper && ((CommandWrapper)dbCommand).UnderlyingCommand is SqlCommand)
						{
							dbCommand.CommandTimeout = 2147483646;
						}
						else
						{
							dbCommand.CommandTimeout = this.m_dataSet.Query.TimeOut;
						}
					}
					catch (Exception ex9)
					{
						throw new ReportProcessingException(ErrorCode.rsErrorSettingQueryTimeout, ex9, new object[] { this.m_dataSet.Name });
					}
					if (dbCommand is IDbCommandRewriter)
					{
						this.m_dataSet.Query.RewrittenCommandText = ((IDbCommandRewriter)dbCommand).RewrittenCommandText;
						this.m_processingContext.DrillthroughInfo.AddRewrittenCommand(this.m_dataSet.ID, this.m_dataSet.Query.RewrittenCommandText);
					}
					this.m_command = dbCommand;
					IJobContext jobContext = this.m_processingContext.JobContext;
					try
					{
						if (jobContext != null)
						{
							jobContext.AddCommand(this.m_command);
						}
						try
						{
							dataReader = this.m_command.ExecuteReader(CommandBehavior.SingleResult);
						}
						catch (Exception ex10)
						{
							throw new ReportProcessingException(ErrorCode.rsErrorExecutingCommand, ex10, new object[] { this.m_dataSet.Name });
						}
					}
					finally
					{
						if (jobContext != null)
						{
							jobContext.RemoveCommand(this.m_command);
						}
					}
					if (dataReader == null)
					{
						if (Global.Tracer.TraceError)
						{
							Global.Tracer.Trace(TraceLevel.Error, "The source data reader is null. Cannot read results.");
						}
						throw new ReportProcessingException(ErrorCode.rsErrorCreatingDataReader, new object[] { this.m_dataSet.Name });
					}
					flag = dataReader is IDataReaderExtension;
					bool flag3 = dataReader is IDataReaderFieldProperties;
					if (dataReader.FieldCount > 0)
					{
						this.m_dataSet.CheckNonCalculatedFieldCount();
						DataFieldList fields = this.m_dataSet.Fields;
						int num = ((fields == null) ? 0 : this.m_dataSet.NonCalculatedFieldCount);
						string[] array3 = new string[num];
						string[] array4 = new string[num];
						for (int k = 0; k < num; k++)
						{
							Microsoft.ReportingServices.ReportProcessing.Field field = fields[k];
							array3[k] = field.DataField;
							array4[k] = field.Name;
						}
						this.m_dataReader = new ReportProcessing.ProcessingDataReader(this.m_dataSet.Name, dataReader, array4, array3);
					}
					this.m_processingContext.ReportObjectModel.FieldsImpl.ReaderExtensionsSupported = flag;
					this.m_processingContext.ReportObjectModel.FieldsImpl.ReaderFieldProperties = flag3;
				}
				catch (Exception ex11)
				{
					if (AsynchronousExceptionDetection.IsStoppingException(ex11))
					{
						throw;
					}
					if (dataReader != null)
					{
						dataReader.Dispose();
						dataReader = null;
					}
					if (dbCommand != null)
					{
						dbCommand.Dispose();
						dbCommand = null;
					}
					throw;
				}
				finally
				{
					if (this.m_processingContext.JobContext != null)
					{
						this.m_dataProcessingDurationMs += timer.ElapsedTimeMs();
					}
				}
				return flag;
			}

			// Token: 0x040049AA RID: 18858
			protected Microsoft.ReportingServices.ReportProcessing.DataSource m_dataSource;

			// Token: 0x040049AB RID: 18859
			protected IDbConnection m_dataSourceConnection;

			// Token: 0x040049AC RID: 18860
			protected ReportProcessing.TransactionInfo m_transInfo;

			// Token: 0x040049AD RID: 18861
			protected Microsoft.ReportingServices.ReportProcessing.Report m_report;

			// Token: 0x040049AE RID: 18862
			protected Microsoft.ReportingServices.ReportProcessing.DataSet m_dataSet;

			// Token: 0x040049AF RID: 18863
			protected IDbCommand m_command;

			// Token: 0x040049B0 RID: 18864
			protected ReportProcessing.ProcessingDataReader m_dataReader;

			// Token: 0x040049B1 RID: 18865
			protected ReportProcessing.ProcessingContext m_processingContext;

			// Token: 0x040049B2 RID: 18866
			protected int m_dataRowsRead;

			// Token: 0x040049B3 RID: 18867
			protected long m_dataProcessingDurationMs;

			// Token: 0x040049B4 RID: 18868
			private Hashtable[] m_fieldAliasPropertyNames;

			// Token: 0x040049B5 RID: 18869
			protected Hashtable[] m_referencedAliasPropertyNames;

			// Token: 0x040049B6 RID: 18870
			protected bool m_foundExtendedProperties;

			// Token: 0x040049B7 RID: 18871
			protected bool m_hasSortFilterInfo;
		}

		// Token: 0x02000C79 RID: 3193
		private class RuntimeReportDataSetNode : ReportProcessing.RuntimeDataSetNode, ReportProcessing.IScope, ReportProcessing.IHierarchyObj
		{
			// Token: 0x06008B56 RID: 35670 RVA: 0x0023507C File Offset: 0x0023327C
			internal RuntimeReportDataSetNode(Microsoft.ReportingServices.ReportProcessing.Report report, Microsoft.ReportingServices.ReportProcessing.DataSet dataSet, ReportProcessing.ProcessingContext processingContext)
				: base(report, dataSet, processingContext)
			{
				this.m_hasSortFilterInfo = this.m_processingContext.PopulateRuntimeSortFilterEventInfo(this.m_dataSet);
				UserSortFilterContext userSortFilterContext = this.m_processingContext.UserSortFilterContext;
				if (-1 == userSortFilterContext.DataSetID)
				{
					userSortFilterContext.DataSetID = this.m_dataSet.ID;
				}
				if (this.m_processingContext.IsSortFilterTarget(this.m_dataSet.IsSortFilterTarget, userSortFilterContext.CurrentContainingScope, this, ref this.m_userSortTargetInfo) && this.m_userSortTargetInfo.TargetForNonDetailSort)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x17002B00 RID: 11008
			// (get) Token: 0x06008B57 RID: 35671 RVA: 0x0023510C File Offset: 0x0023330C
			internal bool HasSortFilterInfo
			{
				get
				{
					return this.m_hasSortFilterInfo;
				}
			}

			// Token: 0x17002B01 RID: 11009
			// (get) Token: 0x06008B58 RID: 35672 RVA: 0x00235114 File Offset: 0x00233314
			bool ReportProcessing.IScope.TargetForNonDetailSort
			{
				get
				{
					return this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.TargetForNonDetailSort;
				}
			}

			// Token: 0x17002B02 RID: 11010
			// (get) Token: 0x06008B59 RID: 35673 RVA: 0x0023512C File Offset: 0x0023332C
			int[] ReportProcessing.IScope.SortFilterExpressionScopeInfoIndices
			{
				get
				{
					if (this.m_sortFilterExpressionScopeInfoIndices == null)
					{
						this.m_sortFilterExpressionScopeInfoIndices = new int[this.m_processingContext.RuntimeSortFilterInfo.Count];
						for (int i = 0; i < this.m_processingContext.RuntimeSortFilterInfo.Count; i++)
						{
							this.m_sortFilterExpressionScopeInfoIndices[i] = -1;
						}
					}
					return this.m_sortFilterExpressionScopeInfoIndices;
				}
			}

			// Token: 0x06008B5A RID: 35674 RVA: 0x00235186 File Offset: 0x00233386
			bool ReportProcessing.IScope.IsTargetForSort(int index, bool detailSort)
			{
				return this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.IsTargetForSort(index, detailSort);
			}

			// Token: 0x06008B5B RID: 35675 RVA: 0x0023519F File Offset: 0x0023339F
			bool ReportProcessing.IScope.InScope(string scope)
			{
				return ReportProcessing.CompareWithInvariantCulture(this.m_dataSet.Name, scope, false) == 0;
			}

			// Token: 0x06008B5C RID: 35676 RVA: 0x002351B8 File Offset: 0x002333B8
			void ReportProcessing.IScope.ReadRow(ReportProcessing.DataActions dataAction)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x06008B5D RID: 35677 RVA: 0x002351C5 File Offset: 0x002333C5
			ReportProcessing.IScope ReportProcessing.IScope.GetOuterScope(bool includeSubReportContainingScope)
			{
				if (includeSubReportContainingScope)
				{
					return this.m_processingContext.UserSortFilterContext.CurrentContainingScope;
				}
				return null;
			}

			// Token: 0x06008B5E RID: 35678 RVA: 0x002351DC File Offset: 0x002333DC
			string ReportProcessing.IScope.GetScopeName()
			{
				return this.m_dataSet.Name;
			}

			// Token: 0x06008B5F RID: 35679 RVA: 0x002351E9 File Offset: 0x002333E9
			int ReportProcessing.IScope.RecursiveLevel(string scope)
			{
				return 0;
			}

			// Token: 0x06008B60 RID: 35680 RVA: 0x002351EC File Offset: 0x002333EC
			bool ReportProcessing.IScope.TargetScopeMatched(int index, bool detailSort)
			{
				if (this.m_processingContext.UserSortFilterContext.CurrentContainingScope != null)
				{
					return this.m_processingContext.UserSortFilterContext.CurrentContainingScope.TargetScopeMatched(index, detailSort);
				}
				return this.m_processingContext.RuntimeSortFilterInfo != null;
			}

			// Token: 0x06008B61 RID: 35681 RVA: 0x00235228 File Offset: 0x00233428
			void ReportProcessing.IScope.GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				ReportProcessing.IScope currentContainingScope = this.m_processingContext.UserSortFilterContext.CurrentContainingScope;
				if (this != targetScopeObj && currentContainingScope != null)
				{
					Global.Tracer.Assert(targetScopeObj == null, "(null == targetScopeObj)");
					currentContainingScope.GetScopeValues(null, scopeValues, ref index);
				}
			}

			// Token: 0x06008B62 RID: 35682 RVA: 0x00235269 File Offset: 0x00233469
			void ReportProcessing.IScope.GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
			}

			// Token: 0x17002B03 RID: 11011
			// (get) Token: 0x06008B63 RID: 35683 RVA: 0x0023526B File Offset: 0x0023346B
			ReportProcessing.IHierarchyObj ReportProcessing.IHierarchyObj.HierarchyRoot
			{
				get
				{
					return this;
				}
			}

			// Token: 0x17002B04 RID: 11012
			// (get) Token: 0x06008B64 RID: 35684 RVA: 0x0023526E File Offset: 0x0023346E
			ReportProcessing.ProcessingContext ReportProcessing.IHierarchyObj.ProcessingContext
			{
				get
				{
					return this.m_processingContext;
				}
			}

			// Token: 0x17002B05 RID: 11013
			// (get) Token: 0x06008B65 RID: 35685 RVA: 0x00235276 File Offset: 0x00233476
			// (set) Token: 0x06008B66 RID: 35686 RVA: 0x0023528D File Offset: 0x0023348D
			ReportProcessing.BTreeNode ReportProcessing.IHierarchyObj.SortTree
			{
				get
				{
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortTree;
					}
					return null;
				}
				set
				{
					if (this.m_userSortTargetInfo != null)
					{
						this.m_userSortTargetInfo.SortTree = value;
						return;
					}
					Global.Tracer.Assert(false);
				}
			}

			// Token: 0x17002B06 RID: 11014
			// (get) Token: 0x06008B67 RID: 35687 RVA: 0x002352AF File Offset: 0x002334AF
			int ReportProcessing.IHierarchyObj.ExpressionIndex
			{
				get
				{
					return 0;
				}
			}

			// Token: 0x17002B07 RID: 11015
			// (get) Token: 0x06008B68 RID: 35688 RVA: 0x002352B2 File Offset: 0x002334B2
			IntList ReportProcessing.IHierarchyObj.SortFilterInfoIndices
			{
				get
				{
					if (this.m_userSortTargetInfo != null)
					{
						return this.m_userSortTargetInfo.SortFilterInfoIndices;
					}
					return null;
				}
			}

			// Token: 0x17002B08 RID: 11016
			// (get) Token: 0x06008B69 RID: 35689 RVA: 0x002352C9 File Offset: 0x002334C9
			bool ReportProcessing.IHierarchyObj.IsDetail
			{
				get
				{
					return false;
				}
			}

			// Token: 0x06008B6A RID: 35690 RVA: 0x002352CC File Offset: 0x002334CC
			ReportProcessing.IHierarchyObj ReportProcessing.IHierarchyObj.CreateHierarchyObj()
			{
				return new ReportProcessing.RuntimeSortHierarchyObj(this);
			}

			// Token: 0x06008B6B RID: 35691 RVA: 0x002352D4 File Offset: 0x002334D4
			ProcessingMessageList ReportProcessing.IHierarchyObj.RegisterComparisonError(string propertyName)
			{
				return this.m_processingContext.RegisterComparisonErrorForSortFilterEvent(propertyName);
			}

			// Token: 0x06008B6C RID: 35692 RVA: 0x002352E2 File Offset: 0x002334E2
			void ReportProcessing.IHierarchyObj.NextRow()
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x06008B6D RID: 35693 RVA: 0x002352EF File Offset: 0x002334EF
			void ReportProcessing.IHierarchyObj.Traverse(ReportProcessing.ProcessingStages operation)
			{
				Global.Tracer.Assert(false);
			}

			// Token: 0x06008B6E RID: 35694 RVA: 0x002352FC File Offset: 0x002334FC
			void ReportProcessing.IHierarchyObj.ReadRow()
			{
				this.SendToInner();
			}

			// Token: 0x06008B6F RID: 35695 RVA: 0x00235304 File Offset: 0x00233504
			void ReportProcessing.IHierarchyObj.ProcessUserSort()
			{
				Global.Tracer.Assert(this.m_userSortTargetInfo != null, "(null != m_userSortTargetInfo)");
				this.m_processingContext.ProcessUserSortForTarget(this, ref this.m_dataRows, this.m_userSortTargetInfo.TargetForNonDetailSort);
				if (this.m_userSortTargetInfo.TargetForNonDetailSort)
				{
					this.m_userSortTargetInfo.ResetTargetForNonDetailSort();
					this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
					this.m_runtimeDataRegions = new ReportProcessing.RuntimeDRCollection(this, this.m_dataSet.DataRegions, this.m_processingContext, this.m_report.MergeOnePass);
					this.m_userSortTargetInfo.SortTree.Traverse(ReportProcessing.ProcessingStages.UserSortFilter, true);
					this.m_userSortTargetInfo.SortTree = null;
					if (this.m_userSortTargetInfo.AggregateRows != null)
					{
						for (int i = 0; i < this.m_userSortTargetInfo.AggregateRows.Count; i++)
						{
							this.m_userSortTargetInfo.AggregateRows[i].SetFields(this.m_processingContext);
							this.SendToInner();
						}
						this.m_userSortTargetInfo.AggregateRows = null;
					}
					this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
				}
			}

			// Token: 0x06008B70 RID: 35696 RVA: 0x0023541F File Offset: 0x0023361F
			void ReportProcessing.IHierarchyObj.MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.MarkSortInfoProcessed(runtimeSortFilterInfo, this);
				}
			}

			// Token: 0x06008B71 RID: 35697 RVA: 0x00235436 File Offset: 0x00233636
			void ReportProcessing.IHierarchyObj.AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo)
			{
				if (this.m_userSortTargetInfo != null)
				{
					this.m_userSortTargetInfo.AddSortInfoIndex(sortInfoIndex, sortInfo);
				}
			}

			// Token: 0x06008B72 RID: 35698 RVA: 0x00235450 File Offset: 0x00233650
			internal override void RuntimeInitializeReportItemObjs()
			{
				for (int i = 0; i < this.m_dataSet.DataRegions.Count; i++)
				{
					this.m_processingContext.RuntimeInitializeReportItemObjs(this.m_dataSet.DataRegions[i], true, false);
				}
			}

			// Token: 0x06008B73 RID: 35699 RVA: 0x00235496 File Offset: 0x00233696
			internal override void EraseDataChunk()
			{
				if (this.m_dataChunkSaved)
				{
					this.m_dataChunkWriter = new ChunkManager.DataChunkWriter(this.m_dataSet, this.m_processingContext);
					this.m_dataChunkWriter.CloseAndEraseChunk();
				}
			}

			// Token: 0x06008B74 RID: 35700 RVA: 0x002354C4 File Offset: 0x002336C4
			protected override void Process()
			{
				bool flag = false;
				try
				{
					base.FirstPassProcess(ref flag);
					this.m_processingContext.FirstPassPostProcess();
					if (!this.m_report.MergeOnePass)
					{
						if (this.m_processingContext.OWCChartName == null)
						{
							this.m_processingContext.CheckAndThrowIfAborted();
							this.SecondPass();
						}
						this.m_processingContext.CheckAndThrowIfAborted();
						this.ThirdPass();
					}
				}
				catch (Exception ex)
				{
					if (AsynchronousExceptionDetection.IsStoppingException(ex))
					{
						throw;
					}
					if (this.m_transInfo != null)
					{
						this.m_transInfo.RollbackRequired = true;
					}
					if (flag && this.m_dataSourceConnection != null)
					{
						this.m_processingContext.DataExtensionConnection.CloseConnectionWithoutPool(this.m_dataSourceConnection);
					}
					throw;
				}
				finally
				{
					if (this.m_dataReader != null)
					{
						((IDisposable)this.m_dataReader).Dispose();
						this.m_dataReader = null;
					}
					if (this.m_dataChunkWriter != null)
					{
						this.m_dataChunkWriter.Close();
						this.m_dataChunkWriter = null;
					}
				}
			}

			// Token: 0x06008B75 RID: 35701 RVA: 0x002355BC File Offset: 0x002337BC
			protected override void RegisterAggregates()
			{
				this.CreateAggregates(this.m_dataSet.Aggregates);
				this.CreateAggregates(this.m_dataSet.PostSortAggregates);
			}

			// Token: 0x06008B76 RID: 35702 RVA: 0x002355E0 File Offset: 0x002337E0
			private void CreateAggregates(DataAggregateInfoList aggDefs)
			{
				if (aggDefs != null && 0 < aggDefs.Count)
				{
					for (int i = 0; i < aggDefs.Count; i++)
					{
						DataAggregateInfo dataAggregateInfo = aggDefs[i];
						DataAggregateObj dataAggregateObj = new DataAggregateObj(dataAggregateInfo, this.m_processingContext);
						this.m_processingContext.ReportObjectModel.AggregatesImpl.Add(dataAggregateObj);
						if (DataAggregateInfo.AggregateTypes.Previous != dataAggregateInfo.AggregateType)
						{
							if (DataAggregateInfo.AggregateTypes.Aggregate == dataAggregateInfo.AggregateType)
							{
								ReportProcessing.RuntimeDataRegionObj.AddAggregate(ref this.m_customAggregates, dataAggregateObj);
							}
							else
							{
								ReportProcessing.RuntimeDataRegionObj.AddAggregate(ref this.m_nonCustomAggregates, dataAggregateObj);
							}
						}
					}
				}
			}

			// Token: 0x06008B77 RID: 35703 RVA: 0x00235664 File Offset: 0x00233864
			protected override void FirstPassInit()
			{
				base.InitRuntime(true);
				this.m_runtimeDataRegions = new ReportProcessing.RuntimeDRCollection(this, this.m_dataSet.DataRegions, this.m_processingContext, this.m_report.MergeOnePass);
				bool flag;
				if (this.m_processingContext.SnapshotProcessing || this.m_processingContext.ProcessWithCachedData)
				{
					this.m_dataSet.CheckNonCalculatedFieldCount();
					this.m_dataReader = new ReportProcessing.ProcessingDataReader(this.m_dataSet, this.m_processingContext);
					flag = this.m_dataReader.ReaderExtensionsSupported;
					this.m_processingContext.ReportObjectModel.FieldsImpl.ReaderExtensionsSupported = flag;
					this.m_processingContext.ReportObjectModel.FieldsImpl.ReaderFieldProperties = this.m_dataReader.ReaderFieldProperties;
					if (this.m_dataSet.Query.RewrittenCommandText != null)
					{
						this.m_processingContext.DrillthroughInfo.AddRewrittenCommand(this.m_dataSet.ID, this.m_dataSet.Query.RewrittenCommandText);
					}
					this.m_dataReader.OverrideDataCacheCompareOptions(ref this.m_processingContext);
				}
				else
				{
					flag = this.RunDataSetQuery();
					if ((this.m_processingContext.HasUserProfileState & UserProfileState.InQuery) > UserProfileState.None && this.m_processingContext.SaveSnapshotData && !this.m_processingContext.HasUserSortFilter && (this.m_report.SubReports == null || 0 >= this.m_report.SubReports.Count))
					{
						this.m_processingContext.SaveSnapshotData = false;
					}
				}
				Global.Tracer.Assert(this.m_processingContext.ReportObjectModel.DataSetsImpl != null, "(null != m_processingContext.ReportObjectModel.DataSetsImpl)");
				this.m_processingContext.ReportObjectModel.DataSetsImpl.Add(this.m_dataSet);
				if (!this.m_processingContext.ResetForSubreportDataPrefetch && ((this.m_processingContext.SaveSnapshotData && this.m_processingContext.CreateReportChunkCallback != null) || (this.m_processingContext.DataCached && this.m_processingContext.CacheDataCallback != null)))
				{
					this.m_dataChunkWriter = new ChunkManager.DataChunkWriter(this.m_dataSet, this.m_processingContext, flag, this.m_processingContext.StopSaveSnapshotDataOnError);
					if (this.m_processingContext.SaveSnapshotData && this.m_processingContext.CreateReportChunkCallback != null)
					{
						this.m_dataChunkSaved = true;
					}
				}
			}

			// Token: 0x06008B78 RID: 35704 RVA: 0x00235894 File Offset: 0x00233A94
			protected override void FirstPassProcessDetailRow(Filters filters)
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					this.NextAggregateRow();
					return;
				}
				bool flag = true;
				if (filters != null)
				{
					flag = filters.PassFilters(this.m_processingContext.ReportObjectModel.FieldsImpl.GetFields());
				}
				if (flag)
				{
					((ReportProcessing.IFilterOwner)this).PostFilterNextRow();
				}
			}

			// Token: 0x06008B79 RID: 35705 RVA: 0x002358EC File Offset: 0x00233AEC
			protected override void FirstPassCleanup(bool flushData)
			{
				if (this.m_dataChunkWriter != null)
				{
					bool flag = true;
					if (flushData)
					{
						flag = !this.m_dataChunkWriter.FinalFlush();
					}
					else
					{
						this.m_dataChunkWriter.Close();
					}
					if (flag)
					{
						this.m_processingContext.ErrorSavingSnapshotData = true;
						this.m_processingContext.DataCached = false;
						this.m_dataChunkSaved = !this.m_processingContext.StopSaveSnapshotDataOnError;
					}
					this.m_dataChunkWriter = null;
				}
			}

			// Token: 0x06008B7A RID: 35706 RVA: 0x00235958 File Offset: 0x00233B58
			private void SecondPass()
			{
				if (this.m_report.NeedPostGroupProcessing)
				{
					if (this.m_report.HasSpecialRecursiveAggregates)
					{
						this.m_processingContext.SecondPassOperation = ReportProcessing.ProcessingContext.SecondPassOperations.Filtering;
					}
					else
					{
						this.m_processingContext.SecondPassOperation = ReportProcessing.ProcessingContext.SecondPassOperations.Sorting | ReportProcessing.ProcessingContext.SecondPassOperations.Filtering;
					}
					if (this.m_userSortTargetInfo != null)
					{
						this.m_userSortTargetInfo.EnterProcessUserSortPhase(this.m_processingContext);
					}
					this.m_runtimeDataRegions.SortAndFilter();
					if (this.m_report.HasSpecialRecursiveAggregates)
					{
						this.m_processingContext.SecondPassOperation = ReportProcessing.ProcessingContext.SecondPassOperations.Sorting;
						this.m_runtimeDataRegions.SortAndFilter();
					}
					if (this.m_userSortTargetInfo != null)
					{
						this.m_userSortTargetInfo.LeaveProcessUserSortPhase(this.m_processingContext);
					}
				}
			}

			// Token: 0x06008B7B RID: 35707 RVA: 0x00235A00 File Offset: 0x00233C00
			private void ThirdPass()
			{
				if (this.m_report.HasPostSortAggregates)
				{
					AggregatesImpl aggregatesImpl = new AggregatesImpl(this.m_processingContext.ReportRuntime);
					ReportProcessing.RuntimeGroupRootObjList runtimeGroupRootObjList = new ReportProcessing.RuntimeGroupRootObjList();
					this.m_processingContext.GlobalRVCollection = aggregatesImpl;
					this.m_runtimeDataRegions.CalculateRunningValues(aggregatesImpl, runtimeGroupRootObjList);
				}
			}

			// Token: 0x06008B7C RID: 35708 RVA: 0x00235A4C File Offset: 0x00233C4C
			protected override bool FirstPassGetNextDetailRow()
			{
				this.m_processingContext.CheckAndThrowIfAborted();
				bool flag = false;
				if (this.m_processingContext.OWCChartName != null && 1000 < this.m_dataRowsRead)
				{
					return flag;
				}
				flag = base.GetNextDetailRow();
				if (this.m_dataChunkWriter != null)
				{
					if (1 == this.m_dataRowsRead && this.m_foundExtendedProperties)
					{
						this.m_dataChunkWriter.FieldAliasPropertyNames = this.m_referencedAliasPropertyNames;
					}
					if (flag && this.m_dataChunkWriter != null && !this.m_dataChunkWriter.AddRecordRow(this.m_processingContext.ReportObjectModel.FieldsImpl, this.m_dataSet.NonCalculatedFieldCount))
					{
						this.m_processingContext.ErrorSavingSnapshotData = true;
						this.m_processingContext.DataCached = false;
						if (this.m_processingContext.StopSaveSnapshotDataOnError)
						{
							this.m_dataChunkSaved = false;
							this.m_dataChunkWriter = null;
						}
					}
				}
				return flag;
			}

			// Token: 0x06008B7D RID: 35709 RVA: 0x00235B20 File Offset: 0x00233D20
			private void NextAggregateRow()
			{
				if (this.m_processingContext.ReportObjectModel.FieldsImpl.AggregationFieldCount == 0 && this.m_customAggregates != null)
				{
					for (int i = 0; i < this.m_customAggregates.Count; i++)
					{
						this.m_customAggregates[i].Update();
					}
				}
				if (this.m_userSortTargetInfo != null && this.m_userSortTargetInfo.SortTree != null)
				{
					if (this.m_userSortTargetInfo.AggregateRows == null)
					{
						this.m_userSortTargetInfo.AggregateRows = new ReportProcessing.AggregateRowList();
					}
					ReportProcessing.AggregateRow aggregateRow = new ReportProcessing.AggregateRow(this.m_processingContext);
					this.m_userSortTargetInfo.AggregateRows.Add(aggregateRow);
					if (!this.m_userSortTargetInfo.TargetForNonDetailSort)
					{
						return;
					}
				}
				this.SendToInner();
			}

			// Token: 0x06008B7E RID: 35710 RVA: 0x00235BD8 File Offset: 0x00233DD8
			protected override void NextNonAggregateRow()
			{
				if (this.m_nonCustomAggregates != null)
				{
					for (int i = 0; i < this.m_nonCustomAggregates.Count; i++)
					{
						this.m_nonCustomAggregates[i].Update();
					}
				}
				if (this.m_dataRows != null)
				{
					ReportProcessing.RuntimeDetailObj.SaveData(this.m_dataRows, this.m_processingContext);
				}
				this.SendToInner();
			}

			// Token: 0x06008B7F RID: 35711 RVA: 0x00235C33 File Offset: 0x00233E33
			private void SendToInner()
			{
				this.m_runtimeDataRegions.FirstPassNextDataRow();
			}

			// Token: 0x040049B8 RID: 18872
			private ReportProcessing.RuntimeDRCollection m_runtimeDataRegions;

			// Token: 0x040049B9 RID: 18873
			private DataAggregateObjList m_nonCustomAggregates;

			// Token: 0x040049BA RID: 18874
			private DataAggregateObjList m_customAggregates;

			// Token: 0x040049BB RID: 18875
			private const int m_chartDataRowCount = 1000;

			// Token: 0x040049BC RID: 18876
			private ChunkManager.DataChunkWriter m_dataChunkWriter;

			// Token: 0x040049BD RID: 18877
			private bool m_dataChunkSaved;

			// Token: 0x040049BE RID: 18878
			private ReportProcessing.DataRowList m_dataRows;

			// Token: 0x040049BF RID: 18879
			private RuntimeUserSortTargetInfo m_userSortTargetInfo;

			// Token: 0x040049C0 RID: 18880
			private int[] m_sortFilterExpressionScopeInfoIndices;
		}

		// Token: 0x02000C7A RID: 3194
		private sealed class RuntimeSortDataHolder : ReportProcessing.ISortDataHolder
		{
			// Token: 0x06008B80 RID: 35712 RVA: 0x00235C40 File Offset: 0x00233E40
			internal RuntimeSortDataHolder(ReportProcessing.IHierarchyObj owner)
			{
				this.m_owner = owner;
				this.m_dataRows = new ReportProcessing.DataRowList();
			}

			// Token: 0x06008B81 RID: 35713 RVA: 0x00235C5C File Offset: 0x00233E5C
			void ReportProcessing.ISortDataHolder.NextRow()
			{
				FieldImpl[] andSaveFields = this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl.GetAndSaveFields();
				this.m_dataRows.Add(andSaveFields);
			}

			// Token: 0x06008B82 RID: 35714 RVA: 0x00235C94 File Offset: 0x00233E94
			void ReportProcessing.ISortDataHolder.Traverse(ReportProcessing.ProcessingStages operation)
			{
				Global.Tracer.Assert(ReportProcessing.ProcessingStages.UserSortFilter == operation, "(ProcessingStages.UserSortFilter == operation)");
				if (this.m_dataRows != null)
				{
					for (int i = 0; i < this.m_dataRows.Count; i++)
					{
						FieldImpl[] array = this.m_dataRows[i];
						this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl.SetFields(array);
						this.m_owner.ReadRow();
					}
				}
			}

			// Token: 0x040049C1 RID: 18881
			private ReportProcessing.IHierarchyObj m_owner;

			// Token: 0x040049C2 RID: 18882
			private ReportProcessing.DataRowList m_dataRows;
		}

		// Token: 0x02000C7B RID: 3195
		private sealed class RuntimePrefetchDataSetNode : ReportProcessing.RuntimeDataSetNode
		{
			// Token: 0x06008B83 RID: 35715 RVA: 0x00235D05 File Offset: 0x00233F05
			internal RuntimePrefetchDataSetNode(Microsoft.ReportingServices.ReportProcessing.Report report, Microsoft.ReportingServices.ReportProcessing.DataSet dataSet, ReportProcessing.ProcessingContext processingContext)
				: base(report, dataSet, processingContext)
			{
			}

			// Token: 0x06008B84 RID: 35716 RVA: 0x00235D10 File Offset: 0x00233F10
			protected override void Process()
			{
				bool flag = false;
				if (this.m_dataSet.IsShareable() && this.m_processingContext.CachedDataChunkMapping.ContainsKey(this.m_dataSet.ID))
				{
					return;
				}
				try
				{
					base.FirstPassProcess(ref flag);
				}
				catch (Exception ex)
				{
					if (AsynchronousExceptionDetection.IsStoppingException(ex))
					{
						throw;
					}
					if (this.m_transInfo != null)
					{
						this.m_transInfo.RollbackRequired = true;
					}
					if (flag && this.m_dataSourceConnection != null)
					{
						this.m_processingContext.DataExtensionConnection.CloseConnectionWithoutPool(this.m_dataSourceConnection);
					}
					throw;
				}
				finally
				{
					if (this.m_dataReader != null)
					{
						((IDisposable)this.m_dataReader).Dispose();
						this.m_dataReader = null;
					}
				}
			}

			// Token: 0x06008B85 RID: 35717 RVA: 0x00235DD4 File Offset: 0x00233FD4
			protected override void FirstPassInit()
			{
				base.InitRuntime(false);
				bool flag = this.RunDataSetQuery();
				if (this.m_processingContext.CreateReportChunkCallback != null || this.m_processingContext.CacheDataCallback != null)
				{
					this.m_dataChunkWriter = new ChunkManager.DataChunkWriter(this.m_dataSet, this.m_processingContext, flag, false);
				}
			}

			// Token: 0x06008B86 RID: 35718 RVA: 0x00235E24 File Offset: 0x00234024
			protected override bool FirstPassGetNextDetailRow()
			{
				this.m_processingContext.CheckAndThrowIfAborted();
				bool nextDetailRow = base.GetNextDetailRow();
				if (this.m_dataChunkWriter != null)
				{
					if (1 == this.m_dataRowsRead && this.m_foundExtendedProperties)
					{
						this.m_dataChunkWriter.FieldAliasPropertyNames = this.m_referencedAliasPropertyNames;
					}
					if (nextDetailRow)
					{
						this.m_dataChunkWriter.AddRecordRow(this.m_processingContext.ReportObjectModel.FieldsImpl, this.m_dataSet.NonCalculatedFieldCount);
					}
				}
				return nextDetailRow;
			}

			// Token: 0x06008B87 RID: 35719 RVA: 0x00235E98 File Offset: 0x00234098
			protected override void FirstPassProcessDetailRow(Filters filters)
			{
			}

			// Token: 0x06008B88 RID: 35720 RVA: 0x00235E9A File Offset: 0x0023409A
			protected override void NextNonAggregateRow()
			{
			}

			// Token: 0x06008B89 RID: 35721 RVA: 0x00235E9C File Offset: 0x0023409C
			protected override void FirstPassCleanup(bool flushData)
			{
				if (this.m_dataChunkWriter != null)
				{
					if (flushData)
					{
						this.m_dataChunkWriter.FinalFlush();
					}
					else
					{
						this.m_dataChunkWriter.Close();
					}
					this.m_dataChunkWriter = null;
				}
			}

			// Token: 0x040049C3 RID: 18883
			private ChunkManager.DataChunkWriter m_dataChunkWriter;
		}

		// Token: 0x02000C7C RID: 3196
		private sealed class RuntimeReportParametersDataSetNode : ReportProcessing.RuntimeDataSetNode
		{
			// Token: 0x06008B8A RID: 35722 RVA: 0x00235EC9 File Offset: 0x002340C9
			internal RuntimeReportParametersDataSetNode(Microsoft.ReportingServices.ReportProcessing.Report report, Microsoft.ReportingServices.ReportProcessing.DataSet dataSet, ReportProcessing.ProcessingContext processingContext, LegacyReportParameterDataSetCache aCache)
				: base(report, dataSet, processingContext)
			{
				this.m_reportParameterDataSetObj = aCache;
			}

			// Token: 0x06008B8B RID: 35723 RVA: 0x00235EDC File Offset: 0x002340DC
			protected override void FirstPassInit()
			{
				base.InitRuntime(false);
				this.RunDataSetQuery();
			}

			// Token: 0x06008B8C RID: 35724 RVA: 0x00235EEC File Offset: 0x002340EC
			protected override void FirstPassProcessDetailRow(Filters filters)
			{
				bool flag = true;
				if (filters != null)
				{
					flag = filters.PassFilters(this.m_processingContext.ReportObjectModel.FieldsImpl.GetFields());
				}
				if (flag)
				{
					((ReportProcessing.IFilterOwner)this).PostFilterNextRow();
				}
			}

			// Token: 0x06008B8D RID: 35725 RVA: 0x00235F24 File Offset: 0x00234124
			protected override void Process()
			{
				bool flag = false;
				try
				{
					base.FirstPassProcess(ref flag);
				}
				catch (Exception ex)
				{
					if (AsynchronousExceptionDetection.IsStoppingException(ex))
					{
						throw;
					}
					if (this.m_transInfo != null)
					{
						this.m_transInfo.RollbackRequired = true;
					}
					if (flag && this.m_dataSourceConnection != null)
					{
						this.m_processingContext.DataExtensionConnection.CloseConnectionWithoutPool(this.m_dataSourceConnection);
					}
					throw;
				}
				finally
				{
					if (this.m_dataReader != null)
					{
						((IDisposable)this.m_dataReader).Dispose();
						this.m_dataReader = null;
					}
				}
			}

			// Token: 0x06008B8E RID: 35726 RVA: 0x00235FB4 File Offset: 0x002341B4
			protected override bool FirstPassGetNextDetailRow()
			{
				this.m_processingContext.CheckAndThrowIfAborted();
				return base.GetNextDetailRow();
			}

			// Token: 0x06008B8F RID: 35727 RVA: 0x00235FC7 File Offset: 0x002341C7
			protected override void NextNonAggregateRow()
			{
				this.m_reportParameterDataSetObj.NextRow(this.m_processingContext.ReportObjectModel.FieldsImpl.GetAndSaveFields());
			}

			// Token: 0x040049C4 RID: 18884
			private LegacyReportParameterDataSetCache m_reportParameterDataSetObj;
		}

		// Token: 0x02000C7D RID: 3197
		internal sealed class RuntimeReportParameterDataSetObj
		{
			// Token: 0x06008B90 RID: 35728 RVA: 0x00235FE9 File Offset: 0x002341E9
			internal RuntimeReportParameterDataSetObj(ReportProcessing.ProcessingContext processingContext)
			{
				this.m_processingContext = processingContext;
			}

			// Token: 0x06008B91 RID: 35729 RVA: 0x00235FF8 File Offset: 0x002341F8
			internal void NextRow()
			{
				if (this.m_dataRows == null)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
				FieldImpl[] andSaveFields = this.m_processingContext.ReportObjectModel.FieldsImpl.GetAndSaveFields();
				this.m_dataRows.Add(andSaveFields);
			}

			// Token: 0x17002B09 RID: 11017
			// (get) Token: 0x06008B92 RID: 35730 RVA: 0x0023603B File Offset: 0x0023423B
			internal int Count
			{
				get
				{
					if (this.m_dataRows == null)
					{
						return 0;
					}
					return this.m_dataRows.Count;
				}
			}

			// Token: 0x06008B93 RID: 35731 RVA: 0x00236054 File Offset: 0x00234254
			internal object GetFieldValue(int row, int col)
			{
				if (this.Count == 0)
				{
					return null;
				}
				Global.Tracer.Assert(this.m_dataRows[row][col] != null, "(null != m_dataRows[row][col])");
				if (this.m_dataRows[row][col].IsMissing)
				{
					return null;
				}
				this.m_processingContext.ReportObjectModel.FieldsImpl.SetFields(this.m_dataRows[row]);
				return this.m_dataRows[row][col].Value;
			}

			// Token: 0x040049C5 RID: 18885
			private ReportProcessing.ProcessingContext m_processingContext;

			// Token: 0x040049C6 RID: 18886
			private ReportProcessing.DataRowList m_dataRows;
		}

		// Token: 0x02000C7E RID: 3198
		internal sealed class ProcessingDataReader : IDisposable
		{
			// Token: 0x06008B94 RID: 35732 RVA: 0x002360D6 File Offset: 0x002342D6
			internal ProcessingDataReader(string dataSetName, IDataReader sourceReader, string[] aliases, string[] names)
			{
				this.m_dataSourceDataReader = new MappingDataReader(dataSetName, sourceReader, aliases, names, null);
			}

			// Token: 0x06008B95 RID: 35733 RVA: 0x002360EF File Offset: 0x002342EF
			internal ProcessingDataReader(Microsoft.ReportingServices.ReportProcessing.DataSet dataSet, ReportProcessing.ProcessingContext context)
			{
				this.m_snapshotDataReader = new ChunkManager.DataChunkReader(dataSet, context);
			}

			// Token: 0x17002B0A RID: 11018
			// (get) Token: 0x06008B96 RID: 35734 RVA: 0x00236104 File Offset: 0x00234304
			internal bool ReaderExtensionsSupported
			{
				get
				{
					if (this.m_dataSourceDataReader != null)
					{
						return this.m_dataSourceDataReader.ReaderExtensionsSupported;
					}
					return this.m_snapshotDataReader.ReaderExtensionsSupported;
				}
			}

			// Token: 0x17002B0B RID: 11019
			// (get) Token: 0x06008B97 RID: 35735 RVA: 0x00236125 File Offset: 0x00234325
			internal bool ReaderFieldProperties
			{
				get
				{
					if (this.m_dataSourceDataReader != null)
					{
						return this.m_dataSourceDataReader.ReaderFieldProperties;
					}
					return this.m_snapshotDataReader.ReaderFieldProperties;
				}
			}

			// Token: 0x17002B0C RID: 11020
			// (get) Token: 0x06008B98 RID: 35736 RVA: 0x00236146 File Offset: 0x00234346
			public bool IsAggregateRow
			{
				get
				{
					if (this.m_dataSourceDataReader != null)
					{
						return this.m_dataSourceDataReader.IsAggregateRow;
					}
					return this.m_snapshotDataReader.IsAggregateRow;
				}
			}

			// Token: 0x17002B0D RID: 11021
			// (get) Token: 0x06008B99 RID: 35737 RVA: 0x00236167 File Offset: 0x00234367
			public int AggregationFieldCount
			{
				get
				{
					if (this.m_dataSourceDataReader != null)
					{
						return this.m_dataSourceDataReader.AggregationFieldCount;
					}
					return this.m_snapshotDataReader.AggregationFieldCount;
				}
			}

			// Token: 0x06008B9A RID: 35738 RVA: 0x00236188 File Offset: 0x00234388
			void IDisposable.Dispose()
			{
				if (this.m_dataSourceDataReader != null)
				{
					((IDisposable)this.m_dataSourceDataReader).Dispose();
					return;
				}
				((IDisposable)this.m_snapshotDataReader).Dispose();
			}

			// Token: 0x06008B9B RID: 35739 RVA: 0x002361A9 File Offset: 0x002343A9
			internal void OverrideDataCacheCompareOptions(ref ReportProcessing.ProcessingContext context)
			{
				if (this.m_snapshotDataReader != null && context.ProcessWithCachedData && this.m_snapshotDataReader.ValidCompareOptions)
				{
					context.ClrCompareOptions = this.m_snapshotDataReader.CompareOptions;
				}
			}

			// Token: 0x06008B9C RID: 35740 RVA: 0x002361DB File Offset: 0x002343DB
			public bool GetNextRow()
			{
				if (this.m_dataSourceDataReader != null)
				{
					return this.m_dataSourceDataReader.GetNextRow();
				}
				return this.m_snapshotDataReader.GetNextRow();
			}

			// Token: 0x06008B9D RID: 35741 RVA: 0x002361FC File Offset: 0x002343FC
			internal object GetColumn(int aliasIndex)
			{
				object obj;
				if (this.m_dataSourceDataReader != null)
				{
					obj = this.m_dataSourceDataReader.GetFieldValue(aliasIndex);
				}
				else
				{
					obj = this.m_snapshotDataReader.GetFieldValue(aliasIndex);
				}
				if (obj is DBNull)
				{
					return null;
				}
				return obj;
			}

			// Token: 0x06008B9E RID: 35742 RVA: 0x0023623A File Offset: 0x0023443A
			internal bool IsAggregationField(int aliasIndex)
			{
				if (this.m_dataSourceDataReader != null)
				{
					return this.m_dataSourceDataReader.IsAggregationField(aliasIndex);
				}
				return this.m_snapshotDataReader.IsAggregationField(aliasIndex);
			}

			// Token: 0x06008B9F RID: 35743 RVA: 0x00236260 File Offset: 0x00234460
			internal int GetPropertyCount(int aliasIndex)
			{
				if (this.m_dataSourceDataReader != null)
				{
					return this.m_dataSourceDataReader.GetPropertyCount(aliasIndex);
				}
				if (this.m_snapshotDataReader != null && this.m_snapshotDataReader.FieldPropertyNames != null && this.m_snapshotDataReader.FieldPropertyNames[aliasIndex] != null)
				{
					StringList propertyNames = this.m_snapshotDataReader.FieldPropertyNames.GetPropertyNames(aliasIndex);
					if (propertyNames != null)
					{
						return propertyNames.Count;
					}
				}
				return 0;
			}

			// Token: 0x06008BA0 RID: 35744 RVA: 0x002362C8 File Offset: 0x002344C8
			internal string GetPropertyName(int aliasIndex, int propertyIndex)
			{
				if (this.m_dataSourceDataReader != null)
				{
					return this.m_dataSourceDataReader.GetPropertyName(aliasIndex, propertyIndex);
				}
				if (this.m_snapshotDataReader != null && this.m_snapshotDataReader.FieldPropertyNames != null)
				{
					return this.m_snapshotDataReader.FieldPropertyNames.GetPropertyName(aliasIndex, propertyIndex);
				}
				return null;
			}

			// Token: 0x06008BA1 RID: 35745 RVA: 0x00236314 File Offset: 0x00234514
			internal object GetPropertyValue(int aliasIndex, int propertyIndex)
			{
				object obj = null;
				if (this.m_dataSourceDataReader != null)
				{
					obj = this.m_dataSourceDataReader.GetPropertyValue(aliasIndex, propertyIndex);
				}
				else if (this.m_snapshotDataReader != null)
				{
					obj = this.m_snapshotDataReader.GetPropertyValue(aliasIndex, propertyIndex);
				}
				if (obj is DBNull)
				{
					return null;
				}
				return obj;
			}

			// Token: 0x040049C7 RID: 18887
			private MappingDataReader m_dataSourceDataReader;

			// Token: 0x040049C8 RID: 18888
			private ChunkManager.DataChunkReader m_snapshotDataReader;
		}

		// Token: 0x02000C7F RID: 3199
		internal sealed class PageMergeInteractive
		{
			// Token: 0x06008BA2 RID: 35746 RVA: 0x0023635C File Offset: 0x0023455C
			internal UserProfileState Process(ReportProcessing.PageTextboxes pageTextboxes, ReportSnapshot reportSnapshot, ICatalogItemContext reportContext, string reportName, ParameterInfoCollection parameters, ChunkManager.ProcessingChunkManager pageSectionManager, ReportProcessing.CreateReportChunk createChunkCallback, IGetResource getResourceCallback, ErrorContext errorContext, UserProfileState allowUserProfileState, ReportRuntimeSetup reportRuntimeSetup, int uniqueNameCounter, IDataProtection dataProtection, ref ReportDrillthroughInfo drillthroughInfo)
			{
				UserProfileState userProfileState = UserProfileState.None;
				try
				{
					this.m_pageTextboxes = pageTextboxes;
					this.m_reportSnapshot = reportSnapshot;
					this.m_report = reportSnapshot.Report;
					this.m_reportInstance = reportSnapshot.ReportInstance;
					this.m_parameters = parameters;
					this.m_processingContext = new ReportProcessing.ProcessingContext(reportContext, this.m_report.ShowHideType, getResourceCallback, this.m_report.EmbeddedImages, this.m_report.ImageStreamNames, errorContext, !this.m_report.PageMergeOnePass, allowUserProfileState, reportRuntimeSetup, createChunkCallback, pageSectionManager, uniqueNameCounter, dataProtection, ref drillthroughInfo);
					if (this.m_report.Language != null)
					{
						string text;
						if (this.m_report.Language.Type == ExpressionInfo.Types.Constant)
						{
							text = this.m_report.Language.Value;
						}
						else
						{
							text = this.m_reportInstance.Language;
						}
						if (text != null)
						{
							try
							{
								CultureInfo cultureInfo = new CultureInfo(text, false);
								if (cultureInfo.IsNeutralCulture)
								{
									cultureInfo = CultureInfo.CreateSpecificCulture(text);
									cultureInfo = new CultureInfo(cultureInfo.Name, false);
								}
								Thread.CurrentThread.CurrentCulture = cultureInfo;
								goto IL_0127;
							}
							catch (Exception)
							{
								Thread.CurrentThread.CurrentCulture = Localization.DefaultReportServerSpecificCulture;
								goto IL_0127;
							}
						}
						Thread.CurrentThread.CurrentCulture = Localization.DefaultReportServerSpecificCulture;
					}
					else
					{
						Thread.CurrentThread.CurrentCulture = Localization.DefaultReportServerSpecificCulture;
					}
					IL_0127:
					this.GlobalInit(reportName, this.m_reportInstance.NumberOfPages);
					this.m_reportSnapshot.PageSections = new List<PageSectionInstance>(2 * this.m_reportInstance.NumberOfPages);
					for (int i = 0; i < this.m_reportInstance.NumberOfPages; i++)
					{
						this.PageInit(i);
						if (!this.m_report.PageMergeOnePass)
						{
							this.FirstPass(i);
						}
						this.SecondPass(i);
					}
				}
				finally
				{
					if (this.m_processingContext != null)
					{
						if (this.m_processingContext.ReportRuntime != null)
						{
							this.m_processingContext.ReportRuntime.Close();
						}
						userProfileState = this.m_processingContext.HasUserProfileState;
					}
					this.m_report = null;
					this.m_reportInstance = null;
					this.m_processingContext = null;
				}
				return userProfileState;
			}

			// Token: 0x06008BA3 RID: 35747 RVA: 0x00236578 File Offset: 0x00234778
			private void GlobalInit(string reportName, int totalPages)
			{
				this.m_processingContext.ReportObjectModel = new ObjectModelImpl(this.m_processingContext);
				Global.Tracer.Assert(this.m_processingContext.ReportRuntime == null, "(m_processingContext.ReportRuntime == null)");
				this.m_processingContext.ReportRuntime = new ReportRuntime(this.m_processingContext.ReportObjectModel, this.m_processingContext.ErrorContext);
				this.m_processingContext.ReportObjectModel.FieldsImpl = new FieldsImpl();
				this.m_processingContext.ReportObjectModel.ParametersImpl = new ParametersImpl(this.m_parameters.Count);
				this.m_processingContext.ReportObjectModel.GlobalsImpl = new GlobalsImpl(reportName, 0, totalPages, this.m_reportSnapshot.ExecutionTime, this.m_reportSnapshot.ReportServerUrl, this.m_reportSnapshot.ReportFolder);
				this.m_processingContext.ReportObjectModel.UserImpl = new UserImpl(this.m_reportSnapshot.RequestUserName, this.m_reportSnapshot.Language, this.m_processingContext.AllowUserProfileState);
				this.m_processingContext.ReportObjectModel.ReportItemsImpl = new ReportItemsImpl();
				this.m_processingContext.ReportObjectModel.AggregatesImpl = new AggregatesImpl(this.m_processingContext.ReportRuntime);
				this.m_processingContext.ReportObjectModel.DataSetsImpl = new DataSetsImpl();
				this.m_processingContext.ReportObjectModel.DataSourcesImpl = new DataSourcesImpl(this.m_report.DataSourceCount);
				for (int i = 0; i < this.m_parameters.Count; i++)
				{
					this.m_processingContext.ReportObjectModel.ParametersImpl.Add(this.m_parameters[i].Name, new ParameterImpl(this.m_parameters[i].Values, this.m_parameters[i].Labels, this.m_parameters[i].MultiValue));
				}
				this.m_processingContext.ReportRuntime.LoadCompiledCode(this.m_report, false, this.m_processingContext.ReportObjectModel, this.m_processingContext.ReportRuntimeSetup);
			}

			// Token: 0x06008BA4 RID: 35748 RVA: 0x00236790 File Offset: 0x00234990
			private void PageInit(int currentPageNumber)
			{
				this.m_processingContext.ReportObjectModel.GlobalsImpl.SetPageNumber(currentPageNumber + 1);
				this.m_processingContext.ReportObjectModel.ReportItemsImpl = new ReportItemsImpl();
				this.m_processingContext.ReportObjectModel.AggregatesImpl = new AggregatesImpl(this.m_processingContext.ReportRuntime);
				if (this.m_processingContext.ReportRuntime.ReportExprHost != null)
				{
					this.m_processingContext.RuntimeInitializeReportItemObjs(this.m_report.ReportItems, true, true);
					if (this.m_report.PageHeader != null)
					{
						if (this.m_processingContext.ReportRuntime.ReportExprHost != null)
						{
							this.m_report.PageHeader.SetExprHost(this.m_processingContext.ReportRuntime.ReportExprHost, this.m_processingContext.ReportObjectModel);
						}
						this.m_processingContext.RuntimeInitializeReportItemObjs(this.m_report.PageHeader.ReportItems, false, false);
					}
					if (this.m_report.PageFooter != null)
					{
						if (this.m_processingContext.ReportRuntime.ReportExprHost != null)
						{
							this.m_report.PageFooter.SetExprHost(this.m_processingContext.ReportRuntime.ReportExprHost, this.m_processingContext.ReportObjectModel);
						}
						this.m_processingContext.RuntimeInitializeReportItemObjs(this.m_report.PageFooter.ReportItems, false, false);
					}
				}
				this.m_aggregates = new AggregatesImpl(this.m_processingContext.ReportRuntime);
				this.m_aggregatesOverReportItems = new Hashtable();
				this.m_processingContext.ReportObjectModel.ReportItemsImpl.SpecialMode = true;
				if (this.m_report.PageAggregates != null)
				{
					for (int i = 0; i < this.m_report.PageAggregates.Count; i++)
					{
						DataAggregateInfo dataAggregateInfo = this.m_report.PageAggregates[i];
						dataAggregateInfo.ExprHostInitialized = false;
						DataAggregateObj dataAggregateObj = new DataAggregateObj(dataAggregateInfo, this.m_processingContext);
						object[] array;
						DataFieldStatus dataFieldStatus;
						dataAggregateObj.EvaluateParameters(out array, out dataFieldStatus);
						string specialModeIndex = this.m_processingContext.ReportObjectModel.ReportItemsImpl.GetSpecialModeIndex();
						if (specialModeIndex == null)
						{
							this.m_aggregates.Add(dataAggregateObj);
						}
						else
						{
							AggregatesImpl aggregatesImpl = (AggregatesImpl)this.m_aggregatesOverReportItems[specialModeIndex];
							if (aggregatesImpl == null)
							{
								aggregatesImpl = new AggregatesImpl(this.m_processingContext.ReportRuntime);
								this.m_aggregatesOverReportItems.Add(specialModeIndex, aggregatesImpl);
							}
							aggregatesImpl.Add(dataAggregateObj);
						}
						dataAggregateObj.Init();
					}
				}
				this.m_processingContext.ReportObjectModel.ReportItemsImpl.SpecialMode = false;
			}

			// Token: 0x06008BA5 RID: 35749 RVA: 0x00236A04 File Offset: 0x00234C04
			private void FirstPass(int currentPageNumber)
			{
				Hashtable hashtable = null;
				if (this.m_pageTextboxes != null)
				{
					hashtable = this.m_pageTextboxes.GetTextboxesOnPage(currentPageNumber);
				}
				try
				{
					foreach (object obj in this.m_aggregates.Objects)
					{
						DataAggregateObj dataAggregateObj = (DataAggregateObj)obj;
						this.m_processingContext.ReportObjectModel.AggregatesImpl.Add(dataAggregateObj);
					}
					if (hashtable != null)
					{
						foreach (object obj2 in hashtable.Keys)
						{
							string text = obj2 as string;
							Global.Tracer.Assert(text != null, "(null != name)");
							ArrayList arrayList = hashtable[text] as ArrayList;
							Global.Tracer.Assert(arrayList != null && 0 < arrayList.Count, "(null != values && 0 < values.Count)");
							AggregatesImpl aggregatesImpl = (AggregatesImpl)this.m_aggregatesOverReportItems[text];
							TextBoxImpl textBoxImpl = (TextBoxImpl)this.m_processingContext.ReportObjectModel.ReportItemsImpl[text];
							if (aggregatesImpl != null)
							{
								Global.Tracer.Assert(textBoxImpl != null, "(null != textBoxObj)");
								for (int i = 0; i < arrayList.Count; i++)
								{
									textBoxImpl.SetResult(new VariantResult(false, arrayList[i]));
									foreach (object obj3 in aggregatesImpl.Objects)
									{
										((DataAggregateObj)obj3).Update();
									}
								}
							}
							else
							{
								textBoxImpl.SetResult(new VariantResult(false, arrayList[arrayList.Count - 1]));
							}
						}
					}
					foreach (object obj4 in this.m_aggregatesOverReportItems.Values)
					{
						foreach (object obj5 in ((AggregatesImpl)obj4).Objects)
						{
							DataAggregateObj dataAggregateObj2 = (DataAggregateObj)obj5;
							this.m_processingContext.ReportObjectModel.AggregatesImpl.Add(dataAggregateObj2);
						}
					}
				}
				finally
				{
					this.m_aggregates = null;
					this.m_aggregatesOverReportItems = null;
				}
			}

			// Token: 0x06008BA6 RID: 35750 RVA: 0x00236CD4 File Offset: 0x00234ED4
			private void SecondPass(int currentPageNumber)
			{
				PageSectionInstance pageSectionInstance = null;
				PageSectionInstance pageSectionInstance2 = null;
				if (this.m_report.PageHeaderEvaluation)
				{
					pageSectionInstance = new PageSectionInstance(this.m_processingContext, currentPageNumber, this.m_report.PageHeader);
					this.CreateInstances(pageSectionInstance.ReportItemColInstance, this.m_report.PageHeader.ReportItems);
				}
				if (this.m_report.PageFooterEvaluation)
				{
					pageSectionInstance2 = new PageSectionInstance(this.m_processingContext, currentPageNumber, this.m_report.PageFooter);
					this.CreateInstances(pageSectionInstance2.ReportItemColInstance, this.m_report.PageFooter.ReportItems);
				}
				this.m_reportSnapshot.PageSections.Add(pageSectionInstance);
				this.m_reportSnapshot.PageSections.Add(pageSectionInstance2);
			}

			// Token: 0x06008BA7 RID: 35751 RVA: 0x00236D8C File Offset: 0x00234F8C
			private void CreateInstances(ReportItemColInstance collectionInstance, Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItemsDef)
			{
				reportItemsDef.ProcessDrillthroughAction(this.m_processingContext, collectionInstance.ChildrenNonComputedUniqueNames);
				if (reportItemsDef.ComputedReportItems == null)
				{
					return;
				}
				ReportItemInstance reportItemInstance = null;
				for (int i = 0; i < reportItemsDef.ComputedReportItems.Count; i++)
				{
					Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = reportItemsDef.ComputedReportItems[i];
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.TextBox)
					{
						reportItemInstance = ReportProcessing.RuntimeRICollection.CreateTextBoxInstance((Microsoft.ReportingServices.ReportProcessing.TextBox)reportItem, this.m_processingContext, i, null);
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Line)
					{
						reportItemInstance = ReportProcessing.RuntimeRICollection.CreateLineInstance((Microsoft.ReportingServices.ReportProcessing.Line)reportItem, this.m_processingContext, i);
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Image)
					{
						reportItemInstance = ReportProcessing.RuntimeRICollection.CreateImageInstance((Microsoft.ReportingServices.ReportProcessing.Image)reportItem, this.m_processingContext, i);
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle)
					{
						Microsoft.ReportingServices.ReportProcessing.Rectangle rectangle = (Microsoft.ReportingServices.ReportProcessing.Rectangle)reportItem;
						RectangleInstance rectangleInstance = new RectangleInstance(this.m_processingContext, rectangle, i);
						this.CreateInstances(rectangleInstance.ReportItemColInstance, rectangle.ReportItems);
						reportItemInstance = rectangleInstance;
					}
					if (reportItemInstance != null)
					{
						collectionInstance.Add(reportItemInstance);
					}
				}
			}

			// Token: 0x040049C9 RID: 18889
			private ReportProcessing.PageTextboxes m_pageTextboxes;

			// Token: 0x040049CA RID: 18890
			private ReportSnapshot m_reportSnapshot;

			// Token: 0x040049CB RID: 18891
			private Microsoft.ReportingServices.ReportProcessing.Report m_report;

			// Token: 0x040049CC RID: 18892
			private Microsoft.ReportingServices.ReportProcessing.ReportInstance m_reportInstance;

			// Token: 0x040049CD RID: 18893
			private ParameterInfoCollection m_parameters;

			// Token: 0x040049CE RID: 18894
			private ReportProcessing.ProcessingContext m_processingContext;

			// Token: 0x040049CF RID: 18895
			private AggregatesImpl m_aggregates;

			// Token: 0x040049D0 RID: 18896
			private Hashtable m_aggregatesOverReportItems;
		}

		// Token: 0x02000C80 RID: 3200
		internal sealed class PageMerge
		{
			// Token: 0x06008BA9 RID: 35753 RVA: 0x00236E80 File Offset: 0x00235080
			internal void Process(int pageNumber, int totalPages, Microsoft.ReportingServices.ReportRendering.Report report, PageReportItems pageReportItems, ErrorContext errorContext, out Microsoft.ReportingServices.ReportRendering.PageSection pageHeader, out Microsoft.ReportingServices.ReportRendering.PageSection pageFooter)
			{
				if (!report.NeedsHeaderFooterEvaluation)
				{
					pageHeader = null;
					pageFooter = null;
					return;
				}
				try
				{
					this.m_pageNumber = pageNumber;
					this.m_renderingReport = report;
					this.m_reportSnapshot = report.RenderingContext.ReportSnapshot;
					this.m_report = report.ReportDef;
					this.m_reportInstance = report.ReportInstance;
					this.m_pageReportItems = pageReportItems;
					this.m_processingContext = new ReportProcessing.ProcessingContext(report.RenderingContext.TopLevelReportContext, this.m_report.ShowHideType, report.RenderingContext.GetResourceCallback, this.m_report.EmbeddedImages, this.m_report.ImageStreamNames, errorContext, !this.m_report.PageMergeOnePass, report.RenderingContext.AllowUserProfileState, report.RenderingContext.ReportRuntimeSetup, report.RenderingContext.DataProtection);
					if (this.m_report.Language != null)
					{
						string text;
						if (this.m_report.Language.Type == ExpressionInfo.Types.Constant)
						{
							text = this.m_report.Language.Value;
						}
						else
						{
							text = this.m_reportInstance.Language;
						}
						if (text != null)
						{
							try
							{
								CultureInfo cultureInfo = new CultureInfo(text, false);
								if (cultureInfo.IsNeutralCulture)
								{
									cultureInfo = CultureInfo.CreateSpecificCulture(text);
									cultureInfo = new CultureInfo(cultureInfo.Name, false);
								}
								Thread.CurrentThread.CurrentCulture = cultureInfo;
								goto IL_016E;
							}
							catch (Exception)
							{
								Thread.CurrentThread.CurrentCulture = Localization.DefaultReportServerSpecificCulture;
								goto IL_016E;
							}
						}
						Thread.CurrentThread.CurrentCulture = Localization.DefaultReportServerSpecificCulture;
					}
					else
					{
						Thread.CurrentThread.CurrentCulture = Localization.DefaultReportServerSpecificCulture;
					}
					IL_016E:
					this.FirstPassInit(totalPages);
					this.FirstPass();
					this.SecondPass();
					pageHeader = this.m_pageHeader;
					pageFooter = this.m_pageFooter;
				}
				finally
				{
					if (this.m_processingContext != null)
					{
						if (this.m_processingContext.ReportRuntime != null)
						{
							this.m_processingContext.ReportRuntime.Close();
						}
						report.RenderingContext.UsedUserProfileState = this.m_processingContext.HasUserProfileState;
					}
					this.m_renderingReport = null;
					this.m_report = null;
					this.m_reportInstance = null;
					this.m_pageReportItems = null;
					this.m_processingContext = null;
					this.m_pageHeader = null;
					this.m_pageFooter = null;
				}
			}

			// Token: 0x06008BAA RID: 35754 RVA: 0x002370C4 File Offset: 0x002352C4
			private void FirstPassInit(int totalPages)
			{
				ReportInstanceInfo reportInstanceInfo = (ReportInstanceInfo)this.m_reportInstance.GetInstanceInfo(this.m_renderingReport.RenderingContext.ChunkManager);
				this.m_processingContext.ReportObjectModel = new ObjectModelImpl(this.m_processingContext);
				Global.Tracer.Assert(this.m_processingContext.ReportRuntime == null, "(m_processingContext.ReportRuntime == null)");
				this.m_processingContext.ReportRuntime = new ReportRuntime(this.m_processingContext.ReportObjectModel, this.m_processingContext.ErrorContext);
				this.m_processingContext.ReportObjectModel.FieldsImpl = new FieldsImpl();
				this.m_processingContext.ReportObjectModel.ParametersImpl = new ParametersImpl(reportInstanceInfo.Parameters.Count);
				this.m_processingContext.ReportObjectModel.GlobalsImpl = new GlobalsImpl(reportInstanceInfo.ReportName, this.m_pageNumber, totalPages, this.m_reportSnapshot.ExecutionTime, this.m_reportSnapshot.ReportServerUrl, this.m_reportSnapshot.ReportFolder);
				this.m_processingContext.ReportObjectModel.UserImpl = new UserImpl(this.m_reportSnapshot.RequestUserName, this.m_reportSnapshot.Language, this.m_processingContext.AllowUserProfileState);
				this.m_processingContext.ReportObjectModel.ReportItemsImpl = new ReportItemsImpl();
				this.m_processingContext.ReportObjectModel.AggregatesImpl = new AggregatesImpl(this.m_processingContext.ReportRuntime);
				this.m_processingContext.ReportObjectModel.DataSetsImpl = new DataSetsImpl();
				this.m_processingContext.ReportObjectModel.DataSourcesImpl = new DataSourcesImpl(this.m_report.DataSourceCount);
				for (int i = 0; i < reportInstanceInfo.Parameters.Count; i++)
				{
					this.m_processingContext.ReportObjectModel.ParametersImpl.Add(reportInstanceInfo.Parameters[i].Name, new ParameterImpl(reportInstanceInfo.Parameters[i].Values, reportInstanceInfo.Parameters[i].Labels, reportInstanceInfo.Parameters[i].MultiValue));
				}
				this.m_processingContext.ReportRuntime.LoadCompiledCode(this.m_report, false, this.m_processingContext.ReportObjectModel, this.m_processingContext.ReportRuntimeSetup);
				if (this.m_processingContext.ReportRuntime.ReportExprHost != null)
				{
					this.m_processingContext.RuntimeInitializeReportItemObjs(this.m_report.ReportItems, true, true);
					if (this.m_report.PageHeader != null)
					{
						if (this.m_processingContext.ReportRuntime.ReportExprHost != null)
						{
							this.m_report.PageHeader.SetExprHost(this.m_processingContext.ReportRuntime.ReportExprHost, this.m_processingContext.ReportObjectModel);
						}
						this.m_processingContext.RuntimeInitializeReportItemObjs(this.m_report.PageHeader.ReportItems, false, false);
					}
					if (this.m_report.PageFooter != null)
					{
						if (this.m_processingContext.ReportRuntime.ReportExprHost != null)
						{
							this.m_report.PageFooter.SetExprHost(this.m_processingContext.ReportRuntime.ReportExprHost, this.m_processingContext.ReportObjectModel);
						}
						this.m_processingContext.RuntimeInitializeReportItemObjs(this.m_report.PageFooter.ReportItems, false, false);
					}
				}
				this.m_aggregates = new AggregatesImpl(this.m_processingContext.ReportRuntime);
				this.m_aggregatesOverReportItems = new Hashtable();
				this.m_processingContext.ReportObjectModel.ReportItemsImpl.SpecialMode = true;
				if (this.m_report.PageAggregates != null)
				{
					for (int j = 0; j < this.m_report.PageAggregates.Count; j++)
					{
						DataAggregateInfo dataAggregateInfo = this.m_report.PageAggregates[j];
						dataAggregateInfo.ExprHostInitialized = false;
						DataAggregateObj dataAggregateObj = new DataAggregateObj(dataAggregateInfo, this.m_processingContext);
						object[] array;
						DataFieldStatus dataFieldStatus;
						dataAggregateObj.EvaluateParameters(out array, out dataFieldStatus);
						string specialModeIndex = this.m_processingContext.ReportObjectModel.ReportItemsImpl.GetSpecialModeIndex();
						if (specialModeIndex == null)
						{
							this.m_aggregates.Add(dataAggregateObj);
						}
						else
						{
							AggregatesImpl aggregatesImpl = (AggregatesImpl)this.m_aggregatesOverReportItems[specialModeIndex];
							if (aggregatesImpl == null)
							{
								aggregatesImpl = new AggregatesImpl(this.m_processingContext.ReportRuntime);
								this.m_aggregatesOverReportItems.Add(specialModeIndex, aggregatesImpl);
							}
							aggregatesImpl.Add(dataAggregateObj);
						}
						dataAggregateObj.Init();
					}
				}
				this.m_processingContext.ReportObjectModel.ReportItemsImpl.SpecialMode = false;
			}

			// Token: 0x06008BAB RID: 35755 RVA: 0x0023751C File Offset: 0x0023571C
			private void FirstPass()
			{
				try
				{
					if (!this.m_report.PageMergeOnePass)
					{
						foreach (object obj in this.m_aggregates.Objects)
						{
							DataAggregateObj dataAggregateObj = (DataAggregateObj)obj;
							this.m_processingContext.ReportObjectModel.AggregatesImpl.Add(dataAggregateObj);
						}
						for (int i = 0; i < this.m_pageReportItems.Count; i++)
						{
							this.FirstPassReportItem(this.m_pageReportItems[i]);
						}
						foreach (object obj2 in this.m_aggregatesOverReportItems.Values)
						{
							foreach (object obj3 in ((AggregatesImpl)obj2).Objects)
							{
								DataAggregateObj dataAggregateObj2 = (DataAggregateObj)obj3;
								this.m_processingContext.ReportObjectModel.AggregatesImpl.Add(dataAggregateObj2);
							}
						}
					}
				}
				finally
				{
					this.m_aggregates = null;
					this.m_aggregatesOverReportItems = null;
				}
			}

			// Token: 0x06008BAC RID: 35756 RVA: 0x002376B0 File Offset: 0x002358B0
			private void FirstPassReportItems(Microsoft.ReportingServices.ReportRendering.ReportItemCollection reportItems)
			{
				if (reportItems == null)
				{
					return;
				}
				for (int i = 0; i < reportItems.Count; i++)
				{
					this.FirstPassReportItem(reportItems[i]);
				}
			}

			// Token: 0x06008BAD RID: 35757 RVA: 0x002376E0 File Offset: 0x002358E0
			private void FirstPassReportItem(Microsoft.ReportingServices.ReportRendering.ReportItem reportItem)
			{
				if (reportItem == null)
				{
					return;
				}
				if (!Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(reportItem.SharedHidden, reportItem.Hidden, reportItem.HasToggle) || !this.m_processingContext.PageSectionContext.IsParentVisible())
				{
					return;
				}
				if (reportItem is Microsoft.ReportingServices.ReportRendering.TextBox)
				{
					TextBoxImpl textBoxImpl = (TextBoxImpl)this.m_processingContext.ReportObjectModel.ReportItemsImpl[reportItem.Name];
					Global.Tracer.Assert(textBoxImpl != null, "(null != textBoxObj)");
					textBoxImpl.SetResult(new VariantResult(false, ((Microsoft.ReportingServices.ReportRendering.TextBox)reportItem).OriginalValue));
				}
				else if (reportItem is Microsoft.ReportingServices.ReportRendering.Rectangle)
				{
					this.FirstPassReportItems(((Microsoft.ReportingServices.ReportRendering.Rectangle)reportItem).ReportItemCollection);
				}
				else if (reportItem is List)
				{
					List list = (List)reportItem;
					if (list.Contents != null)
					{
						for (int i = 0; i < list.Contents.Count; i++)
						{
							ListContent listContent = list.Contents[i];
							if (listContent != null && Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(listContent.SharedHidden, listContent.Hidden, listContent.HasToggle))
							{
								this.FirstPassReportItems(listContent.ReportItemCollection);
							}
						}
					}
				}
				else if (reportItem is Table)
				{
					Table table = (Table)reportItem;
					bool[] array = new bool[table.Columns.Count];
					for (int j = 0; j < array.Length; j++)
					{
						array[j] = Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(table.Columns[j].SharedHidden, table.Columns[j].Hidden, table.Columns[j].HasToggle);
					}
					this.FirstPassTableGroups(array, table.TableHeader, table.DetailRows, table.TableGroups, table.TableFooter);
				}
				else if (reportItem is Matrix)
				{
					Matrix matrix = (Matrix)reportItem;
					this.FirstPassReportItem(matrix.Corner);
					bool[] array2 = new bool[matrix.CellRows];
					bool[] array3 = new bool[matrix.CellColumns];
					this.FirstPassMatrixHeadings(matrix.ColumnMemberCollection, true, ref array3);
					this.FirstPassMatrixHeadings(matrix.RowMemberCollection, false, ref array2);
					if (matrix.CellCollection != null)
					{
						for (int k = 0; k < matrix.CellRows; k++)
						{
							if (array2[k])
							{
								for (int l = 0; l < matrix.CellColumns; l++)
								{
									if (array3[l])
									{
										this.FirstPassReportItem(matrix.CellCollection[k, l].ReportItem);
									}
								}
							}
						}
					}
				}
				AggregatesImpl aggregatesImpl = null;
				if (reportItem.Name != null)
				{
					aggregatesImpl = (AggregatesImpl)this.m_aggregatesOverReportItems[reportItem.Name];
				}
				if (aggregatesImpl != null)
				{
					foreach (object obj in aggregatesImpl.Objects)
					{
						((DataAggregateObj)obj).Update();
					}
				}
			}

			// Token: 0x06008BAE RID: 35758 RVA: 0x002379D8 File Offset: 0x00235BD8
			private void FirstPassTableRow(bool[] tableColumnsVisible, TableRow row)
			{
				if (row != null && row.TableCellCollection != null && Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(row.SharedHidden, row.Hidden, row.HasToggle))
				{
					int count = row.TableCellCollection.Count;
					Global.Tracer.Assert(count <= tableColumnsVisible.Length, "(cellCount <= tableColumnsVisible.Length)");
					int num = 0;
					for (int i = 0; i < count; i++)
					{
						int colSpan = row.TableCellCollection[i].ColSpan;
						if (Microsoft.ReportingServices.ReportProcessing.Visibility.IsTableCellVisible(tableColumnsVisible, num, colSpan))
						{
							this.FirstPassReportItem(row.TableCellCollection[i].ReportItem);
						}
						num += colSpan;
					}
				}
			}

			// Token: 0x06008BAF RID: 35759 RVA: 0x00237A78 File Offset: 0x00235C78
			private void FirstPassTableGroups(bool[] tableColumnsVisible, TableHeaderFooterRows header, TableRowsCollection detailRows, TableGroupCollection subGroups, TableHeaderFooterRows footer)
			{
				if (header != null)
				{
					for (int i = 0; i < header.Count; i++)
					{
						this.FirstPassTableRow(tableColumnsVisible, header[i]);
					}
				}
				Global.Tracer.Assert(detailRows == null || subGroups == null);
				if (detailRows != null)
				{
					for (int j = 0; j < detailRows.Count; j++)
					{
						if (detailRows[j] != null)
						{
							for (int k = 0; k < detailRows[j].Count; k++)
							{
								this.FirstPassTableRow(tableColumnsVisible, detailRows[j][k]);
							}
						}
					}
				}
				if (subGroups != null)
				{
					for (int l = 0; l < subGroups.Count; l++)
					{
						if (subGroups[l] != null)
						{
							this.FirstPassTableGroups(tableColumnsVisible, subGroups[l].GroupHeader, subGroups[l].DetailRows, subGroups[l].SubGroups, subGroups[l].GroupFooter);
						}
					}
				}
				if (footer != null)
				{
					for (int m = 0; m < footer.Count; m++)
					{
						this.FirstPassTableRow(tableColumnsVisible, footer[m]);
					}
				}
			}

			// Token: 0x06008BB0 RID: 35760 RVA: 0x00237B8C File Offset: 0x00235D8C
			private void FirstPassMatrixHeadings(MatrixMemberCollection headings, bool isColumn, ref bool[] cellsCanGetReferenced)
			{
				if (headings != null)
				{
					for (int i = 0; i < headings.Count; i++)
					{
						MatrixMember matrixMember = headings[i];
						if (matrixMember != null)
						{
							this.m_processingContext.PageSectionContext.EnterMatrixHeadingScope(Microsoft.ReportingServices.ReportProcessing.Visibility.IsVisible(matrixMember.SharedHidden, matrixMember.Hidden, matrixMember.HasToggle), isColumn);
							this.FirstPassReportItem(matrixMember.ReportItem);
							if (matrixMember.IsTotal)
							{
								this.m_processingContext.PageSectionContext.EnterMatrixSubtotalScope(isColumn);
							}
							int num = (isColumn ? matrixMember.ColumnSpan : matrixMember.RowSpan);
							Global.Tracer.Assert(cellsCanGetReferenced != null && matrixMember.MemberCellIndex >= 0 && num > 0 && matrixMember.MemberCellIndex + num <= cellsCanGetReferenced.Length);
							for (int j = 0; j < num; j++)
							{
								cellsCanGetReferenced[matrixMember.MemberCellIndex + j] = this.m_processingContext.PageSectionContext.IsParentVisible();
							}
							this.FirstPassMatrixHeadings(matrixMember.Children, isColumn, ref cellsCanGetReferenced);
							if (matrixMember.IsTotal)
							{
								this.m_processingContext.PageSectionContext.ExitMatrixHeadingScope(isColumn);
							}
							this.m_processingContext.PageSectionContext.ExitMatrixHeadingScope(isColumn);
						}
					}
				}
			}

			// Token: 0x06008BB1 RID: 35761 RVA: 0x00237CB4 File Offset: 0x00235EB4
			private void SecondPass()
			{
				if (!this.m_report.PageHeaderEvaluation)
				{
					this.m_pageHeader = null;
				}
				else
				{
					PageSectionInstance pageSectionInstance = new PageSectionInstance(this.m_processingContext, this.m_pageNumber, this.m_report.PageHeader);
					ReportProcessing.PageMerge.CreateInstances(this.m_processingContext, pageSectionInstance.ReportItemColInstance, this.m_report.PageHeader.ReportItems);
					string text = this.m_pageNumber.ToString(CultureInfo.InvariantCulture) + "ph";
					Microsoft.ReportingServices.ReportRendering.RenderingContext renderingContext = new Microsoft.ReportingServices.ReportRendering.RenderingContext(this.m_renderingReport.RenderingContext, text);
					this.m_pageHeader = new Microsoft.ReportingServices.ReportRendering.PageSection(text, this.m_report.PageHeader, pageSectionInstance, this.m_renderingReport, renderingContext, false);
				}
				if (!this.m_report.PageFooterEvaluation)
				{
					this.m_pageFooter = null;
					return;
				}
				PageSectionInstance pageSectionInstance2 = new PageSectionInstance(this.m_processingContext, this.m_pageNumber, this.m_report.PageFooter);
				ReportProcessing.PageMerge.CreateInstances(this.m_processingContext, pageSectionInstance2.ReportItemColInstance, this.m_report.PageFooter.ReportItems);
				string text2 = this.m_pageNumber.ToString(CultureInfo.InvariantCulture) + "pf";
				Microsoft.ReportingServices.ReportRendering.RenderingContext renderingContext2 = new Microsoft.ReportingServices.ReportRendering.RenderingContext(this.m_renderingReport.RenderingContext, text2);
				this.m_pageFooter = new Microsoft.ReportingServices.ReportRendering.PageSection(text2, this.m_report.PageFooter, pageSectionInstance2, this.m_renderingReport, renderingContext2, false);
			}

			// Token: 0x06008BB2 RID: 35762 RVA: 0x00237E0C File Offset: 0x0023600C
			internal static void CreateInstances(ReportProcessing.ProcessingContext processingContext, ReportItemColInstance collectionInstance, Microsoft.ReportingServices.ReportProcessing.ReportItemCollection reportItemsDef)
			{
				if (reportItemsDef.ComputedReportItems == null)
				{
					return;
				}
				ReportItemInstance reportItemInstance = null;
				for (int i = 0; i < reportItemsDef.ComputedReportItems.Count; i++)
				{
					Microsoft.ReportingServices.ReportProcessing.ReportItem reportItem = reportItemsDef.ComputedReportItems[i];
					if (reportItem is Microsoft.ReportingServices.ReportProcessing.TextBox)
					{
						reportItemInstance = ReportProcessing.RuntimeRICollection.CreateTextBoxInstance((Microsoft.ReportingServices.ReportProcessing.TextBox)reportItem, processingContext, i, null);
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Line)
					{
						reportItemInstance = ReportProcessing.RuntimeRICollection.CreateLineInstance((Microsoft.ReportingServices.ReportProcessing.Line)reportItem, processingContext, i);
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Image)
					{
						reportItemInstance = ReportProcessing.RuntimeRICollection.CreateImageInstance((Microsoft.ReportingServices.ReportProcessing.Image)reportItem, processingContext, i);
					}
					else if (reportItem is ActiveXControl)
					{
						reportItemInstance = ReportProcessing.RuntimeRICollection.CreateActiveXControlInstance((ActiveXControl)reportItem, processingContext, i);
					}
					else if (reportItem is Microsoft.ReportingServices.ReportProcessing.Rectangle)
					{
						Microsoft.ReportingServices.ReportProcessing.Rectangle rectangle = (Microsoft.ReportingServices.ReportProcessing.Rectangle)reportItem;
						RectangleInstance rectangleInstance = new RectangleInstance(processingContext, rectangle, i);
						ReportProcessing.PageMerge.CreateInstances(processingContext, rectangleInstance.ReportItemColInstance, rectangle.ReportItems);
						reportItemInstance = rectangleInstance;
					}
					if (reportItemInstance != null)
					{
						collectionInstance.Add(reportItemInstance);
					}
				}
			}

			// Token: 0x040049D1 RID: 18897
			private int m_pageNumber;

			// Token: 0x040049D2 RID: 18898
			private Microsoft.ReportingServices.ReportRendering.Report m_renderingReport;

			// Token: 0x040049D3 RID: 18899
			private ReportSnapshot m_reportSnapshot;

			// Token: 0x040049D4 RID: 18900
			private Microsoft.ReportingServices.ReportProcessing.Report m_report;

			// Token: 0x040049D5 RID: 18901
			private Microsoft.ReportingServices.ReportProcessing.ReportInstance m_reportInstance;

			// Token: 0x040049D6 RID: 18902
			private PageReportItems m_pageReportItems;

			// Token: 0x040049D7 RID: 18903
			private ReportProcessing.ProcessingContext m_processingContext;

			// Token: 0x040049D8 RID: 18904
			private Microsoft.ReportingServices.ReportRendering.PageSection m_pageHeader;

			// Token: 0x040049D9 RID: 18905
			private Microsoft.ReportingServices.ReportRendering.PageSection m_pageFooter;

			// Token: 0x040049DA RID: 18906
			private AggregatesImpl m_aggregates;

			// Token: 0x040049DB RID: 18907
			private Hashtable m_aggregatesOverReportItems;
		}

		// Token: 0x02000C81 RID: 3201
		// (Invoke) Token: 0x06008BB5 RID: 35765
		public delegate bool CheckSharedDataSet(string dataSetPath, out Guid catalogItemId);

		// Token: 0x02000C82 RID: 3202
		// (Invoke) Token: 0x06008BB9 RID: 35769
		public delegate void ResolveTemporaryDataSet(DataSetInfo dataSetInfo, DataSetInfoCollection originalDataSets);

		// Token: 0x02000C83 RID: 3203
		internal sealed class CustomReportItemControls
		{
			// Token: 0x06008BBC RID: 35772 RVA: 0x00237EEF File Offset: 0x002360EF
			internal CustomReportItemControls()
			{
				this.m_controls = new Hashtable();
			}

			// Token: 0x06008BBD RID: 35773 RVA: 0x00237F04 File Offset: 0x00236104
			internal Microsoft.ReportingServices.ReportRendering.ICustomReportItem GetControlInstance(string name, IExtensionFactory extFactory)
			{
				Microsoft.ReportingServices.ReportRendering.ICustomReportItem customReportItem2;
				lock (this)
				{
					ReportProcessing.CustomReportItemControls.CustomControlInfo customControlInfo = this.m_controls[name] as ReportProcessing.CustomReportItemControls.CustomControlInfo;
					if (customControlInfo == null)
					{
						Global.Tracer.Assert(extFactory != null, "extFactory != null");
						Microsoft.ReportingServices.ReportRendering.ICustomReportItem customReportItem = extFactory.GetNewCustomReportItemProcessingInstanceClass(name) as Microsoft.ReportingServices.ReportRendering.ICustomReportItem;
						customControlInfo = new ReportProcessing.CustomReportItemControls.CustomControlInfo();
						customControlInfo.Instance = customReportItem;
						customControlInfo.IsValid = customReportItem != null;
						this.m_controls.Add(name, customControlInfo);
					}
					Global.Tracer.Assert(customControlInfo != null);
					if (customControlInfo.IsValid)
					{
						customReportItem2 = customControlInfo.Instance;
					}
					else
					{
						customReportItem2 = null;
					}
				}
				return customReportItem2;
			}

			// Token: 0x040049DC RID: 18908
			private Hashtable m_controls;

			// Token: 0x02000D46 RID: 3398
			private class CustomControlInfo
			{
				// Token: 0x17002C1C RID: 11292
				// (get) Token: 0x06008FCC RID: 36812 RVA: 0x00247E2C File Offset: 0x0024602C
				// (set) Token: 0x06008FCD RID: 36813 RVA: 0x00247E34 File Offset: 0x00246034
				internal bool IsValid
				{
					get
					{
						return this.m_valid;
					}
					set
					{
						this.m_valid = value;
					}
				}

				// Token: 0x17002C1D RID: 11293
				// (get) Token: 0x06008FCE RID: 36814 RVA: 0x00247E3D File Offset: 0x0024603D
				// (set) Token: 0x06008FCF RID: 36815 RVA: 0x00247E45 File Offset: 0x00246045
				internal Microsoft.ReportingServices.ReportRendering.ICustomReportItem Instance
				{
					get
					{
						return this.m_instance;
					}
					set
					{
						this.m_instance = value;
					}
				}

				// Token: 0x040050F7 RID: 20727
				private bool m_valid;

				// Token: 0x040050F8 RID: 20728
				private Microsoft.ReportingServices.ReportRendering.ICustomReportItem m_instance;
			}
		}

		// Token: 0x02000C84 RID: 3204
		private abstract class RuntimeTablixObj : ReportProcessing.RuntimeRDLDataRegionObj
		{
			// Token: 0x06008BBE RID: 35774 RVA: 0x00237FBC File Offset: 0x002361BC
			internal RuntimeTablixObj(ReportProcessing.IScope outerScope, Microsoft.ReportingServices.ReportProcessing.Tablix tablixDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, bool onePassProcess)
				: base(outerScope, tablixDef, ref dataAction, processingContext, onePassProcess, tablixDef.RunningValues)
			{
				this.m_outerScope = outerScope;
				this.m_tablixDef = tablixDef;
			}

			// Token: 0x17002B0E RID: 11022
			// (get) Token: 0x06008BBF RID: 35775 RVA: 0x00237FDF File Offset: 0x002361DF
			protected override ReportProcessing.IScope OuterScope
			{
				get
				{
					return this.m_outerScope;
				}
			}

			// Token: 0x17002B0F RID: 11023
			// (get) Token: 0x06008BC0 RID: 35776 RVA: 0x00237FE7 File Offset: 0x002361E7
			protected override string ScopeName
			{
				get
				{
					return this.m_tablixDef.Name;
				}
			}

			// Token: 0x17002B10 RID: 11024
			// (get) Token: 0x06008BC1 RID: 35777 RVA: 0x00237FF4 File Offset: 0x002361F4
			protected override Microsoft.ReportingServices.ReportProcessing.DataRegion DataRegionDef
			{
				get
				{
					return this.m_tablixDef;
				}
			}

			// Token: 0x17002B11 RID: 11025
			// (get) Token: 0x06008BC2 RID: 35778 RVA: 0x00237FFC File Offset: 0x002361FC
			internal int[] OuterGroupingCounters
			{
				get
				{
					return this.m_outerGroupingCounters;
				}
			}

			// Token: 0x06008BC3 RID: 35779 RVA: 0x00238004 File Offset: 0x00236204
			protected void ConstructorHelper(ref ReportProcessing.DataActions dataAction, bool onePassProcess, out bool handleMyDataAction, out ReportProcessing.DataActions innerDataAction, out TablixHeadingList outermostColumns, out TablixHeadingList outermostRows, out TablixHeadingList staticColumns, out TablixHeadingList staticRows)
			{
				if (this.m_tablixDef.Filters != null)
				{
					this.m_filters = new Filters(Filters.FilterTypes.DataRegionFilter, this, this.m_tablixDef.Filters, this.m_tablixDef.ObjectType, this.m_tablixDef.Name, this.m_processingContext);
				}
				else
				{
					this.m_outerDataAction = dataAction;
					this.m_dataAction = dataAction;
					dataAction = ReportProcessing.DataActions.None;
				}
				this.m_tablixDef.GetHeadingDefState(out outermostColumns, out outermostRows, out staticColumns, out staticRows);
				innerDataAction = this.m_dataAction;
				handleMyDataAction = false;
				bool flag = false;
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_tablixDef.Aggregates, ref this.m_nonCustomAggregates, ref this.m_customAggregates);
				if (onePassProcess)
				{
					flag = true;
					if (this.m_tablixDef.RunningValues != null && 0 < this.m_tablixDef.RunningValues.Count)
					{
						ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_tablixDef.RunningValues, ref this.m_nonCustomAggregates);
					}
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_tablixDef.PostSortAggregates, ref this.m_nonCustomAggregates);
					Global.Tracer.Assert(outermostRows == null && outermostColumns == null);
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_tablixDef.CellPostSortAggregates, ref this.m_nonCustomAggregates);
				}
				else
				{
					if (this.m_tablixDef.RunningValues != null && 0 < this.m_tablixDef.RunningValues.Count)
					{
						this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
					}
					if (this.m_tablixDef.PostSortAggregates != null)
					{
						ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_tablixDef.PostSortAggregates, ref this.m_postSortAggregates);
						handleMyDataAction = true;
					}
					if (outermostRows == null && outermostColumns == null)
					{
						flag = true;
						if (this.m_tablixDef.CellPostSortAggregates != null)
						{
							ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_tablixDef.CellPostSortAggregates, ref this.m_postSortAggregates);
							handleMyDataAction = true;
						}
					}
					if (handleMyDataAction)
					{
						this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
						innerDataAction = ReportProcessing.DataActions.None;
					}
					else
					{
						innerDataAction = this.m_dataAction;
					}
				}
				if (flag)
				{
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, this.m_tablixDef.CellAggregates, ref this.m_nonCustomAggregates, ref this.m_customAggregates);
					RunningValueInfoList tablixCellRunningValues = this.m_tablixDef.TablixCellRunningValues;
					if (tablixCellRunningValues != null && 0 < tablixCellRunningValues.Count)
					{
						if (this.m_nonCustomAggregates == null)
						{
							this.m_nonCustomAggregates = new DataAggregateObjList();
						}
						for (int i = 0; i < tablixCellRunningValues.Count; i++)
						{
							this.m_nonCustomAggregates.Add(new DataAggregateObj(tablixCellRunningValues[i], this.m_processingContext));
						}
					}
				}
				int num = this.m_tablixDef.CreateOuterGroupingIndexList();
				this.m_outerGroupingCounters = new int[num];
				for (int j = 0; j < this.m_outerGroupingCounters.Length; j++)
				{
					this.m_outerGroupingCounters[j] = -1;
				}
			}

			// Token: 0x06008BC4 RID: 35780 RVA: 0x002382AE File Offset: 0x002364AE
			protected void HandleDataAction(bool handleMyDataAction, ReportProcessing.DataActions innerDataAction)
			{
				if (!handleMyDataAction)
				{
					this.m_dataAction = innerDataAction;
				}
				if (this.m_dataAction != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x06008BC5 RID: 35781 RVA: 0x002382D0 File Offset: 0x002364D0
			protected override void SendToInner()
			{
				this.m_tablixDef.RuntimeDataRegionObj = this;
				this.m_tablixDef.ResetOutergGroupingAggregateRowInfo();
				this.m_tablixDef.SaveTablixAggregateRowInfo(this.m_processingContext);
				if (this.m_outerGroupings != null)
				{
					this.m_outerGroupings.NextRow();
				}
				this.m_tablixDef.RestoreTablixAggregateRowInfo(this.m_processingContext);
				if (this.m_innerGroupings != null)
				{
					this.m_innerGroupings.NextRow();
				}
			}

			// Token: 0x06008BC6 RID: 35782 RVA: 0x0023833C File Offset: 0x0023653C
			internal override bool SortAndFilter()
			{
				this.SetupEnvironment();
				if (this.m_tablixRows != null)
				{
					this.m_tablixRows.SortAndFilter();
				}
				if (this.m_tablixColumns != null)
				{
					this.m_tablixColumns.SortAndFilter();
				}
				return base.SortAndFilter();
			}

			// Token: 0x06008BC7 RID: 35783 RVA: 0x00238374 File Offset: 0x00236574
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_tablixDef.RunningValues != null && this.m_runningValues == null)
				{
					ReportProcessing.RuntimeDetailObj.AddRunningValues(this.m_processingContext, this.m_tablixDef.RunningValues, ref this.m_runningValues, globalRVCol, groupCol, lastGroup);
				}
				if (this.m_dataRows != null)
				{
					base.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
					this.m_dataRows = null;
				}
				if (this.m_outerGroupings != null)
				{
					this.m_outerGroupings.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
				if ((this.m_outerGroupings == null || this.m_outerGroupings.Headings == null) && this.m_innerGroupings != null)
				{
					this.m_innerGroupings.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
			}

			// Token: 0x06008BC8 RID: 35784 RVA: 0x0023840C File Offset: 0x0023660C
			protected virtual void CalculatePreviousAggregates()
			{
				if (!this.m_processedPreviousAggregates && this.m_processingContext.GlobalRVCollection != null)
				{
					Global.Tracer.Assert(this.m_runningValueValues == null);
					AggregatesImpl globalRVCollection = this.m_processingContext.GlobalRVCollection;
					RunningValueInfoList runningValues = this.m_tablixDef.RunningValues;
					ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCollection, runningValues, ref this.m_runningValueValues, true);
					if (this.m_tablixRows != null)
					{
						this.m_tablixRows.CalculatePreviousAggregates(globalRVCollection);
					}
					if (this.m_tablixColumns != null)
					{
						this.m_tablixColumns.CalculatePreviousAggregates(globalRVCollection);
					}
					this.m_processedPreviousAggregates = true;
				}
			}

			// Token: 0x06008BC9 RID: 35785 RVA: 0x00238498 File Offset: 0x00236698
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (!this.m_tablixDef.ProcessCellRunningValues)
				{
					if (ReportProcessing.DataActions.UserSort == dataAction)
					{
						ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
						base.CommonNextRow(this.m_dataRows);
						return;
					}
					if (ReportProcessing.DataActions.PostSortAggregates == dataAction)
					{
						if (this.m_postSortAggregates != null)
						{
							ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_postSortAggregates, false);
						}
						if (this.m_runningValues != null)
						{
							for (int i = 0; i < this.m_runningValues.Count; i++)
							{
								this.m_runningValues[i].Update();
							}
						}
						this.CalculatePreviousAggregates();
					}
					if (this.m_outerScope != null && (dataAction & this.m_outerDataAction) != ReportProcessing.DataActions.None)
					{
						this.m_outerScope.ReadRow(dataAction);
					}
				}
			}

			// Token: 0x06008BCA RID: 35786 RVA: 0x00238558 File Offset: 0x00236758
			internal override void SetupEnvironment()
			{
				base.SetupEnvironment(this.m_tablixDef.RunningValues);
			}

			// Token: 0x06008BCB RID: 35787 RVA: 0x0023856B File Offset: 0x0023676B
			internal override bool InScope(string scope)
			{
				return base.DataRegionInScope(this.m_tablixDef, scope);
			}

			// Token: 0x06008BCC RID: 35788 RVA: 0x0023857A File Offset: 0x0023677A
			protected override int GetRecursiveLevel(string scope)
			{
				return base.DataRegionRecursiveLevel(this.m_tablixDef, scope);
			}

			// Token: 0x040049DD RID: 18909
			protected Microsoft.ReportingServices.ReportProcessing.Tablix m_tablixDef;

			// Token: 0x040049DE RID: 18910
			protected ReportProcessing.RuntimeTablixHeadingsObj m_tablixRows;

			// Token: 0x040049DF RID: 18911
			protected ReportProcessing.RuntimeTablixHeadingsObj m_tablixColumns;

			// Token: 0x040049E0 RID: 18912
			protected ReportProcessing.RuntimeTablixHeadingsObj m_outerGroupings;

			// Token: 0x040049E1 RID: 18913
			protected ReportProcessing.RuntimeTablixHeadingsObj m_innerGroupings;

			// Token: 0x040049E2 RID: 18914
			protected int[] m_outerGroupingCounters;
		}

		// Token: 0x02000C85 RID: 3205
		internal abstract class RuntimeTablixHeadingsObj
		{
			// Token: 0x06008BCD RID: 35789 RVA: 0x00238589 File Offset: 0x00236789
			internal RuntimeTablixHeadingsObj(ReportProcessing.IScope owner, TablixHeadingList headingDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, TablixHeadingList staticHeadingDef, ReportProcessing.RuntimeTablixHeadingsObj innerGroupings, int headingLevel)
			{
				this.m_owner = owner;
				if (staticHeadingDef != null)
				{
					this.m_staticHeadingDef = staticHeadingDef;
				}
			}

			// Token: 0x17002B12 RID: 11026
			// (get) Token: 0x06008BCE RID: 35790 RVA: 0x002385A4 File Offset: 0x002367A4
			internal ReportProcessing.RuntimeTablixGroupRootObj Headings
			{
				get
				{
					return this.m_tablixHeadings;
				}
			}

			// Token: 0x06008BCF RID: 35791 RVA: 0x002385AC File Offset: 0x002367AC
			internal virtual void NextRow()
			{
				if (this.m_tablixHeadings != null)
				{
					this.m_tablixHeadings.NextRow();
				}
			}

			// Token: 0x06008BD0 RID: 35792 RVA: 0x002385C1 File Offset: 0x002367C1
			internal virtual bool SortAndFilter()
			{
				return this.m_tablixHeadings == null || this.m_tablixHeadings.SortAndFilter();
			}

			// Token: 0x06008BD1 RID: 35793 RVA: 0x002385D8 File Offset: 0x002367D8
			internal virtual void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_tablixHeadings != null)
				{
					this.m_tablixHeadings.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				}
			}

			// Token: 0x06008BD2 RID: 35794
			internal abstract void CalculatePreviousAggregates(AggregatesImpl globalRVCol);

			// Token: 0x040049E3 RID: 18915
			protected ReportProcessing.IScope m_owner;

			// Token: 0x040049E4 RID: 18916
			protected ReportProcessing.RuntimeTablixGroupRootObj m_tablixHeadings;

			// Token: 0x040049E5 RID: 18917
			protected TablixHeadingList m_staticHeadingDef;
		}

		// Token: 0x02000C86 RID: 3206
		internal abstract class RuntimeTablixGroupRootObj : ReportProcessing.RuntimeGroupRootObj
		{
			// Token: 0x06008BD3 RID: 35795 RVA: 0x002385F0 File Offset: 0x002367F0
			internal RuntimeTablixGroupRootObj(ReportProcessing.IScope outerScope, TablixHeadingList tablixHeadingDef, int headingIndex, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, ReportProcessing.RuntimeTablixHeadingsObj innerGroupings, bool outermostSubtotal, int headingLevel)
				: base(outerScope, tablixHeadingDef[headingIndex], dataAction, processingContext)
			{
				Microsoft.ReportingServices.ReportProcessing.Tablix tablix = (Microsoft.ReportingServices.ReportProcessing.Tablix)tablixHeadingDef[headingIndex].DataRegionDef;
				Global.Tracer.Assert(tablixHeadingDef != null && headingIndex < tablixHeadingDef.Count && 0 <= headingIndex);
				this.m_headingIndex = headingIndex;
				this.m_innerHeading = ((CustomReportItemHeadingList)tablixHeadingDef)[headingIndex].InnerHeadings;
				tablix.SkipStaticHeading(ref this.m_innerHeading, ref this.m_staticHeadingDef);
				if (outermostSubtotal && this.m_innerHeading == null)
				{
					this.m_processOutermostSTCells = true;
					if (tablix.CellPostSortAggregates != null)
					{
						this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
					}
				}
				this.NeedProcessDataActions(tablixHeadingDef);
				this.NeedProcessDataActions(this.m_staticHeadingDef);
				this.m_outermostSubtotal = outermostSubtotal;
				this.m_innerGroupings = innerGroupings;
				this.m_headingLevel = headingLevel;
				if (tablixHeadingDef[headingIndex].Grouping.Filters == null)
				{
					dataAction = ReportProcessing.DataActions.None;
				}
			}

			// Token: 0x17002B13 RID: 11027
			// (get) Token: 0x06008BD4 RID: 35796 RVA: 0x002386E4 File Offset: 0x002368E4
			internal ReportProcessing.RuntimeTablixHeadingsObj InnerGroupings
			{
				get
				{
					return this.m_innerGroupings;
				}
			}

			// Token: 0x17002B14 RID: 11028
			// (get) Token: 0x06008BD5 RID: 35797 RVA: 0x002386EC File Offset: 0x002368EC
			internal TablixHeadingList StaticHeadingDef
			{
				get
				{
					return this.m_staticHeadingDef;
				}
			}

			// Token: 0x17002B15 RID: 11029
			// (get) Token: 0x06008BD6 RID: 35798 RVA: 0x002386F4 File Offset: 0x002368F4
			internal bool OutermostSubtotal
			{
				get
				{
					return this.m_outermostSubtotal;
				}
			}

			// Token: 0x17002B16 RID: 11030
			// (get) Token: 0x06008BD7 RID: 35799 RVA: 0x002386FC File Offset: 0x002368FC
			internal TablixHeadingList InnerHeading
			{
				get
				{
					return this.m_innerHeading;
				}
			}

			// Token: 0x17002B17 RID: 11031
			// (get) Token: 0x06008BD8 RID: 35800 RVA: 0x00238704 File Offset: 0x00236904
			internal bool ProcessOutermostSTCells
			{
				get
				{
					return this.m_processOutermostSTCells;
				}
			}

			// Token: 0x17002B18 RID: 11032
			// (get) Token: 0x06008BD9 RID: 35801 RVA: 0x0023870C File Offset: 0x0023690C
			internal AggregatesImpl OutermostSTCellRVCol
			{
				get
				{
					return ((TablixHeading)this.m_hierarchyDef).OutermostSTCellRVCol;
				}
			}

			// Token: 0x17002B19 RID: 11033
			// (get) Token: 0x06008BDA RID: 35802 RVA: 0x0023871E File Offset: 0x0023691E
			internal AggregatesImpl[] OutermostSTScopedCellRVCollections
			{
				get
				{
					return ((TablixHeading)this.m_hierarchyDef).OutermostSTCellScopedRVCollections;
				}
			}

			// Token: 0x17002B1A RID: 11034
			// (get) Token: 0x06008BDB RID: 35803 RVA: 0x00238730 File Offset: 0x00236930
			internal AggregatesImpl CellRVCol
			{
				get
				{
					return ((TablixHeading)this.m_hierarchyDef).CellRVCol;
				}
			}

			// Token: 0x17002B1B RID: 11035
			// (get) Token: 0x06008BDC RID: 35804 RVA: 0x00238742 File Offset: 0x00236942
			internal AggregatesImpl[] CellScopedRVCollections
			{
				get
				{
					return ((TablixHeading)this.m_hierarchyDef).CellScopedRVCollections;
				}
			}

			// Token: 0x17002B1C RID: 11036
			// (get) Token: 0x06008BDD RID: 35805 RVA: 0x00238754 File Offset: 0x00236954
			internal int HeadingLevel
			{
				get
				{
					return this.m_headingLevel;
				}
			}

			// Token: 0x17002B1D RID: 11037
			// (get) Token: 0x06008BDE RID: 35806 RVA: 0x0023875C File Offset: 0x0023695C
			internal object CurrentGroupExpressionValue
			{
				get
				{
					return this.m_currentGroupExprValue;
				}
			}

			// Token: 0x06008BDF RID: 35807
			protected abstract void NeedProcessDataActions(TablixHeadingList heading);

			// Token: 0x06008BE0 RID: 35808 RVA: 0x00238764 File Offset: 0x00236964
			protected void NeedProcessDataActions(RunningValueInfoList runningValues)
			{
				if ((this.m_dataAction & ReportProcessing.DataActions.PostSortAggregates) != ReportProcessing.DataActions.None)
				{
					return;
				}
				if (runningValues != null && 0 < runningValues.Count)
				{
					this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
				}
			}

			// Token: 0x06008BE1 RID: 35809 RVA: 0x0023878C File Offset: 0x0023698C
			internal override void NextRow()
			{
				if (base.ProcessThisRow())
				{
					this.m_currentGroupExprValue = base.EvaluateGroupExpression(this.m_expression, "Group");
					Grouping grouping = this.m_hierarchyDef.Grouping;
					if (this.m_saveGroupExprValues)
					{
						grouping.CurrentGroupExpressionValues = new VariantList();
						grouping.CurrentGroupExpressionValues.Add(this.m_currentGroupExprValue);
					}
					object obj = null;
					bool flag = this.m_parentExpression != null;
					if (flag)
					{
						obj = base.EvaluateGroupExpression(this.m_parentExpression, "Parent");
					}
					Global.Tracer.Assert(this.m_grouping != null);
					this.m_grouping.NextRow(this.m_currentGroupExprValue, flag, obj);
				}
			}

			// Token: 0x06008BE2 RID: 35810 RVA: 0x00238834 File Offset: 0x00236A34
			internal override bool SortAndFilter()
			{
				Microsoft.ReportingServices.ReportProcessing.Tablix tablix = (Microsoft.ReportingServices.ReportProcessing.Tablix)this.m_hierarchyDef.DataRegionDef;
				TablixHeading tablixHeading = (TablixHeading)this.m_hierarchyDef;
				Global.Tracer.Assert(this.m_hierarchyDef.Grouping != null);
				if ((ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) != (ReportProcessing.ProcessingContext.SecondPassOperations)0 && this.m_hierarchyDef.Grouping.Filters == null && ((tablixHeading.IsColumn && this.m_headingLevel < tablix.InnermostColumnFilterLevel) || (!tablixHeading.IsColumn && this.m_headingLevel < tablix.InnermostRowFilterLevel)))
				{
					tablixHeading.Grouping.HasInnerFilters = true;
				}
				bool flag = base.SortAndFilter();
				tablixHeading.Grouping.HasInnerFilters = false;
				return flag;
			}

			// Token: 0x06008BE3 RID: 35811 RVA: 0x002388E4 File Offset: 0x00236AE4
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				Microsoft.ReportingServices.ReportProcessing.Tablix tablix = (Microsoft.ReportingServices.ReportProcessing.Tablix)this.m_hierarchyDef.DataRegionDef;
				TablixHeading tablixHeading = (TablixHeading)this.m_hierarchyDef;
				AggregatesImpl outermostSTCellRVCol = tablixHeading.OutermostSTCellRVCol;
				AggregatesImpl[] outermostSTCellScopedRVCollections = tablixHeading.OutermostSTCellScopedRVCollections;
				if (this.SetupCellRunningValues(ref outermostSTCellRVCol, ref outermostSTCellScopedRVCollections))
				{
					tablixHeading.OutermostSTCellRVCol = outermostSTCellRVCol;
					tablixHeading.OutermostSTCellScopedRVCollections = outermostSTCellScopedRVCollections;
				}
				if (this.m_processOutermostSTCells)
				{
					if (this.m_innerGroupings != null)
					{
						tablix.CurrentOuterHeadingGroupRoot = this;
					}
					this.m_processingContext.EnterPivotCell(this.m_innerGroupings != null);
					tablix.ProcessOutermostSTCellRunningValues = true;
					this.AddCellRunningValues(outermostSTCellRVCol, groupCol, ref this.m_outermostSTCellRVs);
					tablix.ProcessOutermostSTCellRunningValues = false;
					this.m_processingContext.ExitPivotCell();
				}
				if (this.m_innerGroupings != null)
				{
					AggregatesImpl cellRVCol = tablixHeading.CellRVCol;
					AggregatesImpl[] cellScopedRVCollections = tablixHeading.CellScopedRVCollections;
					if (this.SetupCellRunningValues(ref cellRVCol, ref cellScopedRVCollections))
					{
						tablixHeading.CellRVCol = cellRVCol;
						tablixHeading.CellScopedRVCollections = cellScopedRVCollections;
						return;
					}
				}
				else
				{
					ReportProcessing.RuntimeTablixGroupRootObj currentOuterHeadingGroupRoot = tablix.CurrentOuterHeadingGroupRoot;
					if (this.m_innerHeading == null && currentOuterHeadingGroupRoot != null)
					{
						this.m_processingContext.EnterPivotCell(true);
						tablix.ProcessCellRunningValues = true;
						this.m_cellRVs = null;
						this.AddCellRunningValues(currentOuterHeadingGroupRoot.CellRVCol, groupCol, ref this.m_cellRVs);
						tablix.ProcessCellRunningValues = false;
						this.m_processingContext.ExitPivotCell();
					}
				}
			}

			// Token: 0x06008BE4 RID: 35812 RVA: 0x00238A1A File Offset: 0x00236C1A
			private bool SetupCellRunningValues(ref AggregatesImpl globalCellRVCol, ref AggregatesImpl[] cellScopedRVLists)
			{
				if (globalCellRVCol == null || cellScopedRVLists == null)
				{
					globalCellRVCol = new AggregatesImpl(this.m_processingContext.ReportRuntime);
					cellScopedRVLists = this.CreateScopedCellRVCollections();
					return true;
				}
				return false;
			}

			// Token: 0x06008BE5 RID: 35813
			protected abstract void AddCellRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ref DataAggregateObjList runningValues);

			// Token: 0x06008BE6 RID: 35814 RVA: 0x00238A44 File Offset: 0x00236C44
			internal override void AddScopedRunningValue(DataAggregateObj runningValueObj, bool escalate)
			{
				Microsoft.ReportingServices.ReportProcessing.Tablix tablix = (Microsoft.ReportingServices.ReportProcessing.Tablix)this.m_hierarchyDef.DataRegionDef;
				if (tablix.ProcessOutermostSTCellRunningValues || tablix.ProcessCellRunningValues)
				{
					ReportProcessing.RuntimeTablixGroupRootObj currentOuterHeadingGroupRoot = tablix.CurrentOuterHeadingGroupRoot;
					int headingLevel = currentOuterHeadingGroupRoot.HeadingLevel;
					TablixHeading tablixHeading;
					if (escalate)
					{
						tablixHeading = (TablixHeading)currentOuterHeadingGroupRoot.HierarchyDef;
					}
					else
					{
						tablixHeading = (TablixHeading)this.m_hierarchyDef;
					}
					if (tablix.ProcessOutermostSTCellRunningValues)
					{
						this.AddCellScopedRunningValue(runningValueObj, tablixHeading.OutermostSTCellScopedRVCollections, headingLevel);
						return;
					}
					if (tablix.ProcessCellRunningValues)
					{
						this.AddCellScopedRunningValue(runningValueObj, tablixHeading.CellScopedRVCollections, headingLevel);
						return;
					}
				}
				else
				{
					base.AddScopedRunningValue(runningValueObj, escalate);
				}
			}

			// Token: 0x06008BE7 RID: 35815 RVA: 0x00238AD4 File Offset: 0x00236CD4
			private void AddCellScopedRunningValue(DataAggregateObj runningValueObj, AggregatesImpl[] cellScopedRVLists, int currentOuterHeadingLevel)
			{
				if (cellScopedRVLists != null)
				{
					AggregatesImpl aggregatesImpl = cellScopedRVLists[currentOuterHeadingLevel];
					if (aggregatesImpl == null)
					{
						aggregatesImpl = (cellScopedRVLists[currentOuterHeadingLevel] = new AggregatesImpl(this.m_processingContext.ReportRuntime));
					}
					if (aggregatesImpl.GetAggregateObj(runningValueObj.Name) == null)
					{
						aggregatesImpl.Add(runningValueObj);
					}
				}
			}

			// Token: 0x06008BE8 RID: 35816 RVA: 0x00238B18 File Offset: 0x00236D18
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				Microsoft.ReportingServices.ReportProcessing.Tablix tablix = (Microsoft.ReportingServices.ReportProcessing.Tablix)this.m_hierarchyDef.DataRegionDef;
				if (tablix.ProcessCellRunningValues)
				{
					Global.Tracer.Assert(ReportProcessing.DataActions.PostSortAggregates == dataAction);
					if (this.m_cellRVs != null)
					{
						for (int i = 0; i < this.m_cellRVs.Count; i++)
						{
							this.m_cellRVs[i].Update();
						}
					}
					if (this.m_outerScope != null && tablix.CellPostSortAggregates != null)
					{
						this.m_outerScope.ReadRow(dataAction);
						return;
					}
				}
				else
				{
					if (ReportProcessing.DataActions.PostSortAggregates == dataAction && this.m_outermostSTCellRVs != null)
					{
						for (int j = 0; j < this.m_outermostSTCellRVs.Count; j++)
						{
							this.m_outermostSTCellRVs[j].Update();
						}
					}
					base.ReadRow(dataAction);
				}
			}

			// Token: 0x06008BE9 RID: 35817 RVA: 0x00238BD4 File Offset: 0x00236DD4
			private AggregatesImpl[] CreateScopedCellRVCollections()
			{
				int dynamicHeadingCount = ((Microsoft.ReportingServices.ReportProcessing.Tablix)this.m_hierarchyDef.DataRegionDef).GetDynamicHeadingCount(true);
				if (0 < dynamicHeadingCount)
				{
					return new AggregatesImpl[dynamicHeadingCount];
				}
				return null;
			}

			// Token: 0x06008BEA RID: 35818 RVA: 0x00238C04 File Offset: 0x00236E04
			internal bool GetCellTargetForNonDetailSort()
			{
				if (this.m_outerScope is ReportProcessing.RuntimeTablixObj)
				{
					return this.m_outerScope.TargetForNonDetailSort;
				}
				Global.Tracer.Assert(this.m_outerScope is ReportProcessing.RuntimeTablixGroupLeafObj);
				return ((ReportProcessing.RuntimeTablixGroupLeafObj)this.m_outerScope).GetCellTargetForNonDetailSort();
			}

			// Token: 0x06008BEB RID: 35819 RVA: 0x00238C54 File Offset: 0x00236E54
			internal bool GetCellTargetForSort(int index, bool detailSort)
			{
				if (this.m_outerScope is ReportProcessing.RuntimeTablixObj)
				{
					return this.m_outerScope.IsTargetForSort(index, detailSort);
				}
				Global.Tracer.Assert(this.m_outerScope is ReportProcessing.RuntimeTablixGroupLeafObj);
				return ((ReportProcessing.RuntimeTablixGroupLeafObj)this.m_outerScope).GetCellTargetForSort(index, detailSort);
			}

			// Token: 0x040049E6 RID: 18918
			protected ReportProcessing.RuntimeTablixHeadingsObj m_innerGroupings;

			// Token: 0x040049E7 RID: 18919
			protected TablixHeadingList m_staticHeadingDef;

			// Token: 0x040049E8 RID: 18920
			protected bool m_outermostSubtotal;

			// Token: 0x040049E9 RID: 18921
			protected TablixHeadingList m_innerHeading;

			// Token: 0x040049EA RID: 18922
			protected bool m_processOutermostSTCells;

			// Token: 0x040049EB RID: 18923
			protected DataAggregateObjList m_outermostSTCellRVs;

			// Token: 0x040049EC RID: 18924
			protected DataAggregateObjList m_cellRVs;

			// Token: 0x040049ED RID: 18925
			protected int m_headingIndex = -1;

			// Token: 0x040049EE RID: 18926
			protected int m_headingLevel;

			// Token: 0x040049EF RID: 18927
			protected object m_currentGroupExprValue;
		}

		// Token: 0x02000C87 RID: 3207
		private abstract class RuntimeTablixGroupLeafObj : ReportProcessing.RuntimeGroupLeafObj
		{
			// Token: 0x06008BEC RID: 35820 RVA: 0x00238CA6 File Offset: 0x00236EA6
			internal RuntimeTablixGroupLeafObj(ReportProcessing.RuntimeTablixGroupRootObj groupRoot)
				: base(groupRoot)
			{
			}

			// Token: 0x17002B1E RID: 11038
			// (get) Token: 0x06008BED RID: 35821 RVA: 0x00238CBD File Offset: 0x00236EBD
			internal TablixHeading TablixHeadingDef
			{
				get
				{
					return (TablixHeading)((ReportProcessing.RuntimeTablixGroupRootObj)this.m_hierarchyRoot).HierarchyDef;
				}
			}

			// Token: 0x17002B1F RID: 11039
			// (get) Token: 0x06008BEE RID: 35822 RVA: 0x00238CD4 File Offset: 0x00236ED4
			internal DataAggregateObjList CellPostSortAggregates
			{
				get
				{
					return this.m_cellPostSortAggregates;
				}
			}

			// Token: 0x17002B20 RID: 11040
			// (get) Token: 0x06008BEF RID: 35823 RVA: 0x00238CDC File Offset: 0x00236EDC
			internal Microsoft.ReportingServices.ReportProcessing.Tablix TablixDef
			{
				get
				{
					return (Microsoft.ReportingServices.ReportProcessing.Tablix)this.TablixHeadingDef.DataRegionDef;
				}
			}

			// Token: 0x17002B21 RID: 11041
			// (get) Token: 0x06008BF0 RID: 35824 RVA: 0x00238CEE File Offset: 0x00236EEE
			internal int HeadingLevel
			{
				get
				{
					return ((ReportProcessing.RuntimeTablixGroupRootObj)this.m_hierarchyRoot).HeadingLevel;
				}
			}

			// Token: 0x06008BF1 RID: 35825 RVA: 0x00238D00 File Offset: 0x00236F00
			protected void ConstructorHelper(ReportProcessing.RuntimeTablixGroupRootObj groupRoot, Microsoft.ReportingServices.ReportProcessing.Tablix tablixDef, out bool handleMyDataAction, out ReportProcessing.DataActions innerDataAction)
			{
				TablixHeadingList innerHeading = groupRoot.InnerHeading;
				this.m_dataAction = groupRoot.DataAction;
				handleMyDataAction = false;
				if (this.m_postSortAggregates != null || (this.m_recursiveAggregates != null && this.m_processingContext.SpecialRecursiveAggregates))
				{
					handleMyDataAction = true;
				}
				if (groupRoot.ProcessOutermostSTCells)
				{
					ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, tablixDef.CellAggregates, ref this.m_firstPassCellNonCustomAggs, ref this.m_firstPassCellCustomAggs);
					if (tablixDef.CellPostSortAggregates != null)
					{
						handleMyDataAction = true;
						ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, tablixDef.CellPostSortAggregates, ref this.m_postSortAggregates);
					}
				}
				if (handleMyDataAction)
				{
					innerDataAction = ReportProcessing.DataActions.None;
				}
				else
				{
					innerDataAction = this.m_dataAction;
				}
				if (!this.IsOuterGrouping())
				{
					if (groupRoot.InnerHeading == null)
					{
						TablixHeadingList tablixHeadingList = null;
						TablixHeadingList tablixHeadingList2 = tablixDef.GetOuterHeading();
						int dynamicHeadingCount = tablixDef.GetDynamicHeadingCount(true);
						int num = 0;
						tablixDef.SkipStaticHeading(ref tablixHeadingList2, ref tablixHeadingList);
						while (tablixHeadingList2 != null)
						{
							tablixHeadingList2 = tablixHeadingList2.InnerHeadings();
							tablixDef.SkipStaticHeading(ref tablixHeadingList2, ref tablixHeadingList);
							if (this.m_cellsList == null)
							{
								this.m_cellsList = new ReportProcessing.RuntimeTablixCells[dynamicHeadingCount];
								ReportProcessing.RuntimeDataRegionObj.CreateAggregates(this.m_processingContext, tablixDef.CellPostSortAggregates, ref this.m_cellPostSortAggregates);
							}
							ReportProcessing.RuntimeTablixCells runtimeTablixCells = null;
							if (tablixHeadingList2 == null)
							{
								runtimeTablixCells = new ReportProcessing.RuntimeTablixCells();
							}
							this.m_cellsList[num++] = runtimeTablixCells;
						}
					}
				}
				else
				{
					int[] outerGroupingCounters = ((ReportProcessing.RuntimeTablixObj)tablixDef.RuntimeDataRegionObj).OuterGroupingCounters;
					int headingLevel = groupRoot.HeadingLevel;
					int num2 = outerGroupingCounters[headingLevel] + 1;
					outerGroupingCounters[headingLevel] = num2;
					this.m_groupLeafIndex = num2;
				}
				TablixHeading tablixHeading = (TablixHeading)groupRoot.HierarchyDef;
				Global.Tracer.Assert(tablixHeading.Grouping != null);
				if (tablixHeading.Grouping.Filters != null)
				{
					if (tablixHeading.IsColumn)
					{
						if (groupRoot.HeadingLevel > tablixDef.InnermostColumnFilterLevel)
						{
							tablixDef.InnermostColumnFilterLevel = groupRoot.HeadingLevel;
							return;
						}
					}
					else if (groupRoot.HeadingLevel > tablixDef.InnermostRowFilterLevel)
					{
						tablixDef.InnermostRowFilterLevel = groupRoot.HeadingLevel;
					}
				}
			}

			// Token: 0x06008BF2 RID: 35826
			internal abstract ReportProcessing.RuntimeTablixCell CreateCell(int index, Microsoft.ReportingServices.ReportProcessing.Tablix tablixDef);

			// Token: 0x06008BF3 RID: 35827 RVA: 0x00238EC8 File Offset: 0x002370C8
			internal override void NextRow()
			{
				Microsoft.ReportingServices.ReportProcessing.Tablix tablixDef = this.TablixDef;
				int headingLevel = this.HeadingLevel;
				bool flag = this.IsOuterGrouping();
				if (flag)
				{
					tablixDef.OuterGroupingIndexes[headingLevel] = this.m_groupLeafIndex;
				}
				base.NextRow();
				if (flag)
				{
					tablixDef.SaveOuterGroupingAggregateRowInfo(headingLevel, this.m_processingContext);
				}
				FieldsImpl fieldsImpl = this.m_processingContext.ReportObjectModel.FieldsImpl;
				if (fieldsImpl.AggregationFieldCount == 0 && fieldsImpl.ValidAggregateRow)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_firstPassCellCustomAggs, false);
				}
				if (!this.m_processingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_firstPassCellNonCustomAggs, false);
				}
			}

			// Token: 0x06008BF4 RID: 35828 RVA: 0x00238F6C File Offset: 0x0023716C
			protected override void SendToInner()
			{
				base.SendToInner();
				if (this.m_tablixHeadings != null)
				{
					this.m_tablixHeadings.NextRow();
				}
				if (this.m_cellsList != null)
				{
					Global.Tracer.Assert(!this.IsOuterGrouping());
					Microsoft.ReportingServices.ReportProcessing.Tablix tablixDef = this.TablixDef;
					int[] outerGroupingIndexes = tablixDef.OuterGroupingIndexes;
					for (int i = 0; i < tablixDef.GetDynamicHeadingCount(true); i++)
					{
						int num = outerGroupingIndexes[i];
						ReportProcessing.AggregateRowInfo aggregateRowInfo = new ReportProcessing.AggregateRowInfo();
						aggregateRowInfo.SaveAggregateInfo(this.m_processingContext);
						tablixDef.SetCellAggregateRowInfo(i, this.m_processingContext);
						ReportProcessing.RuntimeTablixCells runtimeTablixCells = this.m_cellsList[i];
						if (runtimeTablixCells != null)
						{
							ReportProcessing.RuntimeTablixCell runtimeTablixCell = runtimeTablixCells[num];
							if (runtimeTablixCell == null)
							{
								runtimeTablixCell = this.CreateCell(i, tablixDef);
								runtimeTablixCells.Add(num, runtimeTablixCell);
							}
							runtimeTablixCell.NextRow();
						}
						aggregateRowInfo.RestoreAggregateInfo(this.m_processingContext);
					}
				}
			}

			// Token: 0x06008BF5 RID: 35829 RVA: 0x00239034 File Offset: 0x00237234
			internal override bool SortAndFilter()
			{
				this.SetupEnvironment();
				ReportProcessing.RuntimeTablixGroupRootObj runtimeTablixGroupRootObj = (ReportProcessing.RuntimeTablixGroupRootObj)this.m_hierarchyRoot;
				bool flag = false;
				if (this.m_innerHeadingList != null && !this.m_tablixHeadings.SortAndFilter())
				{
					Global.Tracer.Assert((ReportProcessing.ProcessingContext.SecondPassOperations.Filtering & this.m_processingContext.SecondPassOperation) > (ReportProcessing.ProcessingContext.SecondPassOperations)0);
					Global.Tracer.Assert(runtimeTablixGroupRootObj.GroupFilters != null);
					runtimeTablixGroupRootObj.GroupFilters.FailFilters = true;
					flag = true;
				}
				bool flag2 = base.SortAndFilter();
				if (flag)
				{
					runtimeTablixGroupRootObj.GroupFilters.FailFilters = false;
				}
				if (flag2 && this.m_cellsList != null)
				{
					for (int i = 0; i < this.m_cellsList.Length; i++)
					{
						if (this.m_cellsList[i] != null)
						{
							this.m_cellsList[i].SortAndFilter();
						}
					}
				}
				return flag2;
			}

			// Token: 0x06008BF6 RID: 35830 RVA: 0x002390F4 File Offset: 0x002372F4
			internal override void CalculateRunningValues()
			{
				Microsoft.ReportingServices.ReportProcessing.Tablix tablixDef = this.TablixDef;
				ReportProcessing.RuntimeTablixGroupRootObj runtimeTablixGroupRootObj = (ReportProcessing.RuntimeTablixGroupRootObj)this.m_hierarchyRoot;
				AggregatesImpl globalRunningValueCollection = runtimeTablixGroupRootObj.GlobalRunningValueCollection;
				ReportProcessing.RuntimeGroupRootObjList groupCollection = runtimeTablixGroupRootObj.GroupCollection;
				bool flag = this.IsOuterGrouping();
				tablixDef.GetDynamicHeadingCount(true);
				if (this.m_processHeading)
				{
					if (this.m_dataRows != null && (ReportProcessing.DataActions.PostSortAggregates & this.m_dataAction) != ReportProcessing.DataActions.None)
					{
						base.ReadRows(ReportProcessing.DataActions.PostSortAggregates);
						this.m_dataRows = null;
					}
					this.m_tablixHeadings.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimeTablixGroupRootObj);
				}
				else if (this.m_innerHeadingList != null)
				{
					this.m_innerHeadingList.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimeTablixGroupRootObj);
				}
				if (flag)
				{
					if (this.m_innerHeadingList == null)
					{
						tablixDef.CurrentOuterHeadingGroupRoot = runtimeTablixGroupRootObj;
						tablixDef.OuterGroupingIndexes[runtimeTablixGroupRootObj.HeadingLevel] = this.m_groupLeafIndex;
						runtimeTablixGroupRootObj.InnerGroupings.CalculateRunningValues(globalRunningValueCollection, groupCollection, runtimeTablixGroupRootObj);
						return;
					}
				}
				else if (this.m_cellsList != null)
				{
					ReportProcessing.RuntimeTablixGroupRootObj currentOuterHeadingGroupRoot = tablixDef.CurrentOuterHeadingGroupRoot;
					ReportProcessing.RuntimeTablixCells runtimeTablixCells = this.m_cellsList[currentOuterHeadingGroupRoot.HeadingLevel];
					Global.Tracer.Assert(runtimeTablixCells != null);
					tablixDef.ProcessCellRunningValues = true;
					runtimeTablixCells.CalculateRunningValues(tablixDef, currentOuterHeadingGroupRoot.CellRVCol, groupCollection, runtimeTablixGroupRootObj, this, currentOuterHeadingGroupRoot.HeadingLevel);
					tablixDef.ProcessCellRunningValues = false;
				}
			}

			// Token: 0x06008BF7 RID: 35831 RVA: 0x00239207 File Offset: 0x00237407
			protected override void ResetScopedRunningValues()
			{
				base.ResetScopedRunningValues();
				this.ResetScopedCellRunningValues();
			}

			// Token: 0x06008BF8 RID: 35832 RVA: 0x00239218 File Offset: 0x00237418
			internal bool IsOuterGrouping()
			{
				ReportProcessing.RuntimeTablixGroupRootObj runtimeTablixGroupRootObj = (ReportProcessing.RuntimeTablixGroupRootObj)this.m_hierarchyRoot;
				return runtimeTablixGroupRootObj.InnerGroupings != null;
			}

			// Token: 0x06008BF9 RID: 35833 RVA: 0x0023923C File Offset: 0x0023743C
			internal override void ReadRow(ReportProcessing.DataActions dataAction)
			{
				if (ReportProcessing.DataActions.UserSort == dataAction)
				{
					ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_processingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
					base.CommonNextRow(this.m_dataRows);
					return;
				}
				if (this.TablixDef.ProcessCellRunningValues)
				{
					if (ReportProcessing.DataActions.PostSortAggregates == dataAction && this.m_cellPostSortAggregates != null)
					{
						ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_processingContext, this.m_cellPostSortAggregates, false);
					}
					((ReportProcessing.IScope)this.m_hierarchyRoot).ReadRow(dataAction);
					return;
				}
				base.ReadRow(dataAction);
				if (ReportProcessing.DataActions.PostSortAggregates == dataAction)
				{
					this.CalculatePreviousAggregates();
				}
			}

			// Token: 0x06008BFA RID: 35834 RVA: 0x002392C5 File Offset: 0x002374C5
			protected virtual bool CalculatePreviousAggregates()
			{
				if (!this.m_processedPreviousAggregates && this.m_processingContext.GlobalRVCollection != null)
				{
					if (this.m_innerHeadingList != null)
					{
						this.m_tablixHeadings.CalculatePreviousAggregates(this.m_processingContext.GlobalRVCollection);
					}
					this.m_processedPreviousAggregates = true;
					return true;
				}
				return false;
			}

			// Token: 0x06008BFB RID: 35835 RVA: 0x00239304 File Offset: 0x00237504
			protected void ResetScopedCellRunningValues()
			{
				ReportProcessing.RuntimeTablixGroupRootObj runtimeTablixGroupRootObj = (ReportProcessing.RuntimeTablixGroupRootObj)this.m_hierarchyRoot;
				if (runtimeTablixGroupRootObj.OutermostSTScopedCellRVCollections != null)
				{
					for (int i = 0; i < runtimeTablixGroupRootObj.OutermostSTScopedCellRVCollections.Length; i++)
					{
						AggregatesImpl aggregatesImpl = runtimeTablixGroupRootObj.OutermostSTScopedCellRVCollections[i];
						if (aggregatesImpl != null)
						{
							foreach (object obj in aggregatesImpl.Objects)
							{
								((DataAggregateObj)obj).Init();
							}
						}
					}
				}
				if (runtimeTablixGroupRootObj.CellScopedRVCollections != null)
				{
					for (int j = 0; j < runtimeTablixGroupRootObj.CellScopedRVCollections.Length; j++)
					{
						AggregatesImpl aggregatesImpl2 = runtimeTablixGroupRootObj.CellScopedRVCollections[j];
						if (aggregatesImpl2 != null)
						{
							foreach (object obj2 in aggregatesImpl2.Objects)
							{
								((DataAggregateObj)obj2).Init();
							}
						}
					}
				}
			}

			// Token: 0x06008BFC RID: 35836 RVA: 0x00239408 File Offset: 0x00237608
			internal override void SetupEnvironment()
			{
				base.SetupEnvironment();
				this.SetupAggregateValues(this.m_firstPassCellNonCustomAggs, this.m_firstPassCellCustomAggs);
			}

			// Token: 0x06008BFD RID: 35837 RVA: 0x00239422 File Offset: 0x00237622
			private void SetupAggregateValues(DataAggregateObjList nonCustomAggCollection, DataAggregateObjList customAggCollection)
			{
				base.SetupAggregates(nonCustomAggCollection);
				base.SetupAggregates(customAggCollection);
			}

			// Token: 0x06008BFE RID: 35838 RVA: 0x00239432 File Offset: 0x00237632
			internal bool GetCellTargetForNonDetailSort()
			{
				return ((ReportProcessing.RuntimeTablixGroupRootObj)this.m_hierarchyRoot).GetCellTargetForNonDetailSort();
			}

			// Token: 0x06008BFF RID: 35839 RVA: 0x00239444 File Offset: 0x00237644
			internal bool GetCellTargetForSort(int index, bool detailSort)
			{
				return ((ReportProcessing.RuntimeTablixGroupRootObj)this.m_hierarchyRoot).GetCellTargetForSort(index, detailSort);
			}

			// Token: 0x040049F0 RID: 18928
			protected ReportProcessing.RuntimeTablixHeadingsObj m_tablixHeadings;

			// Token: 0x040049F1 RID: 18929
			protected ReportProcessing.RuntimeTablixGroupRootObj m_innerHeadingList;

			// Token: 0x040049F2 RID: 18930
			protected DataAggregateObjList m_firstPassCellNonCustomAggs;

			// Token: 0x040049F3 RID: 18931
			protected DataAggregateObjList m_firstPassCellCustomAggs;

			// Token: 0x040049F4 RID: 18932
			protected ReportProcessing.RuntimeTablixCells[] m_cellsList;

			// Token: 0x040049F5 RID: 18933
			protected DataAggregateObjList m_cellPostSortAggregates;

			// Token: 0x040049F6 RID: 18934
			protected int m_groupLeafIndex = -1;

			// Token: 0x040049F7 RID: 18935
			protected bool m_processHeading = true;
		}

		// Token: 0x02000C88 RID: 3208
		private sealed class RuntimeTablixCells : Hashtable
		{
			// Token: 0x17002B22 RID: 11042
			internal ReportProcessing.RuntimeTablixCell this[int index]
			{
				get
				{
					return (ReportProcessing.RuntimeTablixCell)base[index];
				}
				set
				{
					if (base.Count == 0)
					{
						this.m_firstCell = value;
					}
					base[index] = value;
				}
			}

			// Token: 0x06008C02 RID: 35842 RVA: 0x00239489 File Offset: 0x00237689
			internal void Add(int key, ReportProcessing.RuntimeTablixCell cell)
			{
				if (this.m_lastCell != null)
				{
					this.m_lastCell.NextCell = cell;
				}
				else
				{
					this.m_firstCell = cell;
				}
				this.m_lastCell = cell;
				base.Add(key, cell);
			}

			// Token: 0x06008C03 RID: 35843 RVA: 0x002394BC File Offset: 0x002376BC
			internal ReportProcessing.RuntimeTablixCell GetCell(Microsoft.ReportingServices.ReportProcessing.Tablix tablixDef, ReportProcessing.RuntimeTablixGroupLeafObj owner, int cellLevel)
			{
				ReportProcessing.RuntimeTablixGroupRootObj currentOuterHeadingGroupRoot = tablixDef.CurrentOuterHeadingGroupRoot;
				int num = tablixDef.OuterGroupingIndexes[currentOuterHeadingGroupRoot.HeadingLevel];
				ReportProcessing.RuntimeTablixCell runtimeTablixCell = this[num];
				if (runtimeTablixCell == null)
				{
					runtimeTablixCell = owner.CreateCell(cellLevel, tablixDef);
					this[num] = runtimeTablixCell;
				}
				return runtimeTablixCell;
			}

			// Token: 0x06008C04 RID: 35844 RVA: 0x002394FC File Offset: 0x002376FC
			internal void SortAndFilter()
			{
				for (ReportProcessing.RuntimeTablixCell runtimeTablixCell = this.m_firstCell; runtimeTablixCell != null; runtimeTablixCell = runtimeTablixCell.NextCell)
				{
					runtimeTablixCell.SortAndFilter();
				}
			}

			// Token: 0x06008C05 RID: 35845 RVA: 0x00239524 File Offset: 0x00237724
			internal void CalculateRunningValues(Microsoft.ReportingServices.ReportProcessing.Tablix tablixDef, AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup, ReportProcessing.RuntimeTablixGroupLeafObj owner, int cellLevel)
			{
				ReportProcessing.RuntimeTablixCell cell = this.GetCell(tablixDef, owner, cellLevel);
				Global.Tracer.Assert(cell != null);
				cell.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
			}

			// Token: 0x040049F8 RID: 18936
			private ReportProcessing.RuntimeTablixCell m_firstCell;

			// Token: 0x040049F9 RID: 18937
			private ReportProcessing.RuntimeTablixCell m_lastCell;
		}

		// Token: 0x02000C89 RID: 3209
		private abstract class RuntimeTablixCell : ReportProcessing.IScope
		{
			// Token: 0x06008C07 RID: 35847 RVA: 0x00239560 File Offset: 0x00237760
			internal RuntimeTablixCell(ReportProcessing.RuntimeTablixGroupLeafObj owner, int cellLevel, DataAggregateInfoList aggDefs, bool innermost)
			{
				this.m_owner = owner;
				this.m_cellLevel = cellLevel;
				ReportProcessing.RuntimeDataRegionObj.CreateAggregates(owner.ProcessingContext, aggDefs, ref this.m_cellNonCustomAggObjs, ref this.m_cellCustomAggObjs);
				DataAggregateObjList cellPostSortAggregates = this.m_owner.CellPostSortAggregates;
				if (cellPostSortAggregates != null && 0 < cellPostSortAggregates.Count)
				{
					this.m_cellAggValueList = new DataAggregateObjResult[cellPostSortAggregates.Count];
				}
				this.m_innermost = innermost;
			}

			// Token: 0x17002B23 RID: 11043
			// (get) Token: 0x06008C08 RID: 35848 RVA: 0x002395CA File Offset: 0x002377CA
			// (set) Token: 0x06008C09 RID: 35849 RVA: 0x002395D2 File Offset: 0x002377D2
			internal ReportProcessing.RuntimeTablixCell NextCell
			{
				get
				{
					return this.m_nextCell;
				}
				set
				{
					this.m_nextCell = value;
				}
			}

			// Token: 0x06008C0A RID: 35850 RVA: 0x002395DC File Offset: 0x002377DC
			internal virtual void NextRow()
			{
				ReportProcessing.RuntimeDataRegionObj.CommonFirstRow(this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl, ref this.m_firstRowIsAggregate, ref this.m_firstRow);
				this.NextAggregateRow();
				if (!this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl.IsAggregateRow)
				{
					this.NextNonAggregateRow();
				}
			}

			// Token: 0x06008C0B RID: 35851 RVA: 0x00239637 File Offset: 0x00237837
			private void NextNonAggregateRow()
			{
				ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_owner.ProcessingContext, this.m_cellNonCustomAggObjs, false);
				if (this.m_dataRows != null)
				{
					ReportProcessing.RuntimeDetailObj.SaveData(this.m_dataRows, this.m_owner.ProcessingContext);
				}
			}

			// Token: 0x06008C0C RID: 35852 RVA: 0x00239670 File Offset: 0x00237870
			private void NextAggregateRow()
			{
				FieldsImpl fieldsImpl = this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl;
				if (fieldsImpl.ValidAggregateRow && fieldsImpl.AggregationFieldCount == 0 && this.m_cellCustomAggObjs != null)
				{
					ReportProcessing.RuntimeDataRegionObj.UpdateAggregates(this.m_owner.ProcessingContext, this.m_cellCustomAggObjs, false);
				}
			}

			// Token: 0x06008C0D RID: 35853 RVA: 0x002396C2 File Offset: 0x002378C2
			internal virtual void SortAndFilter()
			{
			}

			// Token: 0x06008C0E RID: 35854 RVA: 0x002396C4 File Offset: 0x002378C4
			internal virtual void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				if (this.m_dataRows != null)
				{
					Global.Tracer.Assert(this.m_innermost);
					this.ReadRows();
					this.m_dataRows = null;
				}
				DataAggregateObjList cellPostSortAggregates = this.m_owner.CellPostSortAggregates;
				if (cellPostSortAggregates != null && 0 < cellPostSortAggregates.Count)
				{
					for (int i = 0; i < cellPostSortAggregates.Count; i++)
					{
						this.m_cellAggValueList[i] = cellPostSortAggregates[i].AggregateResult();
						cellPostSortAggregates[i].Init();
					}
				}
			}

			// Token: 0x06008C0F RID: 35855 RVA: 0x00239744 File Offset: 0x00237944
			private void ReadRows()
			{
				for (int i = 0; i < this.m_dataRows.Count; i++)
				{
					FieldImpl[] array = this.m_dataRows[i];
					this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl.SetFields(array);
					((ReportProcessing.IScope)this).ReadRow(ReportProcessing.DataActions.PostSortAggregates);
				}
			}

			// Token: 0x06008C10 RID: 35856 RVA: 0x00239798 File Offset: 0x00237998
			protected void SetupAggregates(DataAggregateObjList aggregates, DataAggregateObjResult[] aggValues)
			{
				if (aggregates != null)
				{
					for (int i = 0; i < aggregates.Count; i++)
					{
						DataAggregateObj dataAggregateObj = aggregates[i];
						this.m_owner.ProcessingContext.ReportObjectModel.AggregatesImpl.Set(dataAggregateObj.Name, dataAggregateObj.AggregateDef, dataAggregateObj.DuplicateNames, (aggValues == null) ? dataAggregateObj.AggregateResult() : aggValues[i]);
					}
				}
			}

			// Token: 0x06008C11 RID: 35857 RVA: 0x00239800 File Offset: 0x00237A00
			protected void SetupEnvironment()
			{
				this.SetupAggregates(this.m_cellNonCustomAggObjs, null);
				this.SetupAggregates(this.m_cellCustomAggObjs, null);
				this.SetupAggregates(this.m_owner.CellPostSortAggregates, this.m_cellAggValueList);
				this.m_owner.ProcessingContext.ReportObjectModel.FieldsImpl.SetFields(this.m_firstRow);
				this.m_owner.ProcessingContext.ReportRuntime.CurrentScope = this;
			}

			// Token: 0x17002B24 RID: 11044
			// (get) Token: 0x06008C12 RID: 35858 RVA: 0x00239874 File Offset: 0x00237A74
			bool ReportProcessing.IScope.TargetForNonDetailSort
			{
				get
				{
					return this.m_owner.GetCellTargetForNonDetailSort();
				}
			}

			// Token: 0x17002B25 RID: 11045
			// (get) Token: 0x06008C13 RID: 35859 RVA: 0x00239881 File Offset: 0x00237A81
			int[] ReportProcessing.IScope.SortFilterExpressionScopeInfoIndices
			{
				get
				{
					Global.Tracer.Assert(false, string.Empty);
					return null;
				}
			}

			// Token: 0x06008C14 RID: 35860 RVA: 0x00239894 File Offset: 0x00237A94
			bool ReportProcessing.IScope.IsTargetForSort(int index, bool detailSort)
			{
				return this.m_owner.GetCellTargetForSort(index, detailSort);
			}

			// Token: 0x06008C15 RID: 35861 RVA: 0x002398A3 File Offset: 0x00237AA3
			string ReportProcessing.IScope.GetScopeName()
			{
				return null;
			}

			// Token: 0x06008C16 RID: 35862 RVA: 0x002398A6 File Offset: 0x00237AA6
			ReportProcessing.IScope ReportProcessing.IScope.GetOuterScope(bool includeSubReportContainingScope)
			{
				return this.m_owner;
			}

			// Token: 0x06008C17 RID: 35863 RVA: 0x002398AE File Offset: 0x00237AAE
			void ReportProcessing.IScope.ReadRow(ReportProcessing.DataActions dataAction)
			{
				this.m_owner.ReadRow(dataAction);
			}

			// Token: 0x06008C18 RID: 35864 RVA: 0x002398BC File Offset: 0x00237ABC
			bool ReportProcessing.IScope.InScope(string scope)
			{
				return this.m_owner.InScope(scope) || this.GetOuterScopeNames().Contains(scope);
			}

			// Token: 0x06008C19 RID: 35865 RVA: 0x002398DC File Offset: 0x00237ADC
			int ReportProcessing.IScope.RecursiveLevel(string scope)
			{
				if (scope == null)
				{
					return 0;
				}
				int num = ((ReportProcessing.IScope)this.m_owner).RecursiveLevel(scope);
				if (-1 != num)
				{
					return num;
				}
				Grouping grouping = this.GetOuterScopeNames()[scope] as Grouping;
				if (grouping != null)
				{
					return grouping.RecursiveLevel;
				}
				return -1;
			}

			// Token: 0x06008C1A RID: 35866 RVA: 0x00239920 File Offset: 0x00237B20
			private Hashtable GetOuterScopeNames()
			{
				Global.Tracer.Assert(this.m_owner.TablixHeadingDef != null);
				TablixHeading tablixHeadingDef = this.m_owner.TablixHeadingDef;
				Microsoft.ReportingServices.ReportProcessing.Tablix tablix = (Microsoft.ReportingServices.ReportProcessing.Tablix)tablixHeadingDef.DataRegionDef;
				Hashtable hashtable = null;
				if (tablixHeadingDef.CellScopeNames == null)
				{
					tablixHeadingDef.CellScopeNames = new Hashtable[tablix.GetDynamicHeadingCount(true)];
				}
				else
				{
					hashtable = tablixHeadingDef.CellScopeNames[this.m_cellLevel];
				}
				if (hashtable == null)
				{
					hashtable = tablix.GetOuterScopeNames(this.m_cellLevel);
					tablixHeadingDef.CellScopeNames[this.m_cellLevel] = hashtable;
				}
				return hashtable;
			}

			// Token: 0x06008C1B RID: 35867 RVA: 0x002399A8 File Offset: 0x00237BA8
			bool ReportProcessing.IScope.TargetScopeMatched(int index, bool detailSort)
			{
				if (this.m_owner.TargetScopeMatched(index, detailSort))
				{
					IDictionaryEnumerator enumerator = this.GetOuterScopeNames().GetEnumerator();
					while (enumerator.MoveNext())
					{
						Grouping grouping = (Grouping)enumerator.Value;
						if ((!detailSort || grouping.SortFilterScopeInfo != null) && (grouping.SortFilterScopeMatched == null || !grouping.SortFilterScopeMatched[index]))
						{
							return false;
						}
					}
					return true;
				}
				return false;
			}

			// Token: 0x06008C1C RID: 35868 RVA: 0x00239A08 File Offset: 0x00237C08
			void ReportProcessing.IScope.GetScopeValues(ReportProcessing.IHierarchyObj targetScopeObj, VariantList[] scopeValues, ref int index)
			{
				this.m_owner.GetScopeValues(targetScopeObj, scopeValues, ref index);
				Global.Tracer.Assert(this.m_innermost);
				Hashtable outerScopeNames = this.GetOuterScopeNames();
				IDictionaryEnumerator enumerator = outerScopeNames.GetEnumerator();
				while (enumerator.MoveNext())
				{
					Grouping grouping = (Grouping)enumerator.Value;
					Global.Tracer.Assert(index < scopeValues.Length);
					int num = index;
					index = num + 1;
					scopeValues[num] = grouping.CurrentGroupExpressionValues;
				}
				Global.Tracer.Assert(this.m_owner.TablixDef.GetDynamicHeadingCount(true) == outerScopeNames.Count);
			}

			// Token: 0x06008C1D RID: 35869 RVA: 0x00239A9C File Offset: 0x00237C9C
			void ReportProcessing.IScope.GetGroupNameValuePairs(Dictionary<string, object> pairs)
			{
				((ReportProcessing.IScope)this.m_owner).GetGroupNameValuePairs(pairs);
				Hashtable outerScopeNames = this.GetOuterScopeNames();
				if (outerScopeNames != null)
				{
					foreach (object obj in outerScopeNames.Values)
					{
						ReportProcessing.RuntimeDataRegionObj.AddGroupNameValuePair(this.m_owner.ProcessingContext, obj as Grouping, pairs);
					}
				}
			}

			// Token: 0x040049FA RID: 18938
			protected ReportProcessing.RuntimeTablixGroupLeafObj m_owner;

			// Token: 0x040049FB RID: 18939
			protected int m_cellLevel;

			// Token: 0x040049FC RID: 18940
			protected DataAggregateObjList m_cellNonCustomAggObjs;

			// Token: 0x040049FD RID: 18941
			protected DataAggregateObjList m_cellCustomAggObjs;

			// Token: 0x040049FE RID: 18942
			protected DataAggregateObjResult[] m_cellAggValueList;

			// Token: 0x040049FF RID: 18943
			protected ReportProcessing.DataRowList m_dataRows;

			// Token: 0x04004A00 RID: 18944
			protected bool m_innermost;

			// Token: 0x04004A01 RID: 18945
			protected FieldImpl[] m_firstRow;

			// Token: 0x04004A02 RID: 18946
			protected bool m_firstRowIsAggregate;

			// Token: 0x04004A03 RID: 18947
			protected ReportProcessing.RuntimeTablixCell m_nextCell;
		}

		// Token: 0x02000C8A RID: 3210
		private sealed class RuntimeCustomReportItemCell : ReportProcessing.RuntimeTablixCell
		{
			// Token: 0x06008C1E RID: 35870 RVA: 0x00239AF4 File Offset: 0x00237CF4
			internal RuntimeCustomReportItemCell(ReportProcessing.RuntimeCustomReportItemGroupLeafObj owner, int cellLevel, DataAggregateInfoList aggDefs, DataCellsList dataRowCells, bool innermost)
				: base(owner, cellLevel, aggDefs, innermost)
			{
				Microsoft.ReportingServices.ReportProcessing.CustomReportItem customReportItem = (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)owner.TablixDef;
				ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
				bool flag = customReportItem.CellRunningValues != null && 0 < customReportItem.CellRunningValues.Count;
				if (this.m_innermost && (flag || this.m_owner.CellPostSortAggregates != null))
				{
					dataActions = ReportProcessing.DataActions.PostSortAggregates;
				}
				if (dataActions != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x06008C1F RID: 35871 RVA: 0x00239B5C File Offset: 0x00237D5C
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, this.m_owner.TablixDef.TablixCellRunningValues, ref this.m_runningValueValues, false);
			}

			// Token: 0x06008C20 RID: 35872 RVA: 0x00239B84 File Offset: 0x00237D84
			internal void CreateInstance(CustomReportItemInstance criInstance)
			{
				base.SetupEnvironment();
				ReportProcessing.RuntimeDataRegionObj.SetupRunningValues(this.m_owner.ProcessingContext, this.m_owner.TablixDef.TablixCellRunningValues, this.m_runningValueValues);
				criInstance.AddCell(this.m_owner.ProcessingContext);
			}

			// Token: 0x04004A04 RID: 18948
			private DataAggregateObjResult[] m_runningValueValues;
		}

		// Token: 0x02000C8B RID: 3211
		private sealed class RuntimeCustomReportItemObj : ReportProcessing.RuntimeTablixObj
		{
			// Token: 0x06008C21 RID: 35873 RVA: 0x00239BC4 File Offset: 0x00237DC4
			internal RuntimeCustomReportItemObj(ReportProcessing.IScope outerScope, Microsoft.ReportingServices.ReportProcessing.CustomReportItem crItem, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, bool onePassProcess)
				: base(outerScope, crItem, ref dataAction, processingContext, onePassProcess)
			{
				bool flag;
				ReportProcessing.DataActions dataActions;
				TablixHeadingList tablixHeadingList;
				TablixHeadingList tablixHeadingList2;
				TablixHeadingList tablixHeadingList3;
				TablixHeadingList tablixHeadingList4;
				base.ConstructorHelper(ref dataAction, onePassProcess, out flag, out dataActions, out tablixHeadingList, out tablixHeadingList2, out tablixHeadingList3, out tablixHeadingList4);
				this.m_innerDataAction = dataActions;
				this.CRIConstructRuntimeStructure(ref dataActions, onePassProcess, tablixHeadingList, tablixHeadingList2, tablixHeadingList3, tablixHeadingList4);
				if (onePassProcess || (tablixHeadingList2 == null && tablixHeadingList == null))
				{
					this.m_subtotalCorner = true;
				}
				base.HandleDataAction(flag, dataActions);
			}

			// Token: 0x06008C22 RID: 35874 RVA: 0x00239C24 File Offset: 0x00237E24
			protected override void ConstructRuntimeStructure(ref ReportProcessing.DataActions innerDataAction)
			{
				TablixHeadingList tablixHeadingList;
				TablixHeadingList tablixHeadingList2;
				TablixHeadingList tablixHeadingList3;
				TablixHeadingList tablixHeadingList4;
				this.m_tablixDef.GetHeadingDefState(out tablixHeadingList, out tablixHeadingList2, out tablixHeadingList3, out tablixHeadingList4);
				this.CRIConstructRuntimeStructure(ref innerDataAction, false, tablixHeadingList, tablixHeadingList2, tablixHeadingList3, tablixHeadingList4);
			}

			// Token: 0x06008C23 RID: 35875 RVA: 0x00239C50 File Offset: 0x00237E50
			private void CRIConstructRuntimeStructure(ref ReportProcessing.DataActions innerDataAction, bool onePassProcess, TablixHeadingList outermostColumns, TablixHeadingList outermostRows, TablixHeadingList staticColumns, TablixHeadingList staticRows)
			{
				ReportProcessing.DataActions dataActions = ReportProcessing.DataActions.None;
				if (this.m_tablixDef.ProcessingInnerGrouping == Pivot.ProcessingInnerGroupings.Column)
				{
					this.m_innerGroupings = (this.m_tablixColumns = new ReportProcessing.RuntimeCustomReportItemHeadingsObj(this, (CustomReportItemHeadingList)outermostColumns, ref dataActions, this.m_processingContext, (CustomReportItemHeadingList)staticColumns, null, outermostRows == null, 0));
					this.m_outerGroupings = (this.m_tablixRows = new ReportProcessing.RuntimeCustomReportItemHeadingsObj(this, (CustomReportItemHeadingList)outermostRows, ref innerDataAction, this.m_processingContext, (CustomReportItemHeadingList)staticRows, (ReportProcessing.RuntimeCustomReportItemHeadingsObj)this.m_innerGroupings, outermostColumns == null, 0));
					return;
				}
				this.m_innerGroupings = (this.m_tablixRows = new ReportProcessing.RuntimeCustomReportItemHeadingsObj(this, (CustomReportItemHeadingList)outermostRows, ref dataActions, this.m_processingContext, (CustomReportItemHeadingList)staticRows, null, outermostColumns == null, 0));
				this.m_outerGroupings = (this.m_tablixColumns = new ReportProcessing.RuntimeCustomReportItemHeadingsObj(this, (CustomReportItemHeadingList)outermostColumns, ref innerDataAction, this.m_processingContext, (CustomReportItemHeadingList)staticColumns, (ReportProcessing.RuntimeCustomReportItemHeadingsObj)this.m_innerGroupings, outermostRows == null, 0));
			}

			// Token: 0x06008C24 RID: 35876 RVA: 0x00239D43 File Offset: 0x00237F43
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, this.m_tablixDef.RunningValues, ref this.m_runningValueValues, false);
			}

			// Token: 0x06008C25 RID: 35877 RVA: 0x00239D68 File Offset: 0x00237F68
			internal override void CreateInstances(ReportItemInstance riInstance, IList instanceList, RenderingPagesRangesList pagesList)
			{
				if (this.m_firstRow == null)
				{
					return;
				}
				Microsoft.ReportingServices.ReportProcessing.CustomReportItem customReportItem = (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)this.m_tablixDef;
				CustomReportItemInstance customReportItemInstance = (CustomReportItemInstance)riInstance;
				if (this.m_outerGroupings == this.m_tablixRows)
				{
					customReportItemInstance.InnerHeadingInstanceList = customReportItemInstance.ColumnInstances;
					((ReportProcessing.RuntimeCustomReportItemHeadingsObj)this.m_outerGroupings).CreateInstances(this, this.m_processingContext, customReportItemInstance, true, null, customReportItemInstance.RowInstances);
					return;
				}
				customReportItemInstance.InnerHeadingInstanceList = customReportItemInstance.RowInstances;
				((ReportProcessing.RuntimeCustomReportItemHeadingsObj)this.m_outerGroupings).CreateInstances(this, this.m_processingContext, customReportItemInstance, true, null, customReportItemInstance.ColumnInstances);
			}

			// Token: 0x06008C26 RID: 35878 RVA: 0x00239DF8 File Offset: 0x00237FF8
			internal void CreateOutermostSubtotalCells(CustomReportItemInstance criInstance, bool outerGroupings)
			{
				if (outerGroupings)
				{
					this.SetupEnvironment();
					((ReportProcessing.RuntimeCustomReportItemHeadingsObj)this.m_innerGroupings).CreateInstances(this, this.m_processingContext, criInstance, false, null, criInstance.InnerHeadingInstanceList);
					return;
				}
				if (this.m_subtotalCorner)
				{
					this.SetupEnvironment();
					criInstance.AddCell(this.m_processingContext);
				}
			}

			// Token: 0x04004A05 RID: 18949
			private bool m_subtotalCorner;
		}

		// Token: 0x02000C8C RID: 3212
		private sealed class RuntimeCustomReportItemHeadingsObj : ReportProcessing.RuntimeTablixHeadingsObj
		{
			// Token: 0x06008C27 RID: 35879 RVA: 0x00239E4C File Offset: 0x0023804C
			internal RuntimeCustomReportItemHeadingsObj(ReportProcessing.IScope owner, CustomReportItemHeadingList headingDef, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, CustomReportItemHeadingList staticHeadingDef, ReportProcessing.RuntimeCustomReportItemHeadingsObj innerGroupings, bool outermostSubtotal, int headingLevel)
				: base(owner, headingDef, ref dataAction, processingContext, staticHeadingDef, innerGroupings, headingLevel)
			{
				if (headingDef != null)
				{
					this.m_tablixHeadings = new ReportProcessing.RuntimeCustomReportItemGroupRootObj(owner, headingDef, 0, ref dataAction, processingContext, innerGroupings, outermostSubtotal, headingLevel);
				}
			}

			// Token: 0x06008C28 RID: 35880 RVA: 0x00239E84 File Offset: 0x00238084
			internal override void CalculatePreviousAggregates(AggregatesImpl globalRVCol)
			{
				if (this.m_staticHeadingDef != null)
				{
					for (int i = 0; i < this.m_staticHeadingDef.Count; i++)
					{
						ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, ((CustomReportItemHeading)this.m_staticHeadingDef[i]).RunningValues, ref this.m_runningValueValues, true);
					}
				}
			}

			// Token: 0x06008C29 RID: 35881 RVA: 0x00239ED4 File Offset: 0x002380D4
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				if (this.m_staticHeadingDef != null && this.m_owner is ReportProcessing.RuntimeCustomReportItemGroupLeafObj)
				{
					for (int i = 0; i < this.m_staticHeadingDef.Count; i++)
					{
						ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRVCol, ((CustomReportItemHeading)this.m_staticHeadingDef[i]).RunningValues, ref this.m_runningValueValues, false);
					}
				}
			}

			// Token: 0x06008C2A RID: 35882 RVA: 0x00239F38 File Offset: 0x00238138
			private void SetupEnvironment(ReportProcessing.ProcessingContext processingContext)
			{
				if (this.m_staticHeadingDef != null && this.m_runningValueValues != null)
				{
					for (int i = 0; i < this.m_staticHeadingDef.Count; i++)
					{
						ReportProcessing.RuntimeDataRegionObj.SetupRunningValues(processingContext, ((CustomReportItemHeading)this.m_staticHeadingDef[i]).RunningValues, this.m_runningValueValues);
					}
				}
			}

			// Token: 0x06008C2B RID: 35883 RVA: 0x00239F90 File Offset: 0x00238190
			internal void CreateInstances(ReportProcessing.RuntimeDataRegionObj outerGroup, ReportProcessing.ProcessingContext processingContext, CustomReportItemInstance criInstance, bool outerGroupings, ReportProcessing.RuntimeTablixGroupRootObj currOuterHeadingGroupRoot, CustomReportItemHeadingInstanceList headingInstances)
			{
				bool flag = outerGroupings || criInstance.CurrentCellOuterIndex == 0;
				CustomReportItemHeadingList customReportItemHeadingList = this.m_staticHeadingDef as CustomReportItemHeadingList;
				this.SetupEnvironment(processingContext);
				int num = ((customReportItemHeadingList != null) ? customReportItemHeadingList.Count : 1);
				CustomReportItemHeadingInstanceList customReportItemHeadingInstanceList = headingInstances;
				for (int i = 0; i < num; i++)
				{
					if (customReportItemHeadingList != null)
					{
						if (flag)
						{
							customReportItemHeadingInstanceList = this.CreateHeadingInstance(processingContext, criInstance, customReportItemHeadingList, headingInstances, outerGroupings, i);
						}
						if (outerGroupings)
						{
							criInstance.CurrentOuterStaticIndex = i;
						}
						else
						{
							criInstance.CurrentInnerStaticIndex = i;
						}
					}
					if (this.m_tablixHeadings != null)
					{
						((Microsoft.ReportingServices.ReportProcessing.CustomReportItem)this.m_tablixHeadings.HierarchyDef.DataRegionDef).CurrentOuterHeadingGroupRoot = currOuterHeadingGroupRoot;
						this.m_tablixHeadings.CreateInstances(criInstance, customReportItemHeadingInstanceList, null);
						if (flag)
						{
							this.SetHeadingSpan(criInstance, customReportItemHeadingInstanceList, outerGroupings, processingContext);
						}
					}
					else if (outerGroup is ReportProcessing.RuntimeCustomReportItemGroupLeafObj)
					{
						ReportProcessing.RuntimeCustomReportItemGroupLeafObj runtimeCustomReportItemGroupLeafObj = (ReportProcessing.RuntimeCustomReportItemGroupLeafObj)outerGroup;
						if (!outerGroupings && runtimeCustomReportItemGroupLeafObj.IsOuterGrouping())
						{
							runtimeCustomReportItemGroupLeafObj.CreateSubtotalOrStaticCells(criInstance, currOuterHeadingGroupRoot, outerGroupings);
						}
						else
						{
							runtimeCustomReportItemGroupLeafObj.CreateInnerGroupingsOrCells(criInstance, currOuterHeadingGroupRoot);
						}
					}
					else
					{
						((ReportProcessing.RuntimeCustomReportItemObj)outerGroup).CreateOutermostSubtotalCells(criInstance, outerGroupings);
					}
				}
				if (customReportItemHeadingList != null && flag)
				{
					this.SetHeadingSpan(criInstance, headingInstances, outerGroupings, processingContext);
				}
			}

			// Token: 0x06008C2C RID: 35884 RVA: 0x0023A0B0 File Offset: 0x002382B0
			private void SetHeadingSpan(CustomReportItemInstance criInstance, CustomReportItemHeadingInstanceList headingInstances, bool outerGroupings, ReportProcessing.ProcessingContext processingContext)
			{
				int num;
				if (outerGroupings)
				{
					num = criInstance.CurrentCellOuterIndex + 1;
				}
				else
				{
					num = criInstance.CurrentCellInnerIndex;
				}
				headingInstances.SetLastHeadingSpan(num, processingContext);
			}

			// Token: 0x06008C2D RID: 35885 RVA: 0x0023A0DC File Offset: 0x002382DC
			private CustomReportItemHeadingInstanceList CreateHeadingInstance(ReportProcessing.ProcessingContext processingContext, CustomReportItemInstance criInstance, CustomReportItemHeadingList headingDef, CustomReportItemHeadingInstanceList headingInstances, bool outerGroupings, int headingIndex)
			{
				int num;
				if (outerGroupings)
				{
					criInstance.NewOuterCells();
					num = criInstance.CurrentCellOuterIndex;
				}
				else
				{
					num = criInstance.CurrentCellInnerIndex;
				}
				CustomReportItemHeadingInstance customReportItemHeadingInstance = new CustomReportItemHeadingInstance(processingContext, num, headingDef[headingIndex], null, 0);
				headingInstances.Add(customReportItemHeadingInstance, processingContext);
				return customReportItemHeadingInstance.SubHeadingInstances;
			}

			// Token: 0x04004A06 RID: 18950
			private DataAggregateObjResult[] m_runningValueValues;
		}

		// Token: 0x02000C8D RID: 3213
		private sealed class RuntimeCustomReportItemGroupRootObj : ReportProcessing.RuntimeTablixGroupRootObj
		{
			// Token: 0x06008C2E RID: 35886 RVA: 0x0023A128 File Offset: 0x00238328
			internal RuntimeCustomReportItemGroupRootObj(ReportProcessing.IScope outerScope, CustomReportItemHeadingList headingDef, int headingIndex, ref ReportProcessing.DataActions dataAction, ReportProcessing.ProcessingContext processingContext, ReportProcessing.RuntimeCustomReportItemHeadingsObj innerGroupings, bool outermostSubtotal, int headingLevel)
				: base(outerScope, headingDef, headingIndex, ref dataAction, processingContext, innerGroupings, outermostSubtotal, headingLevel)
			{
				Global.Tracer.Assert(headingIndex == 0);
				if (this.m_processOutermostSTCells)
				{
					Microsoft.ReportingServices.ReportProcessing.CustomReportItem customReportItem = (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)headingDef[headingIndex].DataRegionDef;
					if (customReportItem.CellRunningValues != null && 0 < customReportItem.CellRunningValues.Count)
					{
						this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
					}
				}
				this.m_saveGroupExprValues = true;
			}

			// Token: 0x06008C2F RID: 35887 RVA: 0x0023A19C File Offset: 0x0023839C
			protected override void NeedProcessDataActions(TablixHeadingList heading)
			{
				CustomReportItemHeadingList customReportItemHeadingList = (CustomReportItemHeadingList)heading;
				if (customReportItemHeadingList != null)
				{
					base.NeedProcessDataActions(customReportItemHeadingList[this.m_headingIndex].RunningValues);
				}
			}

			// Token: 0x06008C30 RID: 35888 RVA: 0x0023A1CC File Offset: 0x002383CC
			internal override void CalculateRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ReportProcessing.RuntimeGroupRootObj lastGroup)
			{
				base.CalculateRunningValues(globalRVCol, groupCol, lastGroup);
				base.AddRunningValues(((CustomReportItemHeading)this.m_hierarchyDef).RunningValues);
				if (this.m_staticHeadingDef != null)
				{
					for (int i = 0; i < this.m_staticHeadingDef.Count; i++)
					{
						base.AddRunningValues(((CustomReportItemHeading)this.m_staticHeadingDef[i]).RunningValues);
					}
				}
				this.m_grouping.Traverse(ReportProcessing.ProcessingStages.RunningValues, this.m_expression.Direction);
				if (this.m_hierarchyDef.Grouping.Name != null)
				{
					groupCol.Remove(this.m_hierarchyDef.Grouping.Name);
				}
			}

			// Token: 0x06008C31 RID: 35889 RVA: 0x0023A274 File Offset: 0x00238474
			protected override void AddCellRunningValues(AggregatesImpl globalRVCol, ReportProcessing.RuntimeGroupRootObjList groupCol, ref DataAggregateObjList runningValues)
			{
				Microsoft.ReportingServices.ReportProcessing.CustomReportItem customReportItem = (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)this.m_hierarchyDef.DataRegionDef;
				if (customReportItem.CellRunningValues != null && 0 < customReportItem.CellRunningValues.Count)
				{
					this.m_dataAction |= ReportProcessing.DataActions.PostSortAggregates;
					if (runningValues == null)
					{
						base.AddRunningValues(customReportItem.CellRunningValues, ref runningValues, globalRVCol, groupCol);
					}
				}
			}
		}

		// Token: 0x02000C8E RID: 3214
		private sealed class RuntimeCustomReportItemGroupLeafObj : ReportProcessing.RuntimeTablixGroupLeafObj
		{
			// Token: 0x06008C32 RID: 35890 RVA: 0x0023A2CC File Offset: 0x002384CC
			internal RuntimeCustomReportItemGroupLeafObj(ReportProcessing.RuntimeCustomReportItemGroupRootObj groupRoot)
				: base(groupRoot)
			{
				Microsoft.ReportingServices.ReportProcessing.CustomReportItem customReportItem = (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)((CustomReportItemHeading)groupRoot.HierarchyDef).DataRegionDef;
				CustomReportItemHeadingList customReportItemHeadingList = (CustomReportItemHeadingList)groupRoot.InnerHeading;
				bool flag = false;
				bool flag2 = base.HandleSortFilterEvent();
				ReportProcessing.DataActions dataActions;
				base.ConstructorHelper(groupRoot, customReportItem, out flag, out dataActions);
				this.m_tablixHeadings = new ReportProcessing.RuntimeCustomReportItemHeadingsObj(this, customReportItemHeadingList, ref dataActions, groupRoot.ProcessingContext, (CustomReportItemHeadingList)groupRoot.StaticHeadingDef, (ReportProcessing.RuntimeCustomReportItemHeadingsObj)groupRoot.InnerGroupings, groupRoot.OutermostSubtotal, groupRoot.HeadingLevel + 1);
				this.m_innerHeadingList = this.m_tablixHeadings.Headings;
				if (!flag)
				{
					this.m_dataAction = dataActions;
				}
				if (flag2)
				{
					this.m_dataAction |= ReportProcessing.DataActions.UserSort;
				}
				if (this.m_dataAction != ReportProcessing.DataActions.None)
				{
					this.m_dataRows = new ReportProcessing.DataRowList();
				}
			}

			// Token: 0x06008C33 RID: 35891 RVA: 0x0023A38D File Offset: 0x0023858D
			internal override ReportProcessing.RuntimeTablixCell CreateCell(int index, Microsoft.ReportingServices.ReportProcessing.Tablix tablixDef)
			{
				return new ReportProcessing.RuntimeCustomReportItemCell(this, index, tablixDef.CellAggregates, ((Microsoft.ReportingServices.ReportProcessing.CustomReportItem)tablixDef).DataRowCells, this.m_innerHeadingList == null);
			}

			// Token: 0x06008C34 RID: 35892 RVA: 0x0023A3B0 File Offset: 0x002385B0
			internal override void CalculateRunningValues()
			{
				base.CalculateRunningValues();
				if (this.m_processHeading)
				{
					ReportProcessing.RuntimeTablixGroupRootObj runtimeTablixGroupRootObj = (ReportProcessing.RuntimeTablixGroupRootObj)this.m_hierarchyRoot;
					AggregatesImpl globalRunningValueCollection = runtimeTablixGroupRootObj.GlobalRunningValueCollection;
					ReportProcessing.RuntimeGroupRootObjList groupCollection = runtimeTablixGroupRootObj.GroupCollection;
					ReportProcessing.RuntimeRICollection.DoneReadingRows(globalRunningValueCollection, ((CustomReportItemHeading)runtimeTablixGroupRootObj.HierarchyDef).RunningValues, ref this.m_runningValueValues, false);
					if (runtimeTablixGroupRootObj.ProcessOutermostSTCells)
					{
						ReportProcessing.RuntimeRICollection.DoneReadingRows(runtimeTablixGroupRootObj.OutermostSTCellRVCol, ((Microsoft.ReportingServices.ReportProcessing.CustomReportItem)base.TablixDef).CellRunningValues, ref this.m_cellRunningValueValues, false);
					}
					this.m_processHeading = false;
				}
				this.ResetScopedRunningValues();
			}

			// Token: 0x06008C35 RID: 35893 RVA: 0x0023A438 File Offset: 0x00238638
			internal override void CreateInstance()
			{
				this.SetupEnvironment();
				ReportProcessing.RuntimeCustomReportItemGroupRootObj runtimeCustomReportItemGroupRootObj = (ReportProcessing.RuntimeCustomReportItemGroupRootObj)this.m_hierarchyRoot;
				Microsoft.ReportingServices.ReportProcessing.CustomReportItem customReportItem = (Microsoft.ReportingServices.ReportProcessing.CustomReportItem)base.TablixDef;
				CustomReportItemInstance customReportItemInstance = (CustomReportItemInstance)runtimeCustomReportItemGroupRootObj.ReportItemInstance;
				CustomReportItemHeadingInstanceList customReportItemHeadingInstanceList = (CustomReportItemHeadingInstanceList)runtimeCustomReportItemGroupRootObj.InstanceList;
				CustomReportItemHeading customReportItemHeading = (CustomReportItemHeading)runtimeCustomReportItemGroupRootObj.HierarchyDef;
				bool flag = base.IsOuterGrouping();
				base.SetupRunningValues(customReportItemHeading.RunningValues, this.m_runningValueValues);
				if (this.m_cellRunningValueValues != null)
				{
					base.SetupRunningValues(customReportItem.CellRunningValues, this.m_cellRunningValueValues);
				}
				ReportProcessing.RuntimeTablixGroupRootObj runtimeTablixGroupRootObj;
				int num;
				if (flag)
				{
					runtimeTablixGroupRootObj = runtimeCustomReportItemGroupRootObj;
					customReportItem.CurrentOuterHeadingGroupRoot = runtimeTablixGroupRootObj;
					customReportItem.OuterGroupingIndexes[runtimeCustomReportItemGroupRootObj.HeadingLevel] = this.m_groupLeafIndex;
					customReportItemInstance.NewOuterCells();
					num = customReportItemInstance.CurrentCellOuterIndex;
				}
				else
				{
					runtimeTablixGroupRootObj = customReportItem.CurrentOuterHeadingGroupRoot;
					num = customReportItemInstance.CurrentCellInnerIndex;
				}
				if (flag || customReportItemInstance.CurrentCellOuterIndex == 0)
				{
					CustomReportItemHeadingInstance customReportItemHeadingInstance = new CustomReportItemHeadingInstance(this.m_processingContext, num, customReportItemHeading, this.m_groupExprValues, this.m_recursiveLevel);
					customReportItemHeadingInstanceList.Add(customReportItemHeadingInstance, this.m_processingContext);
					customReportItemHeadingInstanceList = customReportItemHeadingInstance.SubHeadingInstances;
				}
				((ReportProcessing.RuntimeCustomReportItemHeadingsObj)this.m_tablixHeadings).CreateInstances(this, this.m_processingContext, customReportItemInstance, flag, runtimeTablixGroupRootObj, customReportItemHeadingInstanceList);
			}

			// Token: 0x06008C36 RID: 35894 RVA: 0x0023A55C File Offset: 0x0023875C
			internal void CreateInnerGroupingsOrCells(CustomReportItemInstance criInstance, ReportProcessing.RuntimeTablixGroupRootObj currOuterHeadingGroupRoot)
			{
				this.SetupEnvironment();
				if (base.IsOuterGrouping())
				{
					((ReportProcessing.RuntimeCustomReportItemHeadingsObj)((ReportProcessing.RuntimeCustomReportItemGroupRootObj)this.m_hierarchyRoot).InnerGroupings).CreateInstances(this, this.m_processingContext, criInstance, false, currOuterHeadingGroupRoot, criInstance.InnerHeadingInstanceList);
					return;
				}
				if (currOuterHeadingGroupRoot == null)
				{
					this.CreateOutermostSubtotalCell(criInstance);
					return;
				}
				this.CreateCellInstance(criInstance, currOuterHeadingGroupRoot);
			}

			// Token: 0x06008C37 RID: 35895 RVA: 0x0023A5B8 File Offset: 0x002387B8
			private void CreateCellInstance(CustomReportItemInstance criInstance, ReportProcessing.RuntimeTablixGroupRootObj currOuterHeadingGroupRoot)
			{
				Global.Tracer.Assert(this.m_cellsList != null && this.m_cellsList[currOuterHeadingGroupRoot.HeadingLevel] != null);
				ReportProcessing.RuntimeCustomReportItemCell runtimeCustomReportItemCell = (ReportProcessing.RuntimeCustomReportItemCell)this.m_cellsList[currOuterHeadingGroupRoot.HeadingLevel].GetCell(base.TablixDef, this, currOuterHeadingGroupRoot.HeadingLevel);
				Global.Tracer.Assert(runtimeCustomReportItemCell != null);
				runtimeCustomReportItemCell.CreateInstance(criInstance);
			}

			// Token: 0x06008C38 RID: 35896 RVA: 0x0023A624 File Offset: 0x00238824
			private void CreateOutermostSubtotalCell(CustomReportItemInstance criInstance)
			{
				this.SetupEnvironment();
				criInstance.AddCell(this.m_processingContext);
			}

			// Token: 0x06008C39 RID: 35897 RVA: 0x0023A639 File Offset: 0x00238839
			internal void CreateSubtotalOrStaticCells(CustomReportItemInstance criInstance, ReportProcessing.RuntimeTablixGroupRootObj currOuterHeadingGroupRoot, bool outerGroupingSubtotal)
			{
				ReportProcessing.RuntimeCustomReportItemHeadingsObj runtimeCustomReportItemHeadingsObj = (ReportProcessing.RuntimeCustomReportItemHeadingsObj)((ReportProcessing.RuntimeCustomReportItemGroupRootObj)this.m_hierarchyRoot).InnerGroupings;
				if (base.IsOuterGrouping() && !outerGroupingSubtotal)
				{
					this.CreateOutermostSubtotalCell(criInstance);
					return;
				}
				this.CreateInnerGroupingsOrCells(criInstance, currOuterHeadingGroupRoot);
			}

			// Token: 0x04004A07 RID: 18951
			private DataAggregateObjResult[] m_runningValueValues;

			// Token: 0x04004A08 RID: 18952
			private DataAggregateObjResult[] m_cellRunningValueValues;
		}
	}
}
